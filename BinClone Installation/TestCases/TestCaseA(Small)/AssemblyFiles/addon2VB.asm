;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	   Copyright (c) 2010 by Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B231-7414-99			    |
; |		       NCFTA Canada/Concordia University		    |
; +-------------------------------------------------------------------------+
;
;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	   Copyright (c) 2010 by Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B231-7414-99			    |
; |		       NCFTA Canada/Concordia University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	9BF923D27633F37705F03CD4FC1B4A7D
; Input	CRC32 :	E8E59A83

; File Name   :	c:\Users\farhadi\Desktop\dll4\addon2VB.dll
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	10000000
; Section 1. (virtual address 00001000)
; Virtual size			: 00002F90 (  12176.)
; Section size in file		: 00003000 (  12288.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: default
; Exported entry   7. _adClick@4
; OS type	  :  MS	Windows
; Application type:  DLL 32bit

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 10001000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; __stdcall adClick(x)
		public _adClick@4


; ---------------------------------------------------------------------------
		align 10h
; Exported entry   4. _LoadAdImage@8

; =============== S U B	R O U T	I N E =======================================


; __stdcall LoadAdImage(x, x)
		public _LoadAdImage@8


; ---------------------------------------------------------------------------
		align 10h
; Exported entry   6. _UnloadAdImage@4

; =============== S U B	R O U T	I N E =======================================


; __stdcall UnloadAdImage(x)
		public _UnloadAdImage@4


; ---------------------------------------------------------------------------
		align 10h
; Exported entry   1. _CT_Draw@4

; =============== S U B	R O U T	I N E =======================================


; __stdcall CT_Draw(x)
		public _CT_Draw@4
_CT_Draw@4	proc near		; DATA XREF: .rdata:off_10004378o

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		push	edi
		mov	eax, [esi+4]
		push	eax		; hWnd
		call	ds:GetDC
		mov	edi, eax
		mov	eax, [esi+10h]
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_1000116C
		mov	ecx, [esi+4]
		push	edi		; hDC
		push	ecx		; hWnd
		call	ds:ReleaseDC
		pop	edi
		pop	esi
		pop	ebx
		retn	4
; ---------------------------------------------------------------------------

loc_1000116C:				; CODE XREF: CT_Draw(x)+19j
		push	eax
		call	ds:_CT_MgmtGetALStatus@4 ; CT_MgmtGetALStatus(x)
		mov	edx, eax
		and	edx, 1
		cmp	dl, 1
		jnz	loc_10001280
		and	eax, 80000000h
		cmp	eax, 80000000h
		jz	short loc_1000119E
		mov	ecx, [esi+4]
		push	edi		; hDC
		push	ecx		; hWnd
		call	ds:ReleaseDC
		pop	edi
		pop	esi
		pop	ebx
		retn	4
; ---------------------------------------------------------------------------

loc_1000119E:				; CODE XREF: CT_Draw(x)+4Bj
		mov	eax, [esi+8]
		test	eax, eax
		jnz	short loc_100011B6
		mov	edx, [esi+4]
		push	edi		; hDC
		push	edx		; hWnd
		call	ds:ReleaseDC
		pop	edi
		pop	esi
		pop	ebx
		retn	4
; ---------------------------------------------------------------------------

loc_100011B6:				; CODE XREF: CT_Draw(x)+63j
		push	26h		; index
		push	edi		; hdc
		call	ds:GetDeviceCaps
		test	al, 1
		jz	loc_10001280
		test	al, 8
		jz	loc_10001280
		mov	eax, [esi+8]
		mov	ebx, 100h
		mov	eax, [eax+20h]
		test	eax, eax
		jz	short loc_100011E0
		mov	ebx, eax

loc_100011E0:				; CODE XREF: CT_Draw(x)+9Cj
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_100011F8
		push	1		; bForceBkgd
		push	eax		; hPal
		push	edi		; hdc
		call	ds:SelectPalette
		push	edi		; hdc
		call	ds:RealizePalette

loc_100011F8:				; CODE XREF: CT_Draw(x)+A5j
		mov	eax, [esi+8]
		push	0		; ColorUse
		push	eax		; lpbmi
		mov	ecx, [eax+8]
		lea	edx, [eax+ebx*4+28h]
		mov	eax, [eax+4]
		push	edx		; lpvBits
		push	ecx		; cLines
		push	0		; StartScan
		push	0		; ySrc
		push	0		; xSrc
		push	ecx		; h
		push	eax		; w
		push	0		; yDest
		push	0		; xDest
		push	edi		; hdc
		call	ds:SetDIBitsToDevice
		test	eax, eax
		jg	short loc_1000123E
		mov	ecx, [esi+10h]
		push	3
		push	ecx
		call	ds:_CT_MgmtALDisplayResult@8 ; CT_MgmtALDisplayResult(x,x)
		mov	edx, [esi+4]
		push	edi		; hDC
		push	edx		; hWnd
		call	ds:ReleaseDC
		pop	edi
		pop	esi
		pop	ebx
		retn	4
; ---------------------------------------------------------------------------

loc_1000123E:				; CODE XREF: CT_Draw(x)+DFj
		mov	edx, [esi+8]
		cmp	eax, [edx+8]
		jge	short loc_10001263
		mov	eax, [esi+10h]
		push	1
		push	eax
		call	ds:_CT_MgmtALDisplayResult@8 ; CT_MgmtALDisplayResult(x,x)
		mov	edx, [esi+4]
		push	edi		; hDC
		push	edx		; hWnd
		call	ds:ReleaseDC
		pop	edi
		pop	esi
		pop	ebx
		retn	4
; ---------------------------------------------------------------------------

loc_10001263:				; CODE XREF: CT_Draw(x)+104j
		mov	ecx, [esi+10h]
		push	0
		push	ecx
		call	ds:_CT_MgmtALDisplayResult@8 ; CT_MgmtALDisplayResult(x,x)
		mov	edx, [esi+4]
		push	edi		; hDC
		push	edx		; hWnd
		call	ds:ReleaseDC
		pop	edi
		pop	esi
		pop	ebx
		retn	4
; ---------------------------------------------------------------------------

loc_10001280:				; CODE XREF: CT_Draw(x)+3Bj
					; CT_Draw(x)+81j ...
		mov	eax, [esi+4]
		push	edi		; hDC
		push	eax		; hWnd
		call	ds:ReleaseDC
		pop	edi
		pop	esi
		pop	ebx
		retn	4
_CT_Draw@4	endp

; ---------------------------------------------------------------------------
		align 10h

loc_100012A0:				; DATA XREF: CreateAdWindow(x,x,x)+1Bo
		mov	eax, [esp+8]
		cmp	eax, 202h
		jz	short loc_100012C4
		mov	ecx, [esp+10h]
		mov	edx, [esp+0Ch]
		push	ecx
		push	edx
		push	eax
		mov	eax, [esp+10h]
		push	eax
		call	ds:DefWindowProcA
		retn	10h
; ---------------------------------------------------------------------------

loc_100012C4:				; CODE XREF: .text:100012A9j
		mov	eax, Memory
		test	eax, eax
		jz	short loc_100012F8
		mov	ecx, [esp+4]

loc_100012D1:				; CODE XREF: .text:100012DAj
		cmp	ecx, [eax+8]
		jz	short loc_100012DF
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_100012D1
		retn	10h
; ---------------------------------------------------------------------------

loc_100012DF:				; CODE XREF: .text:100012D4j
		mov	ecx, [esp+10h]
		mov	edx, [esp+0Ch]
		mov	eax, [eax+0Ch]
		push	ecx
		push	edx
		push	202h
		push	eax
		call	ds:PostMessageA

loc_100012F8:				; CODE XREF: .text:100012CBj
		xor	eax, eax
		retn	10h
; ---------------------------------------------------------------------------
		align 10h
; Exported entry   2. _CreateAdWindow@12

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	CreateAdWindow(HINSTANCE hInstance, HWND hWndParent, HWND hWnd)
		public _CreateAdWindow@12


; ---------------------------------------------------------------------------
		align 10h
; Exported entry   5. _MoveAdWindow@12

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	MoveAdWindow(int, int, HWND hWnd)
		public _MoveAdWindow@12


; ---------------------------------------------------------------------------
		align 10h
; Exported entry   3. _DestroyAdWindow@4

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	DestroyAdWindow(HWND hWnd)
		public _DestroyAdWindow@4


; ---------------------------------------------------------------------------
		align 10h
; [00000068 BYTES: COLLAPSED FUNCTION _free. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [000000AB BYTES: COLLAPSED FUNCTION _calloc. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000014 BYTES: COLLAPSED FUNCTION _malloc. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000044 BYTES: COLLAPSED FUNCTION __nh_malloc. PRESS KEYPAD	"+" TO EXPAND]
		align 10h
; [00000055 BYTES: COLLAPSED FUNCTION __heap_alloc. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000163 BYTES: COLLAPSED FUNCTION _CRT_INIT(x,x,x).	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [000000AD BYTES: COLLAPSED FUNCTION DllEntryPoint. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000034 BYTES: COLLAPSED FUNCTION __amsg_exit. PRESS KEYPAD	"+" TO EXPAND]
; ---------------------------------------------------------------------------
		add	esp, 4
		retn
; ---------------------------------------------------------------------------
		align 10h
; [00000037 BYTES: COLLAPSED FUNCTION __heap_init. PRESS KEYPAD	"+" TO EXPAND]
		align 10h
; [00000037 BYTES: COLLAPSED FUNCTION __heap_term. PRESS KEYPAD	"+" TO EXPAND]
		align 10h
; [0000002B BYTES: COLLAPSED FUNCTION __mtinitlocks. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000072 BYTES: COLLAPSED FUNCTION __mtdeletelocks. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000076 BYTES: COLLAPSED FUNCTION __lock. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000016 BYTES: COLLAPSED FUNCTION __unlock.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000036 BYTES: COLLAPSED FUNCTION __lock_file. PRESS KEYPAD	"+" TO EXPAND]
		align 10h
; [00000028 BYTES: COLLAPSED FUNCTION __lock_file2. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000036 BYTES: COLLAPSED FUNCTION __unlock_file. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000028 BYTES: COLLAPSED FUNCTION __unlock_file2. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000162 BYTES: COLLAPSED FUNCTION ___sbh_new_region. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [0000005B BYTES: COLLAPSED FUNCTION ___sbh_release_region. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [000000CD BYTES: COLLAPSED FUNCTION ___sbh_decommit_pages. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000059 BYTES: COLLAPSED FUNCTION ___sbh_find_block. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000053 BYTES: COLLAPSED FUNCTION ___sbh_free_block. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000233 BYTES: COLLAPSED FUNCTION ___sbh_alloc_block. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000172 BYTES: COLLAPSED FUNCTION ___sbh_alloc_block_from_page. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000020 BYTES: COLLAPSED FUNCTION __callnewh. PRESS	KEYPAD "+" TO EXPAND]
; [00000030 BYTES: COLLAPSED FUNCTION __cinit. PRESS KEYPAD "+"	TO EXPAND]
; [00000012 BYTES: COLLAPSED FUNCTION __exit. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [0000000F BYTES: COLLAPSED FUNCTION __cexit. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [000000AE BYTES: COLLAPSED FUNCTION _doexit. PRESS KEYPAD "+"	TO EXPAND]
; ---------------------------------------------------------------------------
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h
; [0000000B BYTES: COLLAPSED FUNCTION __lockexit. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [0000000B BYTES: COLLAPSED FUNCTION __unlockexit. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000020 BYTES: COLLAPSED FUNCTION __initterm. PRESS	KEYPAD "+" TO EXPAND]
; [0000005C BYTES: COLLAPSED FUNCTION __mtinit.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000021 BYTES: COLLAPSED FUNCTION __mtterm.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000013 BYTES: COLLAPSED FUNCTION __initptd. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [0000007A BYTES: COLLAPSED FUNCTION __getptd.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [0000009D BYTES: COLLAPSED FUNCTION __freeptd. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [0000020C BYTES: COLLAPSED FUNCTION __ioinit.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [0000005F BYTES: COLLAPSED FUNCTION __ioterm.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [000000EE BYTES: COLLAPSED FUNCTION __setenvp. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [0000009E BYTES: COLLAPSED FUNCTION __setargv. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [0000020F BYTES: COLLAPSED FUNCTION _parse_cmdline. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [0000021B BYTES: COLLAPSED FUNCTION __setmbcp. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [0000004D BYTES: COLLAPSED FUNCTION _getSystemCP. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000038 BYTES: COLLAPSED FUNCTION _CPtoLCID. PRESS KEYPAD "+" TO EXPAND]
off_10002F28	dd offset loc_10002F0D	; DATA XREF: _CPtoLCID+16r
		dd offset loc_10002F13	; jump table for switch	statement
		dd offset loc_10002F19
		dd offset loc_10002F1F
		dd offset loc_10002F25
byte_10002F3C	db	0,     4,     4,     4 ; DATA XREF: _CPtoLCID+10r
		db	1,     4,     4,     4 ; indirect table	for switch statement
		db	4,     4,     4,     4
		db	4,     4,     4,     4
		db	4,     2,     3
		align 10h
; [0000002D BYTES: COLLAPSED FUNCTION _setSBCS.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [0000000B BYTES: COLLAPSED FUNCTION ___initmbctable. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000156 BYTES: COLLAPSED FUNCTION ___crtGetEnvironmentStringsA. PRESS KEYPAD "+" TO	EXPAND]
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_100030F0	proc near		; CODE XREF: _CRT_INIT(x,x,x)+2Fp
					; _CRT_INIT(x,x,x)+58p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	dword_1000776C,	eax
		retn
sub_100030F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
_DllMain@12	proc near		; CODE XREF: DllEntryPoint+61p

hinstDLL	= dword	ptr  4
fdwReason	= dword	ptr  8
lpvReserved	= dword	ptr  0Ch

		mov	eax, 1
		retn	0Ch
_DllMain@12	endp

; ---------------------------------------------------------------------------
		align 10h
; [0000003D BYTES: COLLAPSED FUNCTION __FF_MSGBANNER. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [000001D6 BYTES: COLLAPSED FUNCTION __NMSG_WRITE. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [000000BC BYTES: COLLAPSED FUNCTION ___initstdio. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000014 BYTES: COLLAPSED FUNCTION ___endstdio. PRESS KEYPAD	"+" TO EXPAND]
		align 10h
; [0000008F BYTES: COLLAPSED FUNCTION ___crtMessageBoxA. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [000000FE BYTES: COLLAPSED FUNCTION _strncpy.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000093 BYTES: COLLAPSED FUNCTION __fcloseall. PRESS KEYPAD	"+" TO EXPAND]
		align 10h
; [00000035 BYTES: COLLAPSED FUNCTION __fflush_lk. PRESS KEYPAD	"+" TO EXPAND]
		align 10h
; [0000006E BYTES: COLLAPSED FUNCTION __flush. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [0000000B BYTES: COLLAPSED FUNCTION __flushall. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [000000BB BYTES: COLLAPSED FUNCTION _flsall. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [0000003D BYTES: COLLAPSED FUNCTION _fclose. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000065 BYTES: COLLAPSED FUNCTION __fclose_lk. PRESS KEYPAD	"+" TO EXPAND]
		align 10h
; [0000009E BYTES: COLLAPSED FUNCTION __commit.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000072 BYTES: COLLAPSED FUNCTION __write. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000209 BYTES: COLLAPSED FUNCTION __write_lk. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000068 BYTES: COLLAPSED FUNCTION __close. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000090 BYTES: COLLAPSED FUNCTION __close_lk. PRESS	KEYPAD "+" TO EXPAND]
; [00000033 BYTES: COLLAPSED FUNCTION __freebuf. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000093 BYTES: COLLAPSED FUNCTION __free_osfhnd. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000049 BYTES: COLLAPSED FUNCTION __get_osfhandle. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000065 BYTES: COLLAPSED FUNCTION __lock_fhandle. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000022 BYTES: COLLAPSED FUNCTION __unlock_fhandle.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000073 BYTES: COLLAPSED FUNCTION __dosmaperr. PRESS KEYPAD	"+" TO EXPAND]
		align 10h
; [00000009 BYTES: COLLAPSED FUNCTION __errno. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000009 BYTES: COLLAPSED FUNCTION ___doserrno. PRESS KEYPAD	"+" TO EXPAND]
		align 10h
; [00000080 BYTES: COLLAPSED FUNCTION __lseek_lk. PRESS	KEYPAD "+" TO EXPAND]
		align 80h
_text		ends

; Section 2. (virtual address 00004000)
; Virtual size			: 00000450 (   1104.)
; Section size in file		: 00000600 (   1536.)
; Offset to raw	data for section: 00003400
; Flags	40000040: Data Readable
; Alignment	: default
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 10004000h
; char ProcName[]
ProcName	db 'IsTNT',0            ; DATA XREF: _CRT_INIT(x,x,x)+46o
		align 4
; char ModuleName[]
ModuleName	db 'kernel32.dll',0     ; DATA XREF: _CRT_INIT(x,x,x):loc_10001727o
		align 4
aRuntimeError	db 'runtime error ',0   ; DATA XREF: .data:100072E4o
		align 4
asc_10004028	db 0Dh,0Ah,0		; DATA XREF: .data:100072DCo
		align 4
aTlossError	db 'TLOSS error',0Dh,0Ah,0 ; DATA XREF: .data:100072D4o
		align 4
aSingError	db 'SING error',0Dh,0Ah,0 ; DATA XREF: .data:100072CCo
		align 4
aDomainError	db 'DOMAIN error',0Dh,0Ah,0 ; DATA XREF: .data:100072C4o
		align 4
aR6028UnableToI	db 'R6028',0Dh,0Ah      ; DATA XREF: .data:100072BCo
		db '- unable to initialize heap',0Dh,0Ah,0
		align 4
aR6027NotEnough	db 'R6027',0Dh,0Ah      ; DATA XREF: .data:100072B4o
		db '- not enough space for lowio initialization',0Dh,0Ah,0
		align 4
aR6026NotEnough	db 'R6026',0Dh,0Ah      ; DATA XREF: .data:100072ACo
		db '- not enough space for stdio initialization',0Dh,0Ah,0
		align 4
aR6025PureVirtu	db 'R6025',0Dh,0Ah      ; DATA XREF: .data:100072A4o
		db '- pure virtual function call',0Dh,0Ah,0
		align 4
aR6024NotEnough	db 'R6024',0Dh,0Ah      ; DATA XREF: .data:1000729Co
		db '- not enough space for _onexit/atexit table',0Dh,0Ah,0
		align 4
aR6019UnableToO	db 'R6019',0Dh,0Ah      ; DATA XREF: .data:10007294o
		db '- unable to open console device',0Dh,0Ah,0
		align 10h
aR6018Unexpecte	db 'R6018',0Dh,0Ah      ; DATA XREF: .data:1000728Co
		db '- unexpected heap error',0Dh,0Ah,0
		align 4
aR6017Unexpecte	db 'R6017',0Dh,0Ah      ; DATA XREF: .data:10007284o
		db '- unexpected multithread lock error',0Dh,0Ah,0
		align 4
aR6016NotEnough	db 'R6016',0Dh,0Ah      ; DATA XREF: .data:1000727Co
		db '- not enough space for thread data',0Dh,0Ah,0
aAbnormalProgra	db 0Dh,0Ah		; DATA XREF: .data:10007274o
		db 'abnormal program termination',0Dh,0Ah,0
		align 4
aR6009NotEnough	db 'R6009',0Dh,0Ah      ; DATA XREF: .data:1000726Co
		db '- not enough space for environment',0Dh,0Ah,0
aR6008NotEnough	db 'R6008',0Dh,0Ah      ; DATA XREF: .data:10007264o
		db '- not enough space for arguments',0Dh,0Ah,0
		align 4
aR6002FloatingP	db 'R6002',0Dh,0Ah      ; DATA XREF: .data:lpBuffero
		db '- floating point not loaded',0Dh,0Ah,0
		align 4
aMicrosoftVisua	db 'Microsoft Visual C++ Runtime Library',0 ; DATA XREF: __NMSG_WRITE+128o
		align 4
asc_100042CC	db 0Ah			; DATA XREF: __NMSG_WRITE+11Ao
		db 0Ah,0
		align 10h
aRuntimeErrorPr	db 'Runtime Error!',0Ah ; DATA XREF: __NMSG_WRITE+D9o
		db 0Ah
		db 'Program: ',0
		align 4
; char Source[]
Source		db '...',0              ; DATA XREF: __NMSG_WRITE+C4o
aProgramNameUnk	db '<program name unknown>',0 ; DATA XREF: __NMSG_WRITE+7Ao
		align 4
; char aGetlastactivep[]
aGetlastactivep	db 'GetLastActivePopup',0 ; DATA XREF: ___crtMessageBoxA+3Eo
		align 4
; char aGetactivewindo[]
aGetactivewindo	db 'GetActiveWindow',0  ; DATA XREF: ___crtMessageBoxA+36o
; char aMessageboxa[]
aMessageboxa	db 'MessageBoxA',0      ; DATA XREF: ___crtMessageBoxA+25o
; char LibFileName[]
LibFileName	db 'user32.dll',0       ; DATA XREF: ___crtMessageBoxA+Eo
		align 10h
;
; Export directory for Addon2VB.dll
;
		dd 0			; Characteristics
		dd 375E7F45h		; TimeDateStamp: Wed Jun 09 10:50:45 1999
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd rva aAddon2vb_dll	; Name
		dd 1			; Base
		dd 8			; NumberOfFunctions
		dd 8			; NumberOfNames
		dd rva off_10004378	; AddressOfFunctions
		dd rva off_10004398	; AddressOfNames
		dd rva word_100043B8	; AddressOfNameOrdinals
;
; Export Address Table for Addon2VB.dll
;
off_10004378	dd rva _CT_Draw@4, rva _CreateAdWindow@12, rva _DestroyAdWindow@4
					; DATA XREF: .rdata:1000436Co
		dd rva _LoadAdImage@8, rva _MoveAdWindow@12, rva _UnloadAdImage@4 ; adClick(x)
		dd rva _adClick@4, rva _getPointer@4
;
; Export Names Table for Addon2VB.dll
;
off_10004398	dd rva a_ct_draw@4, rva	a_createadwindo, rva a_destroyadwind
					; DATA XREF: .rdata:10004370o
		dd rva a_loadadimage@8,	rva a_moveadwindow@, rva a_unloadadimage ; "_CT_Draw@4"
		dd rva a_adclick@4, rva	a_getpointer@4
;
; Export Ordinals Table	for Addon2VB.dll
;
word_100043B8	dw 0, 1, 2, 3, 4, 5, 6,	7 ; DATA XREF: .rdata:10004374o
aAddon2vb_dll	db 'Addon2VB.dll',0     ; DATA XREF: .rdata:1000435Co
a_ct_draw@4	db '_CT_Draw@4',0       ; DATA XREF: .rdata:off_10004398o
a_createadwindo	db '_CreateAdWindow@12',0 ; DATA XREF: .rdata:off_10004398o
a_destroyadwind	db '_DestroyAdWindow@4',0 ; DATA XREF: .rdata:off_10004398o
a_loadadimage@8	db '_LoadAdImage@8',0   ; DATA XREF: .rdata:off_10004398o
a_moveadwindow@	db '_MoveAdWindow@12',0 ; DATA XREF: .rdata:off_10004398o
a_unloadadimage	db '_UnloadAdImage@4',0 ; DATA XREF: .rdata:off_10004398o
a_adclick@4	db '_adClick@4',0       ; DATA XREF: .rdata:off_10004398o
a_getpointer@4	db '_getPointer@4',0    ; DATA XREF: .rdata:off_10004398o
		align 1000h
_rdata		ends

; Section 3. (virtual address 00005000)
; Virtual size			: 00003BDC (  15324.)
; Section size in file		: 00002800 (  10240.)
; Offset to raw	data for section: 00003A00
; Flags	C0000040: Data Readable	Writable
; Alignment	: default
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 10005000h
dword_10005000	dd 0			; DATA XREF: __cinit+22o
dword_10005004	dd 0			; DATA XREF: __cinit+1Do
dword_10005008	dd 0			; DATA XREF: __cinit+10o
		dd offset ___initstdio
dword_10005010	dd 0			; DATA XREF: __cinit:loc_1000234Bo
dword_10005014	dd 0			; DATA XREF: _doexit+71o
		dd offset ___endstdio
dword_1000501C	dd 0			; DATA XREF: _doexit:loc_1000240Co
dword_10005020	dd 0			; DATA XREF: _doexit+83o
dword_10005024	dd 3 dup(0)		; DATA XREF: _doexit:loc_1000241Eo
; char Operation[]
Operation	db 'open',0             ; DATA XREF: adClick(x)+16o
		align 4
; char WindowName[]
WindowName	db 'STATIC',0           ; DATA XREF: CreateAdWindow(x,x,x)+55o
					; CreateAdWindow(x,x,x)+C5o ...
		align 10h
off_10005040	dd offset __exit	; DATA XREF: __amsg_exit+2Er
		dd 1000h
; LPCRITICAL_SECTION dword_10005048
dword_10005048	dd 0			; DATA XREF: __mtdeletelocks+8o
					; __lock+7r ...
; LPCRITICAL_SECTION off_1000504C
off_1000504C	dd offset dword_10007770 ; DATA	XREF: __mtinitlocks+21r
					; __mtdeletelocks+2Bo ...
		dd 7 dup(0)
; LPCRITICAL_SECTION off_1000506C
off_1000506C	dd offset dword_100077A0 ; DATA	XREF: __mtinitlocks+18r
					; __mtdeletelocks+23o ...
		dd 3 dup(0)
; LPCRITICAL_SECTION off_1000507C
off_1000507C	dd offset dword_100077B8 ; DATA	XREF: __mtinitlocks+Fr
					; __mtdeletelocks+1Bo ...
		dd 3 dup(0)
; LPCRITICAL_SECTION lpCriticalSection
lpCriticalSection dd offset dword_10007788 ; DATA XREF:	__mtinitlocksr
					; __mtdeletelocks+13o ...
		dd 1Eh dup(0)
off_10005108	dd offset off_10005108	; DATA XREF: __heap_term+8o
					; __heap_term+20o ...
; LPVOID lpMem
lpMem		dd offset off_10005108	; DATA XREF: ___sbh_new_region:loc_10001C83r
					; ___sbh_new_region+8Cw ...
		dd offset dword_10005120
		dd offset dword_10005120
dword_10005118	dd 0FFFFFFFFh		; DATA XREF: ___sbh_new_regionr
					; ___sbh_release_region:loc_10001DBFw
		dd 0FFFFFFFFh
dword_10005120	dd 0F0h, 0F1h, 800h dup(0) ; DATA XREF:	.data:10005110o
					; .data:10005114o
off_10007128	dd offset off_10005108	; DATA XREF: ___sbh_release_region+16r
					; ___sbh_release_region+21w ...
dword_1000712C	dd 1E0h			; DATA XREF: _calloc+30r
					; __heap_alloc+9r
; DWORD	dwTlsIndex
dwTlsIndex	dd 0FFFFFFFFh		; DATA XREF: __mtinit+Fw __mtinit+28r	...
		align 8
		dd 0FFFFFFFFh, 0A00h, 8	dup(0)
byte_10007160	db 1			; DATA XREF: __setmbcp+1A6r
		db 2, 4, 8
		align 8
dword_10007168	dd 3A4h			; DATA XREF: __setmbcp+4Do
dword_1000716C	dd 82798260h		; DATA XREF: __setmbcp+1D9r
					; __setmbcp+1EAo
dword_10007170	dd 21h			; DATA XREF: __setmbcp+1DFr
		align 8
dword_10007178	dd 0DFA6h, 0		; DATA XREF: __setmbcp+182o
		dd 0A5A1h, 0
		dd 0FCE09F81h, 0
		dd 0FC807E40h, 0
		dd 3A8h, 0A3DAA3C1h, 20h, 5 dup(0)
		dd 0FE81h, 0
		dd 0FE40h, 0
		dd 3B5h, 0A3DAA3C1h, 20h, 5 dup(0)
		dd 0FE81h, 0
		dd 0FE41h, 0
		dd 3B6h, 0A2E4A2CFh, 0A2E5001Ah, 5BA2E8h, 4 dup(0)
		dd 0FE81h, 0
		dd 0FEA17E40h, 0
		dd 551h, 0DA5EDA51h, 0DA5F0020h, 32DA6Ah, 4 dup(0)
		dd 0DED8D381h, 0F9E0h, 0FE817E31h, 0
dword_10007258	dd 2			; DATA XREF: __setmbcp+5Eo
					; __NMSG_WRITE+Ao ...
; LPCVOID lpBuffer
lpBuffer	dd offset aR6002FloatingP ; DATA XREF: __NMSG_WRITE+14Br
					; __NMSG_WRITE:loc_100032F8r
					; "R6002\r\n- floating point not loaded\r\n"
		dd 8
		dd offset aR6008NotEnough ; "R6008\r\n-	not enough space for arguments"...
		dd 9
		dd offset aR6009NotEnough ; "R6009\r\n-	not enough space for environme"...
		dd 0Ah
		dd offset aAbnormalProgra ; "\r\nabnormal program termination\r\n"
		dd 10h
		dd offset aR6016NotEnough ; "R6016\r\n-	not enough space for thread da"...
		dd 11h
		dd offset aR6017Unexpecte ; "R6017\r\n-	unexpected multithread lock er"...
		dd 12h
		dd offset aR6018Unexpecte ; "R6018\r\n-	unexpected heap	error\r\n"
		dd 13h
		dd offset aR6019UnableToO ; "R6019\r\n-	unable to open console device\r"...
		dd 18h
		dd offset aR6024NotEnough ; "R6024\r\n-	not enough space for _onexit/a"...
		dd 19h
		dd offset aR6025PureVirtu ; "R6025\r\n-	pure virtual function call\r\n"
		dd 1Ah
		dd offset aR6026NotEnough ; "R6026\r\n-	not enough space for stdio ini"...
		dd 1Bh
		dd offset aR6027NotEnough ; "R6027\r\n-	not enough space for lowio ini"...
		dd 1Ch
		dd offset aR6028UnableToI ; "R6028\r\n-	unable to initialize heap\r\n"
		dd 78h
		dd offset aDomainError	; "DOMAIN error\r\n"
		dd 79h
		dd offset aSingError	; "SING	error\r\n"
		dd 7Ah
		dd offset aTlossError	; "TLOSS error\r\n"
		dd 0FCh
		dd offset asc_10004028	; "\r\n"
		dd 0FFh
		dd offset aRuntimeError	; "runtime error "
off_100072E8	dd offset dword_10007AA0 ; DATA	XREF: __lock_file+6o
					; __lock_file+14o ...
		align 10h
		dd offset dword_10007AA0
		dd 101h
dword_100072F8	dd 2 dup(0)		; DATA XREF: ___initstdio+83o
		dd 1000h, 4 dup(0)
		dd 2, 1, 6 dup(0)
		dd 2 dup(2), 7 dup(0)
dword_10007358	dd 7Ch dup(0)		; DATA XREF: ___initstdio+B2o
dword_10007548	dd 8 dup(0)		; DATA XREF: __lock_file+Do
					; __unlock_file+Do
dword_10007568	dd 0C0000005h, 0Bh, 0	; DATA XREF: __initptd+4o
					; ___initstdio+79o
		dd 0C000001Dh, 4, 0
		dd 0C0000096h, 4, 0
		dd 0C000008Dh, 8, 0
		dd 0C000008Eh, 8, 0
		dd 0C000008Fh, 8, 0
		dd 0C0000090h, 8, 0
		dd 0C0000091h, 8, 0
		dd 0C0000092h, 8, 0
		dd 0C0000093h, 8, 0
		dd 3, 7, 78h, 0Ah
dword_100075F0	dd 1			; DATA XREF: __dosmaperr+Eo
dword_100075F4	dd 16h			; DATA XREF: __dosmaperr+68r
		dd 2 dup(2), 3,	2, 4, 18h, 5, 0Dh, 6, 9, 7, 0Ch, 8, 0Ch
		dd 9, 0Ch, 0Ah,	7, 0Bh,	8, 0Ch,	16h, 0Dh, 16h, 0Fh, 2
		dd 10h,	0Dh, 11h, 2 dup(12h), 2, 21h, 0Dh, 35h,	2, 41h
		dd 0Dh,	43h, 2,	50h, 11h, 52h, 0Dh, 53h, 0Dh, 57h, 16h
		dd 59h,	0Bh, 6Ch, 0Dh, 6Dh, 20h, 70h, 1Ch, 72h,	9, 6, 16h
		dd 80h,	0Ah, 81h, 0Ah, 82h, 9, 83h, 16h, 84h, 0Dh, 91h
		dd 29h,	9Eh, 0Dh, 0A1h,	2, 0A4h, 0Bh, 0A7h, 0Dh, 0B7h
		dd 11h,	0CEh, 2, 0D7h, 0Bh, 718h, 0Ch
; void *Memory
Memory		dd 0			; DATA XREF: .text:loc_100012C4r
					; CreateAdWindow(x,x,x)+F4r ...
dword_1000775C	dd 0			; DATA XREF: _CRT_INIT(x,x,x)+EAr
					; _CRT_INIT(x,x,x)+F0w	...
; void *dword_10007760
dword_10007760	dd 0			; DATA XREF: _CRT_INIT(x,x,x)+C4w
					; __setenvp+1r	...
		align 8
dword_10007768	dd 0			; DATA XREF: __amsg_exitr
					; __FF_MSGBANNERr ...
dword_1000776C	dd 0			; DATA XREF: _CRT_INIT(x,x,x)+13r
					; __amsg_exit+Er ...
dword_10007770	dd 6 dup(0)		; DATA XREF: .data:off_1000504Co
dword_10007788	dd 6 dup(0)		; DATA XREF: .data:lpCriticalSectiono
dword_100077A0	dd 6 dup(0)		; DATA XREF: .data:off_1000506Co
dword_100077B8	dd 6 dup(0)		; DATA XREF: .data:off_1000507Co
dword_100077D0	dd 0			; DATA XREF: ___sbh_decommit_pages+49r
					; ___sbh_decommit_pages+50w ...
dword_100077D4	dd 0			; DATA XREF: __callnewhr
dword_100077D8	dd 0			; DATA XREF: _calloc+89r _mallocr
		align 10h
dword_100077E0	dd 0			; DATA XREF: _CRT_INIT(x,x,x)+19w
					; _CRT_INIT(x,x,x):loc_1000175Cr ...
dword_100077E4	dd 0			; DATA XREF: _CRT_INIT(x,x,x)+90w
dword_100077E8	dd 0			; DATA XREF: _CRT_INIT(x,x,x)+83w
dword_100077EC	dd 0			; DATA XREF: _CRT_INIT(x,x,x)+7Dw
dword_100077F0	dd 0			; DATA XREF: __setargv+94w
dword_100077F4	dd 0			; DATA XREF: __setargv+8Dw
		dd 0
dword_100077FC	dd 0			; DATA XREF: __setenvp+48w
		dd 3 dup(?)
dword_1000780C	dd ?			; DATA XREF: __setargv+1Dw
		dd ?
byte_10007814	db ?			; DATA XREF: _doexit+38w
					; ___endstdio+5r
		align 4
dword_10007818	dd ?			; DATA XREF: _CRT_INIT(x,x,x)+11Br
					; _doexit+2Ew
dword_1000781C	dd ?			; DATA XREF: _doexit+8r _doexit+9Ew
; char Filename[264]
Filename	db 108h	dup(?)		; DATA XREF: __setargv+Ao
					; __setargv+1Do ...
byte_10007928	db ?			; DATA XREF: __setmbcp+81o
					; __setmbcp+172o ...
byte_10007929	db ?			; DATA XREF: _parse_cmdline+4Er
					; _parse_cmdline+B0r ...
		align 4
		dd 40h dup(?)
dword_10007A2C	dd ?			; DATA XREF: __setmbcp+1Dr
					; __setmbcp+ECw ...
dword_10007A30	dd ?			; DATA XREF: __setmbcp+FAw
					; __setmbcp+107w ...
		align 8
dword_10007A38	dd ?			; DATA XREF: __setmbcp+111w
					; __setmbcp+1F3w ...
dword_10007A3C	dd ?			; DATA XREF: __setmbcp+117w
					; __setmbcp+1FCw ...
dword_10007A40	dd ?			; DATA XREF: __setmbcp+11Dw
					; __setmbcp+204w ...
dword_10007A44	dd ?			; DATA XREF: __setmbcp:loc_10002DB5r
					; _getSystemCP+4w ...
		dd ?
dword_10007A4C	dd ?			; DATA XREF: ___crtGetEnvironmentStringsAr
					; ___crtGetEnvironmentStringsA:loc_10002FCDw
dword_10007A50	dd ?			; DATA XREF: __FF_MSGBANNER+21r
		dd 7 dup(?)
dword_10007A70	dd ?			; DATA XREF: _getSystemCP+3Dr
dword_10007A74	dd ?			; DATA XREF: ___crtMessageBoxAr
					; ___crtMessageBoxA+2Fw ...
dword_10007A78	dd ?			; DATA XREF: ___crtMessageBoxA+44w
					; ___crtMessageBoxA:loc_10003460r
dword_10007A7C	dd ?			; DATA XREF: ___crtMessageBoxA+4Bw
					; ___crtMessageBoxA+61r
dword_10007A80	dd ?			; DATA XREF: ___initstdio+2Bw
					; ___initstdio+4Aw ...
		dd 7 dup(?)
dword_10007AA0	dd 400h	dup(?)		; DATA XREF: .data:off_100072E8o
					; .data:100072F0o
; size_t NumOfElements
NumOfElements	dd ?			; DATA XREF: ___initstdior
					; ___initstdio:loc_1000334Bw ...
		dd 7 dup(?)
dword_10008AC0	dd ?			; DATA XREF: __ioinit+2Cw __ioinit+52r ...
dword_10008AC4	dd 3Fh dup(?)		; DATA XREF: __ioinit+B1o
; UINT uNumber
uNumber		dd ?			; DATA XREF: __ioinit+34w __ioinit+A7r ...
dword_10008BC4	dd ?			; DATA XREF: _doexit+4Ar
dword_10008BC8	dd ?			; DATA XREF: _doexit+40r _doexit+5Fr
dword_10008BCC	dd ?			; DATA XREF: __cinitr
; HANDLE hHeap
hHeap		dd ?			; DATA XREF: _free+52r
					; _calloc:loc_100015E8r ...
dword_10008BD4	dd ?			; DATA XREF: _CRT_INIT(x,x,x)+B4w
					; _CRT_INIT(x,x,x)+BEr	...
dword_10008BD8	dd ?			; DATA XREF: DllEntryPoint:loc_10001896r
					; DllEntryPoint+94r
		align 800h
_data		ends

;
; Imports from GDI32.dll
;
; Section 4. (virtual address 00009000)
; Virtual size			: 000007BC (   1980.)
; Section size in file		: 00000800 (   2048.)
; Offset to raw	data for section: 00006200
; Flags	C0000040: Data Readable	Writable
; Alignment	: default
; ===========================================================================

; Segment type:	Externs
; _idata
; HGDIOBJ __stdcall GetStockObject(int i)
		extrn GetStockObject:dword ; CODE XREF:	CreateAdWindow(x,x,x)+4Bp
					; DATA XREF: CreateAdWindow(x,x,x)+4Br
; int __stdcall	GetDeviceCaps(HDC hdc, int index)
		extrn GetDeviceCaps:dword ; CODE XREF: CT_Draw(x)+79p
					; DATA XREF: CT_Draw(x)+79r
; HPALETTE __stdcall SelectPalette(HDC hdc, HPALETTE hPal, BOOL	bForceBkgd)
		extrn SelectPalette:dword ; CODE XREF: CT_Draw(x)+ABp
					; DATA XREF: CT_Draw(x)+ABr
; UINT __stdcall RealizePalette(HDC hdc)
		extrn RealizePalette:dword ; CODE XREF:	CT_Draw(x)+B2p
					; DATA XREF: CT_Draw(x)+B2r
; int __stdcall	SetDIBitsToDevice(HDC hdc, int xDest, int yDest, DWORD w, DWORD	h, int xSrc, int ySrc, UINT StartScan, UINT cLines, const void *lpvBits, const BITMAPINFO *lpbmi, UINT ColorUse)
		extrn SetDIBitsToDevice:dword ;	CODE XREF: CT_Draw(x)+D7p
					; DATA XREF: CT_Draw(x)+D7r
; BOOL __stdcall DeleteObject(HGDIOBJ ho)
		extrn DeleteObject:dword ; CODE	XREF: LoadAdImage(x,x)+38p
					; UnloadAdImage(x)+22p
					; DATA XREF: ...
; HPALETTE __stdcall CreatePalette(const LOGPALETTE *plpal)
		extrn CreatePalette:dword ; CODE XREF: LoadAdImage(x,x)+99p
					; DATA XREF: LoadAdImage(x,x)+99r

;
; Imports from KERNEL32.dll
;
; void __stdcall InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn InitializeCriticalSection:dword ;	CODE XREF: __mtinitlocks+Dp
					; __mtinitlocks+16p ...
; void __stdcall ExitProcess(UINT uExitCode)
		extrn ExitProcess:dword	; CODE XREF: _doexit+A8p
					; DATA XREF: _doexit+A8r
; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn EnterCriticalSection:dword ; CODE	XREF: __lock+6Dp
					; __lock_file+2Ep ...
; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn LeaveCriticalSection:dword ; CODE	XREF: __unlock+Ep
					; __unlock_file+2Ep ...
; int __stdcall	WideCharToMultiByte(UINT CodePage, DWORD dwFlags, LPCWSTR lpWideCharStr, int cchWideChar, LPSTR	lpMultiByteStr,	int cbMultiByte, LPCSTR	lpDefaultChar, LPBOOL lpUsedDefaultChar)
		extrn WideCharToMultiByte:dword
					; CODE XREF: ___crtGetEnvironmentStringsA+8Ap
					; ___crtGetEnvironmentStringsA+B1p
					; DATA XREF: ...
; LPWCH	__stdcall GetEnvironmentStringsW()
		extrn GetEnvironmentStringsW:dword
					; CODE XREF: ___crtGetEnvironmentStringsA+1Dp
					; ___crtGetEnvironmentStringsA+4Fp
					; DATA XREF: ...
; BOOL __stdcall WriteFile(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite,	LPDWORD	lpNumberOfBytesWritten,	LPOVERLAPPED lpOverlapped)
		extrn WriteFile:dword	; CODE XREF: __NMSG_WRITE+1C5p
					; __write_lk+E5p ...
; BOOL __stdcall FreeEnvironmentStringsW(LPWCH)
		extrn FreeEnvironmentStringsW:dword
					; CODE XREF: ___crtGetEnvironmentStringsA+C7p
					; ___crtGetEnvironmentStringsA+D5p
					; DATA XREF: ...
; LPCH __stdcall GetEnvironmentStrings()
		extrn GetEnvironmentStrings:dword
					; CODE XREF: ___crtGetEnvironmentStringsA:loc_10002FBCp
					; ___crtGetEnvironmentStringsA+EBp
					; DATA XREF: ...
; UINT __stdcall GetOEMCP()
		extrn GetOEMCP:dword	; DATA XREF: _getSystemCP+1Dr
; UINT __stdcall GetACP()
		extrn GetACP:dword	; DATA XREF: _getSystemCP+32r
; BOOL __stdcall FreeEnvironmentStringsA(LPCH)
		extrn FreeEnvironmentStringsA:dword
					; CODE XREF: ___crtGetEnvironmentStringsA+120p
					; ___crtGetEnvironmentStringsA+142p
					; DATA XREF: ...
; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn DeleteCriticalSection:dword ; CODE XREF: __mtdeletelocks+34p
					; __mtdeletelocks+53p ...
; DWORD	__stdcall SetFilePointer(HANDLE	hFile, LONG lDistanceToMove, PLONG lpDistanceToMoveHigh, DWORD dwMoveMethod)
		extrn SetFilePointer:dword ; CODE XREF:	__lseek_lk+32p
					; DATA XREF: __lseek_lk+32r
; BOOL __stdcall SetStdHandle(DWORD nStdHandle,	HANDLE hHandle)
		extrn SetStdHandle:dword ; CODE	XREF: __free_osfhnd:loc_10003D41p
					; DATA XREF: __free_osfhnd:loc_10003D41r
; BOOL __stdcall CloseHandle(HANDLE hObject)
		extrn CloseHandle:dword	; CODE XREF: __close_lk+42p
					; DATA XREF: __close_lk+42r
; BOOL __stdcall FlushFileBuffers(HANDLE hFile)
		extrn FlushFileBuffers:dword ; CODE XREF: __commit+4Ep
					; DATA XREF: __commit+4Er
; HMODULE __stdcall LoadLibraryA(LPCSTR	lpLibFileName)
		extrn LoadLibraryA:dword ; CODE	XREF: ___crtMessageBoxA+13p
					; DATA XREF: ___crtMessageBoxA+13r
; BOOL __stdcall HeapFree(HANDLE hHeap,	DWORD dwFlags, LPVOID lpMem)
		extrn HeapFree:dword	; CODE XREF: _free+5Fp
					; ___sbh_new_region+156p ...
; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
		extrn HeapAlloc:dword	; CODE XREF: _calloc+81p
					; __heap_alloc+4Cp ...
; LPSTR	__stdcall GetCommandLineA()
		extrn GetCommandLineA:dword ; CODE XREF: _CRT_INIT(x,x,x):loc_1000179Ep
					; DATA XREF: _CRT_INIT(x,x,x):loc_1000179Er
; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
		extrn GetProcAddress:dword ; CODE XREF:	_CRT_INIT(x,x,x)+4Cp
					; ___crtMessageBoxA+2Bp ...
; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
		extrn GetModuleHandleA:dword ; CODE XREF: _CRT_INIT(x,x,x)+3Cp
					; DATA XREF: _CRT_INIT(x,x,x)+3Cr
; DWORD	__stdcall GetVersion()
		extrn GetVersion:dword	; CODE XREF: _CRT_INIT(x,x,x)+Dp
					; DATA XREF: _CRT_INIT(x,x,x)+Dr
; BOOL __stdcall HeapDestroy(HANDLE hHeap)
		extrn HeapDestroy:dword	; CODE XREF: __heap_init+28p
					; __heap_term+2Ep
					; DATA XREF: ...
; HANDLE __stdcall HeapCreate(DWORD flOptions, SIZE_T dwInitialSize, SIZE_T dwMaximumSize)
		extrn HeapCreate:dword	; CODE XREF: __heap_init+9p
					; DATA XREF: __heap_init+9r
; BOOL __stdcall VirtualFree(LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType)
		extrn VirtualFree:dword	; CODE XREF: __heap_term+1Cp
					; ___sbh_new_region+13Fp ...
; BOOL __stdcall GetCPInfo(UINT	CodePage, LPCPINFO lpCPInfo)
		extrn GetCPInfo:dword	; CODE XREF: __setmbcp+6Bp
					; DATA XREF: __setmbcp+6Br
; HANDLE __stdcall GetStdHandle(DWORD nStdHandle)
		extrn GetStdHandle:dword ; CODE	XREF: __ioinit+1AFp
					; __NMSG_WRITE+1A0p
					; DATA XREF: ...
; DWORD	__stdcall GetModuleFileNameA(HMODULE hModule, LPCH lpFilename, DWORD nSize)
		extrn GetModuleFileNameA:dword ; CODE XREF: __setargv+11p
					; __NMSG_WRITE+6Bp
					; DATA XREF: ...
; BOOL __stdcall TlsSetValue(DWORD dwTlsIndex, LPVOID lpTlsValue)
		extrn TlsSetValue:dword	; CODE XREF: __mtinit+2Fp __getptd+36p ...
; void __stdcall GetStartupInfoA(LPSTARTUPINFOA	lpStartupInfo)
		extrn GetStartupInfoA:dword ; CODE XREF: __ioinit+6Ap
					; DATA XREF: __ioinit+6Ar
; DWORD	__stdcall GetFileType(HANDLE hFile)
		extrn GetFileType:dword	; CODE XREF: __ioinit+140p
					; __ioinit+1B9p
					; DATA XREF: ...
; LPVOID __stdcall VirtualAlloc(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect)
		extrn VirtualAlloc:dword ; CODE	XREF: ___sbh_new_region+45p
					; ___sbh_new_region+5Ep ...
; BOOL __stdcall TerminateProcess(HANDLE hProcess, UINT	uExitCode)
		extrn TerminateProcess:dword ; CODE XREF: _doexit+1Ep
					; DATA XREF: _doexit+1Er
; HANDLE __stdcall GetCurrentProcess()
		extrn GetCurrentProcess:dword ;	CODE XREF: _doexit+17p
					; DATA XREF: _doexit+17r
; DWORD	__stdcall GetCurrentThreadId()
		extrn GetCurrentThreadId:dword ; CODE XREF: __mtinit+42p
					; __getptd+49p
					; DATA XREF: ...
; DWORD	__stdcall TlsAlloc()
		extrn TlsAlloc:dword	; CODE XREF: __mtinit+6p
					; DATA XREF: __mtinit+6r
; BOOL __stdcall TlsFree(DWORD dwTlsIndex)
		extrn TlsFree:dword	; CODE XREF: __mtterm+10p
					; DATA XREF: __mtterm+10r
; void __stdcall SetLastError(DWORD dwErrCode)
		extrn SetLastError:dword ; CODE	XREF: __getptd+59p
					; __getptd+6Fp
					; DATA XREF: ...
; LPVOID __stdcall TlsGetValue(DWORD dwTlsIndex)
		extrn TlsGetValue:dword	; CODE XREF: __getptd+10p
					; __freeptd+18p
					; DATA XREF: ...
; DWORD	__stdcall GetLastError()
		extrn GetLastError:dword ; CODE	XREF: __getptd+2p __commit+58p ...
; UINT __stdcall SetHandleCount(UINT uNumber)
		extrn SetHandleCount:dword ; CODE XREF:	__ioinit+1FEp
					; DATA XREF: __ioinit+1FEr

;
; Imports from SHELL32.dll
;
; HINSTANCE __stdcall ShellExecuteA(HWND hwnd, LPCSTR lpOperation, LPCSTR lpFile, LPCSTR lpParameters, LPCSTR lpDirectory, INT nShowCmd)
		extrn ShellExecuteA:dword ; CODE XREF: adClick(x)+1Dp
					; DATA XREF: adClick(x)+1Dr

;
; Imports from USER32.dll
;
; HCURSOR __stdcall LoadCursorA(HINSTANCE hInstance, LPCSTR lpCursorName)
		extrn LoadCursorA:dword	; CODE XREF: CreateAdWindow(x,x,x)+3Fp
					; DATA XREF: CreateAdWindow(x,x,x)+3Fr
; HDC __stdcall	GetDC(HWND hWnd)
		extrn GetDC:dword	; CODE XREF: CT_Draw(x)+Bp
					; DATA XREF: CT_Draw(x)+Br
; int __stdcall	ReleaseDC(HWND hWnd, HDC hDC)
		extrn ReleaseDC:dword	; CODE XREF: CT_Draw(x)+20p
					; CT_Draw(x)+52p ...
; BOOL __stdcall SetWindowPos(HWND hWnd, HWND hWndInsertAfter, int X, int Y, int cx, int cy, UINT uFlags)
		extrn SetWindowPos:dword ; CODE	XREF: MoveAdWindow(x,x,x)+5Cp
					; DATA XREF: MoveAdWindow(x,x,x)+5Cr
; BOOL __stdcall ShowWindow(HWND hWnd, int nCmdShow)
		extrn ShowWindow:dword	; CODE XREF: CreateAdWindow(x,x,x)+DBp
					; DATA XREF: CreateAdWindow(x,x,x)+DBr
; BOOL __stdcall PostMessageA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
		extrn PostMessageA:dword ; CODE	XREF: .text:100012F2p
					; DATA XREF: .text:100012F2r
; LRESULT __stdcall DefWindowProcA(HWND	hWnd, UINT Msg,	WPARAM wParam, LPARAM lParam)
		extrn DefWindowProcA:dword ; CODE XREF:	.text:100012BBp
					; DATA XREF: .text:100012BBr
; BOOL __stdcall GetWindowRect(HWND hWnd, LPRECT lpRect)
		extrn GetWindowRect:dword ; CODE XREF: CreateAdWindow(x,x,x)+76p
					; MoveAdWindow(x,x,x)+Dp
					; DATA XREF: ...
; HWND __stdcall CreateWindowExA(DWORD dwExStyle, LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y,	int nWidth, int	nHeight, HWND hWndParent, HMENU	hMenu, HINSTANCE hInstance, LPVOID lpParam)
		extrn CreateWindowExA:dword ; CODE XREF: CreateAdWindow(x,x,x)+D0p
					; DATA XREF: CreateAdWindow(x,x,x)+D0r
; BOOL __stdcall ScreenToClient(HWND hWnd, LPPOINT lpPoint)
		extrn ScreenToClient:dword ; CODE XREF:	CreateAdWindow(x,x,x)+96p
					; MoveAdWindow(x,x,x)+2Dp
					; DATA XREF: ...
; BOOL __stdcall DestroyWindow(HWND hWnd)
		extrn DestroyWindow:dword ; CODE XREF: DestroyAdWindow(x)+1Ap
					; DestroyAdWindow(x)+64p
					; DATA XREF: ...
; ATOM __stdcall RegisterClassA(const WNDCLASSA	*lpWndClass)
		extrn RegisterClassA:dword ; CODE XREF:	CreateAdWindow(x,x,x)+66p
					; DATA XREF: CreateAdWindow(x,x,x)+66r
; HICON	__stdcall LoadIconA(HINSTANCE hInstance, LPCSTR	lpIconName)
		extrn LoadIconA:dword	; CODE XREF: CreateAdWindow(x,x,x)+2Fp
					; DATA XREF: CreateAdWindow(x,x,x)+2Fr

;
; Imports from tsad.dll
;
; __stdcall CT_MgmtGetALStatus(x)
		extrn _CT_MgmtGetALStatus@4:dword ; CODE XREF: CT_Draw(x)+2Dp
					; DATA XREF: CT_Draw(x)+2Dr
; __stdcall CT_MgmtALDisplayResult(x, x)
		extrn _CT_MgmtALDisplayResult@8:dword ;	CODE XREF: CT_Draw(x)+E7p
					; CT_Draw(x)+10Cp ...
; __stdcall CT_UtilFreeBMZ(x)
		extrn _CT_UtilFreeBMZ@4:dword ;	CODE XREF: UnloadAdImage(x)+Dp
					; DATA XREF: UnloadAdImage(x)+Dr
; __stdcall CT_UtilReadBMZ(x)
		extrn _CT_UtilReadBMZ@4:dword ;	CODE XREF: LoadAdImage(x,x)+1Ap
					; DATA XREF: LoadAdImage(x,x)+1Ar
; __stdcall CT_MgmtGetAdClickThroughURL(x)
		extrn _CT_MgmtGetAdClickThroughURL@4:dword ; CODE XREF:	adClick(x)+5p
					; DATA XREF: adClick(x)+5r



		end DllEntryPoint
