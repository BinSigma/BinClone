;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	   Copyright (c) 2010 by Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B231-7414-99			    |
; |		       NCFTA Canada/Concordia University		    |
; +-------------------------------------------------------------------------+
;
;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	   Copyright (c) 2010 by Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B231-7414-99			    |
; |		       NCFTA Canada/Concordia University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	3EA330E8B0F70216BDE5ECE077C657C6
; Input	CRC32 :	C43F9EC1

; File Name   :	c:\Users\farhadi\Desktop\dll4\btwhidcs.dll
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	10000000
; Section 1. (virtual address 00001000)
; Virtual size			: 0000F732 (  63282.)
; Section size in file		: 00010000 (  65536.)
; Offset to raw	data for section: 00001000
; Flags	60000020: Text Executable Readable
; Alignment	: default
; Exported entry   5. ??0CBtHidExtRoot@@QAE@ABV0@@Z
; OS type	  :  MS	Windows
; Application type:  DLL 32bit

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 10001000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; public: __thiscall CBtHidExtRoot::CBtHidExtRoot(class	CBtHidExtRoot const &)
		public ??0CBtHidExtRoot@@QAE@ABV0@@Z
??0CBtHidExtRoot@@QAE@ABV0@@Z proc near	; DATA XREF: .rdata:off_10014598o

arg_0		= dword	ptr  4

		mov	eax, ecx
		mov	ecx, [esp+arg_0]
		mov	ecx, [ecx+4]
		mov	dword ptr [eax], offset	??_7CBtHidExtRoot@@6B@ ; const CBtHidExtRoot::`vftable'
		mov	[eax+4], ecx
		retn	4
		arg_0		= dword	ptr  4
		mov	eax, ecx
		mov	ecx, [esp+arg_0]
		mov	ecx, [ecx+4]
		mov	[eax+4], ecx
		retn	4
		arg_0		= byte ptr  4
		push	ebx
		mov	bl, [esp+4+arg_0]
		push	esi
		mov	esi, ecx
		test	bl, 2
		jz	short loc_10001055
		push	edi
		lea	edi, [esi-4]
		push	offset ??1CBtHidExtRoot@@UAE@XZ	; CBtHidExtRoot::~CBtHidExtRoot(void)
		push	dword ptr [edi]
		push	8
		push	esi
		call	??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
		test	bl, 1
		jz	short loc_10001050
		push	edi		; void *
??0CBtHidExtRoot@@QAE@ABV0@@Z endp

; Exported entry   8. ??4CBtHidExtRoot@@QAEAAV0@ABV0@@Z

; =============== S U B	R O U T	I N E =======================================


; public: class	CBtHidExtRoot &	__thiscall CBtHidExtRoot::operator=(class CBtHidExtRoot	const &)
		public ??4CBtHidExtRoot@@QAEAAV0@ABV0@@Z
??4CBtHidExtRoot@@QAEAAV0@ABV0@@Z proc near ; DATA XREF: .rdata:off_10014598o

arg_0		= dword	ptr  4

		mov	eax, ecx
		mov	ecx, [esp+arg_0]
		mov	ecx, [ecx+4]
		mov	[eax+4], ecx
		retn	4
??4CBtHidExtRoot@@QAEAAV0@ABV0@@Z endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_10001024(void *, char)
sub_10001024	proc near		; DATA XREF: .rdata:const CBtHidExtRoot::`vftable'o

arg_0		= byte ptr  4

		push	ebx
		mov	bl, [esp+4+arg_0]
		push	esi
		mov	esi, ecx
		test	bl, 2
		jz	short loc_10001055
		push	edi
		lea	edi, [esi-4]
		push	offset ??1CBtHidExtRoot@@UAE@XZ	; CBtHidExtRoot::~CBtHidExtRoot(void)
		push	dword ptr [edi]
		push	8
		push	esi
		call	??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
		test	bl, 1
		jz	short loc_10001050
		push	edi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_10001050:				; CODE XREF: sub_10001024+23j
		mov	eax, edi
		pop	edi
		jmp	short loc_1000106A
; ---------------------------------------------------------------------------

loc_10001055:				; CODE XREF: sub_10001024+Bj
		mov	ecx, esi
		call	??1CBtHidExtRoot@@UAE@XZ ; CBtHidExtRoot::~CBtHidExtRoot(void)
		test	bl, 1
		jz	short loc_10001068
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_10001068:				; CODE XREF: sub_10001024+3Bj
		mov	eax, esi

loc_1000106A:				; CODE XREF: sub_10001024+2Fj
		pop	esi
		pop	ebx
		retn	4
sub_10001024	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_1000106F(void	*Src, char)
sub_1000106F	proc near		; CODE XREF: .text:10001104p

Src		= dword	ptr  4
arg_4		= byte ptr  8

		mov	eax, lParam
		push	esi
		push	10h		; Size
		add	eax, 14h
		push	offset dword_100114B8 ;	Src
		push	eax		; Dst
		call	memcpy
		mov	eax, lParam
		mov	cl, [esp+10h+arg_4]
		push	6		; Size
		push	[esp+14h+Src]	; Src
		mov	[eax+2Eh], cl
		mov	eax, lParam
		add	eax, 28h
		push	eax		; Dst
		call	memcpy
		add	esp, 18h
		mov	esi, offset dword_100186A0

loc_100010AD:				; CODE XREF: sub_1000106F+69j
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_100010CF
		mov	ecx, [eax+8]
		test	ecx, ecx
		jz	short loc_100010CF
		push	lParam		; lParam
		push	8006h		; wParam
		push	dword ptr [eax+10h] ; Msg
		push	ecx		; hWnd
		call	ds:PostMessageA

loc_100010CF:				; CODE XREF: sub_1000106F+42j
					; sub_1000106F+49j
		add	esi, 4
		cmp	esi, offset dword_100186E0
		jb	short loc_100010AD
		add	lParam,	33h
		mov	eax, lParam
		add	eax, 33h
		pop	esi
		cmp	eax, offset hEvent
		jbe	short locret_100010FB
		mov	lParam,	offset dword_100186E0

locret_100010FB:			; CODE XREF: sub_1000106F+80j
		retn
sub_1000106F	endp
