;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	   Copyright (c) 2010 by Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B231-7414-99			    |
; |		       NCFTA Canada/Concordia University		    |
; +-------------------------------------------------------------------------+
;
;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	   Copyright (c) 2010 by Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B231-7414-99			    |
; |		       NCFTA Canada/Concordia University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	AF87E5EEE4407DF981B148D3B6513679
; Input	CRC32 :	07E05E76

; File Name   :	c:\Users\farhadi\Desktop\dll4\rpclts3.dll
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	76640000
; Section 1. (virtual address 00001000)
; Virtual size			: 00000DE8 (   3560.)
; Section size in file		: 00001000 (   4096.)
; Offset to raw	data for section: 00001000
; Flags	60000020: Text Executable Readable
; Alignment	: default
; OS type	  :  MS	Windows
; Application type:  DLL 32bit

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 76641000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_76641000	proc near		; CODE XREF: sub_76641926+9p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 4
		push	ebx
		push	esi
		push	edi
		mov	esi, [ebp+arg_0]
		mov	edx, [esi+214h]
		mov	edi, [esi+220h]
		mov	[ebp+var_4], edx
		cmp	[esi+21Ch], edi
		jl	short loc_76641044
		lea	ebx, [edx+edi*8]

loc_76641026:				; CODE XREF: sub_76641000+42j
		lea	eax, [esi+110h]
		push	eax		; fd_set *
		push	dword ptr [ebx]	; fd
		call	__WSAFDIsSet
		test	eax, eax
		jnz	short loc_76641084
		add	ebx, 8
		inc	edi
		cmp	[esi+21Ch], edi
		jge	short loc_76641026

loc_76641044:				; CODE XREF: sub_76641000+21j
		mov	edi, 1
		cmp	[esi+220h], edi
		jle	short loc_76641079
		mov	ebx, [ebp+var_4]
		add	ebx, 8

loc_76641057:				; CODE XREF: sub_76641000+77j
		lea	eax, [esi+110h]
		push	eax		; fd_set *
		push	dword ptr [ebx]	; fd
		call	__WSAFDIsSet
		test	eax, eax
		jnz	loc_766410F1
		add	ebx, 8
		inc	edi
		cmp	[esi+220h], edi
		jg	short loc_76641057

loc_76641079:				; CODE XREF: sub_76641000+4Fj
		xor	eax, eax

loc_7664107B:				; CODE XREF: sub_76641000+EFj
					; sub_76641000+15Cj
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
; ---------------------------------------------------------------------------

loc_76641084:				; CODE XREF: sub_76641000+36j
		xor	ecx, ecx
		mov	ebx, [esi+110h]
		cmp	ebx, ecx
		jz	short loc_766410D0
		lea	eax, [esi+114h]
		mov	edx, [ebp+var_4]
		mov	edx, [edx+edi*8]

loc_7664109C:				; CODE XREF: sub_76641000+A6j
		cmp	[eax], edx
		jz	short loc_766410AA
		add	eax, 4
		inc	ecx
		cmp	ebx, ecx
		ja	short loc_7664109C
		jmp	short loc_766410D0
; ---------------------------------------------------------------------------

loc_766410AA:				; CODE XREF: sub_76641000+9Ej
		dec	ebx
		cmp	ebx, ecx
		jbe	short loc_766410CA
		lea	edx, [esi+ecx*4+114h]

loc_766410B6:				; CODE XREF: sub_76641000+C8j
		mov	eax, [edx+4]
		inc	ecx
		mov	[edx], eax
		add	edx, 4
		mov	eax, [esi+110h]
		dec	eax
		cmp	eax, ecx
		ja	short loc_766410B6

loc_766410CA:				; CODE XREF: sub_76641000+ADj
		dec	dword ptr [esi+110h]

loc_766410D0:				; CODE XREF: sub_76641000+8Ej
					; sub_76641000+A8j
		cmp	[esi+21Ch], edi
		jnz	short loc_766410E4
		mov	dword ptr [esi+220h], 1
		jmp	short loc_766410ED
; ---------------------------------------------------------------------------

loc_766410E4:				; CODE XREF: sub_76641000+D6j
		lea	eax, [edi+1]
		mov	[esi+220h], eax

loc_766410ED:				; CODE XREF: sub_76641000+E2j
		mov	eax, edi
		jmp	short loc_7664107B
; ---------------------------------------------------------------------------

loc_766410F1:				; CODE XREF: sub_76641000+67j
		xor	ecx, ecx
		mov	ebx, [esi+110h]
		cmp	ebx, ecx
		jz	short loc_7664113D
		lea	eax, [esi+114h]
		mov	edx, [ebp+var_4]
		mov	edx, [edx+edi*8]

loc_76641109:				; CODE XREF: sub_76641000+113j
		cmp	[eax], edx
		jz	short loc_76641117
		add	eax, 4
		inc	ecx
		cmp	ebx, ecx
		ja	short loc_76641109
		jmp	short loc_7664113D
; ---------------------------------------------------------------------------

loc_76641117:				; CODE XREF: sub_76641000+10Bj
		dec	ebx
		cmp	ebx, ecx
		jbe	short loc_76641137
		lea	edx, [esi+ecx*4+114h]

loc_76641123:				; CODE XREF: sub_76641000+135j
		mov	eax, [edx+4]
		inc	ecx
		mov	[edx], eax
		add	edx, 4
		mov	eax, [esi+110h]
		dec	eax
		cmp	eax, ecx
		ja	short loc_76641123

loc_76641137:				; CODE XREF: sub_76641000+11Aj
		dec	dword ptr [esi+110h]

loc_7664113D:				; CODE XREF: sub_76641000+FBj
					; sub_76641000+115j
		cmp	[esi+21Ch], edi
		jnz	short loc_76641151
		mov	dword ptr [esi+220h], 1
		jmp	short loc_7664115A
; ---------------------------------------------------------------------------

loc_76641151:				; CODE XREF: sub_76641000+143j
		lea	eax, [edi+1]
		mov	[esi+220h], eax

loc_7664115A:				; CODE XREF: sub_76641000+14Fj
		mov	eax, edi
		jmp	loc_7664107B
sub_76641000	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_76641161(int, u_short hostshort, int, int backlog)
sub_76641161	proc near		; CODE XREF: sub_7664133B+60p
					; sub_766413C2+2Cp

var_3C		= byte ptr -3Ch
name		= sockaddr ptr -1Ch
optval		= byte ptr -0Ch
namelen		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
hostshort	= word ptr  0Ch
arg_8		= dword	ptr  10h
backlog		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 3Ch
		mov	dword ptr [ebp+optval],	1
		push	ebx
		push	esi
		push	edi
		mov	ebx, [ebp+arg_0]
		push	0		; protocol
		push	1		; type
		mov	dword ptr [ebx+8], 0
		push	2		; af
		call	socket
		cmp	eax, 0FFFFFFFFh
		mov	esi, eax
		jnz	short loc_76641194
		xor	eax, eax
		jmp	loc_76641332
; ---------------------------------------------------------------------------

loc_76641194:				; CODE XREF: sub_76641161+2Aj
		push	4		; optlen
		lea	eax, [ebp+optval]
		push	eax		; optval
		push	1		; optname
		push	6		; level
		push	esi		; s
		call	setsockopt
		mov	dword ptr [ebp+name.sa_data+2],	0
		mov	[ebp+name.sa_family], 2
		mov	edi, dword ptr [ebp+hostshort]
		push	edi		; hostshort
		call	htons
		mov	word ptr [ebp+name.sa_data], ax
		push	10h		; namelen
		lea	eax, [ebp+name]
		push	eax		; name
		push	esi		; s
		call	bind
		test	eax, eax
		jz	short loc_766411DB
		push	esi		; s
		call	closesocket
		xor	eax, eax
		jmp	loc_76641332
; ---------------------------------------------------------------------------

loc_766411DB:				; CODE XREF: sub_76641161+6Bj
		lea	eax, [ebp+namelen]
		lea	ecx, [ebp+name]
		mov	[ebp+namelen], 10h
		push	eax		; namelen
		push	ecx		; name
		push	esi		; s
		call	getsockname
		test	eax, eax
		jz	short loc_76641201
		push	esi		; s
		call	closesocket
		xor	eax, eax
		jmp	loc_76641332
; ---------------------------------------------------------------------------

loc_76641201:				; CODE XREF: sub_76641161+91j
		test	edi, edi
		jz	short loc_7664120A
		mov	[ebp+var_4], edi
		jmp	short loc_76641218
; ---------------------------------------------------------------------------

loc_7664120A:				; CODE XREF: sub_76641161+A2j
		push	dword ptr [ebp+name.sa_data] ; netshort
		call	ntohs
		movzx	eax, ax
		mov	[ebp+var_4], eax

loc_76641218:				; CODE XREF: sub_76641161+A7j
		push	100h		; Size
		mov	[ebx+4], esi
		mov	dword ptr [ebx+0Ch], 0
		mov	dword ptr [ebx+110h], 0
		mov	dword ptr [ebx], 0
		call	I_RpcAllocate
		mov	edi, eax
		mov	[ebx+214h], eax
		test	edi, edi
		jnz	short loc_76641252
		mov	eax, 0FFFFFFFFh
		jmp	loc_76641332
; ---------------------------------------------------------------------------

loc_76641252:				; CODE XREF: sub_76641161+E5j
		xor	eax, eax
		mov	ecx, 40h
		mov	dword ptr [ebx+220h], 1
		mov	dword ptr [ebx+21Ch], 0
		mov	dword ptr [ebx+218h], 20h
		rep stosd
		mov	eax, [ebx+214h]
		push	[ebp+backlog]	; backlog
		push	esi		; s
		mov	dword ptr [eax], 0FFFFFFFFh
		call	listen
		mov	dword ptr [ebx+8], 1
		mov	eax, [ebx+0Ch]
		cmp	eax, 40h
		jnb	short loc_766412A4
		mov	[ebx+eax*4+10h], esi
		inc	dword ptr [ebx+0Ch]

loc_766412A4:				; CODE XREF: sub_76641161+13Aj
		push	20h		; namelen
		lea	eax, [ebp+var_3C]
		push	eax		; name
		call	gethostname
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_766412C9
		push	dword ptr [ebx+214h] ; Object
		call	I_RpcFree
		push	esi		; s
		call	closesocket
		xor	eax, eax
		jmp	short loc_76641332
; ---------------------------------------------------------------------------

loc_766412C9:				; CODE XREF: sub_76641161+151j
		lea	eax, [ebp+var_3C]
		push	eax		; name
		call	gethostbyname
		test	eax, eax
		jnz	short loc_766412EB
		push	dword ptr [ebx+214h] ; Object
		call	I_RpcFree
		push	esi		; s
		call	closesocket
		xor	eax, eax
		jmp	short loc_76641332
; ---------------------------------------------------------------------------

loc_766412EB:				; CODE XREF: sub_76641161+173j
		movsx	edx, word ptr [eax+0Ah]
		mov	eax, [eax+0Ch]
		lea	edi, [ebp+name.sa_data+2]
		mov	ecx, edx
		mov	esi, [eax]
		shr	ecx, 2
		rep movsd
		mov	ecx, edx
		and	ecx, 3
		rep movsb
		push	dword ptr [ebp+name.sa_data+2] ; in
		call	inet_ntoa
		mov	edi, eax
		mov	ecx, 0FFFFFFFFh
		sub	eax, eax
		repne scasb
		not	ecx
		sub	edi, ecx
		mov	edx, ecx
		shr	ecx, 2
		mov	esi, edi
		mov	edi, [ebp+arg_8]
		rep movsd
		mov	ecx, edx
		and	ecx, 3
		rep movsb
		mov	eax, [ebp+var_4]

loc_76641332:				; CODE XREF: sub_76641161+2Ej
					; sub_76641161+75j ...
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	10h
sub_76641161	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_7664133B(int, char *Str, int, int, int, int	backlog, int)
sub_7664133B	proc near		; DATA XREF: .data:76644010o

arg_0		= dword	ptr  4
Str		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
backlog		= dword	ptr  18h

		cmp	[esp+arg_C], 0Fh
		push	ebx
		push	esi
		push	edi
		ja	short loc_7664134C
		mov	eax, 0C0021000h
		jmp	short loc_766413BC
; ---------------------------------------------------------------------------

loc_7664134C:				; CODE XREF: sub_7664133B+8j
		mov	ebx, [esp+0Ch+Str]
		mov	ecx, 0FFFFFFFFh
		mov	edi, ebx
		sub	eax, eax
		repne scasb
		not	ecx
		lea	esi, [ecx-1]
		test	esi, esi
		jle	short loc_766413B7
		cmp	esi, 5
		jg	short loc_766413B7
		push	offset Control	; "0123456789"
		push	ebx		; Str
		call	strspn
		add	esp, 8
		cmp	eax, esi
		jnz	short loc_766413B7
		push	ebx		; Str
		call	atoi
		add	esp, 4
		mov	esi, eax
		cmp	esi, 0FFFFh
		jg	short loc_766413B7
		push	[esp+0Ch+backlog] ; backlog
		push	[esp+10h+arg_8]	; int
		push	esi		; hostshort
		push	[esp+18h+arg_0]	; int
		call	sub_76641161
		cmp	eax, esi
		jz	short loc_766413B3
		cmp	eax, 1
		sbb	eax, eax
		and	eax, 6AAh
		add	eax, 0Eh
		jmp	short loc_766413BC
; ---------------------------------------------------------------------------

loc_766413B3:				; CODE XREF: sub_7664133B+67j
		xor	eax, eax
		jmp	short loc_766413BC
; ---------------------------------------------------------------------------

loc_766413B7:				; CODE XREF: sub_7664133B+27j
					; sub_7664133B+2Cj ...
		mov	eax, 6AAh

loc_766413BC:				; CODE XREF: sub_7664133B+Fj
					; sub_7664133B+76j ...
		pop	edi
		pop	esi
		pop	ebx
		retn	1Ch
sub_7664133B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_766413C2(int, int, int, int, int, int, int backlog,	int)
sub_766413C2	proc near		; DATA XREF: .data:76644014o

DstBuf		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
backlog		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		cmp	[ebp+arg_8], 0Ch
		push	edi
		jnb	short loc_766413D6
		mov	eax, 0C0021001h
		jmp	short loc_76641433
; ---------------------------------------------------------------------------

loc_766413D6:				; CODE XREF: sub_766413C2+Bj
		cmp	[ebp+arg_10], 20h
		jnb	short loc_766413E3
		mov	eax, 0C0021000h
		jmp	short loc_76641433
; ---------------------------------------------------------------------------

loc_766413E3:				; CODE XREF: sub_766413C2+18j
		push	[ebp+backlog]	; backlog
		push	[ebp+arg_C]	; int
		push	0		; hostshort
		push	[ebp+arg_0]	; int
		call	sub_76641161
		test	eax, eax
		jg	short loc_76641406
		cmp	eax, 1
		sbb	eax, eax
		and	eax, 6AAh
		add	eax, 0Eh
		jmp	short loc_76641433
; ---------------------------------------------------------------------------

loc_76641406:				; CODE XREF: sub_766413C2+33j
		push	0Ah		; Radix
		lea	ecx, [ebp+DstBuf]
		push	ecx		; DstBuf
		lea	edi, [ebp+DstBuf]
		push	eax		; Val
		call	_itoa
		add	esp, 0Ch
		mov	ecx, 0FFFFFFFFh
		sub	eax, eax
		lea	edx, [ebp+DstBuf]
		repne scasb
		not	ecx
		push	ecx
		push	edx
		push	[ebp+arg_4]
		call	ds:RtlMoveMemory
		xor	eax, eax

loc_76641433:				; CODE XREF: sub_766413C2+12j
					; sub_766413C2+1Fj ...
		pop	edi
		mov	esp, ebp
		pop	ebp
		retn	20h
sub_766413C2	endp


; =============== S U B	R O U T	I N E =======================================


sub_7664143A	proc near		; DATA XREF: .data:76644018o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	dword ptr [esi+8], 0
		jz	short loc_76641454
		push	dword ptr [esi+4] ; s
		call	closesocket
		mov	dword ptr [esi+8], 0

loc_76641454:				; CODE XREF: sub_7664143A+9j
		pop	esi
		retn	4
sub_7664143A	endp


; =============== S U B	R O U T	I N E =======================================


sub_76641458	proc near		; CODE XREF: sub_7664150F+22p
					; sub_76641540+4Ep ...

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		push	edi
		push	ebp
		mov	edi, [esp+10h+arg_0]
		mov	esi, [edi+8]
		push	dword ptr [edi]	; s
		mov	ebx, [esi+214h]
		call	closesocket
		dec	dword ptr [esi]
		mov	dword ptr [edi+4], 1
		cmp	dword ptr [edi+0Ch], 0
		jz	short loc_76641496
		mov	eax, [edi+10h]
		test	eax, eax
		jz	short loc_766414B3
		push	eax
		push	edi
		call	I_RpcTransServerFreeBuffer
		mov	dword ptr [edi+10h], 0
		jmp	short loc_766414B3
; ---------------------------------------------------------------------------

loc_76641496:				; CODE XREF: sub_76641458+25j
		xor	edx, edx
		mov	ecx, [esi+21Ch]
		cmp	ecx, edx
		jl	short loc_766414B3
		mov	ebp, ebx
		mov	eax, [edi]

loc_766414A6:				; CODE XREF: sub_76641458+59j
		cmp	[ebp+0], eax
		jz	short loc_766414BC
		add	ebp, 8
		inc	edx
		cmp	edx, ecx
		jle	short loc_766414A6

loc_766414B3:				; CODE XREF: sub_76641458+2Cj
					; sub_76641458+3Cj ...
		xor	eax, eax
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		retn	4
; ---------------------------------------------------------------------------

loc_766414BC:				; CODE XREF: sub_76641458+51j
		mov	dword ptr [ebx+edx*8], 0
		mov	eax, [esi+21Ch]
		cmp	edx, eax
		jnz	short loc_766414D4
		dec	eax
		mov	[esi+21Ch], eax

loc_766414D4:				; CODE XREF: sub_76641458+73j
		xor	edx, edx
		mov	ebx, [esi+0Ch]
		cmp	ebx, edx
		jz	short loc_766414B3
		lea	ecx, [esi+10h]
		mov	eax, [edi]

loc_766414E2:				; CODE XREF: sub_76641458+94j
		cmp	[ecx], eax
		jz	short loc_766414F0
		add	ecx, 4
		inc	edx
		cmp	edx, ebx
		jb	short loc_766414E2
		jmp	short loc_766414B3
; ---------------------------------------------------------------------------

loc_766414F0:				; CODE XREF: sub_76641458+8Cj
		dec	ebx
		cmp	ebx, edx
		jbe	short loc_7664150A
		lea	ecx, [esi+edx*4+10h]

loc_766414F9:				; CODE XREF: sub_76641458+B0j
		mov	eax, [ecx+4]
		inc	edx
		mov	[ecx], eax
		add	ecx, 4
		mov	eax, [esi+0Ch]
		dec	eax
		cmp	eax, edx
		ja	short loc_766414F9

loc_7664150A:				; CODE XREF: sub_76641458+9Bj
		dec	dword ptr [esi+0Ch]
		jmp	short loc_766414B3
sub_76641458	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_7664150F(int, char *buf, int len)
sub_7664150F	proc near		; DATA XREF: .data:76644020o

arg_0		= dword	ptr  4
buf		= dword	ptr  8
len		= dword	ptr  0Ch

		push	esi
		push	edi
		mov	edi, [esp+8+len]
		push	0		; flags
		mov	esi, [esp+0Ch+arg_0]
		push	edi		; len
		push	[esp+10h+buf]	; buf
		push	dword ptr [esi]	; s
		call	send
		cmp	eax, edi
		mov	eax, 0
		jz	short loc_7664153B
		push	esi
		call	sub_76641458
		mov	eax, 0C002100Ah

loc_7664153B:				; CODE XREF: sub_7664150F+1Fj
		pop	edi
		pop	esi
		retn	0Ch
sub_7664150F	endp


; =============== S U B	R O U T	I N E =======================================


sub_76641540	proc near		; CODE XREF: sub_76641926+A4p

var_16		= word ptr -16h
var_14		= dword	ptr -14h
buf		= byte ptr -10h
var_C		= byte ptr -0Ch
var_8		= word ptr -8
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 18h
		push	ebx
		push	esi
		mov	ebx, [esp+20h+arg_0]
		push	edi
		push	ebp
		xor	bp, bp

loc_7664154E:				; CODE XREF: sub_76641540+32j
		push	0		; flags
		mov	ecx, 10h
		movzx	eax, bp
		sub	ecx, eax
		lea	eax, [esp+eax+2Ch+buf]
		push	ecx		; len
		push	eax		; buf
		push	dword ptr [ebx]	; s
		call	recv
		test	eax, eax
		jle	short loc_7664158D
		add	bp, ax
		cmp	bp, 10h
		jb	short loc_7664154E
		test	[esp+28h+var_C], 10h
		jnz	short loc_7664159A
		mov	al, byte ptr [esp+28h+var_8+1]
		mov	cl, byte ptr [esp+28h+var_8]
		mov	byte ptr [esp+28h+var_16], al
		mov	byte ptr [esp+28h+var_16+1], cl
		jmp	short loc_766415A4
; ---------------------------------------------------------------------------

loc_7664158D:				; CODE XREF: sub_76641540+29j
		push	ebx
		call	sub_76641458
		mov	eax, 0C0021008h
		jmp	short loc_76641615
; ---------------------------------------------------------------------------

loc_7664159A:				; CODE XREF: sub_76641540+39j
		mov	ax, [esp+28h+var_8]
		mov	[esp+28h+var_16], ax

loc_766415A4:				; CODE XREF: sub_76641540+4Bj
		movzx	ecx, [esp+28h+var_16]
		mov	eax, [esp+28h+arg_8]
		push	ecx
		mov	[esp+2Ch+var_14], ecx
		push	0
		push	[esp+30h+arg_4]
		push	ebx
		mov	[eax], ecx
		call	I_RpcTransServerReallocBuffer
		test	eax, eax
		jz	short loc_766415D1
		push	ebx
		call	sub_76641458
		mov	eax, 0Eh
		jmp	short loc_76641615
; ---------------------------------------------------------------------------

loc_766415D1:				; CODE XREF: sub_76641540+82j
		lea	esi, [esp+28h+buf]
		mov	eax, [esp+28h+arg_4]
		mov	edi, [eax]
		movsd
		movsd
		movsd
		movsd
		cmp	[esp+28h+var_16], bp
		jbe	short loc_76641613
		mov	esi, [esp+28h+var_14]

loc_766415EA:				; CODE XREF: sub_76641540+D1j
		push	0		; flags
		mov	eax, esi
		movzx	ecx, bp
		sub	eax, ecx
		mov	edx, [esp+2Ch+arg_4]
		push	eax		; len
		mov	eax, [edx]
		add	eax, ecx
		push	eax		; buf
		push	dword ptr [ebx]	; s
		call	recv
		cmp	eax, 0FFFFFFFFh
		jz	short loc_7664161F
		add	bp, ax
		cmp	[esp+28h+var_16], bp
		ja	short loc_766415EA

loc_76641613:				; CODE XREF: sub_76641540+A4j
		xor	eax, eax

loc_76641615:				; CODE XREF: sub_76641540+58j
					; sub_76641540+8Fj ...
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 18h
		retn	0Ch
; ---------------------------------------------------------------------------

loc_7664161F:				; CODE XREF: sub_76641540+C7j
		push	ebx
		call	sub_76641458
		mov	eax, 0C0021008h
		jmp	short loc_76641615
sub_76641540	endp


; =============== S U B	R O U T	I N E =======================================


sub_7664162C	proc near		; DATA XREF: .data:76644034o

var_2		= word ptr -2
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 4
		push	ebx
		push	esi
		mov	esi, [esp+0Ch+arg_0]
		push	edi
		push	ebp
		push	esi
		call	I_RpcTransServerMaxFrag
		movzx	ebx, ax
		mov	edi, [esp+14h+arg_4]
		push	ebx
		push	0
		push	edi
		push	esi
		call	I_RpcTransServerReallocBuffer
		test	eax, eax
		jnz	loc_76641795
		mov	ecx, [esp+14h+arg_8]
		mov	[ecx], ebx
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_766416C0
		push	dword ptr [esi+14h]
		push	eax
		push	dword ptr [edi]
		call	ds:RtlMoveMemory
		push	dword ptr [esi+10h]
		push	esi
		mov	ebp, [esi+14h]
		call	I_RpcTransServerFreeBuffer
		mov	dword ptr [esi+10h], 0

loc_76641682:				; CODE XREF: sub_7664162C+A4j
		cmp	ebp, 10h
		jnb	short loc_766416A8

loc_76641687:				; CODE XREF: sub_7664162C+7Aj
		push	0		; flags
		mov	eax, 10h
		sub	eax, ebp
		push	eax		; len
		mov	eax, [edi]
		add	eax, ebp
		push	eax		; buf
		push	dword ptr [esi]	; s
		call	recv
		test	eax, eax
		jle	short loc_766416E2
		add	ebp, eax
		cmp	ebp, 10h
		jb	short loc_76641687

loc_766416A8:				; CODE XREF: sub_7664162C+59j
		mov	ecx, [edi]
		test	byte ptr [ecx+4], 10h
		jnz	short loc_766416F2
		mov	al, [ecx+9]
		mov	cl, [ecx+8]
		mov	byte ptr [esp+14h+var_2], al
		mov	byte ptr [esp+14h+var_2+1], cl
		jmp	short loc_766416FB
; ---------------------------------------------------------------------------

loc_766416C0:				; CODE XREF: sub_7664162C+35j
		push	0		; flags
		push	ebx		; len
		push	dword ptr [edi]	; buf
		push	dword ptr [esi]	; s
		call	recv
		mov	ebp, eax
		test	ebp, ebp
		jg	short loc_76641682
		push	esi
		call	sub_76641458
		mov	eax, 0C0021008h
		jmp	loc_76641795
; ---------------------------------------------------------------------------

loc_766416E2:				; CODE XREF: sub_7664162C+73j
		push	esi
		call	sub_76641458
		mov	eax, 0C0021008h
		jmp	loc_76641795
; ---------------------------------------------------------------------------

loc_766416F2:				; CODE XREF: sub_7664162C+82j
		mov	ax, [ecx+8]
		mov	[esp+14h+var_2], ax

loc_766416FB:				; CODE XREF: sub_7664162C+92j
		mov	ax, [esp+14h+var_2]
		mov	ecx, [esp+14h+arg_8]
		cmp	[ecx], ax
		jnb	short loc_76641726
		movzx	eax, ax
		push	eax
		push	ebp
		push	edi
		push	esi
		call	I_RpcTransServerReallocBuffer
		test	eax, eax
		jz	short loc_76641726
		push	esi
		call	sub_76641458
		mov	eax, 0Eh
		jmp	short loc_76641795
; ---------------------------------------------------------------------------

loc_76641726:				; CODE XREF: sub_7664162C+DBj
					; sub_7664162C+EBj
		movzx	ebx, [esp+14h+var_2]
		cmp	ebx, ebp
		jge	short loc_7664176B
		sub	ebp, ebx
		lea	eax, [esi+10h]
		push	ebp
		mov	[esi+14h], ebp
		push	0
		push	eax
		push	esi
		call	I_RpcTransServerReallocBuffer
		test	eax, eax
		jz	short loc_76641752
		push	esi
		call	sub_76641458
		mov	eax, 0Eh
		jmp	short loc_76641795
; ---------------------------------------------------------------------------

loc_76641752:				; CODE XREF: sub_7664162C+117j
		push	dword ptr [esi+14h]
		mov	eax, [edi]
		add	eax, ebx
		push	eax
		push	dword ptr [esi+10h]
		call	ds:RtlMoveMemory
		mov	ecx, [esp+14h+arg_8]
		mov	[ecx], ebx
		jmp	short loc_76641793
; ---------------------------------------------------------------------------

loc_7664176B:				; CODE XREF: sub_7664162C+101j
		mov	ecx, [esp+14h+arg_8]
		cmp	ebx, ebp
		mov	[ecx], ebx
		jle	short loc_76641793

loc_76641775:				; CODE XREF: sub_7664162C+165j
		push	0		; flags
		mov	eax, ebx
		sub	eax, ebp
		push	eax		; len
		mov	eax, [edi]
		add	eax, ebp
		push	eax		; buf
		push	dword ptr [esi]	; s
		call	recv
		cmp	eax, 0FFFFFFFFh
		jz	short loc_7664179F
		add	ebp, eax
		cmp	ebx, ebp
		jg	short loc_76641775

loc_76641793:				; CODE XREF: sub_7664162C+13Dj
					; sub_7664162C+147j
		xor	eax, eax

loc_76641795:				; CODE XREF: sub_7664162C+24j
					; sub_7664162C+B1j ...
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		add	esp, 4
		retn	0Ch
; ---------------------------------------------------------------------------

loc_7664179F:				; CODE XREF: sub_7664162C+15Fj
		push	esi
		call	sub_76641458
		mov	eax, 0C0021008h
		jmp	short loc_76641795
sub_7664162C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_766417AC	proc near		; CODE XREF: sub_76641926+81p

optval		= byte ptr -14h
var_10		= dword	ptr -10h
Object		= dword	ptr -0Ch
s		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	dword ptr [ebp+optval],	1
		push	ebx
		push	esi
		push	edi
		xor	esi, esi
		push	esi		; addrlen
		mov	ebx, [ebp+arg_0]
		push	esi		; addr
		push	dword ptr [ebx+4] ; s
		call	accept
		push	4		; optlen
		mov	[ebp+s], eax
		lea	eax, [ebp+optval]
		push	eax		; optval
		push	1		; optname
		push	6		; level
		push	[ebp+s]		; s
		call	setsockopt
		lea	ecx, [ebp+var_10]
		push	ecx
		push	esi
		push	ebx
		call	I_RpcTransServerNewConnection
		mov	edi, [ebp+s]
		mov	[ebp+var_4], eax
		mov	[eax+8], ebx
		mov	[eax+4], esi
		mov	[eax], edi
		mov	edx, [ebp+var_10]
		mov	[eax+0Ch], edx
		inc	dword ptr [ebx]
		cmp	[ebp+var_10], esi
		jz	short loc_76641814
		push	eax
		mov	[eax+10h], esi
		call	I_RpcTransServerReceiveDirectReady
		jmp	loc_766418E2
; ---------------------------------------------------------------------------

loc_76641814:				; CODE XREF: sub_766417AC+58j
		xor	edx, edx
		mov	esi, [ebx+218h]
		cmp	esi, edx
		jle	short loc_76641839
		mov	ecx, [ebx+214h]
		mov	eax, ecx

loc_76641828:				; CODE XREF: sub_766417AC+8Bj
		cmp	dword ptr [eax], 0
		jz	loc_766418EB
		add	eax, 8
		inc	edx
		cmp	edx, esi
		jl	short loc_76641828

loc_76641839:				; CODE XREF: sub_766417AC+72j
		shl	esi, 4
		mov	eax, [ebx+214h]
		push	esi		; Size
		mov	[ebp+Object], eax
		call	I_RpcAllocate
		mov	ecx, [ebx+218h]
		mov	edi, eax
		shl	ecx, 3
		mov	esi, [ebp+Object]
		shr	ecx, 2
		mov	[ebx+214h], eax
		rep movsd
		mov	eax, [ebx+218h]
		lea	ecx, [eax+1]
		add	eax, eax
		cmp	eax, ecx
		jle	short loc_76641897
		lea	edx, ds:0[ecx*8]

loc_7664187A:				; CODE XREF: sub_766417AC+E9j
		mov	eax, [ebx+214h]
		inc	ecx
		mov	dword ptr [eax+edx], 0
		add	edx, 8
		mov	eax, [ebx+218h]
		add	eax, eax
		cmp	eax, ecx
		jg	short loc_7664187A

loc_76641897:				; CODE XREF: sub_766417AC+C5j
		mov	edx, [ebx+218h]
		mov	eax, [ebx+214h]
		mov	edi, [ebp+s]
		mov	ecx, [ebp+var_4]
		mov	[eax+edx*8], edi
		mov	eax, [ebx+214h]
		mov	[eax+edx*8+4], ecx
		mov	ecx, [ebx+0Ch]
		mov	[ebx+21Ch], edx
		cmp	ecx, 40h
		jnb	short loc_766418D4
		mov	eax, [ebx+214h]
		mov	edx, [eax+edx*8]
		mov	[ebx+ecx*4+10h], edx
		inc	dword ptr [ebx+0Ch]

loc_766418D4:				; CODE XREF: sub_766417AC+116j
		push	[ebp+Object]	; Object
		shl	dword ptr [ebx+218h], 1
		call	I_RpcFree

loc_766418E2:				; CODE XREF: sub_766417AC+63j
					; sub_766417AC+166j ...
		pop	edi
		pop	esi
		pop	ebx
		mov	esp, ebp
		pop	ebp
		retn	4
; ---------------------------------------------------------------------------

loc_766418EB:				; CODE XREF: sub_766417AC+7Fj
		mov	edi, [ebp+s]
		mov	[ecx+edx*8], edi
		mov	ecx, [ebp+var_4]
		mov	eax, [ebx+214h]
		mov	[eax+edx*8+4], ecx
		cmp	[ebx+21Ch], edx
		jge	short loc_7664190C
		mov	[ebx+21Ch], edx

loc_7664190C:				; CODE XREF: sub_766417AC+158j
		mov	ecx, [ebx+0Ch]
		cmp	ecx, 40h
		jnb	short loc_766418E2
		mov	eax, [ebx+214h]
		mov	edx, [eax+edx*8]
		mov	[ebx+ecx*4+10h], edx
		inc	dword ptr [ebx+0Ch]
		jmp	short loc_766418E2
sub_766417AC	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


sub_76641926	proc near		; DATA XREF: .data:76644024o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		push	esi
		push	edi
		push	ebp
		mov	ebp, [esp+10h+arg_0]

loc_7664192E:				; CODE XREF: sub_76641926+41j
					; sub_76641926+86j
		push	ebp
		call	sub_76641000
		test	eax, eax
		jnz	short loc_766419B1
		lea	ebx, [ebp+110h]

loc_7664193E:				; CODE XREF: sub_76641926+34j
		mov	edi, ebx
		lea	esi, [ebp+0Ch]
		mov	ecx, 41h
		push	0		; timeout
		rep movsd
		push	0		; exceptfds
		push	0		; writefds
		push	ebx		; readfds
		push	40h		; nfds
		call	select
		test	eax, eax
		jz	short loc_7664193E
		push	ebx		; fd_set *
		push	dword ptr [ebp+4] ; fd
		call	__WSAFDIsSet
		test	eax, eax
		jz	short loc_7664192E
		xor	edx, edx
		mov	ecx, [ebx]
		cmp	ecx, edx
		jz	short loc_766419A6
		lea	eax, [ebp+114h]
		mov	esi, [ebp+4]

loc_7664197A:				; CODE XREF: sub_76641926+5Ej
		cmp	[eax], esi
		jz	short loc_76641988
		add	eax, 4
		inc	edx
		cmp	edx, ecx
		jb	short loc_7664197A
		jmp	short loc_766419A6
; ---------------------------------------------------------------------------

loc_76641988:				; CODE XREF: sub_76641926+56j
		dec	ecx
		cmp	ecx, edx
		jbe	short loc_766419A4
		lea	ecx, [ebp+edx*4+114h]

loc_76641994:				; CODE XREF: sub_76641926+7Cj
		mov	eax, [ecx+4]
		inc	edx
		mov	[ecx], eax
		add	ecx, 4
		mov	eax, [ebx]
		dec	eax
		cmp	eax, edx
		ja	short loc_76641994

loc_766419A4:				; CODE XREF: sub_76641926+65j
		dec	dword ptr [ebx]

loc_766419A6:				; CODE XREF: sub_76641926+49j
					; sub_76641926+60j
		push	ebp
		call	sub_766417AC
		jmp	loc_7664192E
; ---------------------------------------------------------------------------

loc_766419B1:				; CODE XREF: sub_76641926+10j
		push	[esp+10h+arg_C]
		mov	ecx, [ebp+214h]
		push	[esp+14h+arg_8]
		mov	ecx, [ecx+eax*8+4]
		mov	eax, [esp+18h+arg_4]
		push	ecx
		mov	[eax], ecx
		call	sub_76641540
		pop	ebp
		pop	edi
		pop	esi
		pop	ebx
		retn	14h
sub_76641926	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_766419D6	proc near		; DATA XREF: .data:76644038o

name		= sockaddr ptr -14h
namelen		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	esi
		lea	eax, [ebp+namelen]
		push	edi
		lea	ecx, [ebp+name]
		push	eax		; namelen
		mov	edx, [ebp+arg_0]
		mov	[ebp+namelen], 10h
		push	ecx		; name
		push	dword ptr [edx]	; s
		call	getpeername
		test	eax, eax
		mov	eax, 0Eh
		jnz	short loc_76641A2C
		push	dword ptr [ebp+name.sa_data+2] ; in
		call	inet_ntoa
		mov	edi, eax
		mov	ecx, 0FFFFFFFFh
		sub	eax, eax
		repne scasb
		not	ecx
		sub	edi, ecx
		mov	eax, ecx
		shr	ecx, 2
		mov	esi, edi
		mov	edi, [ebp+arg_4]
		rep movsd
		mov	ecx, eax
		and	ecx, 3
		rep movsb
		xor	eax, eax

loc_76641A2C:				; CODE XREF: sub_766419D6+28j
		pop	edi
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn	0Ch
sub_766419D6	endp

; Exported entry   1. TransportLoad

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public TransportLoad
TransportLoad	proc near

WSAData		= WSAData ptr -190h

		push	ebp
		mov	ebp, esp
		sub	esp, 190h
		lea	eax, [ebp+WSAData]
		push	eax		; lpWSAData
		push	101h		; wVersionRequested
		call	WSAStartup
		mov	esp, ebp
		cmp	eax, 1
		sbb	eax, eax
		pop	ebp
		and	eax, offset dword_76644000
		retn	4
TransportLoad	endp

; [00000006 BYTES: COLLAPSED FUNCTION I_RpcFree. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION I_RpcAllocate. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION I_RpcTransServerFreeBuffer. PRESS	KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION I_RpcTransServerReallocBuffer. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION I_RpcTransServerMaxFrag. PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION I_RpcTransServerReceiveDirectReady. PRESS	KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION I_RpcTransServerNewConnection. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION atoi. PRESS KEYPAD "+" TO	EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION strspn. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _itoa. PRESS KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_76641A9A	proc near		; CODE XREF: DllEntryPoint+48p
					; DllEntryPoint+71p

arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		cmp	esi, 1
		jnz	short loc_76641ACC
		inc	dword_7664405C

loc_76641AAA:				; CODE XREF: sub_76641A9A+34j
					; sub_76641A9A+45j
		cmp	dword_76644060,	0
		jnz	short loc_76641AEE
		call	ds:GetVersion
		cmp	al, 3
		jnz	short loc_76641AE8
		test	eax, 80000000h
		jz	short loc_76641AE8
		inc	dword_76644060
		jmp	short loc_76641AEE
; ---------------------------------------------------------------------------

loc_76641ACC:				; CODE XREF: sub_76641A9A+8j
		test	esi, esi
		jnz	short loc_76641AAA
		cmp	dword_7664405C,	0
		jle	short loc_76641AE1
		dec	dword_7664405C
		jmp	short loc_76641AAA
; ---------------------------------------------------------------------------

loc_76641AE1:				; CODE XREF: sub_76641A9A+3Dj
		xor	eax, eax
		jmp	loc_76641BE3
; ---------------------------------------------------------------------------

loc_76641AE8:				; CODE XREF: sub_76641A9A+21j
					; sub_76641A9A+28j
		dec	dword_76644060

loc_76641AEE:				; CODE XREF: sub_76641A9A+17j
					; sub_76641A9A+30j
		cmp	esi, 1
		jnz	loc_76641B86
		cmp	dword_76644060,	0
		jl	short loc_76641B16
		cmp	dword_7664405C,	1
		jnz	loc_76641BDE
		cmp	dword_76644060,	0
		jge	short loc_76641B34

loc_76641B16:				; CODE XREF: sub_76641A9A+64j
		push	80h		; Size
		call	ds:malloc
		add	esp, 4
		mov	ds:hMem, eax
		test	eax, eax
		jnz	short loc_76641B5D
		xor	eax, eax
		jmp	loc_76641BE3
; ---------------------------------------------------------------------------

loc_76641B34:				; CODE XREF: sub_76641A9A+7Aj
		cmp	dword_7664405C,	1
		jnz	short loc_76641B5D
		push	80h		; dwBytes
		push	2000h		; uFlags
		call	ds:GlobalAlloc
		mov	ds:hMem, eax
		test	eax, eax
		jnz	short loc_76641B5D
		xor	eax, eax
		jmp	loc_76641BE3
; ---------------------------------------------------------------------------

loc_76641B5D:				; CODE XREF: sub_76641A9A+91j
					; sub_76641A9A+A1j ...
		mov	eax, ds:hMem
		push	offset dword_7664406C
		push	offset dword_76644068
		mov	dword ptr [eax], 0
		mov	eax, ds:hMem
		mov	ds:dword_76642000, eax
		call	_initterm
		add	esp, 8
		jmp	short loc_76641BDE
; ---------------------------------------------------------------------------

loc_76641B86:				; CODE XREF: sub_76641A9A+57j
		test	esi, esi
		jnz	short loc_76641BDE
		cmp	dword_76644060,	0
		jl	short loc_76641B9C
		cmp	dword_7664405C,	0
		jnz	short loc_76641BDE

loc_76641B9C:				; CODE XREF: sub_76641A9A+F7j
		cmp	ds:hMem, 0
		jz	short loc_76641BDE
		mov	esi, ds:dword_76642000
		sub	esi, 4
		cmp	ds:hMem, esi
		ja	short loc_76641BC9

loc_76641BB6:				; CODE XREF: sub_76641A9A+12Dj
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_76641BBE
		call	eax

loc_76641BBE:				; CODE XREF: sub_76641A9A+120j
		sub	esi, 4
		cmp	ds:hMem, esi
		jbe	short loc_76641BB6

loc_76641BC9:				; CODE XREF: sub_76641A9A+11Aj
		cmp	dword_76644060,	0
		jle	short loc_76641BDE
		mov	eax, ds:hMem
		push	eax		; hMem
		call	ds:GlobalFree

loc_76641BDE:				; CODE XREF: sub_76641A9A+6Dj
					; sub_76641A9A+EAj ...
		mov	eax, 1

loc_76641BE3:				; CODE XREF: sub_76641A9A+49j
					; sub_76641A9A+95j ...
		pop	esi
		retn	0Ch
sub_76641A9A	endp

; [0000009D BYTES: COLLAPSED FUNCTION DllEntryPoint. PRESS KEYPAD "+" TO EXPAND]
; ---------------------------------------------------------------------------
		push	dword ptr [esp+0Ch]
		push	dword ptr [esp+0Ch]
		push	dword ptr [esp+0Ch]
		call	DllEntryPoint
		retn	0Ch
; [0000009A BYTES: COLLAPSED FUNCTION __onexit.	PRESS KEYPAD "+" TO EXPAND]
; ---------------------------------------------------------------------------
		push	dword ptr [esp+4]
		call	__onexit
		add	esp, 4
		cmp	eax, 1
		sbb	eax, eax
		retn
; [00000006 BYTES: COLLAPSED FUNCTION _initterm. PRESS KEYPAD "+" TO EXPAND]
; ---------------------------------------------------------------------------
		jmp	ds:malloc

; =============== S U B	R O U T	I N E =======================================


; BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
_DllMain@12	proc near		; CODE XREF: DllEntryPoint+5Ap

hinstDLL	= dword	ptr  4
fdwReason	= dword	ptr  8
lpvReserved	= dword	ptr  0Ch

		mov	eax, 1
		retn	0Ch
_DllMain@12	endp

; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit. PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION __WSAFDIsSet. PRESS KEYPAD "+" TO	EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION inet_ntoa. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION closesocket. PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION gethostbyname. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION gethostname. PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION listen. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION ntohs. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION getsockname. PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION bind. PRESS KEYPAD "+" TO	EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION htons. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION setsockopt. PRESS	KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION socket. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION send. PRESS KEYPAD "+" TO	EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION recv. PRESS KEYPAD "+" TO	EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION accept. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION select. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION getpeername. PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION WSAStartup. PRESS	KEYPAD "+" TO EXPAND]
; ---------------------------------------------------------------------------
		jmp	ds:RtlMoveMemory
; ---------------------------------------------------------------------------
		jmp	ds:GlobalFree
; ---------------------------------------------------------------------------
		jmp	ds:GlobalAlloc
; ---------------------------------------------------------------------------
		jmp	ds:GetVersion
; ---------------------------------------------------------------------------
		jmp	ds:Sleep
; ---------------------------------------------------------------------------
		align 400h
_text		ends

; Section 2. (virtual address 00002000)
; Virtual size			: 0000000C (	 12.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0000080: Bss Readable Writable
; Alignment	: default
; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 76642000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_76642000	dd ?			; DATA XREF: sub_76641A9A+DDw
					; sub_76641A9A+10Br ...
; HGLOBAL hMem
hMem		dd ?			; DATA XREF: sub_76641A9A+8Aw
					; sub_76641A9A+B3w ...
dword_76642008	dd ?			; DATA XREF: DllEntryPoint:loc_76641C0Fr
					; DllEntryPoint+80r
		align 1000h
_bss		ends

; Section 3. (virtual address 00003000)
; Virtual size			: 0000009D (	157.)
; Section size in file		: 00001000 (   4096.)
; Offset to raw	data for section: 00002000
; Flags	40000040: Data Readable
; Alignment	: default
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 76643000h
		dd 0
		dd 2FF36158h, 0
		dd 4, 110h, 0
		dd 7200h, 0
		dd 2FF36158h, 0
		dd 3, 0C0h, 0
		dd 7310h, 0
		dd 2FF36158h, 0
		dd 6, 0A5Ch, 0
		dd 23D0h, 0
		dd 2FF36158h, 0
		dd 2, 7C0Ch, 0
		dd 2E2Ch
aNtRemoteProced	db 'NT Remote Procedure Call TCP Server Transport',0
		align 1000h
_rdata		ends

; Section 4. (virtual address 00004000)
; Virtual size			: 00000078 (	120.)
; Section size in file		: 00001000 (   4096.)
; Offset to raw	data for section: 00003000
; Flags	C0000040: Data Readable	Writable
; Alignment	: default
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 76644000h
dword_76644000	dd 3, 16D0h, 224h, 18h	; DATA XREF: TransportLoad+22o
		dd offset sub_7664133B
		dd offset sub_766413C2
		dd offset sub_7664143A
		dd offset sub_76641458
		dd offset sub_7664150F
		dd offset sub_76641926
		dd 3 dup(0)
		dd offset sub_7664162C
		dd offset sub_766419D6
		align 10h
		dd 0B0640h, 0
		dd 0C0h, 46000000h
; char Control[]
Control		db '0123456789',0       ; DATA XREF: sub_7664133B+2Eo
		align 4
dword_7664405C	dd 0			; DATA XREF: sub_76641A9A+Aw
					; sub_76641A9A+36r ...
dword_76644060	dd 0			; DATA XREF: sub_76641A9A:loc_76641AAAr
					; sub_76641A9A+2Aw ...
dword_76644064	dd 0			; DATA XREF: __onexit+39r __onexit+4Cr ...
dword_76644068	dd 0			; DATA XREF: sub_76641A9A+CDo
dword_7664406C	dd 3E5h	dup(0)		; DATA XREF: sub_76641A9A+C8o
_data		ends

; Section 5. (virtual address 00005000)
; Virtual size			: 00000324 (	804.)
; Section size in file		: 00001000 (   4096.)
; Offset to raw	data for section: 00004000
; Flags	40000040: Data Readable
; Alignment	: default
; ===========================================================================

; Segment type:	Externs
; _idata


;
; Imports from KERNEL32.dll
;
; HGLOBAL __stdcall GlobalFree(HGLOBAL hMem)
		extrn GlobalFree:dword	; CODE XREF: sub_76641A9A+13Ep
					; DATA XREF: sub_76641A9A+13Er	...
; HGLOBAL __stdcall GlobalAlloc(UINT uFlags, SIZE_T dwBytes)
		extrn GlobalAlloc:dword	; CODE XREF: sub_76641A9A+ADp
					; DATA XREF: sub_76641A9A+ADr ...
; DWORD	__stdcall GetVersion()
		extrn GetVersion:dword	; CODE XREF: sub_76641A9A+19p
					; __onexit+Bp
					; DATA XREF: ...
; void __stdcall Sleep(DWORD dwMilliseconds)
		extrn Sleep:dword	; CODE XREF: __onexit+4Ap
					; DATA XREF: __onexit+42r ...
		extrn RtlMoveMemory:dword ; CODE XREF: sub_766413C2+69p
					; sub_7664162C+3Dp ...

;
; Imports from MSVCRT20.dll
;
; char *__cdecl	_itoa(int Val, char *DstBuf, int Radix)
		extrn __imp__itoa:dword	; DATA XREF: _itoar
		extrn __imp___dllonexit:dword ;	DATA XREF: __dllonexitr
; int __cdecl atoi(const char *Str)
		extrn __imp_atoi:dword	; DATA XREF: atoir
; size_t __cdecl strspn(const char *Str, const char *Control)
		extrn __imp_strspn:dword ; DATA	XREF: strspnr
; _onexit_t __cdecl onexit(_onexit_t Func)
		extrn _onexit:dword	; CODE XREF: __onexit+68p
					; DATA XREF: __onexit+68r
		extrn __imp__initterm:dword ; DATA XREF: _inittermr
; void *__cdecl	malloc(size_t Size)
		extrn malloc:dword	; CODE XREF: sub_76641A9A+81p
					; DATA XREF: sub_76641A9A+81r ...

;
; Imports from RPCRT4.dll
;
		extrn __imp_I_RpcTransServerNewConnection:dword
					; DATA XREF: I_RpcTransServerNewConnectionr
		extrn __imp_I_RpcTransServerReceiveDirectReady:dword
					; DATA XREF: I_RpcTransServerReceiveDirectReadyr
		extrn __imp_I_RpcTransServerMaxFrag:dword
					; DATA XREF: I_RpcTransServerMaxFragr
		extrn __imp_I_RpcTransServerReallocBuffer:dword
					; DATA XREF: I_RpcTransServerReallocBufferr
		extrn __imp_I_RpcTransServerFreeBuffer:dword
					; DATA XREF: I_RpcTransServerFreeBufferr
; void *__stdcall I_RpcAllocate(unsigned int Size)
		extrn __imp_I_RpcAllocate:dword	; DATA XREF: I_RpcAllocater
; void __stdcall I_RpcFree(void	*Object)
		extrn __imp_I_RpcFree:dword ; DATA XREF: I_RpcFreer

;
; Imports from WSOCK32.dll
;
; int __stdcall	select(int nfds, fd_set	*readfds, fd_set *writefds, fd_set *exceptfds, const struct timeval *timeout)
		extrn __imp_select:dword ; DATA	XREF: selectr
; int __stdcall	getsockname(SOCKET s, struct sockaddr *name, int *namelen)
		extrn __imp_getsockname:dword ;	DATA XREF: getsocknamer
; int __stdcall	bind(SOCKET s, const struct sockaddr *name, int	namelen)
		extrn __imp_bind:dword	; DATA XREF: bindr
; u_short __stdcall htons(u_short hostshort)
		extrn __imp_htons:dword	; DATA XREF: htonsr
; int __stdcall	setsockopt(SOCKET s, int level,	int optname, const char	*optval, int optlen)
		extrn __imp_setsockopt:dword ; DATA XREF: setsockoptr
; SOCKET __stdcall socket(int af, int type, int	protocol)
		extrn __imp_socket:dword ; DATA	XREF: socketr
; int __stdcall	send(SOCKET s, const char *buf,	int len, int flags)
		extrn __imp_send:dword	; DATA XREF: sendr
; int __stdcall	recv(SOCKET s, char *buf, int len, int flags)
		extrn __imp_recv:dword	; DATA XREF: recvr
; SOCKET __stdcall accept(SOCKET s, struct sockaddr *addr, int *addrlen)
		extrn __imp_accept:dword ; DATA	XREF: acceptr
; u_short __stdcall ntohs(u_short netshort)
		extrn __imp_ntohs:dword	; DATA XREF: ntohsr
; int __stdcall	getpeername(SOCKET s, struct sockaddr *name, int *namelen)
		extrn __imp_getpeername:dword ;	DATA XREF: getpeernamer
; int __stdcall	WSAStartup(WORD	wVersionRequested, LPWSADATA lpWSAData)
		extrn __imp_WSAStartup:dword ; DATA XREF: WSAStartupr
; int __stdcall	listen(SOCKET s, int backlog)
		extrn __imp_listen:dword ; DATA	XREF: listenr
; struct hostent *__stdcall gethostbyname(const	char *name)
		extrn __imp_gethostbyname:dword	; DATA XREF: gethostbynamer
; int __stdcall	closesocket(SOCKET s)
		extrn __imp_closesocket:dword ;	DATA XREF: closesocketr
; char *__stdcall inet_ntoa(struct in_addr in)
		extrn __imp_inet_ntoa:dword ; DATA XREF: inet_ntoar
; int __stdcall	__WSAFDIsSet(SOCKET fd,	fd_set *)
		extrn __imp___WSAFDIsSet:dword ; DATA XREF: __WSAFDIsSetr
; int __stdcall	gethostname(char *name,	int namelen)
		extrn __imp_gethostname:dword ;	DATA XREF: gethostnamer



		end DllEntryPoint
