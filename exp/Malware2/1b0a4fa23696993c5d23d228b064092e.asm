;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	   Copyright (c) 2010 by Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B231-7414-99			    |
; |		       NCFTA Canada/Concordia University		    |
; +-------------------------------------------------------------------------+
;
;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	   Copyright (c) 2010 by Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B231-7414-99			    |
; |		       NCFTA Canada/Concordia University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	1B0A4FA23696993C5D23D228B064092E
; Input	CRC32 :	D1CEF758

; File Name   :	c:\Users\farhadi\Desktop\Sample\samples\1b0a4fa23696993c5d23d228b064092e
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	1000000
; Section 1. (virtual address 00001000)
; Virtual size			: 00000D94 (   3476.)
; Section size in file		: 00000E00 (   3584.)
; Offset to raw	data for section: 00000400
; Flags	E0000060: Text Data Executable Readable	Writable
; Alignment	: default
;
; Imports from COMCTL32.dll
;

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Externs
; _idata
; BOOL __stdcall InitCommonControlsEx(const INITCOMMONCONTROLSEX *picce)
		extrn InitCommonControlsEx:dword ; CODE	XREF: sub_1001467+41p
					; DATA XREF: sub_1001467+41r ...

;
; Imports from KERNEL32.dll
;
; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
		extrn FreeLibrary:dword	; CODE XREF: sub_1001467+FCp
					; DATA XREF: sub_1001467+FCr ...
; HMODULE __stdcall LoadLibraryW(LPCWSTR lpLibFileName)
		extrn LoadLibraryW:dword ; CODE	XREF: sub_1001467+C6p
					; DATA XREF: sub_1001467+C6r
; DWORD	__stdcall FormatMessageW(DWORD dwFlags,	LPCVOID	lpSource, DWORD	dwMessageId, DWORD dwLanguageId, LPWSTR	lpBuffer, DWORD	nSize, va_list *Arguments)
		extrn FormatMessageW:dword ; CODE XREF:	sub_1001467+ABp
					; sub_1001467+EFp
					; DATA XREF: ...
; BOOL __stdcall TerminateProcess(HANDLE hProcess, UINT	uExitCode)
		extrn TerminateProcess:dword ; CODE XREF: sub_10015C2+65p
					; DATA XREF: sub_10015C2+65r
; HANDLE __stdcall GetCurrentProcess()
		extrn GetCurrentProcess:dword ;	CODE XREF: sub_10015C2+5Ep
					; DATA XREF: sub_10015C2+5Er
; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
		extrn GetProcAddress:dword ; CODE XREF:	sub_100163A+7Ep
					; DATA XREF: sub_100163A+7Er
; LCID __stdcall GetUserDefaultLCID()
		extrn GetUserDefaultLCID:dword ; CODE XREF: sub_10013D0+67p
					; sub_1001467+99p ...
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn QueryPerformanceCounter:dword ; CODE XREF: sub_100163A+43p
					; DATA XREF: sub_100163A+43r
; DWORD	__stdcall GetTickCount()
		extrn GetTickCount:dword ; CODE	XREF: sub_100163A+37p
					; DATA XREF: sub_100163A+37r
; DWORD	__stdcall GetCurrentThreadId()
		extrn GetCurrentThreadId:dword ; CODE XREF: sub_100163A+2Fp
					; DATA XREF: sub_100163A+2Fr
; DWORD	__stdcall GetCurrentProcessId()
		extrn GetCurrentProcessId:dword	; CODE XREF: sub_100163A+27p
					; DATA XREF: sub_100163A+27r
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn GetSystemTimeAsFileTime:dword ; CODE XREF: sub_100163A+1Bp
					; DATA XREF: sub_100163A+1Br
; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
		extrn GetModuleHandleA:dword ; CODE XREF: sub_100163A+68p
					; DATA XREF: sub_100163A+68r
; LPWSTR __stdcall GetCommandLineW()
		extrn GetCommandLineW:dword ; CODE XREF: sub_100138F+4p
					; DATA XREF: sub_100138F+4r
; void __stdcall GetStartupInfoW(LPSTARTUPINFOW	lpStartupInfo)
		extrn GetStartupInfoW:dword ; CODE XREF: start+10p
					; DATA XREF: start+10r

;
; Imports from OLEAUT32.dll
;
; BSTR __stdcall SysAllocString(const OLECHAR *psz)
		extrn SysAllocString:dword ; CODE XREF:	sub_10012A8+Fp
					; sub_10013D0+Cp
					; DATA XREF: ...
; void __stdcall SysFreeString(BSTR bstrString)
		extrn SysFreeString:dword ; CODE XREF: sub_10012A8+5p
					; sub_10013D0+89p
					; DATA XREF: ...

;
; Imports from USER32.dll
;
; int __stdcall	MessageBoxW(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType)
		extrn MessageBoxW:dword	; CODE XREF: sub_1001467+135p
					; DATA XREF: sub_1001467+135r ...
; int wsprintfW(LPWSTR,	LPCWSTR, ...)
		extrn wsprintfW:dword	; CODE XREF: sub_1001467+11Cp
					; DATA XREF: sub_1001467+11Cr

;
; Imports from msvcrt.dll
;
; void __cdecl cexit()
		extrn _cexit:dword	; CODE XREF: start:loc_100187Fp
					; DATA XREF: start:loc_100187Fr ...
; void __cdecl exit(int	Code)
		extrn exit:dword	; CODE XREF: start+1A6p
					; DATA XREF: start+1A6r
; size_t __cdecl wcslen(const wchar_t *Str)
		extrn wcslen:dword	; CODE XREF: sub_10012C5+22p
					; DATA XREF: sub_10012C5+22r
		extrn __wgetmainargs:dword ; CODE XREF:	start+107p
					; DATA XREF: start+107r
		extrn __imp__initterm:dword ; DATA XREF: _inittermr
		extrn __setusermatherr:dword ; CODE XREF: start+CEp
					; DATA XREF: start+CEr
		extrn _adjust_fdiv:dword ; DATA	XREF: start+AFr
		extrn __imp__XcptFilter:dword ;	DATA XREF: _XcptFilterr
; __declspec(dllimport)	void __cdecl operator delete(void *)
		extrn __imp_??3@YAXPAX@Z:dword ; DATA XREF: operator delete(void *)r
		extrn __set_app_type:dword ; CODE XREF:	start+7Dp
					; DATA XREF: start+7Dr
; unsigned int __cdecl _controlfp(unsigned int NewValue, unsigned int Mask)
		extrn __imp__controlfp:dword ; DATA XREF: _controlfpr
		extrn __imp__except_handler3:dword ; DATA XREF:	_except_handler3r
; void __cdecl exit(int	Code)
		extrn _exit:dword	; CODE XREF: start+1D8p
					; DATA XREF: start+1D8r
		extrn __p__commode:dword ; CODE	XREF: start+A1p
					; DATA XREF: start+A1r
; void __cdecl c_exit()
		extrn _c_exit:dword	; CODE XREF: start:loc_10018B1p
					; DATA XREF: start:loc_10018B1r
; wchar_t *__cdecl wcsncat(wchar_t *Dest, const	wchar_t	*Source, size_t	Count)
		extrn wcsncat:dword	; CODE XREF: sub_10012C5+5Dp
					; DATA XREF: sub_10012C5+5Dr
; __declspec(dllimport)	void * __cdecl operator	new(unsigned int)
		extrn __imp_??2@YAPAXI@Z:dword ; DATA XREF: operator new(uint)r
; size_t __cdecl wcsspn(const wchar_t *Str, const wchar_t *Control)
		extrn wcsspn:dword	; CODE XREF: sub_1001332+44p
					; DATA XREF: sub_1001332+44r
		extrn __p__fmode:dword	; CODE XREF: start+93p
					; DATA XREF: start+93r
; wchar_t *__cdecl wcschr(const	wchar_t	*Str, wchar_t Ch)
		extrn wcschr:dword	; CODE XREF: sub_10012C5+15p
					; sub_1001332+17p ...
		extrn _wcmdln:dword	; DATA XREF: start+122r

;
; Imports from ole32.dll
;
; void __stdcall CoUninitialize()
		extrn CoUninitialize:dword ; CODE XREF:	sub_1001467+144p
					; DATA XREF: sub_1001467+144r ...
; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN	pUnkOuter, DWORD dwClsContext, const IID *const	riid, LPVOID *ppv)
		extrn CoCreateInstance:dword ; CODE XREF: sub_10013D0+2Bp
					; DATA XREF: sub_10013D0+2Br
; HRESULT __stdcall CoInitialize(LPVOID	pvReserved)
		extrn CoInitialize:dword ; CODE	XREF: sub_1001467+18p
					; DATA XREF: sub_1001467+18r


; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Write/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 10010C8h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
		dd 3 dup(0)
		dd 3DF7C55Ah, 0
		dd 2, 1Dh, 125Ch, 65Ch
; IID rclsid
rclsid		dd 0A8D3AD02h		; Data1	; DATA XREF: sub_10013D0+23o
		dw 7508h		; Data2
		dw 4004h		; Data3
		db 0B2h, 0E9h, 0ADh, 33h, 0F0h,	87h, 0F4h, 3Ch;	Data4
		dd offset aS		; "S"
		dd offset aD		; "D"
		dd offset aB		; "B"
		dd offset aVal		; "Val"
		dd offset aForceremove	; "ForceRemove"
		dd offset aNoremove	; "NoRemove"
		dd offset aDelete	; "Delete"
aDelete:				; DATA XREF: .text:01001114o
		unicode	0, <Delete>,0
		align 4
aNoremove:				; DATA XREF: .text:01001110o
		unicode	0, <NoRemove>,0
		align 4
aForceremove:				; DATA XREF: .text:0100110Co
		unicode	0, <ForceRemove>,0
aVal:					; DATA XREF: .text:01001108o
		unicode	0, <Val>,0
aB:					; DATA XREF: .text:01001104o
		unicode	0, <B>,0
aD:					; DATA XREF: .text:01001100o
		unicode	0, <D>,0
aS:					; DATA XREF: .text:010010FCo
		unicode	0, <S>,0
; IID riid
riid		dd 731B9D9Eh		; Data1	; DATA XREF: sub_10013D0+19o
		dw 6CF4h		; Data2
		dw 4C37h		; Data3
		db 0A6h, 0A9h, 0A8h, 9Bh, 88h, 0Dh, 36h, 0ECh; Data4
; wchar_t Control
Control		dw 20h			; DATA XREF: sub_1001332:loc_1001370o
		align 4
; OLECHAR psz
psz		dw 0			; DATA XREF: sub_10013D0+7o
		align 10h
; const	WCHAR Caption
Caption:				; DATA XREF: sub_1001467+127o
		unicode	0, <Windows Media Profile Editor>,0
		align 4
; const	WCHAR a0xLx
a0xLx:					; DATA XREF: sub_1001467+116o
		unicode	0, <0x%lX>,0
aMsdmo:					; DATA XREF: sub_1001467+92o
		unicode	0, <msdmo>,0
aAsferror:				; DATA XREF: sub_1001467+8Bo
		unicode	0, <asferror>,0
		align 4
aQuartz:				; DATA XREF: sub_1001467+84o
		unicode	0, <quartz>,0
		align 4
aMsxml:					; DATA XREF: sub_1001467+7Do
		unicode	0, <msxml>,0
aWininet:				; DATA XREF: sub_1001467+76o
		unicode	0, <wininet>,0
aWmerror:				; DATA XREF: sub_1001467+6Fo
		unicode	0, <wmerror>,0
; char ProcName[]
ProcName	db 'UnhandledExceptionFilter',0 ; DATA XREF: sub_100163A+78o
		align 10h
; char ModuleName[]
ModuleName	db 'kernel32.dll',0     ; DATA XREF: sub_100163A:loc_100169Do
		align 10h
stru_1001250	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_100188A, offset loc_100189E>
					; DATA XREF: start+2o
					; SEH scope table for function 10016D3
aNb10		db 'NB10',0
		align 4
		db  5Ah	; Z
		db 0C5h, 0F7h, 3Dh
		db    1
		align 4
		db  57h	; W
		db 4Dh,	50h, 72h
		db  6Fh	; o
		db 45h,	64h, 74h
		db  2Eh	; .
		db 70h,	64h, 62h
		db    0
aUltimediaDmdCo	db 'ultimedia\DMD\Corona\bin\obj\i386\WMProEdt.pdb',0

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_10012A8(OLECHAR *psz)
sub_10012A8	proc near		; CODE XREF: sub_10013D0+4Ep

psz		= dword	ptr  4

		push	esi
		mov	esi, ecx
		push	dword ptr [esi]	; bstrString
		call	ds:SysFreeString
		push	[esp+4+psz]	; psz
		call	ds:SysAllocString
		mov	[esi], eax
		mov	eax, esi
		pop	esi
		retn	4
sub_10012A8	endp


; =============== S U B	R O U T	I N E =======================================


sub_10012C5	proc near		; CODE XREF: sub_100138F+22p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		cmp	word ptr [edi],	22h
		jnz	short loc_10012D7
		inc	edi
		inc	edi
		push	22h
		jmp	short loc_10012D9
; ---------------------------------------------------------------------------

loc_10012D7:				; CODE XREF: sub_10012C5+Aj
		push	20h		; Ch

loc_10012D9:				; CODE XREF: sub_10012C5+10j
		push	edi		; Str
		call	ds:wcschr
		test	eax, eax
		pop	ecx
		pop	ecx
		jnz	short loc_10012F1
		push	edi		; Str
		call	ds:wcslen
		pop	ecx
		lea	eax, [edi+eax*2]

loc_10012F1:				; CODE XREF: sub_10012C5+1Fj
		sub	eax, edi
		mov	esi, eax
		xor	eax, eax
		sar	esi, 1
		inc	eax
		cmp	esi, eax
		jl	short loc_100132D
		lea	eax, [esi+esi+2]
		push	eax		; unsigned int
		call	??2@YAPAXI@Z	; operator new(uint)
		test	eax, eax
		pop	ecx
		mov	ecx, [esp+8+arg_4]
		mov	[ecx], eax
		jnz	short loc_100131A
		mov	eax, 8007000Eh
		jmp	short loc_100132D
; ---------------------------------------------------------------------------

loc_100131A:				; CODE XREF: sub_10012C5+4Cj
		and	word ptr [eax],	0
		push	esi		; Count
		push	edi		; Source
		push	dword ptr [ecx]	; Dest
		call	ds:wcsncat
		add	esp, 0Ch
		xor	eax, eax

loc_100132D:				; CODE XREF: sub_10012C5+37j
					; sub_10012C5+53j
		pop	edi
		pop	esi
		retn	8
sub_10012C5	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_1001332(wchar_t *Str)
sub_1001332	proc near		; CODE XREF: sub_100138F+Bp
					; sub_100138F+2Ep

Str		= dword	ptr  4

		mov	eax, [esp+Str]
		cmp	word ptr [eax],	22h
		push	esi
		jnz	short loc_100135B
		mov	esi, ds:wcschr
		add	eax, 2
		push	22h		; Ch
		push	eax		; Str
		call	esi ; wcschr
		test	eax, eax
		pop	ecx
		pop	ecx
		jz	short loc_100136C
		add	eax, 2
		push	20h		; Ch
		push	eax		; Str
		call	esi ; wcschr
		jmp	short loc_1001364
; ---------------------------------------------------------------------------

loc_100135B:				; CODE XREF: sub_1001332+9j
		push	20h		; Ch
		push	eax		; Str
		call	ds:wcschr

loc_1001364:				; CODE XREF: sub_1001332+27j
		mov	esi, eax
		test	esi, esi
		pop	ecx
		pop	ecx
		jnz	short loc_1001370

loc_100136C:				; CODE XREF: sub_1001332+1Dj
		xor	eax, eax
		jmp	short loc_100138B
; ---------------------------------------------------------------------------

loc_1001370:				; CODE XREF: sub_1001332+38j
		push	offset Control	; Control
		push	esi		; Str
		call	ds:wcsspn
		pop	ecx
		lea	eax, [esi+eax*2]
		pop	ecx
		mov	cx, [eax]
		neg	cx
		sbb	ecx, ecx
		and	eax, ecx

loc_100138B:				; CODE XREF: sub_1001332+3Cj
		pop	esi
		retn	4
sub_1001332	endp


; =============== S U B	R O U T	I N E =======================================


sub_100138F	proc near		; CODE XREF: sub_10013D0+43p

arg_0		= dword	ptr  4

		push	esi
		push	edi
		xor	edi, edi
		call	ds:GetCommandLineW
		push	eax		; Str
		call	sub_1001332
		mov	esi, eax
		test	esi, esi
		jz	short loc_10013C9
		push	ebx
		mov	ebx, [esp+0Ch+arg_0]

loc_10013AA:				; CODE XREF: sub_100138F+37j
		cmp	dword ptr [ebx], 0
		jnz	short loc_10013BC
		push	ebx
		push	esi
		call	sub_10012C5
		mov	edi, eax
		test	edi, edi
		jl	short loc_10013C8

loc_10013BC:				; CODE XREF: sub_100138F+1Ej
		push	esi		; Str
		call	sub_1001332
		mov	esi, eax
		test	esi, esi
		jnz	short loc_10013AA

loc_10013C8:				; CODE XREF: sub_100138F+2Bj
		pop	ebx

loc_10013C9:				; CODE XREF: sub_100138F+14j
		mov	eax, edi
		pop	edi
		pop	esi
		retn	4
sub_100138F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_10013D0(OLECHAR *psz)
sub_10013D0	proc near		; CODE XREF: sub_1001467+4Ap

bstrString	= dword	ptr -8
ppv		= dword	ptr -4
psz		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	esi
		push	edi
		push	offset psz	; psz
		call	ds:SysAllocString
		mov	[ebp+bstrString], eax
		lea	eax, [ebp+ppv]
		push	eax		; ppv
		push	offset riid	; riid
		push	17h		; dwClsContext
		xor	edi, edi
		push	edi		; pUnkOuter
		push	offset rclsid	; rclsid
		mov	[ebp+ppv], edi
		call	ds:CoCreateInstance
		mov	esi, eax
		cmp	esi, edi
		jl	short loc_1001449
		cmp	[ebp+psz], edi
		jz	short loc_1001431
		lea	eax, [ebp+psz]
		push	eax
		mov	[ebp+psz], edi
		call	sub_100138F
		push	[ebp+psz]	; psz
		lea	ecx, [ebp+bstrString]
		call	sub_10012A8
		cmp	[ebp+psz], edi
		jz	short loc_1001431
		push	[ebp+psz]	; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_1001431:				; CODE XREF: sub_10013D0+3Aj
					; sub_10013D0+56j
		mov	esi, [ebp+ppv]
		push	ebx
		mov	ebx, [esi]
		call	ds:GetUserDefaultLCID
		push	eax
		push	edi
		push	[ebp+bstrString]
		push	esi
		call	dword ptr [ebx+24h]
		mov	esi, eax
		pop	ebx

loc_1001449:				; CODE XREF: sub_10013D0+35j
		mov	eax, [ebp+ppv]
		cmp	eax, edi
		jz	short loc_1001456
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+8]

loc_1001456:				; CODE XREF: sub_10013D0+7Ej
		push	[ebp+bstrString] ; bstrString
		call	ds:SysFreeString
		pop	edi
		mov	eax, esi
		pop	esi
		leave
		retn	4
sub_10013D0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_1001467(int, int, OLECHAR *psz, int)
sub_1001467	proc near		; CODE XREF: start+195p

Text		= word ptr -42Ch
lpLibFileName	= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
picce		= INITCOMMONCONTROLSEX ptr -10h
dwMessageId	= dword	ptr -8
var_4		= dword	ptr -4
psz		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 42Ch
		mov	eax, dword_1002014
		xor	eax, [ebp+4]
		push	esi
		xor	esi, esi
		push	esi		; pvReserved
		mov	[ebp+var_4], eax
		call	ds:CoInitialize
		xor	ecx, ecx
		cmp	eax, esi
		setnl	cl
		cmp	eax, esi
		mov	[ebp+dwMessageId], eax
		mov	[ebp+var_14], ecx
		jl	short loc_10014C1
		lea	eax, [ebp+picce]
		push	eax		; picce
		mov	[ebp+picce.dwSize], 8
		mov	[ebp+picce.dwICC], 0FFh
		call	ds:InitCommonControlsEx
		push	[ebp+psz]	; psz
		call	sub_10013D0
		cmp	eax, esi
		mov	[ebp+dwMessageId], eax
		jge	loc_10015A4

loc_10014C1:				; CODE XREF: sub_1001467+2Dj
		push	ebx
		push	edi
		mov	edi, ds:GetUserDefaultLCID
		push	esi		; Arguments
		push	200h		; nSize
		lea	eax, [ebp+Text]
		push	eax		; lpBuffer
		mov	[ebp+lpLibFileName], offset aWmerror ; "wmerror"
		mov	[ebp+var_28], offset aWininet ;	"wininet"
		mov	[ebp+var_24], offset aMsxml ; "msxml"
		mov	[ebp+var_20], offset aQuartz ; "quartz"
		mov	[ebp+var_1C], offset aAsferror ; "asferror"
		mov	[ebp+var_18], offset aMsdmo ; "msdmo"
		call	edi ; GetUserDefaultLCID
		mov	ebx, ds:FormatMessageW
		push	eax		; dwLanguageId
		push	[ebp+dwMessageId] ; dwMessageId
		push	esi		; lpSource
		push	1A00h		; dwFlags
		call	ebx ; FormatMessageW
		xor	ecx, ecx
		cmp	ecx, eax
		sbb	esi, esi
		neg	esi
		mov	[ebp+psz], ecx
		jnz	short loc_100158C

loc_1001521:				; CODE XREF: sub_1001467+107j
		mov	eax, [ebp+psz]
		cmp	eax, 6
		jnb	short loc_1001570
		push	[ebp+eax*4+lpLibFileName] ; lpLibFileName
		call	ds:LoadLibraryW
		test	eax, eax
		mov	[ebp+picce.dwICC], eax
		jz	short loc_1001569
		push	0		; Arguments
		push	200h		; nSize
		lea	eax, [ebp+Text]
		push	eax		; lpBuffer
		call	edi ; GetUserDefaultLCID
		push	eax		; dwLanguageId
		push	[ebp+dwMessageId] ; dwMessageId
		push	[ebp+picce.dwICC] ; lpSource
		push	1A00h		; dwFlags
		call	ebx ; FormatMessageW
		push	[ebp+picce.dwICC] ; hLibModule
		xor	ecx, ecx
		cmp	ecx, eax
		sbb	esi, esi
		neg	esi
		call	ds:FreeLibrary

loc_1001569:				; CODE XREF: sub_1001467+D1j
		inc	[ebp+psz]
		test	esi, esi
		jz	short loc_1001521

loc_1001570:				; CODE XREF: sub_1001467+C0j
		test	esi, esi
		jnz	short loc_100158C
		push	[ebp+dwMessageId]
		lea	eax, [ebp+Text]
		push	offset a0xLx	; "0x%lX"
		push	eax		; LPWSTR
		call	ds:wsprintfW
		add	esp, 0Ch

loc_100158C:				; CODE XREF: sub_1001467+B8j
					; sub_1001467+10Bj
		push	10h		; uType
		push	offset Caption	; "Windows Media Profile Editor"
		lea	eax, [ebp+Text]
		push	eax		; lpText
		push	0		; hWnd
		call	ds:MessageBoxW
		pop	edi
		pop	ebx

loc_10015A4:				; CODE XREF: sub_1001467+54j
		cmp	[ebp+var_14], 0
		pop	esi
		jz	short loc_10015B1
		call	ds:CoUninitialize

loc_10015B1:				; CODE XREF: sub_1001467+142j
		mov	ecx, [ebp+var_4]
		xor	ecx, [ebp+4]
		xor	eax, eax
		call	sub_10016C5
		leave
		retn	10h
sub_1001467	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10015C2	proc near		; CODE XREF: sub_10016C5:loc_10016CEj

var_328		= dword	ptr -328h
var_324		= byte ptr -324h
var_5C		= dword	ptr -5Ch
var_58		= byte ptr -58h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 328h
		mov	eax, dword_1002014
		xor	eax, [ebp+4]
		mov	edx, dword_1002020
		test	edx, edx
		mov	[ebp+var_4], eax
		jz	short loc_100161B
		push	edi
		xor	eax, eax
		and	[ebp+var_328], eax
		push	13h
		pop	ecx
		lea	edi, [ebp+var_58]
		rep stosd
		mov	ecx, 0B2h
		lea	edi, [ebp+var_324]
		rep stosd
		lea	eax, [ebp+var_5C]
		mov	[ebp+var_C], eax
		lea	eax, [ebp+var_328]
		mov	[ebp+var_8], eax
		lea	eax, [ebp+var_C]
		push	eax
		mov	[ebp+var_5C], 0C0000409h
		call	edx ; dword_1002020
		pop	edi

loc_100161B:				; CODE XREF: sub_10015C2+1Cj
		push	502h		; uExitCode
		call	ds:GetCurrentProcess
		push	eax		; hProcess
		call	ds:TerminateProcess
		mov	ecx, [ebp+var_4]
		xor	ecx, [ebp+4]
		call	sub_10016C5
		leave
		retn
sub_10015C2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_100163A	proc near		; DATA XREF: .data:01002004o

PerformanceCount= LARGE_INTEGER	ptr -10h
SystemTimeAsFileTime= _FILETIME	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	eax, dword_1002014
		test	eax, eax
		jz	short loc_1001650
		cmp	eax, 0BB40E64Eh
		jnz	short locret_10016C3

loc_1001650:				; CODE XREF: sub_100163A+Dj
		push	esi
		lea	eax, [ebp+SystemTimeAsFileTime]
		push	eax		; lpSystemTimeAsFileTime
		call	ds:GetSystemTimeAsFileTime
		mov	esi, [ebp+SystemTimeAsFileTime.dwHighDateTime]
		xor	esi, [ebp+SystemTimeAsFileTime.dwLowDateTime]
		call	ds:GetCurrentProcessId
		xor	esi, eax
		call	ds:GetCurrentThreadId
		xor	esi, eax
		call	ds:GetTickCount
		xor	esi, eax
		lea	eax, [ebp+PerformanceCount]
		push	eax		; lpPerformanceCount
		call	ds:QueryPerformanceCounter
		mov	eax, dword ptr [ebp+PerformanceCount+4]
		xor	eax, dword ptr [ebp+PerformanceCount]
		xor	esi, eax
		mov	dword_1002014, esi
		jnz	short loc_100169D
		mov	dword_1002014, 0BB40E64Eh

loc_100169D:				; CODE XREF: sub_100163A+57j
		push	offset ModuleName ; "kernel32.dll"
		call	ds:GetModuleHandleA
		test	eax, eax
		mov	dword_1002024, eax
		pop	esi
		jz	short locret_10016C3
		push	offset ProcName	; "UnhandledExceptionFilter"
		push	eax		; hModule
		call	ds:GetProcAddress
		mov	dword_1002020, eax

locret_10016C3:				; CODE XREF: sub_100163A+14j
					; sub_100163A+76j
		leave
		retn
sub_100163A	endp


; =============== S U B	R O U T	I N E =======================================


sub_10016C5	proc near		; CODE XREF: sub_1001467+152p
					; sub_10015C2+71p
		cmp	ecx, dword_1002014
		jnz	short loc_10016CE
		retn
; ---------------------------------------------------------------------------

loc_10016CE:				; CODE XREF: sub_10016C5+6j
		jmp	sub_10015C2
sub_10016C5	endp

		assume fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public start
start		proc near

Code		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= byte ptr -70h
var_6C		= byte ptr -6Ch
var_68		= byte ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
StartupInfo	= _STARTUPINFOW	ptr -5Ch
ms_exc		= CPPEH_RECORD ptr -18h

		push	70h
		push	offset stru_1001250
		call	__SEH_prolog
		lea	eax, [ebp+StartupInfo]
		push	eax		; lpStartupInfo
		call	ds:GetStartupInfoW
		cmp	word ptr ds:1000000h, 5A4Dh
		jnz	short loc_100171B
		mov	eax, ds:100003Ch
		lea	eax, [eax+1000000h]
		cmp	dword ptr [eax], 4550h
		jnz	short loc_100171B
		movzx	ecx, word ptr [eax+18h]
		cmp	ecx, 10Bh
		jz	short loc_1001734
		cmp	ecx, 20Bh
		jz	short loc_1001721

loc_100171B:				; CODE XREF: start+1Fj	start+32j ...
		and	[ebp+var_60], 0
		jmp	short loc_1001748
; ---------------------------------------------------------------------------

loc_1001721:				; CODE XREF: start+46j
		cmp	dword ptr [eax+84h], 0Eh
		jbe	short loc_100171B
		xor	ecx, ecx
		cmp	[eax+0F8h], ecx
		jmp	short loc_1001742
; ---------------------------------------------------------------------------

loc_1001734:				; CODE XREF: start+3Ej
		cmp	dword ptr [eax+74h], 0Eh
		jbe	short loc_100171B
		xor	ecx, ecx
		cmp	[eax+0E8h], ecx

loc_1001742:				; CODE XREF: start+5Fj
		setnz	cl
		mov	[ebp+var_60], ecx

loc_1001748:				; CODE XREF: start+4Cj
		and	[ebp+ms_exc.disabled], 0
		push	2
		pop	esi
		push	esi
		call	ds:__set_app_type
		pop	ecx
		or	edi, 0FFFFFFFFh
		mov	dword_1002038, edi
		mov	dword_100203C, edi
		call	ds:__p__fmode
		mov	ecx, dword_1002034
		mov	[eax], ecx
		call	ds:__p__commode
		mov	ecx, dword_1002030
		mov	[eax], ecx
		mov	eax, ds:_adjust_fdiv
		mov	eax, [eax]
		mov	dword_1002040, eax
		call	sub_10018EE
		cmp	dword_1002018, 0
		jnz	short loc_10017A8
		push	offset sub_10018EE
		call	ds:__setusermatherr
		pop	ecx

loc_10017A8:				; CODE XREF: start+C7j
		call	sub_10018DC
		push	offset dword_1002010
		push	offset dword_100200C
		call	_initterm
		mov	eax, dword_100202C
		mov	[ebp+var_64], eax
		lea	eax, [ebp+var_64]
		push	eax
		push	dword_1002028
		lea	eax, [ebp+var_68]
		push	eax
		lea	eax, [ebp+var_6C]
		push	eax
		lea	eax, [ebp+var_70]
		push	eax
		call	ds:__wgetmainargs
		mov	[ebp+var_74], eax
		push	offset dword_1002008
		push	offset dword_1002000
		call	_initterm
		add	esp, 24h
		mov	eax, ds:_wcmdln
		cmp	dword ptr [eax], 0
		jnz	short loc_100180C
		mov	[ebp+ms_exc.disabled], edi
		mov	eax, 0FFh
		jmp	loc_10018BD
; ---------------------------------------------------------------------------

loc_100180C:				; CODE XREF: start+12Aj
		mov	eax, [eax]
		mov	[ebp+var_78], eax
		cmp	word ptr [eax],	22h
		jnz	short loc_100184F

loc_1001817:				; CODE XREF: start+155j
		add	eax, esi
		mov	[ebp+var_78], eax
		mov	cx, [eax]
		test	cx, cx
		jz	short loc_100182A
		cmp	cx, 22h
		jnz	short loc_1001817

loc_100182A:				; CODE XREF: start+14Fj
		cmp	word ptr [eax],	22h
		jnz	short loc_1001835

loc_1001830:				; CODE XREF: start+16Ej
		add	eax, esi
		mov	[ebp+var_78], eax

loc_1001835:				; CODE XREF: start+15Bj start+180j
		mov	cx, [eax]
		test	cx, cx
		jz	short loc_1001843
		cmp	cx, 20h
		jbe	short loc_1001830

loc_1001843:				; CODE XREF: start+168j
		test	byte ptr [ebp+StartupInfo.dwFlags], 1
		jz	short loc_100185C
		movzx	ecx, [ebp+StartupInfo.wShowWindow]
		jmp	short loc_100185F
; ---------------------------------------------------------------------------

loc_100184F:				; CODE XREF: start+142j start+187j
		cmp	word ptr [eax],	20h
		jbe	short loc_1001835
		add	eax, esi
		mov	[ebp+var_78], eax
		jmp	short loc_100184F
; ---------------------------------------------------------------------------

loc_100185C:				; CODE XREF: start+174j
		push	0Ah
		pop	ecx

loc_100185F:				; CODE XREF: start+17Aj
		push	ecx		; int
		push	eax		; psz
		push	0		; int
		push	1000000h	; int
		call	sub_1001467
		mov	esi, eax
		mov	[ebp+var_7C], esi
		cmp	[ebp+var_60], 0
		jnz	short loc_100187F
		push	esi		; Code
		call	ds:exit
; ---------------------------------------------------------------------------

loc_100187F:				; CODE XREF: start+1A3j
		call	ds:_cexit
		mov	[ebp+ms_exc.disabled], edi
		jmp	short loc_10018BB
; ---------------------------------------------------------------------------

loc_100188A:				; DATA XREF: .text:stru_1001250o
		mov	eax, [ebp+ms_exc.exc_ptr] ; Exception filter 0 for function 10016D3
		mov	ecx, [eax]
		mov	ecx, [ecx]
		mov	[ebp+Code], ecx
		push	eax
		push	ecx
		call	_XcptFilter
		pop	ecx
		pop	ecx
		retn
; ---------------------------------------------------------------------------

loc_100189E:				; DATA XREF: .text:stru_1001250o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 10016D3
		mov	esi, [ebp+Code]
		cmp	[ebp+var_60], 0
		jnz	short loc_10018B1
		push	esi		; Code
		call	ds:_exit
; ---------------------------------------------------------------------------

loc_10018B1:				; CODE XREF: start+1D5j
		call	ds:_c_exit
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh

loc_10018BB:				; CODE XREF: start+1B5j
		mov	eax, esi

loc_10018BD:				; CODE XREF: start+134j
		call	__SEH_epilog
		retn
start		endp

; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION operator new(uint). PRESS	KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION operator delete(void *). PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _XcptFilter. PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _initterm. PRESS KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_10018DC	proc near		; CODE XREF: start:loc_10017A8p
		push	30000h		; Mask
		push	10000h		; NewValue
		call	_controlfp
		pop	ecx
		pop	ecx
		retn
sub_10018DC	endp


; =============== S U B	R O U T	I N E =======================================


sub_10018EE	proc near		; CODE XREF: start+BBp
					; DATA XREF: start+C9o
		xor	eax, eax
		retn
sub_10018EE	endp

; ---------------------------------------------------------------------------
		align 4
; [0000003B BYTES: COLLAPSED FUNCTION __SEH_prolog. PRESS KEYPAD "+" TO	EXPAND]
; [00000011 BYTES: COLLAPSED FUNCTION __SEH_epilog. PRESS KEYPAD "+" TO	EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _controlfp. PRESS	KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _except_handler3.	PRESS KEYPAD "+" TO EXPAND]
__IMPORT_DESCRIPTOR_KERNEL32 dd	rva off_10019E0	; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aKernel32_dll	; DLL Name
		dd rva FreeLibrary	; Import Address Table
__IMPORT_DESCRIPTOR_msvcrt dd rva off_1001A38 ;	Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aMsvcrt_dll	; DLL Name
		dd rva _cexit		; Import Address Table
__IMPORT_DESCRIPTOR_USER32 dd rva off_1001A2C ;	Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aUser32_dll	; DLL Name
		dd rva MessageBoxW	; Import Address Table
__IMPORT_DESCRIPTOR_ole32 dd rva off_1001A90 ; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aOle32_dll	; DLL Name
		dd rva CoUninitialize	; Import Address Table
__IMPORT_DESCRIPTOR_OLEAUT32 dd	rva dword_1001A20 ; Import Name	Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aOleaut32_dll	; DLL Name
		dd rva SysAllocString	; Import Address Table
__IMPORT_DESCRIPTOR_COMCTL32 dd	rva off_10019D8	; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aComctl32_dll	; DLL Name
		dd rva InitCommonControlsEx ; Import Address Table
		dd 5 dup(0)
;
; Import names for COMCTL32.dll
;
off_10019D8	dd rva word_1001D5C	; DATA XREF: .text:__IMPORT_DESCRIPTOR_COMCTL32o
		dd 0
;
; Import names for KERNEL32.dll
;
off_10019E0	dd rva word_1001AC8	; DATA XREF: .text:__IMPORT_DESCRIPTOR_KERNEL32o
		dd rva word_1001AD6
		dd rva word_1001AE6
		dd rva word_1001AF8
		dd rva word_1001B0C
		dd rva word_1001B20
		dd rva word_1001AB2
		dd rva word_1001B46
		dd rva word_1001B60
		dd rva word_1001B70
		dd rva word_1001B86
		dd rva word_1001B9C
		dd rva word_1001B32
		dd rva word_1001AA0
		dd rva word_1001D82
		dd 0
;
; Import names for OLEAUT32.dll
;
dword_1001A20	dd 80000002h		; DATA XREF: .text:__IMPORT_DESCRIPTOR_OLEAUT32o
		dd 80000006h
		dd 0
;
; Import names for USER32.dll
;
off_1001A2C	dd rva word_1001CE8	; DATA XREF: .text:__IMPORT_DESCRIPTOR_USER32o
		dd rva word_1001CF6
		dd 0
;
; Import names for msvcrt.dll
;
off_1001A38	dd rva word_1001C2C	; DATA XREF: .text:__IMPORT_DESCRIPTOR_msvcrto
		dd rva word_1001C36
		dd rva word_1001BDE
		dd rva word_1001C48
		dd rva word_1001C5A
		dd rva word_1001C66
		dd rva word_1001C7A
		dd rva word_1001C1E
		dd rva word_1001BFC
		dd rva word_1001CA8
		dd rva word_1001CC6
		dd rva word_1001CD4
		dd rva word_1001C16
		dd rva word_1001C8A
		dd rva word_1001C0C
		dd rva word_1001BC4
		dd rva word_1001BCE
		dd rva word_1001BF2
		dd rva word_1001C9A
		dd rva word_1001BE8
		dd rva word_1001C3E
		dd 0
;
; Import names for ole32.dll
;
off_1001A90	dd rva word_1001D22	; DATA XREF: .text:__IMPORT_DESCRIPTOR_ole32o
		dd rva word_1001D0E
		dd rva word_1001D34
		dd 0
word_1001AA0	dw 106h			; DATA XREF: .text:01001A14o
		db 'GetCommandLineW',0
word_1001AB2	dw 1D1h			; DATA XREF: .text:010019F8o
		db 'GetUserDefaultLCID',0
		align 4
word_1001AC8	dw 0ECh			; DATA XREF: .text:off_10019E0o
		db 'FreeLibrary',0
word_1001AD6	dw 243h			; DATA XREF: .text:010019E4o
		db 'LoadLibraryW',0
		align 2
word_1001AE6	dw 0E8h			; DATA XREF: .text:010019E8o
		db 'FormatMessageW',0
		align 4
word_1001AF8	dw 343h			; DATA XREF: .text:010019ECo
		db 'TerminateProcess',0
		align 4
word_1001B0C	dw 137h			; DATA XREF: .text:010019F0o
		db 'GetCurrentProcess',0
word_1001B20	dw 195h			; DATA XREF: .text:010019F4o
		db 'GetProcAddress',0
		align 2
word_1001B32	dw 174h			; DATA XREF: .text:01001A10o
		db 'GetModuleHandleA',0
		align 2
word_1001B46	dw 28Fh			; DATA XREF: .text:010019FCo
		db 'QueryPerformanceCounter',0
word_1001B60	dw 1CDh			; DATA XREF: .text:01001A00o
		db 'GetTickCount',0
		align 10h
word_1001B70	dw 13Bh			; DATA XREF: .text:01001A04o
		db 'GetCurrentThreadId',0
		align 2
word_1001B86	dw 138h			; DATA XREF: .text:01001A08o
		db 'GetCurrentProcessId',0
word_1001B9C	dw 1BAh			; DATA XREF: .text:01001A0Co
		db 'GetSystemTimeAsFileTime',0
aKernel32_dll	db 'KERNEL32.dll',0     ; DATA XREF: .text:01001958o
		align 4
word_1001BC4	dw 338h			; DATA XREF: .text:01001A74o
		db 'wcsncat',0
word_1001BCE	dw 11h			; DATA XREF: .text:01001A78o
		db '??2@YAPAXI@Z',0
		align 2
word_1001BDE	dw 337h			; DATA XREF: .text:01001A40o
		db 'wcslen',0
		align 4
word_1001BE8	dw 331h			; DATA XREF: .text:01001A84o
		db 'wcschr',0
		align 2
word_1001BF2	dw 33Dh			; DATA XREF: .text:01001A7Co
		db 'wcsspn',0
		align 4
word_1001BFC	dw 12h			; DATA XREF: .text:01001A58o
		db '??3@YAXPAX@Z',0
		align 4
word_1001C0C	dw 0CAh			; DATA XREF: .text:01001A70o
		db '_c_exit',0
word_1001C16	dw 0FBh			; DATA XREF: .text:01001A68o
		db '_exit',0
word_1001C1E	dw 4Eh			; DATA XREF: .text:01001A54o
		db '_XcptFilter',0
word_1001C2C	dw 0CDh			; DATA XREF: .text:off_1001A38o
		db '_cexit',0
		align 2
word_1001C36	dw 29Ah			; DATA XREF: .text:01001A3Co
		db 'exit',0
		align 2
word_1001C3E	dw 22Eh			; DATA XREF: .text:01001A88o
		db '_wcmdln',0
word_1001C48	dw 0A8h			; DATA XREF: .text:01001A44o
		db '__wgetmainargs',0
		align 2
word_1001C5A	dw 140h			; DATA XREF: .text:01001A48o
		db '_initterm',0
word_1001C66	dw 9Eh			; DATA XREF: .text:01001A4Co
		db '__setusermatherr',0
		align 2
word_1001C7A	dw 0BBh			; DATA XREF: .text:01001A50o
		db '_adjust_fdiv',0
		align 2
word_1001C8A	dw 83h			; DATA XREF: .text:01001A6Co
		db '__p__commode',0
		align 2
word_1001C9A	dw 88h			; DATA XREF: .text:01001A80o
		db '__p__fmode',0
		align 4
word_1001CA8	dw 9Ch			; DATA XREF: .text:01001A5Co
		db '__set_app_type',0
		align 2
aMsvcrt_dll	db 'msvcrt.dll',0       ; DATA XREF: .text:0100196Co
		align 2
word_1001CC6	dw 0DBh			; DATA XREF: .text:01001A60o
		db '_controlfp',0
		align 4
word_1001CD4	dw 0F2h			; DATA XREF: .text:01001A64o
		db '_except_handler3',0
		align 4
word_1001CE8	dw 1E5h			; DATA XREF: .text:off_1001A2Co
		db 'MessageBoxW',0
word_1001CF6	dw 2D7h			; DATA XREF: .text:01001A30o
		db 'wsprintfW',0
aUser32_dll	db 'USER32.dll',0       ; DATA XREF: .text:01001980o
		align 2
word_1001D0E	dw 10h			; DATA XREF: .text:01001A94o
		db 'CoCreateInstance',0
		align 2
word_1001D22	dw 68h			; DATA XREF: .text:off_1001A90o
		db 'CoUninitialize',0
		align 4
word_1001D34	dw 3Ah			; DATA XREF: .text:01001A98o
		db 'CoInitialize',0
		align 4
aOle32_dll	db 'ole32.dll',0        ; DATA XREF: .text:01001994o
aOleaut32_dll	db 'OLEAUT32.dll',0     ; DATA XREF: .text:010019A8o
		align 4
word_1001D5C	dw 5Dh			; DATA XREF: .text:off_10019D8o
		db 'InitCommonControlsEx',0
		align 4
aComctl32_dll	db 'COMCTL32.dll',0     ; DATA XREF: .text:010019BCo
		align 2
word_1001D82	dw 1ABh			; DATA XREF: .text:01001A18o
		db 'GetStartupInfoW',0
		dd 1Bh dup(0)
		dd 80h dup(?)
_text		ends

; Section 2. (virtual address 00002000)
; Virtual size			: 00000044 (	 68.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001200
; Flags	C0000040: Data Readable	Writable
; Alignment	: default
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 1002000h
dword_1002000	dd 0			; DATA XREF: start+115o
		dd offset sub_100163A
dword_1002008	dd 0			; DATA XREF: start+110o
dword_100200C	dd 0			; DATA XREF: start+DFo
dword_1002010	dd 0			; DATA XREF: start+DAo
dword_1002014	dd 0BB40E64Eh		; DATA XREF: sub_1001467+9r
					; sub_10015C2+9r ...
dword_1002018	dd 1			; DATA XREF: start+C0r
		align 10h
dword_1002020	dd 0			; DATA XREF: sub_10015C2+11r
					; sub_100163A+84w
dword_1002024	dd 0			; DATA XREF: sub_100163A+70w
dword_1002028	dd 0			; DATA XREF: start+F5r
dword_100202C	dd 0			; DATA XREF: start+E9r
dword_1002030	dd 0			; DATA XREF: start+A7r
dword_1002034	dd 0			; DATA XREF: start+99r
dword_1002038	dd 0			; DATA XREF: start+87w
dword_100203C	dd 0			; DATA XREF: start+8Dw
dword_1002040	dd 0			; DATA XREF: start+B6w
		align 1000h
_data		ends


		end start
