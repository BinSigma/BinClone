;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	   Copyright (c) 2010 by Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B231-7414-99			    |
; |		       NCFTA Canada/Concordia University		    |
; +-------------------------------------------------------------------------+
;
;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	   Copyright (c) 2010 by Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B231-7414-99			    |
; |		       NCFTA Canada/Concordia University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	E48B95449EEF790D3B084DA598ECD5B4
; Input	CRC32 :	805EFF54


		.686p
		.mmx
		.model flat

; ===========================================================================

; [00001000 BYTES: COLLAPSED SEGMENT HEADER. PRESS KEYPAD "+" TO EXPAND]
; File Name   :	C:\Users\farhadi\Desktop\dll\ccl35.dll
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	6B180000
; Section 1. (virtual address 00001000)
; Virtual size			: 00028C1B ( 166939.)
; Section size in file		: 00028E00 ( 167424.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: default
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 6B181000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
_DllMain@12	proc near		; CODE XREF: DllEntryPoint+6Cp

hinstDLL	= dword	ptr  4
fdwReason	= dword	ptr  8
lpvReserved	= dword	ptr  0Ch

		xor	eax, eax
		inc	eax
		retn	0Ch
_DllMain@12	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6B181006(char	*Format, char Args)
sub_6B181006	proc near		; CODE XREF: Ordinal296+68p
					; Ordinal286+1D1p ...

Format		= dword	ptr  4
Args		= byte ptr  8

		lea	eax, [esp+Args]
		push	eax		; Args
		push	[esp+4+Format]	; Format
		mov	ecx, offset dword_6B1C1200
		call	Ordinal988
		retn
sub_6B181006	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6B18101A(char	*Format, char Args)
sub_6B18101A	proc near		; CODE XREF: Ordinal307+30p
					; Ordinal612+121p ...

Format		= dword	ptr  4
Args		= byte ptr  8

		lea	eax, [esp+Args]
		push	eax		; Args
		push	[esp+4+Format]	; Format
		mov	ecx, offset dword_6B1C1200
		call	Ordinal990
		retn
sub_6B18101A	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6B18102E(char	*Format, char Args)
sub_6B18102E	proc near		; CODE XREF: Ordinal130+4Ap
					; Ordinal133:loc_6B18130Dp ...

Format		= dword	ptr  4
Args		= byte ptr  8

		lea	eax, [esp+Args]
		push	eax		; Args
		push	[esp+4+Format]	; Format
		mov	ecx, offset dword_6B1C1200
		call	Ordinal992
		retn
sub_6B18102E	endp

; Exported entry 128.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal128
Ordinal128	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, offset dword_6B1C1200
		retn
Ordinal128	endp

; Exported entry 129.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal129
Ordinal129	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, Addend
		retn
Ordinal129	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B18104E	proc near		; DATA XREF: sub_6B1810B3:loc_6B1810F2o

LCData		= byte ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	eax, ___security_cookie
		push	esi
		mov	[ebp+var_4], eax
		xor	esi, esi
		call	ds:GetThreadLocale
		push	7		; cchData
		lea	ecx, [ebp+LCData]
		push	ecx		; lpLCData
		push	1004h		; LCType
		push	eax		; Locale
		call	ds:GetLocaleInfoA
		test	eax, eax
		jz	short loc_6B18109A
		mov	cl, [ebp+LCData]
		test	cl, cl
		lea	eax, [ebp+LCData]
		jz	short loc_6B18109A

loc_6B181085:				; CODE XREF: sub_6B18104E+46j
		movsx	ecx, cl
		lea	edx, [esi+esi*4]
		inc	eax
		lea	esi, [ecx+edx*2-30h]
		mov	cl, [eax]
		test	cl, cl
		jnz	short loc_6B181085
		test	esi, esi
		jnz	short loc_6B1810A2

loc_6B18109A:				; CODE XREF: sub_6B18104E+2Bj
					; sub_6B18104E+35j
		call	ds:GetACP
		mov	esi, eax

loc_6B1810A2:				; CODE XREF: sub_6B18104E+4Aj
		mov	ecx, [ebp+var_4]
		mov	eax, esi
		pop	esi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn
sub_6B18104E	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1810AF	proc near		; DATA XREF: sub_6B1810B3+38o
		push	3
		pop	eax
		retn
sub_6B1810AF	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1810B3	proc near		; CODE XREF: sub_6B1810B3+50p
					; sub_6B1815BE+Fp ...

VersionInformation= _OSVERSIONINFOA ptr	-98h
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 98h
		mov	eax, ___security_cookie
		mov	[ebp+var_4], eax
		lea	eax, [ebp+VersionInformation]
		push	eax		; lpVersionInformation
		mov	[ebp+VersionInformation.dwOSVersionInfoSize], 94h
		call	ds:GetVersionExA
		cmp	[ebp+VersionInformation.dwPlatformId], 2
		jnz	short loc_6B1810F2
		cmp	[ebp+VersionInformation.dwMajorVersion], 5
		mov	eax, offset sub_6B1810AF
		jnb	short loc_6B1810F7

loc_6B1810F2:				; CODE XREF: sub_6B1810B3+2Fj
		mov	eax, offset sub_6B18104E

loc_6B1810F7:				; CODE XREF: sub_6B1810B3+3Dj
		push	eax		; Value
		push	offset Target	; Target
		call	ds:InterlockedExchange
		call	Target
		mov	ecx, [ebp+var_4]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn
sub_6B1810B3	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_6B181113	proc near		; CODE XREF: sub_6B18112B+15p
					; sub_6B1811AA+3Cp ...

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	[ebp+arg_0], eax
		push	offset dword_6B1BA91C
		lea	eax, [ebp+arg_0]
		push	eax
		call	_CxxThrowException
sub_6B181113	endp

; ---------------------------------------------------------------------------
		db 0CCh

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B18112B	proc near		; CODE XREF: sub_6B1811AA+5Cp
					; sub_6B19FAC8+58p
		call	ds:GetLastError
		test	eax, eax
		jle	short loc_6B18113F
		and	eax, 0FFFFh
		or	eax, 80070000h

loc_6B18113F:				; CODE XREF: sub_6B18112B+8j
		push	eax
		call	sub_6B181113
sub_6B18112B	endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================


; int __fastcall sub_6B181146(void *Dst)
sub_6B181146	proc near		; CODE XREF: sub_6B1A8712+6p
		push	esi
		push	18h		; Size
		mov	esi, ecx
		push	0		; Val
		push	esi		; Dst
		call	memset
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		retn
sub_6B181146	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B18115A	proc near		; CODE XREF: sub_6B1A8790+8Bp

var_1C		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h

		push	0Ch
		push	offset stru_6B1AA588
		call	__SEH_prolog
		xor	esi, esi
		mov	[ebp+ms_exc.disabled], esi
		push	ecx		; lpCriticalSection
		call	ds:InitializeCriticalSection
		jmp	short loc_6B18119E
; ---------------------------------------------------------------------------

loc_6B181174:				; DATA XREF: .rdata:stru_6B1AA588o
		mov	eax, [ebp+ms_exc.exc_ptr] ; Exception filter 0 for function 6B18115A
		mov	eax, [eax]
		mov	eax, [eax]
		mov	[ebp+var_1C], eax
		xor	eax, eax
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_6B181182:				; DATA XREF: .rdata:stru_6B1AA588o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 6B18115A
		xor	eax, eax
		cmp	[ebp+var_1C], 0C0000017h
		setnz	al
		dec	eax
		and	eax, 6C009h
		add	eax, 80004005h
		mov	esi, eax

loc_6B18119E:				; CODE XREF: sub_6B18115A+18j
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		mov	eax, esi
		call	__SEH_epilog
		retn
sub_6B18115A	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6B1811AA(LPCWSTR lpWideCharStr, UINT CodePage)
sub_6B1811AA	proc near		; CODE XREF: Ordinal1522+4Dp

lpWideCharStr	= dword	ptr  4
CodePage	= dword	ptr  8

		cmp	[esp+lpWideCharStr], 0
		push	esi
		mov	esi, ecx
		jnz	short loc_6B1811B9
		and	dword ptr [esi], 0
		jmp	short loc_6B18120D
; ---------------------------------------------------------------------------

loc_6B1811B9:				; CODE XREF: sub_6B1811AA+8j
		push	ebx
		push	edi
		push	[esp+0Ch+lpWideCharStr]	; lpString
		call	ds:lstrlenW
		mov	edi, eax
		inc	edi
		lea	ebx, [edi+edi]
		cmp	ebx, 80h
		jle	short loc_6B1811EB
		push	ebx		; Size
		call	ds:__imp_malloc
		test	eax, eax
		pop	ecx
		mov	[esi], eax
		jnz	short loc_6B1811EB
		push	8007000Eh
		call	sub_6B181113
; ---------------------------------------------------------------------------

loc_6B1811EB:				; CODE XREF: sub_6B1811AA+27j
					; sub_6B1811AA+35j
		xor	eax, eax
		push	eax		; lpUsedDefaultChar
		push	eax		; lpDefaultChar
		push	ebx		; cbMultiByte
		push	dword ptr [esi]	; lpMultiByteStr
		push	edi		; cchWideChar
		push	[esp+20h+lpWideCharStr]	; lpWideCharStr
		push	eax		; dwFlags
		push	[esp+28h+CodePage] ; CodePage
		call	ds:WideCharToMultiByte
		test	eax, eax
		jnz	short loc_6B18120B
		call	sub_6B18112B
; ---------------------------------------------------------------------------

loc_6B18120B:				; CODE XREF: sub_6B1811AA+5Aj
		pop	edi
		pop	ebx

loc_6B18120D:				; CODE XREF: sub_6B1811AA+Dj
		pop	esi
		retn	8
sub_6B1811AA	endp

; Exported entry 130.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal130
Ordinal130	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		lea	ecx, [ebp+var_C]
		call	Ordinal1316
		xor	ebx, ebx
		push	ebx		; int
		push	20019h		; samDesired
		push	offset aSoftwareSymant ; "Software\\Symantec\\Common Client"
		push	80000002h	; hKey
		lea	ecx, [ebp+var_C]
		call	Ordinal1321
		test	eax, eax
		jz	short loc_6B181256
		push	[ebp+arg_0]	; int
		lea	ecx, [ebp+var_C]
		push	offset aVersion	; "Version"
		call	Ordinal1332
		test	eax, eax
		jz	short loc_6B181256
		mov	bl, 1
		jmp	short loc_6B181261
; ---------------------------------------------------------------------------

loc_6B181256:				; CODE XREF: Ordinal130+2Bj
					; Ordinal130+3Fj
		push	offset aCcommonclienti ; "CCommonClientInfo::GetVersion() : reg.O"...
		call	sub_6B18102E
		pop	ecx

loc_6B181261:				; CODE XREF: Ordinal130+43j
		lea	ecx, [ebp+var_C]
		call	Ordinal1318
		mov	al, bl
		pop	ebx
		leave
		retn
Ordinal130	endp

; Exported entry 131.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal131
Ordinal131	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	Ordinal903
		mov	dword ptr [esi], offset	off_6B1AA5FC
		mov	eax, esi
		pop	esi
		retn
Ordinal131	endp

; Exported entry 132.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal132
Ordinal132	proc near		; CODE XREF: sub_6B1812BD+3p
					; DATA XREF: .rdata:off_6B1BF428o
		mov	dword ptr [ecx], offset	off_6B1AA5FC
		jmp	Ordinal904
Ordinal132	endp

; Exported entry 134.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal134
Ordinal134	proc near		; CODE XREF: Ordinal133+44p
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1572
		mov	ecx, [ebp+arg_0]
		push	esi
		call	Ordinal146
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal134	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1812BD(void *, char)
sub_6B1812BD	proc near		; DATA XREF: .rdata:off_6B1AA5FCo

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal132
		test	[esp+4+arg_0], 1
		jz	short loc_6B1812D3
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1812D3:				; CODE XREF: sub_6B1812BD+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1812BD	endp

; Exported entry 133.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal133
Ordinal133	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_80		= byte ptr -80h
var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 80h
		push	esi
		mov	esi, ecx
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1572
		lea	ecx, [ebp+var_80]
		call	Ordinal135
		lea	ecx, [ebp+var_80]
		call	Ordinal141
		test	eax, eax
		jnz	short loc_6B181317
		push	offset aCcrashhandlerL ; "CCrashHandler::LoadOptions() : debugOpt"...

loc_6B18130D:				; CODE XREF: Ordinal133+52j
					; Ordinal133+64j
		call	sub_6B18102E
		pop	ecx
		xor	esi, esi
		jmp	short loc_6B181342
; ---------------------------------------------------------------------------

loc_6B181317:				; CODE XREF: Ordinal133+2Dj
		lea	eax, [ebp+var_80]
		push	eax
		mov	ecx, esi
		call	Ordinal134
		test	eax, eax
		jnz	short loc_6B18132D
		push	offset aCcrashhandle_0 ; "CCrashHandler::LoadOptions() : SetOptio"...
		jmp	short loc_6B18130D
; ---------------------------------------------------------------------------

loc_6B18132D:				; CODE XREF: Ordinal133+4Bj
		mov	ecx, esi
		call	Ordinal905
		test	eax, eax
		jnz	short loc_6B18133F
		push	offset aCcrashhandle_1 ; "CCrashHandler::LoadOptions() : Enable()"...
		jmp	short loc_6B18130D
; ---------------------------------------------------------------------------

loc_6B18133F:				; CODE XREF: Ordinal133+5Dj
		xor	esi, esi
		inc	esi

loc_6B181342:				; CODE XREF: Ordinal133+3Cj
		lea	ecx, [ebp+var_80]
		call	Ordinal138
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal133	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B181357	proc near		; CODE XREF: sub_6B182017+34p
					; sub_6B1821DC+35p ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_20 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	esi
		mov	esi, ecx
		mov	[ebp+var_10], esi
		call	ds:??0exception@@QAE@XZ	; exception::exception(void)
		push	[ebp+arg_0]
		and	[ebp+var_4], 0
		lea	ecx, [esi+0Ch]
		mov	dword ptr [esi], offset	off_6B1AA90C
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z	; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
		mov	ecx, [ebp+var_C]
		mov	eax, esi
		pop	esi
		mov	large fs:0, ecx
		leave
		retn	4
sub_6B181357	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B181395	proc near		; CODE XREF: sub_6B1813E0+3p
					; sub_6B181418+6j ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_20 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	esi
		mov	esi, ecx
		mov	[ebp+var_10], esi
		mov	dword ptr [esi], offset	off_6B1AA90C
		and	[ebp+var_4], 0
		lea	ecx, [esi+0Ch]
		call	ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
		or	[ebp+var_4], 0FFFFFFFFh
		mov	ecx, esi
		call	ds:??1exception@@UAE@XZ	; exception::~exception(void)
		mov	ecx, [ebp+var_C]
		pop	esi
		mov	large fs:0, ecx
		leave
		retn
sub_6B181395	endp

; [0000000E BYTES: COLLAPSED FUNCTION unknown_libname_1. PRESS KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1813E0(void *, char)
sub_6B1813E0	proc near		; DATA XREF: .rdata:off_6B1AA90Co

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	sub_6B181395
		test	[esp+4+arg_0], 1
		jz	short loc_6B1813F6
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1813F6:				; CODE XREF: sub_6B1813E0+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1813E0	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1813FC(void *, char)
sub_6B1813FC	proc near		; DATA XREF: .rdata:off_6B1AA914o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	sub_6B181418
		test	[esp+4+arg_0], 1
		jz	short loc_6B181412
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B181412:				; CODE XREF: sub_6B1813FC+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1813FC	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B181418	proc near		; CODE XREF: sub_6B1813FC+3p
					; DATA XREF: .rdata:6B1BA9ECo
		mov	dword ptr [ecx], offset	off_6B1AA914
		jmp	sub_6B181395
sub_6B181418	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B181423(void *, char)
sub_6B181423	proc near		; DATA XREF: .rdata:off_6B1AA91Co

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	sub_6B18143F
		test	[esp+4+arg_0], 1
		jz	short loc_6B181439
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B181439:				; CODE XREF: sub_6B181423+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B181423	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18143F	proc near		; CODE XREF: sub_6B181423+3p
					; DATA XREF: .rdata:6B1BAA70o
		mov	dword ptr [ecx], offset	off_6B1AA91C
		jmp	sub_6B181395
sub_6B18143F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_6B18144A(HMODULE hModule, HRSRC hResInfo, int)
sub_6B18144A	proc near		; CODE XREF: sub_6B1814A6+26p
					; sub_6B1814D5+29p

hModule		= dword	ptr  8
hResInfo	= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	[ebp+hResInfo]	; hResInfo
		push	[ebp+hModule]	; hModule
		call	ds:LoadResource
		test	eax, eax
		jnz	short loc_6B18145F
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6B18145F:				; CODE XREF: sub_6B18144A+11j
		push	esi
		push	eax		; hResData
		call	ds:LockResource
		mov	esi, eax
		test	esi, esi
		jnz	short loc_6B181471

loc_6B18146D:				; CODE XREF: sub_6B18144A+3Fj
					; sub_6B18144A+4Dj
		xor	eax, eax
		jmp	short loc_6B1814A3
; ---------------------------------------------------------------------------

loc_6B181471:				; CODE XREF: sub_6B18144A+21j
		push	[ebp+hResInfo]	; hResInfo
		push	[ebp+hModule]	; hModule
		call	ds:SizeofResource
		mov	ecx, [ebp+arg_8]
		add	eax, esi
		and	ecx, 0Fh
		jbe	short loc_6B181495

loc_6B181487:				; CODE XREF: sub_6B18144A+49j
		cmp	esi, eax
		jnb	short loc_6B18146D
		dec	ecx
		movzx	edx, word ptr [esi]
		lea	esi, [esi+edx*2+2]
		jnz	short loc_6B181487

loc_6B181495:				; CODE XREF: sub_6B18144A+3Bj
		cmp	esi, eax
		jnb	short loc_6B18146D
		mov	ax, [esi]
		neg	ax
		sbb	eax, eax
		and	eax, esi

loc_6B1814A3:				; CODE XREF: sub_6B18144A+25j
		pop	esi
		pop	ebp
		retn
sub_6B18144A	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6B1814A6(HMODULE hModule, int)
sub_6B1814A6	proc near		; CODE XREF: sub_6B181E50+Ep
					; sub_6B19FC02+Cp

hModule		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		shr	eax, 4
		inc	eax
		movzx	eax, ax
		push	6		; lpType
		push	eax		; lpName
		push	[esp+8+hModule]	; hModule
		call	ds:FindResourceA
		test	eax, eax
		jnz	short loc_6B1814C3
		retn
; ---------------------------------------------------------------------------

loc_6B1814C3:				; CODE XREF: sub_6B1814A6+1Aj
		push	[esp+arg_4]	; int
		push	eax		; hResInfo
		push	[esp+8+hModule]	; hModule
		call	sub_6B18144A
		add	esp, 0Ch
		retn
sub_6B1814A6	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_6B1814D5(HMODULE hModule, int, WORD wLanguage)
sub_6B1814D5	proc near		; CODE XREF: sub_6B181508+1Fp

hModule		= dword	ptr  8
arg_4		= dword	ptr  0Ch
wLanguage	= word ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_4]
		push	dword ptr [ebp+wLanguage] ; wLanguage
		shr	eax, 4
		inc	eax
		movzx	eax, ax
		push	eax		; lpName
		push	6		; lpType
		push	[ebp+hModule]	; hModule
		call	ds:FindResourceExA
		test	eax, eax
		jnz	short loc_6B1814F7
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6B1814F7:				; CODE XREF: sub_6B1814D5+1Ej
		push	[ebp+arg_4]	; int
		push	eax		; hResInfo
		push	[ebp+hModule]	; hModule
		call	sub_6B18144A
		add	esp, 0Ch
		pop	ebp
		retn
sub_6B1814D5	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6B181508(int,	WORD wLanguage)
sub_6B181508	proc near		; CODE XREF: sub_6B181FF3+9p
					; sub_6B19FE61+9p

arg_0		= dword	ptr  4
wLanguage	= word ptr  8

		push	ebx
		push	esi
		push	edi
		mov	esi, offset dword_6B1C1348
		push	0
		mov	ecx, esi
		call	sub_6B1A8742
		xor	ebx, ebx
		inc	ebx
		jmp	short loc_6B18153C
; ---------------------------------------------------------------------------

loc_6B18151E:				; CODE XREF: sub_6B181508+38j
		push	dword ptr [esp+0Ch+wLanguage] ;	wLanguage
		push	[esp+10h+arg_0]	; int
		push	edi		; hModule
		call	sub_6B1814D5
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_6B181546
		push	ebx
		mov	ecx, esi
		call	sub_6B1A8742
		inc	ebx

loc_6B18153C:				; CODE XREF: sub_6B181508+14j
		mov	edi, eax
		test	edi, edi
		jnz	short loc_6B18151E

loc_6B181542:				; CODE XREF: sub_6B181508+40j
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6B181546:				; CODE XREF: sub_6B181508+29j
		mov	eax, edi
		jmp	short loc_6B181542
sub_6B181508	endp

; Exported entry 148.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal148(char Args, int, int)
		public Ordinal148
Ordinal148	proc near		; CODE XREF: Ordinal145+24p
					; Ordinal142+5Ap
					; DATA XREF: ...

Args		= byte ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	offset aCrashhandler ; "CrashHandler"
		push	dword ptr [esp+8+Args] ; Args
		mov	esi, offset aSS	; "%s\\%s"
		push	esi		; Format
		push	[esp+10h+arg_4]	; int
		call	Ordinal1525
		add	esp, 10h
		test	al, al
		jz	short loc_6B181589
		push	offset aDebugoutput ; "DebugOutput"
		push	dword ptr [esp+8+Args] ; Args
		push	esi		; Format
		push	[esp+10h+arg_8]	; int
		call	Ordinal1525
		add	esp, 10h
		test	al, al
		jz	short loc_6B181589
		xor	eax, eax
		inc	eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6B181589:				; CODE XREF: Ordinal148+1Ej
					; Ordinal148+38j
		push	offset aCdebugoptionsB ; "CDebugOptions::BuildRegPath()	: CString"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		pop	esi
		retn
Ordinal148	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B181598	proc near		; CODE XREF: sub_6B181DE8+5Dp
					; sub_6B181E50+4Ap ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jl	short loc_6B1815B3
		mov	edx, [ecx]
		cmp	eax, [edx-8]
		jg	short loc_6B1815B3
		mov	[edx-0Ch], eax
		mov	ecx, [ecx]
		mov	byte ptr [eax+ecx], 0
		retn	4
; ---------------------------------------------------------------------------

loc_6B1815B3:				; CODE XREF: sub_6B181598+6j
					; sub_6B181598+Dj
		push	80070057h
		call	sub_6B181113
sub_6B181598	endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6B1815BE(LPCWSTR lpWideCharStr, int cchWideChar)
sub_6B1815BE	proc near		; CODE XREF: sub_6B181E50+25p

lpWideCharStr	= dword	ptr  4
cchWideChar	= dword	ptr  8

		xor	eax, eax
		push	eax		; lpUsedDefaultChar
		push	eax		; lpDefaultChar
		push	eax		; cbMultiByte
		push	eax		; lpMultiByteStr
		push	[esp+10h+cchWideChar] ;	cchWideChar
		push	[esp+14h+lpWideCharStr]	; lpWideCharStr
		push	eax		; dwFlags
		call	Target
		push	eax		; CodePage
		call	ds:WideCharToMultiByte
		retn
sub_6B1815BE	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6B1815DB(LPSTR lpMultiByteStr, int cbMultiByte, LPCWSTR lpWideCharStr, int cchWideChar)
sub_6B1815DB	proc near		; CODE XREF: sub_6B181E50+3Ep
					; sub_6B197D6E+2Bp

lpMultiByteStr	= dword	ptr  4
cbMultiByte	= dword	ptr  8
lpWideCharStr	= dword	ptr  0Ch
cchWideChar	= dword	ptr  10h

		xor	eax, eax
		push	eax		; lpUsedDefaultChar
		push	eax		; lpDefaultChar
		push	[esp+8+cbMultiByte] ; cbMultiByte
		push	[esp+0Ch+lpMultiByteStr] ; lpMultiByteStr
		push	[esp+10h+cchWideChar] ;	cchWideChar
		push	[esp+14h+lpWideCharStr]	; lpWideCharStr
		push	eax		; dwFlags
		call	Target
		push	eax		; CodePage
		call	ds:WideCharToMultiByte
		retn
sub_6B1815DB	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1815FE	proc near		; CODE XREF: sub_6B182532+6Ep
					; sub_6B182892+93p ...
		mov	eax, [ecx]
		push	ebx
		xor	bl, bl
		cmp	[eax+15h], bl
		jz	short loc_6B18160D
		mov	eax, [eax+8]
		jmp	short loc_6B181639
; ---------------------------------------------------------------------------

loc_6B18160D:				; CODE XREF: sub_6B1815FE+8j
		mov	edx, [eax]
		cmp	[edx+15h], bl
		jnz	short loc_6B18162C
		jmp	short loc_6B181618
; ---------------------------------------------------------------------------

loc_6B181616:				; CODE XREF: sub_6B1815FE+20j
		mov	edx, eax

loc_6B181618:				; CODE XREF: sub_6B1815FE+16j
		mov	eax, [edx+8]
		cmp	[eax+15h], bl
		jz	short loc_6B181616
		mov	[ecx], edx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6B181624:				; CODE XREF: sub_6B1815FE+34j
		mov	edx, [ecx]
		cmp	edx, [eax]
		jnz	short loc_6B181634
		mov	[ecx], eax

loc_6B18162C:				; CODE XREF: sub_6B1815FE+14j
		mov	eax, [eax+4]
		cmp	[eax+15h], bl
		jz	short loc_6B181624

loc_6B181634:				; CODE XREF: sub_6B1815FE+2Aj
		cmp	[eax+15h], bl
		jnz	short loc_6B18163B

loc_6B181639:				; CODE XREF: sub_6B1815FE+Dj
		mov	[ecx], eax

loc_6B18163B:				; CODE XREF: sub_6B1815FE+39j
		pop	ebx
		retn
sub_6B1815FE	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18163D	proc near		; CODE XREF: sub_6B1816CF+56p
					; sub_6B18175E:loc_6B18178Dp ...
		lea	eax, [ecx+0Ch]
		or	edx, 0FFFFFFFFh
		lock xadd [eax], edx
		dec	edx
		test	edx, edx
		jg	short locret_6B181656
		mov	eax, [ecx]
		mov	edx, [eax]
		push	ecx
		mov	ecx, eax
		call	dword ptr [edx+4]

locret_6B181656:			; CODE XREF: sub_6B18163D+Dj
		retn
sub_6B18163D	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B181657	proc near		; CODE XREF: sub_6B1816B1+Dp
					; sub_6B181F8B+24p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	ecx, [esi]
		mov	eax, [ecx]
		push	edi
		call	dword ptr [eax+10h]
		lea	edx, [esi+0Ch]
		cmp	dword ptr [edx], 0
		jl	short loc_6B18167B
		cmp	eax, [esi]
		jnz	short loc_6B18167B
		xor	eax, eax
		mov	edi, esi
		inc	eax
		lock xadd [edx], eax
		jmp	short loc_6B1816AC
; ---------------------------------------------------------------------------

loc_6B18167B:				; CODE XREF: sub_6B181657+13j
					; sub_6B181657+17j
		mov	edx, [eax]
		push	1
		push	dword ptr [esi+4]
		mov	ecx, eax
		call	dword ptr [edx]
		mov	edi, eax
		test	edi, edi
		jnz	short loc_6B181691
		jmp	sub_6B18C650
; ---------------------------------------------------------------------------

loc_6B181691:				; CODE XREF: sub_6B181657+33j
		mov	eax, [esi+4]
		mov	[edi+4], eax
		mov	eax, [esi+4]
		inc	eax
		push	eax		; Size
		add	esi, 10h
		lea	eax, [edi+10h]
		push	esi		; Src
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch

loc_6B1816AC:				; CODE XREF: sub_6B181657+22j
		mov	eax, edi
		pop	edi
		pop	esi
		retn
sub_6B181657	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1816B1	proc near		; CODE XREF: sub_6B18184E+9p
					; sub_6B182A85+37p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		push	esi
		sub	eax, 10h
		push	eax
		mov	esi, ecx
		call	sub_6B181657
		add	eax, 10h
		mov	[esi], eax
		pop	ecx
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1816B1	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1816CF	proc near		; CODE XREF: sub_6B181807+1Ap

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		push	esi
		mov	esi, [ecx]
		mov	ebx, [esi-0Ch]
		sub	esi, 10h
		mov	[ebp+var_8], ecx
		mov	ecx, [esi]
		mov	eax, [ecx]
		push	edi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+10h]
		mov	edx, [eax]
		push	1
		push	[ebp+arg_0]
		mov	ecx, eax
		call	dword ptr [edx]
		mov	edi, eax
		test	edi, edi
		jnz	short loc_6B181702
		call	sub_6B18C650
; ---------------------------------------------------------------------------

loc_6B181702:				; CODE XREF: sub_6B1816CF+2Cj
		mov	eax, [ebp+arg_0]
		cmp	ebx, eax
		jge	short loc_6B18170B
		mov	eax, ebx

loc_6B18170B:				; CODE XREF: sub_6B1816CF+38j
		inc	eax
		push	eax		; Size
		lea	eax, [esi+10h]
		push	eax		; Src
		lea	ebx, [edi+10h]
		push	ebx		; Dst
		call	memcpy
		mov	eax, [ebp+var_4]
		add	esp, 0Ch
		mov	ecx, esi
		mov	[edi+4], eax
		call	sub_6B18163D
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		mov	[eax], ebx
		pop	ebx
		leave
		retn	4
sub_6B1816CF	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B181736	proc near		; CODE XREF: sub_6B181807+3Ep

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		push	1
		push	[esp+8+arg_0]
		sub	eax, 10h
		mov	ecx, [eax]
		mov	edx, [ecx]
		push	eax
		call	dword ptr [edx+8]
		test	eax, eax
		jnz	short loc_6B181755
		call	sub_6B18C650
; ---------------------------------------------------------------------------

loc_6B181755:				; CODE XREF: sub_6B181736+18j
		add	eax, 10h
		mov	[esi], eax
		pop	esi
		retn	4
sub_6B181736	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18175E	proc near		; CODE XREF: sub_6B181DE8+Cp
					; Ordinal143+8p ...
		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		lea	ecx, [eax-10h]
		xor	edx, edx
		cmp	[ecx+4], edx
		push	edi
		mov	edi, [ecx]
		jz	short loc_6B18179E
		cmp	[ecx+0Ch], edx
		jge	short loc_6B18178D
		cmp	[eax-8], edx
		jge	short loc_6B181784
		push	80070057h
		call	sub_6B181113
; ---------------------------------------------------------------------------

loc_6B181784:				; CODE XREF: sub_6B18175E+1Aj
		mov	[eax-0Ch], edx
		mov	eax, [esi]
		mov	[eax], dl
		jmp	short loc_6B18179E
; ---------------------------------------------------------------------------

loc_6B18178D:				; CODE XREF: sub_6B18175E+15j
		call	sub_6B18163D
		mov	eax, [edi]
		mov	ecx, edi
		call	dword ptr [eax+0Ch]
		add	eax, 10h
		mov	[esi], eax

loc_6B18179E:				; CODE XREF: sub_6B18175E+10j
					; sub_6B18175E+2Dj
		pop	edi
		pop	esi
		retn
sub_6B18175E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

sub_6B1817A1	proc near		; CODE XREF: sub_6B181869+3j
					; sub_6B1A90E4+3j
		jmp	sub_6B1899B5
sub_6B1817A1	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1817A6	proc near		; CODE XREF: sub_6B190B6B+90p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	ecx, [esp+4+arg_0]
		mov	eax, [ecx]
		call	dword ptr [eax+0Ch]
		add	eax, 10h
		mov	[esi], eax
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1817A6	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1817BD	proc near		; CODE XREF: sub_6B181892+14p
					; sub_6B182532+22p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	eax, [eax]
		mov	ecx, [esp+arg_0]
		mov	ecx, [ecx]
		push	eax		; unsigned __int8 *
		push	ecx		; unsigned __int8 *
		call	ds:_mbscmp
		pop	ecx
		pop	ecx
		xor	ecx, ecx
		test	eax, eax
		setl	cl
		mov	al, cl
		retn
sub_6B1817BD	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1817DD	proc near		; CODE XREF: sub_6B19A014+3p
		push	18h		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		xor	edx, edx
		cmp	eax, edx
		pop	ecx
		jz	short loc_6B1817ED
		mov	[eax], edx

loc_6B1817ED:				; CODE XREF: sub_6B1817DD+Cj
		lea	ecx, [eax+4]
		cmp	ecx, edx
		jz	short loc_6B1817F6
		mov	[ecx], edx

loc_6B1817F6:				; CODE XREF: sub_6B1817DD+15j
		lea	ecx, [eax+8]
		cmp	ecx, edx
		jz	short loc_6B1817FF
		mov	[ecx], edx

loc_6B1817FF:				; CODE XREF: sub_6B1817DD+1Ej
		mov	byte ptr [eax+14h], 1
		mov	[eax+15h], dl
		retn
sub_6B1817DD	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B181807	proc near		; CODE XREF: sub_6B1818C7+1Fp

arg_0		= dword	ptr  4

		mov	eax, [ecx]
		mov	edx, [eax-0Ch]
		sub	eax, 10h
		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	edx, esi
		jle	short loc_6B18181A
		mov	esi, edx

loc_6B18181A:				; CODE XREF: sub_6B181807+Fj
		cmp	dword ptr [eax+0Ch], 1
		jle	short loc_6B181828
		push	esi
		call	sub_6B1816CF
		jmp	short loc_6B18184A
; ---------------------------------------------------------------------------

loc_6B181828:				; CODE XREF: sub_6B181807+17j
		mov	eax, [eax+8]
		cmp	eax, esi
		jge	short loc_6B18184A
		mov	edx, 400h
		cmp	eax, edx
		jle	short loc_6B18183C
		add	eax, edx
		jmp	short loc_6B18183E
; ---------------------------------------------------------------------------

loc_6B18183C:				; CODE XREF: sub_6B181807+2Fj
		add	eax, eax

loc_6B18183E:				; CODE XREF: sub_6B181807+33j
		cmp	eax, esi
		jge	short loc_6B181844
		mov	eax, esi

loc_6B181844:				; CODE XREF: sub_6B181807+39j
		push	eax
		call	sub_6B181736

loc_6B18184A:				; CODE XREF: sub_6B181807+1Fj
					; sub_6B181807+26j
		pop	esi
		retn	4
sub_6B181807	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18184E	proc near		; CODE XREF: sub_6B1818F1+1Dp

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		push	edi
		mov	esi, ecx
		call	sub_6B1816B1
		mov	eax, [edi+4]
		mov	[esi+4], eax
		pop	edi
		mov	eax, esi
		pop	esi
		retn	4
sub_6B18184E	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B181869	proc near		; CODE XREF: sub_6B1824F9+1Fp
		add	ecx, 0Ch
		jmp	sub_6B1817A1
sub_6B181869	endp

; Exported entry 140.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal140
Ordinal140	proc near		; CODE XREF: Ordinal138+Cp
					; DATA XREF: .rdata:off_6B1BF428o
		add	ecx, 24h
		jmp	sub_6B1899B5
Ordinal140	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B181879	proc near		; CODE XREF: Ordinal137+6p
					; Ordinal145+Cp ...
		mov	eax, dword_6B1C1390
		push	esi
		mov	esi, ecx
		mov	ecx, offset dword_6B1C1390
		call	dword ptr [eax+0Ch]
		add	eax, 10h
		mov	[esi], eax
		mov	eax, esi
		pop	esi
		retn
sub_6B181879	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B181892	proc near		; CODE XREF: sub_6B182A85+13p

arg_0		= dword	ptr  4

		mov	eax, [ecx+4]
		push	esi
		mov	esi, [eax+4]
		push	edi
		mov	edi, eax
		jmp	short loc_6B1818BA
; ---------------------------------------------------------------------------

loc_6B18189E:				; CODE XREF: sub_6B181892+2Cj
		push	[esp+8+arg_0]
		lea	eax, [esi+0Ch]
		push	eax
		call	sub_6B1817BD
		test	al, al
		pop	ecx
		pop	ecx
		jz	short loc_6B1818B6
		mov	esi, [esi+8]
		jmp	short loc_6B1818BA
; ---------------------------------------------------------------------------

loc_6B1818B6:				; CODE XREF: sub_6B181892+1Dj
		mov	edi, esi
		mov	esi, [esi]

loc_6B1818BA:				; CODE XREF: sub_6B181892+Aj
					; sub_6B181892+22j
		cmp	byte ptr [esi+15h], 0
		jz	short loc_6B18189E
		mov	eax, edi
		pop	edi
		pop	esi
		retn	4
sub_6B181892	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1818C7	proc near		; CODE XREF: sub_6B181DE8+32p
					; sub_6B181E50+32p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		xor	ecx, ecx
		sub	eax, 10h
		inc	ecx
		sub	ecx, [eax+0Ch]
		mov	eax, [eax+8]
		sub	eax, [esp+4+arg_0]
		or	ecx, eax
		jge	short loc_6B1818EB
		push	[esp+4+arg_0]
		mov	ecx, esi
		call	sub_6B181807

loc_6B1818EB:				; CODE XREF: sub_6B1818C7+17j
		mov	eax, [esi]
		pop	esi
		retn	4
sub_6B1818C7	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1818F1	proc near		; CODE XREF: sub_6B181ECE+40p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		push	esi
		push	[ebp+arg_C]
		mov	esi, ecx
		mov	[esi], eax
		mov	eax, [ebp+arg_4]
		mov	[esi+4], eax
		mov	eax, [ebp+arg_8]
		lea	ecx, [esi+0Ch]
		mov	[esi+8], eax
		call	sub_6B18184E
		mov	al, [ebp+arg_10]
		mov	[esi+14h], al
		mov	byte ptr [esi+15h], 0
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	14h
sub_6B1818F1	endp

; Exported entry 137.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal137
Ordinal137	proc near		; CODE XREF: Ordinal135+14p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+24h]
		call	sub_6B181879
		mov	eax, esi
		pop	esi
		retn
Ordinal137	endp

; Exported entry 145.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal145
Ordinal145	proc near		; CODE XREF: Ordinal144+5p
					; DATA XREF: .rdata:off_6B1BF428o

var_20		= byte ptr -20h
var_14		= byte ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
Args		= byte ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 20h
		push	esi
		mov	esi, ecx
		lea	ecx, [ebp+var_8]
		call	sub_6B181879
		lea	ecx, [ebp+var_4]
		call	sub_6B181879
		lea	eax, [ebp+var_4]
		push	eax		; int
		lea	eax, [ebp+var_8]
		push	eax		; int
		push	dword ptr [ebp+Args] ; Args
		call	Ordinal148
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_6B181975
		push	offset aCdebugoptionsS ; "CDebugOptions::Save()	: BuildRegPath() "...
		call	sub_6B18102E
		pop	ecx
		xor	esi, esi
		jmp	loc_6B181CD0
; ---------------------------------------------------------------------------

loc_6B181975:				; CODE XREF: Ordinal145+2Ej
		push	edi		; Args
		lea	ecx, [ebp+var_14]
		call	Ordinal1316
		push	1		; int
		push	20006h		; samDesired
		push	[ebp+var_8]	; Args
		mov	edi, 80000002h
		push	edi		; hKey
		lea	ecx, [ebp+var_14]
		call	Ordinal1321
		test	eax, eax
		jnz	short loc_6B1819AC
		push	offset aCdebugoption_0 ; "CDebugOptions::Save()	: reg.Open() ==	F"...
		call	sub_6B18102E
		pop	ecx
		xor	esi, esi
		jmp	loc_6B181CC7
; ---------------------------------------------------------------------------

loc_6B1819AC:				; CODE XREF: Ordinal145+65j
		push	ebx		; Args
		push	dword ptr [esi+40h]
		lea	ecx, [ebp+var_14]
		push	offset aDumponnew ; "DumpOnNew"
		call	Ordinal1342
		test	eax, eax
		jz	loc_6B181CB9
		push	dword ptr [esi+44h]
		lea	ecx, [ebp+var_14]
		push	offset aTerminateonnew ; "TerminateOnNew"
		call	Ordinal1342
		test	eax, eax
		jz	loc_6B181CB9
		push	dword ptr [esi+48h]
		lea	ecx, [ebp+var_14]
		push	offset aThrowonnew ; "ThrowOnNew"
		call	Ordinal1342
		test	eax, eax
		jz	loc_6B181CB9
		push	dword ptr [esi+4Ch]
		lea	ecx, [ebp+var_14]
		push	offset aDumponexceptio ; "DumpOnException"
		call	Ordinal1342
		test	eax, eax
		jz	loc_6B181CB9
		push	dword ptr [esi+50h]
		lea	ecx, [ebp+var_14]
		push	offset aTerminateonexc ; "TerminateOnException"
		call	Ordinal1342
		test	eax, eax
		jz	loc_6B181CB9
		push	dword ptr [esi+54h]
		lea	ecx, [ebp+var_14]
		push	offset aDumponpurecall ; "DumpOnPurecall"
		call	Ordinal1342
		test	eax, eax
		jz	loc_6B181CB9
		push	dword ptr [esi+58h]
		lea	ecx, [ebp+var_14]
		push	offset aTerminateonpur ; "TerminateOnPurecall"
		call	Ordinal1342
		test	eax, eax
		jz	loc_6B181CB9
		push	dword ptr [esi+5Ch]
		lea	ecx, [ebp+var_14]
		push	offset aDumponsecurity ; "DumpOnSecurity"
		call	Ordinal1342
		test	eax, eax
		jz	loc_6B181CB9
		push	dword ptr [esi+60h]
		lea	ecx, [ebp+var_14]
		push	offset aTerminateonsec ; "TerminateOnSecurity"
		call	Ordinal1342
		test	eax, eax
		jz	loc_6B181CB9
		lea	eax, [esi+64h]
		push	eax		; int
		mov	ebx, offset aDirectory ; "Directory"
		push	ebx		; lpValueName
		lea	ecx, [ebp+var_14]
		call	Ordinal1335
		test	eax, eax
		jz	loc_6B181CB9
		push	dword ptr [esi+68h]
		lea	ecx, [ebp+var_14]
		push	offset aDumptype ; "DumpType"
		call	Ordinal1342
		test	eax, eax
		jz	loc_6B181CB9
		push	dword ptr [esi+6Ch]
		lea	ecx, [ebp+var_14]
		push	offset aAppenddatetime ; "AppendDateTimeToFile"
		call	Ordinal1342
		test	eax, eax
		jz	loc_6B181CB9
		push	dword ptr [esi+70h]
		lea	ecx, [ebp+var_14]
		push	offset aAppendversiont ; "AppendVersionToFile"
		call	Ordinal1342
		test	eax, eax
		jz	loc_6B181CB9
		push	1		; int
		push	20006h		; samDesired
		push	[ebp+var_4]	; Args
		lea	ecx, [ebp+var_14]
		push	edi		; hKey
		call	Ordinal1321
		test	eax, eax
		jnz	short loc_6B181B0F
		push	offset aCdebugoption_0 ; "CDebugOptions::Save()	: reg.Open() ==	F"...
		call	sub_6B18102E
		xor	esi, esi
		jmp	loc_6B181CC5
; ---------------------------------------------------------------------------

loc_6B181B0F:				; CODE XREF: Ordinal145+1C9j
		push	dword ptr [esi+4]
		lea	ecx, [ebp+var_14]
		push	offset aDebugtype ; "DebugType"
		call	Ordinal1342
		test	eax, eax
		jz	loc_6B181CB9
		lea	eax, [esi+8]
		push	eax		; int
		push	ebx		; lpValueName
		lea	ecx, [ebp+var_14]
		call	Ordinal1335
		test	eax, eax
		jz	loc_6B181CB9
		push	dword ptr [esi+0Ch]
		lea	ecx, [ebp+var_14]
		push	offset aOutputtodebugg ; "OutputToDebugger"
		call	Ordinal1342
		test	eax, eax
		jz	loc_6B181CB9
		push	dword ptr [esi+10h]
		lea	ecx, [ebp+var_14]
		push	offset aOutputtofile ; "OutputToFile"
		call	Ordinal1342
		test	eax, eax
		jz	loc_6B181CB9
		push	dword ptr [esi+14h]
		lea	ecx, [ebp+var_14]
		push	offset aAppendprocessi ; "AppendProcessIdToFile"
		call	Ordinal1342
		test	eax, eax
		jz	loc_6B181CB9
		push	dword ptr [esi+18h]
		lea	ecx, [ebp+var_14]
		push	offset aPrependthreadi ; "PrependThreadId"
		call	Ordinal1342
		test	eax, eax
		jz	loc_6B181CB9
		push	dword ptr [esi+1Ch]
		lea	ecx, [ebp+var_14]
		push	offset aPrependprocess ; "PrependProcessId"
		call	Ordinal1342
		test	eax, eax
		jz	loc_6B181CB9
		push	dword ptr [esi+20h]
		lea	ecx, [ebp+var_14]
		push	offset aPrependdatetim ; "PrependDateTime"
		call	Ordinal1342
		test	eax, eax
		jz	loc_6B181CB9
		push	dword ptr [esi+24h]
		lea	ecx, [ebp+var_14]
		push	offset aPrependmodulen ; "PrependModuleName"
		call	Ordinal1342
		test	eax, eax
		jz	loc_6B181CB9
		push	dword ptr [esi+2Ch]
		lea	ecx, [ebp+var_14]
		push	offset aPrependtype ; "PrependType"
		call	Ordinal1342
		test	eax, eax
		jz	loc_6B181CB9
		push	dword ptr [esi+30h]
		lea	ecx, [ebp+var_14]
		push	offset aExclusivemodul ; "ExclusiveModules"
		call	Ordinal1342
		test	eax, eax
		jz	loc_6B181CB9
		push	dword ptr [esi+28h]
		lea	ecx, [ebp+var_14]
		push	offset aAppendnewline ;	"AppendNewLine"
		call	Ordinal1342
		test	eax, eax
		jz	loc_6B181CB9
		mov	edi, offset pszSubKey ;	"Modules"
		push	edi		; pszSubKey
		lea	ecx, [ebp+var_14]
		call	Ordinal1323
		lea	ecx, [ebp+var_20]
		call	Ordinal1316
		push	1		; int
		push	20006h		; samDesired
		push	edi		; Args
		lea	ecx, [ebp+var_14]
		call	Ordinal1649
		push	eax		; hKey
		lea	ecx, [ebp+var_20]
		call	Ordinal1321
		test	eax, eax
		jnz	short loc_6B181C76
		push	offset aCdebugoption_1 ; "CDebugOptions::Save()	: mapReg.Open()	="...

loc_6B181C64:				; CODE XREF: Ordinal145+384j
		call	sub_6B18102E
		pop	ecx
		lea	ecx, [ebp+var_20]
		call	Ordinal1318
		xor	esi, esi
		jmp	short loc_6B181CC6
; ---------------------------------------------------------------------------

loc_6B181C76:				; CODE XREF: Ordinal145+32Aj
		mov	ecx, [esi+38h]
		mov	eax, [ecx]
		cmp	eax, ecx
		mov	dword ptr [ebp+Args], eax
		jz	short loc_6B181CA5

loc_6B181C82:				; CODE XREF: Ordinal145+370j
		mov	ecx, [eax+0Ch]
		push	dword ptr [eax+10h]
		push	ecx
		lea	ecx, [ebp+var_20]
		call	Ordinal1342
		test	eax, eax
		jz	short loc_6B181CB2
		lea	ecx, [ebp+Args]
		call	sub_6B199BA7
		mov	eax, dword ptr [ebp+Args]
		cmp	eax, [esi+38h]
		jnz	short loc_6B181C82

loc_6B181CA5:				; CODE XREF: Ordinal145+34Dj
		lea	ecx, [ebp+var_20]
		call	Ordinal1318
		xor	esi, esi
		inc	esi
		jmp	short loc_6B181CC6
; ---------------------------------------------------------------------------

loc_6B181CB2:				; CODE XREF: Ordinal145+360j
		push	offset aCdebugoption_2 ; "CDebugOptions::Save()	: reg.SetNumber()"...
		jmp	short loc_6B181C64
; ---------------------------------------------------------------------------

loc_6B181CB9:				; CODE XREF: Ordinal145+8Cj
					; Ordinal145+A4j ...
		push	offset aCdebugoption_2 ; "CDebugOptions::Save()	: reg.SetNumber()"...
		xor	esi, esi
		call	sub_6B18102E

loc_6B181CC5:				; CODE XREF: Ordinal145+1D7j
		pop	ecx

loc_6B181CC6:				; CODE XREF: Ordinal145+341j
					; Ordinal145+37Dj
		pop	ebx

loc_6B181CC7:				; CODE XREF: Ordinal145+74j
		lea	ecx, [ebp+var_14]
		call	Ordinal1318
		pop	edi

loc_6B181CD0:				; CODE XREF: Ordinal145+3Dj
		lea	ecx, [ebp+var_4]
		call	sub_6B1899B5
		lea	ecx, [ebp+var_8]
		call	sub_6B1899B5
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal145	endp

; Exported entry 147.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal147
Ordinal147	proc near		; CODE XREF: Ordinal152+15p
					; Ordinal153+3Dp
					; DATA XREF: ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		xor	ebx, ebx
		cmp	edi, ebx
		mov	esi, ecx
		jnz	short loc_6B181D00
		xor	eax, eax
		jmp	loc_6B181DE1
; ---------------------------------------------------------------------------

loc_6B181D00:				; CODE XREF: Ordinal147+10j
		push	dword ptr [esi+4]
		mov	ecx, edi
		mov	[ebp+var_4], 1
		call	Ordinal1095
		push	dword ptr [esi+0Ch]
		mov	ecx, edi
		call	Ordinal1007
		push	dword ptr [esi+10h]
		mov	ecx, edi
		call	Ordinal1009
		push	dword ptr [esi+14h]
		mov	ecx, edi
		call	Ordinal1011
		push	dword ptr [esi+18h]
		mov	ecx, edi
		call	Ordinal999
		push	dword ptr [esi+1Ch]
		mov	ecx, edi
		call	Ordinal1001
		push	dword ptr [esi+20h]
		mov	ecx, edi
		call	Ordinal1003
		push	dword ptr [esi+24h]
		mov	ecx, edi
		call	Ordinal1005
		push	dword ptr [esi+2Ch]
		mov	ecx, edi
		call	Ordinal1020
		push	dword ptr [esi+28h]
		mov	ecx, edi
		call	Ordinal997
		mov	eax, [esi+8]
		cmp	[eax-0Ch], ebx
		jz	short loc_6B181D82
		push	eax		; Src
		mov	ecx, edi
		call	Ordinal1015
		test	eax, eax
		jnz	short loc_6B181D82
		mov	[ebp+var_4], ebx

loc_6B181D82:				; CODE XREF: Ordinal147+8Aj
					; Ordinal147+96j
		cmp	[esi+30h], ebx
		jz	short loc_6B181D94
		cmp	[esi+3Ch], ebx
		jbe	short loc_6B181D94
		push	ebx
		mov	ecx, edi
		call	Ordinal1095

loc_6B181D94:				; CODE XREF: Ordinal147+9Ej
					; Ordinal147+A3j
		mov	eax, [esi+38h]
		mov	ebx, [eax]
		cmp	ebx, eax
		mov	[ebp+arg_0], ebx
		jz	short loc_6B181DDE

loc_6B181DA0:				; CODE XREF: Ordinal147+DFj
		mov	ecx, edi
		call	Ordinal1052
		mov	ecx, [ebx+0Ch]
		push	eax		; unsigned __int8 *
		push	ecx		; unsigned __int8 *
		call	ds:_mbsicmp
		test	eax, eax
		pop	ecx
		pop	ecx
		jz	short loc_6B181DCA
		lea	ecx, [ebp+arg_0]
		call	sub_6B199BA7
		mov	ebx, [ebp+arg_0]
		cmp	ebx, [esi+38h]
		jnz	short loc_6B181DA0
		jmp	short loc_6B181DDE
; ---------------------------------------------------------------------------

loc_6B181DCA:				; CODE XREF: Ordinal147+CFj
		cmp	dword ptr [ebx+10h], 0
		mov	ecx, edi
		jnz	short loc_6B181DD6
		push	0
		jmp	short loc_6B181DD9
; ---------------------------------------------------------------------------

loc_6B181DD6:				; CODE XREF: Ordinal147+E9j
		push	dword ptr [esi+4]

loc_6B181DD9:				; CODE XREF: Ordinal147+EDj
		call	Ordinal1095

loc_6B181DDE:				; CODE XREF: Ordinal147+B7j
					; Ordinal147+E1j
		mov	eax, [ebp+var_4]

loc_6B181DE1:				; CODE XREF: Ordinal147+14j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal147	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6B181DE8(void *Src,	size_t Size)
sub_6B181DE8	proc near		; CODE XREF: sub_6B181EA9+1Bp
					; sub_6B181F8B+41p

Src		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		cmp	[ebp+Size], 0
		push	ebx
		mov	ebx, ecx
		jnz	short loc_6B181DFB
		call	sub_6B18175E
		jmp	short loc_6B181E4B
; ---------------------------------------------------------------------------

loc_6B181DFB:				; CODE XREF: sub_6B181DE8+Aj
		push	esi
		mov	esi, [ebp+Src]
		test	esi, esi
		jnz	short loc_6B181E0D
		push	80070057h
		call	sub_6B181113
; ---------------------------------------------------------------------------

loc_6B181E0D:				; CODE XREF: sub_6B181DE8+19j
		mov	eax, [ebx]
		push	edi
		push	[ebp+Size]
		mov	edi, [eax-0Ch]
		mov	ecx, ebx
		sub	esi, eax
		call	sub_6B1818C7
		cmp	esi, edi
		pop	edi
		push	[ebp+Size]	; Size
		ja	short loc_6B181E34
		lea	ecx, [eax+esi]
		push	ecx		; Src
		push	eax		; Dst
		call	ds:memmove
		jmp	short loc_6B181E3D
; ---------------------------------------------------------------------------

loc_6B181E34:				; CODE XREF: sub_6B181DE8+3Dj
		push	[ebp+Src]	; Src
		push	eax		; Dst
		call	memcpy

loc_6B181E3D:				; CODE XREF: sub_6B181DE8+4Aj
		add	esp, 0Ch
		push	[ebp+Size]
		mov	ecx, ebx
		call	sub_6B181598
		pop	esi

loc_6B181E4B:				; CODE XREF: sub_6B181DE8+11j
		pop	ebx
		pop	ebp
		retn	8
sub_6B181DE8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6B181E50(HMODULE hModule, int)
sub_6B181E50	proc near		; CODE XREF: sub_6B181FF3+1Bp

var_4		= dword	ptr -4
hModule		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		push	[ebp+arg_4]	; int
		mov	[ebp+var_4], ecx
		push	[ebp+hModule]	; hModule
		call	sub_6B1814A6
		mov	esi, eax
		test	esi, esi
		pop	ecx
		pop	ecx
		jz	short loc_6B181EA4
		movzx	eax, word ptr [esi]
		push	ebx
		push	edi
		push	eax		; cchWideChar
		lea	edi, [esi+2]
		push	edi		; lpWideCharStr
		call	sub_6B1815BE
		pop	ecx
		pop	ecx
		mov	ecx, [ebp+var_4]
		mov	ebx, eax
		push	ebx
		call	sub_6B1818C7
		movzx	ecx, word ptr [esi]
		push	ecx		; cchWideChar
		push	edi		; lpWideCharStr
		push	ebx		; cbMultiByte
		push	eax		; lpMultiByteStr
		call	sub_6B1815DB
		mov	ecx, [ebp+var_4]
		add	esp, 10h
		push	ebx
		call	sub_6B181598
		xor	eax, eax
		pop	edi
		inc	eax
		pop	ebx

loc_6B181EA4:				; CODE XREF: sub_6B181E50+19j
		pop	esi
		leave
		retn	8
sub_6B181E50	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6B181EA9(char *Src)
sub_6B181EA9	proc near		; CODE XREF: sub_6B18281C+3Ap
					; Ordinal718+8Dp ...

Src		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+Src]
		test	esi, esi
		push	edi
		mov	edi, ecx
		jnz	short loc_6B181EB9
		xor	eax, eax
		jmp	short loc_6B181EC0
; ---------------------------------------------------------------------------

loc_6B181EB9:				; CODE XREF: sub_6B181EA9+Aj
		push	esi		; Str
		call	strlen
		pop	ecx

loc_6B181EC0:				; CODE XREF: sub_6B181EA9+Ej
		push	eax		; Size
		push	esi		; Src
		mov	ecx, edi
		call	sub_6B181DE8
		pop	edi
		pop	esi
		retn	4
sub_6B181EA9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B181ECE	proc near		; CODE XREF: sub_6B182017+5Ep

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		mov	eax, offset unknown_libname_18 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 0Ch
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	18h		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		and	[ebp+var_4], 0
		mov	esi, eax
		pop	ecx
		mov	[ebp+var_14], esi
		mov	[ebp+var_18], esi
		test	esi, esi
		mov	byte ptr [ebp+var_4], 1
		jz	short loc_6B181F13
		push	[ebp+arg_10]
		mov	ecx, esi
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6B1818F1

loc_6B181F13:				; CODE XREF: sub_6B181ECE+2Dj
		mov	ecx, [ebp+var_C]
		pop	edi
		mov	eax, esi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn	14h
sub_6B181ECE	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B181F26	proc near		; DATA XREF: .rdata:6B1BA950o
		push	dword ptr [ebp-14h] ; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx
		push	0
		push	0
		call	_CxxThrowException
sub_6B181F26	endp

; ---------------------------------------------------------------------------
		db 0CCh
; Exported entry 144.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal144
Ordinal144	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	offset aSoftwareSyma_0 ; "Software\\Symantec\\Common Client\\Debug"
		call	Ordinal145
		retn
Ordinal144	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6B181F44(char *Format, va_list Args)
sub_6B181F44	proc near		; CODE XREF: sub_6B1824C6+Dp
					; Ordinal986+12Dp ...

Format		= dword	ptr  4
Args		= dword	ptr  8

		push	ebx
		push	esi
		push	edi
		push	[esp+0Ch+Args]	; ArgList
		mov	edi, ecx
		mov	eax, [edi]
		push	[esp+10h+Format] ; Format
		mov	esi, [eax-0Ch]
		call	ds:_vscprintf
		pop	ecx
		pop	ecx
		lea	ebx, [eax+esi]
		push	ebx
		mov	ecx, edi
		call	sub_6B1818C7
		push	[esp+0Ch+Args]	; Args
		add	eax, esi
		push	[esp+10h+Format] ; Format
		push	eax		; Dest
		call	ds:vsprintf
		add	esp, 0Ch
		push	ebx
		mov	ecx, edi
		call	sub_6B181598
		pop	edi
		pop	esi
		pop	ebx
		retn	8
sub_6B181F44	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B181F8B	proc near		; CODE XREF: Ordinal146+122p
					; Ordinal737+10Cp ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		push	esi
		push	edi
		mov	edi, ecx
		mov	esi, [edi]
		lea	ecx, [eax-10h]
		sub	esi, 10h
		cmp	ecx, esi
		jz	short loc_6B181FD1
		cmp	dword ptr [esi+0Ch], 0
		jl	short loc_6B181FC6
		mov	edx, [ecx]
		cmp	edx, [esi]
		jnz	short loc_6B181FC6
		push	ebx
		push	ecx
		call	sub_6B181657
		pop	ecx
		mov	ecx, esi
		mov	ebx, eax
		call	sub_6B18163D
		add	ebx, 10h
		mov	[edi], ebx
		pop	ebx
		jmp	short loc_6B181FD1
; ---------------------------------------------------------------------------

loc_6B181FC6:				; CODE XREF: sub_6B181F8B+1Aj
					; sub_6B181F8B+20j
		push	dword ptr [eax-0Ch] ; Size
		mov	ecx, edi
		push	eax		; Src
		call	sub_6B181DE8

loc_6B181FD1:				; CODE XREF: sub_6B181F8B+14j
					; sub_6B181F8B+39j
		mov	eax, edi
		pop	edi
		pop	esi
		retn	4
sub_6B181F8B	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B181FD8	proc near		; CODE XREF: sub_6B182485+35p
					; sub_6B18EFCF+52p

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		call	sub_6B1818C7
		push	[esp+4+arg_0]
		mov	ecx, esi
		call	sub_6B181598
		pop	esi
		retn	4
sub_6B181FD8	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B181FF3	proc near		; CODE XREF: sub_6B1824D9+16p

arg_0		= dword	ptr  4

		push	esi
		push	0		; wLanguage
		push	[esp+8+arg_0]	; int
		mov	esi, ecx
		call	sub_6B181508
		test	eax, eax
		pop	ecx
		pop	ecx
		jz	short loc_6B182013
		push	[esp+4+arg_0]	; int
		mov	ecx, esi
		push	eax		; hModule
		call	sub_6B181E50

loc_6B182013:				; CODE XREF: sub_6B181FF3+12j
		pop	esi
		retn	4
sub_6B181FF3	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B182017	proc near		; CODE XREF: sub_6B182532+59p
					; sub_6B182892+19p ...

var_50		= dword	ptr -50h
var_28		= byte ptr -28h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	eax, offset unknown_libname_19 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		cmp	dword ptr [edi+8], 1FFFFFFEh
		jb	short loc_6B182065
		push	offset aMapSetTTooLong ; "map/set<T> too long"
		lea	ecx, [ebp+var_28]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_28]
		push	eax
		lea	ecx, [ebp+var_50]
		call	sub_6B181357
		push	offset dword_6B1BA9E8
		lea	eax, [ebp+var_50]
		push	eax
		mov	[ebp+var_50], offset off_6B1AA914
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B182065:				; CODE XREF: sub_6B182017+19j
		mov	eax, [edi+4]
		mov	esi, [ebp+arg_8]
		push	0
		push	[ebp+arg_C]
		mov	ecx, edi
		push	eax
		push	esi
		push	eax
		call	sub_6B181ECE
		inc	dword ptr [edi+8]
		mov	ebx, eax
		mov	eax, [edi+4]
		cmp	esi, eax
		jnz	short loc_6B182093
		mov	[eax+4], ebx
		mov	eax, [edi+4]
		mov	[eax], ebx
		mov	eax, [edi+4]
		jmp	short loc_6B1820B1
; ---------------------------------------------------------------------------

loc_6B182093:				; CODE XREF: sub_6B182017+6Dj
		cmp	[ebp+arg_4], 0
		jz	short loc_6B1820A6
		mov	[esi], ebx
		mov	eax, [edi+4]
		cmp	esi, [eax]
		jnz	short loc_6B1820B4
		mov	[eax], ebx
		jmp	short loc_6B1820B4
; ---------------------------------------------------------------------------

loc_6B1820A6:				; CODE XREF: sub_6B182017+80j
		mov	[esi+8], ebx
		mov	eax, [edi+4]
		cmp	esi, [eax+8]
		jnz	short loc_6B1820B4

loc_6B1820B1:				; CODE XREF: sub_6B182017+7Aj
		mov	[eax+8], ebx

loc_6B1820B4:				; CODE XREF: sub_6B182017+89j
					; sub_6B182017+8Dj ...
		mov	esi, ebx
		lea	eax, [ebx+4]
		jmp	loc_6B182153
; ---------------------------------------------------------------------------

loc_6B1820BE:				; CODE XREF: sub_6B182017+142j
		mov	ecx, [eax]
		mov	edx, [ecx+4]
		mov	edx, [edx]
		cmp	ecx, edx
		jnz	short loc_6B18211E
		mov	edx, [ecx+4]
		mov	edx, [edx+8]
		cmp	byte ptr [edx+14h], 0
		jnz	short loc_6B1820EF

loc_6B1820D5:				; CODE XREF: sub_6B182017+10Bj
		mov	ecx, [eax]
		mov	byte ptr [ecx+14h], 1
		mov	byte ptr [edx+14h], 1
		mov	ecx, [eax]
		mov	ecx, [ecx+4]
		mov	byte ptr [ecx+14h], 0
		mov	eax, [eax]
		mov	esi, [eax+4]
		jmp	short loc_6B182150
; ---------------------------------------------------------------------------

loc_6B1820EF:				; CODE XREF: sub_6B182017+BCj
		cmp	esi, [ecx+8]
		jnz	short loc_6B1820FE
		mov	esi, ecx
		push	esi
		mov	ecx, edi
		call	sub_6B199C0F

loc_6B1820FE:				; CODE XREF: sub_6B182017+DBj
		mov	eax, [esi+4]
		mov	byte ptr [eax+14h], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+14h], 0
		mov	eax, [esi+4]
		push	dword ptr [eax+4]
		mov	ecx, edi
		call	sub_6B199B63
		jmp	short loc_6B182150
; ---------------------------------------------------------------------------

loc_6B18211E:				; CODE XREF: sub_6B182017+B0j
		cmp	byte ptr [edx+14h], 0
		jz	short loc_6B1820D5
		cmp	esi, [ecx]
		jnz	short loc_6B182132
		mov	esi, ecx
		push	esi
		mov	ecx, edi
		call	sub_6B199B63

loc_6B182132:				; CODE XREF: sub_6B182017+10Fj
		mov	eax, [esi+4]
		mov	byte ptr [eax+14h], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+14h], 0
		mov	eax, [esi+4]
		push	dword ptr [eax+4]
		mov	ecx, edi
		call	sub_6B199C0F

loc_6B182150:				; CODE XREF: sub_6B182017+D6j
					; sub_6B182017+105j
		lea	eax, [esi+4]

loc_6B182153:				; CODE XREF: sub_6B182017+A2j
		mov	ecx, [eax]
		cmp	byte ptr [ecx+14h], 0
		jz	loc_6B1820BE
		mov	eax, [edi+4]
		mov	eax, [eax+4]
		mov	ecx, [ebp+var_C]
		mov	byte ptr [eax+14h], 1
		mov	eax, [ebp+arg_0]
		pop	edi
		mov	[eax], ebx
		pop	esi
		pop	ebx
		mov	large fs:0, ecx
		leave
		retn	10h
sub_6B182017	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B18217F	proc near		; CODE XREF: sub_6B1821C4+7p
					; sub_6B18246D+7p
					; DATA XREF: ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_20 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		mov	esi, ecx
		push	edi
		mov	[ebp+var_10], esi
		call	ds:__imp_??0exception@@QAE@ABV0@@Z ; exception::exception(exception const &)
		and	[ebp+var_4], 0
		add	edi, 0Ch
		push	edi
		lea	ecx, [esi+0Ch]
		mov	dword ptr [esi], offset	off_6B1AA90C
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z	; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
		mov	ecx, [ebp+var_C]
		pop	edi
		mov	eax, esi
		pop	esi
		mov	large fs:0, ecx
		leave
		retn	4
sub_6B18217F	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1821C4	proc near		; DATA XREF: .rdata:6B1BA9D4o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		call	sub_6B18217F
		mov	dword ptr [esi], offset	off_6B1AA914
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1821C4	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6B1821DC(int, void *)
sub_6B1821DC	proc near		; CODE XREF: sub_6B1829C3+3Bp

var_54		= dword	ptr -54h
var_2C		= byte ptr -2Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_21 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 48h
		push	ebx
		mov	ebx, [ebp+arg_4]
		cmp	byte ptr [ebx+15h], 0
		push	esi
		push	edi
		mov	[ebp+var_10], ecx
		jz	short loc_6B18222B
		push	offset aInvalidMapSetT ; "invalid map/set<T> iterator"
		lea	ecx, [ebp+var_2C]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_2C]
		push	eax
		lea	ecx, [ebp+var_54]
		call	sub_6B181357
		push	offset dword_6B1BAA6C
		lea	eax, [ebp+var_54]
		push	eax
		mov	[ebp+var_54], offset off_6B1AA91C
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18222B:				; CODE XREF: sub_6B1821DC+1Aj
		lea	ecx, [ebp+arg_4]
		call	sub_6B199BA7
		mov	ecx, [ebx]
		cmp	byte ptr [ecx+15h], 0
		jz	short loc_6B182240
		mov	edi, [ebx+8]
		jmp	short loc_6B182257
; ---------------------------------------------------------------------------

loc_6B182240:				; CODE XREF: sub_6B1821DC+5Dj
		mov	eax, [ebx+8]
		cmp	byte ptr [eax+15h], 0
		jz	short loc_6B18224D
		mov	edi, ecx
		jmp	short loc_6B182257
; ---------------------------------------------------------------------------

loc_6B18224D:				; CODE XREF: sub_6B1821DC+6Bj
		mov	eax, [ebp+arg_4]
		cmp	eax, ebx
		mov	edi, [eax+8]
		jnz	short loc_6B1822CD

loc_6B182257:				; CODE XREF: sub_6B1821DC+62j
					; sub_6B1821DC+6Fj
		cmp	byte ptr [edi+15h], 0
		mov	esi, [ebx+4]
		jnz	short loc_6B182263
		mov	[edi+4], esi

loc_6B182263:				; CODE XREF: sub_6B1821DC+82j
		mov	ecx, [ebp+var_10]
		mov	eax, [ecx+4]
		cmp	[eax+4], ebx
		jnz	short loc_6B182273
		mov	[eax+4], edi
		jmp	short loc_6B18227E
; ---------------------------------------------------------------------------

loc_6B182273:				; CODE XREF: sub_6B1821DC+90j
		cmp	[esi], ebx
		jnz	short loc_6B18227B
		mov	[esi], edi
		jmp	short loc_6B18227E
; ---------------------------------------------------------------------------

loc_6B18227B:				; CODE XREF: sub_6B1821DC+99j
		mov	[esi+8], edi

loc_6B18227E:				; CODE XREF: sub_6B1821DC+95j
					; sub_6B1821DC+9Dj
		mov	ecx, [ecx+4]
		cmp	[ecx], ebx
		jnz	short loc_6B1822A1
		cmp	byte ptr [edi+15h], 0
		jz	short loc_6B18228F
		mov	edx, esi
		jmp	short loc_6B18229F
; ---------------------------------------------------------------------------

loc_6B18228F:				; CODE XREF: sub_6B1821DC+ADj
		mov	eax, [edi]
		mov	edx, edi
		jmp	short loc_6B182299
; ---------------------------------------------------------------------------

loc_6B182295:				; CODE XREF: sub_6B1821DC+C1j
		mov	edx, eax
		mov	eax, [edx]

loc_6B182299:				; CODE XREF: sub_6B1821DC+B7j
		cmp	byte ptr [eax+15h], 0
		jz	short loc_6B182295

loc_6B18229F:				; CODE XREF: sub_6B1821DC+B1j
		mov	[ecx], edx

loc_6B1822A1:				; CODE XREF: sub_6B1821DC+A7j
		mov	eax, [ebp+var_10]
		mov	ecx, [eax+4]
		cmp	[ecx+8], ebx
		jnz	short loc_6B182327
		cmp	byte ptr [edi+15h], 0
		jz	short loc_6B1822B6
		mov	edx, esi
		jmp	short loc_6B1822C8
; ---------------------------------------------------------------------------

loc_6B1822B6:				; CODE XREF: sub_6B1821DC+D4j
		mov	eax, [edi+8]
		mov	edx, edi
		jmp	short loc_6B1822C2
; ---------------------------------------------------------------------------

loc_6B1822BD:				; CODE XREF: sub_6B1821DC+EAj
		mov	edx, eax
		mov	eax, [edx+8]

loc_6B1822C2:				; CODE XREF: sub_6B1821DC+DFj
		cmp	byte ptr [eax+15h], 0
		jz	short loc_6B1822BD

loc_6B1822C8:				; CODE XREF: sub_6B1821DC+D8j
		mov	[ecx+8], edx
		jmp	short loc_6B182327
; ---------------------------------------------------------------------------

loc_6B1822CD:				; CODE XREF: sub_6B1821DC+79j
		mov	[ecx+4], eax
		mov	ecx, [ebx]
		mov	[eax], ecx
		cmp	eax, [ebx+8]
		jnz	short loc_6B1822DD
		mov	esi, eax
		jmp	short loc_6B1822F7
; ---------------------------------------------------------------------------

loc_6B1822DD:				; CODE XREF: sub_6B1821DC+FBj
		cmp	byte ptr [edi+15h], 0
		mov	esi, [eax+4]
		jnz	short loc_6B1822E9
		mov	[edi+4], esi

loc_6B1822E9:				; CODE XREF: sub_6B1821DC+108j
		mov	[esi], edi
		mov	ecx, [ebx+8]
		mov	[eax+8], ecx
		mov	ecx, [ebx+8]
		mov	[ecx+4], eax

loc_6B1822F7:				; CODE XREF: sub_6B1821DC+FFj
		mov	ecx, [ebp+var_10]
		mov	ecx, [ecx+4]
		cmp	[ecx+4], ebx
		jnz	short loc_6B182307
		mov	[ecx+4], eax
		jmp	short loc_6B182315
; ---------------------------------------------------------------------------

loc_6B182307:				; CODE XREF: sub_6B1821DC+124j
		mov	ecx, [ebx+4]
		cmp	[ecx], ebx
		jnz	short loc_6B182312
		mov	[ecx], eax
		jmp	short loc_6B182315
; ---------------------------------------------------------------------------

loc_6B182312:				; CODE XREF: sub_6B1821DC+130j
		mov	[ecx+8], eax

loc_6B182315:				; CODE XREF: sub_6B1821DC+129j
					; sub_6B1821DC+134j
		mov	ecx, [ebx+4]
		mov	[eax+4], ecx
		mov	dl, [ebx+14h]
		mov	cl, [eax+14h]
		mov	[eax+14h], dl
		mov	[ebx+14h], cl

loc_6B182327:				; CODE XREF: sub_6B1821DC+CEj
					; sub_6B1821DC+EFj
		cmp	byte ptr [ebx+14h], 1
		jnz	loc_6B182434
		jmp	loc_6B1823E8
; ---------------------------------------------------------------------------

loc_6B182336:				; CODE XREF: sub_6B1821DC+215j
		cmp	byte ptr [edi+14h], 1
		jnz	loc_6B182430
		mov	eax, [esi]
		cmp	edi, eax
		jnz	short loc_6B1823B2
		mov	eax, [esi+8]
		cmp	byte ptr [eax+14h], 0
		jnz	short loc_6B182360
		mov	byte ptr [eax+14h], 1
		push	esi
		mov	byte ptr [esi+14h], 0
		call	sub_6B199C0F
		mov	eax, [esi+8]

loc_6B182360:				; CODE XREF: sub_6B1821DC+171j
		cmp	byte ptr [eax+15h], 0
		jnz	short loc_6B1823E3
		mov	ecx, [eax]
		cmp	byte ptr [ecx+14h], 1
		jnz	short loc_6B182377
		mov	ecx, [eax+8]
		cmp	byte ptr [ecx+14h], 1
		jz	short loc_6B1823DF

loc_6B182377:				; CODE XREF: sub_6B1821DC+190j
		mov	ecx, [eax+8]
		cmp	byte ptr [ecx+14h], 1
		jnz	short loc_6B182396
		mov	ecx, [eax]
		mov	byte ptr [ecx+14h], 1
		mov	ecx, [ebp+var_10]
		push	eax
		mov	byte ptr [eax+14h], 0
		call	sub_6B199B63
		mov	eax, [esi+8]

loc_6B182396:				; CODE XREF: sub_6B1821DC+1A2j
		mov	cl, [esi+14h]
		mov	[eax+14h], cl
		mov	ecx, [ebp+var_10]
		mov	byte ptr [esi+14h], 1
		mov	eax, [eax+8]
		push	esi
		mov	byte ptr [eax+14h], 1
		call	sub_6B199C0F
		jmp	short loc_6B182430
; ---------------------------------------------------------------------------

loc_6B1823B2:				; CODE XREF: sub_6B1821DC+168j
		cmp	byte ptr [eax+14h], 0
		jnz	short loc_6B1823C8
		mov	byte ptr [eax+14h], 1
		push	esi
		mov	byte ptr [esi+14h], 0
		call	sub_6B199B63
		mov	eax, [esi]

loc_6B1823C8:				; CODE XREF: sub_6B1821DC+1DAj
		cmp	byte ptr [eax+15h], 0
		jnz	short loc_6B1823E3
		mov	ecx, [eax+8]
		cmp	byte ptr [ecx+14h], 1
		jnz	short loc_6B1823F9
		mov	ecx, [eax]
		cmp	byte ptr [ecx+14h], 1
		jnz	short loc_6B1823F9

loc_6B1823DF:				; CODE XREF: sub_6B1821DC+199j
		mov	byte ptr [eax+14h], 0

loc_6B1823E3:				; CODE XREF: sub_6B1821DC+188j
					; sub_6B1821DC+1F0j
		mov	edi, esi
		mov	esi, [esi+4]

loc_6B1823E8:				; CODE XREF: sub_6B1821DC+155j
		mov	ecx, [ebp+var_10]
		mov	eax, [ecx+4]
		cmp	edi, [eax+4]
		jnz	loc_6B182336
		jmp	short loc_6B182430
; ---------------------------------------------------------------------------

loc_6B1823F9:				; CODE XREF: sub_6B1821DC+1F9j
					; sub_6B1821DC+201j
		mov	ecx, [eax]
		cmp	byte ptr [ecx+14h], 1
		jnz	short loc_6B182417
		mov	ecx, [eax+8]
		mov	byte ptr [ecx+14h], 1
		mov	ecx, [ebp+var_10]
		push	eax
		mov	byte ptr [eax+14h], 0
		call	sub_6B199C0F
		mov	eax, [esi]

loc_6B182417:				; CODE XREF: sub_6B1821DC+223j
		mov	cl, [esi+14h]
		mov	[eax+14h], cl
		mov	ecx, [ebp+var_10]
		mov	byte ptr [esi+14h], 1
		mov	eax, [eax]
		push	esi
		mov	byte ptr [eax+14h], 1
		call	sub_6B199B63

loc_6B182430:				; CODE XREF: sub_6B1821DC+15Ej
					; sub_6B1821DC+1D4j ...
		mov	byte ptr [edi+14h], 1

loc_6B182434:				; CODE XREF: sub_6B1821DC+14Fj
		mov	ecx, [ebx+0Ch]
		sub	ecx, 10h
		call	sub_6B18163D
		push	ebx		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx
		mov	ecx, [ebp+var_10]
		mov	eax, [ecx+8]
		test	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		jbe	short loc_6B182457
		dec	eax
		mov	[ecx+8], eax

loc_6B182457:				; CODE XREF: sub_6B1821DC+275j
		mov	ecx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		leave
		retn	8
sub_6B1821DC	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18246D	proc near		; DATA XREF: .rdata:6B1BAA58o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		call	sub_6B18217F
		mov	dword ptr [esi], offset	off_6B1AA91C
		mov	eax, esi
		pop	esi
		retn	4
sub_6B18246D	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B182485	proc near		; CODE XREF: Ordinal146+12Cp
					; Ordinal296+59p ...

arg_0		= byte ptr  4

		push	esi
		push	edi
		mov	edi, ecx
		mov	eax, [edi]
		mov	cl, [eax]
		xor	esi, esi
		test	cl, cl
		jz	short loc_6B1824BF

loc_6B182493:				; CODE XREF: sub_6B182485+2Aj
		cmp	cl, [esp+8+arg_0]
		jnz	short loc_6B1824A1
		test	esi, esi
		jnz	short loc_6B1824A3
		mov	esi, eax
		jmp	short loc_6B1824A3
; ---------------------------------------------------------------------------

loc_6B1824A1:				; CODE XREF: sub_6B182485+12j
		xor	esi, esi

loc_6B1824A3:				; CODE XREF: sub_6B182485+16j
					; sub_6B182485+1Aj
		push	eax		; unsigned __int8 *
		call	ds:_mbsinc
		pop	ecx
		mov	cl, [eax]
		test	cl, cl
		jnz	short loc_6B182493
		test	esi, esi
		jz	short loc_6B1824BF
		sub	esi, [edi]
		mov	ecx, edi
		push	esi
		call	sub_6B181FD8

loc_6B1824BF:				; CODE XREF: sub_6B182485+Cj
					; sub_6B182485+2Ej
		mov	eax, edi
		pop	edi
		pop	esi
		retn	4
sub_6B182485	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6B1824C6(int,	char *Format, char Args)
sub_6B1824C6	proc near		; CODE XREF: Ordinal146+146p
					; Ordinal907+106p ...

arg_0		= dword	ptr  4
Format		= dword	ptr  8
Args		= byte ptr  0Ch

		mov	ecx, [esp+arg_0]
		lea	eax, [esp+Args]
		push	eax		; Args
		push	[esp+4+Format]	; Format
		call	sub_6B181F44
		retn
sub_6B1824C6	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1824D9	proc near		; CODE XREF: sub_6B18281C+2Cp

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		xor	al, al
		test	edx, edx
		jz	short locret_6B1824F6
		test	edx, 0FFFF0000h
		jnz	short locret_6B1824F6
		movzx	eax, dx
		push	eax
		call	sub_6B181FF3
		mov	al, 1

locret_6B1824F6:			; CODE XREF: sub_6B1824D9+8j
					; sub_6B1824D9+10j
		retn	4
sub_6B1824D9	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6B1824F9(void *)
sub_6B1824F9	proc near		; CODE XREF: sub_6B1824F9+16p
					; sub_6B18286C+Cp

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		cmp	byte ptr [edi+15h], 0
		mov	ebx, ecx
		mov	esi, edi
		jnz	short loc_6B18252C

loc_6B18250A:				; CODE XREF: sub_6B1824F9+31j
		push	dword ptr [esi+8] ; void *
		mov	ecx, ebx
		call	sub_6B1824F9
		mov	esi, [esi]
		mov	ecx, edi
		call	sub_6B181869
		push	edi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		cmp	byte ptr [esi+15h], 0
		pop	ecx
		mov	edi, esi
		jz	short loc_6B18250A

loc_6B18252C:				; CODE XREF: sub_6B1824F9+Fj
		pop	edi
		pop	esi
		pop	ebx
		retn	4
sub_6B1824F9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B182532	proc near		; CODE XREF: sub_6B182892+11Ep

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		mov	eax, [edi+4]
		mov	esi, [eax+4]
		mov	ebx, eax
		mov	al, 1
		mov	byte ptr [ebp+var_8], al
		jmp	short loc_6B182569
; ---------------------------------------------------------------------------

loc_6B18254B:				; CODE XREF: sub_6B182532+3Bj
		lea	eax, [esi+0Ch]
		push	eax
		push	[ebp+arg_4]
		mov	ebx, esi
		call	sub_6B1817BD
		test	al, al
		pop	ecx
		pop	ecx
		mov	byte ptr [ebp+var_8], al
		jz	short loc_6B182566
		mov	esi, [esi]
		jmp	short loc_6B182569
; ---------------------------------------------------------------------------

loc_6B182566:				; CODE XREF: sub_6B182532+2Ej
		mov	esi, [esi+8]

loc_6B182569:				; CODE XREF: sub_6B182532+17j
					; sub_6B182532+32j
		cmp	byte ptr [esi+15h], 0
		jz	short loc_6B18254B
		test	al, al
		mov	esi, ebx
		mov	[ebp+var_4], esi
		jz	short loc_6B1825A8
		mov	eax, [edi+4]
		cmp	ebx, [eax]
		jnz	short loc_6B18259D
		push	[ebp+arg_4]
		push	ebx
		push	1

loc_6B182585:				; CODE XREF: sub_6B182532+8Fj
		lea	eax, [ebp+arg_4]
		push	eax
		mov	ecx, edi
		call	sub_6B182017
		mov	ecx, [eax]
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx
		mov	byte ptr [eax+4], 1
		jmp	short loc_6B1825CC
; ---------------------------------------------------------------------------

loc_6B18259D:				; CODE XREF: sub_6B182532+4Bj
		lea	ecx, [ebp+var_4]
		call	sub_6B1815FE
		mov	esi, [ebp+var_4]

loc_6B1825A8:				; CODE XREF: sub_6B182532+44j
		push	[ebp+arg_4]
		lea	eax, [esi+0Ch]
		push	eax
		call	sub_6B1817BD
		test	al, al
		pop	ecx
		pop	ecx
		jz	short loc_6B1825C3
		push	[ebp+arg_4]
		push	ebx
		push	[ebp+var_8]
		jmp	short loc_6B182585
; ---------------------------------------------------------------------------

loc_6B1825C3:				; CODE XREF: sub_6B182532+86j
		mov	eax, [ebp+arg_0]
		mov	[eax], esi
		mov	byte ptr [eax+4], 0

loc_6B1825CC:				; CODE XREF: sub_6B182532+69j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
sub_6B182532	endp

; Exported entry 146.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal146
Ordinal146	proc near		; CODE XREF: Ordinal134+1Cp
					; DATA XREF: .rdata:off_6B1BF428o

var_94		= byte ptr -94h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_22 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 88h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		xor	ebx, ebx
		cmp	edi, ebx
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	esi, ecx
		jnz	short loc_6B182603
		xor	eax, eax
		jmp	loc_6B182803
; ---------------------------------------------------------------------------

loc_6B182603:				; CODE XREF: Ordinal146+27j
		push	dword ptr [esi+40h]
		mov	ecx, edi
		push	2
		call	Ordinal909
		push	dword ptr [esi+44h]
		mov	ecx, edi
		push	2
		call	Ordinal911
		push	dword ptr [esi+48h]
		mov	ecx, edi
		call	Ordinal913
		push	dword ptr [esi+4Ch]
		mov	ecx, edi
		push	3
		call	Ordinal909
		push	dword ptr [esi+50h]
		mov	ecx, edi
		push	3
		call	Ordinal911
		push	dword ptr [esi+54h]
		mov	ecx, edi
		push	4
		call	Ordinal909
		push	dword ptr [esi+58h]
		mov	ecx, edi
		push	4
		call	Ordinal911
		push	dword ptr [esi+5Ch]
		mov	ecx, edi
		push	5
		call	Ordinal909
		push	dword ptr [esi+60h]
		mov	ecx, edi
		push	5
		call	Ordinal911
		push	dword ptr [esi+6Ch]
		mov	ecx, edi
		call	Ordinal917
		push	dword ptr [esi+70h]
		mov	ecx, edi
		call	Ordinal919
		push	dword ptr [esi+68h]
		mov	ecx, edi
		call	Ordinal921
		lea	ecx, [ebp+var_28]
		call	sub_6B181879
		add	esi, 64h
		mov	eax, [esi]
		cmp	[eax-0Ch], ebx
		mov	[ebp+var_4], ebx
		jz	loc_6B1827EA
		lea	ecx, [ebp+var_94]
		call	Ordinal1487
		push	ebx		; Args
		lea	ecx, [ebp+var_94]
		mov	byte ptr [ebp+var_4], 1
		call	Ordinal1489
		test	al, al
		jnz	short loc_6B1826E0
		push	offset aCdebugoptionsA ; "CDebugOptions::Apply() : path.SplitPath"...
		call	sub_6B18102E
		pop	ecx

loc_6B1826CE:				; CODE XREF: Ordinal146+202j
		lea	ecx, [ebp+var_94]
		call	Ordinal1488
		xor	esi, esi
		jmp	loc_6B1827F6
; ---------------------------------------------------------------------------

loc_6B1826E0:				; CODE XREF: Ordinal146+EEj
		push	offset aCdebugoption_3 ; "CDebugOptions::Apply()"
		lea	ecx, [ebp+var_48]
		call	Ordinal1089
		push	esi
		lea	ecx, [ebp+var_28]
		mov	byte ptr [ebp+var_4], 3
		call	sub_6B181F8B
		push	5Ch
		lea	ecx, [ebp+var_28]
		call	sub_6B182485
		lea	ecx, [ebp+var_94]
		call	Ordinal1010
		push	eax		; Args
		lea	eax, [ebp+var_28]
		push	offset aS_dmp	; "\\%s.dmp"
		push	eax		; int
		call	sub_6B1824C6
		add	esp, 0Ch
		jmp	loc_6B1827C1
; ---------------------------------------------------------------------------

loc_6B182726:				; DATA XREF: .rdata:6B1BAAD4o
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1827BE
		retn
; ---------------------------------------------------------------------------

loc_6B182769:				; DATA XREF: .rdata:6B1BAAE4o
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	eax, [ebp+var_4C]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1827BE
		retn
; ---------------------------------------------------------------------------

loc_6B1827BE:				; DATA XREF: Ordinal146+190o
					; Ordinal146+1E5o
		mov	edi, [ebp+arg_0]

loc_6B1827C1:				; CODE XREF: Ordinal146+14Ej
		lea	ecx, [ebp+var_48]
		call	Ordinal1635
		test	eax, eax
		lea	ecx, [ebp+var_48]
		jz	short loc_6B1827DA
		call	Ordinal1090
		jmp	loc_6B1826CE
; ---------------------------------------------------------------------------

loc_6B1827DA:				; CODE XREF: Ordinal146+1FBj
		call	Ordinal1090
		lea	ecx, [ebp+var_94]
		call	Ordinal1488

loc_6B1827EA:				; CODE XREF: Ordinal146+CBj
		push	[ebp+var_28]	; Src
		mov	ecx, edi
		call	Ordinal915
		mov	esi, eax

loc_6B1827F6:				; CODE XREF: Ordinal146+108j
		mov	ecx, [ebp+var_28]
		add	ecx, 0FFFFFFF0h
		call	sub_6B18163D
		mov	eax, esi

loc_6B182803:				; CODE XREF: Ordinal146+2Bj
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal146	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6B18281C(char *Src)
sub_6B18281C	proc near		; CODE XREF: Ordinal142+3A5p
					; Ordinal794+36p ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8

		mov	eax, offset unknown_libname_23 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		mov	eax, dword_6B1C1390
		push	esi
		mov	esi, ecx
		mov	ecx, offset dword_6B1C1390
		mov	[ebp+var_10], esi
		call	dword ptr [eax+0Ch]
		add	eax, 10h
		mov	[esi], eax
		push	[ebp+Src]
		and	[ebp+var_4], 0
		mov	ecx, esi
		call	sub_6B1824D9
		test	al, al
		jnz	short loc_6B18285B
		push	[ebp+Src]	; Src
		mov	ecx, esi
		call	sub_6B181EA9

loc_6B18285B:				; CODE XREF: sub_6B18281C+33j
		mov	ecx, [ebp+var_C]
		mov	eax, esi
		pop	esi
		mov	large fs:0, ecx
		leave
		retn	4
sub_6B18281C	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18286C	proc near		; CODE XREF: sub_6B1829C3+18p
					; Ordinal143+63p ...
		push	esi
		push	edi
		mov	edi, ecx
		lea	esi, [edi+4]
		mov	eax, [esi]
		push	dword ptr [eax+4] ; void *
		call	sub_6B1824F9
		mov	eax, [esi]
		mov	[eax+4], eax
		mov	eax, [esi]
		and	dword ptr [edi+8], 0
		mov	[eax], eax
		mov	esi, [esi]
		pop	edi
		mov	[esi+8], esi
		pop	esi
		retn
sub_6B18286C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B182892	proc near		; CODE XREF: sub_6B182A85+4Fp

var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	edi
		mov	edi, ecx
		cmp	dword ptr [edi+8], 0
		jnz	short loc_6B1828B8
		push	[ebp+arg_8]
		push	dword ptr [edi+4]
		push	1
		push	[ebp+arg_0]
		call	sub_6B182017
		mov	eax, [ebp+arg_0]
		jmp	loc_6B1829BE
; ---------------------------------------------------------------------------

loc_6B1828B8:				; CODE XREF: sub_6B182892+Cj
		mov	eax, [edi+4]
		push	ebx
		mov	ebx, [ebp+arg_8]
		push	esi
		mov	esi, [ebp+arg_4]
		cmp	esi, [eax]
		jnz	short loc_6B1828E4
		lea	eax, [esi+0Ch]
		push	eax
		push	ebx
		call	sub_6B1817BD
		test	al, al
		pop	ecx
		pop	ecx
		jz	loc_6B1829A9
		push	ebx
		push	esi
		mov	ecx, edi
		jmp	loc_6B18299A
; ---------------------------------------------------------------------------

loc_6B1828E4:				; CODE XREF: sub_6B182892+33j
		cmp	esi, eax
		jnz	short loc_6B18290F
		mov	eax, [eax+8]
		add	eax, 0Ch
		push	ebx
		push	eax
		call	sub_6B1817BD
		test	al, al
		pop	ecx
		pop	ecx
		jz	loc_6B1829A9
		mov	eax, [edi+4]
		push	ebx
		push	dword ptr [eax+8]
		mov	ecx, edi
		push	0
		jmp	loc_6B18299C
; ---------------------------------------------------------------------------

loc_6B18290F:				; CODE XREF: sub_6B182892+54j
		lea	eax, [esi+0Ch]
		push	eax
		push	ebx
		call	sub_6B1817BD
		test	al, al
		pop	ecx
		pop	ecx
		jz	short loc_6B182954
		lea	ecx, [ebp+arg_8]
		mov	[ebp+arg_8], esi
		call	sub_6B1815FE
		mov	eax, [ebp+arg_8]
		add	eax, 0Ch
		push	ebx
		push	eax
		call	sub_6B1817BD
		test	al, al
		pop	ecx
		pop	ecx
		jz	short loc_6B182954
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax+8]
		cmp	byte ptr [ecx+15h], 0
		push	ebx
		mov	ecx, edi
		jz	short loc_6B182951
		push	eax

loc_6B18294D:				; CODE XREF: sub_6B182892+105j
		push	0
		jmp	short loc_6B18299C
; ---------------------------------------------------------------------------

loc_6B182951:				; CODE XREF: sub_6B182892+B8j
		push	esi
		jmp	short loc_6B18299A
; ---------------------------------------------------------------------------

loc_6B182954:				; CODE XREF: sub_6B182892+8Bj
					; sub_6B182892+A9j
		lea	eax, [esi+0Ch]
		push	ebx
		push	eax
		call	sub_6B1817BD
		test	al, al
		pop	ecx
		pop	ecx
		jz	short loc_6B1829A9
		lea	ecx, [ebp+arg_8]
		mov	[ebp+arg_8], esi
		call	sub_6B199BA7
		mov	eax, [ebp+arg_8]
		cmp	eax, [edi+4]
		jz	short loc_6B18298A
		add	eax, 0Ch
		push	eax
		push	ebx
		call	sub_6B1817BD
		test	al, al
		pop	ecx
		pop	ecx
		jz	short loc_6B1829A9
		mov	eax, [ebp+arg_8]

loc_6B18298A:				; CODE XREF: sub_6B182892+E3j
		mov	ecx, [esi+8]
		cmp	byte ptr [ecx+15h], 0
		push	ebx
		mov	ecx, edi
		jz	short loc_6B182999
		push	esi
		jmp	short loc_6B18294D
; ---------------------------------------------------------------------------

loc_6B182999:				; CODE XREF: sub_6B182892+102j
		push	eax

loc_6B18299A:				; CODE XREF: sub_6B182892+4Dj
					; sub_6B182892+C0j
		push	1

loc_6B18299C:				; CODE XREF: sub_6B182892+78j
					; sub_6B182892+BDj
		push	[ebp+arg_0]
		call	sub_6B182017
		mov	eax, [ebp+arg_0]
		jmp	short loc_6B1829BC
; ---------------------------------------------------------------------------

loc_6B1829A9:				; CODE XREF: sub_6B182892+43j
					; sub_6B182892+67j ...
		push	ebx
		lea	eax, [ebp+var_8]
		push	eax
		mov	ecx, edi
		call	sub_6B182532
		mov	ecx, [eax]
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx

loc_6B1829BC:				; CODE XREF: sub_6B182892+115j
		pop	esi
		pop	ebx

loc_6B1829BE:				; CODE XREF: sub_6B182892+21j
		pop	edi
		leave
		retn	0Ch
sub_6B182892	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6B1829C3(int, void *, int)
sub_6B1829C3	proc near		; CODE XREF: sub_6B182AF9+12p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [eax]
		jnz	short loc_6B1829E7
		cmp	[ebp+arg_8], eax
		jnz	short loc_6B1829E7
		mov	ecx, esi
		call	sub_6B18286C
		mov	eax, [esi+4]
		mov	ecx, [eax]
		jmp	short loc_6B182A0C
; ---------------------------------------------------------------------------

loc_6B1829E7:				; CODE XREF: sub_6B1829C3+Fj
					; sub_6B1829C3+14j
		cmp	ecx, [ebp+arg_8]
		jz	short loc_6B182A0C
		push	edi

loc_6B1829ED:				; CODE XREF: sub_6B1829C3+46j
		mov	edi, ecx
		lea	ecx, [ebp+arg_4]
		call	sub_6B199BA7
		push	edi		; void *
		lea	eax, [ebp+var_4]
		push	eax		; int
		mov	ecx, esi
		call	sub_6B1821DC
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [ebp+arg_8]
		jnz	short loc_6B1829ED
		pop	edi

loc_6B182A0C:				; CODE XREF: sub_6B1829C3+22j
					; sub_6B1829C3+27j
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx
		pop	esi
		leave
		retn	0Ch
sub_6B1829C3	endp

; Exported entry 143.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal143
Ordinal143	proc near		; CODE XREF: Ordinal142+26p
					; Ordinal135+1Bp
					; DATA XREF: ...
		push	ebx
		push	esi
		mov	esi, ecx
		push	edi
		lea	ecx, [esi+64h]
		call	sub_6B18175E
		xor	ebx, ebx
		xor	edi, edi
		inc	edi
		lea	ecx, [esi+8]
		mov	[esi+44h], ebx
		mov	[esi+48h], edi
		mov	[esi+50h], ebx
		mov	[esi+58h], ebx
		mov	[esi+60h], ebx
		mov	dword ptr [esi+68h], 22h
		mov	[esi+6Ch], edi
		mov	[esi+70h], edi
		mov	[esi+40h], ebx
		mov	[esi+4Ch], ebx
		mov	[esi+54h], ebx
		mov	[esi+5Ch], ebx
		call	sub_6B18175E
		lea	ecx, [esi+34h]
		mov	[esi+0Ch], edi
		mov	[esi+10h], ebx
		mov	[esi+14h], edi
		mov	[esi+18h], edi
		mov	[esi+1Ch], edi
		mov	[esi+20h], edi
		mov	[esi+24h], edi
		mov	[esi+28h], edi
		mov	[esi+2Ch], edi
		mov	[esi+30h], ebx
		call	sub_6B18286C
		pop	edi
		mov	[esi+4], ebx
		pop	esi
		pop	ebx
		retn
Ordinal143	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B182A85	proc near		; CODE XREF: Ordinal142+3B8p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_24 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	ecx
		push	esi
		push	edi
		push	[ebp+arg_0]
		mov	edi, ecx
		call	sub_6B181892
		mov	esi, eax
		cmp	esi, [edi+4]
		jz	short loc_6B182AB6
		lea	eax, [esi+0Ch]
		push	eax
		push	[ebp+arg_0]
		call	sub_6B1817BD
		test	al, al
		pop	ecx
		pop	ecx
		jz	short loc_6B182AE6

loc_6B182AB6:				; CODE XREF: sub_6B182A85+1Dj
		push	[ebp+arg_0]
		lea	ecx, [ebp+var_14]
		call	sub_6B1816B1
		and	[ebp+var_10], 0
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_14]
		push	eax
		push	esi
		lea	eax, [ebp+arg_0]
		push	eax
		mov	ecx, edi
		call	sub_6B182892
		mov	ecx, [ebp+var_14]
		mov	esi, [eax]
		add	ecx, 0FFFFFFF0h
		call	sub_6B18163D

loc_6B182AE6:				; CODE XREF: sub_6B182A85+2Fj
		mov	ecx, [ebp+var_C]
		pop	edi
		lea	eax, [esi+10h]
		pop	esi
		mov	large fs:0, ecx
		leave
		retn	4
sub_6B182A85	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B182AF9	proc near		; CODE XREF: Ordinal139+18p

var_4		= dword	ptr -4

		push	ecx
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		mov	ecx, [eax]
		push	eax		; int
		push	ecx		; void *
		lea	eax, [esp+10h+var_4]
		push	eax		; int
		mov	ecx, esi
		call	sub_6B1829C3
		push	dword ptr [esi+4] ; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		and	dword ptr [esi+4], 0
		and	dword ptr [esi+8], 0
		pop	ecx
		pop	esi
		pop	ecx
		retn
sub_6B182AF9	endp

; Exported entry 142.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal142(DWORD Args)
		public Ordinal142
Ordinal142	proc near		; CODE XREF: Ordinal141+5p
					; DATA XREF: .rdata:off_6B1BF428o

var_180		= dword	ptr -180h
var_17C		= dword	ptr -17Ch
var_178		= byte ptr -178h
cchValueName	= dword	ptr -158h
var_154		= dword	ptr -154h
var_150		= byte ptr -150h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= byte ptr -134h
ValueName	= byte ptr -128h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
dwIndex		= byte ptr  8

		mov	eax, offset unknown_libname_25 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 174h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_154], esi
		call	Ordinal143
		lea	ecx, [ebp+var_138]
		call	sub_6B181879
		and	[ebp+var_4], 0
		lea	ecx, [ebp+var_13C]
		call	sub_6B181879
		lea	eax, [ebp+var_13C]
		push	eax		; int
		lea	eax, [ebp+var_138]
		push	eax		; int
		push	dword ptr [ebp+dwIndex]	; Args
		mov	byte ptr [ebp+var_4], 1
		call	Ordinal148
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_6B182B9C
		push	offset aCdebugoptionsL ; "CDebugOptions::Load()	: BuildRegPath() "...
		call	sub_6B18102E
		pop	ecx
		xor	esi, esi
		jmp	loc_6B183007
; ---------------------------------------------------------------------------

loc_6B182B9C:				; CODE XREF: Ordinal142+64j
		lea	ecx, [ebp+var_134]
		call	Ordinal1316
		push	0		; int
		mov	edi, 20019h
		push	edi		; samDesired
		push	[ebp+var_138]	; Args
		mov	ebx, 80000002h
		push	ebx		; hKey
		lea	ecx, [ebp+var_134]
		mov	byte ptr [ebp+var_4], 2
		call	Ordinal1321
		test	eax, eax
		jz	loc_6B182CD6
		lea	eax, [esi+40h]
		push	eax		; int
		push	offset aDumponnew ; "DumpOnNew"
		lea	ecx, [ebp+var_134]
		call	Ordinal1339
		lea	eax, [esi+44h]
		push	eax		; int
		push	offset aTerminateonnew ; "TerminateOnNew"
		lea	ecx, [ebp+var_134]
		call	Ordinal1339
		lea	eax, [esi+48h]
		push	eax		; int
		push	offset aThrowonnew ; "ThrowOnNew"
		lea	ecx, [ebp+var_134]
		call	Ordinal1339
		lea	eax, [esi+4Ch]
		push	eax		; int
		push	offset aDumponexceptio ; "DumpOnException"
		lea	ecx, [ebp+var_134]
		call	Ordinal1339
		lea	eax, [esi+50h]
		push	eax		; int
		push	offset aTerminateonexc ; "TerminateOnException"
		lea	ecx, [ebp+var_134]
		call	Ordinal1339
		lea	eax, [esi+54h]
		push	eax		; int
		push	offset aDumponpurecall ; "DumpOnPurecall"
		lea	ecx, [ebp+var_134]
		call	Ordinal1339
		lea	eax, [esi+58h]
		push	eax		; int
		push	offset aTerminateonpur ; "TerminateOnPurecall"
		lea	ecx, [ebp+var_134]
		call	Ordinal1339
		lea	eax, [esi+5Ch]
		push	eax		; int
		push	offset aDumponsecurity ; "DumpOnSecurity"
		lea	ecx, [ebp+var_134]
		call	Ordinal1339
		lea	eax, [esi+60h]
		push	eax		; int
		push	offset aTerminateonsec ; "TerminateOnSecurity"
		lea	ecx, [ebp+var_134]
		call	Ordinal1339
		lea	eax, [esi+64h]
		push	eax		; int
		push	offset aDirectory ; "Directory"
		lea	ecx, [ebp+var_134]
		call	Ordinal1332
		lea	eax, [esi+68h]
		push	eax		; lpData
		push	offset aDumptype ; "DumpType"
		lea	ecx, [ebp+var_134]
		call	Ordinal1337
		lea	eax, [esi+6Ch]
		push	eax		; int
		push	offset aAppenddatetime ; "AppendDateTimeToFile"
		lea	ecx, [ebp+var_134]
		call	Ordinal1339
		lea	eax, [esi+70h]
		push	eax		; int
		push	offset aAppendversiont ; "AppendVersionToFile"
		lea	ecx, [ebp+var_134]
		call	Ordinal1339

loc_6B182CD6:				; CODE XREF: Ordinal142+A8j
		push	0		; int
		push	edi		; samDesired
		push	[ebp+var_13C]	; Args
		lea	ecx, [ebp+var_134]
		push	ebx		; hKey
		call	Ordinal1321
		test	eax, eax
		jz	loc_6B182FF9
		lea	eax, [esi+4]
		push	eax		; lpData
		push	offset aDebugtype ; "DebugType"
		lea	ecx, [ebp+var_134]
		call	Ordinal1337
		lea	eax, [esi+8]
		push	eax		; int
		push	offset aDirectory ; "Directory"
		lea	ecx, [ebp+var_134]
		call	Ordinal1332
		lea	eax, [esi+0Ch]
		push	eax		; int
		push	offset aOutputtodebugg ; "OutputToDebugger"
		lea	ecx, [ebp+var_134]
		call	Ordinal1339
		lea	eax, [esi+10h]
		push	eax		; int
		push	offset aOutputtofile ; "OutputToFile"
		lea	ecx, [ebp+var_134]
		call	Ordinal1339
		lea	eax, [esi+14h]
		push	eax		; int
		push	offset aAppendprocessi ; "AppendProcessIdToFile"
		lea	ecx, [ebp+var_134]
		call	Ordinal1339
		lea	eax, [esi+18h]
		push	eax		; int
		push	offset aPrependthreadi ; "PrependThreadId"
		lea	ecx, [ebp+var_134]
		call	Ordinal1339
		lea	eax, [esi+1Ch]
		push	eax		; int
		push	offset aPrependprocess ; "PrependProcessId"
		lea	ecx, [ebp+var_134]
		call	Ordinal1339
		lea	eax, [esi+20h]
		push	eax		; int
		push	offset aPrependdatetim ; "PrependDateTime"
		lea	ecx, [ebp+var_134]
		call	Ordinal1339
		lea	eax, [esi+24h]
		push	eax		; int
		push	offset aPrependmodulen ; "PrependModuleName"
		lea	ecx, [ebp+var_134]
		call	Ordinal1339
		lea	eax, [esi+28h]
		push	eax		; int
		push	offset aAppendnewline ;	"AppendNewLine"
		lea	ecx, [ebp+var_134]
		call	Ordinal1339
		lea	eax, [esi+2Ch]
		push	eax		; int
		push	offset aPrependtype ; "PrependType"
		lea	ecx, [ebp+var_134]
		call	Ordinal1339
		lea	eax, [esi+30h]
		push	eax		; int
		push	offset aExclusivemodul ; "ExclusiveModules"
		lea	ecx, [ebp+var_134]
		call	Ordinal1339
		lea	ecx, [ebp+var_150]
		call	Ordinal1316
		xor	ebx, ebx
		push	ebx		; int
		push	edi		; samDesired
		push	offset pszSubKey ; "Modules"
		lea	ecx, [ebp+var_134]
		mov	byte ptr [ebp+var_4], 3
		call	Ordinal1649
		push	eax		; hKey
		lea	ecx, [ebp+var_150]
		call	Ordinal1321
		test	eax, eax
		jz	loc_6B182FEE
		lea	ecx, [esi+34h]
		call	sub_6B18286C
		mov	dword ptr [ebp+dwIndex], ebx
		mov	[ebp+var_144], ebx

loc_6B182E2B:				; CODE XREF: Ordinal142+4C5j
		push	ebx		; lpcbData
		push	ebx		; lpData
		push	ebx		; lpType
		push	ebx		; lpReserved
		lea	eax, [ebp+cchValueName]
		push	eax		; lpcchValueName
		lea	eax, [ebp+ValueName]
		push	eax		; lpValueName
		push	dword ptr [ebp+dwIndex]	; dwIndex
		lea	ecx, [ebp+var_150]
		mov	[ebp+cchValueName], 104h
		call	Ordinal1345
		cmp	eax, ebx
		jz	short loc_6B182E81
		cmp	eax, 103h
		jz	loc_6B182FEE
		push	offset aCdebugoption_4 ; "CDebugOptions::Load()	: mapReg.EnumValu"...

loc_6B182E69:				; CODE XREF: Ordinal142+382j
		call	sub_6B18102E
		pop	ecx

loc_6B182E6F:				; CODE XREF: Ordinal142+4B7j
		lea	ecx, [ebp+var_150]
		call	Ordinal1318
		xor	esi, esi
		jmp	loc_6B182FFC
; ---------------------------------------------------------------------------

loc_6B182E81:				; CODE XREF: Ordinal142+333j
		inc	dword ptr [ebp+dwIndex]
		lea	eax, [ebp+var_144]
		push	eax		; int
		lea	eax, [ebp+ValueName]
		push	eax		; lpValueName
		lea	ecx, [ebp+var_150]
		call	Ordinal1339
		test	eax, eax
		jnz	short loc_6B182EA8
		push	offset aCdebugoption_5 ; "CDebugOptions::Load()	: mapReg.GetNumbe"...
		jmp	short loc_6B182E69
; ---------------------------------------------------------------------------

loc_6B182EA8:				; CODE XREF: Ordinal142+37Bj
		push	offset aCdebugoption_6 ; "CDebugOptions::Load()"
		lea	ecx, [ebp+var_178]
		call	Ordinal1089
		lea	eax, [ebp+ValueName]
		push	eax		; Src
		lea	ecx, [ebp+var_140]
		mov	byte ptr [ebp+var_4], 5
		call	sub_6B18281C
		lea	eax, [ebp+var_140]
		push	eax
		lea	ecx, [esi+34h]
		mov	byte ptr [ebp+var_4], 6
		call	sub_6B182A85
		mov	ecx, [ebp+var_144]
		mov	[eax], ecx
		mov	ecx, [ebp+var_140]
		add	ecx, 0FFFFFFF0h
		call	sub_6B18163D
		jmp	loc_6B182FBA
; ---------------------------------------------------------------------------

loc_6B182EFC:				; DATA XREF: .rdata:6B1BABACo
		push	13h
		lea	ecx, [ebp+var_178]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_178]
		call	Ordinal1101
		mov	ecx, [ebp+var_17C]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_178]
		call	Ordinal1103
		lea	ecx, [ebp+var_178]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B182FB2
		retn
; ---------------------------------------------------------------------------

loc_6B182F4E:				; DATA XREF: .rdata:6B1BABBCo
		push	15h
		lea	ecx, [ebp+var_178]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_178]
		call	Ordinal1101
		mov	eax, [ebp+var_180]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_178]
		call	Ordinal1103
		lea	ecx, [ebp+var_178]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B182FB2
		retn
; ---------------------------------------------------------------------------

loc_6B182FB2:				; DATA XREF: Ordinal142+424o
					; Ordinal142+488o
		mov	esi, [ebp+var_154]
		xor	ebx, ebx

loc_6B182FBA:				; CODE XREF: Ordinal142+3D3j
		lea	ecx, [ebp+var_178]
		mov	[ebp+var_4], 4
		call	Ordinal1635
		test	eax, eax
		lea	ecx, [ebp+var_178]
		jz	short loc_6B182FE0
		call	Ordinal1090
		jmp	loc_6B182E6F
; ---------------------------------------------------------------------------

loc_6B182FE0:				; CODE XREF: Ordinal142+4B0j
		mov	byte ptr [ebp+var_4], 3
		call	Ordinal1090
		jmp	loc_6B182E2B
; ---------------------------------------------------------------------------

loc_6B182FEE:				; CODE XREF: Ordinal142+2F0j
					; Ordinal142+33Aj
		lea	ecx, [ebp+var_150]
		call	Ordinal1318

loc_6B182FF9:				; CODE XREF: Ordinal142+1C9j
		xor	esi, esi
		inc	esi

loc_6B182FFC:				; CODE XREF: Ordinal142+358j
		lea	ecx, [ebp+var_134]
		call	Ordinal1318

loc_6B183007:				; CODE XREF: Ordinal142+73j
		mov	ecx, [ebp+var_13C]
		add	ecx, 0FFFFFFF0h
		call	sub_6B18163D
		mov	ecx, [ebp+var_138]
		add	ecx, 0FFFFFFF0h
		call	sub_6B18163D
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal142	endp ; sp-analysis failed

; Exported entry 141.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal141
Ordinal141	proc near		; CODE XREF: Ordinal133+26p
					; Ordinal153+2Cp
					; DATA XREF: ...
		push	offset aSoftwareSyma_0 ; "Software\\Symantec\\Common Client\\Debug"
		call	Ordinal142
		retn
Ordinal141	endp

; Exported entry 136.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal136
Ordinal136	proc near		; CODE XREF: Ordinal135+Cp
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_26 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+4]
		mov	[ebp+var_10], esi
		call	sub_6B181879
		and	[ebp+var_4], 0
		lea	ecx, [esi+30h]
		call	sub_6B19A014
		mov	ecx, [ebp+var_C]
		mov	eax, esi
		pop	esi
		mov	large fs:0, ecx
		leave
		retn
Ordinal136	endp

; Exported entry 139.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal139
Ordinal139	proc near		; CODE XREF: Ordinal138+15j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_26 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	esi
		mov	esi, ecx
		mov	[ebp+var_10], esi
		and	[ebp+var_4], 0
		lea	ecx, [esi+30h]
		call	sub_6B182AF9
		mov	ecx, [esi+4]
		sub	ecx, 10h
		call	sub_6B18163D
		mov	ecx, [ebp+var_C]
		pop	esi
		mov	large fs:0, ecx
		leave
		retn
Ordinal139	endp

; Exported entry 138.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal138
Ordinal138	proc near		; CODE XREF: Ordinal133+6Cp
					; sub_6B1830F0+3p ...
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+40h]
		mov	dword ptr [esi], offset	off_6B1AABBC
		call	Ordinal140
		lea	ecx, [esi+4]
		pop	esi
		jmp	Ordinal139
Ordinal138	endp

; Exported entry 135.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal135
Ordinal135	proc near		; CODE XREF: Ordinal133+1Ep
					; Ordinal153+24p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+4]
		mov	dword ptr [esi], offset	off_6B1AABBC
		call	Ordinal136
		lea	ecx, [esi+40h]
		call	Ordinal137
		mov	ecx, esi
		call	Ordinal143
		mov	eax, esi
		pop	esi
		retn
Ordinal135	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1830F0(void *, char)
sub_6B1830F0	proc near		; DATA XREF: .rdata:off_6B1AABBCo

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal138
		test	[esp+4+arg_0], 1
		jz	short loc_6B183106
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B183106:				; CODE XREF: sub_6B1830F0+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1830F0	endp

; Exported entry 149.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal149(char	*Src)
		public Ordinal149
Ordinal149	proc near		; CODE XREF: sub_6B1A9B73+Ap
					; DATA XREF: .rdata:off_6B1BF428o

Src		= dword	ptr  4

		push	esi
		push	[esp+4+Src]	; Src
		mov	esi, ecx
		call	Ordinal983
		mov	dword ptr [esi], offset	off_6B1AABC0
		mov	eax, esi
		pop	esi
		retn	4
Ordinal149	endp

; Exported entry 150.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal150
Ordinal150	proc near		; CODE XREF: sub_6B1831FA+3p
					; sub_6B1A9BF2+5j
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6B1AABC0
		jmp	Ordinal984
Ordinal150	endp

; Exported entry 151.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal151
Ordinal151	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	Ordinal1023
		test	eax, eax
		jnz	short loc_6B18313D
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6B18313D:				; CODE XREF: Ordinal151+Aj
		mov	eax, [esi]
		and	dword ptr [esi+54h], 0
		push	edi
		mov	ecx, esi
		call	dword ptr [eax+8]
		mov	ecx, esi
		mov	edi, eax
		call	Ordinal1024
		mov	eax, edi
		pop	edi
		pop	esi
		retn
Ordinal151	endp

; Exported entry 152.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal152
Ordinal152	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	edi
		mov	edi, ecx
		call	Ordinal1023
		test	eax, eax
		jz	short loc_6B18318E
		mov	ecx, [esp+4+arg_0]
		push	esi
		xor	esi, esi
		push	edi
		inc	esi
		call	Ordinal147
		test	eax, eax
		jnz	short loc_6B183177
		xor	esi, esi

loc_6B183177:				; CODE XREF: Ordinal152+1Cj
		mov	ecx, edi
		call	Ordinal994
		test	eax, eax
		jnz	short loc_6B183184
		xor	esi, esi

loc_6B183184:				; CODE XREF: Ordinal152+29j
		mov	ecx, edi
		call	Ordinal1024
		mov	eax, esi
		pop	esi

loc_6B18318E:				; CODE XREF: Ordinal152+Aj
		pop	edi
		retn	4
Ordinal152	endp

; Exported entry 153.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal153
Ordinal153	proc near		; DATA XREF: .rdata:6B1AABC8o
					; .rdata:off_6B1BF428o

var_74		= byte ptr -74h

		push	ebp
		mov	ebp, esp
		sub	esp, 74h
		push	esi
		mov	esi, ecx
		call	Ordinal1023
		test	eax, eax
		jz	short loc_6B1831F7
		xor	eax, eax
		inc	eax
		cmp	dword ptr [esi+54h], 0
		push	edi
		mov	edi, eax
		jnz	short loc_6B1831ED
		lea	ecx, [ebp+var_74]
		mov	[esi+54h], eax
		call	Ordinal135
		lea	ecx, [ebp+var_74]
		call	Ordinal141
		test	eax, eax
		lea	ecx, [ebp+var_74]
		jnz	short loc_6B1831CE
		xor	edi, edi
		jmp	short loc_6B1831E8
; ---------------------------------------------------------------------------

loc_6B1831CE:				; CODE XREF: Ordinal153+36j
		push	esi
		call	Ordinal147
		test	eax, eax
		jz	short loc_6B1831E3
		mov	ecx, esi
		call	Ordinal1027
		test	eax, eax
		jnz	short loc_6B1831E5

loc_6B1831E3:				; CODE XREF: Ordinal153+44j
		xor	edi, edi

loc_6B1831E5:				; CODE XREF: Ordinal153+4Fj
		lea	ecx, [ebp+var_74]

loc_6B1831E8:				; CODE XREF: Ordinal153+3Aj
		call	Ordinal138

loc_6B1831ED:				; CODE XREF: Ordinal153+1Cj
		mov	ecx, esi
		call	Ordinal1024
		mov	eax, edi
		pop	edi

loc_6B1831F7:				; CODE XREF: Ordinal153+10j
		pop	esi
		leave
		retn
Ordinal153	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1831FA(void *, char)
sub_6B1831FA	proc near		; DATA XREF: .rdata:off_6B1AABC0o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal150
		test	[esp+4+arg_0], 1
		jz	short loc_6B183210
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B183210:				; CODE XREF: sub_6B1831FA+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1831FA	endp

; Exported entry 159.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal159
Ordinal159	proc near		; DATA XREF: .rdata:6B1AABE8o
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+10h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		push	[ebp+arg_0]
		lea	ecx, [esi+4]
		call	Ordinal1128
		test	eax, eax
		lea	ecx, [ebp+var_C]
		setnz	bl
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal159	endp

; Exported entry 160.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal160(LONG	lDistanceToMove, int)
		public Ordinal160
Ordinal160	proc near		; DATA XREF: .rdata:6B1AABECo
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
lDistanceToMove	= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+10h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		push	[ebp+arg_4]	; int
		lea	ecx, [esi+4]
		push	[ebp+lDistanceToMove] ;	lDistanceToMove
		call	Ordinal1130
		test	eax, eax
		lea	ecx, [ebp+var_C]
		setnz	bl
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal160	endp

; Exported entry 161.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal161
Ordinal161	proc near		; DATA XREF: .rdata:6B1AABF0o
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+10h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		push	[ebp+arg_0]
		lea	ecx, [esi+4]
		call	Ordinal1132
		test	eax, eax
		lea	ecx, [ebp+var_C]
		setnz	bl
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal161	endp

; Exported entry 162.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal162(LONG	lDistanceToMove, int)
		public Ordinal162
Ordinal162	proc near		; DATA XREF: .rdata:6B1AABF4o
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
lDistanceToMove	= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+10h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		push	[ebp+arg_4]	; int
		lea	ecx, [esi+4]
		push	[ebp+lDistanceToMove] ;	lDistanceToMove
		call	Ordinal1133
		test	eax, eax
		lea	ecx, [ebp+var_C]
		setnz	bl
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal162	endp

; Exported entry 163.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal163(LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite)
		public Ordinal163
Ordinal163	proc near		; DATA XREF: .rdata:6B1AABF8o
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
lpBuffer	= dword	ptr  8
nNumberOfBytesToWrite= dword ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+10h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		push	[ebp+nNumberOfBytesToWrite] ; nNumberOfBytesToWrite
		lea	ecx, [esi+4]
		push	[ebp+lpBuffer]	; lpBuffer
		call	Ordinal1119
		test	eax, eax
		lea	ecx, [ebp+var_C]
		setnz	bl
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal163	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B183341	proc near		; CODE XREF: Ordinal1241+14p

arg_0		= byte ptr  4

		push	esi
		lea	eax, [esp+4+arg_0]
		push	eax
		mov	esi, ecx
		call	ds:??0exception@@QAE@ABQBD@Z ; exception::exception(char const * const &)
		mov	dword ptr [esi], offset	off_6B1AABCC
		mov	eax, esi
		pop	esi
		retn	4
sub_6B183341	endp

; Exported entry 164.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal164(LPVOID lpBuffer, DWORD nNumberOfBytesToRead)
		public Ordinal164
Ordinal164	proc near		; DATA XREF: .rdata:6B1AABFCo
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
lpBuffer	= dword	ptr  8
nNumberOfBytesToRead= dword ptr	 0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+10h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		push	[ebp+nNumberOfBytesToRead] ; nNumberOfBytesToRead
		lea	ecx, [esi+4]
		push	[ebp+lpBuffer]	; lpBuffer
		call	Ordinal1117
		test	eax, eax
		lea	ecx, [ebp+var_C]
		setnz	bl
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal164	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B183398(void *, char)
sub_6B183398	proc near		; DATA XREF: .rdata:off_6B1AABCCo

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	sub_6B1833B4
		test	[esp+4+arg_0], 1
		jz	short loc_6B1833AE
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1833AE:				; CODE XREF: sub_6B183398+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B183398	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1833B4	proc near		; CODE XREF: sub_6B183398+3p
					; DATA XREF: .rdata:6B1BAC40o
		mov	dword ptr [ecx], offset	off_6B1AABCC
		jmp	ds:??1exception@@UAE@XZ	; exception::~exception(void)
sub_6B1833B4	endp

; Exported entry 165.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal165
Ordinal165	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+18h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		lea	eax, [esi+0Ch]
		pop	esi
		leave
		retn
Ordinal165	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1833E7	proc near		; CODE XREF: Ordinal154+3p
					; Ordinal273+4p ...
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+4], 0
		push	offset Addend	; lpAddend
		mov	dword ptr [esi], offset	off_6B1AABD4
		call	ds:InterlockedIncrement
		mov	eax, esi
		pop	esi
		retn
sub_6B1833E7	endp

; Exported entry 1430.
; Exported entry 1485.
; Exported entry 1486.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1430
Ordinal1430	proc near		; CODE XREF: sub_6B1A905C+6p
					; sub_6B1A9478+6p
					; DATA XREF: ...
		retn			; ccL35_1430
Ordinal1430	endp			; ccL35_1485


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B183404(void *, char)
sub_6B183404	proc near		; DATA XREF: .rdata:off_6B1AABD4o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		push	offset Addend	; lpAddend
		mov	dword ptr [esi], offset	off_6B1AABD4
		call	ds:InterlockedDecrement
		test	[esp+4+arg_0], 1
		jz	short loc_6B183426
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B183426:				; CODE XREF: sub_6B183404+19j
		mov	eax, esi
		pop	esi
		retn	4
sub_6B183404	endp

; Exported entry 158.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal158
Ordinal158	proc near		; CODE XREF: sub_6B1834EF+3p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+18h]
		mov	dword ptr [esi], offset	off_6B1AAC00
		mov	dword ptr [esi+8], offset off_6B1AABDC
		call	Ordinal1616
		lea	ecx, [esi+0Ch]
		call	Ordinal1109
		push	offset Addend	; lpAddend
		mov	dword ptr [esi], offset	off_6B1AABD4
		call	ds:InterlockedDecrement
		pop	esi
		retn
Ordinal158	endp

; Exported entry 155.
; Exported entry 415.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal155(void	*Buf2, int)
		public Ordinal155
Ordinal155	proc near		; DATA XREF: .rdata:off_6B1AABDCo
					; .rdata:off_6B1ACC10o	...

Buf2		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi		; ccL35_155
		push	10h		; Size
		push	[esp+8+Buf2]	; Buf2
		mov	esi, ecx
		push	offset dword_6B1AA47C ;	Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_6B1834A0
		push	10h		; Size
		push	[esp+8+Buf2]	; Buf2
		push	offset dword_6B1AA4CC ;	Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_6B1834A0
		mov	eax, [esp+4+arg_4]
		and	dword ptr [eax], 0

loc_6B183497:				; CODE XREF: Ordinal155+50j
		mov	eax, 80010200h

loc_6B18349C:				; CODE XREF: Ordinal155+5Ej
		pop	esi
		retn	8
; ---------------------------------------------------------------------------

loc_6B1834A0:				; CODE XREF: Ordinal155+18j
					; Ordinal155+2Fj
		mov	ecx, [esp+4+arg_4]
		lea	eax, [esi-8]
		neg	eax
		sbb	eax, eax
		and	eax, esi
		mov	[ecx], eax
		jz	short loc_6B183497
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+4]
		mov	eax, 10000h
		jmp	short loc_6B18349C
Ordinal155	endp

; Exported entry 154.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal154
Ordinal154	proc near		; CODE XREF: Ordinal166+42p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	sub_6B1833E7
		mov	dword ptr [esi+8], offset off_6B1AB6B4
		lea	ecx, [esi+0Ch]
		mov	dword ptr [esi], offset	off_6B1AAC00
		mov	dword ptr [esi+8], offset off_6B1AABDC
		call	Ordinal1107
		lea	ecx, [esi+18h]
		call	Ordinal1615
		mov	eax, esi
		pop	esi
		retn
Ordinal154	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1834EF(void *, char)
sub_6B1834EF	proc near		; DATA XREF: .rdata:off_6B1AAC00o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal158
		test	[esp+4+arg_0], 1
		jz	short loc_6B183505
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B183505:				; CODE XREF: sub_6B1834EF+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1834EF	endp

; Exported entry 166.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal166
Ordinal166	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_60		= dword	ptr -60h
var_4C		= byte ptr -4Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_27 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 54h
		mov	eax, ___security_cookie
		and	[ebp+var_28], 0
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCfilestreamimp ; "CFileStreamImpl::CreateFileStreamImpl()"...
		lea	ecx, [ebp+var_4C]
		mov	[ebp+var_14], eax
		call	Ordinal1089
		and	[ebp+var_4], 0
		push	38h		; Size
		mov	byte ptr [ebp+var_4], 1
		call	??2@YAPAXI@Z	; operator new(uint)
		test	eax, eax
		pop	ecx
		jz	short loc_6B183556
		mov	ecx, eax
		call	Ordinal154
		mov	ecx, eax
		jmp	short loc_6B183558
; ---------------------------------------------------------------------------

loc_6B183556:				; CODE XREF: Ordinal166+3Ej
		xor	ecx, ecx

loc_6B183558:				; CODE XREF: Ordinal166+49j
		test	ecx, ecx
		mov	[ebp+var_28], ecx
		jnz	short loc_6B183588
		lea	eax, [ebp+var_2C]
		push	eax
		lea	ecx, [ebp+var_60]
		mov	[ebp+var_2C], offset aBadAllocation ; "bad allocation"
		call	ds:??0exception@@QAE@ABQBD@Z ; exception::exception(char const * const &)
		push	offset dword_6B1BAC3C
		lea	eax, [ebp+var_60]
		push	eax
		mov	[ebp+var_60], offset off_6B1AABCC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B183588:				; CODE XREF: Ordinal166+52j
		add	ecx, 8
		mov	eax, [ecx]
		call	dword ptr [eax+4]

loc_6B183590:				; DATA XREF: sub_6B1835B2+3Do
					; sub_6B1835F5+4Fo
		lea	ecx, [ebp+var_4C]
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	eax, [ebp+var_28]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal166	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1835B2	proc near		; DATA XREF: .rdata:6B1BAC70o
		push	13h
		lea	ecx, [ebp-4Ch]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-4Ch]
		call	Ordinal1101
		mov	ecx, [ebp-54h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-4Ch]
		call	Ordinal1103
		lea	ecx, [ebp-4Ch]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B183590
		retn
sub_6B1835B2	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1835F5	proc near		; DATA XREF: .rdata:6B1BAC80o
		push	15h
		lea	ecx, [ebp-4Ch]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-4Ch]
		call	Ordinal1101
		mov	eax, [ebp-50h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-4Ch]
		call	Ordinal1103
		lea	ecx, [ebp-4Ch]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B183590
		retn
sub_6B1835F5	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18364A	proc near		; DATA XREF: .rdata:6B1BAC2Co

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		call	ds:__imp_??0exception@@QAE@ABV0@@Z ; exception::exception(exception const &)
		mov	dword ptr [esi], offset	off_6B1AABCC
		mov	eax, esi
		pop	esi
		retn	4
sub_6B18364A	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B183663	proc near		; CODE XREF: sub_6B183772+16p
					; sub_6B1837AE+Bp ...
		mov	edx, [ecx+4]
		mov	ecx, [ecx]
		push	esi
		mov	esi, [ecx+8]
		mov	eax, edx
		sub	eax, edx
		cmp	esi, edx
		ja	short loc_6B183676
		sub	edx, esi

loc_6B183676:				; CODE XREF: sub_6B183663+Fj
		mov	ecx, [ecx+4]
		shl	eax, 6
		add	eax, [ecx+edx*4]
		pop	esi
		retn
sub_6B183663	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_6B183681	proc near		; CODE XREF: sub_6B183955+Dp

var_50		= dword	ptr -50h
var_28		= byte ptr -28h
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_28 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		push	offset aInvalidDequeTS ; "invalid deque<T> subscript"
		lea	ecx, [ebp+var_28]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_28]
		push	eax
		lea	ecx, [ebp+var_50]
		call	sub_6B181357
		push	offset dword_6B1BAA6C
		lea	eax, [ebp+var_50]
		push	eax
		mov	[ebp+var_50], offset off_6B1AA91C
		call	_CxxThrowException
sub_6B183681	endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================


sub_6B1836C2	proc near		; CODE XREF: sub_6B1837AE+21p
					; sub_6B1837DA+2Ap ...

arg_0		= dword	ptr  4

		mov	edx, [ecx]
		mov	eax, [esp+arg_0]
		cmp	edx, [eax]
		jnz	short loc_6B1836D9
		mov	ecx, [ecx+4]
		cmp	ecx, [eax+4]
		jnz	short loc_6B1836D9
		xor	eax, eax
		inc	eax
		jmp	short locret_6B1836DB
; ---------------------------------------------------------------------------

loc_6B1836D9:				; CODE XREF: sub_6B1836C2+8j
					; sub_6B1836C2+10j
		xor	eax, eax

locret_6B1836DB:			; CODE XREF: sub_6B1836C2+15j
		retn	4
sub_6B1836C2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_6B1836DE	proc near		; CODE XREF: sub_6B183B56+1Ep

var_50		= dword	ptr -50h
var_28		= byte ptr -28h
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_28 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		push	offset aDequeTTooLong ;	"deque<T> too long"
		lea	ecx, [ebp+var_28]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_28]
		push	eax
		lea	ecx, [ebp+var_50]
		call	sub_6B181357
		push	offset dword_6B1BA9E8
		lea	eax, [ebp+var_50]
		push	eax
		mov	[ebp+var_50], offset off_6B1AA914
		call	_CxxThrowException
sub_6B1836DE	endp

; ---------------------------------------------------------------------------
		db 0CCh

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6B18371F(void	*Src, int, void	*Dst)
sub_6B18371F	proc near		; CODE XREF: sub_6B183791+13p
					; sub_6B1A1A13+10p

Src		= dword	ptr  4
arg_4		= dword	ptr  8
Dst		= dword	ptr  0Ch

		mov	eax, [esp+arg_4]
		sub	eax, [esp+Src]
		push	esi
		sar	eax, 2
		mov	esi, eax
		shl	esi, 2
		push	esi		; Size
		push	[esp+8+Src]	; Src
		push	[esp+0Ch+Dst]	; Dst
		call	ds:memmove
		add	esp, 0Ch
		add	eax, esi
		pop	esi
		retn
sub_6B18371F	endp

; Exported entry 171.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal171
Ordinal171	proc near		; CODE XREF: Ordinal247+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	esi, [esi+80h]
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal171	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B183772	proc near		; CODE XREF: sub_6B183D6C+8Dp
					; sub_6B183D6C+D8p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		mov	eax, [ecx+4]
		mov	edx, [ecx]
		add	eax, [ebp+arg_0]
		lea	ecx, [ebp+var_8]
		mov	[ebp+var_8], edx
		mov	[ebp+var_4], eax
		call	sub_6B183663
		leave
		retn	4
sub_6B183772	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_6B183791(void	*Src, int, void	*Dst, int)
sub_6B183791	proc near		; CODE XREF: sub_6B183B56+64p
					; sub_6B183B56+89p ...

var_4		= dword	ptr -4
Src		= dword	ptr  8
arg_4		= dword	ptr  0Ch
Dst		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+var_4]
		push	[ebp+arg_C]
		push	[ebp+Dst]	; Dst
		push	[ebp+arg_4]	; int
		push	[ebp+Src]	; Src
		call	sub_6B18371F
		add	esp, 14h
		leave
		retn
sub_6B183791	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1837AE	proc near		; CODE XREF: sub_6B183D6C+ADp
					; sub_6B183D6C+154p ...

arg_0		= byte ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		jmp	short loc_6B1837C8
; ---------------------------------------------------------------------------

loc_6B1837B3:				; CODE XREF: sub_6B1837AE+28j
		push	[ebp+arg_10]
		lea	ecx, [ebp+arg_0]
		call	sub_6B183663
		mov	ecx, eax
		call	Ordinal523
		inc	[ebp+arg_4]

loc_6B1837C8:				; CODE XREF: sub_6B1837AE+3j
		lea	eax, [ebp+arg_8]
		lea	ecx, [ebp+arg_0]
		push	eax
		call	sub_6B1836C2
		test	al, al
		jz	short loc_6B1837B3
		pop	ebp
		retn
sub_6B1837AE	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1837DA	proc near		; CODE XREF: sub_6B183A0B+1Bp

arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= byte ptr  14h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		jmp	short loc_6B1837FD
; ---------------------------------------------------------------------------

loc_6B1837DF:				; CODE XREF: sub_6B1837DA+31j
		lea	ecx, [ebp+arg_4]
		call	sub_6B183663
		push	eax
		lea	ecx, [ebp+arg_14]
		call	sub_6B183663
		mov	ecx, eax
		call	Ordinal523
		inc	[ebp+arg_18]
		inc	[ebp+arg_8]

loc_6B1837FD:				; CODE XREF: sub_6B1837DA+3j
		lea	eax, [ebp+arg_C]
		lea	ecx, [ebp+arg_4]
		push	eax
		call	sub_6B1836C2
		test	al, al
		jz	short loc_6B1837DF
		mov	ecx, [ebp+arg_14]
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx
		mov	ecx, [ebp+arg_18]
		mov	[eax+4], ecx
		pop	ebp
		retn
sub_6B1837DA	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B18381D	proc near		; CODE XREF: sub_6B1839E3+1Bp

arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_C		= byte ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		jmp	short loc_6B183840
; ---------------------------------------------------------------------------

loc_6B183822:				; CODE XREF: sub_6B18381D+31j
		dec	[ebp+arg_10]
		dec	[ebp+arg_18]
		lea	ecx, [ebp+arg_C]
		call	sub_6B183663
		push	eax
		lea	ecx, [ebp+arg_14]
		call	sub_6B183663
		mov	ecx, eax
		call	Ordinal523

loc_6B183840:				; CODE XREF: sub_6B18381D+3j
		lea	eax, [ebp+arg_C]
		lea	ecx, [ebp+arg_4]
		push	eax
		call	sub_6B1836C2
		test	al, al
		jz	short loc_6B183822
		mov	ecx, [ebp+arg_14]
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx
		mov	ecx, [ebp+arg_18]
		mov	[eax+4], ecx
		pop	ebp
		retn
sub_6B18381D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B183860	proc near		; CODE XREF: sub_6B184012+52p

var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_C]
		mov	[ebp+arg_8], ecx
		mov	ecx, [ebp+arg_4]
		sub	eax, ecx
		mov	ecx, [ebp+arg_10]
		add	[ecx], eax
		leave
		retn
sub_6B183860	endp

; Exported entry 192.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal192
Ordinal192	proc near		; DATA XREF: .rdata:6B1AAE08o
					; .rdata:6B1AB6F0o ...

var_1C		= byte ptr -1Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		xor	edi, edi
		push	edi
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_1C]
		call	Ordinal1571
		push	[ebp+arg_0]
		mov	ecx, esi
		call	Ordinal591
		test	al, al
		jnz	short loc_6B1838B4
		push	offset aCindexvaluecol ; "CIndexValueCollection::Save()	: CValueC"...
		jmp	loc_6B18393C
; ---------------------------------------------------------------------------

loc_6B1838B4:				; CODE XREF: Ordinal192+28j
		mov	ecx, [ebp+arg_0]
		xor	ebx, ebx
		inc	ebx
		push	ebx
		call	Ordinal627
		test	eax, eax
		jz	short loc_6B1838D6
		push	dword ptr [esi+80h]
		mov	ecx, [ebp+arg_0]
		call	Ordinal658
		test	eax, eax
		jnz	short loc_6B1838DD

loc_6B1838D6:				; CODE XREF: Ordinal192+42j
		push	offset aCindexvaluec_0 ; "CIndexValueCollection::Save()	: Archive"...
		jmp	short loc_6B18393C
; ---------------------------------------------------------------------------

loc_6B1838DD:				; CODE XREF: Ordinal192+54j
		mov	eax, [esi+7Ch]
		add	esi, 70h
		mov	[ebp+var_8], esi
		mov	[ebp+var_4], eax
		jmp	short loc_6B183912
; ---------------------------------------------------------------------------

loc_6B1838EB:				; CODE XREF: Ordinal192+ACj
		mov	ecx, [ebp+arg_0]
		push	edi
		call	Ordinal658
		test	eax, eax
		jz	short loc_6B183930
		push	[ebp+arg_0]
		lea	ecx, [ebp+var_8]
		call	sub_6B183663
		mov	ecx, eax
		call	Ordinal533
		test	al, al
		jz	short loc_6B183937
		inc	edi
		inc	[ebp+var_4]

loc_6B183912:				; CODE XREF: Ordinal192+69j
		mov	eax, [esi+10h]
		add	eax, [esi+0Ch]
		lea	ecx, [ebp+var_8]
		mov	[ebp+var_C], eax
		lea	eax, [ebp+var_10]
		push	eax
		mov	[ebp+var_10], esi
		call	sub_6B1836C2
		test	al, al
		jz	short loc_6B1838EB
		jmp	short loc_6B183944
; ---------------------------------------------------------------------------

loc_6B183930:				; CODE XREF: Ordinal192+76j
		push	offset aCindexvaluec_1 ; "CIndexValueCollection::SAveArchive() : "...
		jmp	short loc_6B18393C
; ---------------------------------------------------------------------------

loc_6B183937:				; CODE XREF: Ordinal192+8Cj
		push	offset aCindexvaluec_2 ; "CIndexValueCollection::Save()	: (*pos)."...

loc_6B18393C:				; CODE XREF: Ordinal192+2Fj
					; Ordinal192+5Bj ...
		call	sub_6B18102E
		pop	ecx
		xor	bl, bl

loc_6B183944:				; CODE XREF: Ordinal192+AEj
		lea	ecx, [ebp+var_1C]
		call	Ordinal1573
		pop	edi
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal192	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B183955	proc near		; CODE XREF: Ordinal193+2Ep
					; Ordinal194+2Ap ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		mov	edx, [ebp+arg_0]
		cmp	[ecx+10h], edx
		ja	short loc_6B183967
		call	sub_6B183681
; ---------------------------------------------------------------------------

loc_6B183967:				; CODE XREF: sub_6B183955+Bj
		mov	eax, [ecx+0Ch]
		add	eax, edx
		mov	[ebp+var_8], ecx
		lea	ecx, [ebp+var_8]
		mov	[ebp+var_4], eax
		call	sub_6B183663
		leave
		retn	4
sub_6B183955	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18397E	proc near		; CODE XREF: sub_6B183AB7+5Dp
					; sub_6B183D6C+F8p ...
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+10h], 0
		jz	short loc_6B1839AE
		mov	eax, [esi+0Ch]
		mov	ecx, [esi+4]
		mov	ecx, [ecx+eax*4]
		mov	eax, [ecx]
		push	0
		call	dword ptr [eax]
		inc	dword ptr [esi+0Ch]
		mov	eax, [esi+0Ch]
		cmp	[esi+8], eax
		ja	short loc_6B1839A5
		and	dword ptr [esi+0Ch], 0

loc_6B1839A5:				; CODE XREF: sub_6B18397E+21j
		dec	dword ptr [esi+10h]
		jnz	short loc_6B1839AE
		and	dword ptr [esi+0Ch], 0

loc_6B1839AE:				; CODE XREF: sub_6B18397E+7j
					; sub_6B18397E+2Aj
		pop	esi
		retn
sub_6B18397E	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1839B0	proc near		; CODE XREF: sub_6B183AB7+82p
					; sub_6B183C5B+7p ...
		push	esi
		mov	esi, ecx
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_6B1839E1
		mov	ecx, [esi+0Ch]
		lea	eax, [eax+ecx-1]
		mov	ecx, [esi+8]
		cmp	ecx, eax
		ja	short loc_6B1839CA
		sub	eax, ecx

loc_6B1839CA:				; CODE XREF: sub_6B1839B0+16j
		mov	ecx, [esi+4]
		mov	eax, [ecx+eax*4]
		mov	edx, [eax]
		push	0
		mov	ecx, eax
		call	dword ptr [edx]
		dec	dword ptr [esi+10h]
		jnz	short loc_6B1839E1
		and	dword ptr [esi+0Ch], 0

loc_6B1839E1:				; CODE XREF: sub_6B1839B0+8j
					; sub_6B1839B0+2Bj
		pop	esi
		retn
sub_6B1839B0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1839E3	proc near		; CODE XREF: sub_6B183AB7+4Fp
					; sub_6B183D6C+265p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_0]
		push	[ebp+arg_18]
		push	[ebp+arg_14]
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6B18381D
		mov	eax, [ebp+arg_0]
		add	esp, 20h
		pop	ebp
		retn
sub_6B1839E3	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B183A0B	proc near		; CODE XREF: sub_6B183AB7+74p
					; sub_6B183D6C+13Cp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_0]
		push	[ebp+arg_18]
		push	[ebp+arg_14]
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6B1837DA
		mov	eax, [ebp+arg_0]
		add	esp, 20h
		pop	ebp
		retn
sub_6B183A0B	endp

; Exported entry 193.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal193
Ordinal193	proc near		; DATA XREF: .rdata:6B1AAE14o
					; .rdata:6B1AB6FCo ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= byte ptr  0Ch

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, [esp+4+arg_4]
		and	dword ptr [esi], 0
		cmp	eax, [ecx+80h]
		jb	short loc_6B183A5D
		cmp	[esp+4+arg_8], 0
		jnz	short loc_6B183A59
		push	offset aCindexvaluec_3 ; "CIndexValueCollection::GetReadValue()	:"...
		call	sub_6B18102E
		pop	ecx

loc_6B183A59:				; CODE XREF: Ordinal193+19j
		xor	al, al
		jmp	short loc_6B183A6A
; ---------------------------------------------------------------------------

loc_6B183A5D:				; CODE XREF: Ordinal193+12j
		push	eax
		add	ecx, 70h
		call	sub_6B183955
		mov	[esi], eax
		mov	al, 1

loc_6B183A6A:				; CODE XREF: Ordinal193+28j
		pop	esi
		retn	0Ch
Ordinal193	endp

; Exported entry 194.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal194
Ordinal194	proc near		; DATA XREF: .rdata:6B1AAE18o
					; .rdata:6B1AB700o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		push	edi
		mov	edi, [esp+8+arg_4]
		and	dword ptr [edi], 0
		mov	esi, ecx
		cmp	eax, [esi+80h]
		jb	short loc_6B183A94
		push	offset aCindexvaluec_4 ; "CIndexValueCollection::GetWriteValue() "...
		call	sub_6B18102E
		pop	ecx
		xor	al, al
		jmp	short loc_6B183AB2
; ---------------------------------------------------------------------------

loc_6B183A94:				; CODE XREF: Ordinal194+15j
		push	eax
		lea	ecx, [esi+70h]
		call	sub_6B183955
		mov	ecx, eax
		mov	[edi], eax
		call	Ordinal525
		mov	eax, [edi]
		mov	byte ptr [eax+38h], 1
		mov	byte ptr [esi+4], 1
		mov	al, 1

loc_6B183AB2:				; CODE XREF: Ordinal194+24j
		pop	edi
		pop	esi
		retn	8
Ordinal194	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B183AB7	proc near		; CODE XREF: sub_6B183D4D+13p
					; sub_6B1844B4+43p ...

var_10		= dword	ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	eax, [ebp+arg_4]
		mov	edx, [ebp+arg_10]
		push	ebx
		mov	[ebp+var_8], eax
		push	esi
		push	edi
		mov	edi, [ebp+arg_8]
		mov	esi, ecx
		mov	ecx, [esi+0Ch]
		mov	eax, edi
		sub	eax, ecx
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_C]
		mov	[ebp+var_10], eax
		mov	eax, edx
		sub	eax, edi
		mov	ebx, eax
		mov	eax, [esi+10h]
		lea	edi, [eax+ecx]
		mov	eax, edi
		sub	eax, edx
		cmp	[ebp+var_4], eax
		mov	[ebp+var_10], esi
		lea	eax, [ebp+arg_4]
		jnb	short loc_6B183B1E
		push	edx
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	ecx
		push	esi
		push	eax
		call	sub_6B1839E3
		add	esp, 1Ch
		test	ebx, ebx
		jbe	short loc_6B183B41

loc_6B183B12:				; CODE XREF: sub_6B183AB7+63j
		mov	ecx, esi
		call	sub_6B18397E
		dec	ebx
		jnz	short loc_6B183B12
		jmp	short loc_6B183B41
; ---------------------------------------------------------------------------

loc_6B183B1E:				; CODE XREF: sub_6B183AB7+40j
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	edi
		push	esi
		push	edx
		push	[ebp+arg_C]
		push	eax
		call	sub_6B183A0B
		add	esp, 1Ch
		test	ebx, ebx
		jbe	short loc_6B183B41

loc_6B183B37:				; CODE XREF: sub_6B183AB7+88j
		mov	ecx, esi
		call	sub_6B1839B0
		dec	ebx
		jnz	short loc_6B183B37

loc_6B183B41:				; CODE XREF: sub_6B183AB7+59j
					; sub_6B183AB7+65j ...
		mov	ecx, [esi+0Ch]
		mov	eax, [ebp+arg_0]
		add	ecx, [ebp+var_4]
		pop	edi
		mov	[eax], esi
		pop	esi
		mov	[eax+4], ecx
		pop	ebx
		leave
		retn	14h
sub_6B183AB7	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall sub_6B183B56(int, int)
sub_6B183B56	proc near		; CODE XREF: sub_6B183C9F+Fp
					; sub_6B183CF3+Ep

var_8		= dword	ptr -8
Dst		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		mov	ebx, [ebp+arg_0]
		push	esi
		mov	esi, ecx
		mov	eax, [esi+8]
		mov	edx, 3FFFFFFh
		mov	ecx, edx
		sub	ecx, eax
		cmp	ecx, ebx
		jnb	short loc_6B183B79
		mov	ecx, esi
		call	sub_6B1836DE
; ---------------------------------------------------------------------------

loc_6B183B79:				; CODE XREF: sub_6B183B56+1Aj
		mov	ecx, eax
		shr	ecx, 1
		cmp	ecx, 8
		jnb	short loc_6B183B85
		push	8
		pop	ecx

loc_6B183B85:				; CODE XREF: sub_6B183B56+2Aj
		cmp	ebx, ecx
		jnb	short loc_6B183B91
		sub	edx, ecx
		cmp	eax, edx
		ja	short loc_6B183B91
		mov	ebx, ecx

loc_6B183B91:				; CODE XREF: sub_6B183B56+31j
					; sub_6B183B56+37j
		add	eax, ebx
		push	edi
		mov	edi, [esi+0Ch]
		shl	eax, 2
		push	eax		; Size
		mov	[ebp+arg_0], edi
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	ecx, [esi+4]
		mov	[ebp+Dst], eax
		shl	edi, 2
		add	eax, edi
		push	esi		; int
		push	eax		; Dst
		mov	eax, [esi+8]
		lea	eax, [ecx+eax*4]
		push	eax		; int
		add	ecx, edi
		push	ecx		; Src
		call	sub_6B183791
		mov	ecx, [esi+4]
		add	esp, 14h
		cmp	[ebp+arg_0], ebx
		ja	short loc_6B183C05
		and	[ebp+var_8], 0
		lea	edx, [ebp+var_8]
		push	edx
		mov	edx, ebx
		sub	edx, [ebp+arg_0]
		push	edx
		push	esi		; int
		push	eax		; Dst
		lea	eax, [ecx+edi]
		push	eax		; int
		push	ecx		; Src
		call	sub_6B183791
		add	esp, 10h
		push	eax
		call	sub_6B1A6345
		and	[ebp+var_8], 0
		lea	eax, [ebp+var_8]
		push	eax
		push	[ebp+arg_0]
		push	[ebp+Dst]
		call	sub_6B1A6345
		add	esp, 18h
		jmp	short loc_6B183C3D
; ---------------------------------------------------------------------------

loc_6B183C05:				; CODE XREF: sub_6B183B56+72j
		push	esi		; int
		push	eax		; Dst
		lea	eax, [ecx+ebx*4]
		push	eax		; int
		push	ecx		; Src
		call	sub_6B183791
		mov	eax, [esi+4]
		and	[ebp+arg_0], 0
		add	esp, 10h
		lea	ecx, [ebp+arg_0]
		push	ecx
		push	ebx
		push	esi		; int
		push	[ebp+Dst]	; Dst
		lea	ecx, [eax+edi]
		push	ecx		; int
		lea	eax, [eax+ebx*4]
		push	eax		; Src
		call	sub_6B183791
		add	esp, 10h
		push	eax
		call	sub_6B1A6345
		add	esp, 0Ch

loc_6B183C3D:				; CODE XREF: sub_6B183B56+ADj
		mov	eax, [esi+4]
		test	eax, eax
		pop	edi
		jz	short loc_6B183C4C
		push	eax		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B183C4C:				; CODE XREF: sub_6B183B56+EDj
		mov	eax, [ebp+Dst]
		add	[esi+8], ebx
		mov	[esi+4], eax
		pop	esi
		pop	ebx
		leave
		retn	4
sub_6B183B56	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B183C5B	proc near		; CODE XREF: Ordinal173+1Cp
					; Ordinal168+11p ...
		push	esi
		mov	esi, ecx
		jmp	short loc_6B183C67
; ---------------------------------------------------------------------------

loc_6B183C60:				; CODE XREF: sub_6B183C5B+10j
		mov	ecx, esi
		call	sub_6B1839B0

loc_6B183C67:				; CODE XREF: sub_6B183C5B+3j
		cmp	dword ptr [esi+10h], 0
		jnz	short loc_6B183C60
		push	edi
		mov	edi, [esi+8]
		jmp	short loc_6B183C82
; ---------------------------------------------------------------------------

loc_6B183C73:				; CODE XREF: sub_6B183C5B+2Cj
		dec	edi
		mov	eax, [eax+edi*4]
		test	eax, eax
		jz	short loc_6B183C82
		push	eax		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B183C82:				; CODE XREF: sub_6B183C5B+16j
					; sub_6B183C5B+1Ej
		test	edi, edi
		mov	eax, [esi+4]
		ja	short loc_6B183C73
		test	eax, eax
		pop	edi
		jz	short loc_6B183C95
		push	eax		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B183C95:				; CODE XREF: sub_6B183C5B+31j
		and	dword ptr [esi+8], 0
		and	dword ptr [esi+4], 0
		pop	esi
		retn
sub_6B183C5B	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B183C9F	proc near		; CODE XREF: sub_6B183D6C+65p
					; sub_6B183D6C+95p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	eax, [esi+10h]
		inc	eax
		cmp	[esi+8], eax
		push	edi
		ja	short loc_6B183CB3
		push	1		; int
		call	sub_6B183B56

loc_6B183CB3:				; CODE XREF: sub_6B183C9F+Bj
		mov	edi, [esi+0Ch]
		test	edi, edi
		jnz	short loc_6B183CBD
		mov	edi, [esi+8]

loc_6B183CBD:				; CODE XREF: sub_6B183C9F+19j
		mov	eax, [esi+4]
		dec	edi
		cmp	dword ptr [eax+edi*4], 0
		jnz	short loc_6B183CD5
		push	40h		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		pop	ecx
		mov	ecx, [esi+4]
		mov	[ecx+edi*4], eax

loc_6B183CD5:				; CODE XREF: sub_6B183C9F+26j
		mov	eax, [esi+4]
		mov	ecx, [eax+edi*4]
		test	ecx, ecx
		jz	short loc_6B183CE8
		push	[esp+8+arg_0]
		call	Ordinal522

loc_6B183CE8:				; CODE XREF: sub_6B183C9F+3Ej
		inc	dword ptr [esi+10h]
		mov	[esi+0Ch], edi
		pop	edi
		pop	esi
		retn	4
sub_6B183C9F	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B183CF3	proc near		; CODE XREF: sub_6B183D6C+177p
					; sub_6B183D6C+1A9p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	eax, [esi+10h]
		inc	eax
		cmp	[esi+8], eax
		ja	short loc_6B183D06
		push	1		; int
		call	sub_6B183B56

loc_6B183D06:				; CODE XREF: sub_6B183CF3+Aj
		mov	eax, [esi+0Ch]
		add	eax, [esi+10h]
		mov	ecx, [esi+8]
		cmp	ecx, eax
		ja	short loc_6B183D15
		sub	eax, ecx

loc_6B183D15:				; CODE XREF: sub_6B183CF3+1Ej
		push	edi
		mov	edi, eax
		mov	eax, [esi+4]
		shl	edi, 2
		cmp	dword ptr [edi+eax], 0
		jnz	short loc_6B183D32
		push	40h		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		pop	ecx
		mov	ecx, [esi+4]
		mov	[edi+ecx], eax

loc_6B183D32:				; CODE XREF: sub_6B183CF3+2Fj
		mov	eax, [esi+4]
		mov	ecx, [edi+eax]
		test	ecx, ecx
		pop	edi
		jz	short loc_6B183D46
		push	[esp+4+arg_0]
		call	Ordinal522

loc_6B183D46:				; CODE XREF: sub_6B183CF3+48j
		inc	dword ptr [esi+10h]
		pop	esi
		retn	4
sub_6B183CF3	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B183D4D	proc near		; CODE XREF: Ordinal172+41p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_8]
		mov	edx, [ebp+arg_4]
		inc	eax
		push	eax
		push	edx
		push	[ebp+arg_8]
		push	edx
		push	[ebp+arg_0]
		call	sub_6B183AB7
		mov	eax, [ebp+arg_0]
		pop	ebp
		retn	0Ch
sub_6B183D4D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B183D6C	proc near		; CODE XREF: sub_6B1844B4+2Ap

var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= byte ptr -94h
var_54		= byte ptr -54h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	eax, offset unknown_libname_29 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 0A4h
		mov	eax, ___security_cookie
		push	ebx
		mov	ebx, [ebp+arg_4]
		push	esi
		mov	esi, ecx
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_14], eax
		mov	eax, [esi+0Ch]
		mov	[ebp+var_A4], ecx
		mov	ecx, [esi+10h]
		sub	ebx, eax
		mov	eax, ecx
		sub	eax, ebx
		cmp	ebx, eax
		push	edi
		mov	edi, [ebp+arg_8]
		mov	[ebp+var_10], esp
		mov	[ebp+var_A8], esi
		mov	[ebp+arg_4], eax
		mov	[ebp+var_AC], ecx
		jnb	loc_6B183ECD
		and	[ebp+var_4], 0
		cmp	ebx, edi
		jnb	short loc_6B183E26
		sub	edi, ebx

loc_6B183DC8:				; CODE XREF: sub_6B183D6C+6Bj
		test	edi, edi
		jbe	short loc_6B183DD9
		push	[ebp+arg_C]
		mov	ecx, esi
		call	sub_6B183C9F
		dec	edi
		jmp	short loc_6B183DC8
; ---------------------------------------------------------------------------

loc_6B183DD9:				; CODE XREF: sub_6B183D6C+5Ej
		mov	edi, ebx

loc_6B183DDB:				; CODE XREF: sub_6B183D6C+9Bj
		test	edi, edi
		mov	eax, [esi+0Ch]
		jbe	short loc_6B183E09
		mov	[ebp+var_98], eax
		mov	eax, [ebp+arg_8]
		dec	eax
		push	eax
		lea	ecx, [ebp+var_9C]
		mov	[ebp+var_9C], esi
		call	sub_6B183772
		push	eax
		mov	ecx, esi
		call	sub_6B183C9F
		dec	edi
		jmp	short loc_6B183DDB
; ---------------------------------------------------------------------------

loc_6B183E09:				; CODE XREF: sub_6B183D6C+74j
		add	eax, [ebp+arg_8]
		push	[ebp+arg_C]
		mov	ecx, eax
		add	ecx, ebx
		push	ecx
		mov	edx, esi
		push	edx
		push	eax

loc_6B183E18:				; CODE XREF: sub_6B183D6C+1C3j
		push	esi
		call	sub_6B1837AE
		add	esp, 14h
		jmp	loc_6B183FF9
; ---------------------------------------------------------------------------

loc_6B183E26:				; CODE XREF: sub_6B183D6C+58j
					; sub_6B183D6C+E6j
		test	edi, edi
		jbe	short loc_6B183E73
		mov	eax, [esi+0Ch]
		mov	[ebp+var_98], eax
		mov	eax, [ebp+arg_8]
		dec	eax
		push	eax
		lea	ecx, [ebp+var_9C]
		mov	[ebp+var_9C], esi
		call	sub_6B183772
		push	eax
		mov	ecx, esi
		call	sub_6B183C9F
		dec	edi
		jmp	short loc_6B183E26
; ---------------------------------------------------------------------------

loc_6B183E54:				; DATA XREF: .rdata:stru_6B1BACF8o
		mov	esi, [ebp+var_A8]
		mov	edi, [ebp+var_AC]
		jmp	short loc_6B183E69
; ---------------------------------------------------------------------------

loc_6B183E62:				; CODE XREF: sub_6B183D6C+100j
		mov	ecx, esi
		call	sub_6B18397E

loc_6B183E69:				; CODE XREF: sub_6B183D6C+F4j
		cmp	edi, [esi+10h]
		jb	short loc_6B183E62
		jmp	loc_6B183F97
; ---------------------------------------------------------------------------

loc_6B183E73:				; CODE XREF: sub_6B183D6C+BCj
		mov	edi, [esi+0Ch]
		push	[ebp+arg_C]
		add	edi, [ebp+arg_8]
		lea	ecx, [ebp+var_54]
		call	Ordinal522
		push	edi
		mov	eax, esi
		push	eax
		mov	ecx, edi
		add	ecx, ebx
		push	ecx
		mov	edx, edi
		add	edx, [ebp+arg_8]
		push	esi
		push	edx
		mov	[ebp+var_A4], eax
		mov	[ebp+var_B0], eax
		lea	eax, [ebp+var_A4]
		push	esi
		push	eax
		call	sub_6B183A0B
		lea	edx, [ebp+var_54]
		push	edx
		mov	eax, esi
		mov	ecx, eax
		mov	eax, [esi+0Ch]
		add	edi, ebx
		push	edi
		push	ecx
		add	eax, ebx
		push	eax
		push	esi
		call	sub_6B1837AE
		lea	ecx, [ebp+var_54]
		jmp	loc_6B183FF1
; ---------------------------------------------------------------------------

loc_6B183ECD:				; CODE XREF: sub_6B183D6C+4Cj
		cmp	eax, edi
		mov	[ebp+var_4], 2
		jnb	short loc_6B183F34
		sub	edi, eax

loc_6B183EDA:				; CODE XREF: sub_6B183D6C+180j
		test	edi, edi
		jbe	short loc_6B183EEE
		push	[ebp+arg_C]
		mov	ecx, esi
		call	sub_6B183CF3
		mov	eax, [ebp+arg_4]
		dec	edi
		jmp	short loc_6B183EDA
; ---------------------------------------------------------------------------

loc_6B183EEE:				; CODE XREF: sub_6B183D6C+170j
		xor	edi, edi

loc_6B183EF0:				; CODE XREF: sub_6B183D6C+1B2j
		cmp	edi, eax
		jnb	short loc_6B183F20
		mov	eax, [esi+0Ch]
		mov	[ebp+var_98], eax
		lea	eax, [edi+ebx]
		push	eax
		lea	ecx, [ebp+var_9C]
		mov	[ebp+var_9C], esi
		call	sub_6B183772
		push	eax
		mov	ecx, esi
		call	sub_6B183CF3
		mov	eax, [ebp+arg_4]
		inc	edi
		jmp	short loc_6B183EF0
; ---------------------------------------------------------------------------

loc_6B183F20:				; CODE XREF: sub_6B183D6C+186j
		mov	ecx, [esi+0Ch]
		push	[ebp+arg_C]
		add	ecx, ebx
		mov	edx, ecx
		add	edx, eax
		push	edx
		push	esi
		push	ecx
		jmp	loc_6B183E18
; ---------------------------------------------------------------------------

loc_6B183F34:				; CODE XREF: sub_6B183D6C+16Aj
		and	[ebp+var_98], 0

loc_6B183F3B:				; CODE XREF: sub_6B183D6C+20Fj
		cmp	[ebp+var_98], edi
		jnb	short loc_6B183FA0
		mov	ecx, [esi+0Ch]
		mov	[ebp+var_A0], ecx
		mov	ecx, [ebp+var_98]
		sub	ecx, edi
		add	ecx, eax
		add	ecx, ebx
		push	ecx
		lea	ecx, [ebp+var_A4]
		mov	[ebp+var_A4], esi
		call	sub_6B183772
		push	eax
		mov	ecx, esi
		call	sub_6B183CF3
		inc	[ebp+var_98]
		mov	eax, [ebp+arg_4]
		jmp	short loc_6B183F3B
; ---------------------------------------------------------------------------

loc_6B183F7D:				; DATA XREF: .rdata:stru_6B1BAD08o
		mov	esi, [ebp+var_A8]
		mov	edi, [ebp+var_AC]
		jmp	short loc_6B183F92
; ---------------------------------------------------------------------------

loc_6B183F8B:				; CODE XREF: sub_6B183D6C+229j
		mov	ecx, esi
		call	sub_6B1839B0

loc_6B183F92:				; CODE XREF: sub_6B183D6C+21Dj
		cmp	edi, [esi+10h]
		jb	short loc_6B183F8B

loc_6B183F97:				; CODE XREF: sub_6B183D6C+102j
		push	0
		push	0
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B183FA0:				; CODE XREF: sub_6B183D6C+1D5j
		mov	edi, [esi+0Ch]
		push	[ebp+arg_C]
		lea	ecx, [ebp+var_94]
		add	edi, ebx
		call	Ordinal522
		mov	eax, edi
		add	eax, [ebp+arg_4]
		mov	ecx, edi
		add	ecx, [ebp+arg_4]
		push	eax
		sub	ecx, [ebp+arg_8]
		mov	edx, esi
		push	edx
		push	ecx
		mov	ebx, esi
		push	ebx
		push	edi
		lea	eax, [ebp+var_A4]
		push	esi
		push	eax
		call	sub_6B1839E3
		mov	eax, edi
		add	eax, [ebp+arg_8]
		lea	ecx, [ebp+var_94]
		push	ecx
		push	eax
		push	esi
		push	edi
		push	esi
		call	sub_6B1837AE
		lea	ecx, [ebp+var_94]

loc_6B183FF1:				; CODE XREF: sub_6B183D6C+15Cj
		add	esp, 30h
		call	Ordinal521

loc_6B183FF9:				; CODE XREF: sub_6B183D6C+B5j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	10h
sub_6B183D6C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B184012	proc near		; CODE XREF: sub_6B184513+18p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		mov	eax, offset unknown_libname_30 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 20h
		push	ebx
		mov	ebx, [ebp+arg_4]
		push	esi
		mov	esi, ecx
		mov	eax, [esi+0Ch]
		cmp	eax, ebx
		mov	ecx, [ebp+arg_0]
		push	edi
		mov	[ebp+var_10], esp
		mov	[ebp+var_20], esi
		mov	[ebp+var_2C], ecx
		ja	short loc_6B184041
		sub	ebx, eax
		mov	[ebp+var_18], ebx
		jmp	short loc_6B184046
; ---------------------------------------------------------------------------

loc_6B184041:				; CODE XREF: sub_6B184012+26j
		sub	ebx, eax
		mov	[ebp+var_18], ebx

loc_6B184046:				; CODE XREF: sub_6B184012+2Dj
		mov	eax, [esi+10h]
		and	[ebp+var_14], 0
		mov	edi, eax
		mov	[ebp+var_24], eax
		lea	eax, [ebp+var_14]
		push	eax
		push	[ebp+arg_14]
		sub	edi, ebx
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		call	sub_6B183860
		add	esp, 14h
		cmp	ebx, edi
		jnb	loc_6B18416D
		mov	edi, [ebp+var_14]
		and	[ebp+var_4], 0
		cmp	ebx, edi
		jnb	short loc_6B1840FE
		mov	edx, [ebp+arg_C]
		mov	ecx, [ebp+arg_8]
		mov	eax, edi
		sub	eax, ebx
		add	edx, eax
		mov	[ebp+var_28], edx
		mov	[ebp+arg_0], ecx
		mov	[ebp+arg_4], edx

loc_6B184094:				; CODE XREF: sub_6B184012+A5j
		lea	eax, [ebp+arg_0]
		push	eax
		lea	ecx, [ebp+arg_8]
		call	sub_6B1836C2
		test	al, al
		jnz	short loc_6B1840B9
		dec	[ebp+arg_4]
		lea	ecx, [ebp+arg_0]
		call	sub_6B183663
		push	eax
		mov	ecx, esi
		call	sub_6B183C9F
		jmp	short loc_6B184094
; ---------------------------------------------------------------------------

loc_6B1840B9:				; CODE XREF: sub_6B184012+90j
					; sub_6B184012+C9j
		test	ebx, ebx
		mov	eax, [esi+0Ch]
		jbe	short loc_6B1840DD
		mov	[ebp+arg_4], eax
		lea	eax, [edi-1]
		push	eax
		lea	ecx, [ebp+arg_0]
		mov	[ebp+arg_0], esi
		call	sub_6B183772
		push	eax
		mov	ecx, esi
		call	sub_6B183C9F
		dec	ebx
		jmp	short loc_6B1840B9
; ---------------------------------------------------------------------------

loc_6B1840DD:				; CODE XREF: sub_6B184012+ACj
		add	eax, edi
		push	eax
		push	esi
		push	[ebp+arg_14]
		push	[ebp+arg_10]
		push	[ebp+var_28]

loc_6B1840EA:				; CODE XREF: sub_6B184012+1D6j
		push	[ebp+arg_8]
		lea	eax, [ebp+arg_8]
		push	eax
		call	sub_6B183A0B
		add	esp, 1Ch
		jmp	loc_6B18427B
; ---------------------------------------------------------------------------

loc_6B1840FE:				; CODE XREF: sub_6B184012+6Bj
		mov	[ebp+arg_4], edi

loc_6B184101:				; CODE XREF: sub_6B184012+115j
		cmp	[ebp+arg_4], 0
		mov	eax, [esi+0Ch]
		jbe	short loc_6B184142
		mov	[ebp+var_18], eax
		lea	eax, [edi-1]
		push	eax
		lea	ecx, [ebp+var_1C]
		mov	[ebp+var_1C], esi
		call	sub_6B183772
		push	eax
		mov	ecx, esi
		call	sub_6B183C9F
		dec	[ebp+arg_4]
		jmp	short loc_6B184101
; ---------------------------------------------------------------------------

loc_6B184129:				; DATA XREF: .rdata:stru_6B1BAD7Co
		mov	esi, [ebp+var_20]
		mov	edi, [ebp+var_24]
		jmp	short loc_6B184138
; ---------------------------------------------------------------------------

loc_6B184131:				; CODE XREF: sub_6B184012+129j
		mov	ecx, esi
		call	sub_6B18397E

loc_6B184138:				; CODE XREF: sub_6B184012+11Dj
		cmp	edi, [esi+10h]
		jb	short loc_6B184131
		jmp	loc_6B184233
; ---------------------------------------------------------------------------

loc_6B184142:				; CODE XREF: sub_6B184012+F6j
		add	eax, edi
		push	eax
		mov	ecx, eax
		push	esi
		add	ecx, ebx
		push	ecx
		mov	edx, eax
		push	esi
		add	edx, edi
		push	edx
		lea	eax, [ebp+arg_0]
		push	esi
		push	eax
		mov	[ebp+arg_0], esi
		mov	[ebp+var_2C], esi
		call	sub_6B183A0B
		mov	eax, [esi+0Ch]
		add	eax, ebx
		push	eax
		push	esi
		jmp	loc_6B184263
; ---------------------------------------------------------------------------

loc_6B18416D:				; CODE XREF: sub_6B184012+5Cj
		cmp	edi, [ebp+var_14]
		mov	[ebp+var_4], 2
		jnb	short loc_6B1841ED
		mov	ecx, [ebp+arg_C]
		mov	eax, [ebp+arg_8]
		add	ecx, edi
		mov	[ebp+var_28], ecx
		mov	[ebp+arg_0], eax
		mov	[ebp+arg_4], ecx

loc_6B18418A:				; CODE XREF: sub_6B184012+19Bj
		lea	eax, [ebp+arg_10]
		push	eax
		lea	ecx, [ebp+arg_0]
		call	sub_6B1836C2
		test	al, al
		jnz	short loc_6B1841AF
		lea	ecx, [ebp+arg_0]
		call	sub_6B183663
		push	eax
		mov	ecx, esi
		call	sub_6B183CF3
		inc	[ebp+arg_4]
		jmp	short loc_6B18418A
; ---------------------------------------------------------------------------

loc_6B1841AF:				; CODE XREF: sub_6B184012+186j
		and	[ebp+arg_4], 0

loc_6B1841B3:				; CODE XREF: sub_6B184012+1C7j
		mov	ecx, [ebp+arg_4]
		cmp	ecx, edi
		mov	eax, [esi+0Ch]
		jnb	short loc_6B1841DB
		add	ecx, ebx
		push	ecx
		lea	ecx, [ebp+arg_10]
		mov	[ebp+arg_10], esi
		mov	[ebp+arg_14], eax
		call	sub_6B183772
		push	eax
		mov	ecx, esi
		call	sub_6B183CF3
		inc	[ebp+arg_4]
		jmp	short loc_6B1841B3
; ---------------------------------------------------------------------------

loc_6B1841DB:				; CODE XREF: sub_6B184012+1A9j
		add	eax, ebx
		push	eax
		push	esi
		push	[ebp+var_28]
		push	[ebp+arg_8]
		push	[ebp+arg_C]
		jmp	loc_6B1840EA
; ---------------------------------------------------------------------------

loc_6B1841ED:				; CODE XREF: sub_6B184012+165j
		and	[ebp+arg_4], 0

loc_6B1841F1:				; CODE XREF: sub_6B184012+20Bj
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [ebp+var_14]
		mov	eax, [esi+0Ch]
		jnb	short loc_6B18423C
		sub	ecx, [ebp+var_14]
		mov	[ebp+var_2C], esi
		add	ecx, edi
		add	ecx, ebx
		push	ecx
		lea	ecx, [ebp+var_2C]
		mov	[ebp+var_28], eax
		call	sub_6B183772
		push	eax
		mov	ecx, esi
		call	sub_6B183CF3
		inc	[ebp+arg_4]
		jmp	short loc_6B1841F1
; ---------------------------------------------------------------------------

loc_6B18421F:				; DATA XREF: .rdata:stru_6B1BAD8Co
		mov	esi, [ebp+var_20]
		mov	edi, [ebp+var_24]
		jmp	short loc_6B18422E
; ---------------------------------------------------------------------------

loc_6B184227:				; CODE XREF: sub_6B184012+21Fj
		mov	ecx, esi
		call	sub_6B1839B0

loc_6B18422E:				; CODE XREF: sub_6B184012+213j
		cmp	edi, [esi+10h]
		jb	short loc_6B184227

loc_6B184233:				; CODE XREF: sub_6B184012+12Bj
		push	0
		push	0
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18423C:				; CODE XREF: sub_6B184012+1E8j
		mov	ebx, esi
		mov	esi, eax
		add	esi, [ebp+var_18]
		mov	edx, ebx
		mov	eax, esi
		add	eax, edi
		push	eax
		mov	ecx, esi
		add	ecx, edi
		sub	ecx, [ebp+var_14]
		push	edx
		push	ecx
		mov	edi, ebx
		push	edi
		push	esi
		lea	eax, [ebp+arg_0]
		push	ebx
		push	eax
		call	sub_6B1839E3
		push	esi
		push	ebx

loc_6B184263:				; CODE XREF: sub_6B184012+156j
		push	[ebp+arg_14]
		lea	eax, [ebp+arg_8]
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	eax
		call	sub_6B183A0B
		add	esp, 38h

loc_6B18427B:				; CODE XREF: sub_6B184012+E7j
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn	1Ch
sub_6B184012	endp

; Exported entry 167.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal167
Ordinal167	proc near		; CODE XREF: Ordinal273+23p
					; Ordinal199+23p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		call	Ordinal536
		xor	eax, eax
		mov	dword ptr [esi], offset	off_6B1AAE04
		mov	[esi+74h], eax
		mov	[esi+78h], eax
		mov	[esi+7Ch], eax
		mov	[esi+80h], eax
		mov	eax, esi
		pop	esi
		retn
Ordinal167	endp

; Exported entry 172.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal172
Ordinal172	proc near		; CODE XREF: Ordinal248+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_14		= byte ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_14]
		call	Ordinal1571
		mov	edx, [ebp+arg_0]
		cmp	edx, [esi+80h]
		jb	short loc_6B1842E2
		push	offset aCindexvaluec_5 ; "CIndexValueCollection::Remove() : nKeyI"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B1842FB
; ---------------------------------------------------------------------------

loc_6B1842E2:				; CODE XREF: Ordinal172+24j
		lea	ecx, [esi+70h]
		mov	eax, [ecx+0Ch]
		add	eax, edx
		push	eax
		push	ecx
		lea	eax, [ebp+var_8]
		push	eax
		call	sub_6B183D4D
		mov	byte ptr [esi+4], 1
		mov	bl, 1

loc_6B1842FB:				; CODE XREF: Ordinal172+31j
		lea	ecx, [ebp+var_14]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal172	endp

; Exported entry 173.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal173
Ordinal173	proc near		; CODE XREF: Ordinal168+9p
					; Ordinal191+36p ...

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	ecx, [esi+70h]
		call	sub_6B183C5B
		lea	ecx, [ebp+var_C]
		mov	byte ptr [esi+4], 1
		call	Ordinal1573
		mov	al, 1
		pop	esi
		leave
		retn
Ordinal173	endp

; Exported entry 198.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal198
Ordinal198	proc near		; CODE XREF: Ordinal174+24p
					; Ordinal175+24p ...

var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= byte ptr -88h
var_68		= dword	ptr -68h
var_64		= byte ptr -64h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_31 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 84h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		mov	[ebp+var_10], esp
		push	offset aCindexvaluec_6 ; "CIndexValueCollection::Load()"
		lea	ecx, [ebp+var_88]
		mov	[ebp+var_14], eax
		mov	[ebp+var_68], esi
		call	Ordinal1089
		and	[ebp+var_4], 0
		lea	ecx, [ebp+var_64]
		call	Ordinal520
		lea	eax, [ebp+var_64]
		push	eax
		lea	ecx, [esi+70h]
		mov	byte ptr [ebp+var_4], 2
		call	sub_6B183CF3
		lea	ecx, [ebp+var_64]
		call	Ordinal521
		jmp	loc_6B184452
; ---------------------------------------------------------------------------

loc_6B184399:				; DATA XREF: .rdata:6B1BAE0Co
		push	13h
		lea	ecx, [ebp+var_88]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_88]
		call	Ordinal1101
		mov	ecx, [ebp+var_90]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_88]
		call	Ordinal1103
		lea	ecx, [ebp+var_88]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B18444F
		retn
; ---------------------------------------------------------------------------

loc_6B1843EB:				; DATA XREF: .rdata:6B1BAE1Co
		push	15h
		lea	ecx, [ebp+var_88]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_88]
		call	Ordinal1101
		mov	eax, [ebp+var_8C]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_88]
		call	Ordinal1103
		lea	ecx, [ebp+var_88]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B18444F
		retn
; ---------------------------------------------------------------------------

loc_6B18444F:				; DATA XREF: Ordinal198+A8o
					; Ordinal198+10Co
		mov	esi, [ebp+var_68]

loc_6B184452:				; CODE XREF: Ordinal198+57j
		xor	ebx, ebx
		lea	ecx, [ebp+var_88]
		mov	[ebp+var_4], ebx
		call	Ordinal1635
		test	eax, eax
		jnz	short loc_6B18448E
		mov	eax, [esi+80h]
		dec	eax
		push	eax
		lea	ecx, [esi+70h]
		call	sub_6B183955
		mov	edi, [ebp+arg_0]
		mov	ecx, eax
		mov	[edi], eax
		call	Ordinal525
		mov	eax, [edi]
		mov	byte ptr [eax+38h], 1
		mov	byte ptr [esi+4], 1
		mov	bl, 1

loc_6B18448E:				; CODE XREF: Ordinal198+127j
		lea	ecx, [ebp+var_88]
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal198	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1844B4	proc near		; CODE XREF: sub_6B184D3A+19p

var_14		= byte ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch

		mov	eax, offset unknown_libname_32 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	ecx
		push	esi
		mov	esi, [ecx+10h]
		mov	edx, [ebp+arg_0]
		and	[ebp+var_4], 0
		cmp	edx, esi
		jbe	short loc_6B1844E6
		mov	eax, [ecx+0Ch]
		push	edi
		lea	edi, [ebp+arg_4]
		push	edi
		sub	edx, esi
		push	edx
		add	eax, esi
		push	eax
		push	ecx
		call	sub_6B183D6C
		pop	edi
		jmp	short loc_6B1844FC
; ---------------------------------------------------------------------------

loc_6B1844E6:				; CODE XREF: sub_6B1844B4+19j
		jnb	short loc_6B1844FC
		mov	eax, [ecx+0Ch]
		add	esi, eax
		push	esi
		push	ecx
		add	eax, edx
		push	eax
		push	ecx
		lea	eax, [ebp+var_14]
		push	eax
		call	sub_6B183AB7

loc_6B1844FC:				; CODE XREF: sub_6B1844B4+30j
					; sub_6B1844B4:loc_6B1844E6j
		lea	ecx, [ebp+arg_4]
		call	Ordinal521
		mov	ecx, [ebp+var_C]
		pop	esi
		mov	large fs:0, ecx
		leave
		retn	44h
sub_6B1844B4	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B184513	proc near		; CODE XREF: sub_6B184C9B+91p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_14]
		push	[ebp+arg_14]
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6B184012
		pop	ebp
		retn	18h
sub_6B184513	endp

; Exported entry 168.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal168
Ordinal168	proc near		; CODE XREF: sub_6B184D5D+3p
					; Ordinal272+31p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1AAE04
		call	Ordinal173
		lea	ecx, [esi+70h]
		call	sub_6B183C5B
		mov	ecx, esi
		pop	esi
		jmp	Ordinal537
Ordinal168	endp

; Exported entry 174.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal174
Ordinal174	proc near		; CODE XREF: Ordinal250+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal198
		test	al, al
		jnz	short loc_6B18458C
		push	offset aCindexvaluec_7 ; "CIndexValueCollection::AddValue(bool)	:"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18459B
; ---------------------------------------------------------------------------

loc_6B18458C:				; CODE XREF: Ordinal174+2Bj
		mov	eax, [ebp+var_4]
		mov	cl, [ebp+arg_0]
		xor	ebx, ebx
		inc	ebx
		mov	[eax+34h], ebx
		mov	[eax+8], cl

loc_6B18459B:				; CODE XREF: Ordinal174+38j
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal174	endp

; Exported entry 175.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal175
Ordinal175	proc near		; CODE XREF: Ordinal251+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal198
		test	al, al
		jnz	short loc_6B1845E5
		push	offset aCindexvaluec_8 ; "CIndexValueCollection::AddValue(CHAR)	:"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B1845F7
; ---------------------------------------------------------------------------

loc_6B1845E5:				; CODE XREF: Ordinal175+2Bj
		mov	eax, [ebp+var_4]
		mov	cl, [ebp+arg_0]
		mov	dword ptr [eax+34h], 2
		mov	[eax+8], cl
		mov	bl, 1

loc_6B1845F7:				; CODE XREF: Ordinal175+38j
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal175	endp

; Exported entry 176.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal176
Ordinal176	proc near		; CODE XREF: Ordinal252+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal198
		test	al, al
		jnz	short loc_6B184641
		push	offset aCindexvaluec_9 ; "CIndexValueCollection::AddValue(BYTE)	:"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B184653
; ---------------------------------------------------------------------------

loc_6B184641:				; CODE XREF: Ordinal176+2Bj
		mov	eax, [ebp+var_4]
		mov	cl, [ebp+arg_0]
		mov	dword ptr [eax+34h], 3
		mov	[eax+8], cl
		mov	bl, 1

loc_6B184653:				; CODE XREF: Ordinal176+38j
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal176	endp

; Exported entry 177.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal177
Ordinal177	proc near		; CODE XREF: Ordinal253+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= word ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal198
		test	al, al
		jnz	short loc_6B18469D
		push	offset aCindexvalue_10 ; "CIndexValueCollection::AddValue(SHORT) "...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B1846B1
; ---------------------------------------------------------------------------

loc_6B18469D:				; CODE XREF: Ordinal177+2Bj
		mov	eax, [ebp+var_4]
		mov	cx, [ebp+arg_0]
		mov	dword ptr [eax+34h], 4
		mov	[eax+8], cx
		mov	bl, 1

loc_6B1846B1:				; CODE XREF: Ordinal177+38j
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal177	endp

; Exported entry 178.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal178
Ordinal178	proc near		; CODE XREF: Ordinal254+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= word ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal198
		test	al, al
		jnz	short loc_6B1846FB
		push	offset aCindexvalue_11 ; "CIndexValueCollection::AddValue(WORD)	:"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18470F
; ---------------------------------------------------------------------------

loc_6B1846FB:				; CODE XREF: Ordinal178+2Bj
		mov	eax, [ebp+var_4]
		mov	cx, [ebp+arg_0]
		mov	dword ptr [eax+34h], 5
		mov	[eax+8], cx
		mov	bl, 1

loc_6B18470F:				; CODE XREF: Ordinal178+38j
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal178	endp

; Exported entry 179.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal179
Ordinal179	proc near		; CODE XREF: Ordinal255+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal198
		test	al, al
		jnz	short loc_6B184759
		push	offset aCindexvalue_12 ; "CIndexValueCollection::AddValue(LONG)	:"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18476B
; ---------------------------------------------------------------------------

loc_6B184759:				; CODE XREF: Ordinal179+2Bj
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [eax+34h], 6
		mov	[eax+8], ecx
		mov	bl, 1

loc_6B18476B:				; CODE XREF: Ordinal179+38j
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal179	endp

; Exported entry 180.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal180
Ordinal180	proc near		; CODE XREF: Ordinal256+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal198
		test	al, al
		jnz	short loc_6B1847B5
		push	offset aCindexvalue_13 ; "CIndexValueCollection::AddValue(DWORD) "...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B1847C7
; ---------------------------------------------------------------------------

loc_6B1847B5:				; CODE XREF: Ordinal180+2Bj
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [eax+34h], 7
		mov	[eax+8], ecx
		mov	bl, 1

loc_6B1847C7:				; CODE XREF: Ordinal180+38j
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal180	endp

; Exported entry 181.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal181
Ordinal181	proc near		; CODE XREF: Ordinal257+Bp
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal198
		test	al, al
		jnz	short loc_6B184811
		push	offset aCindexvalue_14 ; "CIndexValueCollection::AddValue(LONGLON"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B184829
; ---------------------------------------------------------------------------

loc_6B184811:				; CODE XREF: Ordinal181+2Bj
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [eax+34h], 8
		mov	[eax+8], ecx
		mov	ecx, [ebp+arg_4]
		mov	[eax+0Ch], ecx
		mov	bl, 1

loc_6B184829:				; CODE XREF: Ordinal181+38j
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal181	endp

; Exported entry 182.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal182
Ordinal182	proc near		; CODE XREF: Ordinal258+Bp
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal198
		test	al, al
		jnz	short loc_6B184873
		push	offset aCindexvalue_15 ; "CIndexValueCollection::AddValue(ULONGLO"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18488B
; ---------------------------------------------------------------------------

loc_6B184873:				; CODE XREF: Ordinal182+2Bj
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [eax+34h], 9
		mov	[eax+8], ecx
		mov	ecx, [ebp+arg_4]
		mov	[eax+0Ch], ecx
		mov	bl, 1

loc_6B18488B:				; CODE XREF: Ordinal182+38j
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal182	endp

; Exported entry 183.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal183(double)
		public Ordinal183
Ordinal183	proc near		; CODE XREF: Ordinal259+Cp
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= qword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal198
		test	al, al
		jnz	short loc_6B1848D5
		push	offset aCindexvalue_16 ; "CIndexValueCollection::AddValue(double)"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B1848E7
; ---------------------------------------------------------------------------

loc_6B1848D5:				; CODE XREF: Ordinal183+2Bj
		mov	eax, [ebp+var_4]
		fld	[ebp+arg_0]
		mov	dword ptr [eax+34h], 0Ah
		fstp	qword ptr [eax+8]
		mov	bl, 1

loc_6B1848E7:				; CODE XREF: Ordinal183+38j
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal183	endp

; Exported entry 184.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal184
Ordinal184	proc near		; CODE XREF: Ordinal260+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal198
		test	al, al
		jnz	short loc_6B184931
		push	offset aCindexvalue_17 ; "CIndexValueCollection::AddValue(GUID)	:"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B184949
; ---------------------------------------------------------------------------

loc_6B184931:				; CODE XREF: Ordinal184+2Bj
		mov	eax, [ebp+var_4]
		mov	esi, [ebp+arg_0]
		push	edi
		mov	dword ptr [eax+34h], 0Bh
		lea	edi, [eax+8]
		movsd
		movsd
		movsd
		movsd
		mov	bl, 1
		pop	edi

loc_6B184949:				; CODE XREF: Ordinal184+38j
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal184	endp

; Exported entry 185.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal185
Ordinal185	proc near		; CODE XREF: Ordinal261+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal198
		test	al, al
		jnz	short loc_6B184993
		push	offset aCindexvalue_18 ; "CIndexValueCollection::AddValue(SYSTEMT"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B1849AB
; ---------------------------------------------------------------------------

loc_6B184993:				; CODE XREF: Ordinal185+2Bj
		mov	eax, [ebp+var_4]
		mov	esi, [ebp+arg_0]
		push	edi
		mov	dword ptr [eax+34h], 0Ch
		lea	edi, [eax+8]
		movsd
		movsd
		movsd
		movsd
		mov	bl, 1
		pop	edi

loc_6B1849AB:				; CODE XREF: Ordinal185+38j
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal185	endp

; Exported entry 186.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal186(char	*Src)
		public Ordinal186
Ordinal186	proc near		; CODE XREF: Ordinal195+6p
					; Ordinal262+3j
					; DATA XREF: ...

var_10		= byte ptr -10h
var_4		= dword	ptr -4
Src		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal198
		test	al, al
		jnz	short loc_6B1849F5
		push	offset aCindexvalue_19 ; "CIndexValueCollection::AddValue(LPCSTR)"...

loc_6B1849ED:				; CODE XREF: Ordinal186+54j
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B184A1A
; ---------------------------------------------------------------------------

loc_6B1849F5:				; CODE XREF: Ordinal186+2Bj
		mov	esi, [ebp+var_4]
		lea	eax, [esi+18h]
		push	eax		; int
		push	[ebp+Src]	; Src
		call	Ordinal1519
		test	al, al
		pop	ecx
		pop	ecx
		jnz	short loc_6B184A11
		push	offset aCindexvalue_20 ; "CIndexValueCollection::AddValue(LPCSTR)"...
		jmp	short loc_6B1849ED
; ---------------------------------------------------------------------------

loc_6B184A11:				; CODE XREF: Ordinal186+4Dj
		mov	dword ptr [esi+34h], 0Dh
		mov	bl, 1

loc_6B184A1A:				; CODE XREF: Ordinal186+38j
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal186	endp

; Exported entry 187.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal187(wchar_t *Src)
		public Ordinal187
Ordinal187	proc near		; CODE XREF: Ordinal196+6p
					; Ordinal263+3j
					; DATA XREF: ...

var_10		= byte ptr -10h
var_4		= dword	ptr -4
Src		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal198
		test	al, al
		jnz	short loc_6B184A64
		push	offset aCindexvalue_21 ; "CIndexValueCollection::AddValue(LPCWSTR"...

loc_6B184A5C:				; CODE XREF: Ordinal187+54j
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B184A89
; ---------------------------------------------------------------------------

loc_6B184A64:				; CODE XREF: Ordinal187+2Bj
		mov	esi, [ebp+var_4]
		lea	eax, [esi+1Ch]
		push	eax		; int
		push	[ebp+Src]	; Src
		call	Ordinal1521
		test	al, al
		pop	ecx
		pop	ecx
		jnz	short loc_6B184A80
		push	offset aCindexvalue_22 ; "CIndexValueCollection::AddValue(LPCWSTR"...
		jmp	short loc_6B184A5C
; ---------------------------------------------------------------------------

loc_6B184A80:				; CODE XREF: Ordinal187+4Dj
		mov	dword ptr [esi+34h], 0Eh
		mov	bl, 1

loc_6B184A89:				; CODE XREF: Ordinal187+38j
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal187	endp

; Exported entry 188.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal188(void	*Src, size_t dwBytes)
		public Ordinal188
Ordinal188	proc near		; CODE XREF: Ordinal264+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
Src		= dword	ptr  8
dwBytes		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		xor	ebx, ebx
		cmp	[ebp+Src], ebx
		push	esi
		mov	esi, ecx
		jnz	short loc_6B184ADD
		cmp	[ebp+dwBytes], ebx
		ja	short loc_6B184AE2

loc_6B184AAF:				; CODE XREF: Ordinal188+47j
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal198
		test	al, al
		jnz	short loc_6B184AF1
		push	offset aCindexvalue_23 ; "CIndexValueCollection::AddValue(LPCVOID"...

loc_6B184AD5:				; CODE XREF: Ordinal188+79j
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B184B1D
; ---------------------------------------------------------------------------

loc_6B184ADD:				; CODE XREF: Ordinal188+Fj
		cmp	[ebp+dwBytes], ebx
		jnz	short loc_6B184AAF

loc_6B184AE2:				; CODE XREF: Ordinal188+14j
		push	offset aCindexvalue_24 ; "CIndexValueCollection::AddValue(LPCVOID"...
		call	sub_6B18102E
		pop	ecx
		xor	al, al
		jmp	short loc_6B184B27
; ---------------------------------------------------------------------------

loc_6B184AF1:				; CODE XREF: Ordinal188+35j
		cmp	[ebp+dwBytes], ebx
		mov	esi, [ebp+var_4]
		jbe	short loc_6B184B14
		push	[ebp+dwBytes]	; dwBytes
		lea	ecx, [esi+20h]
		push	[ebp+Src]	; Src
		push	2		; int
		call	Ordinal1202
		test	eax, eax
		jnz	short loc_6B184B14
		push	offset aCindexvalue_25 ; "CIndexValueCollection::AddValue(LPCVOID"...
		jmp	short loc_6B184AD5
; ---------------------------------------------------------------------------

loc_6B184B14:				; CODE XREF: Ordinal188+5Ej
					; Ordinal188+72j
		mov	dword ptr [esi+34h], 0Fh
		mov	bl, 1

loc_6B184B1D:				; CODE XREF: Ordinal188+42j
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		mov	al, bl

loc_6B184B27:				; CODE XREF: Ordinal188+56j
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal188	endp

; Exported entry 189.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal189(VARIANTARG *pvargSrc)
		public Ordinal189
Ordinal189	proc near		; CODE XREF: Ordinal265+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
pvargSrc	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal198
		test	al, al
		jnz	short loc_6B184B67
		push	offset aCindexvalue_26 ; "CIndexValueCollection::AddValue(VARIANT"...
		call	sub_6B18102E

loc_6B184B64:				; CODE XREF: Ordinal189+5Aj
		pop	ecx
		jmp	short loc_6B184B92
; ---------------------------------------------------------------------------

loc_6B184B67:				; CODE XREF: Ordinal189+2Bj
		push	[ebp+pvargSrc]	; pvargSrc
		mov	esi, [ebp+var_4]
		lea	eax, [esi+8]
		push	eax		; pvarDest
		call	ds:VariantCopyInd
		cmp	eax, ebx
		jge	short loc_6B184B89
		push	eax		; Args
		push	offset aCindexvalue_27 ; "CIndexValueCollection::AddValue(VARIANT"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B184B64
; ---------------------------------------------------------------------------

loc_6B184B89:				; CODE XREF: Ordinal189+4Cj
		mov	dword ptr [esi+34h], 10h
		mov	bl, 1

loc_6B184B92:				; CODE XREF: Ordinal189+38j
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal189	endp

; Exported entry 190.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal190
Ordinal190	proc near		; CODE XREF: Ordinal266+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal198
		test	al, al
		jnz	short loc_6B184BDC
		push	offset aCindexvalue_28 ; "CIndexValueCollection::AddValue(ISymBas"...

loc_6B184BD4:				; CODE XREF: Ordinal190+56j
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B184C03
; ---------------------------------------------------------------------------

loc_6B184BDC:				; CODE XREF: Ordinal190+2Bj
		push	[ebp+arg_0]
		xor	eax, eax
		mov	al, [esi+29h]
		mov	esi, [ebp+var_4]
		mov	ecx, esi
		push	eax
		call	Ordinal530
		test	al, al
		jnz	short loc_6B184BFA
		push	offset aCindexvalue_29 ; "CIndexValueCollection::AddValue(ISymBas"...
		jmp	short loc_6B184BD4
; ---------------------------------------------------------------------------

loc_6B184BFA:				; CODE XREF: Ordinal190+4Fj
		mov	dword ptr [esi+34h], 11h
		mov	bl, 1

loc_6B184C03:				; CODE XREF: Ordinal190+38j
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal190	endp

; Exported entry 195.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal195
Ordinal195	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax]	; Src
		call	Ordinal186
		retn	4
Ordinal195	endp

; Exported entry 196.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal196
Ordinal196	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax]	; Src
		call	Ordinal187
		retn	4
Ordinal196	endp

; Exported entry 197.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal197
Ordinal197	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal198
		test	al, al
		jnz	short loc_6B184C69
		push	offset aCindexvalue_30 ; "CIndexValueCollection::AddValue(CMemory"...

loc_6B184C61:				; CODE XREF: Ordinal197+51j
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B184C8B
; ---------------------------------------------------------------------------

loc_6B184C69:				; CODE XREF: Ordinal197+2Bj
		mov	esi, [ebp+var_4]
		push	[ebp+arg_0]
		lea	ecx, [esi+20h]
		call	Ordinal1201
		test	eax, eax
		jnz	short loc_6B184C82
		push	offset aCindexvalue_31 ; "CIndexValueCollection::AddValue(CMemory"...
		jmp	short loc_6B184C61
; ---------------------------------------------------------------------------

loc_6B184C82:				; CODE XREF: Ordinal197+4Aj
		mov	dword ptr [esi+34h], 0Fh
		mov	bl, 1

loc_6B184C8B:				; CODE XREF: Ordinal197+38j
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal197	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B184C9B	proc near		; CODE XREF: Ordinal170+5Fp

var_10		= byte ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		mov	esi, ecx
		cmp	esi, edi
		jz	loc_6B184D32
		mov	ecx, [edi+10h]
		test	ecx, ecx
		jnz	short loc_6B184CC0
		mov	ecx, esi
		call	sub_6B183C5B
		jmp	short loc_6B184D32
; ---------------------------------------------------------------------------

loc_6B184CC0:				; CODE XREF: sub_6B184C9B+1Aj
		mov	edx, [esi+10h]
		cmp	ecx, edx
		mov	eax, [edi+0Ch]
		ja	short loc_6B184CFC
		mov	edx, [esi+0Ch]
		push	edx
		push	esi
		add	ecx, eax
		push	ecx
		push	edi
		push	eax
		lea	eax, [ebp+var_8]
		push	edi
		push	eax
		call	sub_6B183A0B
		mov	eax, [esi+10h]
		add	eax, [esi+0Ch]
		add	esp, 1Ch
		push	eax
		push	esi
		push	[ebp+var_4]
		lea	eax, [ebp+var_8]
		push	[ebp+var_8]
		mov	ecx, esi
		push	eax
		call	sub_6B183AB7
		jmp	short loc_6B184D32
; ---------------------------------------------------------------------------

loc_6B184CFC:				; CODE XREF: sub_6B184C9B+2Dj
		push	ebx
		push	dword ptr [esi+0Ch]
		mov	ebx, eax
		push	esi
		add	ebx, edx
		push	ebx
		push	edi
		push	eax
		lea	eax, [ebp+var_10]
		push	edi
		push	eax
		mov	[ebp+var_8], edi
		call	sub_6B183A0B
		mov	eax, [edi+10h]
		add	eax, [edi+0Ch]
		mov	ecx, [esi+10h]
		add	ecx, [esi+0Ch]
		add	esp, 1Ch
		push	eax
		push	edi
		push	ebx
		push	edi
		push	ecx
		push	esi
		mov	ecx, esi
		call	sub_6B184513
		pop	ebx

loc_6B184D32:				; CODE XREF: sub_6B184C9B+Fj
					; sub_6B184C9B+23j ...
		pop	edi
		mov	eax, esi
		pop	esi
		leave
		retn	4
sub_6B184C9B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B184D3A	proc near		; CODE XREF: Ordinal191+C3p
					; Ordinal275+9Ap

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		sub	esp, 40h
		mov	esi, ecx
		mov	ecx, esp
		mov	[ebp+var_4], esp
		call	Ordinal520
		push	[ebp+arg_0]
		mov	ecx, esi
		call	sub_6B1844B4
		pop	esi
		leave
		retn	4
sub_6B184D3A	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B184D5D(void *, char)
sub_6B184D5D	proc near		; DATA XREF: .rdata:off_6B1AAE04o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal168
		test	[esp+4+arg_0], 1
		jz	short loc_6B184D73
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B184D73:				; CODE XREF: sub_6B184D5D+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B184D5D	endp

; Exported entry 170.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal170
Ordinal170	proc near		; CODE XREF: Ordinal169+26p
					; Ordinal274+30p
					; DATA XREF: ...

var_5C		= byte ptr -5Ch
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_33 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 50h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		mov	esi, ecx
		cmp	esi, edi
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_28], esi
		jz	loc_6B184E8D
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_5C]
		call	Ordinal1571
		and	[ebp+var_4], 0
		push	edi
		mov	ecx, esi
		call	Ordinal539
		push	offset aCindexvalue_32 ; "CIndexValueCollection::operator =()"
		lea	ecx, [ebp+var_48]
		call	Ordinal1089
		add	edi, 70h
		push	edi
		lea	ecx, [esi+70h]
		mov	byte ptr [ebp+var_4], 2
		call	sub_6B184C9B
		jmp	loc_6B184E7D
; ---------------------------------------------------------------------------

loc_6B184DE2:				; DATA XREF: .rdata:6B1BAEA0o
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B184E7A
		retn
; ---------------------------------------------------------------------------

loc_6B184E25:				; DATA XREF: .rdata:6B1BAEB0o
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	eax, [ebp+var_4C]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B184E7A
		retn
; ---------------------------------------------------------------------------

loc_6B184E7A:				; DATA XREF: Ordinal170+A6o
					; Ordinal170+FBo
		mov	esi, [ebp+var_28]

loc_6B184E7D:				; CODE XREF: Ordinal170+64j
		lea	ecx, [ebp+var_48]
		call	Ordinal1090
		lea	ecx, [ebp+var_5C]
		call	Ordinal1573

loc_6B184E8D:				; CODE XREF: Ordinal170+25j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal170	endp ; sp-analysis failed

; Exported entry 191.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal191
Ordinal191	proc near		; DATA XREF: .rdata:6B1AAE0Co
					; .rdata:6B1AB6F4o ...

var_70		= byte ptr -70h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_25		= byte ptr -25h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_34 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 64h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		mov	edi, ecx
		xor	esi, esi
		push	esi
		mov	[ebp+var_14], eax
		push	0FFFFFFFFh
		lea	eax, [edi+8]
		push	eax
		lea	ecx, [ebp+var_70]
		mov	[ebp+var_3C], edi
		call	Ordinal1571
		mov	ecx, edi
		mov	[ebp+var_4], esi
		call	Ordinal173
		push	[ebp+arg_0]
		mov	ecx, edi
		call	Ordinal590
		test	al, al
		jnz	short loc_6B184F03
		push	offset aCindexvalue_33 ; "CIndexValueCollection::Load()	: CValueC"...

loc_6B184EF6:				; CODE XREF: Ordinal191+73j
		call	sub_6B18102E
		pop	ecx
		xor	bl, bl
		jmp	loc_6B1850A7
; ---------------------------------------------------------------------------

loc_6B184F03:				; CODE XREF: Ordinal191+47j
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+var_30]
		push	eax
		mov	[ebp+var_30], esi
		call	Ordinal626
		test	eax, eax
		jnz	short loc_6B184F1D
		push	offset aCindexvalue_34 ; "CIndexValueCollection::Load()	: Archive"...
		jmp	short loc_6B184EF6
; ---------------------------------------------------------------------------

loc_6B184F1D:				; CODE XREF: Ordinal191+6Cj
		mov	eax, [ebp+var_30]
		dec	eax
		mov	bl, 1
		mov	[ebp+var_25], bl
		jz	short loc_6B184F2F
		push	offset aCindexvalue_35 ; "CIndexValueCollection::Load()	: switch("...
		jmp	short loc_6B184F47
; ---------------------------------------------------------------------------

loc_6B184F2F:				; CODE XREF: Ordinal191+7Ej
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+var_2C]
		push	eax
		mov	[ebp+var_2C], esi
		call	Ordinal657
		test	eax, eax
		jnz	short loc_6B184F54
		push	offset aCindexvalue_34 ; "CIndexValueCollection::Load()	: Archive"...

loc_6B184F47:				; CODE XREF: Ordinal191+85j
		call	sub_6B18102E
		pop	ecx
		xor	bl, bl
		jmp	loc_6B1850A0
; ---------------------------------------------------------------------------

loc_6B184F54:				; CODE XREF: Ordinal191+98j
		push	offset aCindexvaluec_6 ; "CIndexValueCollection::Load()"
		lea	ecx, [ebp+var_5C]
		call	Ordinal1089
		push	[ebp+var_2C]
		lea	ecx, [edi+70h]
		mov	byte ptr [ebp+var_4], 2
		call	sub_6B184D3A
		jmp	loc_6B185015
; ---------------------------------------------------------------------------

loc_6B184F75:				; DATA XREF: .rdata:6B1BAF10o
		push	13h
		lea	ecx, [ebp+var_5C]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_5C]
		call	Ordinal1101
		mov	ecx, [ebp+var_64]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_5C]
		call	Ordinal1103
		lea	ecx, [ebp+var_5C]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B18500D
		retn
; ---------------------------------------------------------------------------

loc_6B184FB8:				; DATA XREF: .rdata:6B1BAF20o
		push	15h
		lea	ecx, [ebp+var_5C]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_5C]
		call	Ordinal1101
		mov	eax, [ebp+var_60]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_5C]
		call	Ordinal1103
		lea	ecx, [ebp+var_5C]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B18500D
		retn
; ---------------------------------------------------------------------------

loc_6B18500D:				; DATA XREF: Ordinal191+10Ao
					; Ordinal191+15Fo
		mov	edi, [ebp+var_3C]
		mov	bl, [ebp+var_25]
		xor	esi, esi

loc_6B185015:				; CODE XREF: Ordinal191+C8j
		lea	ecx, [ebp+var_5C]
		mov	[ebp+var_4], 1
		call	Ordinal1635
		test	eax, eax
		jz	short loc_6B185034
		lea	ecx, [ebp+var_5C]
		xor	bl, bl
		call	Ordinal1090
		jmp	short loc_6B1850A0
; ---------------------------------------------------------------------------

loc_6B185034:				; CODE XREF: Ordinal191+17Ej
		cmp	[ebp+var_2C], esi
		mov	[ebp+var_38], esi
		mov	[ebp+var_34], esi
		jbe	short loc_6B185094

loc_6B18503F:				; CODE XREF: Ordinal191+1CDj
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+var_38]
		push	eax
		call	Ordinal657
		test	eax, eax
		jz	short loc_6B185079
		mov	eax, [edi]
		lea	ecx, [ebp+var_34]
		push	ecx
		push	[ebp+var_38]
		mov	ecx, edi
		call	dword ptr [eax+14h]
		test	al, al
		jz	short loc_6B185080
		push	[ebp+arg_0]
		mov	ecx, [ebp+var_34]
		push	edi
		call	Ordinal532
		test	al, al
		jz	short loc_6B185087
		inc	esi
		cmp	esi, [ebp+var_2C]
		jb	short loc_6B18503F
		jmp	short loc_6B185094
; ---------------------------------------------------------------------------

loc_6B185079:				; CODE XREF: Ordinal191+1A5j
		push	offset aCindexvalue_34 ; "CIndexValueCollection::Load()	: Archive"...
		jmp	short loc_6B18508C
; ---------------------------------------------------------------------------

loc_6B185080:				; CODE XREF: Ordinal191+1B7j
		push	offset aCindexvalue_36 ; "CIndexValueCollection::Load()	: GetWrit"...
		jmp	short loc_6B18508C
; ---------------------------------------------------------------------------

loc_6B185087:				; CODE XREF: Ordinal191+1C7j
		push	offset aCindexvalue_37 ; "CIndexValueCollection::Load()	: pValue-"...

loc_6B18508C:				; CODE XREF: Ordinal191+1D6j
					; Ordinal191+1DDj
		call	sub_6B18102E
		pop	ecx
		xor	bl, bl

loc_6B185094:				; CODE XREF: Ordinal191+195j
					; Ordinal191+1CFj
		lea	ecx, [ebp+var_5C]
		call	Ordinal1090
		test	bl, bl
		jnz	short loc_6B1850A7

loc_6B1850A0:				; CODE XREF: Ordinal191+A7j
					; Ordinal191+18Aj
		mov	ecx, edi
		call	Ordinal173

loc_6B1850A7:				; CODE XREF: Ordinal191+56j
					; Ordinal191+1F6j
		lea	ecx, [ebp+var_70]
		call	Ordinal1573
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal191	endp ; sp-analysis failed

; Exported entry 169.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal169
Ordinal169	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		mov	esi, ecx
		call	Ordinal536
		push	[esp+8+arg_0]
		mov	dword ptr [esi], offset	off_6B1AAE04
		xor	ebx, ebx
		mov	ecx, esi
		mov	[esi+74h], ebx
		mov	[esi+78h], ebx
		mov	[esi+7Ch], ebx
		mov	[esi+80h], ebx
		call	Ordinal170
		mov	[esi+4], bl
		mov	eax, esi
		pop	esi
		pop	ebx
		retn	4
Ordinal169	endp

; Exported entry 249.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal249
Ordinal249	proc near		; DATA XREF: .rdata:6B1AB760o
					; .rdata:off_6B1BF428o
		add	ecx, 10h
		jmp	Ordinal173
Ordinal249	endp

; Exported entry 274.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal274
Ordinal274	proc near		; CODE XREF: Ordinal273+4Fp
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		mov	esi, ecx
		cmp	esi, edi
		jz	short loc_6B185144
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+20h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	eax, edi
		add	edi, 18h
		neg	eax
		sbb	eax, eax
		and	eax, edi
		push	eax
		lea	ecx, [esi+18h]
		call	Ordinal170
		lea	ecx, [ebp+var_C]
		call	Ordinal1573

loc_6B185144:				; CODE XREF: Ordinal274+Fj
		pop	edi
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal274	endp

; Exported entry 277.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal277
Ordinal277	proc near		; DATA XREF: .rdata:6B1AB738o
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		push	0
		add	ecx, 14h
		push	0FFFFFFFFh
		push	ecx
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	edi, [ebp+arg_0]
		mov	esi, offset dword_6B1AA4BC
		movsd
		movsd
		movsd
		lea	ecx, [ebp+var_C]
		movsd
		call	Ordinal1573
		pop	edi
		mov	al, 1
		pop	esi
		leave
		retn	4
Ordinal277	endp

; Exported entry 272.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal272
Ordinal272	proc near		; CODE XREF: sub_6B185464+3p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		push	edi
		lea	edi, [esi+18h]
		mov	ecx, edi
		mov	dword ptr [esi], offset	off_6B1AB84C
		mov	dword ptr [esi+8], offset off_6B1AB740
		mov	dword ptr [esi+0Ch], offset off_6B1AB718
		mov	dword ptr [esi+10h], offset off_6B1AB704
		mov	dword ptr [edi], offset	off_6B1AB6EC
		call	Ordinal173
		mov	ecx, edi
		call	Ordinal168
		push	offset Addend	; lpAddend
		mov	dword ptr [esi], offset	off_6B1AABD4
		call	ds:InterlockedDecrement
		pop	edi
		pop	esi
		retn
Ordinal272	endp

; Exported entry 200.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal200(void	*Buf2, int)
		public Ordinal200
Ordinal200	proc near		; CODE XREF: Ordinal279+3j
					; Ordinal282+3j
					; DATA XREF: ...

Buf2		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ebx, [ebp+Buf2]
		push	esi
		push	edi
		push	10h		; Size
		push	ebx		; Buf2
		mov	esi, offset dword_6B1AA47C
		push	esi		; Buf1
		mov	edi, ecx
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	loc_6B18529B
		push	10h		; Size
		push	ebx		; Buf2
		push	offset dword_6B1AA49C ;	Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	loc_6B18529B
		push	10h		; Size
		push	ebx		; Buf2
		push	esi		; Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	loc_6B18529B
		push	10h		; Size
		push	ebx		; Buf2
		push	offset dword_6B1AA4BC ;	Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_6B18529B
		push	10h		; Size
		push	ebx		; Buf2
		push	esi		; Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_6B18528D
		push	10h		; Size
		push	ebx		; Buf2
		push	offset dword_6B1AA4DC ;	Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_6B18528D
		push	10h		; Size
		push	ebx		; Buf2
		push	esi		; Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_6B185288
		push	10h		; Size
		push	ebx		; Buf2
		push	offset dword_6B1AA50C ;	Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_6B185288
		mov	eax, [ebp+arg_4]
		and	dword ptr [eax], 0

loc_6B18527C:				; CODE XREF: Ordinal200+E1j
		mov	eax, 80010200h

loc_6B185281:				; CODE XREF: Ordinal200+EFj
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn	8
; ---------------------------------------------------------------------------

loc_6B185288:				; CODE XREF: Ordinal200+96j
					; Ordinal200+AAj
		lea	eax, [edi+8]
		jmp	short loc_6B185290
; ---------------------------------------------------------------------------

loc_6B18528D:				; CODE XREF: Ordinal200+72j
					; Ordinal200+86j
		lea	eax, [edi+4]

loc_6B185290:				; CODE XREF: Ordinal200+C1j
		lea	ecx, [edi-8]
		neg	ecx
		sbb	ecx, ecx
		and	ecx, eax
		jmp	short loc_6B1852A4
; ---------------------------------------------------------------------------

loc_6B18529B:				; CODE XREF: Ordinal200+1Ej
					; Ordinal200+36j ...
		lea	ecx, [edi-8]
		neg	ecx
		sbb	ecx, ecx
		and	ecx, edi

loc_6B1852A4:				; CODE XREF: Ordinal200+CFj
		test	ecx, ecx
		mov	eax, [ebp+arg_4]
		mov	[eax], ecx
		jz	short loc_6B18527C
		mov	eax, [edi]
		mov	ecx, edi
		call	dword ptr [eax+4]
		mov	eax, 10000h
		jmp	short loc_6B185281
Ordinal200	endp

; Exported entry 157.
; Exported entry 202.
; Exported entry 312.
; Exported entry 395.
; Exported entry 417.
; Exported entry 481.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal157
Ordinal157	proc near		; CODE XREF: Ordinal375+3j
					; Ordinal284+3j
					; DATA XREF: ...
		push	esi		; ccL35_157
					; ccL35_202
					; ccL35_312
					; ccL35_395
					; ccL35_417
		mov	esi, ecx
		push	edi
		lea	eax, [esi-4]
		push	eax		; lpAddend
		call	ds:InterlockedDecrement
		mov	edi, eax
		test	edi, edi
		jnz	short loc_6B1852E5
		add	esi, 0FFFFFFF8h
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+4]
		test	esi, esi
		jz	short loc_6B1852E5
		mov	eax, [esi]
		push	1
		mov	ecx, esi
		call	dword ptr [eax]

loc_6B1852E5:				; CODE XREF: Ordinal157+12j
					; Ordinal157+20j
		mov	eax, edi
		pop	edi
		pop	esi
		retn
Ordinal157	endp

; Exported entry 224.
; Exported entry 334.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal224
Ordinal224	proc near		; DATA XREF: .rdata:6B1AB7A4o
					; .rdata:6B1AC53Co ...
		add	ecx, 10h	; ccL35_224
		jmp	Ordinal561
Ordinal224	endp

; Exported entry 226.
; Exported entry 336.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal336
Ordinal336	proc near		; DATA XREF: .rdata:6B1AB7A0o
					; .rdata:6B1AC538o ...
		add	ecx, 10h	; ccL35_226
		jmp	Ordinal563
Ordinal336	endp

; Exported entry 228.
; Exported entry 338.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal228
Ordinal228	proc near		; DATA XREF: .rdata:6B1AB79Co
					; .rdata:6B1AC534o ...
		add	ecx, 10h	; ccL35_228
		jmp	Ordinal565
Ordinal228	endp

; Exported entry 229.
; Exported entry 339.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal229(int,	double)
		public Ordinal229
Ordinal229	proc near		; DATA XREF: .rdata:6B1AB7E0o
					; .rdata:6B1AC578o ...

var_8		= qword	ptr -8
arg_0		= dword	ptr  4
arg_4		= qword	ptr  8

		fld	[esp+arg_4]	; ccL35_229
		push	ecx
		push	ecx		; double
		fstp	[esp+8+var_8]
		push	[esp+8+arg_0]	; int
		add	ecx, 10h
		call	Ordinal566
		retn	0Ch
Ordinal229	endp

; Exported entry 238.
; Exported entry 348.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal238
Ordinal238	proc near		; DATA XREF: .rdata:6B1AB784o
					; .rdata:6B1AC51Co ...
		add	ecx, 10h	; ccL35_238
		jmp	Ordinal575
Ordinal238	endp

; Exported entry 240.
; Exported entry 350.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal240
Ordinal240	proc near		; DATA XREF: .rdata:6B1AB780o
					; .rdata:6B1AC518o ...
		add	ecx, 10h	; ccL35_240
		jmp	Ordinal577
Ordinal240	endp

; Exported entry 241.
; Exported entry 351.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal241
Ordinal241	proc near		; DATA XREF: .rdata:6B1AB77Co
					; .rdata:6B1AC514o ...
		add	ecx, 10h	; ccL35_241
		jmp	Ordinal578
Ordinal241	endp

; Exported entry 244.
; Exported entry 354.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal354
Ordinal354	proc near		; DATA XREF: .rdata:6B1AB7C8o
					; .rdata:6B1AC560o ...
		add	ecx, 10h	; ccL35_244
		jmp	Ordinal581
Ordinal354	endp

; Exported entry 245.
; Exported entry 355.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal355
Ordinal355	proc near		; DATA XREF: .rdata:6B1AB774o
					; .rdata:6B1AC50Co ...
		add	ecx, 10h	; ccL35_245
		jmp	Ordinal582
Ordinal355	endp

; Exported entry 246.
; Exported entry 356.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal356
Ordinal356	proc near		; DATA XREF: .rdata:6B1AB7C4o
					; .rdata:6B1AC55Co ...
		add	ecx, 10h	; ccL35_246
		jmp	Ordinal583
Ordinal356	endp

; Exported entry 247.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal247
Ordinal247	proc near		; DATA XREF: .rdata:6B1AB74Co
					; .rdata:off_6B1BF428o
		add	ecx, 10h
		jmp	Ordinal171
Ordinal247	endp

; Exported entry 248.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal248
Ordinal248	proc near		; DATA XREF: .rdata:6B1AB75Co
					; .rdata:off_6B1BF428o
		add	ecx, 10h
		jmp	Ordinal172
Ordinal248	endp

; Exported entry 250.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal250
Ordinal250	proc near		; DATA XREF: .rdata:6B1AB848o
					; .rdata:off_6B1BF428o
		add	ecx, 10h
		jmp	Ordinal174
Ordinal250	endp

; Exported entry 251.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal251
Ordinal251	proc near		; DATA XREF: .rdata:6B1AB844o
					; .rdata:off_6B1BF428o
		add	ecx, 10h
		jmp	Ordinal175
Ordinal251	endp

; Exported entry 252.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal252
Ordinal252	proc near		; DATA XREF: .rdata:6B1AB840o
					; .rdata:off_6B1BF428o
		add	ecx, 10h
		jmp	Ordinal176
Ordinal252	endp

; Exported entry 253.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal253
Ordinal253	proc near		; DATA XREF: .rdata:6B1AB83Co
					; .rdata:off_6B1BF428o
		add	ecx, 10h
		jmp	Ordinal177
Ordinal253	endp

; Exported entry 254.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal254
Ordinal254	proc near		; DATA XREF: .rdata:6B1AB838o
					; .rdata:off_6B1BF428o
		add	ecx, 10h
		jmp	Ordinal178
Ordinal254	endp

; Exported entry 255.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal255
Ordinal255	proc near		; DATA XREF: .rdata:6B1AB834o
					; .rdata:off_6B1BF428o
		add	ecx, 10h
		jmp	Ordinal179
Ordinal255	endp

; Exported entry 256.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal256
Ordinal256	proc near		; DATA XREF: .rdata:6B1AB830o
					; .rdata:off_6B1BF428o
		add	ecx, 10h
		jmp	Ordinal180
Ordinal256	endp

; Exported entry 257.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal257
Ordinal257	proc near		; DATA XREF: .rdata:6B1AB82Co
					; .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		add	ecx, 10h
		push	[esp+4+arg_0]
		call	Ordinal181
		retn	8
Ordinal257	endp

; Exported entry 258.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal258
Ordinal258	proc near		; DATA XREF: .rdata:6B1AB828o
					; .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		add	ecx, 10h
		push	[esp+4+arg_0]
		call	Ordinal182
		retn	8
Ordinal258	endp

; Exported entry 259.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal259(double)
		public Ordinal259
Ordinal259	proc near		; DATA XREF: .rdata:6B1AB824o
					; .rdata:off_6B1BF428o

var_8		= qword	ptr -8
arg_0		= qword	ptr  4

		fld	[esp+arg_0]
		push	ecx
		push	ecx		; double
		add	ecx, 10h
		fstp	[esp+8+var_8]
		call	Ordinal183
		retn	8
Ordinal259	endp

; Exported entry 260.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal260
Ordinal260	proc near		; DATA XREF: .rdata:6B1AB820o
					; .rdata:off_6B1BF428o
		add	ecx, 10h
		jmp	Ordinal184
Ordinal260	endp

; Exported entry 261.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal261
Ordinal261	proc near		; DATA XREF: .rdata:6B1AB81Co
					; .rdata:off_6B1BF428o
		add	ecx, 10h
		jmp	Ordinal185
Ordinal261	endp

; Exported entry 262.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal262
Ordinal262	proc near		; DATA XREF: .rdata:6B1AB818o
					; .rdata:off_6B1BF428o
		add	ecx, 10h
		jmp	Ordinal186
Ordinal262	endp

; Exported entry 263.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal263
Ordinal263	proc near		; DATA XREF: .rdata:6B1AB814o
					; .rdata:off_6B1BF428o
		add	ecx, 10h
		jmp	Ordinal187
Ordinal263	endp

; Exported entry 264.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal264
Ordinal264	proc near		; DATA XREF: .rdata:6B1AB810o
					; .rdata:off_6B1BF428o
		add	ecx, 10h
		jmp	Ordinal188
Ordinal264	endp

; Exported entry 265.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal265
Ordinal265	proc near		; DATA XREF: .rdata:6B1AB80Co
					; .rdata:off_6B1BF428o
		add	ecx, 10h
		jmp	Ordinal189
Ordinal265	endp

; Exported entry 266.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal266
Ordinal266	proc near		; DATA XREF: .rdata:6B1AB808o
					; .rdata:off_6B1BF428o
		add	ecx, 10h
		jmp	Ordinal190
Ordinal266	endp

; Exported entry 267.
; Exported entry 361.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal361
Ordinal361	proc near		; DATA XREF: .rdata:6B1AB724o
					; .rdata:6B1AC4C0o ...
		add	ecx, 0Ch	; ccL35_267
		jmp	Ordinal459
Ordinal361	endp

; Exported entry 268.
; Exported entry 362.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal268
Ordinal268	proc near		; DATA XREF: .rdata:6B1AB728o
					; .rdata:6B1AC4C4o ...
		add	ecx, 0Ch	; ccL35_268
		jmp	Ordinal460
Ordinal268	endp

; Exported entry 269.
; Exported entry 363.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal269
Ordinal269	proc near		; DATA XREF: .rdata:6B1AB72Co
					; .rdata:6B1AC4C8o ...
		add	ecx, 0Ch	; ccL35_269
		jmp	Ordinal461
Ordinal269	endp

; Exported entry 270.
; Exported entry 364.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal364
Ordinal364	proc near		; DATA XREF: .rdata:6B1AB730o
					; .rdata:6B1AC4CCo ...
		add	ecx, 0Ch	; ccL35_270
		jmp	Ordinal462
Ordinal364	endp

; Exported entry 271.
; Exported entry 365.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal365
Ordinal365	proc near		; DATA XREF: .rdata:6B1AB734o
					; .rdata:6B1AC4D0o ...
		add	ecx, 0Ch	; ccL35_271
		jmp	Ordinal463
Ordinal365	endp

; Exported entry 279.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal279
Ordinal279	proc near		; DATA XREF: .rdata:off_6B1AB718o
					; .rdata:off_6B1BF428o
		sub	ecx, 4
		jmp	Ordinal200
Ordinal279	endp

; Exported entry 282.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal282
Ordinal282	proc near		; DATA XREF: .rdata:off_6B1AB704o
					; .rdata:off_6B1BF428o
		sub	ecx, 8
		jmp	Ordinal200
Ordinal282	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18543C	proc near		; DATA XREF: .rdata:off_6B1AB6ECo

arg_0		= byte ptr  4

		sub	ecx, 18h	; void *
		jmp	sub_6B185464
sub_6B18543C	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B185444	proc near		; CODE XREF: Ordinal275+3Dp

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	sub_6B187D45
		mov	ecx, [esp+4+arg_0]
		test	ecx, ecx
		jz	short loc_6B18545E
		mov	eax, [ecx]
		push	esi
		push	offset dword_6B1AA4BC
		call	dword ptr [eax]

loc_6B18545E:				; CODE XREF: sub_6B185444+Ej
		mov	eax, [esi]
		pop	esi
		retn	4
sub_6B185444	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B185464(void *, char)
sub_6B185464	proc near		; CODE XREF: sub_6B18543C+3j
					; DATA XREF: .rdata:off_6B1AB84Co

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal272
		test	[esp+4+arg_0], 1
		jz	short loc_6B18547A
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B18547A:				; CODE XREF: sub_6B185464+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B185464	endp

; Exported entry 273.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal273
Ordinal273	proc near		; CODE XREF: Ordinal276+67p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	esi, ecx
		call	sub_6B1833E7
		mov	dword ptr [esi+8], offset off_6B1AB858
		lea	edi, [esi+18h]
		mov	dword ptr [esi+0Ch], offset off_6B1AB6B4
		mov	ecx, edi
		mov	dword ptr [esi+10h], offset off_6B1AB6D8
		call	Ordinal167
		push	[esp+8+arg_0]
		mov	ecx, esi
		mov	dword ptr [esi], offset	off_6B1AB84C
		mov	dword ptr [esi+8], offset off_6B1AB740
		mov	dword ptr [esi+0Ch], offset off_6B1AB718
		mov	dword ptr [esi+10h], offset off_6B1AB704
		mov	dword ptr [edi], offset	off_6B1AB6EC
		call	Ordinal274
		pop	edi
		mov	byte ptr [esi+1Ch], 0
		mov	eax, esi
		pop	esi
		retn	4
Ordinal273	endp

; Exported entry 276.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal276
Ordinal276	proc near		; DATA XREF: .rdata:6B1AB714o
					; .rdata:off_6B1BF428o

var_68		= byte ptr -68h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_35 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 5Ch
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		mov	edi, ecx
		xor	ebx, ebx
		push	ebx
		mov	[ebp+var_14], eax
		push	0FFFFFFFFh
		lea	eax, [edi+10h]
		push	eax
		lea	ecx, [ebp+var_68]
		call	Ordinal1571
		mov	esi, [ebp+arg_0]
		mov	ecx, [esi]
		cmp	ecx, ebx
		mov	[ebp+var_4], ebx
		jz	short loc_6B185520
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		mov	[esi], ebx

loc_6B185520:				; CODE XREF: Ordinal276+38j
		push	offset aCindexvalue_38 ; "CIndexValueCollectionImpl::Clone()"
		lea	ecx, [ebp+var_48]
		call	Ordinal1089
		push	0A0h		; Size
		mov	byte ptr [ebp+var_4], 2
		call	??2@YAPAXI@Z	; operator new(uint)
		cmp	eax, ebx
		pop	ecx
		jz	short loc_6B18554D
		add	edi, 0FFFFFFF0h
		push	edi
		mov	ecx, eax
		call	Ordinal273
		jmp	short loc_6B18554F
; ---------------------------------------------------------------------------

loc_6B18554D:				; CODE XREF: Ordinal276+5Fj
		xor	eax, eax

loc_6B18554F:				; CODE XREF: Ordinal276+6Cj
		mov	ecx, eax
		add	eax, 8
		neg	ecx
		sbb	ecx, ecx
		and	ecx, eax
		jnz	short loc_6B185585
		lea	eax, [ebp+var_28]
		push	eax
		lea	ecx, [ebp+var_54]
		mov	[ebp+var_28], offset aBadAllocation ; "bad allocation"
		call	ds:??0exception@@QAE@ABQBD@Z ; exception::exception(char const * const &)
		push	offset dword_6B1BAC3C
		lea	eax, [ebp+var_54]
		push	eax
		mov	[ebp+var_54], offset off_6B1AABCC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B185585:				; CODE XREF: Ordinal276+7Bj
		mov	[esi], ecx
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		jmp	loc_6B18562C
; ---------------------------------------------------------------------------

loc_6B185591:				; DATA XREF: .rdata:6B1BAF80o
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	ecx, [ebp+var_5C]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B185629
		retn
; ---------------------------------------------------------------------------

loc_6B1855D4:				; DATA XREF: .rdata:6B1BAF90o
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	eax, [ebp+var_58]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B185629
		retn
; ---------------------------------------------------------------------------

loc_6B185629:				; DATA XREF: Ordinal276+EFo
					; Ordinal276+144o
		mov	esi, [ebp+arg_0]

loc_6B18562C:				; CODE XREF: Ordinal276+ADj
		cmp	dword ptr [esi], 0
		lea	ecx, [ebp+var_48]
		setnz	bl
		call	Ordinal1090
		lea	ecx, [ebp+var_68]
		call	Ordinal1573
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal276	endp ; sp-analysis failed

; Exported entry 199.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal199
Ordinal199	proc near		; CODE XREF: Ordinal278+45p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		push	edi
		mov	esi, ecx
		call	sub_6B1833E7
		mov	dword ptr [esi+8], offset off_6B1AB858
		lea	edi, [esi+18h]
		mov	dword ptr [esi+0Ch], offset off_6B1AB6B4
		mov	ecx, edi
		mov	dword ptr [esi+10h], offset off_6B1AB6D8
		call	Ordinal167
		mov	dword ptr [edi], offset	off_6B1AB6EC
		pop	edi
		mov	dword ptr [esi], offset	off_6B1AB84C
		mov	dword ptr [esi+8], offset off_6B1AB740
		mov	dword ptr [esi+0Ch], offset off_6B1AB718
		mov	dword ptr [esi+10h], offset off_6B1AB704
		mov	eax, esi
		pop	esi
		retn
Ordinal199	endp

; Exported entry 278.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal278
Ordinal278	proc near		; CODE XREF: Ordinal592+2Ap
					; DATA XREF: .rdata:off_6B1BF428o

var_60		= dword	ptr -60h
var_4C		= byte ptr -4Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_36 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 54h
		mov	eax, ___security_cookie
		and	[ebp+var_28], 0
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCindexvalue_39 ; "CIndexValueCollectionImpl::CreateIndexV"...
		lea	ecx, [ebp+var_4C]
		mov	[ebp+var_14], eax
		call	Ordinal1089
		and	[ebp+var_4], 0
		push	0A0h		; Size
		mov	byte ptr [ebp+var_4], 1
		call	??2@YAPAXI@Z	; operator new(uint)
		test	eax, eax
		pop	ecx
		jz	short loc_6B1856F9
		mov	ecx, eax
		call	Ordinal199
		mov	ecx, eax
		jmp	short loc_6B1856FB
; ---------------------------------------------------------------------------

loc_6B1856F9:				; CODE XREF: Ordinal278+41j
		xor	ecx, ecx

loc_6B1856FB:				; CODE XREF: Ordinal278+4Cj
		test	ecx, ecx
		mov	[ebp+var_28], ecx
		jnz	short loc_6B18572B
		lea	eax, [ebp+var_2C]
		push	eax
		lea	ecx, [ebp+var_60]
		mov	[ebp+var_2C], offset aBadAllocation ; "bad allocation"
		call	ds:??0exception@@QAE@ABQBD@Z ; exception::exception(char const * const &)
		push	offset dword_6B1BAC3C
		lea	eax, [ebp+var_60]
		push	eax
		mov	[ebp+var_60], offset off_6B1AABCC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18572B:				; CODE XREF: Ordinal278+55j
		add	ecx, 8
		mov	eax, [ecx]
		call	dword ptr [eax+4]

loc_6B185733:				; DATA XREF: sub_6B185755+3Do
					; sub_6B185798+4Fo
		lea	ecx, [ebp+var_4C]
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	eax, [ebp+var_28]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal278	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B185755	proc near		; DATA XREF: .rdata:6B1BAFE8o
		push	13h
		lea	ecx, [ebp-4Ch]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-4Ch]
		call	Ordinal1101
		mov	ecx, [ebp-54h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-4Ch]
		call	Ordinal1103
		lea	ecx, [ebp-4Ch]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B185733
		retn
sub_6B185755	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B185798	proc near		; DATA XREF: .rdata:6B1BAFF8o
		push	15h
		lea	ecx, [ebp-4Ch]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-4Ch]
		call	Ordinal1101
		mov	eax, [ebp-50h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-4Ch]
		call	Ordinal1103
		lea	ecx, [ebp-4Ch]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B185733
		retn
sub_6B185798	endp

; Exported entry 275.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal275
Ordinal275	proc near		; DATA XREF: .rdata:6B1AB710o
					; .rdata:off_6B1BF428o

var_64		= byte ptr -64h
var_58		= dword	ptr -58h
var_54		= byte ptr -54h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_37 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 58h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		mov	esi, ecx
		xor	edi, edi
		push	edi
		mov	[ebp+var_14], eax
		push	0FFFFFFFFh
		lea	eax, [esi+10h]
		push	eax
		lea	ecx, [ebp+var_64]
		mov	[ebp+var_2C], esi
		call	Ordinal1571
		push	[ebp+arg_0]
		lea	ecx, [ebp+var_28]
		mov	[ebp+var_4], edi
		mov	[ebp+var_28], edi
		call	sub_6B185444
		cmp	[ebp+var_28], edi
		mov	byte ptr [ebp+var_4], 1
		jnz	short loc_6B18585D
		push	offset aCindexvalue_40 ; "CIndexValueCollectionImpl::Copy() : pIn"...
		call	sub_6B18102E
		pop	ecx
		mov	ecx, [ebp+var_28]
		cmp	ecx, edi
		mov	byte ptr [ebp+var_4], 0
		jz	short loc_6B185856
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		mov	[ebp+var_28], edi

loc_6B185856:				; CODE XREF: Ordinal275+5Fj
					; Ordinal275+232j ...
		xor	bl, bl
		jmp	loc_6B1859CA
; ---------------------------------------------------------------------------

loc_6B18585D:				; CODE XREF: Ordinal275+49j
		lea	ecx, [esi-8]
		mov	eax, [ecx]
		call	dword ptr [eax+20h]
		mov	ecx, [ebp+var_28]
		mov	eax, [ecx]
		call	dword ptr [eax+0Ch]
		push	offset aCindexvalue_41 ; "CIndexValueCollectionImpl::Copy()"
		lea	ecx, [ebp+var_54]
		mov	[ebp+arg_0], eax
		call	Ordinal1089
		push	[ebp+arg_0]
		lea	ecx, [esi+78h]
		mov	byte ptr [ebp+var_4], 3
		call	sub_6B184D3A
		jmp	loc_6B18592C
; ---------------------------------------------------------------------------

loc_6B185891:				; DATA XREF: .rdata:6B1BB060o
		push	13h
		lea	ecx, [ebp+var_54]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_54]
		call	Ordinal1101
		mov	ecx, [ebp+var_30]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_54]
		call	Ordinal1103
		lea	ecx, [ebp+var_54]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B185929
		retn
; ---------------------------------------------------------------------------

loc_6B1858D4:				; DATA XREF: .rdata:6B1BB070o
		push	15h
		lea	ecx, [ebp+var_54]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_54]
		call	Ordinal1101
		mov	eax, [ebp+var_58]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_54]
		call	Ordinal1103
		lea	ecx, [ebp+var_54]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B185929
		retn
; ---------------------------------------------------------------------------

loc_6B185929:				; DATA XREF: Ordinal275+E1o
					; Ordinal275+136o
		mov	esi, [ebp+var_2C]

loc_6B18592C:				; CODE XREF: Ordinal275+9Fj
		lea	ecx, [ebp+var_54]
		mov	[ebp+var_4], 2
		call	Ordinal1635
		test	eax, eax
		jnz	loc_6B185A0E
		xor	ebx, ebx
		cmp	[ebp+arg_0], ebx
		mov	[ebp+var_34], ebx
		jbe	short loc_6B1859A8

loc_6B18594D:				; CODE XREF: Ordinal275+1B9j
		mov	ecx, [ebp+var_28]
		mov	eax, [ecx]
		push	ebx
		call	dword ptr [eax+18h]
		mov	ecx, [ebp+var_28]
		mov	[ebp+var_2C], eax
		mov	eax, [ecx]
		push	ebx
		call	dword ptr [eax+14h]
		cmp	[ebp+var_2C], 0
		mov	[ebp+var_30], eax
		jz	loc_6B1859FB
		test	eax, eax
		jz	loc_6B1859FB
		lea	ecx, [ebp+var_34]
		push	ecx
		lea	edi, [esi+8]
		mov	eax, [edi]
		push	ebx
		mov	ecx, edi
		call	dword ptr [eax+14h]
		test	al, al
		jz	short loc_6B1859ED
		push	[ebp+var_34]
		mov	ecx, edi
		push	[ebp+var_2C]
		push	[ebp+var_30]
		push	ebx
		push	[ebp+var_28]
		call	Ordinal594
		test	al, al
		jz	short loc_6B1859F4
		inc	ebx
		cmp	ebx, [ebp+arg_0]
		jb	short loc_6B18594D

loc_6B1859A8:				; CODE XREF: Ordinal275+15Ej
		lea	ecx, [ebp+var_54]
		mov	byte ptr [esi+0Ch], 1
		call	Ordinal1090
		mov	ecx, [ebp+var_28]
		test	ecx, ecx
		mov	byte ptr [ebp+var_4], 0
		jz	short loc_6B1859C8
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		and	[ebp+var_28], 0

loc_6B1859C8:				; CODE XREF: Ordinal275+1D0j
		mov	bl, 1

loc_6B1859CA:				; CODE XREF: Ordinal275+6Bj
		lea	ecx, [ebp+var_64]
		call	Ordinal1573
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
; ---------------------------------------------------------------------------

loc_6B1859ED:				; CODE XREF: Ordinal275+19Bj
		push	offset aCindexvalue_42 ; "CIndexValueCollectionImpl::Copy() : Get"...
		jmp	short loc_6B185A00
; ---------------------------------------------------------------------------

loc_6B1859F4:				; CODE XREF: Ordinal275+1B3j
		push	offset aCindexvalue_43 ; "CIndexValueCollectionImpl::Copy() : Cop"...
		jmp	short loc_6B185A00
; ---------------------------------------------------------------------------

loc_6B1859FB:				; CODE XREF: Ordinal275+17Cj
					; Ordinal275+184j
		push	offset aCindexvalue_44 ; "CIndexValueCollectionImpl::Copy() : eVa"...

loc_6B185A00:				; CODE XREF: Ordinal275+205j
					; Ordinal275+20Cj
		call	sub_6B18102E
		pop	ecx
		lea	ecx, [esi-8]
		mov	eax, [ecx]
		call	dword ptr [eax+20h]

loc_6B185A0E:				; CODE XREF: Ordinal275+150j
		lea	ecx, [ebp+var_54]
		call	Ordinal1090
		mov	ecx, [ebp+var_28]
		test	ecx, ecx
		mov	byte ptr [ebp+var_4], 0
		jz	loc_6B185856
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		and	[ebp+var_28], 0
		jmp	loc_6B185856
Ordinal275	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


sub_6B185A33	proc near		; CODE XREF: Ordinal286+7Dp
					; Ordinal295+59p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 0FFFFFFFFh
		push	esi
		mov	esi, ecx
		jnz	short loc_6B185A4C
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_6B185A4C
		push	eax		; Str
		call	strlen
		pop	ecx

loc_6B185A4C:				; CODE XREF: sub_6B185A33+Aj
					; sub_6B185A33+10j
		push	eax
		mov	ecx, esi
		call	sub_6B181598
		pop	esi
		retn	4
sub_6B185A33	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6B185A58(int, size_t Size)
sub_6B185A58	proc near		; CODE XREF: sub_6B185AA4+1Bp
					; sub_6B18F101+Dp ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		mov	ebx, ecx
		mov	eax, [ebx]
		push	edi
		mov	edi, [eax-0Ch]
		sub	esi, eax
		mov	eax, [ebp+Size]
		add	eax, edi
		push	eax
		mov	[ebp+var_4], eax
		call	sub_6B1818C7
		cmp	esi, edi
		ja	short loc_6B185A81
		add	esi, eax
		jmp	short loc_6B185A84
; ---------------------------------------------------------------------------

loc_6B185A81:				; CODE XREF: sub_6B185A58+23j
		mov	esi, [ebp+arg_0]

loc_6B185A84:				; CODE XREF: sub_6B185A58+27j
		push	[ebp+Size]	; Size
		add	eax, edi
		push	esi		; Src
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch
		push	[ebp+var_4]
		mov	ecx, ebx
		call	sub_6B181598
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
sub_6B185A58	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6B185AA4(char *Str)
sub_6B185AA4	proc near		; CODE XREF: Ordinal286+107p
					; Ordinal295+E3p ...

Str		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+Str]
		test	esi, esi
		push	edi
		mov	edi, ecx
		jnz	short loc_6B185AB4
		xor	eax, eax
		jmp	short loc_6B185ABB
; ---------------------------------------------------------------------------

loc_6B185AB4:				; CODE XREF: sub_6B185AA4+Aj
		push	esi		; Str
		call	strlen
		pop	ecx

loc_6B185ABB:				; CODE XREF: sub_6B185AA4+Ej
		push	eax		; Size
		push	esi		; int
		mov	ecx, edi
		call	sub_6B185A58
		pop	edi
		pop	esi
		retn	4
sub_6B185AA4	endp

; Exported entry 296.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal296
Ordinal296	proc near		; CODE XREF: Ordinal288+9p
					; Ordinal289+9p ...

var_C		= byte ptr -0Ch
lpValueName	= byte ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		lea	ecx, [ebp+var_C]
		call	Ordinal1316
		xor	ebx, ebx
		push	ebx		; int
		push	20019h		; samDesired
		push	offset aSoftwareSyma_1 ; "Software\\Symantec\\InstalledApps"
		push	80000002h	; hKey
		lea	ecx, [ebp+var_C]
		call	Ordinal1321
		test	eax, eax
		jnz	short loc_6B185B03
		push	offset aCinstalledapps ; "CInstalledApps::GetInstAppsDirectory() "...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B185B49
; ---------------------------------------------------------------------------

loc_6B185B03:				; CODE XREF: Ordinal296+2Bj
		push	esi		; Args
		mov	esi, [ebp+arg_4]
		push	esi		; int
		push	dword ptr [ebp+lpValueName] ; lpValueName
		lea	ecx, [ebp+var_C]
		call	Ordinal1332
		test	eax, eax
		jz	short loc_6B185B3D
		mov	eax, [esi]
		cmp	[eax-0Ch], ebx
		jz	short loc_6B185B3D
		push	5Ch
		mov	ecx, esi
		call	sub_6B182485
		push	dword ptr [esi]
		push	dword ptr [ebp+lpValueName] ; Args
		push	offset aCinstalledap_0 ; "CInstalledApps::GetInstAppsDirectory() "...
		call	sub_6B181006
		add	esp, 0Ch
		mov	bl, 1
		jmp	short loc_6B185B48
; ---------------------------------------------------------------------------

loc_6B185B3D:				; CODE XREF: Ordinal296+4Cj
					; Ordinal296+53j
		push	offset aCinstalledap_1 ; "CInstalledApps::GetInstAppsDirectory() "...
		call	sub_6B18102E
		pop	ecx

loc_6B185B48:				; CODE XREF: Ordinal296+72j
		pop	esi

loc_6B185B49:				; CODE XREF: Ordinal296+38j
		lea	ecx, [ebp+var_C]
		call	Ordinal1318
		mov	al, bl
		pop	ebx
		leave
		retn
Ordinal296	endp

; Exported entry 288.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal288
Ordinal288	proc near		; CODE XREF: Ordinal433+11p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		push	offset aNav	; "NAV"
		call	Ordinal296
		pop	ecx
		pop	ecx
		retn
Ordinal288	endp

; Exported entry 289.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal289
Ordinal289	proc near		; CODE XREF: Ordinal432+11p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		push	offset aNortonInternet ; "Norton Internet Security"
		call	Ordinal296
		test	al, al
		pop	ecx
		pop	ecx
		jnz	short loc_6B185B90
		push	[esp+arg_0]
		push	offset aInternetSecuri ; "Internet Security"
		call	Ordinal296
		test	al, al
		pop	ecx
		pop	ecx
		jnz	short loc_6B185B90
		retn
; ---------------------------------------------------------------------------

loc_6B185B90:				; CODE XREF: Ordinal289+12j
					; Ordinal289+26j
		mov	al, 1
		retn
Ordinal289	endp

; Exported entry 290.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal290
Ordinal290	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		push	offset aNortonIntern_0 ; "Norton Internet Security Data"
		call	Ordinal296
		test	al, al
		pop	ecx
		pop	ecx
		jnz	short loc_6B185BBC
		push	[esp+arg_0]
		push	offset aInternetSecu_0 ; "Internet Security Data"
		call	Ordinal296
		test	al, al
		pop	ecx
		pop	ecx
		jnz	short loc_6B185BBC
		retn
; ---------------------------------------------------------------------------

loc_6B185BBC:				; CODE XREF: Ordinal290+12j
					; Ordinal290+26j
		mov	al, 1
		retn
Ordinal290	endp

; Exported entry 291.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal291
Ordinal291	proc near		; CODE XREF: Ordinal434+11p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		push	offset aAntispam ; "AntiSpam"
		call	Ordinal296
		pop	ecx
		pop	ecx
		retn
Ordinal291	endp

; Exported entry 292.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal292
Ordinal292	proc near		; CODE XREF: Ordinal435+11p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		push	offset aAntispamEngine ; "AntiSpam Engine"
		call	Ordinal296
		pop	ecx
		pop	ecx
		retn
Ordinal292	endp

; Exported entry 293.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal293
Ordinal293	proc near		; CODE XREF: Ordinal436+11p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		push	offset aAdblocking ; "AdBlocking"
		call	Ordinal296
		pop	ecx
		pop	ecx
		retn
Ordinal293	endp

; Exported entry 294.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal294
Ordinal294	proc near		; CODE XREF: Ordinal437+11p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		push	offset aSpbbc	; "SPBBC"
		call	Ordinal296
		pop	ecx
		pop	ecx
		retn
Ordinal294	endp

; Exported entry 286.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal286
Ordinal286	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_60		= dword	ptr -60h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_25		= byte ptr -25h
Src		= byte ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_38 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		mov	[ebp+var_10], esp
		push	esi
		push	offset aCommonClientDa ; "Common Client	Data"
		mov	[ebp+var_14], eax
		mov	[ebp+var_25], 1
		call	Ordinal296
		test	al, al
		pop	ecx
		pop	ecx
		jnz	loc_6B185DCD
		push	offset aCinstalledap_2 ; "CInstalledApps::GetCCDataDirectory() : "...
		call	sub_6B18102E
		xor	ebx, ebx
		lea	ecx, [ebp+var_48]
		mov	[ebp+var_25], bl
		mov	[esp+60h+var_60], offset aCinstalledap_3 ; "CInstalledApps::GetCCDataDirectory()"
		call	Ordinal1089
		mov	[ebp+var_4], ebx
		push	104h
		mov	ecx, esi
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B1818C7
		push	ebx		; fCreate
		push	23h		; csidl
		push	eax		; pszPath
		push	ebx		; hwnd
		call	ds:SHGetSpecialFolderPathA
		test	eax, eax
		push	0FFFFFFFFh
		mov	ecx, esi
		setnz	[ebp+var_25]
		call	sub_6B185A33
		cmp	[ebp+var_25], bl
		jnz	short loc_6B185CE7
		push	offset aCinstalledap_4 ; "CInstalledApps::GetCCDataDirectory() : "...
		call	sub_6B18102E
		pop	ecx
		lea	ecx, [ebp+var_20]
		call	Ordinal1316
		push	ebx		; int
		push	20019h		; samDesired
		push	offset aSoftwareMicros ; "Software\\Microsoft\\Windows\\CurrentVersi"...
		push	80000002h	; hKey
		lea	ecx, [ebp+var_20]
		call	Ordinal1321
		test	eax, eax
		jz	short loc_6B185CD1
		push	esi		; int
		push	offset aCommonAppdata ;	"Common	AppData"
		lea	ecx, [ebp+var_20]
		call	Ordinal1332
		test	eax, eax
		jz	short loc_6B185CD1
		mov	[ebp+var_25], 1
		jmp	short loc_6B185CDF
; ---------------------------------------------------------------------------

loc_6B185CD1:				; CODE XREF: Ordinal286+B4j
					; Ordinal286+C6j
		push	offset aCinstalledap_5 ; "CInstalledApps::GetCCDataDirectory() : "...
		call	sub_6B18102E
		pop	ecx
		mov	[ebp+var_25], bl

loc_6B185CDF:				; CODE XREF: Ordinal286+CCj
		lea	ecx, [ebp+var_20]
		call	Ordinal1318

loc_6B185CE7:				; CODE XREF: Ordinal286+85j
		mov	eax, [esi]
		cmp	[eax-0Ch], ebx
		jnz	short loc_6B185CF1
		mov	[ebp+var_25], bl

loc_6B185CF1:				; CODE XREF: Ordinal286+E9j
		cmp	[ebp+var_25], bl
		jz	loc_6B185DB1
		push	5Ch
		mov	ecx, esi
		call	sub_6B182485
		push	offset aSymantecCommon ; "\\Symantec\\Common Client"
		mov	ecx, esi
		call	sub_6B185AA4
		jmp	loc_6B185DB1
; ---------------------------------------------------------------------------

loc_6B185D14:				; DATA XREF: .rdata:6B1BB0C8o
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B185DAC
		retn
; ---------------------------------------------------------------------------

loc_6B185D57:				; DATA XREF: .rdata:6B1BB0D8o
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	eax, [ebp+var_4C]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B185DAC
		retn
; ---------------------------------------------------------------------------

loc_6B185DAC:				; DATA XREF: Ordinal286+14Eo
					; Ordinal286+1A3o
		mov	esi, [ebp+arg_0]
		xor	ebx, ebx

loc_6B185DB1:				; CODE XREF: Ordinal286+F1j
					; Ordinal286+10Cj
		lea	ecx, [ebp+var_48]
		call	Ordinal1635
		test	eax, eax
		jz	short loc_6B185DC0
		mov	[ebp+var_25], bl

loc_6B185DC0:				; CODE XREF: Ordinal286+1B8j
		lea	ecx, [ebp+var_48]
		call	Ordinal1090
		cmp	[ebp+var_25], bl
		jz	short loc_6B185DDB

loc_6B185DCD:				; CODE XREF: Ordinal286+31j
		push	dword ptr [esi]	; Args
		push	offset aCinstalledap_6 ; "CInstalledApps::GetCCDataDirectory() : "...
		call	sub_6B181006
		pop	ecx
		pop	ecx

loc_6B185DDB:				; CODE XREF: Ordinal286+1C8j
		mov	ecx, [ebp+var_C]
		mov	al, [ebp+var_25]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal286	endp ; sp-analysis failed

; Exported entry 295.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal295
Ordinal295	proc near		; CODE XREF: Ordinal285+24p
					; Ordinal287+56p
					; DATA XREF: ...

var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_25		= byte ptr -25h
Src		= byte ptr -24h
var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_39 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCinstalledap_7 ; "CInstalledApps::GetSymSharedDirectory()"...
		lea	ecx, [ebp+var_48]
		mov	[ebp+var_14], eax
		mov	[ebp+var_25], 1
		call	Ordinal1089
		mov	esi, [ebp+arg_0]
		xor	ebx, ebx
		mov	[ebp+var_4], ebx
		push	104h
		mov	ecx, esi
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B1818C7
		push	ebx		; fCreate
		push	2Bh		; csidl
		push	eax		; pszPath
		push	ebx		; hwnd
		call	ds:SHGetSpecialFolderPathA
		test	eax, eax
		push	0FFFFFFFFh
		mov	ecx, esi
		setnz	[ebp+var_25]
		call	sub_6B185A33
		cmp	[ebp+var_25], bl
		jnz	short loc_6B185EB5
		push	offset aCinstalledap_8 ; "CInstalledApps::GetSymSharedDirectory()"...
		call	sub_6B18102E
		pop	ecx
		lea	ecx, [ebp+var_20]
		call	Ordinal1316
		push	ebx		; int
		push	20019h		; samDesired
		push	offset aSoftwareMicr_0 ; "Software\\Microsoft\\Windows\\CurrentVersi"...
		push	80000002h	; hKey
		lea	ecx, [ebp+var_20]
		call	Ordinal1321
		test	eax, eax
		jz	short loc_6B185E9F
		push	esi		; int
		push	offset aCommonfilesdir ; "CommonFilesDir"
		lea	ecx, [ebp+var_20]
		call	Ordinal1332
		test	eax, eax
		jz	short loc_6B185E9F
		mov	[ebp+var_25], 1
		jmp	short loc_6B185EAD
; ---------------------------------------------------------------------------

loc_6B185E9F:				; CODE XREF: Ordinal295+90j
					; Ordinal295+A2j
		push	offset aCinstalledap_9 ; "CInstalledApps::GetSymSharedDirectory()"...
		call	sub_6B18102E
		pop	ecx
		mov	[ebp+var_25], bl

loc_6B185EAD:				; CODE XREF: Ordinal295+A8j
		lea	ecx, [ebp+var_20]
		call	Ordinal1318

loc_6B185EB5:				; CODE XREF: Ordinal295+61j
		mov	eax, [esi]
		cmp	[eax-0Ch], ebx
		jnz	short loc_6B185EBF
		mov	[ebp+var_25], bl

loc_6B185EBF:				; CODE XREF: Ordinal295+C5j
		cmp	[ebp+var_25], bl
		jz	loc_6B185F7F
		push	5Ch
		mov	ecx, esi
		call	sub_6B182485
		push	offset aSymantecShared ; "\\Symantec Shared"
		mov	ecx, esi
		call	sub_6B185AA4
		jmp	loc_6B185F7F
; ---------------------------------------------------------------------------

loc_6B185EE2:				; DATA XREF: .rdata:6B1BB130o
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B185F7A
		retn
; ---------------------------------------------------------------------------

loc_6B185F25:				; DATA XREF: .rdata:6B1BB140o
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	eax, [ebp+var_4C]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B185F7A
		retn
; ---------------------------------------------------------------------------

loc_6B185F7A:				; DATA XREF: Ordinal295+12Ao
					; Ordinal295+17Fo
		mov	esi, [ebp+arg_0]
		xor	ebx, ebx

loc_6B185F7F:				; CODE XREF: Ordinal295+CDj
					; Ordinal295+E8j
		lea	ecx, [ebp+var_48]
		call	Ordinal1635
		test	eax, eax
		jz	short loc_6B185F8E
		mov	[ebp+var_25], bl

loc_6B185F8E:				; CODE XREF: Ordinal295+194j
		cmp	[ebp+var_25], bl
		jz	short loc_6B185FA1
		push	dword ptr [esi]	; Args
		push	offset aCinstalleda_10 ; "CInstalledApps::GetSymSharedDirectory()"...
		call	sub_6B181006
		pop	ecx
		pop	ecx

loc_6B185FA1:				; CODE XREF: Ordinal295+19Cj
		lea	ecx, [ebp+var_48]
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	al, [ebp+var_25]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal295	endp ; sp-analysis failed

; Exported entry 285.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal285
Ordinal285	proc near		; CODE XREF: Ordinal431+11p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		push	esi
		push	offset aCommonClient ; "Common Client"
		mov	bl, 1
		call	Ordinal296
		test	al, al
		pop	ecx
		pop	ecx
		jnz	short loc_6B186002
		push	offset aCinstalleda_11 ; "CInstalledApps::GetCCDirectory() : GetI"...
		call	sub_6B18102E
		push	esi
		call	Ordinal295
		test	al, al
		pop	ecx
		pop	ecx
		jnz	short loc_6B186000
		push	offset aCinstalleda_12 ; "CInstalledApps::GetCCDirectory() : GetS"...
		call	sub_6B18102E
		xor	bl, bl
		jmp	short loc_6B18600F
; ---------------------------------------------------------------------------

loc_6B186000:				; CODE XREF: Ordinal285+2Dj
		mov	bl, 1

loc_6B186002:				; CODE XREF: Ordinal285+17j
		push	dword ptr [esi]	; Args
		push	offset aCinstalleda_13 ; "CInstalledApps::GetCCDirectory() : \"%s\""...
		call	sub_6B181006
		pop	ecx

loc_6B18600F:				; CODE XREF: Ordinal285+3Bj
		pop	ecx
		pop	esi
		mov	al, bl
		pop	ebx
		retn
Ordinal285	endp

; Exported entry 287.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal287
Ordinal287	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_60		= dword	ptr -60h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_25		= byte ptr -25h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_40 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		mov	[ebp+var_10], esp
		push	esi
		push	offset aCommonClientDe ; "Common Client	Decomposers"
		mov	[ebp+var_14], eax
		mov	bl, 1
		call	Ordinal296
		test	al, al
		pop	ecx
		pop	ecx
		jnz	loc_6B186161
		push	offset aCinstalleda_14 ; "CInstalledApps::GetCCDecDirectory() :	G"...
		call	sub_6B18102E
		lea	ecx, [ebp+var_48]
		mov	[esp+60h+var_60], offset aCinstalleda_15 ; "CInstalledApps::GetCCDecDirectory()"
		call	Ordinal1089
		and	[ebp+var_4], 0
		push	esi
		mov	byte ptr [ebp+var_4], bl
		call	Ordinal295
		test	al, al
		pop	ecx
		jnz	short loc_6B186089
		push	offset aCinstalleda_16 ; "CInstalledApps::GetCCDecDirectory() :	G"...
		call	sub_6B18102E
		pop	ecx
		mov	[ebp+var_25], 0
		jmp	loc_6B186142
; ---------------------------------------------------------------------------

loc_6B186089:				; CODE XREF: Ordinal287+5Ej
		push	5Ch
		mov	ecx, esi
		mov	[ebp+var_25], 1
		call	sub_6B182485
		push	offset aDecomposers ; "\\Decomposers"
		mov	ecx, esi
		call	sub_6B185AA4
		jmp	loc_6B186142
; ---------------------------------------------------------------------------

loc_6B1860A7:				; DATA XREF: .rdata:6B1BB198o
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B18613F
		retn
; ---------------------------------------------------------------------------

loc_6B1860EA:				; DATA XREF: .rdata:6B1BB1A8o
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	eax, [ebp+var_4C]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B18613F
		retn
; ---------------------------------------------------------------------------

loc_6B18613F:				; DATA XREF: Ordinal287+CFo
					; Ordinal287+124o
		mov	esi, [ebp+arg_0]

loc_6B186142:				; CODE XREF: Ordinal287+6Fj
					; Ordinal287+8Dj
		lea	ecx, [ebp+var_48]
		call	Ordinal1635
		test	eax, eax
		jz	short loc_6B186152
		xor	bl, bl
		jmp	short loc_6B186155
; ---------------------------------------------------------------------------

loc_6B186152:				; CODE XREF: Ordinal287+137j
		mov	bl, [ebp+var_25]

loc_6B186155:				; CODE XREF: Ordinal287+13Bj
		lea	ecx, [ebp+var_48]
		call	Ordinal1090
		test	bl, bl
		jz	short loc_6B18616F

loc_6B186161:				; CODE XREF: Ordinal287+2Fj
		push	dword ptr [esi]	; Args
		push	offset aCinstalleda_17 ; "CInstalledApps::GetCCDecDirectory() :	\""...
		call	sub_6B181006
		pop	ecx
		pop	ecx

loc_6B18616F:				; CODE XREF: Ordinal287+14Aj
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal287	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_6B186283

loc_6B186188:				; CODE XREF: sub_6B186283+3j
					; sub_6B1A92AF+6j
		add	ecx, 8
		jmp	Ordinal521
; END OF FUNCTION CHUNK	FOR sub_6B186283

; =============== S U B	R O U T	I N E =======================================


sub_6B186190	proc near		; CODE XREF: sub_6B18653A+100p
					; sub_6B18653A+116p ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, [edx]
		push	esi
		mov	esi, [eax+8]
		mov	[edx], esi
		mov	esi, [eax+8]
		cmp	byte ptr [esi+59h], 0
		jnz	short loc_6B1861A8
		mov	[esi+4], edx

loc_6B1861A8:				; CODE XREF: sub_6B186190+13j
		mov	esi, [edx+4]
		mov	[eax+4], esi
		mov	ecx, [ecx+4]
		cmp	edx, [ecx+4]
		pop	esi
		jnz	short loc_6B1861BC
		mov	[ecx+4], eax
		jmp	short loc_6B1861CB
; ---------------------------------------------------------------------------

loc_6B1861BC:				; CODE XREF: sub_6B186190+25j
		mov	ecx, [edx+4]
		cmp	edx, [ecx+8]
		jnz	short loc_6B1861C9
		mov	[ecx+8], eax
		jmp	short loc_6B1861CB
; ---------------------------------------------------------------------------

loc_6B1861C9:				; CODE XREF: sub_6B186190+32j
		mov	[ecx], eax

loc_6B1861CB:				; CODE XREF: sub_6B186190+2Aj
					; sub_6B186190+37j
		mov	[eax+8], edx
		mov	[edx+4], eax
		retn	4
sub_6B186190	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1861D4	proc near		; CODE XREF: sub_6B186E47+40p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		push	esi
		push	[esp+4+arg_4]
		mov	esi, ecx
		lea	ecx, [esi+8]
		mov	[esi], eax
		call	Ordinal522
		mov	eax, esi
		pop	esi
		retn	8
sub_6B1861D4	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1861F1	proc near		; CODE XREF: Ordinal304+4Bp
					; Ordinal306+8Bp ...
		mov	eax, [ecx]
		push	ebx
		xor	bl, bl
		cmp	[eax+59h], bl
		jnz	short loc_6B186225
		mov	edx, [eax+8]
		cmp	[edx+59h], bl
		jnz	short loc_6B18621B
		jmp	short loc_6B186207
; ---------------------------------------------------------------------------

loc_6B186205:				; CODE XREF: sub_6B1861F1+1Bj
		mov	edx, eax

loc_6B186207:				; CODE XREF: sub_6B1861F1+12j
		mov	eax, [edx]
		cmp	[eax+59h], bl
		jz	short loc_6B186205
		mov	[ecx], edx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6B186212:				; CODE XREF: sub_6B1861F1+30j
		mov	edx, [ecx]
		cmp	edx, [eax+8]
		jnz	short loc_6B186223
		mov	[ecx], eax

loc_6B18621B:				; CODE XREF: sub_6B1861F1+10j
		mov	eax, [eax+4]
		cmp	[eax+59h], bl
		jz	short loc_6B186212

loc_6B186223:				; CODE XREF: sub_6B1861F1+26j
		mov	[ecx], eax

loc_6B186225:				; CODE XREF: sub_6B1861F1+8j
		pop	ebx
		retn
sub_6B1861F1	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B186227	proc near		; CODE XREF: sub_6B1869B0+57p
					; sub_6B186B5F+65p
		mov	eax, [ecx]
		push	ebx
		xor	bl, bl
		cmp	[eax+59h], bl
		jz	short loc_6B186236
		mov	eax, [eax+8]
		jmp	short loc_6B186262
; ---------------------------------------------------------------------------

loc_6B186236:				; CODE XREF: sub_6B186227+8j
		mov	edx, [eax]
		cmp	[edx+59h], bl
		jnz	short loc_6B186255
		jmp	short loc_6B186241
; ---------------------------------------------------------------------------

loc_6B18623F:				; CODE XREF: sub_6B186227+20j
		mov	edx, eax

loc_6B186241:				; CODE XREF: sub_6B186227+16j
		mov	eax, [edx+8]
		cmp	[eax+59h], bl
		jz	short loc_6B18623F
		mov	[ecx], edx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6B18624D:				; CODE XREF: sub_6B186227+34j
		mov	edx, [ecx]
		cmp	edx, [eax]
		jnz	short loc_6B18625D
		mov	[ecx], eax

loc_6B186255:				; CODE XREF: sub_6B186227+14j
		mov	eax, [eax+4]
		cmp	[eax+59h], bl
		jz	short loc_6B18624D

loc_6B18625D:				; CODE XREF: sub_6B186227+2Aj
		cmp	[eax+59h], bl
		jnz	short loc_6B186264

loc_6B186262:				; CODE XREF: sub_6B186227+Dj
		mov	[ecx], eax

loc_6B186264:				; CODE XREF: sub_6B186227+39j
		pop	ebx
		retn
sub_6B186227	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B186266	proc near		; CODE XREF: sub_6B18631F+1Dp

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, ecx
		mov	ecx, [eax]
		add	eax, 8
		mov	[esi], ecx
		push	eax
		lea	ecx, [esi+8]
		call	Ordinal522
		mov	eax, esi
		pop	esi
		retn	4
sub_6B186266	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B186283	proc near		; CODE XREF: sub_6B186977+1Fp

; FUNCTION CHUNK AT 6B186188 SIZE 00000008 BYTES

		add	ecx, 10h
		jmp	loc_6B186188
sub_6B186283	endp

; Exported entry 301.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal301
Ordinal301	proc near		; CODE XREF: Ordinal357+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	esi, [esi+78h]
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal301	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1862B4	proc near		; CODE XREF: sub_6B18653A+E2p
					; sub_6B18653A+134p ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, [edx+8]
		push	esi
		mov	esi, [eax]
		mov	[edx+8], esi
		mov	esi, [eax]
		cmp	byte ptr [esi+59h], 0
		jnz	short loc_6B1862CC
		mov	[esi+4], edx

loc_6B1862CC:				; CODE XREF: sub_6B1862B4+13j
		mov	esi, [edx+4]
		mov	[eax+4], esi
		mov	ecx, [ecx+4]
		cmp	edx, [ecx+4]
		pop	esi
		jnz	short loc_6B1862E0
		mov	[ecx+4], eax
		jmp	short loc_6B1862EE
; ---------------------------------------------------------------------------

loc_6B1862E0:				; CODE XREF: sub_6B1862B4+25j
		mov	ecx, [edx+4]
		cmp	edx, [ecx]
		jnz	short loc_6B1862EB
		mov	[ecx], eax
		jmp	short loc_6B1862EE
; ---------------------------------------------------------------------------

loc_6B1862EB:				; CODE XREF: sub_6B1862B4+31j
		mov	[ecx+8], eax

loc_6B1862EE:				; CODE XREF: sub_6B1862B4+2Aj
					; sub_6B1862B4+35j
		mov	[eax], edx
		mov	[edx+4], eax
		retn	4
sub_6B1862B4	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1862F6	proc near		; CODE XREF: sub_6B1864DB+Cp
					; sub_6B186E47+19p

arg_0		= dword	ptr  4

		mov	eax, [ecx+4]
		mov	ecx, [eax+4]
		cmp	byte ptr [ecx+59h], 0
		jnz	short locret_6B18631C
		mov	edx, [esp+arg_0]
		mov	edx, [edx]

loc_6B186308:				; CODE XREF: sub_6B1862F6+24j
		cmp	[ecx+10h], edx
		jnb	short loc_6B186312
		mov	ecx, [ecx+8]
		jmp	short loc_6B186316
; ---------------------------------------------------------------------------

loc_6B186312:				; CODE XREF: sub_6B1862F6+15j
		mov	eax, ecx
		mov	ecx, [ecx]

loc_6B186316:				; CODE XREF: sub_6B1862F6+1Aj
		cmp	byte ptr [ecx+59h], 0
		jz	short loc_6B186308

locret_6B18631C:			; CODE XREF: sub_6B1862F6+Aj
		retn	4
sub_6B1862F6	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B18631F	proc near		; CODE XREF: sub_6B18637C+23p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		push	esi
		push	[ebp+arg_C]
		mov	esi, ecx
		mov	[esi], eax
		mov	eax, [ebp+arg_4]
		mov	[esi+4], eax
		mov	eax, [ebp+arg_8]
		lea	ecx, [esi+10h]
		mov	[esi+8], eax
		call	sub_6B186266
		mov	al, [ebp+arg_10]
		mov	[esi+58h], al
		mov	byte ptr [esi+59h], 0
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	14h
sub_6B18631F	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B186352	proc near		; CODE XREF: sub_6B186515+3p
		push	60h		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		xor	edx, edx
		cmp	eax, edx
		pop	ecx
		jz	short loc_6B186362
		mov	[eax], edx

loc_6B186362:				; CODE XREF: sub_6B186352+Cj
		lea	ecx, [eax+4]
		cmp	ecx, edx
		jz	short loc_6B18636B
		mov	[ecx], edx

loc_6B18636B:				; CODE XREF: sub_6B186352+15j
		lea	ecx, [eax+8]
		cmp	ecx, edx
		jz	short loc_6B186374
		mov	[ecx], edx

loc_6B186374:				; CODE XREF: sub_6B186352+1Ej
		mov	byte ptr [eax+58h], 1
		mov	[eax+59h], dl
		retn
sub_6B186352	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B18637C	proc near		; CODE XREF: sub_6B18653A+5Ep
					; sub_6B186A41+38p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	esi
		push	60h		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	esi, eax
		test	esi, esi
		pop	ecx
		jz	short loc_6B1863A4
		push	[ebp+arg_10]
		mov	ecx, esi
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6B18631F

loc_6B1863A4:				; CODE XREF: sub_6B18637C+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	14h
sub_6B18637C	endp

; Exported entry 304.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal304
Ordinal304	proc near		; CODE XREF: Ordinal360+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		mov	ebx, [ebp+arg_4]
		push	esi
		push	edi
		xor	edi, edi
		mov	esi, ecx
		push	edi
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_C]
		mov	[ebx], edi
		call	Ordinal1571
		mov	eax, [ebp+arg_0]
		cmp	eax, [esi+78h]
		jb	short loc_6B1863E3
		push	offset aCkeyvaluecolle ; "CKeyValueCollection::GetKeyAtIndex() : "...
		call	sub_6B18102E
		pop	ecx
		xor	bl, bl
		jmp	short loc_6B18640B
; ---------------------------------------------------------------------------

loc_6B1863E3:				; CODE XREF: Ordinal304+27j
		mov	esi, [esi+74h]
		mov	eax, [esi]
		mov	[ebp+arg_4], eax
		jmp	short loc_6B1863FE
; ---------------------------------------------------------------------------

loc_6B1863ED:				; CODE XREF: Ordinal304+55j
		cmp	edi, [ebp+arg_0]
		jz	short loc_6B186404
		lea	ecx, [ebp+arg_4]
		inc	edi
		call	sub_6B1861F1
		mov	eax, [ebp+arg_4]

loc_6B1863FE:				; CODE XREF: Ordinal304+40j
		cmp	eax, esi
		jnz	short loc_6B1863ED
		jmp	short loc_6B186409
; ---------------------------------------------------------------------------

loc_6B186404:				; CODE XREF: Ordinal304+45j
		mov	eax, [eax+10h]
		mov	[ebx], eax

loc_6B186409:				; CODE XREF: Ordinal304+57j
		mov	bl, 1

loc_6B18640B:				; CODE XREF: Ordinal304+36j
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		pop	edi
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal304	endp

; Exported entry 306.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal306
Ordinal306	proc near		; DATA XREF: .rdata:6B1AC428o
					; .rdata:6B1AC48Co ...

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		push	[ebp+arg_0]
		mov	ecx, esi
		call	Ordinal591
		test	al, al
		jnz	short loc_6B186453
		push	offset aCkeyvaluecol_0 ; "CKeyValueCollection::Save() :	CValueCol"...

loc_6B186449:				; CODE XREF: Ordinal306+5Bj
		call	sub_6B18102E
		pop	ecx
		xor	bl, bl
		jmp	short loc_6B1864CB
; ---------------------------------------------------------------------------

loc_6B186453:				; CODE XREF: Ordinal306+26j
		mov	ecx, [ebp+arg_0]
		xor	ebx, ebx
		inc	ebx
		push	ebx
		call	Ordinal627
		test	eax, eax
		jz	short loc_6B186472
		push	dword ptr [esi+78h]
		mov	ecx, [ebp+arg_0]
		call	Ordinal658
		test	eax, eax
		jnz	short loc_6B186479

loc_6B186472:				; CODE XREF: Ordinal306+45j
		push	offset aCkeyvaluecol_1 ; "CKeyValueCollection::Save() :	Archive.W"...
		jmp	short loc_6B186449
; ---------------------------------------------------------------------------

loc_6B186479:				; CODE XREF: Ordinal306+54j
		mov	eax, [esi+74h]
		push	edi		; Args
		mov	edi, [eax]
		cmp	edi, eax
		mov	[ebp+var_4], edi
		jz	short loc_6B1864CA

loc_6B186486:				; CODE XREF: Ordinal306+96j
		push	dword ptr [edi+10h]
		mov	ecx, [ebp+arg_0]
		call	Ordinal658
		test	eax, eax
		jz	short loc_6B1864B6
		push	[ebp+arg_0]
		lea	ecx, [edi+18h]
		call	Ordinal533
		test	al, al
		jz	short loc_6B1864BD
		lea	ecx, [ebp+var_4]
		call	sub_6B1861F1
		mov	edi, [ebp+var_4]
		cmp	edi, [esi+74h]
		jnz	short loc_6B186486
		jmp	short loc_6B1864CA
; ---------------------------------------------------------------------------

loc_6B1864B6:				; CODE XREF: Ordinal306+77j
		push	offset aCkeyvaluecol_1 ; "CKeyValueCollection::Save() :	Archive.W"...
		jmp	short loc_6B1864C2
; ---------------------------------------------------------------------------

loc_6B1864BD:				; CODE XREF: Ordinal306+86j
		push	offset aCkeyvaluecol_2 ; "CKeyValueCollection::Save() :	pos->seco"...

loc_6B1864C2:				; CODE XREF: Ordinal306+9Fj
		call	sub_6B18102E
		pop	ecx
		xor	bl, bl

loc_6B1864CA:				; CODE XREF: Ordinal306+68j
					; Ordinal306+98j
		pop	edi

loc_6B1864CB:				; CODE XREF: Ordinal306+35j
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal306	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1864DB	proc near		; CODE XREF: Ordinal307+18p
					; Ordinal302+29p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		push	edi
		mov	edi, [ebp+arg_4]
		push	edi
		mov	esi, ecx
		call	sub_6B1862F6
		mov	esi, [esi+4]
		cmp	eax, esi
		mov	[ebp+arg_4], eax
		jz	short loc_6B186502
		mov	ecx, [edi]
		cmp	ecx, [eax+10h]
		jb	short loc_6B186502
		lea	eax, [ebp+arg_4]
		jmp	short loc_6B186508
; ---------------------------------------------------------------------------

loc_6B186502:				; CODE XREF: sub_6B1864DB+19j
					; sub_6B1864DB+20j
		mov	[ebp+var_4], esi
		lea	eax, [ebp+var_4]

loc_6B186508:				; CODE XREF: sub_6B1864DB+25j
		mov	ecx, [eax]
		mov	eax, [ebp+arg_0]
		pop	edi
		mov	[eax], ecx
		pop	esi
		leave
		retn	8
sub_6B1864DB	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B186515	proc near		; CODE XREF: sub_6B18704E+3p
		push	esi
		mov	esi, ecx
		call	sub_6B186352
		lea	ecx, [esi+4]
		mov	[ecx], eax
		mov	byte ptr [eax+59h], 1
		mov	eax, [ecx]
		mov	[eax+4], eax
		mov	eax, [ecx]
		mov	[eax], eax
		mov	ecx, [ecx]
		mov	[ecx+8], ecx
		and	dword ptr [esi+8], 0
		pop	esi
		retn
sub_6B186515	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B18653A	proc near		; CODE XREF: sub_6B1869B0+71p
					; sub_6B186B5F+19p ...

var_50		= dword	ptr -50h
var_28		= byte ptr -28h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	eax, offset unknown_libname_41 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		cmp	dword ptr [edi+8], 38E38E2h
		jb	short loc_6B186588
		push	offset aMapSetTTooLong ; "map/set<T> too long"
		lea	ecx, [ebp+var_28]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_28]
		push	eax
		lea	ecx, [ebp+var_50]
		call	sub_6B181357
		push	offset dword_6B1BA9E8
		lea	eax, [ebp+var_50]
		push	eax
		mov	[ebp+var_50], offset off_6B1AA914
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B186588:				; CODE XREF: sub_6B18653A+19j
		mov	eax, [edi+4]
		mov	esi, [ebp+arg_8]
		push	0
		push	[ebp+arg_C]
		mov	ecx, edi
		push	eax
		push	esi
		push	eax
		call	sub_6B18637C
		inc	dword ptr [edi+8]
		mov	ebx, eax
		mov	eax, [edi+4]
		cmp	esi, eax
		jnz	short loc_6B1865B6
		mov	[eax+4], ebx
		mov	eax, [edi+4]
		mov	[eax], ebx
		mov	eax, [edi+4]
		jmp	short loc_6B1865D4
; ---------------------------------------------------------------------------

loc_6B1865B6:				; CODE XREF: sub_6B18653A+6Dj
		cmp	[ebp+arg_4], 0
		jz	short loc_6B1865C9
		mov	[esi], ebx
		mov	eax, [edi+4]
		cmp	esi, [eax]
		jnz	short loc_6B1865D7
		mov	[eax], ebx
		jmp	short loc_6B1865D7
; ---------------------------------------------------------------------------

loc_6B1865C9:				; CODE XREF: sub_6B18653A+80j
		mov	[esi+8], ebx
		mov	eax, [edi+4]
		cmp	esi, [eax+8]
		jnz	short loc_6B1865D7

loc_6B1865D4:				; CODE XREF: sub_6B18653A+7Aj
		mov	[eax+8], ebx

loc_6B1865D7:				; CODE XREF: sub_6B18653A+89j
					; sub_6B18653A+8Dj ...
		mov	esi, ebx
		lea	eax, [ebx+4]
		jmp	loc_6B186676
; ---------------------------------------------------------------------------

loc_6B1865E1:				; CODE XREF: sub_6B18653A+142j
		mov	ecx, [eax]
		mov	edx, [ecx+4]
		mov	edx, [edx]
		cmp	ecx, edx
		jnz	short loc_6B186641
		mov	edx, [ecx+4]
		mov	edx, [edx+8]
		cmp	byte ptr [edx+58h], 0
		jnz	short loc_6B186612

loc_6B1865F8:				; CODE XREF: sub_6B18653A+10Bj
		mov	ecx, [eax]
		mov	byte ptr [ecx+58h], 1
		mov	byte ptr [edx+58h], 1
		mov	ecx, [eax]
		mov	ecx, [ecx+4]
		mov	byte ptr [ecx+58h], 0
		mov	eax, [eax]
		mov	esi, [eax+4]
		jmp	short loc_6B186673
; ---------------------------------------------------------------------------

loc_6B186612:				; CODE XREF: sub_6B18653A+BCj
		cmp	esi, [ecx+8]
		jnz	short loc_6B186621
		mov	esi, ecx
		push	esi
		mov	ecx, edi
		call	sub_6B1862B4

loc_6B186621:				; CODE XREF: sub_6B18653A+DBj
		mov	eax, [esi+4]
		mov	byte ptr [eax+58h], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+58h], 0
		mov	eax, [esi+4]
		push	dword ptr [eax+4]
		mov	ecx, edi
		call	sub_6B186190
		jmp	short loc_6B186673
; ---------------------------------------------------------------------------

loc_6B186641:				; CODE XREF: sub_6B18653A+B0j
		cmp	byte ptr [edx+58h], 0
		jz	short loc_6B1865F8
		cmp	esi, [ecx]
		jnz	short loc_6B186655
		mov	esi, ecx
		push	esi
		mov	ecx, edi
		call	sub_6B186190

loc_6B186655:				; CODE XREF: sub_6B18653A+10Fj
		mov	eax, [esi+4]
		mov	byte ptr [eax+58h], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+58h], 0
		mov	eax, [esi+4]
		push	dword ptr [eax+4]
		mov	ecx, edi
		call	sub_6B1862B4

loc_6B186673:				; CODE XREF: sub_6B18653A+D6j
					; sub_6B18653A+105j
		lea	eax, [esi+4]

loc_6B186676:				; CODE XREF: sub_6B18653A+A2j
		mov	ecx, [eax]
		cmp	byte ptr [ecx+58h], 0
		jz	loc_6B1865E1
		mov	eax, [edi+4]
		mov	eax, [eax+4]
		mov	ecx, [ebp+var_C]
		mov	byte ptr [eax+58h], 1
		mov	eax, [ebp+arg_0]
		pop	edi
		mov	[eax], ebx
		pop	esi
		pop	ebx
		mov	large fs:0, ecx
		leave
		retn	10h
sub_6B18653A	endp

; Exported entry 307.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal307
Ordinal307	proc near		; DATA XREF: .rdata:6B1AC434o
					; .rdata:6B1AC498o ...

arg_0		= byte ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		mov	edi, [ebp+arg_4]
		and	dword ptr [edi], 0
		lea	eax, [ebp+arg_0]
		push	eax
		mov	esi, ecx
		lea	eax, [ebp+arg_4]
		push	eax
		lea	ecx, [esi+70h]
		call	sub_6B1864DB
		mov	eax, [ebp+arg_4]
		cmp	eax, [esi+74h]
		jnz	short loc_6B1866DC
		cmp	[ebp+arg_8], 0
		jnz	short loc_6B1866D8
		push	offset aCkeyvaluecol_3 ; "CKeyValueCollection::GetReadValue() :	p"...
		call	sub_6B18101A
		pop	ecx

loc_6B1866D8:				; CODE XREF: Ordinal307+29j
		xor	al, al
		jmp	short loc_6B1866E3
; ---------------------------------------------------------------------------

loc_6B1866DC:				; CODE XREF: Ordinal307+23j
		add	eax, 18h
		mov	[edi], eax
		mov	al, 1

loc_6B1866E3:				; CODE XREF: Ordinal307+38j
		pop	edi
		pop	esi
		pop	ebp
		retn	0Ch
Ordinal307	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6B1866E9(int, void *)
sub_6B1866E9	proc near		; CODE XREF: Ordinal302+4Ap
					; sub_6B186C3A+3Bp

var_54		= dword	ptr -54h
var_2C		= byte ptr -2Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_42 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 48h
		push	ebx
		mov	ebx, [ebp+arg_4]
		cmp	byte ptr [ebx+59h], 0
		push	esi
		push	edi
		mov	[ebp+var_10], ecx
		jz	short loc_6B186738
		push	offset aInvalidMapSetT ; "invalid map/set<T> iterator"
		lea	ecx, [ebp+var_2C]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_2C]
		push	eax
		lea	ecx, [ebp+var_54]
		call	sub_6B181357
		push	offset dword_6B1BAA6C
		lea	eax, [ebp+var_54]
		push	eax
		mov	[ebp+var_54], offset off_6B1AA91C
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B186738:				; CODE XREF: sub_6B1866E9+1Aj
		lea	ecx, [ebp+arg_4]
		call	sub_6B1861F1
		mov	ecx, [ebx]
		cmp	byte ptr [ecx+59h], 0
		jz	short loc_6B18674D
		mov	edi, [ebx+8]
		jmp	short loc_6B186764
; ---------------------------------------------------------------------------

loc_6B18674D:				; CODE XREF: sub_6B1866E9+5Dj
		mov	eax, [ebx+8]
		cmp	byte ptr [eax+59h], 0
		jz	short loc_6B18675A
		mov	edi, ecx
		jmp	short loc_6B186764
; ---------------------------------------------------------------------------

loc_6B18675A:				; CODE XREF: sub_6B1866E9+6Bj
		mov	eax, [ebp+arg_4]
		cmp	eax, ebx
		mov	edi, [eax+8]
		jnz	short loc_6B1867DA

loc_6B186764:				; CODE XREF: sub_6B1866E9+62j
					; sub_6B1866E9+6Fj
		cmp	byte ptr [edi+59h], 0
		mov	esi, [ebx+4]
		jnz	short loc_6B186770
		mov	[edi+4], esi

loc_6B186770:				; CODE XREF: sub_6B1866E9+82j
		mov	ecx, [ebp+var_10]
		mov	eax, [ecx+4]
		cmp	[eax+4], ebx
		jnz	short loc_6B186780
		mov	[eax+4], edi
		jmp	short loc_6B18678B
; ---------------------------------------------------------------------------

loc_6B186780:				; CODE XREF: sub_6B1866E9+90j
		cmp	[esi], ebx
		jnz	short loc_6B186788
		mov	[esi], edi
		jmp	short loc_6B18678B
; ---------------------------------------------------------------------------

loc_6B186788:				; CODE XREF: sub_6B1866E9+99j
		mov	[esi+8], edi

loc_6B18678B:				; CODE XREF: sub_6B1866E9+95j
					; sub_6B1866E9+9Dj
		mov	ecx, [ecx+4]
		cmp	[ecx], ebx
		jnz	short loc_6B1867AE
		cmp	byte ptr [edi+59h], 0
		jz	short loc_6B18679C
		mov	edx, esi
		jmp	short loc_6B1867AC
; ---------------------------------------------------------------------------

loc_6B18679C:				; CODE XREF: sub_6B1866E9+ADj
		mov	eax, [edi]
		mov	edx, edi
		jmp	short loc_6B1867A6
; ---------------------------------------------------------------------------

loc_6B1867A2:				; CODE XREF: sub_6B1866E9+C1j
		mov	edx, eax
		mov	eax, [edx]

loc_6B1867A6:				; CODE XREF: sub_6B1866E9+B7j
		cmp	byte ptr [eax+59h], 0
		jz	short loc_6B1867A2

loc_6B1867AC:				; CODE XREF: sub_6B1866E9+B1j
		mov	[ecx], edx

loc_6B1867AE:				; CODE XREF: sub_6B1866E9+A7j
		mov	eax, [ebp+var_10]
		mov	ecx, [eax+4]
		cmp	[ecx+8], ebx
		jnz	short loc_6B186834
		cmp	byte ptr [edi+59h], 0
		jz	short loc_6B1867C3
		mov	edx, esi
		jmp	short loc_6B1867D5
; ---------------------------------------------------------------------------

loc_6B1867C3:				; CODE XREF: sub_6B1866E9+D4j
		mov	eax, [edi+8]
		mov	edx, edi
		jmp	short loc_6B1867CF
; ---------------------------------------------------------------------------

loc_6B1867CA:				; CODE XREF: sub_6B1866E9+EAj
		mov	edx, eax
		mov	eax, [edx+8]

loc_6B1867CF:				; CODE XREF: sub_6B1866E9+DFj
		cmp	byte ptr [eax+59h], 0
		jz	short loc_6B1867CA

loc_6B1867D5:				; CODE XREF: sub_6B1866E9+D8j
		mov	[ecx+8], edx
		jmp	short loc_6B186834
; ---------------------------------------------------------------------------

loc_6B1867DA:				; CODE XREF: sub_6B1866E9+79j
		mov	[ecx+4], eax
		mov	ecx, [ebx]
		mov	[eax], ecx
		cmp	eax, [ebx+8]
		jnz	short loc_6B1867EA
		mov	esi, eax
		jmp	short loc_6B186804
; ---------------------------------------------------------------------------

loc_6B1867EA:				; CODE XREF: sub_6B1866E9+FBj
		cmp	byte ptr [edi+59h], 0
		mov	esi, [eax+4]
		jnz	short loc_6B1867F6
		mov	[edi+4], esi

loc_6B1867F6:				; CODE XREF: sub_6B1866E9+108j
		mov	[esi], edi
		mov	ecx, [ebx+8]
		mov	[eax+8], ecx
		mov	ecx, [ebx+8]
		mov	[ecx+4], eax

loc_6B186804:				; CODE XREF: sub_6B1866E9+FFj
		mov	ecx, [ebp+var_10]
		mov	ecx, [ecx+4]
		cmp	[ecx+4], ebx
		jnz	short loc_6B186814
		mov	[ecx+4], eax
		jmp	short loc_6B186822
; ---------------------------------------------------------------------------

loc_6B186814:				; CODE XREF: sub_6B1866E9+124j
		mov	ecx, [ebx+4]
		cmp	[ecx], ebx
		jnz	short loc_6B18681F
		mov	[ecx], eax
		jmp	short loc_6B186822
; ---------------------------------------------------------------------------

loc_6B18681F:				; CODE XREF: sub_6B1866E9+130j
		mov	[ecx+8], eax

loc_6B186822:				; CODE XREF: sub_6B1866E9+129j
					; sub_6B1866E9+134j
		mov	ecx, [ebx+4]
		mov	[eax+4], ecx
		mov	dl, [ebx+58h]
		mov	cl, [eax+58h]
		mov	[eax+58h], dl
		mov	[ebx+58h], cl

loc_6B186834:				; CODE XREF: sub_6B1866E9+CEj
					; sub_6B1866E9+EFj
		cmp	byte ptr [ebx+58h], 1
		jnz	loc_6B186941
		jmp	loc_6B1868F5
; ---------------------------------------------------------------------------

loc_6B186843:				; CODE XREF: sub_6B1866E9+215j
		cmp	byte ptr [edi+58h], 1
		jnz	loc_6B18693D
		mov	eax, [esi]
		cmp	edi, eax
		jnz	short loc_6B1868BF
		mov	eax, [esi+8]
		cmp	byte ptr [eax+58h], 0
		jnz	short loc_6B18686D
		mov	byte ptr [eax+58h], 1
		push	esi
		mov	byte ptr [esi+58h], 0
		call	sub_6B1862B4
		mov	eax, [esi+8]

loc_6B18686D:				; CODE XREF: sub_6B1866E9+171j
		cmp	byte ptr [eax+59h], 0
		jnz	short loc_6B1868F0
		mov	ecx, [eax]
		cmp	byte ptr [ecx+58h], 1
		jnz	short loc_6B186884
		mov	ecx, [eax+8]
		cmp	byte ptr [ecx+58h], 1
		jz	short loc_6B1868EC

loc_6B186884:				; CODE XREF: sub_6B1866E9+190j
		mov	ecx, [eax+8]
		cmp	byte ptr [ecx+58h], 1
		jnz	short loc_6B1868A3
		mov	ecx, [eax]
		mov	byte ptr [ecx+58h], 1
		mov	ecx, [ebp+var_10]
		push	eax
		mov	byte ptr [eax+58h], 0
		call	sub_6B186190
		mov	eax, [esi+8]

loc_6B1868A3:				; CODE XREF: sub_6B1866E9+1A2j
		mov	cl, [esi+58h]
		mov	[eax+58h], cl
		mov	ecx, [ebp+var_10]
		mov	byte ptr [esi+58h], 1
		mov	eax, [eax+8]
		push	esi
		mov	byte ptr [eax+58h], 1
		call	sub_6B1862B4
		jmp	short loc_6B18693D
; ---------------------------------------------------------------------------

loc_6B1868BF:				; CODE XREF: sub_6B1866E9+168j
		cmp	byte ptr [eax+58h], 0
		jnz	short loc_6B1868D5
		mov	byte ptr [eax+58h], 1
		push	esi
		mov	byte ptr [esi+58h], 0
		call	sub_6B186190
		mov	eax, [esi]

loc_6B1868D5:				; CODE XREF: sub_6B1866E9+1DAj
		cmp	byte ptr [eax+59h], 0
		jnz	short loc_6B1868F0
		mov	ecx, [eax+8]
		cmp	byte ptr [ecx+58h], 1
		jnz	short loc_6B186906
		mov	ecx, [eax]
		cmp	byte ptr [ecx+58h], 1
		jnz	short loc_6B186906

loc_6B1868EC:				; CODE XREF: sub_6B1866E9+199j
		mov	byte ptr [eax+58h], 0

loc_6B1868F0:				; CODE XREF: sub_6B1866E9+188j
					; sub_6B1866E9+1F0j
		mov	edi, esi
		mov	esi, [esi+4]

loc_6B1868F5:				; CODE XREF: sub_6B1866E9+155j
		mov	ecx, [ebp+var_10]
		mov	eax, [ecx+4]
		cmp	edi, [eax+4]
		jnz	loc_6B186843
		jmp	short loc_6B18693D
; ---------------------------------------------------------------------------

loc_6B186906:				; CODE XREF: sub_6B1866E9+1F9j
					; sub_6B1866E9+201j
		mov	ecx, [eax]
		cmp	byte ptr [ecx+58h], 1
		jnz	short loc_6B186924
		mov	ecx, [eax+8]
		mov	byte ptr [ecx+58h], 1
		mov	ecx, [ebp+var_10]
		push	eax
		mov	byte ptr [eax+58h], 0
		call	sub_6B1862B4
		mov	eax, [esi]

loc_6B186924:				; CODE XREF: sub_6B1866E9+223j
		mov	cl, [esi+58h]
		mov	[eax+58h], cl
		mov	ecx, [ebp+var_10]
		mov	byte ptr [esi+58h], 1
		mov	eax, [eax]
		push	esi
		mov	byte ptr [eax+58h], 1
		call	sub_6B186190

loc_6B18693D:				; CODE XREF: sub_6B1866E9+15Ej
					; sub_6B1866E9+1D4j ...
		mov	byte ptr [edi+58h], 1

loc_6B186941:				; CODE XREF: sub_6B1866E9+14Fj
		lea	ecx, [ebx+18h]
		call	Ordinal521
		push	ebx		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx
		mov	ecx, [ebp+var_10]
		mov	eax, [ecx+8]
		test	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		jbe	short loc_6B186961
		dec	eax
		mov	[ecx+8], eax

loc_6B186961:				; CODE XREF: sub_6B1866E9+272j
		mov	ecx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		leave
		retn	8
sub_6B1866E9	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6B186977(void *)
sub_6B186977	proc near		; CODE XREF: sub_6B186977+16p
					; sub_6B186ABE+6p ...

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		cmp	byte ptr [edi+59h], 0
		mov	ebx, ecx
		mov	esi, edi
		jnz	short loc_6B1869AA

loc_6B186988:				; CODE XREF: sub_6B186977+31j
		push	dword ptr [esi+8] ; void *
		mov	ecx, ebx
		call	sub_6B186977
		mov	esi, [esi]
		mov	ecx, edi
		call	sub_6B186283
		push	edi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		cmp	byte ptr [esi+59h], 0
		pop	ecx
		mov	edi, esi
		jz	short loc_6B186988

loc_6B1869AA:				; CODE XREF: sub_6B186977+Fj
		pop	edi
		pop	esi
		pop	ebx
		retn	4
sub_6B186977	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1869B0	proc near		; CODE XREF: sub_6B186B5F+C8p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		mov	ebx, [ebp+arg_4]
		push	esi
		mov	esi, ecx
		mov	ecx, [esi+4]
		mov	eax, [ecx+4]
		cmp	byte ptr [eax+59h], 0
		push	edi
		mov	edi, ecx
		mov	byte ptr [ebp+var_4], 1
		jnz	short loc_6B1869EC
		mov	ecx, [ebx]

loc_6B1869D0:				; CODE XREF: sub_6B1869B0+3Aj
		cmp	ecx, [eax+10h]
		mov	edi, eax
		setb	byte ptr [ebp+var_4]
		cmp	byte ptr [ebp+var_4], 0
		jz	short loc_6B1869E3
		mov	eax, [eax]
		jmp	short loc_6B1869E6
; ---------------------------------------------------------------------------

loc_6B1869E3:				; CODE XREF: sub_6B1869B0+2Dj
		mov	eax, [eax+8]

loc_6B1869E6:				; CODE XREF: sub_6B1869B0+31j
		cmp	byte ptr [eax+59h], 0
		jz	short loc_6B1869D0

loc_6B1869EC:				; CODE XREF: sub_6B1869B0+1Cj
		cmp	byte ptr [ebp+var_4], 0
		mov	ecx, edi
		mov	[ebp+arg_4], ecx
		jz	short loc_6B186A0F
		mov	eax, [esi+4]
		cmp	edi, [eax]
		jnz	short loc_6B186A04
		push	ebx
		push	edi
		push	1
		jmp	short loc_6B186A1B
; ---------------------------------------------------------------------------

loc_6B186A04:				; CODE XREF: sub_6B1869B0+4Cj
		lea	ecx, [ebp+arg_4]
		call	sub_6B186227
		mov	ecx, [ebp+arg_4]

loc_6B186A0F:				; CODE XREF: sub_6B1869B0+45j
		mov	eax, [ecx+10h]
		cmp	eax, [ebx]
		jnb	short loc_6B186A31
		push	ebx
		push	edi
		push	[ebp+var_4]

loc_6B186A1B:				; CODE XREF: sub_6B1869B0+52j
		lea	eax, [ebp+arg_4]
		push	eax
		mov	ecx, esi
		call	sub_6B18653A
		mov	ecx, [eax]
		mov	eax, [ebp+arg_0]
		mov	byte ptr [eax+4], 1
		jmp	short loc_6B186A38
; ---------------------------------------------------------------------------

loc_6B186A31:				; CODE XREF: sub_6B1869B0+64j
		mov	eax, [ebp+arg_0]
		mov	byte ptr [eax+4], 0

loc_6B186A38:				; CODE XREF: sub_6B1869B0+7Fj
		pop	edi
		pop	esi
		mov	[eax], ecx
		pop	ebx
		leave
		retn	8
sub_6B1869B0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B186A41	proc near		; CODE XREF: sub_6B186A41+54p
					; sub_6B186A41+61p ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_43 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		cmp	byte ptr [esi+59h], 0
		push	edi
		mov	edi, ecx
		mov	eax, [edi+4]
		mov	[ebp+var_10], esp
		mov	[ebp+var_18], edi
		mov	[ebp+var_14], eax
		jnz	short loc_6B186AAA
		xor	ecx, ecx
		mov	cl, [esi+58h]
		push	ecx
		lea	ecx, [esi+10h]
		push	ecx
		push	eax
		push	[ebp+arg_4]
		mov	ecx, edi
		push	eax
		call	sub_6B18637C
		mov	ebx, eax
		mov	eax, [ebp+var_14]
		cmp	byte ptr [eax+59h], 0
		jz	short loc_6B186A8C
		mov	[ebp+var_14], ebx

loc_6B186A8C:				; CODE XREF: sub_6B186A41+46j
		and	[ebp+var_4], 0
		push	ebx
		push	dword ptr [esi]
		mov	ecx, edi
		call	sub_6B186A41
		push	ebx
		mov	[ebx], eax
		push	dword ptr [esi+8]
		mov	ecx, edi
		call	sub_6B186A41
		mov	[ebx+8], eax

loc_6B186AAA:				; CODE XREF: sub_6B186A41+25j
		mov	ecx, [ebp+var_C]
		mov	eax, [ebp+var_14]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn	8
sub_6B186A41	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B186ABE	proc near		; DATA XREF: .rdata:stru_6B1BB234o
		push	dword ptr [ebp-14h] ; void *
		mov	ecx, [ebp-18h]
		call	sub_6B186977
		push	0
		push	0
		call	_CxxThrowException
sub_6B186ABE	endp

; ---------------------------------------------------------------------------
		db 0CCh
; Exported entry 302.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal302
Ordinal302	proc near		; CODE XREF: Ordinal358+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+arg_0]
		push	eax
		lea	eax, [ebp+var_4]
		lea	edi, [esi+70h]
		push	eax
		mov	ecx, edi
		call	sub_6B1864DB
		mov	eax, [ebp+var_4]
		cmp	eax, [esi+74h]
		jnz	short loc_6B186B16
		push	offset aCkeyvaluecol_4 ; "CKeyValueCollection::Remove()	: pos == "...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B186B28
; ---------------------------------------------------------------------------

loc_6B186B16:				; CODE XREF: Ordinal302+34j
		push	eax		; void *
		lea	eax, [ebp+arg_0]
		push	eax		; int
		mov	ecx, edi
		call	sub_6B1866E9
		mov	byte ptr [esi+4], 1
		mov	bl, 1

loc_6B186B28:				; CODE XREF: Ordinal302+41j
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	edi
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal302	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B186B39	proc near		; CODE XREF: sub_6B186C3A+18p
					; Ordinal303+1Cp
		push	esi
		push	edi
		mov	edi, ecx
		lea	esi, [edi+4]
		mov	eax, [esi]
		push	dword ptr [eax+4] ; void *
		call	sub_6B186977
		mov	eax, [esi]
		mov	[eax+4], eax
		mov	eax, [esi]
		and	dword ptr [edi+8], 0
		mov	[eax], eax
		mov	esi, [esi]
		pop	edi
		mov	[esi+8], esi
		pop	esi
		retn
sub_6B186B39	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B186B5F	proc near		; CODE XREF: sub_6B186E47+51p

var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		mov	ebx, ecx
		cmp	dword ptr [ebx+8], 0
		jnz	short loc_6B186B85
		push	[ebp+arg_8]
		push	dword ptr [ebx+4]
		push	1
		push	[ebp+arg_0]
		call	sub_6B18653A
		mov	eax, [ebp+arg_0]
		jmp	loc_6B186C35
; ---------------------------------------------------------------------------

loc_6B186B85:				; CODE XREF: sub_6B186B5F+Cj
		mov	eax, [ebx+4]
		push	esi
		mov	esi, [ebp+arg_4]
		cmp	esi, [eax]
		push	edi
		mov	edi, [ebp+arg_8]
		jnz	short loc_6B186BA3
		mov	eax, [edi]
		cmp	eax, [esi+10h]
		jnb	loc_6B186C20
		push	edi

loc_6B186BA0:				; CODE XREF: sub_6B186B5F+7Cj
		push	esi
		jmp	short loc_6B186C0F
; ---------------------------------------------------------------------------

loc_6B186BA3:				; CODE XREF: sub_6B186B5F+33j
		cmp	esi, eax
		jnz	short loc_6B186BB7
		mov	eax, [eax+8]
		mov	ecx, [eax+10h]
		cmp	ecx, [edi]
		jnb	short loc_6B186C20
		push	edi
		push	eax

loc_6B186BB3:				; CODE XREF: sub_6B186B5F+7Fj
					; sub_6B186B5F+ADj
		push	0
		jmp	short loc_6B186C11
; ---------------------------------------------------------------------------

loc_6B186BB7:				; CODE XREF: sub_6B186B5F+46j
		mov	eax, [edi]
		cmp	eax, [esi+10h]
		jnb	short loc_6B186BE0
		lea	ecx, [ebp+arg_8]
		mov	[ebp+arg_8], esi
		call	sub_6B186227
		mov	ecx, [ebp+arg_8]
		mov	eax, [edi]
		cmp	[ecx+10h], eax
		jnb	short loc_6B186BE0
		mov	eax, [ecx+8]
		cmp	byte ptr [eax+59h], 0
		push	edi
		jz	short loc_6B186BA0
		push	ecx
		jmp	short loc_6B186BB3
; ---------------------------------------------------------------------------

loc_6B186BE0:				; CODE XREF: sub_6B186B5F+5Dj
					; sub_6B186B5F+72j
		mov	eax, [edi]
		cmp	[esi+10h], eax
		jnb	short loc_6B186C20
		lea	ecx, [ebp+arg_8]
		mov	[ebp+arg_8], esi
		call	sub_6B1861F1
		mov	ecx, [ebp+arg_8]
		cmp	ecx, [ebx+4]
		jz	short loc_6B186C01
		mov	eax, [edi]
		cmp	eax, [ecx+10h]
		jnb	short loc_6B186C20

loc_6B186C01:				; CODE XREF: sub_6B186B5F+99j
		mov	eax, [esi+8]
		cmp	byte ptr [eax+59h], 0
		push	edi
		jz	short loc_6B186C0E
		push	esi
		jmp	short loc_6B186BB3
; ---------------------------------------------------------------------------

loc_6B186C0E:				; CODE XREF: sub_6B186B5F+AAj
		push	ecx

loc_6B186C0F:				; CODE XREF: sub_6B186B5F+42j
		push	1

loc_6B186C11:				; CODE XREF: sub_6B186B5F+56j
		push	[ebp+arg_0]
		mov	ecx, ebx
		call	sub_6B18653A
		mov	eax, [ebp+arg_0]
		jmp	short loc_6B186C33
; ---------------------------------------------------------------------------

loc_6B186C20:				; CODE XREF: sub_6B186B5F+3Aj
					; sub_6B186B5F+50j ...
		push	edi
		lea	eax, [ebp+var_8]
		push	eax
		mov	ecx, ebx
		call	sub_6B1869B0
		mov	ecx, [eax]
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx

loc_6B186C33:				; CODE XREF: sub_6B186B5F+BFj
		pop	edi
		pop	esi

loc_6B186C35:				; CODE XREF: sub_6B186B5F+21j
		pop	ebx
		leave
		retn	0Ch
sub_6B186B5F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6B186C3A(int, void *, int)
sub_6B186C3A	proc near		; CODE XREF: sub_6B186CEB+12p
					; sub_6B186EC6+19p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [eax]
		jnz	short loc_6B186C5E
		cmp	[ebp+arg_8], eax
		jnz	short loc_6B186C5E
		mov	ecx, esi
		call	sub_6B186B39
		mov	eax, [esi+4]
		mov	ecx, [eax]
		jmp	short loc_6B186C83
; ---------------------------------------------------------------------------

loc_6B186C5E:				; CODE XREF: sub_6B186C3A+Fj
					; sub_6B186C3A+14j
		cmp	ecx, [ebp+arg_8]
		jz	short loc_6B186C83
		push	edi

loc_6B186C64:				; CODE XREF: sub_6B186C3A+46j
		mov	edi, ecx
		lea	ecx, [ebp+arg_4]
		call	sub_6B1861F1
		push	edi		; void *
		lea	eax, [ebp+var_4]
		push	eax		; int
		mov	ecx, esi
		call	sub_6B1866E9
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [ebp+arg_8]
		jnz	short loc_6B186C64
		pop	edi

loc_6B186C83:				; CODE XREF: sub_6B186C3A+22j
					; sub_6B186C3A+27j
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx
		pop	esi
		leave
		retn	0Ch
sub_6B186C3A	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B186C8D	proc near		; CODE XREF: sub_6B186EC6+23p

arg_0		= dword	ptr  4

		push	ebx
		mov	ebx, [esp+4+arg_0]
		mov	eax, [ebx+4]
		push	esi
		push	edi
		mov	esi, ecx
		mov	edi, [esi+4]
		push	edi
		push	dword ptr [eax+4]
		call	sub_6B186A41
		mov	[edi+4], eax
		mov	eax, [ebx+8]
		mov	[esi+8], eax
		mov	eax, [esi+4]
		mov	ecx, [eax+4]
		xor	bl, bl
		cmp	[ecx+59h], bl
		jz	short loc_6B186CCB
		mov	[eax], eax
		mov	esi, [esi+4]
		mov	[esi+8], esi

loc_6B186CC3:				; CODE XREF: sub_6B186C8D+5Cj
		pop	edi
		pop	esi
		pop	ebx
		retn	4
; ---------------------------------------------------------------------------

loc_6B186CC9:				; CODE XREF: sub_6B186C8D+43j
		mov	ecx, edx

loc_6B186CCB:				; CODE XREF: sub_6B186C8D+2Cj
		mov	edx, [ecx]
		cmp	[edx+59h], bl
		jz	short loc_6B186CC9
		mov	[eax], ecx
		mov	esi, [esi+4]
		mov	ecx, [esi+4]
		jmp	short loc_6B186CDE
; ---------------------------------------------------------------------------

loc_6B186CDC:				; CODE XREF: sub_6B186C8D+57j
		mov	ecx, eax

loc_6B186CDE:				; CODE XREF: sub_6B186C8D+4Dj
		mov	eax, [ecx+8]
		cmp	[eax+59h], bl
		jz	short loc_6B186CDC
		mov	[esi+8], ecx
		jmp	short loc_6B186CC3
sub_6B186C8D	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B186CEB	proc near		; CODE XREF: sub_6B186EF5j

var_4		= dword	ptr -4

		push	ecx
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		mov	ecx, [eax]
		push	eax		; int
		push	ecx		; void *
		lea	eax, [esp+10h+var_4]
		push	eax		; int
		mov	ecx, esi
		call	sub_6B186C3A
		push	dword ptr [esi+4] ; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		and	dword ptr [esi+4], 0
		and	dword ptr [esi+8], 0
		pop	ecx
		pop	esi
		pop	ecx
		retn
sub_6B186CEB	endp

; Exported entry 303.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal303
Ordinal303	proc near		; CODE XREF: Ordinal305+1Ep
					; Ordinal305+E6p ...

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	ecx, [esi+70h]
		call	sub_6B186B39
		lea	ecx, [ebp+var_C]
		mov	byte ptr [esi+4], 1
		call	Ordinal1573
		mov	al, 1
		pop	esi
		leave
		retn
Ordinal303	endp

; Exported entry 305.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal305
Ordinal305	proc near		; DATA XREF: .rdata:6B1AC42Co
					; .rdata:6B1AC490o ...

var_20		= byte ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 20h
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_20]
		call	Ordinal1571
		mov	ecx, esi
		call	Ordinal303
		mov	edi, [ebp+arg_0]
		push	edi
		mov	ecx, esi
		call	Ordinal590
		test	al, al
		jnz	short loc_6B186D8A
		push	offset aCkeyvaluecol_5 ; "CKeyValueCollection::Load() :	CValueCol"...

loc_6B186D7F:				; CODE XREF: Ordinal305+59j
		call	sub_6B18102E
		pop	ecx
		jmp	loc_6B186E36
; ---------------------------------------------------------------------------

loc_6B186D8A:				; CODE XREF: Ordinal305+30j
		lea	eax, [ebp+var_C]
		push	eax
		mov	ecx, edi
		mov	[ebp+var_C], ebx
		call	Ordinal626
		test	eax, eax
		jnz	short loc_6B186DA3
		push	offset aCkeyvaluecol_6 ; "CKeyValueCollection::Load() :	Archive.R"...
		jmp	short loc_6B186D7F
; ---------------------------------------------------------------------------

loc_6B186DA3:				; CODE XREF: Ordinal305+52j
		mov	eax, [ebp+var_C]
		dec	eax
		mov	byte ptr [ebp+arg_0+3],	1
		jz	short loc_6B186DB4
		push	offset aCkeyvaluecol_7 ; "CKeyValueCollection::Load() :	switch(de"...
		jmp	short loc_6B186E23
; ---------------------------------------------------------------------------

loc_6B186DB4:				; CODE XREF: Ordinal305+63j
		lea	eax, [ebp+var_8]
		push	eax
		mov	ecx, edi
		mov	[ebp+var_8], ebx
		call	Ordinal657
		test	eax, eax
		jz	short loc_6B186E10
		cmp	[ebp+var_8], ebx
		mov	[ebp+var_10], ebx
		mov	[ebp+var_14], ebx
		mov	[ebp+var_4], ebx
		jbe	short loc_6B186E33

loc_6B186DD4:				; CODE XREF: Ordinal305+C4j
		lea	eax, [ebp+var_10]
		push	eax
		mov	ecx, edi
		call	Ordinal657
		test	eax, eax
		jz	short loc_6B186E10
		mov	eax, [esi]
		lea	ecx, [ebp+var_14]
		push	ecx
		push	[ebp+var_10]
		mov	ecx, esi
		call	dword ptr [eax+14h]
		test	al, al
		jz	short loc_6B186E17
		mov	ecx, [ebp+var_14]
		push	edi
		push	esi
		call	Ordinal532
		test	al, al
		jz	short loc_6B186E1E
		inc	[ebp+var_4]
		mov	eax, [ebp+var_4]
		cmp	eax, [ebp+var_8]
		jb	short loc_6B186DD4
		jmp	short loc_6B186E33
; ---------------------------------------------------------------------------

loc_6B186E10:				; CODE XREF: Ordinal305+7Cj
					; Ordinal305+99j
		push	offset aCkeyvaluecol_6 ; "CKeyValueCollection::Load() :	Archive.R"...
		jmp	short loc_6B186E23
; ---------------------------------------------------------------------------

loc_6B186E17:				; CODE XREF: Ordinal305+ABj
		push	offset aCkeyvaluecol_8 ; "CKeyValueCollection::Load() :	GetWriteV"...
		jmp	short loc_6B186E23
; ---------------------------------------------------------------------------

loc_6B186E1E:				; CODE XREF: Ordinal305+B9j
		push	offset aCkeyvaluecol_9 ; "CKeyValueCollection::Load() :	pValue->L"...

loc_6B186E23:				; CODE XREF: Ordinal305+6Aj
					; Ordinal305+CDj ...
		call	sub_6B18102E
		pop	ecx
		mov	ecx, esi
		mov	byte ptr [ebp+arg_0+3],	bl
		call	Ordinal303

loc_6B186E33:				; CODE XREF: Ordinal305+8Aj
					; Ordinal305+C6j
		mov	bl, byte ptr [ebp+arg_0+3]

loc_6B186E36:				; CODE XREF: Ordinal305+3Dj
		lea	ecx, [ebp+var_20]
		call	Ordinal1573
		pop	edi
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal305	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B186E47	proc near		; CODE XREF: Ordinal308+42p

var_94		= byte ptr -94h
var_8C		= byte ptr -8Ch
var_4C		= byte ptr -4Ch
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_44 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 88h
		push	ebx
		mov	ebx, [ebp+arg_0]
		push	esi
		push	edi
		push	ebx
		mov	edi, ecx
		call	sub_6B1862F6
		mov	esi, eax
		cmp	esi, [edi+4]
		jz	short loc_6B186E73
		mov	eax, [ebx]
		cmp	eax, [esi+10h]
		jnb	short loc_6B186EB2

loc_6B186E73:				; CODE XREF: sub_6B186E47+23j
		lea	ecx, [ebp+var_4C]
		call	Ordinal520
		and	[ebp+var_4], 0
		push	eax
		push	ebx
		lea	ecx, [ebp+var_94]
		call	sub_6B1861D4
		push	eax
		push	esi
		lea	eax, [ebp+arg_0]
		push	eax
		mov	ecx, edi
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B186B5F
		mov	esi, [eax]
		lea	ecx, [ebp+var_8C]
		call	Ordinal521
		lea	ecx, [ebp+var_4C]
		call	Ordinal521

loc_6B186EB2:				; CODE XREF: sub_6B186E47+2Aj
		mov	ecx, [ebp+var_C]
		pop	edi
		lea	eax, [esi+18h]
		pop	esi
		pop	ebx
		mov	large fs:0, ecx
		leave
		retn	4
sub_6B186E47	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B186EC6	proc near		; CODE XREF: Ordinal300+5Fp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		cmp	esi, [ebp+arg_0]
		jz	short loc_6B186EEE
		mov	eax, [esi+4]
		mov	ecx, [eax]
		push	eax		; int
		push	ecx		; void *
		lea	eax, [ebp+var_4]
		push	eax		; int
		mov	ecx, esi
		call	sub_6B186C3A
		push	[ebp+arg_0]
		mov	ecx, esi
		call	sub_6B186C8D

loc_6B186EEE:				; CODE XREF: sub_6B186EC6+Aj
		mov	eax, esi
		pop	esi
		leave
		retn	4
sub_6B186EC6	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

sub_6B186EF5	proc near		; CODE XREF: Ordinal298+11p
		jmp	sub_6B186CEB
sub_6B186EF5	endp

; Exported entry 298.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal298
Ordinal298	proc near		; CODE XREF: sub_6B187074+3p
					; Ordinal366+31p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1AC424
		call	Ordinal303
		lea	ecx, [esi+70h]
		call	sub_6B186EF5
		mov	ecx, esi
		pop	esi
		jmp	Ordinal537
Ordinal298	endp

; Exported entry 308.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal308
Ordinal308	proc near		; DATA XREF: .rdata:6B1AC438o
					; .rdata:6B1AC49Co ...

var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= byte ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_45 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		mov	esi, [ebp+arg_4]
		and	dword ptr [esi], 0
		push	edi
		mov	edi, ecx
		mov	[ebp+var_10], esp
		push	offset aCkeyvalueco_10 ; "CKeyValueCollection::GetWriteValue()"
		lea	ecx, [ebp+var_48]
		mov	[ebp+var_14], eax
		mov	[ebp+var_28], edi
		call	Ordinal1089
		and	[ebp+var_4], 0
		lea	eax, [ebp+arg_0]
		push	eax
		lea	ecx, [edi+70h]
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B186E47
		mov	[esi], eax
		jmp	loc_6B187004
; ---------------------------------------------------------------------------

loc_6B186F66:				; DATA XREF: .rdata:6B1BB2C4o
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B186FFE
		retn
; ---------------------------------------------------------------------------

loc_6B186FA9:				; DATA XREF: .rdata:6B1BB2D4o
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	eax, [ebp+var_4C]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B186FFE
		retn
; ---------------------------------------------------------------------------

loc_6B186FFE:				; DATA XREF: Ordinal308+8Bo
					; Ordinal308+E0o
		mov	edi, [ebp+var_28]
		mov	esi, [ebp+arg_4]

loc_6B187004:				; CODE XREF: Ordinal308+49j
		lea	ecx, [ebp+var_48]
		call	Ordinal1635
		test	eax, eax
		jnz	short loc_6B187029
		mov	ecx, [esi]
		test	ecx, ecx
		jz	short loc_6B187029
		call	Ordinal525
		mov	eax, [esi]
		mov	byte ptr [eax+38h], 1
		mov	byte ptr [edi+4], 1
		mov	bl, 1
		jmp	short loc_6B18702B
; ---------------------------------------------------------------------------

loc_6B187029:				; CODE XREF: Ordinal308+F6j
					; Ordinal308+FCj
		xor	bl, bl

loc_6B18702B:				; CODE XREF: Ordinal308+10Fj
		lea	ecx, [ebp+var_48]
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal308	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


sub_6B18704E	proc near		; CODE XREF: Ordinal297+11p
					; Ordinal299+11p
		push	esi
		mov	esi, ecx
		call	sub_6B186515
		mov	eax, esi
		pop	esi
		retn
sub_6B18704E	endp

; Exported entry 297.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal297
Ordinal297	proc near		; CODE XREF: Ordinal367+23p
					; Ordinal309+23p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		call	Ordinal536
		lea	ecx, [esi+70h]
		mov	dword ptr [esi], offset	off_6B1AC424
		call	sub_6B18704E
		mov	eax, esi
		pop	esi
		retn
Ordinal297	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B187074(void *, char)
sub_6B187074	proc near		; DATA XREF: .rdata:off_6B1AC424o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal298
		test	[esp+4+arg_0], 1
		jz	short loc_6B18708A
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B18708A:				; CODE XREF: sub_6B187074+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B187074	endp

; Exported entry 300.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal300
Ordinal300	proc near		; CODE XREF: Ordinal299+1Cp
					; Ordinal368+30p
					; DATA XREF: ...

var_5C		= byte ptr -5Ch
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_46 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 50h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		mov	esi, ecx
		cmp	esi, edi
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_28], esi
		jz	loc_6B1871A4
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_5C]
		call	Ordinal1571
		and	[ebp+var_4], 0
		push	edi
		mov	ecx, esi
		call	Ordinal539
		push	offset aCkeyvalueco_11 ; "CKeyValueCollection::operator	=()"
		lea	ecx, [ebp+var_48]
		call	Ordinal1089
		add	edi, 70h
		lea	ecx, [esi+70h]
		push	edi
		mov	byte ptr [ebp+var_4], 2
		call	sub_6B186EC6
		jmp	loc_6B187194
; ---------------------------------------------------------------------------

loc_6B1870F9:				; DATA XREF: .rdata:6B1BB334o
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B187191
		retn
; ---------------------------------------------------------------------------

loc_6B18713C:				; DATA XREF: .rdata:6B1BB344o
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	eax, [ebp+var_4C]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B187191
		retn
; ---------------------------------------------------------------------------

loc_6B187191:				; DATA XREF: Ordinal300+A6o
					; Ordinal300+FBo
		mov	esi, [ebp+var_28]

loc_6B187194:				; CODE XREF: Ordinal300+64j
		lea	ecx, [ebp+var_48]
		call	Ordinal1090
		lea	ecx, [ebp+var_5C]
		call	Ordinal1573

loc_6B1871A4:				; CODE XREF: Ordinal300+25j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal300	endp ; sp-analysis failed

; Exported entry 299.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal299
Ordinal299	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal536
		lea	ecx, [esi+70h]
		mov	dword ptr [esi], offset	off_6B1AC424
		call	sub_6B18704E
		push	[esp+4+arg_0]
		mov	ecx, esi
		call	Ordinal300
		mov	byte ptr [esi+4], 0
		mov	eax, esi
		pop	esi
		retn	4
Ordinal299	endp

; Exported entry 359.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal359
Ordinal359	proc near		; DATA XREF: .rdata:6B1AC4F8o
					; .rdata:off_6B1BF428o
		add	ecx, 10h
		jmp	Ordinal303
Ordinal359	endp

; Exported entry 368.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal368
Ordinal368	proc near		; CODE XREF: Ordinal367+4Fp
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		mov	esi, ecx
		cmp	esi, edi
		jz	short loc_6B18722F
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+20h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	eax, edi
		add	edi, 18h
		neg	eax
		sbb	eax, eax
		and	eax, edi
		push	eax
		lea	ecx, [esi+18h]
		call	Ordinal300
		lea	ecx, [ebp+var_C]
		call	Ordinal1573

loc_6B18722F:				; CODE XREF: Ordinal368+Fj
		pop	edi
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal368	endp

; Exported entry 371.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal371
Ordinal371	proc near		; DATA XREF: .rdata:6B1AC4D4o
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		push	0
		add	ecx, 14h
		push	0FFFFFFFFh
		push	ecx
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	edi, [ebp+arg_0]
		mov	esi, offset dword_6B1AA4AC
		movsd
		movsd
		movsd
		lea	ecx, [ebp+var_C]
		movsd
		call	Ordinal1573
		pop	edi
		mov	al, 1
		pop	esi
		leave
		retn	4
Ordinal371	endp

; Exported entry 366.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal366
Ordinal366	proc near		; CODE XREF: sub_6B187524+3p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		push	edi
		lea	edi, [esi+18h]
		mov	ecx, edi
		mov	dword ptr [esi], offset	off_6B1AC5A4
		mov	dword ptr [esi+8], offset off_6B1AC4D8
		mov	dword ptr [esi+0Ch], offset off_6B1AC4B4
		mov	dword ptr [esi+10h], offset off_6B1AC4A0
		mov	dword ptr [edi], offset	off_6B1AC488
		call	Ordinal303
		mov	ecx, edi
		call	Ordinal298
		push	offset Addend	; lpAddend
		mov	dword ptr [esi], offset	off_6B1AABD4
		call	ds:InterlockedDecrement
		pop	edi
		pop	esi
		retn
Ordinal366	endp

; Exported entry 310.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal310(void	*Buf2, int)
		public Ordinal310
Ordinal310	proc near		; CODE XREF: Ordinal373+3j
					; Ordinal376+3j
					; DATA XREF: ...

Buf2		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ebx, [ebp+Buf2]
		push	esi
		push	edi
		push	10h		; Size
		push	ebx		; Buf2
		mov	esi, offset dword_6B1AA47C
		push	esi		; Buf1
		mov	edi, ecx
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	loc_6B187386
		push	10h		; Size
		push	ebx		; Buf2
		push	offset dword_6B1AA49C ;	Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	loc_6B187386
		push	10h		; Size
		push	ebx		; Buf2
		push	esi		; Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	loc_6B187386
		push	10h		; Size
		push	ebx		; Buf2
		push	offset dword_6B1AA4AC ;	Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_6B187386
		push	10h		; Size
		push	ebx		; Buf2
		push	esi		; Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_6B187378
		push	10h		; Size
		push	ebx		; Buf2
		push	offset dword_6B1AA4DC ;	Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_6B187378
		push	10h		; Size
		push	ebx		; Buf2
		push	esi		; Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_6B187373
		push	10h		; Size
		push	ebx		; Buf2
		push	offset dword_6B1AA50C ;	Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_6B187373
		mov	eax, [ebp+arg_4]
		and	dword ptr [eax], 0

loc_6B187367:				; CODE XREF: Ordinal310+E1j
		mov	eax, 80010200h

loc_6B18736C:				; CODE XREF: Ordinal310+EFj
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn	8
; ---------------------------------------------------------------------------

loc_6B187373:				; CODE XREF: Ordinal310+96j
					; Ordinal310+AAj
		lea	eax, [edi+8]
		jmp	short loc_6B18737B
; ---------------------------------------------------------------------------

loc_6B187378:				; CODE XREF: Ordinal310+72j
					; Ordinal310+86j
		lea	eax, [edi+4]

loc_6B18737B:				; CODE XREF: Ordinal310+C1j
		lea	ecx, [edi-8]
		neg	ecx
		sbb	ecx, ecx
		and	ecx, eax
		jmp	short loc_6B18738F
; ---------------------------------------------------------------------------

loc_6B187386:				; CODE XREF: Ordinal310+1Ej
					; Ordinal310+36j ...
		lea	ecx, [edi-8]
		neg	ecx
		sbb	ecx, ecx
		and	ecx, edi

loc_6B18738F:				; CODE XREF: Ordinal310+CFj
		test	ecx, ecx
		mov	eax, [ebp+arg_4]
		mov	[eax], ecx
		jz	short loc_6B187367
		mov	eax, [edi]
		mov	ecx, edi
		call	dword ptr [eax+4]
		mov	eax, 10000h
		jmp	short loc_6B18736C
Ordinal310	endp

; Exported entry 203.
; Exported entry 313.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal203
Ordinal203	proc near		; DATA XREF: .rdata:6B1AB750o
					; .rdata:6B1AC4E8o ...
		add	ecx, 10h	; ccL35_203
		jmp	Ordinal540
Ordinal203	endp

; Exported entry 204.
; Exported entry 314.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal204
Ordinal204	proc near		; DATA XREF: .rdata:6B1AB754o
					; .rdata:6B1AC4ECo ...
		add	ecx, 10h	; ccL35_204
		jmp	Ordinal541
Ordinal204	endp

; Exported entry 205.
; Exported entry 315.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal315
Ordinal315	proc near		; DATA XREF: .rdata:6B1AB758o
					; .rdata:6B1AC4F0o ...
		add	ecx, 10h	; ccL35_205
		jmp	Ordinal542
Ordinal315	endp

; Exported entry 206.
; Exported entry 316.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal316
Ordinal316	proc near		; DATA XREF: .rdata:6B1AB764o
					; .rdata:6B1AC4FCo ...
		add	ecx, 10h	; ccL35_206
		jmp	Ordinal543
Ordinal316	endp

; Exported entry 207.
; Exported entry 317.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal317
Ordinal317	proc near		; DATA XREF: .rdata:6B1AB768o
					; .rdata:6B1AC500o ...
		add	ecx, 10h	; ccL35_207
		jmp	Ordinal544
Ordinal317	endp

; Exported entry 208.
; Exported entry 318.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal318
Ordinal318	proc near		; DATA XREF: .rdata:6B1AB76Co
					; .rdata:6B1AC504o ...
		add	ecx, 10h	; ccL35_208
		jmp	Ordinal545
Ordinal318	endp

; Exported entry 209.
; Exported entry 319.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal209
Ordinal209	proc near		; DATA XREF: .rdata:6B1AB770o
					; .rdata:6B1AC508o ...
		add	ecx, 10h	; ccL35_209
		jmp	Ordinal546
Ordinal209	endp

; Exported entry 210.
; Exported entry 320.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal320
Ordinal320	proc near		; DATA XREF: .rdata:6B1AB7C0o
					; .rdata:6B1AC558o ...
		add	ecx, 10h	; ccL35_210
		jmp	Ordinal547
Ordinal320	endp

; Exported entry 211.
; Exported entry 321.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal321
Ordinal321	proc near		; DATA XREF: .rdata:6B1AB804o
					; .rdata:6B1AC59Co ...
		add	ecx, 10h	; ccL35_211
		jmp	Ordinal548
Ordinal321	endp

; Exported entry 212.
; Exported entry 322.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal322
Ordinal322	proc near		; DATA XREF: .rdata:6B1AB7BCo
					; .rdata:6B1AC554o ...
		add	ecx, 10h	; ccL35_212
		jmp	Ordinal549
Ordinal322	endp

; Exported entry 213.
; Exported entry 323.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal213
Ordinal213	proc near		; DATA XREF: .rdata:6B1AB800o
					; .rdata:6B1AC598o ...
		add	ecx, 10h	; ccL35_213
		jmp	Ordinal550
Ordinal213	endp

; Exported entry 214.
; Exported entry 324.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal214
Ordinal214	proc near		; DATA XREF: .rdata:6B1AB7B8o
					; .rdata:6B1AC550o ...
		add	ecx, 10h	; ccL35_214
		jmp	Ordinal551
Ordinal214	endp

; Exported entry 215.
; Exported entry 325.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal215
Ordinal215	proc near		; DATA XREF: .rdata:6B1AB7FCo
					; .rdata:6B1AC594o ...
		add	ecx, 10h	; ccL35_215
		jmp	Ordinal552
Ordinal215	endp

; Exported entry 216.
; Exported entry 326.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal326
Ordinal326	proc near		; DATA XREF: .rdata:6B1AB7B4o
					; .rdata:6B1AC54Co ...
		add	ecx, 10h	; ccL35_216
		jmp	Ordinal553
Ordinal326	endp

; Exported entry 217.
; Exported entry 327.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal327
Ordinal327	proc near		; DATA XREF: .rdata:6B1AB7F8o
					; .rdata:6B1AC590o ...
		add	ecx, 10h	; ccL35_217
		jmp	Ordinal554
Ordinal327	endp

; Exported entry 218.
; Exported entry 328.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal218
Ordinal218	proc near		; DATA XREF: .rdata:6B1AB7B0o
					; .rdata:6B1AC548o ...
		add	ecx, 10h	; ccL35_218
		jmp	Ordinal555
Ordinal218	endp

; Exported entry 219.
; Exported entry 329.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal219
Ordinal219	proc near		; DATA XREF: .rdata:6B1AB7F4o
					; .rdata:6B1AC58Co ...
		add	ecx, 10h	; ccL35_219
		jmp	Ordinal556
Ordinal219	endp

; Exported entry 220.
; Exported entry 330.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal220
Ordinal220	proc near		; DATA XREF: .rdata:6B1AB7ACo
					; .rdata:6B1AC544o ...
		add	ecx, 10h	; ccL35_220
		jmp	Ordinal557
Ordinal220	endp

; Exported entry 221.
; Exported entry 331.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal221
Ordinal221	proc near		; DATA XREF: .rdata:6B1AB7F0o
					; .rdata:6B1AC588o ...
		add	ecx, 10h	; ccL35_221
		jmp	Ordinal558
Ordinal221	endp

; Exported entry 222.
; Exported entry 332.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal222
Ordinal222	proc near		; DATA XREF: .rdata:6B1AB7A8o
					; .rdata:6B1AC540o ...
		add	ecx, 10h	; ccL35_222
		jmp	Ordinal559
Ordinal222	endp

; Exported entry 223.
; Exported entry 333.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal333
Ordinal333	proc near		; DATA XREF: .rdata:6B1AB7ECo
					; .rdata:6B1AC584o ...
		add	ecx, 10h	; ccL35_223
		jmp	Ordinal560
Ordinal333	endp

; Exported entry 225.
; Exported entry 335.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal225
Ordinal225	proc near		; DATA XREF: .rdata:6B1AB7E8o
					; .rdata:6B1AC580o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]	; ccL35_225
		add	ecx, 10h
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	Ordinal562
		retn	0Ch
Ordinal225	endp

; Exported entry 227.
; Exported entry 337.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal227
Ordinal227	proc near		; DATA XREF: .rdata:6B1AB7E4o
					; .rdata:6B1AC57Co ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]	; ccL35_227
		add	ecx, 10h
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		call	Ordinal564
		retn	0Ch
Ordinal227	endp

; Exported entry 230.
; Exported entry 340.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal230
Ordinal230	proc near		; DATA XREF: .rdata:6B1AB798o
					; .rdata:6B1AC530o ...
		add	ecx, 10h	; ccL35_230
		jmp	Ordinal567
Ordinal230	endp

; Exported entry 231.
; Exported entry 341.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal341
Ordinal341	proc near		; DATA XREF: .rdata:6B1AB7DCo
					; .rdata:6B1AC574o ...
		add	ecx, 10h	; ccL35_231
		jmp	Ordinal568
Ordinal341	endp

; Exported entry 232.
; Exported entry 342.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal232
Ordinal232	proc near		; DATA XREF: .rdata:6B1AB794o
					; .rdata:6B1AC52Co ...
		add	ecx, 10h	; ccL35_232
		jmp	Ordinal569
Ordinal232	endp

; Exported entry 233.
; Exported entry 343.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal343
Ordinal343	proc near		; DATA XREF: .rdata:6B1AB7D8o
					; .rdata:6B1AC570o ...
		add	ecx, 10h	; ccL35_233
		jmp	Ordinal570
Ordinal343	endp

; Exported entry 234.
; Exported entry 344.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal344
Ordinal344	proc near		; DATA XREF: .rdata:6B1AB790o
					; .rdata:6B1AC528o ...
		add	ecx, 10h	; ccL35_234
		jmp	Ordinal571
Ordinal344	endp

; Exported entry 235.
; Exported entry 345.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal345
Ordinal345	proc near		; DATA XREF: .rdata:6B1AB78Co
					; .rdata:6B1AC524o ...
		add	ecx, 10h	; ccL35_235
		jmp	Ordinal572
Ordinal345	endp

; Exported entry 236.
; Exported entry 346.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal236
Ordinal236	proc near		; DATA XREF: .rdata:6B1AB7D4o
					; .rdata:6B1AC56Co ...
		add	ecx, 10h	; ccL35_236
		jmp	Ordinal573
Ordinal236	endp

; Exported entry 237.
; Exported entry 347.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal237
Ordinal237	proc near		; DATA XREF: .rdata:6B1AB788o
					; .rdata:6B1AC520o ...
		add	ecx, 10h	; ccL35_237
		jmp	Ordinal574
Ordinal237	endp

; Exported entry 239.
; Exported entry 349.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal349
Ordinal349	proc near		; DATA XREF: .rdata:6B1AB7D0o
					; .rdata:6B1AC568o ...
		add	ecx, 10h	; ccL35_239
		jmp	Ordinal576
Ordinal349	endp

; Exported entry 242.
; Exported entry 352.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal352
Ordinal352	proc near		; DATA XREF: .rdata:6B1AB7CCo
					; .rdata:6B1AC564o ...
		add	ecx, 10h	; ccL35_242
		jmp	Ordinal579
Ordinal352	endp

; Exported entry 243.
; Exported entry 353.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal353
Ordinal353	proc near		; DATA XREF: .rdata:6B1AB778o
					; .rdata:6B1AC510o ...
		add	ecx, 10h	; ccL35_243
		jmp	Ordinal580
Ordinal353	endp

; Exported entry 357.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal357
Ordinal357	proc near		; DATA XREF: .rdata:6B1AC4E4o
					; .rdata:off_6B1BF428o
		add	ecx, 10h
		jmp	Ordinal301
Ordinal357	endp

; Exported entry 358.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal358
Ordinal358	proc near		; DATA XREF: .rdata:6B1AC4F4o
					; .rdata:off_6B1BF428o
		add	ecx, 10h
		jmp	Ordinal302
Ordinal358	endp

; Exported entry 360.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal360
Ordinal360	proc near		; DATA XREF: .rdata:6B1AC5A0o
					; .rdata:off_6B1BF428o
		add	ecx, 10h
		jmp	Ordinal304
Ordinal360	endp

; Exported entry 373.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal373
Ordinal373	proc near		; DATA XREF: .rdata:off_6B1AC4B4o
					; .rdata:off_6B1BF428o
		sub	ecx, 4
		jmp	Ordinal310
Ordinal373	endp

; Exported entry 376.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal376
Ordinal376	proc near		; DATA XREF: .rdata:off_6B1AC4A0o
					; .rdata:off_6B1BF428o
		sub	ecx, 8
		jmp	Ordinal310
Ordinal376	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1874FC	proc near		; DATA XREF: .rdata:off_6B1AC488o

arg_0		= byte ptr  4

		sub	ecx, 18h	; void *
		jmp	sub_6B187524
sub_6B1874FC	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B187504	proc near		; CODE XREF: sub_6B18771D+Ap

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	sub_6B187D45
		mov	ecx, [esp+4+arg_0]
		test	ecx, ecx
		jz	short loc_6B18751E
		mov	eax, [ecx]
		push	esi
		push	offset dword_6B1AA4AC
		call	dword ptr [eax]

loc_6B18751E:				; CODE XREF: sub_6B187504+Ej
		mov	eax, [esi]
		pop	esi
		retn	4
sub_6B187504	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B187524(void *, char)
sub_6B187524	proc near		; CODE XREF: sub_6B1874FC+3j
					; DATA XREF: .rdata:off_6B1AC5A4o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal366
		test	[esp+4+arg_0], 1
		jz	short loc_6B18753A
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B18753A:				; CODE XREF: sub_6B187524+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B187524	endp

; Exported entry 367.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal367
Ordinal367	proc near		; CODE XREF: Ordinal370+67p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	esi, ecx
		call	sub_6B1833E7
		mov	dword ptr [esi+8], offset off_6B1AC5B0
		lea	edi, [esi+18h]
		mov	dword ptr [esi+0Ch], offset off_6B1AB6B4
		mov	ecx, edi
		mov	dword ptr [esi+10h], offset off_6B1AB6D8
		call	Ordinal297
		push	[esp+8+arg_0]
		mov	ecx, esi
		mov	dword ptr [esi], offset	off_6B1AC5A4
		mov	dword ptr [esi+8], offset off_6B1AC4D8
		mov	dword ptr [esi+0Ch], offset off_6B1AC4B4
		mov	dword ptr [esi+10h], offset off_6B1AC4A0
		mov	dword ptr [edi], offset	off_6B1AC488
		call	Ordinal368
		pop	edi
		mov	byte ptr [esi+1Ch], 0
		mov	eax, esi
		pop	esi
		retn	4
Ordinal367	endp

; Exported entry 370.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal370
Ordinal370	proc near		; DATA XREF: .rdata:6B1AC4B0o
					; .rdata:off_6B1BF428o

var_68		= byte ptr -68h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_47 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 5Ch
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		mov	edi, ecx
		xor	ebx, ebx
		push	ebx
		mov	[ebp+var_14], eax
		push	0FFFFFFFFh
		lea	eax, [edi+10h]
		push	eax
		lea	ecx, [ebp+var_68]
		call	Ordinal1571
		mov	esi, [ebp+arg_0]
		mov	ecx, [esi]
		cmp	ecx, ebx
		mov	[ebp+var_4], ebx
		jz	short loc_6B1875E0
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		mov	[esi], ebx

loc_6B1875E0:				; CODE XREF: Ordinal370+38j
		push	offset aCkeyvalueco_12 ; "CKeyValueCollectionImpl::Clone()"
		lea	ecx, [ebp+var_48]
		call	Ordinal1089
		push	98h		; Size
		mov	byte ptr [ebp+var_4], 2
		call	??2@YAPAXI@Z	; operator new(uint)
		cmp	eax, ebx
		pop	ecx
		jz	short loc_6B18760D
		add	edi, 0FFFFFFF0h
		push	edi
		mov	ecx, eax
		call	Ordinal367
		jmp	short loc_6B18760F
; ---------------------------------------------------------------------------

loc_6B18760D:				; CODE XREF: Ordinal370+5Fj
		xor	eax, eax

loc_6B18760F:				; CODE XREF: Ordinal370+6Cj
		mov	ecx, eax
		add	eax, 8
		neg	ecx
		sbb	ecx, ecx
		and	ecx, eax
		jnz	short loc_6B187645
		lea	eax, [ebp+var_28]
		push	eax
		lea	ecx, [ebp+var_54]
		mov	[ebp+var_28], offset aBadAllocation ; "bad allocation"
		call	ds:??0exception@@QAE@ABQBD@Z ; exception::exception(char const * const &)
		push	offset dword_6B1BAC3C
		lea	eax, [ebp+var_54]
		push	eax
		mov	[ebp+var_54], offset off_6B1AABCC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B187645:				; CODE XREF: Ordinal370+7Bj
		mov	[esi], ecx
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		jmp	loc_6B1876EC
; ---------------------------------------------------------------------------

loc_6B187651:				; DATA XREF: .rdata:6B1BB3A4o
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	ecx, [ebp+var_5C]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1876E9
		retn
; ---------------------------------------------------------------------------

loc_6B187694:				; DATA XREF: .rdata:6B1BB3B4o
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	eax, [ebp+var_58]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1876E9
		retn
; ---------------------------------------------------------------------------

loc_6B1876E9:				; DATA XREF: Ordinal370+EFo
					; Ordinal370+144o
		mov	esi, [ebp+arg_0]

loc_6B1876EC:				; CODE XREF: Ordinal370+ADj
		cmp	dword ptr [esi], 0
		lea	ecx, [ebp+var_48]
		setnz	bl
		call	Ordinal1090
		lea	ecx, [ebp+var_68]
		call	Ordinal1573
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal370	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


sub_6B18771D	proc near		; CODE XREF: Ordinal369+21p

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		and	dword ptr [esi], 0
		call	sub_6B187504
		mov	eax, esi
		pop	esi
		retn	4
sub_6B18771D	endp

; Exported entry 309.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal309
Ordinal309	proc near		; CODE XREF: Ordinal372+45p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		push	edi
		mov	esi, ecx
		call	sub_6B1833E7
		mov	dword ptr [esi+8], offset off_6B1AC5B0
		lea	edi, [esi+18h]
		mov	dword ptr [esi+0Ch], offset off_6B1AB6B4
		mov	ecx, edi
		mov	dword ptr [esi+10h], offset off_6B1AB6D8
		call	Ordinal297
		mov	dword ptr [edi], offset	off_6B1AC488
		pop	edi
		mov	dword ptr [esi], offset	off_6B1AC5A4
		mov	dword ptr [esi+8], offset off_6B1AC4D8
		mov	dword ptr [esi+0Ch], offset off_6B1AC4B4
		mov	dword ptr [esi+10h], offset off_6B1AC4A0
		mov	eax, esi
		pop	esi
		retn
Ordinal309	endp

; Exported entry 369.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal369
Ordinal369	proc near		; DATA XREF: .rdata:6B1AC4ACo
					; .rdata:off_6B1BF428o

var_24		= byte ptr -24h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 24h
		push	ebx
		push	edi
		mov	edi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [edi+10h]
		push	eax
		lea	ecx, [ebp+var_24]
		call	Ordinal1571
		push	[ebp+arg_0]
		lea	ecx, [ebp+var_4]
		call	sub_6B18771D
		cmp	[ebp+var_4], ebx
		jnz	short loc_6B1877BA
		push	offset aCkeyvalueco_13 ; "CKeyValueCollectionImpl::Copy() : pKeyV"...
		call	sub_6B18102E
		pop	ecx
		xor	bl, bl
		jmp	short loc_6B1877E4
; ---------------------------------------------------------------------------

loc_6B1877BA:				; CODE XREF: Ordinal369+29j
		push	esi
		lea	esi, [edi-8]
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+20h]
		mov	ecx, [ebp+var_4]
		mov	eax, [ecx]
		call	dword ptr [eax+0Ch]
		cmp	eax, ebx
		mov	[ebp+var_18], eax
		mov	[ebp+var_8], ebx
		mov	[ebp+var_C], ebx
		mov	[ebp+arg_0], ebx
		ja	short loc_6B1877FE

loc_6B1877DD:				; CODE XREF: Ordinal369+F3j
		mov	byte ptr [edi+0Ch], 1
		mov	bl, 1

loc_6B1877E3:				; CODE XREF: Ordinal369+121j
		pop	esi

loc_6B1877E4:				; CODE XREF: Ordinal369+38j
		lea	ecx, [ebp+var_4]
		call	sub_6B189962
		lea	ecx, [ebp+var_24]
		call	Ordinal1573
		pop	edi
		mov	al, bl
		pop	ebx
		leave
		retn	4
; ---------------------------------------------------------------------------

loc_6B1877FC:				; CODE XREF: Ordinal369+F1j
		xor	ebx, ebx

loc_6B1877FE:				; CODE XREF: Ordinal369+5Bj
		mov	ecx, [ebp+var_4]
		mov	eax, [ecx]
		lea	edx, [ebp+var_8]
		push	edx
		push	[ebp+arg_0]
		call	dword ptr [eax+0C8h]
		test	al, al
		jz	short loc_6B187878
		mov	ecx, [ebp+var_4]
		push	[ebp+var_8]
		mov	eax, [ecx]
		call	dword ptr [eax+18h]
		mov	ecx, [ebp+var_4]
		push	[ebp+var_8]
		mov	[ebp+var_10], eax
		mov	eax, [ecx]
		call	dword ptr [eax+14h]
		cmp	[ebp+var_10], ebx
		mov	[ebp+var_14], eax
		jz	short loc_6B18788D
		cmp	eax, ebx
		jz	short loc_6B18788D
		lea	ecx, [ebp+var_C]
		push	ecx
		push	[ebp+var_8]
		lea	ebx, [edi+8]
		mov	eax, [ebx]
		mov	ecx, ebx
		call	dword ptr [eax+14h]
		test	al, al
		jz	short loc_6B18787F
		push	[ebp+var_C]
		mov	ecx, ebx
		push	[ebp+var_10]
		push	[ebp+var_14]
		push	[ebp+var_8]
		push	[ebp+var_4]
		call	Ordinal594
		test	al, al
		jz	short loc_6B187886
		inc	[ebp+arg_0]
		mov	eax, [ebp+arg_0]
		cmp	eax, [ebp+var_18]
		jb	short loc_6B1877FC
		jmp	loc_6B1877DD
; ---------------------------------------------------------------------------

loc_6B187878:				; CODE XREF: Ordinal369+92j
		push	offset aCkeyvalueco_14 ; "CKeyValueCollectionImpl::Copy() : pKeyV"...
		jmp	short loc_6B187892
; ---------------------------------------------------------------------------

loc_6B18787F:				; CODE XREF: Ordinal369+CCj
		push	offset aCkeyvalueco_15 ; "CKeyValueCollectionImpl::Copy() : GetWr"...
		jmp	short loc_6B187892
; ---------------------------------------------------------------------------

loc_6B187886:				; CODE XREF: Ordinal369+E6j
		push	offset aCkeyvalueco_16 ; "CKeyValueCollectionImpl::Copy() : CopyV"...
		jmp	short loc_6B187892
; ---------------------------------------------------------------------------

loc_6B18788D:				; CODE XREF: Ordinal369+B3j
					; Ordinal369+B7j
		push	offset aCkeyvalueco_17 ; "CKeyValueCollectionImpl::Copy() : eValu"...

loc_6B187892:				; CODE XREF: Ordinal369+FDj
					; Ordinal369+104j ...
		call	sub_6B18102E
		mov	eax, [esi]
		pop	ecx
		mov	ecx, esi
		call	dword ptr [eax+20h]
		xor	bl, bl
		jmp	loc_6B1877E3
Ordinal369	endp

; Exported entry 372.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal372
Ordinal372	proc near		; CODE XREF: Ordinal592+55p
					; DATA XREF: .rdata:off_6B1BF428o

var_60		= dword	ptr -60h
var_4C		= byte ptr -4Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_48 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 54h
		mov	eax, ___security_cookie
		and	[ebp+var_28], 0
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCkeyvalueco_18 ; "CKeyValueCollectionImpl::CreateKeyValue"...
		lea	ecx, [ebp+var_4C]
		mov	[ebp+var_14], eax
		call	Ordinal1089
		and	[ebp+var_4], 0
		push	98h		; Size
		mov	byte ptr [ebp+var_4], 1
		call	??2@YAPAXI@Z	; operator new(uint)
		test	eax, eax
		pop	ecx
		jz	short loc_6B1878F4
		mov	ecx, eax
		call	Ordinal309
		mov	ecx, eax
		jmp	short loc_6B1878F6
; ---------------------------------------------------------------------------

loc_6B1878F4:				; CODE XREF: Ordinal372+41j
		xor	ecx, ecx

loc_6B1878F6:				; CODE XREF: Ordinal372+4Cj
		test	ecx, ecx
		mov	[ebp+var_28], ecx
		jnz	short loc_6B187926
		lea	eax, [ebp+var_2C]
		push	eax
		lea	ecx, [ebp+var_60]
		mov	[ebp+var_2C], offset aBadAllocation ; "bad allocation"
		call	ds:??0exception@@QAE@ABQBD@Z ; exception::exception(char const * const &)
		push	offset dword_6B1BAC3C
		lea	eax, [ebp+var_60]
		push	eax
		mov	[ebp+var_60], offset off_6B1AABCC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B187926:				; CODE XREF: Ordinal372+55j
		add	ecx, 8
		mov	eax, [ecx]
		call	dword ptr [eax+4]

loc_6B18792E:				; DATA XREF: sub_6B187950+3Do
					; sub_6B187993+4Fo
		lea	ecx, [ebp+var_4C]
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	eax, [ebp+var_28]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal372	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B187950	proc near		; DATA XREF: .rdata:6B1BB40Co
		push	13h
		lea	ecx, [ebp-4Ch]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-4Ch]
		call	Ordinal1101
		mov	ecx, [ebp-54h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-4Ch]
		call	Ordinal1103
		lea	ecx, [ebp-4Ch]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B18792E
		retn
sub_6B187950	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B187993	proc near		; DATA XREF: .rdata:6B1BB41Co
		push	15h
		lea	ecx, [ebp-4Ch]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-4Ch]
		call	Ordinal1101
		mov	eax, [ebp-50h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-4Ch]
		call	Ordinal1103
		lea	ecx, [ebp-4Ch]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B18792E
		retn
sub_6B187993	endp

; Exported entry 388.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal388
Ordinal388	proc near		; CODE XREF: sub_6B187D5A+Bp
					; Ordinal396+1Ap
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6B1AC848
		add	ecx, 4
		mov	dword ptr [ecx], offset	off_6B1AC83C
		jmp	Ordinal458
Ordinal388	endp

; Exported entry 380.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal380
Ordinal380	proc near		; DATA XREF: .rdata:off_6B1AC848o
					; .rdata:off_6B1BF428o
		mov	eax, [ecx+2Ch]
		lea	ecx, [eax+8]
		mov	eax, [ecx]
		jmp	dword ptr [eax]
Ordinal380	endp

; Exported entry 381.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal381
Ordinal381	proc near		; DATA XREF: .rdata:6B1AC84Co
					; .rdata:off_6B1BF428o
		mov	eax, [ecx+2Ch]
		lea	ecx, [eax+8]
		mov	eax, [ecx]
		jmp	dword ptr [eax+4]
Ordinal381	endp

; Exported entry 382.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal382
Ordinal382	proc near		; DATA XREF: .rdata:6B1AC850o
					; .rdata:off_6B1BF428o
		mov	eax, [ecx+2Ch]
		lea	ecx, [eax+8]
		mov	eax, [ecx]
		jmp	dword ptr [eax+8]
Ordinal382	endp

; Exported entry 383.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal383
Ordinal383	proc near		; DATA XREF: .rdata:6B1AC854o
					; .rdata:off_6B1BF428o
		add	ecx, 4
		jmp	Ordinal459
Ordinal383	endp

; Exported entry 384.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal384
Ordinal384	proc near		; DATA XREF: .rdata:6B1AC858o
					; .rdata:off_6B1BF428o
		add	ecx, 4
		jmp	Ordinal460
Ordinal384	endp

; Exported entry 385.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal385
Ordinal385	proc near		; DATA XREF: .rdata:6B1AC85Co
					; .rdata:off_6B1BF428o
		add	ecx, 4
		jmp	Ordinal461
Ordinal385	endp

; Exported entry 386.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal386
Ordinal386	proc near		; DATA XREF: .rdata:6B1AC860o
					; .rdata:off_6B1BF428o
		add	ecx, 4
		jmp	Ordinal462
Ordinal386	endp

; Exported entry 387.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal387
Ordinal387	proc near		; DATA XREF: .rdata:6B1AC864o
					; .rdata:off_6B1BF428o
		add	ecx, 4
		jmp	Ordinal463
Ordinal387	endp

; Exported entry 389.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal389
Ordinal389	proc near		; DATA XREF: .rdata:6B1AC868o
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		push	0
		add	ecx, 0Ch
		push	0FFFFFFFFh
		push	ecx
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	edi, [ebp+arg_0]
		mov	esi, offset dword_6B1AA4FC
		movsd
		movsd
		movsd
		lea	ecx, [ebp+var_C]
		movsd
		call	Ordinal1573
		pop	edi
		mov	al, 1
		pop	esi
		leave
		retn	4
Ordinal389	endp

; Exported entry 390.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal390
Ordinal390	proc near		; DATA XREF: .rdata:6B1AC844o
					; .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		mov	ecx, [ebp+arg_0]
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_4]
		push	eax
		call	Ordinal626
		test	eax, eax
		jz	short loc_6B187AC8
		mov	eax, [ebp+var_4]
		dec	eax
		mov	bl, 1
		jz	short loc_6B187AB5
		push	offset aCserializeimpl ; "CSerializeImpl::Load() : switch(default"...
		jmp	short loc_6B187ACD
; ---------------------------------------------------------------------------

loc_6B187AB5:				; CODE XREF: Ordinal390+34j
		mov	eax, [esi+28h]
		mov	ecx, [ebp+arg_0]
		add	eax, 10h
		push	eax		; Args
		call	Ordinal652
		test	eax, eax
		jnz	short loc_6B187AD5

loc_6B187AC8:				; CODE XREF: Ordinal390+2Cj
		push	offset aCserializeim_0 ; "CSerializeImpl::Load() : Archive.Read()"...

loc_6B187ACD:				; CODE XREF: Ordinal390+3Bj
		call	sub_6B18102E
		pop	ecx
		xor	bl, bl

loc_6B187AD5:				; CODE XREF: Ordinal390+4Ej
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal390	endp

; Exported entry 391.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal391
Ordinal391	proc near		; DATA XREF: .rdata:6B1AC840o
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	ecx, [ebp+arg_0]
		xor	ebx, ebx
		inc	ebx
		push	ebx
		call	Ordinal627
		test	eax, eax
		jz	short loc_6B187B22
		mov	eax, [esi+28h]
		mov	ecx, [ebp+arg_0]
		add	eax, 10h
		push	eax
		call	Ordinal654
		test	eax, eax
		jnz	short loc_6B187B2F

loc_6B187B22:				; CODE XREF: Ordinal391+28j
		push	offset aCserializeim_1 ; "CSerializeImpl::Save() : Archive.Write("...
		call	sub_6B18102E
		pop	ecx
		xor	bl, bl

loc_6B187B2F:				; CODE XREF: Ordinal391+3Bj
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal391	endp

; Exported entry 400.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal400
Ordinal400	proc near		; CODE XREF: Ordinal399+10p
					; Ordinal398+44p
					; DATA XREF: ...

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	ecx, [esi+24h]
		call	Ordinal464
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	ecx, [esi+8]
		mov	eax, [ecx]
		call	dword ptr [eax+14h]
		lea	ecx, [esi+20h]
		mov	eax, [ecx]
		push	1
		call	dword ptr [eax+1Ch]
		push	[ebp+arg_0]
		lea	ecx, [esi+10h]
		call	Ordinal1201
		test	eax, eax
		jnz	short loc_6B187B89
		push	offset aCmemoryimplOpe ; "CMemoryImpl::operator	=(CMemory) : m_Me"...
		call	sub_6B18102E
		pop	ecx

loc_6B187B89:				; CODE XREF: Ordinal400+3Dj
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal400	endp

; Exported entry 403.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal403
Ordinal403	proc near		; DATA XREF: .rdata:6B1AC998o
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	ecx, [esi+1Ch]
		call	Ordinal464
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		push	[ebp+arg_0]
		lea	ecx, [esi+8]
		call	Ordinal1196
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal403	endp ; sp-analysis failed

; Exported entry 404.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal404
Ordinal404	proc near		; DATA XREF: .rdata:6B1AC99Co
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	ecx, [esi+1Ch]
		call	Ordinal464
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		push	[ebp+arg_0]
		lea	ecx, [esi+8]
		call	Ordinal1199
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal404	endp

; Exported entry 405.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal405
Ordinal405	proc near		; DATA XREF: .rdata:6B1AC9A0o
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	ecx, [esi+1Ch]
		call	Ordinal464
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	ecx, [esi+8]
		call	Ordinal1200
		lea	ecx, [esi+18h]
		mov	eax, [ecx]
		push	0
		call	dword ptr [eax+1Ch]
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		pop	esi
		leave
		retn
Ordinal405	endp

; Exported entry 406.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal406
Ordinal406	proc near		; DATA XREF: .rdata:6B1AC9A4o
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	ecx, [esi+1Ch]
		call	Ordinal464
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	ecx, [esi+8]
		call	Ordinal1052
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal406	endp

; Exported entry 407.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal407
Ordinal407	proc near		; DATA XREF: .rdata:6B1AC9A8o
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	ecx, [esi+1Ch]
		call	Ordinal464
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	ecx, [esi+8]
		call	Ordinal1493
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal407	endp

; Exported entry 408.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal408(void	*Src, size_t dwBytes)
		public Ordinal408
Ordinal408	proc near		; DATA XREF: .rdata:6B1AC9ACo
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
Src		= dword	ptr  8
dwBytes		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	ecx, [esi+1Ch]
		call	Ordinal464
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+14h]
		lea	ecx, [esi+18h]
		mov	eax, [ecx]
		push	1
		call	dword ptr [eax+1Ch]
		push	[ebp+dwBytes]	; dwBytes
		add	esi, 8
		push	[ebp+Src]	; Src
		mov	ecx, esi
		push	2		; int
		call	Ordinal1202
		test	eax, eax
		jnz	short loc_6B187D01
		push	offset aCmemoryimplSet ; "CMemoryImpl::SetMemory() : m_Memory.Cop"...
		call	sub_6B18102E
		pop	ecx

loc_6B187D01:				; CODE XREF: Ordinal408+43j
		mov	ecx, esi
		call	Ordinal1493
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn	8
Ordinal408	endp

; Exported entry 409.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal409
Ordinal409	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	ecx, [esi+24h]
		call	Ordinal464
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		lea	eax, [esi+10h]
		pop	esi
		leave
		retn
Ordinal409	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B187D45	proc near		; CODE XREF: sub_6B185444+3p
					; sub_6B187504+3p ...
		push	esi
		mov	esi, ecx
		mov	ecx, [esi]
		xor	eax, eax
		test	ecx, ecx
		jz	short loc_6B187D58
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		and	dword ptr [esi], 0

loc_6B187D58:				; CODE XREF: sub_6B187D45+9j
		pop	esi
		retn
sub_6B187D45	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B187D5A	proc near		; DATA XREF: .rdata:off_6B1AC83Co

arg_0		= byte ptr  4

		sub	ecx, 4
		jmp	$+5
		push	esi
		mov	esi, ecx
		call	Ordinal388
		test	[esp+4+arg_0], 1
		jz	short loc_6B187D78
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B187D78:				; CODE XREF: sub_6B187D5A+15j
		mov	eax, esi
		pop	esi
		retn	4
sub_6B187D5A	endp

; Exported entry 396.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal396
Ordinal396	proc near		; CODE XREF: sub_6B187F21+3p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+20h]
		mov	dword ptr [esi], offset	off_6B1AC9B0
		mov	dword ptr [esi+8], offset off_6B1AC98C
		mov	dword ptr [esi+0Ch], offset off_6B1AC978
		call	Ordinal388
		lea	ecx, [esi+10h]
		call	Ordinal1189
		push	offset Addend	; lpAddend
		mov	dword ptr [esi], offset	off_6B1AABD4
		call	ds:InterlockedDecrement
		pop	esi
		retn
Ordinal396	endp

; Exported entry 393.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal393(void	*Buf2, int)
		public Ordinal393
Ordinal393	proc near		; CODE XREF: Ordinal411+3j
					; DATA XREF: .rdata:off_6B1AC98Co ...

Buf2		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ebx, [ebp+Buf2]
		push	esi
		push	edi
		push	10h		; Size
		push	ebx		; Buf2
		mov	esi, offset dword_6B1AA47C
		push	esi		; Buf1
		mov	edi, ecx
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_6B187E49
		push	10h		; Size
		push	ebx		; Buf2
		push	offset dword_6B1AA4FC ;	Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_6B187E49
		push	10h		; Size
		push	ebx		; Buf2
		push	esi		; Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_6B187E3B
		push	10h		; Size
		push	ebx		; Buf2
		push	offset dword_6B1AA50C ;	Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_6B187E3B
		push	10h		; Size
		push	ebx		; Buf2
		push	offset dword_6B1AA4DC ;	Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		mov	eax, [ebp+arg_4]
		jnz	short loc_6B187E2C
		lea	ecx, [edi+18h]
		jmp	short loc_6B187E55
; ---------------------------------------------------------------------------

loc_6B187E2C:				; CODE XREF: Ordinal393+6Dj
		and	dword ptr [eax], 0

loc_6B187E2F:				; CODE XREF: Ordinal393+A1j
		mov	eax, 80010200h

loc_6B187E34:				; CODE XREF: Ordinal393+AFj
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn	8
; ---------------------------------------------------------------------------

loc_6B187E3B:				; CODE XREF: Ordinal393+42j
					; Ordinal393+56j
		lea	ecx, [edi-8]
		neg	ecx
		lea	eax, [edi+4]
		sbb	ecx, ecx
		and	ecx, eax
		jmp	short loc_6B187E52
; ---------------------------------------------------------------------------

loc_6B187E49:				; CODE XREF: Ordinal393+1Ej
					; Ordinal393+32j
		lea	ecx, [edi-8]
		neg	ecx
		sbb	ecx, ecx
		and	ecx, edi

loc_6B187E52:				; CODE XREF: Ordinal393+8Fj
		mov	eax, [ebp+arg_4]

loc_6B187E55:				; CODE XREF: Ordinal393+72j
		test	ecx, ecx
		mov	[eax], ecx
		jz	short loc_6B187E2F
		mov	eax, [edi]
		mov	ecx, edi
		call	dword ptr [eax+4]
		mov	eax, 10000h
		jmp	short loc_6B187E34
Ordinal393	endp

; Exported entry 156.
; Exported entry 201.
; Exported entry 311.
; Exported entry 394.
; Exported entry 416.
; Exported entry 480.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal394
Ordinal394	proc near		; CODE XREF: Ordinal515+3j
					; Ordinal377+3j
					; DATA XREF: ...
		add	ecx, 0FFFFFFFCh	; ccL35_156
					; ccL35_201
					; ccL35_311
					; ccL35_394
					; ccL35_416
		push	ecx		; lpAddend
		call	ds:InterlockedIncrement
		retn
Ordinal394	endp

; Exported entry 411.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal411
Ordinal411	proc near		; DATA XREF: .rdata:off_6B1AC978o
					; .rdata:off_6B1BF428o
		sub	ecx, 4
		jmp	Ordinal393
Ordinal411	endp

; Exported entry 399.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal399
Ordinal399	proc near		; CODE XREF: Ordinal397+44p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	ecx, eax
		jnz	short loc_6B187E88
		mov	eax, ecx
		jmp	short locret_6B187E91
; ---------------------------------------------------------------------------

loc_6B187E88:				; CODE XREF: Ordinal399+6j
		add	eax, 10h
		push	eax
		call	Ordinal400

locret_6B187E91:			; CODE XREF: Ordinal399+Aj
		retn	4
Ordinal399	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B187E94	proc near		; CODE XREF: sub_6B1882AE+Ap

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	sub_6B187D45
		mov	ecx, [esp+4+arg_0]
		test	ecx, ecx
		jz	short loc_6B187EAE
		mov	eax, [ecx]
		push	esi
		push	offset dword_6B1AA4FC
		call	dword ptr [eax]

loc_6B187EAE:				; CODE XREF: sub_6B187E94+Ej
		mov	eax, [esi]
		pop	esi
		retn	4
sub_6B187E94	endp

; Exported entry 379.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal379
Ordinal379	proc near		; CODE XREF: Ordinal392+36p
					; Ordinal397+39p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		push	edi
		lea	edi, [esi+4]
		mov	ecx, edi
		mov	dword ptr [esi], offset	off_6B1AB6B4
		call	Ordinal457
		mov	eax, [esp+8+arg_0]
		mov	dword ptr [edi], offset	off_6B1AC83C
		mov	[esi+2Ch], eax
		pop	edi
		mov	dword ptr [esi], offset	off_6B1AC848
		mov	eax, esi
		pop	esi
		retn	4
Ordinal379	endp

; Exported entry 392.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal392
Ordinal392	proc near		; CODE XREF: Ordinal410+42p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	sub_6B1833E7
		mov	dword ptr [esi+8], offset off_6B1AB6B4
		mov	dword ptr [esi+0Ch], offset off_6B1AB6D8
		lea	ecx, [esi+10h]
		mov	dword ptr [esi], offset	off_6B1AC9B0
		mov	dword ptr [esi+8], offset off_6B1AC98C
		mov	dword ptr [esi+0Ch], offset off_6B1AC978
		call	Ordinal1187
		push	esi
		lea	ecx, [esi+20h]
		call	Ordinal379
		mov	eax, esi
		pop	esi
		retn
Ordinal392	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B187F21(void *, char)
sub_6B187F21	proc near		; DATA XREF: .rdata:off_6B1AC9B0o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal396
		test	[esp+4+arg_0], 1
		jz	short loc_6B187F37
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B187F37:				; CODE XREF: sub_6B187F21+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B187F21	endp

; Exported entry 397.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal397
Ordinal397	proc near		; CODE XREF: Ordinal402+69p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	esi, ecx
		call	sub_6B1833E7
		mov	dword ptr [esi+8], offset off_6B1AB6B4
		mov	dword ptr [esi+0Ch], offset off_6B1AB6D8
		lea	ecx, [esi+10h]
		mov	dword ptr [esi], offset	off_6B1AC9B0
		mov	dword ptr [esi+8], offset off_6B1AC98C
		mov	dword ptr [esi+0Ch], offset off_6B1AC978
		call	Ordinal1187
		lea	edi, [esi+20h]
		push	esi
		mov	ecx, edi
		call	Ordinal379
		push	[esp+8+arg_0]
		mov	ecx, esi
		call	Ordinal399
		mov	eax, [edi]
		push	0
		mov	ecx, edi
		call	dword ptr [eax+1Ch]
		pop	edi
		mov	eax, esi
		pop	esi
		retn	4
Ordinal397	endp

; Exported entry 398.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal398
Ordinal398	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	esi, ecx
		call	sub_6B1833E7
		mov	dword ptr [esi+8], offset off_6B1AB6B4
		mov	dword ptr [esi+0Ch], offset off_6B1AB6D8
		lea	ecx, [esi+10h]
		mov	dword ptr [esi], offset	off_6B1AC9B0
		mov	dword ptr [esi+8], offset off_6B1AC98C
		mov	dword ptr [esi+0Ch], offset off_6B1AC978
		call	Ordinal1187
		lea	edi, [esi+20h]
		push	esi
		mov	ecx, edi
		call	Ordinal379
		push	[esp+8+arg_0]
		mov	ecx, esi
		call	Ordinal400
		mov	eax, [edi]
		push	0
		mov	ecx, edi
		call	dword ptr [eax+1Ch]
		pop	edi
		mov	eax, esi
		pop	esi
		retn	4
Ordinal398	endp

; Exported entry 402.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal402
Ordinal402	proc near		; DATA XREF: .rdata:6B1AC988o
					; .rdata:off_6B1BF428o

var_68		= byte ptr -68h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_49 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 5Ch
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		mov	edi, ecx
		mov	ecx, [esi]
		xor	ebx, ebx
		cmp	ecx, ebx
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		jz	short loc_6B18801E
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		mov	[esi], ebx

loc_6B18801E:				; CODE XREF: Ordinal402+26j
		push	ebx
		push	0FFFFFFFFh
		lea	ecx, [edi+18h]
		call	Ordinal464
		push	eax
		lea	ecx, [ebp+var_68]
		call	Ordinal1571
		push	offset aCmemoryimplClo ; "CMemoryImpl::Clone()"
		lea	ecx, [ebp+var_48]
		mov	[ebp+var_4], ebx
		call	Ordinal1089
		push	50h		; Size
		mov	byte ptr [ebp+var_4], 2
		call	??2@YAPAXI@Z	; operator new(uint)
		cmp	eax, ebx
		pop	ecx
		jz	short loc_6B18805F
		add	edi, 0FFFFFFF4h
		push	edi
		mov	ecx, eax
		call	Ordinal397
		jmp	short loc_6B188061
; ---------------------------------------------------------------------------

loc_6B18805F:				; CODE XREF: Ordinal402+61j
		xor	eax, eax

loc_6B188061:				; CODE XREF: Ordinal402+6Ej
		mov	ecx, eax
		add	eax, 8
		neg	ecx
		sbb	ecx, ecx
		and	ecx, eax
		jnz	short loc_6B188097
		lea	eax, [ebp+var_28]
		push	eax
		lea	ecx, [ebp+var_54]
		mov	[ebp+var_28], offset aBadAllocation ; "bad allocation"
		call	ds:??0exception@@QAE@ABQBD@Z ; exception::exception(char const * const &)
		push	offset dword_6B1BAC3C
		lea	eax, [ebp+var_54]
		push	eax
		mov	[ebp+var_54], offset off_6B1AABCC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B188097:				; CODE XREF: Ordinal402+7Dj
		mov	[esi], ecx
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		jmp	loc_6B18813E
; ---------------------------------------------------------------------------

loc_6B1880A3:				; DATA XREF: .rdata:6B1BB47Co
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	ecx, [ebp+var_5C]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B18813B
		retn
; ---------------------------------------------------------------------------

loc_6B1880E6:				; DATA XREF: .rdata:6B1BB48Co
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	eax, [ebp+var_58]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B18813B
		retn
; ---------------------------------------------------------------------------

loc_6B18813B:				; DATA XREF: Ordinal402+F1o
					; Ordinal402+146o
		mov	esi, [ebp+arg_0]

loc_6B18813E:				; CODE XREF: Ordinal402+AFj
		cmp	dword ptr [esi], 0
		lea	ecx, [ebp+var_48]
		setnz	bl
		call	Ordinal1090
		lea	ecx, [ebp+var_68]
		call	Ordinal1573
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal402	endp ; sp-analysis failed

; Exported entry 410.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal410
Ordinal410	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_60		= dword	ptr -60h
var_4C		= byte ptr -4Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_50 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 54h
		mov	eax, ___security_cookie
		and	[ebp+var_28], 0
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCmemoryimplCre ; "CMemoryImpl::CreateMemoryImpl()"
		lea	ecx, [ebp+var_4C]
		mov	[ebp+var_14], eax
		call	Ordinal1089
		and	[ebp+var_4], 0
		push	50h		; Size
		mov	byte ptr [ebp+var_4], 1
		call	??2@YAPAXI@Z	; operator new(uint)
		test	eax, eax
		pop	ecx
		jz	short loc_6B1881BA
		mov	ecx, eax
		call	Ordinal392
		mov	ecx, eax
		jmp	short loc_6B1881BC
; ---------------------------------------------------------------------------

loc_6B1881BA:				; CODE XREF: Ordinal410+3Ej
		xor	ecx, ecx

loc_6B1881BC:				; CODE XREF: Ordinal410+49j
		test	ecx, ecx
		mov	[ebp+var_28], ecx
		jnz	short loc_6B1881EC
		lea	eax, [ebp+var_2C]
		push	eax
		lea	ecx, [ebp+var_60]
		mov	[ebp+var_2C], offset aBadAllocation ; "bad allocation"
		call	ds:??0exception@@QAE@ABQBD@Z ; exception::exception(char const * const &)
		push	offset dword_6B1BAC3C
		lea	eax, [ebp+var_60]
		push	eax
		mov	[ebp+var_60], offset off_6B1AABCC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B1881EC:				; CODE XREF: Ordinal410+52j
		add	ecx, 8
		mov	eax, [ecx]
		call	dword ptr [eax+4]

loc_6B1881F4:				; DATA XREF: sub_6B188216+3Do
					; sub_6B188259+4Fo
		lea	ecx, [ebp+var_4C]
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	eax, [ebp+var_28]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal410	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B188216	proc near		; DATA XREF: .rdata:6B1BB4E4o
		push	13h
		lea	ecx, [ebp-4Ch]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-4Ch]
		call	Ordinal1101
		mov	ecx, [ebp-54h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-4Ch]
		call	Ordinal1103
		lea	ecx, [ebp-4Ch]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1881F4
		retn
sub_6B188216	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B188259	proc near		; DATA XREF: .rdata:6B1BB4F4o
		push	15h
		lea	ecx, [ebp-4Ch]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-4Ch]
		call	Ordinal1101
		mov	eax, [ebp-50h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-4Ch]
		call	Ordinal1103
		lea	ecx, [ebp-4Ch]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1881F4
		retn
sub_6B188259	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1882AE	proc near		; CODE XREF: Ordinal401+10p

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		and	dword ptr [esi], 0
		call	sub_6B187E94
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1882AE	endp

; Exported entry 401.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal401
Ordinal401	proc near		; DATA XREF: .rdata:6B1AC984o
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		lea	ecx, [ebp+arg_0]
		call	sub_6B1882AE
		cmp	[ebp+arg_0], 0
		jnz	short loc_6B1882ED
		push	offset aCmemoryimplCop ; "CMemoryImpl::Copy() :	pMemory	== NULL\n"
		call	sub_6B18102E
		pop	ecx
		xor	bl, bl
		jmp	short loc_6B18834E
; ---------------------------------------------------------------------------

loc_6B1882ED:				; CODE XREF: Ordinal401+19j
		push	edi
		push	0
		push	0FFFFFFFFh
		lea	ecx, [esi+18h]
		call	Ordinal464
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	ecx, [esi-4]
		mov	eax, [ecx]
		call	dword ptr [eax+14h]
		xor	ebx, ebx
		lea	ecx, [esi+14h]
		mov	eax, [ecx]
		inc	ebx
		push	ebx		; dwBytes
		call	dword ptr [eax+1Ch]
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx]
		mov	edi, ecx
		call	dword ptr [eax+18h]
		push	eax
		mov	eax, [edi]
		mov	ecx, edi
		call	dword ptr [eax+1Ch]
		push	eax		; Src
		push	2		; int
		lea	ecx, [esi+4]
		call	Ordinal1202
		test	eax, eax
		pop	edi
		jnz	short loc_6B188346
		push	offset aCmemoryimplC_0 ; "CMemoryImpl::Copy() :	m_Memory.Copy()	="...
		call	sub_6B18102E
		pop	ecx
		xor	bl, bl

loc_6B188346:				; CODE XREF: Ordinal401+74j
		lea	ecx, [ebp+var_C]
		call	Ordinal1573

loc_6B18834E:				; CODE XREF: Ordinal401+28j
		lea	ecx, [ebp+arg_0]
		call	sub_6B189962
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal401	endp

; Exported entry 422.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal422
Ordinal422	proc near		; CODE XREF: Ordinal420+36p
					; Ordinal421+2Dp
					; DATA XREF: ...

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+20h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	edi, [esi+10h]
		mov	ecx, edi
		call	Ordinal1200
		push	[ebp+arg_0]
		and	dword ptr [esi+0Ch], 0
		mov	ecx, edi
		call	Ordinal1201
		test	eax, eax
		jnz	short loc_6B18839F
		push	offset aCmemorystreami ; "CMemoryStreamImpl::operator =(CMemory) "...
		call	sub_6B18102E
		pop	ecx

loc_6B18839F:				; CODE XREF: Ordinal422+34j
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		pop	edi
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal422	endp

; Exported entry 423.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal423
Ordinal423	proc near		; DATA XREF: .rdata:6B1ACC1Co
					; .rdata:6B1AD6C4o ...

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+18h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	ecx, [esi+8]
		call	Ordinal1052
		mov	ecx, [ebp+arg_0]
		and	dword ptr [ecx+4], 0
		mov	[ecx], eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	al, 1
		pop	esi
		leave
		retn	4
Ordinal423	endp

; Exported entry 424.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal424(char	Args, int)
		public Ordinal424
Ordinal424	proc near		; DATA XREF: .rdata:6B1ACC20o
					; .rdata:6B1AD6C8o ...

var_C		= byte ptr -0Ch
Args		= byte ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+18h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	edi, [esi+8]
		mov	ecx, edi
		mov	bl, 1
		call	Ordinal1052
		test	eax, eax
		push	dword ptr [ebp+Args] ; Args
		mov	ecx, edi
		jnz	short loc_6B188430
		call	Ordinal1196
		test	eax, eax
		jnz	short loc_6B188440
		push	offset aCmemorystrea_0 ; "CMemoryStreamImpl::SetSize() : m_Memory"...

loc_6B188426:				; CODE XREF: Ordinal424+56j
		call	sub_6B18102E
		pop	ecx
		xor	bl, bl
		jmp	short loc_6B188444
; ---------------------------------------------------------------------------

loc_6B188430:				; CODE XREF: Ordinal424+2Ej
		call	Ordinal1199
		test	eax, eax
		jnz	short loc_6B188440
		push	offset aCmemorystrea_1 ; "CMemoryStreamImpl::SetSize() : m_Memory"...
		jmp	short loc_6B188426
; ---------------------------------------------------------------------------

loc_6B188440:				; CODE XREF: Ordinal424+37j
					; Ordinal424+4Fj
		and	dword ptr [esi+4], 0

loc_6B188444:				; CODE XREF: Ordinal424+46j
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		pop	edi
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal424	endp ; sp-analysis failed

; Exported entry 425.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal425
Ordinal425	proc near		; DATA XREF: .rdata:6B1ACC24o
					; .rdata:6B1AD6CCo ...

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+18h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	ecx, [esi+4]
		mov	eax, [ebp+arg_0]
		and	dword ptr [eax+4], 0
		mov	[eax], ecx
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	al, 1
		pop	esi
		leave
		retn	4
Ordinal425	endp

; Exported entry 426.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal426
Ordinal426	proc near		; DATA XREF: .rdata:6B1ACC28o
					; .rdata:6B1AD6D0o ...

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+18h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	eax, [esi+4]
		mov	edi, [ebp+arg_0]
		xor	ecx, ecx
		cmp	edi, eax
		jnz	short loc_6B1884B6
		cmp	[ebp+arg_4], ecx
		jz	short loc_6B1884DB

loc_6B1884B6:				; CODE XREF: Ordinal426+26j
		lea	ecx, [esi+8]
		call	Ordinal1052
		xor	ecx, ecx
		cmp	[ebp+arg_4], ecx
		jb	short loc_6B1884D8
		ja	short loc_6B1884CB
		cmp	edi, eax
		jb	short loc_6B1884D8

loc_6B1884CB:				; CODE XREF: Ordinal426+3Cj
		push	offset aCmemorystrea_2 ; "CMemoryStreamImpl::SetPosition() : nPos"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B1884DD
; ---------------------------------------------------------------------------

loc_6B1884D8:				; CODE XREF: Ordinal426+3Aj
					; Ordinal426+40j
		mov	[esi+4], edi

loc_6B1884DB:				; CODE XREF: Ordinal426+2Bj
		mov	bl, 1

loc_6B1884DD:				; CODE XREF: Ordinal426+4Dj
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		pop	edi
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal426	endp

; Exported entry 427.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal427(void	*Src, size_t Args)
		public Ordinal427
Ordinal427	proc near		; DATA XREF: .rdata:6B1ACC2Co
					; .rdata:6B1AD6D4o ...

var_C		= byte ptr -0Ch
Src		= dword	ptr  8
Args		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+18h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	edi, [esi+8]
		mov	ecx, edi
		call	Ordinal1052
		mov	ebx, [ebp+Args]
		mov	ecx, eax
		sub	ecx, [esi+4]
		cmp	ecx, ebx
		jnb	short loc_6B188555
		test	eax, eax
		jnz	short loc_6B18853E
		push	ebx		; Args
		mov	ecx, edi
		call	Ordinal1196
		test	eax, eax
		jnz	short loc_6B188555
		push	offset aCmemorystrea_3 ; "CMemoryStreamImpl::Write() : m_Memory.N"...

loc_6B188534:				; CODE XREF: Ordinal427+65j
		call	sub_6B18102E
		pop	ecx
		xor	bl, bl
		jmp	short loc_6B188571
; ---------------------------------------------------------------------------

loc_6B18853E:				; CODE XREF: Ordinal427+33j
		sub	eax, ecx
		add	eax, ebx
		push	eax
		mov	ecx, edi
		call	Ordinal1199
		test	eax, eax
		jnz	short loc_6B188555
		push	offset aCmemorystrea_4 ; "CMemoryStreamImpl::Write() : m_Memory.R"...
		jmp	short loc_6B188534
; ---------------------------------------------------------------------------

loc_6B188555:				; CODE XREF: Ordinal427+2Fj
					; Ordinal427+3Fj ...
		mov	ecx, edi
		call	Ordinal1493
		add	eax, [esi+4]
		push	ebx		; Size
		push	[ebp+Src]	; Src
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch
		add	[esi+4], ebx
		mov	bl, 1

loc_6B188571:				; CODE XREF: Ordinal427+4Ej
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		pop	edi
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal427	endp ; sp-analysis failed

; Exported entry 428.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal428(void	*Dst, size_t Size)
		public Ordinal428
Ordinal428	proc near		; DATA XREF: .rdata:6B1ACC30o
					; .rdata:6B1AD6D8o ...

var_C		= byte ptr -0Ch
Dst		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+18h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	ebx, [esi+8]
		mov	ecx, ebx
		call	Ordinal1052
		sub	eax, [esi+4]
		mov	edi, [ebp+Size]
		cmp	eax, edi
		jnb	short loc_6B1885C0
		push	offset aCmemorystrea_5 ; "CMemoryStreamImpl::Read() : m_Memory.Ge"...
		call	sub_6B18102E
		pop	ecx
		xor	bl, bl
		jmp	short loc_6B1885DC
; ---------------------------------------------------------------------------

loc_6B1885C0:				; CODE XREF: Ordinal428+2Dj
		mov	ecx, ebx
		call	Ordinal1493
		add	eax, [esi+4]
		push	edi		; Size
		push	eax		; Src
		push	[ebp+Dst]	; Dst
		call	memcpy
		add	esp, 0Ch
		add	[esi+4], edi
		mov	bl, 1

loc_6B1885DC:				; CODE XREF: Ordinal428+3Cj
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		pop	edi
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal428	endp

; Exported entry 429.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal429
Ordinal429	proc near		; CODE XREF: Ordinal532+1C4p
					; Ordinal533+195p ...

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+20h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		lea	eax, [esi+10h]
		pop	esi
		leave
		retn
Ordinal429	endp

; Exported entry 418.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal418
Ordinal418	proc near		; CODE XREF: sub_6B188700+3p
					; j_Ordinal418j
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+20h]
		mov	dword ptr [esi], offset	off_6B1ACC34
		mov	dword ptr [esi+8], offset off_6B1ACC10
		call	Ordinal1616
		lea	ecx, [esi+10h]
		call	Ordinal1189
		push	offset Addend	; lpAddend
		mov	dword ptr [esi], offset	off_6B1AABD4
		call	ds:InterlockedDecrement
		pop	esi
		retn
Ordinal418	endp

; Exported entry 420.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal420
Ordinal420	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	sub_6B1833E7
		mov	dword ptr [esi+8], offset off_6B1AB6B4
		and	dword ptr [esi+0Ch], 0
		lea	ecx, [esi+10h]
		mov	dword ptr [esi], offset	off_6B1ACC34
		mov	dword ptr [esi+8], offset off_6B1ACC10
		call	Ordinal1187
		lea	ecx, [esi+20h]
		call	Ordinal1615
		push	[esp+4+arg_0]
		mov	ecx, esi
		call	Ordinal422
		mov	eax, esi
		pop	esi
		retn	4
Ordinal420	endp

; Exported entry 421.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal421
Ordinal421	proc near		; CODE XREF: Ordinal419+36p
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		mov	esi, ecx
		cmp	esi, edi
		jz	short loc_6B1886C4
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+20h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	eax, [edi+0Ch]
		add	edi, 10h
		push	edi
		mov	ecx, esi
		mov	[esi+0Ch], eax
		call	Ordinal422
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1573

loc_6B1886C4:				; CODE XREF: Ordinal421+Fj
		pop	edi
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal421	endp

; Exported entry 414.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal414
Ordinal414	proc near		; CODE XREF: Ordinal430+42p
					; sub_6B18A371+3p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		call	sub_6B1833E7
		mov	dword ptr [esi+8], offset off_6B1AB6B4
		and	dword ptr [esi+0Ch], 0
		lea	ecx, [esi+10h]
		mov	dword ptr [esi], offset	off_6B1ACC34
		mov	dword ptr [esi+8], offset off_6B1ACC10
		call	Ordinal1187
		lea	ecx, [esi+20h]
		call	Ordinal1615
		mov	eax, esi
		pop	esi
		retn
Ordinal414	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B188700(void *, char)
sub_6B188700	proc near		; DATA XREF: .rdata:off_6B1ACC34o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal418
		test	[esp+4+arg_0], 1
		jz	short loc_6B188716
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B188716:				; CODE XREF: sub_6B188700+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B188700	endp

; Exported entry 419.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal419
Ordinal419	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	sub_6B1833E7
		mov	dword ptr [esi+8], offset off_6B1AB6B4
		and	dword ptr [esi+0Ch], 0
		lea	ecx, [esi+10h]
		mov	dword ptr [esi], offset	off_6B1ACC34
		mov	dword ptr [esi+8], offset off_6B1ACC10
		call	Ordinal1187
		lea	ecx, [esi+20h]
		call	Ordinal1615
		push	[esp+4+arg_0]
		mov	ecx, esi
		call	Ordinal421
		mov	eax, esi
		pop	esi
		retn	4
Ordinal419	endp

; Exported entry 430.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal430
Ordinal430	proc near		; CODE XREF: Ordinal532+1A5p
					; DATA XREF: .rdata:off_6B1BF428o

var_60		= dword	ptr -60h
var_4C		= byte ptr -4Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_51 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 54h
		mov	eax, ___security_cookie
		and	[ebp+var_28], 0
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCmemorystrea_6 ; "CMemoryStreamImpl::CreateMemoryStreamIm"...
		lea	ecx, [ebp+var_4C]
		mov	[ebp+var_14], eax
		call	Ordinal1089
		and	[ebp+var_4], 0
		push	40h		; Size
		mov	byte ptr [ebp+var_4], 1
		call	??2@YAPAXI@Z	; operator new(uint)
		test	eax, eax
		pop	ecx
		jz	short loc_6B1887A8
		mov	ecx, eax
		call	Ordinal414
		mov	ecx, eax
		jmp	short loc_6B1887AA
; ---------------------------------------------------------------------------

loc_6B1887A8:				; CODE XREF: Ordinal430+3Ej
		xor	ecx, ecx

loc_6B1887AA:				; CODE XREF: Ordinal430+49j
		test	ecx, ecx
		mov	[ebp+var_28], ecx
		jnz	short loc_6B1887DA
		lea	eax, [ebp+var_2C]
		push	eax
		lea	ecx, [ebp+var_60]
		mov	[ebp+var_2C], offset aBadAllocation ; "bad allocation"
		call	ds:??0exception@@QAE@ABQBD@Z ; exception::exception(char const * const &)
		push	offset dword_6B1BAC3C
		lea	eax, [ebp+var_60]
		push	eax
		mov	[ebp+var_60], offset off_6B1AABCC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B1887DA:				; CODE XREF: Ordinal430+52j
		add	ecx, 8
		mov	eax, [ecx]
		call	dword ptr [eax+4]

loc_6B1887E2:				; DATA XREF: sub_6B188804+3Do
					; sub_6B188847+4Fo
		lea	ecx, [ebp+var_4C]
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	eax, [ebp+var_28]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal430	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B188804	proc near		; DATA XREF: .rdata:6B1BB54Co
		push	13h
		lea	ecx, [ebp-4Ch]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-4Ch]
		call	Ordinal1101
		mov	ecx, [ebp-54h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-4Ch]
		call	Ordinal1103
		lea	ecx, [ebp-4Ch]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1887E2
		retn
sub_6B188804	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B188847	proc near		; DATA XREF: .rdata:6B1BB55Co
		push	15h
		lea	ecx, [ebp-4Ch]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-4Ch]
		call	Ordinal1101
		mov	eax, [ebp-50h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-4Ch]
		call	Ordinal1103
		lea	ecx, [ebp-4Ch]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1887E2
		retn
sub_6B188847	endp

; Exported entry 431.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal431(void *Dst, int)
		public Ordinal431
Ordinal431	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_4		= dword	ptr -4
Dst		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		lea	ecx, [ebp+var_4]
		call	sub_6B181879
		lea	eax, [ebp+var_4]
		push	eax
		call	Ordinal285
		test	al, al
		pop	ecx
		jnz	short loc_6B1888BB
		xor	bl, bl
		jmp	short loc_6B1888CF
; ---------------------------------------------------------------------------

loc_6B1888BB:				; CODE XREF: Ordinal431+19j
		push	[ebp+arg_4]	; int
		lea	eax, [ebp+var_4]
		push	[ebp+Dst]	; Dst
		push	eax		; int
		call	Ordinal1523
		add	esp, 0Ch
		mov	bl, al

loc_6B1888CF:				; CODE XREF: Ordinal431+1Dj
		lea	ecx, [ebp+var_4]
		call	sub_6B1899B5
		mov	al, bl
		pop	ebx
		leave
		retn
Ordinal431	endp

; Exported entry 432.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal432(void *Dst, int)
		public Ordinal432
Ordinal432	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_4		= dword	ptr -4
Dst		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		lea	ecx, [ebp+var_4]
		call	sub_6B181879
		lea	eax, [ebp+var_4]
		push	eax
		call	Ordinal289
		test	al, al
		pop	ecx
		jnz	short loc_6B1888FB
		xor	bl, bl
		jmp	short loc_6B18890F
; ---------------------------------------------------------------------------

loc_6B1888FB:				; CODE XREF: Ordinal432+19j
		push	[ebp+arg_4]	; int
		lea	eax, [ebp+var_4]
		push	[ebp+Dst]	; Dst
		push	eax		; int
		call	Ordinal1523
		add	esp, 0Ch
		mov	bl, al

loc_6B18890F:				; CODE XREF: Ordinal432+1Dj
		lea	ecx, [ebp+var_4]
		call	sub_6B1899B5
		mov	al, bl
		pop	ebx
		leave
		retn
Ordinal432	endp

; Exported entry 433.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal433(void *Dst, int)
		public Ordinal433
Ordinal433	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_4		= dword	ptr -4
Dst		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		lea	ecx, [ebp+var_4]
		call	sub_6B181879
		lea	eax, [ebp+var_4]
		push	eax
		call	Ordinal288
		test	al, al
		pop	ecx
		jnz	short loc_6B18893B
		xor	bl, bl
		jmp	short loc_6B18894F
; ---------------------------------------------------------------------------

loc_6B18893B:				; CODE XREF: Ordinal433+19j
		push	[ebp+arg_4]	; int
		lea	eax, [ebp+var_4]
		push	[ebp+Dst]	; Dst
		push	eax		; int
		call	Ordinal1523
		add	esp, 0Ch
		mov	bl, al

loc_6B18894F:				; CODE XREF: Ordinal433+1Dj
		lea	ecx, [ebp+var_4]
		call	sub_6B1899B5
		mov	al, bl
		pop	ebx
		leave
		retn
Ordinal433	endp

; Exported entry 434.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal434(void *Dst, int)
		public Ordinal434
Ordinal434	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_4		= dword	ptr -4
Dst		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		lea	ecx, [ebp+var_4]
		call	sub_6B181879
		lea	eax, [ebp+var_4]
		push	eax
		call	Ordinal291
		test	al, al
		pop	ecx
		jnz	short loc_6B18897B
		xor	bl, bl
		jmp	short loc_6B18898F
; ---------------------------------------------------------------------------

loc_6B18897B:				; CODE XREF: Ordinal434+19j
		push	[ebp+arg_4]	; int
		lea	eax, [ebp+var_4]
		push	[ebp+Dst]	; Dst
		push	eax		; int
		call	Ordinal1523
		add	esp, 0Ch
		mov	bl, al

loc_6B18898F:				; CODE XREF: Ordinal434+1Dj
		lea	ecx, [ebp+var_4]
		call	sub_6B1899B5
		mov	al, bl
		pop	ebx
		leave
		retn
Ordinal434	endp

; Exported entry 435.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal435(void *Dst, int)
		public Ordinal435
Ordinal435	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_4		= dword	ptr -4
Dst		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		lea	ecx, [ebp+var_4]
		call	sub_6B181879
		lea	eax, [ebp+var_4]
		push	eax
		call	Ordinal292
		test	al, al
		pop	ecx
		jnz	short loc_6B1889BB
		xor	bl, bl
		jmp	short loc_6B1889CF
; ---------------------------------------------------------------------------

loc_6B1889BB:				; CODE XREF: Ordinal435+19j
		push	[ebp+arg_4]	; int
		lea	eax, [ebp+var_4]
		push	[ebp+Dst]	; Dst
		push	eax		; int
		call	Ordinal1523
		add	esp, 0Ch
		mov	bl, al

loc_6B1889CF:				; CODE XREF: Ordinal435+1Dj
		lea	ecx, [ebp+var_4]
		call	sub_6B1899B5
		mov	al, bl
		pop	ebx
		leave
		retn
Ordinal435	endp

; Exported entry 436.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal436(void *Dst, int)
		public Ordinal436
Ordinal436	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_4		= dword	ptr -4
Dst		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		lea	ecx, [ebp+var_4]
		call	sub_6B181879
		lea	eax, [ebp+var_4]
		push	eax
		call	Ordinal293
		test	al, al
		pop	ecx
		jnz	short loc_6B1889FB
		xor	bl, bl
		jmp	short loc_6B188A0F
; ---------------------------------------------------------------------------

loc_6B1889FB:				; CODE XREF: Ordinal436+19j
		push	[ebp+arg_4]	; int
		lea	eax, [ebp+var_4]
		push	[ebp+Dst]	; Dst
		push	eax		; int
		call	Ordinal1523
		add	esp, 0Ch
		mov	bl, al

loc_6B188A0F:				; CODE XREF: Ordinal436+1Dj
		lea	ecx, [ebp+var_4]
		call	sub_6B1899B5
		mov	al, bl
		pop	ebx
		leave
		retn
Ordinal436	endp

; Exported entry 437.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal437(void *Dst, int)
		public Ordinal437
Ordinal437	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_4		= dword	ptr -4
Dst		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		lea	ecx, [ebp+var_4]
		call	sub_6B181879
		lea	eax, [ebp+var_4]
		push	eax
		call	Ordinal294
		test	al, al
		pop	ecx
		jnz	short loc_6B188A3B
		xor	bl, bl
		jmp	short loc_6B188A4F
; ---------------------------------------------------------------------------

loc_6B188A3B:				; CODE XREF: Ordinal437+19j
		push	[ebp+arg_4]	; int
		lea	eax, [ebp+var_4]
		push	[ebp+Dst]	; Dst
		push	eax		; int
		call	Ordinal1523
		add	esp, 0Ch
		mov	bl, al

loc_6B188A4F:				; CODE XREF: Ordinal437+1Dj
		lea	ecx, [ebp+var_4]
		call	sub_6B1899B5
		mov	al, bl
		pop	ebx
		leave
		retn
Ordinal437	endp

; Exported entry 438.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal438(void *Dst, int)
		public Ordinal438
Ordinal438	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_4		= dword	ptr -4
Dst		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		lea	ecx, [ebp+var_4]
		call	sub_6B181879
		lea	eax, [ebp+var_4]
		push	eax
		call	Ordinal1507
		test	al, al
		pop	ecx
		jnz	short loc_6B188A7B
		xor	bl, bl
		jmp	short loc_6B188A8F
; ---------------------------------------------------------------------------

loc_6B188A7B:				; CODE XREF: Ordinal438+19j
		push	[ebp+arg_4]	; int
		lea	eax, [ebp+var_4]
		push	[ebp+Dst]	; Dst
		push	eax		; int
		call	Ordinal1523
		add	esp, 0Ch
		mov	bl, al

loc_6B188A8F:				; CODE XREF: Ordinal438+1Dj
		lea	ecx, [ebp+var_4]
		call	sub_6B1899B5
		mov	al, bl
		pop	ebx
		leave
		retn
Ordinal438	endp

; Exported entry 439.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal439(void *Dst, int)
		public Ordinal439
Ordinal439	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_4		= dword	ptr -4
Dst		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		lea	ecx, [ebp+var_4]
		call	sub_6B181879
		lea	eax, [ebp+var_4]
		push	eax
		call	Ordinal1508
		test	al, al
		pop	ecx
		jnz	short loc_6B188ABB
		xor	bl, bl
		jmp	short loc_6B188ACF
; ---------------------------------------------------------------------------

loc_6B188ABB:				; CODE XREF: Ordinal439+19j
		push	[ebp+arg_4]	; int
		lea	eax, [ebp+var_4]
		push	[ebp+Dst]	; Dst
		push	eax		; int
		call	Ordinal1523
		add	esp, 0Ch
		mov	bl, al

loc_6B188ACF:				; CODE XREF: Ordinal439+1Dj
		lea	ecx, [ebp+var_4]
		call	sub_6B1899B5
		mov	al, bl
		pop	ebx
		leave
		retn
Ordinal439	endp

; Exported entry 440.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal440(void *Dst, int)
		public Ordinal440
Ordinal440	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_4		= dword	ptr -4
Dst		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		lea	ecx, [ebp+var_4]
		call	sub_6B181879
		lea	eax, [ebp+var_4]
		push	eax
		call	Ordinal1509
		test	al, al
		pop	ecx
		jnz	short loc_6B188AFB
		xor	bl, bl
		jmp	short loc_6B188B0F
; ---------------------------------------------------------------------------

loc_6B188AFB:				; CODE XREF: Ordinal440+19j
		push	[ebp+arg_4]	; int
		lea	eax, [ebp+var_4]
		push	[ebp+Dst]	; Dst
		push	eax		; int
		call	Ordinal1523
		add	esp, 0Ch
		mov	bl, al

loc_6B188B0F:				; CODE XREF: Ordinal440+1Dj
		lea	ecx, [ebp+var_4]
		call	sub_6B1899B5
		mov	al, bl
		pop	ebx
		leave
		retn
Ordinal440	endp

; Exported entry 441.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal441
Ordinal441	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, ecx
		xor	ecx, ecx
		mov	dword ptr [eax], offset	off_6B1ACC68
		mov	[eax+4], ecx
		mov	[eax+8], ecx
		mov	[eax+0Ch], ecx
		mov	[eax+10h], ecx
		mov	[eax+14h], ecx
		mov	[eax+18h], ecx
		mov	[eax+1Ch], ecx
		mov	[eax+20h], ecx
		mov	[eax+24h], ecx
		mov	[eax+28h], ecx
		mov	[eax+2Ch], ecx
		mov	[eax+30h], ecx
		retn
Ordinal441	endp

; Exported entry 445.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal445
Ordinal445	proc near		; CODE XREF: Ordinal442+9p
					; Ordinal444+1Fp
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		mov	ecx, [esi+4]
		test	ecx, ecx
		jz	short loc_6B188B66
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_6B188B66
		push	ecx
		call	eax
		and	dword ptr [esi+4], 0
		mov	[esi+8], eax

loc_6B188B66:				; CODE XREF: Ordinal445+8j
					; Ordinal445+Fj
		xor	eax, eax
		cmp	[esi+8], eax
		pop	esi
		setz	al
		retn
Ordinal445	endp

; Exported entry 446.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal446
Ordinal446	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	eax, [esi+18h]
		test	eax, eax
		jz	short loc_6B188B8F
		push	[esp+4+arg_0]
		push	dword ptr [esi+4]
		call	eax
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		mov	eax, ecx

loc_6B188B8F:				; CODE XREF: Ordinal446+8j
		pop	esi
		retn	4
Ordinal446	endp

; Exported entry 447.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal447
Ordinal447	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	eax, [esi+1Ch]
		test	eax, eax
		jz	short loc_6B188BB2
		push	[esp+4+arg_0]
		push	dword ptr [esi+4]
		call	eax
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		mov	eax, ecx

loc_6B188BB2:				; CODE XREF: Ordinal447+8j
		pop	esi
		retn	4
Ordinal447	endp

; Exported entry 449.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal449
Ordinal449	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, ecx
		mov	eax, [esi+2Ch]
		test	eax, eax
		jz	short loc_6B188BE1
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	0
		push	0
		push	[esp+14h+arg_0]
		push	dword ptr [esi+4]
		call	eax
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		mov	eax, ecx

loc_6B188BE1:				; CODE XREF: Ordinal449+8j
		pop	esi
		retn	0Ch
Ordinal449	endp

; Exported entry 450.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal450(int,	LPCSTR lpString, int)
		public Ordinal450
Ordinal450	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
lpString	= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+30h], 0
		jnz	short loc_6B188BF2
		xor	eax, eax
		jmp	short loc_6B188C1E
; ---------------------------------------------------------------------------

loc_6B188BF2:				; CODE XREF: Ordinal450+7j
		push	[esp+4+lpString] ; lpString
		call	ds:lstrlenA
		inc	eax
		push	eax
		push	[esp+8+lpString]
		push	[esp+0Ch+arg_8]
		push	0
		push	[esp+14h+arg_0]
		push	dword ptr [esi+4]
		call	dword ptr [esi+30h]
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		mov	eax, ecx

loc_6B188C1E:				; CODE XREF: Ordinal450+Bj
		pop	esi
		retn	0Ch
Ordinal450	endp

; Exported entry 451.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal451
Ordinal451	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		mov	eax, [esi+2Ch]
		test	eax, eax
		jz	short loc_6B188C56
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_4]
		mov	[ebp+var_4], 4
		push	0
		push	0
		push	[ebp+arg_0]
		push	dword ptr [esi+4]
		call	eax
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		mov	eax, ecx

loc_6B188C56:				; CODE XREF: Ordinal451+Cj
		pop	esi
		leave
		retn	8
Ordinal451	endp

; Exported entry 452.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal452
Ordinal452	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= byte ptr  8

		push	esi
		mov	esi, ecx
		mov	eax, [esi+30h]
		test	eax, eax
		jz	short loc_6B188C85
		push	4
		lea	ecx, [esp+8+arg_4]
		push	ecx
		push	4
		push	0
		push	[esp+14h+arg_0]
		push	dword ptr [esi+4]
		call	eax
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		mov	eax, ecx

loc_6B188C85:				; CODE XREF: Ordinal452+8j
		pop	esi
		retn	8
Ordinal452	endp

; Exported entry 453.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal453
Ordinal453	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, ecx
		mov	eax, [esi+24h]
		test	eax, eax
		jnz	short loc_6B188C99
		inc	eax
		jmp	short loc_6B188CB6
; ---------------------------------------------------------------------------

loc_6B188C99:				; CODE XREF: Ordinal453+Bj
		push	[ebp+arg_18]
		push	[ebp+arg_14]
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		push	dword ptr [esi+4]
		call	eax
		mov	[esi+8], eax

loc_6B188CB6:				; CODE XREF: Ordinal453+Ej
		pop	esi
		pop	ebp
		retn	1Ch
Ordinal453	endp

; Exported entry 454.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal454
Ordinal454	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, ecx
		mov	eax, [esi+20h]
		test	eax, eax
		jnz	short loc_6B188CCB
		inc	eax
		jmp	short loc_6B188CE8
; ---------------------------------------------------------------------------

loc_6B188CCB:				; CODE XREF: Ordinal454+Bj
		push	[ebp+arg_18]
		push	[ebp+arg_14]
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		push	dword ptr [esi+4]
		call	eax
		mov	[esi+8], eax

loc_6B188CE8:				; CODE XREF: Ordinal454+Ej
		pop	esi
		pop	ebp
		retn	1Ch
Ordinal454	endp

; Exported entry 455.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal455
Ordinal455	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		mov	eax, [ecx+2Ch]
		test	eax, eax
		jnz	short loc_6B188CFA
		inc	eax
		jmp	short loc_6B188D0E
; ---------------------------------------------------------------------------

loc_6B188CFA:				; CODE XREF: Ordinal455+8j
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		push	dword ptr [ecx+4]
		call	eax

loc_6B188D0E:				; CODE XREF: Ordinal455+Bj
		pop	ebp
		retn	14h
Ordinal455	endp

; Exported entry 456.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal456
Ordinal456	proc near		; CODE XREF: Ordinal444+8p
					; DATA XREF: .rdata:off_6B1BF428o

LibFileName	= byte ptr -108h
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 108h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		cmp	[esi+0Ch], ebx
		mov	[ebp+var_4], eax
		jz	short loc_6B188D36
		xor	eax, eax
		inc	eax
		jmp	loc_6B188E5B
; ---------------------------------------------------------------------------

loc_6B188D36:				; CODE XREF: Ordinal456+1Aj
		push	edi		; Args
		mov	edi, 104h
		push	edi		; uSize
		lea	eax, [ebp+LibFileName]
		push	eax		; lpBuffer
		call	ds:GetSystemDirectoryA
		cmp	eax, ebx
		jz	loc_6B188E4D
		cmp	eax, edi
		ja	loc_6B188E4D
		push	offset String2	; "\\SymStore.dll"
		lea	eax, [ebp+LibFileName]
		push	eax		; lpString1
		call	ds:lstrcatA
		lea	eax, [ebp+LibFileName]
		push	eax		; lpLibFileName
		call	ds:LoadLibraryA
		cmp	eax, ebx
		mov	[esi+0Ch], eax
		jnz	short loc_6B188D8A
		push	offset aCregistryIniti ; "CRegistry::Initialize() : LoadLibrary()"...
		jmp	loc_6B188E52
; ---------------------------------------------------------------------------

loc_6B188D8A:				; CODE XREF: Ordinal456+6Cj
		mov	edi, ds:GetProcAddress
		push	1		; lpProcName
		push	eax		; hModule
		call	edi ; GetProcAddress
		push	3		; lpProcName
		push	dword ptr [esi+0Ch] ; hModule
		mov	[esi+10h], eax
		call	edi ; GetProcAddress
		push	4		; lpProcName
		push	dword ptr [esi+0Ch] ; hModule
		mov	[esi+14h], eax
		call	edi ; GetProcAddress
		push	5		; lpProcName
		push	dword ptr [esi+0Ch] ; hModule
		mov	[esi+18h], eax
		call	edi ; GetProcAddress
		push	7		; lpProcName
		push	dword ptr [esi+0Ch] ; hModule
		mov	[esi+1Ch], eax
		call	edi ; GetProcAddress
		push	8		; lpProcName
		push	dword ptr [esi+0Ch] ; hModule
		mov	[esi+20h], eax
		call	edi ; GetProcAddress
		push	0Bh		; lpProcName
		push	dword ptr [esi+0Ch] ; hModule
		mov	[esi+24h], eax
		call	edi ; GetProcAddress
		push	0Eh		; lpProcName
		push	dword ptr [esi+0Ch] ; hModule
		mov	[esi+28h], eax
		call	edi ; GetProcAddress
		push	12h		; lpProcName
		push	dword ptr [esi+0Ch] ; hModule
		mov	[esi+2Ch], eax
		call	edi ; GetProcAddress
		cmp	[esi+10h], ebx
		mov	[esi+30h], eax
		jz	short loc_6B188E19
		cmp	[esi+14h], ebx
		jz	short loc_6B188E19
		cmp	[esi+18h], ebx
		jz	short loc_6B188E19
		cmp	[esi+1Ch], ebx
		jz	short loc_6B188E19
		cmp	[esi+20h], ebx
		jz	short loc_6B188E19
		cmp	[esi+24h], ebx
		jz	short loc_6B188E19
		cmp	[esi+28h], ebx
		jz	short loc_6B188E19
		cmp	[esi+2Ch], ebx
		jz	short loc_6B188E19
		cmp	eax, ebx
		jz	short loc_6B188E19
		xor	eax, eax
		inc	eax
		jmp	short loc_6B188E5A
; ---------------------------------------------------------------------------

loc_6B188E19:				; CODE XREF: Ordinal456+D9j
					; Ordinal456+DEj ...
		push	offset aCregistryIni_0 ; "CRegistry::Initialize() : GetProcAddres"...
		call	sub_6B18102E
		pop	ecx
		push	dword ptr [esi+0Ch] ; hLibModule
		mov	[esi+10h], ebx
		mov	[esi+14h], ebx
		mov	[esi+18h], ebx
		mov	[esi+1Ch], ebx
		mov	[esi+20h], ebx
		mov	[esi+24h], ebx
		mov	[esi+28h], ebx
		mov	[esi+2Ch], ebx
		mov	[esi+30h], ebx
		call	ds:FreeLibrary
		mov	[esi+0Ch], ebx
		jmp	short loc_6B188E58
; ---------------------------------------------------------------------------

loc_6B188E4D:				; CODE XREF: Ordinal456+3Aj
					; Ordinal456+42j
		push	offset aCregistryIni_1 ; "CRegistry::Initialize() : GetSystemDire"...

loc_6B188E52:				; CODE XREF: Ordinal456+73j
		call	sub_6B18102E
		pop	ecx

loc_6B188E58:				; CODE XREF: Ordinal456+139j
		xor	eax, eax

loc_6B188E5A:				; CODE XREF: Ordinal456+105j
		pop	edi

loc_6B188E5B:				; CODE XREF: Ordinal456+1Fj
		mov	ecx, [ebp+var_4]
		pop	esi
		pop	ebx
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn
Ordinal456	endp

; Exported entry 442.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal442
Ordinal442	proc near		; CODE XREF: sub_6B188F07+3p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1ACC68
		call	Ordinal445
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_6B188E87
		push	eax		; hLibModule
		call	ds:FreeLibrary
		and	dword ptr [esi+0Ch], 0

loc_6B188E87:				; CODE XREF: Ordinal442+13j
		pop	esi
		retn
Ordinal442	endp

; Exported entry 444.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal444
Ordinal444	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		call	Ordinal456
		test	eax, eax
		jz	short loc_6B188EF5
		xor	edi, edi
		cmp	[esi+28h], edi
		jz	short loc_6B188EF5
		cmp	[esi+14h], edi
		jz	short loc_6B188EF5
		mov	ecx, esi
		call	Ordinal445
		lea	ebx, [esi+4]
		push	ebx
		push	[ebp+arg_8]
		push	edi
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	dword ptr [esi+28h]
		cmp	eax, edi
		mov	[esi+8], eax
		jz	short loc_6B188EFE
		cmp	[ebp+arg_C], edi
		jnz	short loc_6B188ED1
		push	offset aCregistryOpenM ; "CRegistry::Open() : m_pfnSymRegOpenKeyE"...
		jmp	short loc_6B188EEF
; ---------------------------------------------------------------------------

loc_6B188ED1:				; CODE XREF: Ordinal444+3Fj
		push	edi
		push	ebx
		push	edi
		push	[ebp+arg_8]
		push	edi
		push	edi
		push	edi
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	dword ptr [esi+14h]
		cmp	eax, edi
		mov	[esi+8], eax
		jz	short loc_6B188EFE
		push	offset aCregistryOpe_0 ; "CRegistry::Open() : m_pfnSymRegCreateKe"...

loc_6B188EEF:				; CODE XREF: Ordinal444+46j
		call	sub_6B18102E
		pop	ecx

loc_6B188EF5:				; CODE XREF: Ordinal444+Fj
					; Ordinal444+16j ...
		xor	eax, eax

loc_6B188EF7:				; CODE XREF: Ordinal444+7Cj
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn	10h
; ---------------------------------------------------------------------------

loc_6B188EFE:				; CODE XREF: Ordinal444+3Aj
					; Ordinal444+5Fj
		xor	eax, eax
		cmp	[ebx], edi
		setnz	al
		jmp	short loc_6B188EF7
Ordinal444	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B188F07(void *, char)
sub_6B188F07	proc near		; DATA XREF: .rdata:off_6B1ACC68o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal442
		test	[esp+4+arg_0], 1
		jz	short loc_6B188F1D
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B188F1D:				; CODE XREF: sub_6B188F07+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B188F07	endp

; Exported entry 457.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal457
Ordinal457	proc near		; CODE XREF: Ordinal379+Fp
					; Ordinal478+23p ...
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+8]
		mov	dword ptr [esi], offset	off_6B1ACDA0
		mov	byte ptr [esi+4], 0
		call	Ordinal1615
		mov	eax, esi
		pop	esi
		retn
Ordinal457	endp

; Exported entry 458.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal458
Ordinal458	proc near		; CODE XREF: Ordinal388+Fj
					; sub_6B1890FA+3p ...
		mov	dword ptr [ecx], offset	off_6B1ACDA0
		add	ecx, 8
		jmp	Ordinal1616
Ordinal458	endp

; Exported entry 459.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal459
Ordinal459	proc near		; CODE XREF: Ordinal361+3j
					; Ordinal383+3j ...

var_34		= byte ptr -34h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 34h
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [edi+8]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	esi, [ebp+arg_0]
		push	2
		lea	ecx, [ebp+var_34]
		mov	[esi], ebx
		mov	[esi+4], ebx
		call	Ordinal1028
		mov	eax, [edi]
		lea	ecx, [ebp+var_34]
		push	ecx
		mov	ecx, edi
		call	dword ptr [eax+4]
		test	al, al
		jnz	short loc_6B188F94
		push	offset aCserializeGets ; "CSerialize::GetSize()	: Save() == FALSE"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B188FA3
; ---------------------------------------------------------------------------

loc_6B188F94:				; CODE XREF: Ordinal459+3Bj
		lea	ecx, [ebp+var_34]
		call	Ordinal693
		mov	[esi], eax
		mov	[esi+4], edx
		mov	bl, 1

loc_6B188FA3:				; CODE XREF: Ordinal459+48j
		lea	ecx, [ebp+var_34]
		call	Ordinal1029
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		pop	edi
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal459	endp

; Exported entry 460.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal460
Ordinal460	proc near		; CODE XREF: Ordinal268+3j
					; Ordinal384+3j ...

var_3C		= byte ptr -3Ch
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 3Ch
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		push	2
		lea	ecx, [ebp+var_3C]
		call	Ordinal465
		push	[ebp+arg_0]
		lea	ecx, [ebp+var_3C]
		call	Ordinal467
		test	eax, eax
		jnz	short loc_6B188FFD
		push	offset aCserializeSave ; "CSerialize::Save() : archive.Reference("...

loc_6B188FF5:				; CODE XREF: Ordinal460+55j
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B189015
; ---------------------------------------------------------------------------

loc_6B188FFD:				; CODE XREF: Ordinal460+32j
		mov	eax, [esi]
		lea	ecx, [ebp+var_3C]
		push	ecx
		mov	ecx, esi
		call	dword ptr [eax+4]
		test	al, al
		jnz	short loc_6B189013
		push	offset aCserializeSa_0 ; "CSerialize::Save() : Save() == FALSE\n"
		jmp	short loc_6B188FF5
; ---------------------------------------------------------------------------

loc_6B189013:				; CODE XREF: Ordinal460+4Ej
		mov	bl, 1

loc_6B189015:				; CODE XREF: Ordinal460+3Fj
		lea	ecx, [ebp+var_3C]
		call	Ordinal466
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal460	endp

; Exported entry 461.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal461
Ordinal461	proc near		; CODE XREF: Ordinal269+3j
					; Ordinal385+3j ...

var_3C		= byte ptr -3Ch
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 3Ch
		push	ebx
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		xor	ebx, ebx
		inc	ebx
		push	ebx
		lea	ecx, [ebp+var_3C]
		call	Ordinal465
		push	[ebp+arg_0]
		lea	ecx, [ebp+var_3C]
		call	Ordinal467
		test	eax, eax
		jnz	short loc_6B189069
		push	offset aCserializeLoad ; "CSerialize::Load() : archive.Reference("...
		jmp	short loc_6B18907D
; ---------------------------------------------------------------------------

loc_6B189069:				; CODE XREF: Ordinal461+33j
		mov	eax, [esi]
		lea	ecx, [ebp+var_3C]
		push	ecx
		mov	ecx, esi
		call	dword ptr [eax+8]
		test	al, al
		jnz	short loc_6B189085
		push	offset aCserializeLo_0 ; "CSerialize::Load() : Load() == FALSE\n"

loc_6B18907D:				; CODE XREF: Ordinal461+3Aj
		call	sub_6B18102E
		pop	ecx
		xor	bl, bl

loc_6B189085:				; CODE XREF: Ordinal461+49j
		lea	ecx, [ebp+var_3C]
		call	Ordinal466
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal461	endp

; Exported entry 462.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal462
Ordinal462	proc near		; CODE XREF: Ordinal364+3j
					; Ordinal386+3j ...

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	bl, [esi+4]
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn
Ordinal462	endp

; Exported entry 463.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal463
Ordinal463	proc near		; CODE XREF: Ordinal365+3j
					; Ordinal387+3j ...

var_C		= byte ptr -0Ch
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	al, [ebp+arg_0]
		lea	ecx, [ebp+var_C]
		mov	[esi+4], al
		call	Ordinal1573
		mov	al, 1
		pop	esi
		leave
		retn	4
Ordinal463	endp

; Exported entry 464.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal464
Ordinal464	proc near		; CODE XREF: Ordinal400+10p
					; Ordinal403+10p ...
		lea	eax, [ecx+8]
		retn
Ordinal464	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1890FA(void *, char)
sub_6B1890FA	proc near		; DATA XREF: .rdata:off_6B1ACDA0o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal458
		test	[esp+4+arg_0], 1
		jz	short loc_6B189110
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B189110:				; CODE XREF: sub_6B1890FA+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1890FA	endp

; Exported entry 468.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal468
Ordinal468	proc near		; DATA XREF: .rdata:off_6B1BF428o
		add	ecx, 28h
		jmp	sub_6B187D45
Ordinal468	endp

; Exported entry 469.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal469
Ordinal469	proc near		; DATA XREF: .rdata:6B1AD04Co
					; .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [ecx+28h]
		test	ecx, ecx
		jnz	short loc_6B18912C
		push	offset aCstreamarchive ; "CStreamArchive::ReadEx() : m_pStream =="...
		jmp	short loc_6B189142
; ---------------------------------------------------------------------------

loc_6B18912C:				; CODE XREF: Ordinal469+5j
		push	[esp+arg_4]
		mov	eax, [ecx]
		push	[esp+4+arg_0]
		call	dword ptr [eax+20h]
		test	al, al
		jnz	short loc_6B18914C
		push	offset aCstreamarchi_0 ; "CStreamArchive::ReadEx() : m_pStream->R"...

loc_6B189142:				; CODE XREF: Ordinal469+Cj
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short locret_6B18914F
; ---------------------------------------------------------------------------

loc_6B18914C:				; CODE XREF: Ordinal469+1Dj
		xor	eax, eax
		inc	eax

locret_6B18914F:			; CODE XREF: Ordinal469+2Cj
		retn	8
Ordinal469	endp

; Exported entry 470.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal470
Ordinal470	proc near		; DATA XREF: .rdata:6B1AD050o
					; .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [ecx+28h]
		test	ecx, ecx
		jnz	short loc_6B189160
		push	offset aCstreamarchi_1 ; "CStreamArchive::WriteEx() : m_pStream	="...
		jmp	short loc_6B189176
; ---------------------------------------------------------------------------

loc_6B189160:				; CODE XREF: Ordinal470+5j
		push	[esp+arg_4]
		mov	eax, [ecx]
		push	[esp+4+arg_0]
		call	dword ptr [eax+1Ch]
		test	al, al
		jnz	short loc_6B189180
		push	offset aCstreamarchi_2 ; "CStreamArchive::WriteEx() : m_pStream->"...

loc_6B189176:				; CODE XREF: Ordinal470+Cj
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short locret_6B189183
; ---------------------------------------------------------------------------

loc_6B189180:				; CODE XREF: Ordinal470+1Dj
		xor	eax, eax
		inc	eax

locret_6B189183:			; CODE XREF: Ordinal470+2Cj
		retn	8
Ordinal470	endp

; Exported entry 471.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal471
Ordinal471	proc near		; DATA XREF: .rdata:6B1AD054o
					; .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	ecx, [ecx+28h]
		test	ecx, ecx
		jnz	short loc_6B189194
		push	offset aCstreamarchi_3 ; "CStreamArchive::GetPosEx() : m_pStream "...
		jmp	short loc_6B1891A6
; ---------------------------------------------------------------------------

loc_6B189194:				; CODE XREF: Ordinal471+5j
		push	[esp+arg_0]
		mov	eax, [ecx]
		call	dword ptr [eax+14h]
		test	al, al
		jnz	short loc_6B1891B0
		push	offset aCstreamarchi_4 ; "CStreamArchive::GetPosEx() : m_pStream-"...

loc_6B1891A6:				; CODE XREF: Ordinal471+Cj
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short locret_6B1891B3
; ---------------------------------------------------------------------------

loc_6B1891B0:				; CODE XREF: Ordinal471+19j
		xor	eax, eax
		inc	eax

locret_6B1891B3:			; CODE XREF: Ordinal471+28j
		retn	4
Ordinal471	endp

; Exported entry 472.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal472
Ordinal472	proc near		; DATA XREF: .rdata:6B1AD058o
					; .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [ecx+28h]
		test	ecx, ecx
		jnz	short loc_6B1891C4
		push	offset aCstreamarchi_5 ; "CStreamArchive::SetPosEx() : m_pStream "...
		jmp	short loc_6B1891DA
; ---------------------------------------------------------------------------

loc_6B1891C4:				; CODE XREF: Ordinal472+5j
		push	[esp+arg_4]
		mov	eax, [ecx]
		push	[esp+4+arg_0]
		call	dword ptr [eax+18h]
		test	al, al
		jnz	short loc_6B1891E4
		push	offset aCstreamarchi_6 ; "CStreamArchive::SetPosEx() : m_pStream-"...

loc_6B1891DA:				; CODE XREF: Ordinal472+Cj
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short locret_6B1891E7
; ---------------------------------------------------------------------------

loc_6B1891E4:				; CODE XREF: Ordinal472+1Dj
		xor	eax, eax
		inc	eax

locret_6B1891E7:			; CODE XREF: Ordinal472+2Cj
		retn	8
Ordinal472	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1891EA	proc near		; CODE XREF: Ordinal467+1Dp

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		push	edi
		mov	edi, [esp+8+arg_0]
		cmp	edi, eax
		jz	short loc_6B18920C
		call	sub_6B187D45
		test	edi, edi
		mov	[esi], edi
		jz	short loc_6B18920A
		mov	eax, [edi]
		mov	ecx, edi
		call	dword ptr [eax+4]

loc_6B18920A:				; CODE XREF: sub_6B1891EA+17j
		mov	eax, [esi]

loc_6B18920C:				; CODE XREF: sub_6B1891EA+Cj
		pop	edi
		pop	esi
		retn	4
sub_6B1891EA	endp

; Exported entry 465.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal465
Ordinal465	proc near		; CODE XREF: Ordinal460+20p
					; Ordinal461+21p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		call	Ordinal610
		mov	dword ptr [esi], offset	off_6B1AD048
		and	dword ptr [esi+28h], 0
		mov	eax, esi
		pop	esi
		retn	4
Ordinal465	endp

; Exported entry 466.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal466
Ordinal466	proc near		; CODE XREF: Ordinal460+5Cp
					; Ordinal461+5Bp ...
		push	esi
		mov	esi, ecx
		push	edi
		lea	edi, [esi+28h]
		mov	ecx, edi
		mov	dword ptr [esi], offset	off_6B1AD048
		call	sub_6B187D45
		mov	ecx, edi
		call	sub_6B187D45
		pop	edi
		mov	ecx, esi
		pop	esi
		jmp	Ordinal611
Ordinal466	endp

; Exported entry 467.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal467
Ordinal467	proc near		; CODE XREF: Ordinal460+2Bp
					; Ordinal461+2Cp
					; DATA XREF: ...

arg_0		= dword	ptr  4

		cmp	[esp+arg_0], 0
		jnz	short loc_6B189267
		push	offset aCstreamarchi_7 ; "CStreamArchive::Reference() :	pStream	="...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short locret_6B189276
; ---------------------------------------------------------------------------

loc_6B189267:				; CODE XREF: Ordinal467+5j
		push	[esp+arg_0]
		add	ecx, 28h
		call	sub_6B1891EA
		xor	eax, eax
		inc	eax

locret_6B189276:			; CODE XREF: Ordinal467+14j
		retn	4
Ordinal467	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B189279(void *, char)
sub_6B189279	proc near		; DATA XREF: .rdata:off_6B1AD048o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal466
		test	[esp+4+arg_0], 1
		jz	short loc_6B18928F
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B18928F:				; CODE XREF: sub_6B189279+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B189279	endp

; Exported entry 475.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal475
Ordinal475	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_4]
		test	ecx, ecx
		jnz	short loc_6B1892AB
		push	offset aCstringconvert ; "CStringConvert::Copy(LPCSTR, IString)	:"...
		call	sub_6B18102E
		pop	ecx
		xor	al, al
		retn
; ---------------------------------------------------------------------------

loc_6B1892AB:				; CODE XREF: Ordinal475+6j
		push	[esp+arg_0]
		mov	eax, [ecx]
		call	dword ptr [eax+1Ch]
		retn
Ordinal475	endp

; Exported entry 476.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal476
Ordinal476	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_4]
		test	ecx, ecx
		jnz	short loc_6B1892CB
		push	offset aCstringconve_0 ; "CStringConvert::Copy(LPCWSTR,	IString) "...
		call	sub_6B18102E
		pop	ecx
		xor	al, al
		retn
; ---------------------------------------------------------------------------

loc_6B1892CB:				; CODE XREF: Ordinal476+6j
		push	[esp+arg_0]
		mov	eax, [ecx]
		call	dword ptr [eax+2Ch]
		retn
Ordinal476	endp

; Exported entry 477.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal477
Ordinal477	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jnz	short loc_6B1892EB
		push	offset aCstringconve_1 ; "CStringConvert::GetStringT() : pString "...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6B1892EB:				; CODE XREF: Ordinal477+6j
		mov	eax, [ecx]
		jmp	dword ptr [eax+18h]
Ordinal477	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1892F0	proc near		; CODE XREF: sub_6B18C6AF+1Dp
					; sub_6B19FBE7+12p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jl	short loc_6B18930C
		mov	edx, [ecx]
		cmp	eax, [edx-8]
		jg	short loc_6B18930C
		mov	[edx-0Ch], eax
		mov	ecx, [ecx]
		and	word ptr [ecx+eax*2], 0
		retn	4
; ---------------------------------------------------------------------------

loc_6B18930C:				; CODE XREF: sub_6B1892F0+6j
					; sub_6B1892F0+Dj
		push	80070057h
		call	sub_6B181113
sub_6B1892F0	endp

; ---------------------------------------------------------------------------
		db 0CCh

; =============== S U B	R O U T	I N E =======================================


sub_6B189317	proc near		; CODE XREF: Ordinal474+28p
					; Ordinal496+24p ...
		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		lea	ecx, [eax-10h]
		xor	edx, edx
		cmp	[ecx+4], edx
		push	edi
		mov	edi, [ecx]
		jz	short loc_6B189358
		cmp	[ecx+0Ch], edx
		jge	short loc_6B189347
		cmp	[eax-8], edx
		jge	short loc_6B18933D
		push	80070057h
		call	sub_6B181113
; ---------------------------------------------------------------------------

loc_6B18933D:				; CODE XREF: sub_6B189317+1Aj
		mov	[eax-0Ch], edx
		mov	eax, [esi]
		mov	[eax], dx
		jmp	short loc_6B189358
; ---------------------------------------------------------------------------

loc_6B189347:				; CODE XREF: sub_6B189317+15j
		call	sub_6B18163D
		mov	eax, [edi]
		mov	ecx, edi
		call	dword ptr [eax+0Ch]
		add	eax, 10h
		mov	[esi], eax

loc_6B189358:				; CODE XREF: sub_6B189317+10j
					; sub_6B189317+2Ej
		pop	edi
		pop	esi
		retn
sub_6B189317	endp

; Exported entry 473.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal473
Ordinal473	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_6B189372
		push	offset aCstringconve_2 ; "CStringConvert::Copy(IString,	CStringA)"...
		call	sub_6B18102E
		xor	al, al
		jmp	short loc_6B1893B1
; ---------------------------------------------------------------------------

loc_6B189372:				; CODE XREF: Ordinal473+7j
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+10h]
		dec	eax
		jz	short loc_6B18939F
		dec	eax
		jz	short loc_6B18938C
		mov	ecx, [esp+4+arg_4]
		call	sub_6B18175E
		mov	al, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6B18938C:				; CODE XREF: Ordinal473+22j
		push	[esp+4+arg_4]	; int
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+28h]
		push	eax		; lpWideCharStr
		call	Ordinal1522
		jmp	short loc_6B1893B0
; ---------------------------------------------------------------------------

loc_6B18939F:				; CODE XREF: Ordinal473+1Fj
		push	[esp+4+arg_4]	; int
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+18h]
		push	eax		; Src
		call	Ordinal1519

loc_6B1893B0:				; CODE XREF: Ordinal473+42j
		pop	ecx

loc_6B1893B1:				; CODE XREF: Ordinal473+15j
		pop	ecx
		pop	esi
		retn
Ordinal473	endp

; Exported entry 474.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal474
Ordinal474	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_6B1893CB
		push	offset aCstringconve_3 ; "CStringConvert::Copy(IString,	CStringW)"...
		call	sub_6B18102E
		xor	al, al
		jmp	short loc_6B18940A
; ---------------------------------------------------------------------------

loc_6B1893CB:				; CODE XREF: Ordinal474+7j
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+10h]
		dec	eax
		jz	short loc_6B1893F8
		dec	eax
		jz	short loc_6B1893E5
		mov	ecx, [esp+4+arg_4]
		call	sub_6B189317
		mov	al, 1
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6B1893E5:				; CODE XREF: Ordinal474+22j
		push	[esp+4+arg_4]	; int
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+28h]
		push	eax		; Src
		call	Ordinal1521
		jmp	short loc_6B189409
; ---------------------------------------------------------------------------

loc_6B1893F8:				; CODE XREF: Ordinal474+1Fj
		push	[esp+4+arg_4]	; int
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+18h]
		push	eax		; lpMultiByteStr
		call	Ordinal1520

loc_6B189409:				; CODE XREF: Ordinal474+42j
		pop	ecx

loc_6B18940A:				; CODE XREF: Ordinal474+15j
		pop	ecx
		pop	esi
		retn
Ordinal474	endp

; Exported entry 492.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal492(char	*Src)
		public Ordinal492
Ordinal492	proc near		; CODE XREF: Ordinal489+63p
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
Src		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+1Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	ecx, [esi+8]
		mov	eax, [ecx]
		call	dword ptr [eax+0Ch]
		lea	eax, [esi+3Ch]
		push	eax		; int
		push	[ebp+Src]	; Src
		mov	byte ptr [esi+18h], 1
		call	Ordinal1519
		test	al, al
		pop	ecx
		pop	ecx
		jnz	short loc_6B189451
		push	offset aCstringimplOpe ; "CStringImpl::operator	=(LPCSTR) : CStri"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B189458
; ---------------------------------------------------------------------------

loc_6B189451:				; CODE XREF: Ordinal492+35j
		mov	dword ptr [esi+44h], 1

loc_6B189458:				; CODE XREF: Ordinal492+42j
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal492	endp

; Exported entry 493.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal493(wchar_t *Src)
		public Ordinal493
Ordinal493	proc near		; CODE XREF: Ordinal490+63p
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
Src		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+1Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	ecx, [esi+8]
		mov	eax, [ecx]
		call	dword ptr [eax+0Ch]
		lea	eax, [esi+40h]
		push	eax		; int
		push	[ebp+Src]	; Src
		mov	byte ptr [esi+18h], 1
		call	Ordinal1521
		test	al, al
		pop	ecx
		pop	ecx
		jnz	short loc_6B1894AB
		push	offset aCstringimplO_0 ; "CStringImpl::operator	=(LPCWSTR) : CStr"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B1894B2
; ---------------------------------------------------------------------------

loc_6B1894AB:				; CODE XREF: Ordinal493+35j
		mov	dword ptr [esi+44h], 2

loc_6B1894B2:				; CODE XREF: Ordinal493+42j
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal493	endp

; Exported entry 497.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal497
Ordinal497	proc near		; DATA XREF: .rdata:6B1AD580o
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+14h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	esi, [esi+3Ch]
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal497	endp

; Exported entry 500.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal500(char	*Src)
		public Ordinal500
Ordinal500	proc near		; DATA XREF: .rdata:6B1AD58Co
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
Src		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+14h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+0Ch]
		lea	eax, [esi+34h]
		push	eax		; int
		push	[ebp+Src]	; Src
		call	Ordinal1519
		test	al, al
		pop	ecx
		pop	ecx
		jnz	short loc_6B18952B
		push	offset aCstringimplSet ; "CStringImpl::SetStringA() : CStringConv"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B189534
; ---------------------------------------------------------------------------

loc_6B18952B:				; CODE XREF: Ordinal500+32j
		xor	ebx, ebx
		inc	ebx
		mov	[esi+3Ch], ebx
		mov	[esi+10h], bl

loc_6B189534:				; CODE XREF: Ordinal500+3Fj
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal500	endp

; Exported entry 501.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal501
Ordinal501	proc near		; DATA XREF: .rdata:6B1AD594o
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+14h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		push	[ebp+arg_0]
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+1Ch]
		lea	ecx, [ebp+var_C]
		mov	bl, al
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal501	endp

; Exported entry 503.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal503(wchar_t *Src)
		public Ordinal503
Ordinal503	proc near		; DATA XREF: .rdata:6B1AD59Co
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
Src		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+14h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+0Ch]
		lea	eax, [esi+38h]
		push	eax		; int
		push	[ebp+Src]	; Src
		call	Ordinal1521
		test	al, al
		pop	ecx
		pop	ecx
		jnz	short loc_6B1895BB
		push	offset aCstringimplS_0 ; "CStringImpl::SetStringW() : CStringConv"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B1895C8
; ---------------------------------------------------------------------------

loc_6B1895BB:				; CODE XREF: Ordinal503+32j
		mov	dword ptr [esi+3Ch], 2
		mov	byte ptr [esi+10h], 1
		mov	bl, 1

loc_6B1895C8:				; CODE XREF: Ordinal503+3Fj
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal503	endp

; Exported entry 504.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal504
Ordinal504	proc near		; DATA XREF: .rdata:6B1AD590o
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+14h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		push	[ebp+arg_0]
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+2Ch]
		lea	ecx, [ebp+var_C]
		mov	bl, al
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal504	endp

; Exported entry 505.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal505
Ordinal505	proc near		; DATA XREF: .rdata:6B1AD56Co
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		push	0
		add	ecx, 10h
		push	0FFFFFFFFh
		push	ecx
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	edi, [ebp+arg_0]
		mov	esi, offset dword_6B1AA4EC
		movsd
		movsd
		movsd
		lea	ecx, [ebp+var_C]
		movsd
		call	Ordinal1573
		pop	edi
		mov	al, 1
		pop	esi
		leave
		retn	4
Ordinal505	endp

; Exported entry 506.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal506
Ordinal506	proc near		; DATA XREF: .rdata:6B1AD534o
					; .rdata:off_6B1BF428o

var_14		= byte ptr -14h
var_8		= dword	ptr -8
var_1		= byte ptr -1
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	ebx
		push	edi
		mov	edi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [edi+8]
		push	eax
		lea	ecx, [ebp+var_14]
		call	Ordinal1571
		mov	ecx, [ebp+arg_0]
		and	[ebp+var_8], 0
		lea	eax, [ebp+var_8]
		push	eax
		call	Ordinal626
		test	eax, eax
		jnz	short loc_6B18967F
		push	offset aCstringimplLoa ; "CStringImpl::Load() :	Archive.Read() =="...
		call	sub_6B18102E
		pop	ecx
		xor	bl, bl
		jmp	short loc_6B1896FC
; ---------------------------------------------------------------------------

loc_6B18967F:				; CODE XREF: Ordinal506+2Cj
		mov	eax, [ebp+var_8]
		dec	eax
		mov	[ebp+var_1], 1
		jz	short loc_6B18969A
		push	offset aCstringimplL_0 ; "CStringImpl::Load() :	switch(default)\n"
		call	sub_6B18102E
		pop	ecx
		mov	[ebp+var_1], 0
		jmp	short loc_6B1896F9
; ---------------------------------------------------------------------------

loc_6B18969A:				; CODE XREF: Ordinal506+45j
		mov	ecx, [ebp+arg_0]
		push	esi		; Args
		lea	ebx, [edi+30h]
		push	ebx
		call	Ordinal626
		test	eax, eax
		mov	esi, offset aCstringimplLoa ; "CStringImpl::Load() : Archive.Read() =="...
		jnz	short loc_6B1896BB
		push	esi		; Format
		call	sub_6B18102E
		pop	ecx
		mov	[ebp+var_1], 0

loc_6B1896BB:				; CODE XREF: Ordinal506+6Cj
		mov	ebx, [ebx]
		sub	ebx, 0
		jz	short loc_6B1896F8
		dec	ebx
		jz	short loc_6B1896DD
		dec	ebx
		jz	short loc_6B1896CF
		push	offset aCstringimplL_0 ; "CStringImpl::Load() :	switch(default)\n"
		jmp	short loc_6B1896EE
; ---------------------------------------------------------------------------

loc_6B1896CF:				; CODE XREF: Ordinal506+84j
		mov	ecx, [ebp+arg_0]
		add	edi, 2Ch
		push	edi
		call	Ordinal647
		jmp	short loc_6B1896E9
; ---------------------------------------------------------------------------

loc_6B1896DD:				; CODE XREF: Ordinal506+81j
		mov	ecx, [ebp+arg_0]
		add	edi, 28h
		push	edi
		call	Ordinal642

loc_6B1896E9:				; CODE XREF: Ordinal506+99j
		test	eax, eax
		jnz	short loc_6B1896F8
		push	esi		; Format

loc_6B1896EE:				; CODE XREF: Ordinal506+8Bj
		call	sub_6B18102E
		pop	ecx
		mov	[ebp+var_1], 0

loc_6B1896F8:				; CODE XREF: Ordinal506+7Ej
					; Ordinal506+A9j
		pop	esi

loc_6B1896F9:				; CODE XREF: Ordinal506+56j
		mov	bl, [ebp+var_1]

loc_6B1896FC:				; CODE XREF: Ordinal506+3Bj
		lea	ecx, [ebp+var_14]
		call	Ordinal1573
		pop	edi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal506	endp

; Exported entry 507.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal507
Ordinal507	proc near		; DATA XREF: .rdata:6B1AD530o
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	edi, [ebp+arg_0]
		xor	ebx, ebx
		inc	ebx
		push	ebx
		mov	ecx, edi
		call	Ordinal627
		test	eax, eax
		jz	short loc_6B189778
		push	dword ptr [esi+30h]
		mov	ecx, edi
		call	Ordinal627
		test	eax, eax
		jz	short loc_6B189778
		mov	eax, [esi+30h]
		sub	eax, 0
		jz	short loc_6B189785
		dec	eax
		jz	short loc_6B189769
		dec	eax
		jz	short loc_6B18975C
		push	offset aCstringimplSav ; "CStringImpl::Save() :	switch(default)\n"
		jmp	short loc_6B18977D
; ---------------------------------------------------------------------------

loc_6B18975C:				; CODE XREF: Ordinal507+47j
		add	esi, 2Ch
		push	esi
		mov	ecx, edi
		call	Ordinal649
		jmp	short loc_6B189774
; ---------------------------------------------------------------------------

loc_6B189769:				; CODE XREF: Ordinal507+44j
		add	esi, 28h
		push	esi
		mov	ecx, edi
		call	Ordinal644

loc_6B189774:				; CODE XREF: Ordinal507+5Bj
		test	eax, eax
		jnz	short loc_6B189785

loc_6B189778:				; CODE XREF: Ordinal507+2Bj
					; Ordinal507+39j
		push	offset aCstringimplS_1 ; "CStringImpl::Save() :	Archive.Write()	="...

loc_6B18977D:				; CODE XREF: Ordinal507+4Ej
		call	sub_6B18102E
		pop	ecx
		xor	bl, bl

loc_6B189785:				; CODE XREF: Ordinal507+41j
					; Ordinal507+6Aj
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		pop	edi
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal507	endp

; Exported entry 509.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal509
Ordinal509	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+1Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	ecx, [ebp+var_C]
		mov	dword ptr [esi+44h], 2
		call	Ordinal1573
		lea	eax, [esi+40h]
		pop	esi
		leave
		retn
Ordinal509	endp

; Exported entry 508.
; Exported entry 510.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal510
Ordinal510	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp		; ccL35_508
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+1Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	ecx, [ebp+var_C]
		mov	dword ptr [esi+44h], 1
		call	Ordinal1573
		lea	eax, [esi+3Ch]
		pop	esi
		leave
		retn
Ordinal510	endp

; Exported entry 491.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal491
Ordinal491	proc near		; CODE XREF: Ordinal488+63p
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		mov	esi, ecx
		cmp	esi, edi
		jz	short loc_6B189882
		push	ebx		; Args
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+1Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	ebx, [esi+8]
		mov	eax, [ebx]
		mov	ecx, ebx
		call	dword ptr [eax+0Ch]
		mov	byte ptr [esi+18h], 1
		mov	eax, [edi+44h]
		sub	eax, 0
		jz	short loc_6B189873
		dec	eax
		jz	short loc_6B18984C
		dec	eax
		jz	short loc_6B18983D
		push	offset aCstringimplO_1 ; "CStringImpl::operator	=(CStringImpl) : "...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18985F
; ---------------------------------------------------------------------------

loc_6B18983D:				; CODE XREF: Ordinal491+3Cj
		mov	eax, [edi+40h]
		lea	ecx, [esi+40h]
		push	ecx		; int
		push	eax		; Src
		call	Ordinal1521
		jmp	short loc_6B189859
; ---------------------------------------------------------------------------

loc_6B18984C:				; CODE XREF: Ordinal491+39j
		mov	eax, [edi+3Ch]
		lea	ecx, [esi+3Ch]
		push	ecx		; int
		push	eax		; Src
		call	Ordinal1519

loc_6B189859:				; CODE XREF: Ordinal491+58j
		test	al, al
		pop	ecx
		pop	ecx
		jnz	short loc_6B189873

loc_6B18985F:				; CODE XREF: Ordinal491+49j
		push	offset aCstringimplO_2 ; "CStringImpl::operator	=(CStringImpl) : "...
		call	sub_6B18102E
		mov	eax, [ebx]
		pop	ecx
		mov	ecx, ebx
		call	dword ptr [eax+0Ch]
		jmp	short loc_6B189879
; ---------------------------------------------------------------------------

loc_6B189873:				; CODE XREF: Ordinal491+36j
					; Ordinal491+6Bj
		mov	eax, [edi+44h]
		mov	[esi+44h], eax

loc_6B189879:				; CODE XREF: Ordinal491+7Fj
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		pop	ebx

loc_6B189882:				; CODE XREF: Ordinal491+Fj
		pop	edi
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal491	endp

; Exported entry 499.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal499
Ordinal499	proc near		; DATA XREF: .rdata:6B1AD588o
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+14h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	eax, [esi+3Ch]
		sub	eax, 0
		jz	short loc_6B1898D6
		dec	eax
		jz	short loc_6B1898D6
		dec	eax
		jz	short loc_6B1898B8
		push	offset aCstringimplGet ; "CStringImpl::GetStringA() : switch(defa"...
		jmp	short loc_6B1898D0
; ---------------------------------------------------------------------------

loc_6B1898B8:				; CODE XREF: Ordinal499+25j
		mov	eax, [esi+38h]
		lea	ecx, [esi+34h]
		push	ecx		; int
		push	eax		; lpWideCharStr
		call	Ordinal1522
		test	al, al
		pop	ecx
		pop	ecx
		jnz	short loc_6B1898D6
		push	offset aCstringimplG_0 ; "CStringImpl::GetStringA() : CStringConv"...

loc_6B1898D0:				; CODE XREF: Ordinal499+2Cj
		call	sub_6B18102E
		pop	ecx

loc_6B1898D6:				; CODE XREF: Ordinal499+1Fj
					; Ordinal499+22j ...
		mov	esi, [esi+34h]
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal499	endp

; Exported entry 502.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal502
Ordinal502	proc near		; DATA XREF: .rdata:6B1AD598o
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+14h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	eax, [esi+3Ch]
		sub	eax, 0
		jz	short loc_6B189932
		dec	eax
		jz	short loc_6B189914
		dec	eax
		jz	short loc_6B189932
		push	offset aCstringimplG_1 ; "CStringImpl::GetStringW() : switch(defa"...
		jmp	short loc_6B18992C
; ---------------------------------------------------------------------------

loc_6B189914:				; CODE XREF: Ordinal502+22j
		mov	eax, [esi+34h]
		lea	ecx, [esi+38h]
		push	ecx		; int
		push	eax		; lpMultiByteStr
		call	Ordinal1520
		test	al, al
		pop	ecx
		pop	ecx
		jnz	short loc_6B189932
		push	offset aCstringimplG_2 ; "CStringImpl::GetStringW() : CStringConv"...

loc_6B18992C:				; CODE XREF: Ordinal502+2Cj
		call	sub_6B18102E
		pop	ecx

loc_6B189932:				; CODE XREF: Ordinal502+1Fj
					; Ordinal502+25j ...
		mov	esi, [esi+38h]
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal502	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B189942	proc near		; CODE XREF: sub_6B1899BF+Ap

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	sub_6B187D45
		mov	ecx, [esp+4+arg_0]
		test	ecx, ecx
		jz	short loc_6B18995C
		mov	eax, [ecx]
		push	esi
		push	offset dword_6B1AA4EC
		call	dword ptr [eax]

loc_6B18995C:				; CODE XREF: sub_6B189942+Ej
		mov	eax, [esi]
		pop	esi
		retn	4
sub_6B189942	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

sub_6B189962	proc near		; CODE XREF: Ordinal369+67p
					; Ordinal401+8Ep ...
		jmp	sub_6B187D45
sub_6B189962	endp

; Exported entry 498.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal498
Ordinal498	proc near		; DATA XREF: .rdata:6B1AD584o
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		mov	esi, ecx
		xor	edi, edi
		push	edi
		push	0FFFFFFFFh
		lea	eax, [esi+14h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	eax, [esi+3Ch]
		sub	eax, edi
		jz	short loc_6B1899A7
		dec	eax
		jz	short loc_6B1899A1
		dec	eax
		jz	short loc_6B18999C
		push	offset aCstringimplG_3 ; "CStringImpl::GetLength() : switch(defau"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B1899A7
; ---------------------------------------------------------------------------

loc_6B18999C:				; CODE XREF: Ordinal498+26j
		mov	eax, [esi+38h]
		jmp	short loc_6B1899A4
; ---------------------------------------------------------------------------

loc_6B1899A1:				; CODE XREF: Ordinal498+23j
		mov	eax, [esi+34h]

loc_6B1899A4:				; CODE XREF: Ordinal498+38j
		mov	edi, [eax-0Ch]

loc_6B1899A7:				; CODE XREF: Ordinal498+20j
					; Ordinal498+33j
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, edi
		pop	edi
		pop	esi
		leave
		retn
Ordinal498	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1899B5	proc near		; CODE XREF: sub_6B1817A1j
					; Ordinal140+3j ...
		mov	ecx, [ecx]
		sub	ecx, 10h
		jmp	sub_6B18163D
sub_6B1899B5	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1899BF	proc near		; CODE XREF: Ordinal494+10p

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		and	dword ptr [esi], 0
		call	sub_6B189942
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1899BF	endp

; Exported entry 487.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal487
Ordinal487	proc near		; CODE XREF: sub_6B189CB5+3p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		push	edi
		lea	edi, [esi+14h]
		lea	ecx, [esi+40h]
		mov	dword ptr [esi], offset	off_6B1AD5A0
		mov	dword ptr [esi+8], offset off_6B1AD570
		mov	dword ptr [esi+0Ch], offset off_6B1AD54C
		mov	dword ptr [esi+10h], offset off_6B1AD538
		mov	dword ptr [edi], offset	off_6B1AD52C
		call	sub_6B1899B5
		lea	ecx, [esi+3Ch]
		call	sub_6B1899B5
		mov	ecx, edi
		call	Ordinal458
		push	offset Addend	; lpAddend
		mov	dword ptr [esi], offset	off_6B1AABD4
		call	ds:InterlockedDecrement
		pop	edi
		pop	esi
		retn
Ordinal487	endp

; Exported entry 479.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal479(void	*Buf2, int)
		public Ordinal479
Ordinal479	proc near		; CODE XREF: Ordinal514+3j
					; Ordinal517+3j
					; DATA XREF: ...

Buf2		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ebx, [ebp+Buf2]
		push	esi
		push	edi
		push	10h		; Size
		push	ebx		; Buf2
		mov	esi, offset dword_6B1AA47C
		push	esi		; Buf1
		mov	edi, ecx
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	loc_6B189ACC
		push	10h		; Size
		push	ebx		; Buf2
		push	offset dword_6B1AA4EC ;	Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_6B189ACC
		push	10h		; Size
		push	ebx		; Buf2
		push	esi		; Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_6B189ABE
		push	10h		; Size
		push	ebx		; Buf2
		push	offset dword_6B1AA4DC ;	Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_6B189ABE
		push	10h		; Size
		push	ebx		; Buf2
		push	esi		; Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_6B189AB9
		push	10h		; Size
		push	ebx		; Buf2
		push	offset dword_6B1AA50C ;	Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_6B189AB9
		mov	eax, [ebp+arg_4]
		and	dword ptr [eax], 0

loc_6B189AAD:				; CODE XREF: Ordinal479+B5j
		mov	eax, 80010200h

loc_6B189AB2:				; CODE XREF: Ordinal479+C3j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn	8
; ---------------------------------------------------------------------------

loc_6B189AB9:				; CODE XREF: Ordinal479+6Aj
					; Ordinal479+7Ej
		lea	eax, [edi+8]
		jmp	short loc_6B189AC1
; ---------------------------------------------------------------------------

loc_6B189ABE:				; CODE XREF: Ordinal479+46j
					; Ordinal479+5Aj
		lea	eax, [edi+4]

loc_6B189AC1:				; CODE XREF: Ordinal479+95j
		lea	ecx, [edi-8]
		neg	ecx
		sbb	ecx, ecx
		and	ecx, eax
		jmp	short loc_6B189AD5
; ---------------------------------------------------------------------------

loc_6B189ACC:				; CODE XREF: Ordinal479+1Ej
					; Ordinal479+36j
		lea	ecx, [edi-8]
		neg	ecx
		sbb	ecx, ecx
		and	ecx, edi

loc_6B189AD5:				; CODE XREF: Ordinal479+A3j
		test	ecx, ecx
		mov	eax, [ebp+arg_4]
		mov	[eax], ecx
		jz	short loc_6B189AAD
		mov	eax, [edi]
		mov	ecx, edi
		call	dword ptr [eax+4]
		mov	eax, 10000h
		jmp	short loc_6B189AB2
Ordinal479	endp

; Exported entry 482.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal482
Ordinal482	proc near		; DATA XREF: .rdata:6B1AD558o
					; .rdata:off_6B1BF428o
		add	ecx, 8
		jmp	Ordinal459
Ordinal482	endp

; Exported entry 483.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal483
Ordinal483	proc near		; DATA XREF: .rdata:6B1AD55Co
					; .rdata:off_6B1BF428o
		add	ecx, 8
		jmp	Ordinal460
Ordinal483	endp

; Exported entry 484.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal484
Ordinal484	proc near		; DATA XREF: .rdata:6B1AD560o
					; .rdata:off_6B1BF428o
		add	ecx, 8
		jmp	Ordinal461
Ordinal484	endp

; Exported entry 485.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal485
Ordinal485	proc near		; DATA XREF: .rdata:6B1AD564o
					; .rdata:off_6B1BF428o
		add	ecx, 8
		jmp	Ordinal462
Ordinal485	endp

; Exported entry 486.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal486
Ordinal486	proc near		; DATA XREF: .rdata:6B1AD568o
					; .rdata:off_6B1BF428o
		add	ecx, 8
		jmp	Ordinal463
Ordinal486	endp

; Exported entry 514.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal514
Ordinal514	proc near		; DATA XREF: .rdata:off_6B1AD54Co
					; .rdata:off_6B1BF428o
		sub	ecx, 4
		jmp	Ordinal479
Ordinal514	endp

; Exported entry 280.
; Exported entry 374.
; Exported entry 412.
; Exported entry 515.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal515
Ordinal515	proc near		; DATA XREF: .rdata:6B1AB71Co
					; .rdata:6B1AC4B8o ...
		sub	ecx, 4		; ccL35_280
					; ccL35_374
					; ccL35_412
		jmp	Ordinal394
Ordinal515	endp

; Exported entry 281.
; Exported entry 375.
; Exported entry 413.
; Exported entry 516.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal375
Ordinal375	proc near		; DATA XREF: .rdata:6B1AB720o
					; .rdata:6B1AC4BCo ...
		sub	ecx, 4		; ccL35_281
					; ccL35_375
					; ccL35_413
		jmp	Ordinal157
Ordinal375	endp

; Exported entry 517.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal517
Ordinal517	proc near		; DATA XREF: .rdata:off_6B1AD538o
					; .rdata:off_6B1BF428o
		sub	ecx, 8
		jmp	Ordinal479
Ordinal517	endp

; Exported entry 283.
; Exported entry 377.
; Exported entry 518.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal377
Ordinal377	proc near		; DATA XREF: .rdata:6B1AB708o
					; .rdata:6B1AC4A4o ...
		sub	ecx, 8		; ccL35_283
					; ccL35_377
		jmp	Ordinal394
Ordinal377	endp

; Exported entry 284.
; Exported entry 378.
; Exported entry 519.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal284
Ordinal284	proc near		; DATA XREF: .rdata:6B1AB70Co
					; .rdata:6B1AC4A8o ...
		sub	ecx, 8		; ccL35_284
					; ccL35_378
		jmp	Ordinal157
Ordinal284	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B189B44	proc near		; DATA XREF: .rdata:off_6B1AD52Co

arg_0		= byte ptr  4

		sub	ecx, 14h	; void *
		jmp	sub_6B189CB5
sub_6B189B44	endp

; Exported entry 494.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal494
Ordinal494	proc near		; DATA XREF: .rdata:6B1AD544o
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		lea	ecx, [ebp+arg_0]
		call	sub_6B1899BF
		cmp	[ebp+arg_0], 0
		jnz	short loc_6B189B79
		push	offset aCstringimplCop ; "CStringImpl::Copy() :	pString	== NULL\n"
		call	sub_6B18102E
		pop	ecx
		xor	bl, bl
		jmp	loc_6B189C07
; ---------------------------------------------------------------------------

loc_6B189B79:				; CODE XREF: Ordinal494+19j
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+0Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	ecx, [esi-8]
		mov	eax, [ecx]
		call	dword ptr [eax+0Ch]
		mov	ecx, [ebp+arg_0]
		mov	byte ptr [esi+8], 1
		mov	eax, [ecx]
		mov	bl, 1
		call	dword ptr [eax+10h]
		sub	eax, 0
		jz	short loc_6B189BF4
		dec	eax
		jz	short loc_6B189BCD
		dec	eax
		jz	short loc_6B189BB9
		push	offset aCstringimplC_0 ; "CStringImpl::Copy() :	switch(default)\n"
		call	sub_6B18102E
		pop	ecx
		xor	bl, bl
		jmp	short loc_6B189BE7
; ---------------------------------------------------------------------------

loc_6B189BB9:				; CODE XREF: Ordinal494+5Cj
		mov	ecx, [ebp+arg_0]
		lea	eax, [esi+30h]
		push	eax		; int
		mov	eax, [ecx]
		call	dword ptr [eax+28h]
		push	eax		; Src
		call	Ordinal1521
		jmp	short loc_6B189BDF
; ---------------------------------------------------------------------------

loc_6B189BCD:				; CODE XREF: Ordinal494+59j
		mov	ecx, [ebp+arg_0]
		lea	eax, [esi+2Ch]
		push	eax		; int
		mov	eax, [ecx]
		call	dword ptr [eax+18h]
		push	eax		; Src
		call	Ordinal1519

loc_6B189BDF:				; CODE XREF: Ordinal494+7Fj
		mov	bl, al
		test	bl, bl
		pop	ecx
		pop	ecx
		jnz	short loc_6B189BF4

loc_6B189BE7:				; CODE XREF: Ordinal494+6Bj
		push	offset aCstringimplC_1 ; "CStringImpl::Copy() :	CStringConvert::C"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B189BFF
; ---------------------------------------------------------------------------

loc_6B189BF4:				; CODE XREF: Ordinal494+56j
					; Ordinal494+99j
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx]
		call	dword ptr [eax+10h]
		mov	[esi+34h], eax

loc_6B189BFF:				; CODE XREF: Ordinal494+A6j
		lea	ecx, [ebp+var_C]
		call	Ordinal1573

loc_6B189C07:				; CODE XREF: Ordinal494+28j
		lea	ecx, [ebp+arg_0]
		call	sub_6B189962
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal494	endp

; Exported entry 496.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal496
Ordinal496	proc near		; DATA XREF: .rdata:6B1AD57Co
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+14h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	ecx, [esi+34h]
		call	sub_6B18175E
		lea	ecx, [esi+38h]
		call	sub_6B189317
		and	dword ptr [esi+3Ch], 0
		lea	ecx, [ebp+var_C]
		mov	byte ptr [esi+10h], 0
		call	Ordinal1573
		pop	esi
		leave
		retn
Ordinal496	endp

; Exported entry 478.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal478
Ordinal478	proc near		; CODE XREF: Ordinal511+42p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		push	edi
		mov	esi, ecx
		call	sub_6B1833E7
		mov	dword ptr [esi+8], offset off_6B1AD36C
		lea	edi, [esi+14h]
		mov	dword ptr [esi+0Ch], offset off_6B1AB6B4
		mov	ecx, edi
		mov	dword ptr [esi+10h], offset off_6B1AB6D8
		call	Ordinal457
		lea	ecx, [esi+3Ch]
		mov	dword ptr [esi], offset	off_6B1AD5A0
		mov	dword ptr [esi+8], offset off_6B1AD570
		mov	dword ptr [esi+0Ch], offset off_6B1AD54C
		mov	dword ptr [esi+10h], offset off_6B1AD538
		mov	dword ptr [edi], offset	off_6B1AD52C
		call	sub_6B181879
		lea	ecx, [esi+40h]
		call	sub_6B181879
		and	dword ptr [esi+44h], 0
		pop	edi
		mov	eax, esi
		pop	esi
		retn
Ordinal478	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B189CB5(void *, char)
sub_6B189CB5	proc near		; CODE XREF: sub_6B189B44+3j
					; DATA XREF: .rdata:off_6B1AD5A0o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal487
		test	[esp+4+arg_0], 1
		jz	short loc_6B189CCB
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B189CCB:				; CODE XREF: sub_6B189CB5+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B189CB5	endp

; Exported entry 488.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal488
Ordinal488	proc near		; CODE XREF: Ordinal495+64p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	esi, ecx
		call	sub_6B1833E7
		mov	dword ptr [esi+8], offset off_6B1AD36C
		lea	edi, [esi+14h]
		mov	dword ptr [esi+0Ch], offset off_6B1AB6B4
		mov	ecx, edi
		mov	dword ptr [esi+10h], offset off_6B1AB6D8
		call	Ordinal457
		lea	ecx, [esi+3Ch]
		mov	dword ptr [esi], offset	off_6B1AD5A0
		mov	dword ptr [esi+8], offset off_6B1AD570
		mov	dword ptr [esi+0Ch], offset off_6B1AD54C
		mov	dword ptr [esi+10h], offset off_6B1AD538
		mov	dword ptr [edi], offset	off_6B1AD52C
		call	sub_6B181879
		lea	ecx, [esi+40h]
		call	sub_6B181879
		push	[esp+8+arg_0]
		and	dword ptr [esi+44h], 0
		mov	ecx, esi
		call	Ordinal491
		pop	edi
		mov	byte ptr [esi+18h], 0
		mov	eax, esi
		pop	esi
		retn	4
Ordinal488	endp

; Exported entry 489.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal489(char	*Src)
		public Ordinal489
Ordinal489	proc near		; CODE XREF: Ordinal512+45p
					; DATA XREF: .rdata:off_6B1BF428o

Src		= dword	ptr  4

		push	esi
		push	edi
		mov	esi, ecx
		call	sub_6B1833E7
		mov	dword ptr [esi+8], offset off_6B1AD36C
		lea	edi, [esi+14h]
		mov	dword ptr [esi+0Ch], offset off_6B1AB6B4
		mov	ecx, edi
		mov	dword ptr [esi+10h], offset off_6B1AB6D8
		call	Ordinal457
		lea	ecx, [esi+3Ch]
		mov	dword ptr [esi], offset	off_6B1AD5A0
		mov	dword ptr [esi+8], offset off_6B1AD570
		mov	dword ptr [esi+0Ch], offset off_6B1AD54C
		mov	dword ptr [esi+10h], offset off_6B1AD538
		mov	dword ptr [edi], offset	off_6B1AD52C
		call	sub_6B181879
		lea	ecx, [esi+40h]
		call	sub_6B181879
		push	[esp+8+Src]	; Src
		and	dword ptr [esi+44h], 0
		mov	ecx, esi
		call	Ordinal492
		pop	edi
		mov	byte ptr [esi+18h], 0
		mov	eax, esi
		pop	esi
		retn	4
Ordinal489	endp

; Exported entry 490.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal490(wchar_t *Src)
		public Ordinal490
Ordinal490	proc near		; CODE XREF: Ordinal513+45p
					; DATA XREF: .rdata:off_6B1BF428o

Src		= dword	ptr  4

		push	esi
		push	edi
		mov	esi, ecx
		call	sub_6B1833E7
		mov	dword ptr [esi+8], offset off_6B1AD36C
		lea	edi, [esi+14h]
		mov	dword ptr [esi+0Ch], offset off_6B1AB6B4
		mov	ecx, edi
		mov	dword ptr [esi+10h], offset off_6B1AB6D8
		call	Ordinal457
		lea	ecx, [esi+3Ch]
		mov	dword ptr [esi], offset	off_6B1AD5A0
		mov	dword ptr [esi+8], offset off_6B1AD570
		mov	dword ptr [esi+0Ch], offset off_6B1AD54C
		mov	dword ptr [esi+10h], offset off_6B1AD538
		mov	dword ptr [edi], offset	off_6B1AD52C
		call	sub_6B181879
		lea	ecx, [esi+40h]
		call	sub_6B181879
		push	[esp+8+Src]	; Src
		and	dword ptr [esi+44h], 0
		mov	ecx, esi
		call	Ordinal493
		pop	edi
		mov	byte ptr [esi+18h], 0
		mov	eax, esi
		pop	esi
		retn	4
Ordinal490	endp

; Exported entry 495.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal495
Ordinal495	proc near		; DATA XREF: .rdata:6B1AD548o
					; .rdata:off_6B1BF428o

var_68		= byte ptr -68h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_52 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 5Ch
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		mov	edi, ecx
		mov	ecx, [esi]
		xor	ebx, ebx
		cmp	ecx, ebx
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		jz	short loc_6B189E59
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		mov	[esi], ebx

loc_6B189E59:				; CODE XREF: Ordinal495+26j
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [edi+0Ch]
		push	eax
		lea	ecx, [ebp+var_68]
		call	Ordinal1571
		push	offset aCstringimplClo ; "CStringImpl::Clone()"
		lea	ecx, [ebp+var_48]
		mov	[ebp+var_4], ebx
		call	Ordinal1089
		push	48h		; Size
		mov	byte ptr [ebp+var_4], 2
		call	??2@YAPAXI@Z	; operator new(uint)
		cmp	eax, ebx
		pop	ecx
		jz	short loc_6B189E95
		add	edi, 0FFFFFFF0h
		push	edi
		mov	ecx, eax
		call	Ordinal488
		jmp	short loc_6B189E97
; ---------------------------------------------------------------------------

loc_6B189E95:				; CODE XREF: Ordinal495+5Cj
		xor	eax, eax

loc_6B189E97:				; CODE XREF: Ordinal495+69j
		mov	ecx, eax
		add	eax, 8
		neg	ecx
		sbb	ecx, ecx
		and	ecx, eax
		jnz	short loc_6B189ECD
		lea	eax, [ebp+var_28]
		push	eax
		lea	ecx, [ebp+var_54]
		mov	[ebp+var_28], offset aBadAllocation ; "bad allocation"
		call	ds:??0exception@@QAE@ABQBD@Z ; exception::exception(char const * const &)
		push	offset dword_6B1BAC3C
		lea	eax, [ebp+var_54]
		push	eax
		mov	[ebp+var_54], offset off_6B1AABCC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B189ECD:				; CODE XREF: Ordinal495+78j
		mov	[esi], ecx
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		jmp	loc_6B189F74
; ---------------------------------------------------------------------------

loc_6B189ED9:				; DATA XREF: .rdata:6B1BB5BCo
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	ecx, [ebp+var_5C]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B189F71
		retn
; ---------------------------------------------------------------------------

loc_6B189F1C:				; DATA XREF: .rdata:6B1BB5CCo
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	eax, [ebp+var_58]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B189F71
		retn
; ---------------------------------------------------------------------------

loc_6B189F71:				; DATA XREF: Ordinal495+ECo
					; Ordinal495+141o
		mov	esi, [ebp+arg_0]

loc_6B189F74:				; CODE XREF: Ordinal495+AAj
		cmp	dword ptr [esi], 0
		lea	ecx, [ebp+var_48]
		setnz	bl
		call	Ordinal1090
		lea	ecx, [ebp+var_68]
		call	Ordinal1573
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal495	endp ; sp-analysis failed

; Exported entry 511.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal511
Ordinal511	proc near		; CODE XREF: Ordinal592+73p
					; DATA XREF: .rdata:off_6B1BF428o

var_60		= dword	ptr -60h
var_4C		= byte ptr -4Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_53 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 54h
		mov	eax, ___security_cookie
		and	[ebp+var_28], 0
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCstringimplCre ; "CStringImpl::CreateStringImpl()"
		lea	ecx, [ebp+var_4C]
		mov	[ebp+var_14], eax
		call	Ordinal1089
		and	[ebp+var_4], 0
		push	48h		; Size
		mov	byte ptr [ebp+var_4], 1
		call	??2@YAPAXI@Z	; operator new(uint)
		test	eax, eax
		pop	ecx
		jz	short loc_6B189FF0
		mov	ecx, eax
		call	Ordinal478
		mov	ecx, eax
		jmp	short loc_6B189FF2
; ---------------------------------------------------------------------------

loc_6B189FF0:				; CODE XREF: Ordinal511+3Ej
		xor	ecx, ecx

loc_6B189FF2:				; CODE XREF: Ordinal511+49j
		test	ecx, ecx
		mov	[ebp+var_28], ecx
		jnz	short loc_6B18A022
		lea	eax, [ebp+var_2C]
		push	eax
		lea	ecx, [ebp+var_60]
		mov	[ebp+var_2C], offset aBadAllocation ; "bad allocation"
		call	ds:??0exception@@QAE@ABQBD@Z ; exception::exception(char const * const &)
		push	offset dword_6B1BAC3C
		lea	eax, [ebp+var_60]
		push	eax
		mov	[ebp+var_60], offset off_6B1AABCC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18A022:				; CODE XREF: Ordinal511+52j
		add	ecx, 8
		mov	eax, [ecx]
		call	dword ptr [eax+4]

loc_6B18A02A:				; DATA XREF: sub_6B18A04C+3Do
					; sub_6B18A08F+4Fo
		lea	ecx, [ebp+var_4C]
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	eax, [ebp+var_28]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal511	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18A04C	proc near		; DATA XREF: .rdata:6B1BB624o
		push	13h
		lea	ecx, [ebp-4Ch]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-4Ch]
		call	Ordinal1101
		mov	ecx, [ebp-54h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-4Ch]
		call	Ordinal1103
		lea	ecx, [ebp-4Ch]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B18A02A
		retn
sub_6B18A04C	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18A08F	proc near		; DATA XREF: .rdata:6B1BB634o
		push	15h
		lea	ecx, [ebp-4Ch]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-4Ch]
		call	Ordinal1101
		mov	eax, [ebp-50h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-4Ch]
		call	Ordinal1103
		lea	ecx, [ebp-4Ch]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B18A02A
		retn
sub_6B18A08F	endp

; Exported entry 512.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal512(char *Src)
		public Ordinal512
Ordinal512	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_60		= dword	ptr -60h
var_4C		= byte ptr -4Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8

		mov	eax, offset unknown_libname_54 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 54h
		mov	eax, ___security_cookie
		and	[ebp+var_28], 0
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCstringimplC_2 ; "CStringImpl::CreateStringImpl(LPCSTR)"
		lea	ecx, [ebp+var_4C]
		mov	[ebp+var_14], eax
		call	Ordinal1089
		and	[ebp+var_4], 0
		push	48h		; Size
		mov	byte ptr [ebp+var_4], 1
		call	??2@YAPAXI@Z	; operator new(uint)
		test	eax, eax
		pop	ecx
		jz	short loc_6B18A132
		push	[ebp+Src]	; Src
		mov	ecx, eax
		call	Ordinal489
		mov	ecx, eax
		jmp	short loc_6B18A134
; ---------------------------------------------------------------------------

loc_6B18A132:				; CODE XREF: Ordinal512+3Ej
		xor	ecx, ecx

loc_6B18A134:				; CODE XREF: Ordinal512+4Cj
		test	ecx, ecx
		mov	[ebp+var_28], ecx
		jnz	short loc_6B18A164
		lea	eax, [ebp+var_2C]
		push	eax
		lea	ecx, [ebp+var_60]
		mov	[ebp+var_2C], offset aBadAllocation ; "bad allocation"
		call	ds:??0exception@@QAE@ABQBD@Z ; exception::exception(char const * const &)
		push	offset dword_6B1BAC3C
		lea	eax, [ebp+var_60]
		push	eax
		mov	[ebp+var_60], offset off_6B1AABCC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18A164:				; CODE XREF: Ordinal512+55j
		add	ecx, 8
		mov	eax, [ecx]
		call	dword ptr [eax+4]

loc_6B18A16C:				; DATA XREF: sub_6B18A18E+3Do
					; sub_6B18A1D1+4Fo
		lea	ecx, [ebp+var_4C]
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	eax, [ebp+var_28]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal512	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18A18E	proc near		; DATA XREF: .rdata:6B1BB68Co
		push	13h
		lea	ecx, [ebp-4Ch]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-4Ch]
		call	Ordinal1101
		mov	ecx, [ebp-54h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-4Ch]
		call	Ordinal1103
		lea	ecx, [ebp-4Ch]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B18A16C
		retn
sub_6B18A18E	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18A1D1	proc near		; DATA XREF: .rdata:6B1BB69Co
		push	15h
		lea	ecx, [ebp-4Ch]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-4Ch]
		call	Ordinal1101
		mov	eax, [ebp-50h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-4Ch]
		call	Ordinal1103
		lea	ecx, [ebp-4Ch]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B18A16C
		retn
sub_6B18A1D1	endp

; Exported entry 513.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal513(wchar_t *Src)
		public Ordinal513
Ordinal513	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_60		= dword	ptr -60h
var_4C		= byte ptr -4Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8

		mov	eax, offset unknown_libname_55 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 54h
		mov	eax, ___security_cookie
		and	[ebp+var_28], 0
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCstringimplC_3 ; "CStringImpl::CreateStringImpl(LPCWSTR)"
		lea	ecx, [ebp+var_4C]
		mov	[ebp+var_14], eax
		call	Ordinal1089
		and	[ebp+var_4], 0
		push	48h		; Size
		mov	byte ptr [ebp+var_4], 1
		call	??2@YAPAXI@Z	; operator new(uint)
		test	eax, eax
		pop	ecx
		jz	short loc_6B18A274
		push	[ebp+Src]	; Src
		mov	ecx, eax
		call	Ordinal490
		mov	ecx, eax
		jmp	short loc_6B18A276
; ---------------------------------------------------------------------------

loc_6B18A274:				; CODE XREF: Ordinal513+3Ej
		xor	ecx, ecx

loc_6B18A276:				; CODE XREF: Ordinal513+4Cj
		test	ecx, ecx
		mov	[ebp+var_28], ecx
		jnz	short loc_6B18A2A6
		lea	eax, [ebp+var_2C]
		push	eax
		lea	ecx, [ebp+var_60]
		mov	[ebp+var_2C], offset aBadAllocation ; "bad allocation"
		call	ds:??0exception@@QAE@ABQBD@Z ; exception::exception(char const * const &)
		push	offset dword_6B1BAC3C
		lea	eax, [ebp+var_60]
		push	eax
		mov	[ebp+var_60], offset off_6B1AABCC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18A2A6:				; CODE XREF: Ordinal513+55j
		add	ecx, 8
		mov	eax, [ecx]
		call	dword ptr [eax+4]

loc_6B18A2AE:				; DATA XREF: sub_6B18A2D0+3Do
					; sub_6B18A313+4Fo
		lea	ecx, [ebp+var_4C]
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	eax, [ebp+var_28]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal513	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18A2D0	proc near		; DATA XREF: .rdata:6B1BB6F4o
		push	13h
		lea	ecx, [ebp-4Ch]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-4Ch]
		call	Ordinal1101
		mov	ecx, [ebp-54h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-4Ch]
		call	Ordinal1103
		lea	ecx, [ebp-4Ch]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B18A2AE
		retn
sub_6B18A2D0	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18A313	proc near		; DATA XREF: .rdata:6B1BB704o
		push	15h
		lea	ecx, [ebp-4Ch]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-4Ch]
		call	Ordinal1101
		mov	eax, [ebp-50h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-4Ch]
		call	Ordinal1103
		lea	ecx, [ebp-4Ch]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B18A2AE
		retn
sub_6B18A313	endp

; Exported entry 526.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal526
Ordinal526	proc near		; DATA XREF: .rdata:off_6B1BF428o
		xor	eax, eax
		cmp	[ecx+34h], eax
		setz	al
		retn
Ordinal526	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18A371	proc near		; CODE XREF: Ordinal533+18Ap
		push	esi
		mov	esi, ecx
		call	Ordinal414
		mov	dword ptr [esi], offset	off_6B1AD6DC
		mov	dword ptr [esi+8], offset off_6B1AD6B8
		mov	eax, esi
		pop	esi
		retn
sub_6B18A371	endp

; [00000005 BYTES: COLLAPSED FUNCTION j_Ordinal418. PRESS KEYPAD "+" TO	EXPAND]

; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B18A38F(void *, char)
sub_6B18A38F	proc near		; DATA XREF: .rdata:off_6B1AD6DCo

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	j_Ordinal418
		test	[esp+4+arg_0], 1
		jz	short loc_6B18A3A5
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B18A3A5:				; CODE XREF: sub_6B18A38F+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B18A38F	endp

; Exported entry 534.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal534
Ordinal534	proc near		; CODE XREF: Ordinal535+DBp
					; Ordinal535+E6p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		xor	esi, esi
		dec	eax
		cmp	eax, 0Bh	; switch 12 cases
		ja	short loc_6B18A3D5 ; jumptable 6B18A3B8	default	case
		jmp	ds:off_6B18A3E6[eax*4] ; switch	jump

loc_6B18A3BF:				; DATA XREF: .text:off_6B18A3E6o
		xor	esi, esi	; jumptable 6B18A3B8 cases 0-2
		inc	esi
		jmp	short loc_6B18A3E0
; ---------------------------------------------------------------------------

loc_6B18A3C4:				; CODE XREF: Ordinal534+Dj
					; DATA XREF: .text:off_6B18A3E6o
		push	2		; jumptable 6B18A3B8 cases 3,4
		jmp	short loc_6B18A3D2
; ---------------------------------------------------------------------------

loc_6B18A3C8:				; CODE XREF: Ordinal534+Dj
					; DATA XREF: .text:off_6B18A3E6o
		push	4		; jumptable 6B18A3B8 cases 5,6
		jmp	short loc_6B18A3D2
; ---------------------------------------------------------------------------

loc_6B18A3CC:				; CODE XREF: Ordinal534+Dj
					; DATA XREF: .text:off_6B18A3E6o
		push	8		; jumptable 6B18A3B8 cases 7-9
		jmp	short loc_6B18A3D2
; ---------------------------------------------------------------------------

loc_6B18A3D0:				; CODE XREF: Ordinal534+Dj
					; DATA XREF: .text:off_6B18A3E6o
		push	10h		; jumptable 6B18A3B8 cases 10,11

loc_6B18A3D2:				; CODE XREF: Ordinal534+1Bj
					; Ordinal534+1Fj ...
		pop	esi
		jmp	short loc_6B18A3E0
; ---------------------------------------------------------------------------

loc_6B18A3D5:				; CODE XREF: Ordinal534+Bj
		push	offset aCvalueGetstati ; jumptable 6B18A3B8 default case
		call	sub_6B18102E
		pop	ecx

loc_6B18A3E0:				; CODE XREF: Ordinal534+17j
					; Ordinal534+28j
		mov	eax, esi
		pop	esi
		retn	4
Ordinal534	endp

; ---------------------------------------------------------------------------
off_6B18A3E6	dd offset loc_6B18A3BF	; DATA XREF: Ordinal534+Dr
		dd offset loc_6B18A3BF	; jump table for switch	statement
		dd offset loc_6B18A3BF
		dd offset loc_6B18A3C4
		dd offset loc_6B18A3C4
		dd offset loc_6B18A3C8
		dd offset loc_6B18A3C8
		dd offset loc_6B18A3CC
		dd offset loc_6B18A3CC
		dd offset loc_6B18A3CC
		dd offset loc_6B18A3D0
		dd offset loc_6B18A3D0
; Exported entry 539.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal539
Ordinal539	proc near		; CODE XREF: Ordinal170+42p
					; Ordinal300+42p ...

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		mov	esi, ecx
		cmp	esi, edi
		jz	short loc_6B18A451
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	al, [edi+28h]
		mov	[esi+28h], al
		mov	al, [edi+4]
		mov	[esi+4], al
		mov	al, [edi+29h]
		lea	ecx, [ebp+var_C]
		mov	[esi+29h], al
		call	Ordinal1573

loc_6B18A451:				; CODE XREF: Ordinal539+Fj
		pop	edi
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal539	endp

; Exported entry 540.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal540
Ordinal540	proc near		; CODE XREF: Ordinal203+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		mov	eax, [esi]
		and	[ebp+var_4], 0
		push	1
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_0]
		mov	ecx, esi
		call	dword ptr [eax+10h]
		lea	ecx, [ebp+var_10]
		mov	bl, al
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal540	endp

; Exported entry 542.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal542
Ordinal542	proc near		; CODE XREF: Ordinal315+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		mov	eax, [esi]
		and	[ebp+var_4], 0
		push	0
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_0]
		mov	ecx, esi
		call	dword ptr [eax+10h]
		test	al, al
		jnz	short loc_6B18A4D9
		push	offset aCvaluecollecti ; "CValueCollection::GetType() :	GetReadVa"...
		call	sub_6B18102E
		pop	ecx
		xor	esi, esi
		jmp	short loc_6B18A4DF
; ---------------------------------------------------------------------------

loc_6B18A4D9:				; CODE XREF: Ordinal542+2Fj
		mov	eax, [ebp+var_4]
		mov	esi, [eax+34h]

loc_6B18A4DF:				; CODE XREF: Ordinal542+3Ej
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal542	endp

; Exported entry 543.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal543
Ordinal543	proc near		; CODE XREF: Ordinal316+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	bl, [esi+28h]
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn
Ordinal543	endp

; Exported entry 544.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal544
Ordinal544	proc near		; CODE XREF: Ordinal317+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	al, [ebp+arg_0]
		lea	ecx, [ebp+var_C]
		mov	[esi+28h], al
		call	Ordinal1573
		mov	al, 1
		pop	esi
		leave
		retn	4
Ordinal544	endp

; Exported entry 545.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal545
Ordinal545	proc near		; CODE XREF: Ordinal318+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	bl, [esi+29h]
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn
Ordinal545	endp

; Exported entry 546.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal546
Ordinal546	proc near		; CODE XREF: Ordinal209+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	al, [ebp+arg_0]
		lea	ecx, [ebp+var_C]
		mov	[esi+29h], al
		call	Ordinal1573
		mov	al, 1
		pop	esi
		leave
		retn	4
Ordinal546	endp

; Exported entry 548.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal548
Ordinal548	proc near		; CODE XREF: Ordinal321+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		mov	eax, [esi]
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+14h]
		test	al, al
		jnz	short loc_6B18A5DD
		push	offset aCvaluecollec_0 ; "CValueCollection::SetValue(bool) : GetW"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18A5EF
; ---------------------------------------------------------------------------

loc_6B18A5DD:				; CODE XREF: Ordinal548+2Ej
		mov	eax, [ebp+var_4]
		xor	ebx, ebx
		inc	ebx
		mov	[eax+34h], ebx
		mov	al, [ebp+arg_4]
		mov	ecx, [ebp+var_4]
		mov	[ecx+8], al

loc_6B18A5EF:				; CODE XREF: Ordinal548+3Bj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal548	endp

; Exported entry 550.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal550
Ordinal550	proc near		; CODE XREF: Ordinal213+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		mov	eax, [esi]
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+14h]
		test	al, al
		jnz	short loc_6B18A63C
		push	offset aCvaluecollec_1 ; "CValueCollection::SetValue(CHAR) : GetW"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18A651
; ---------------------------------------------------------------------------

loc_6B18A63C:				; CODE XREF: Ordinal550+2Ej
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax+34h], 2
		mov	al, [ebp+arg_4]
		mov	ecx, [ebp+var_4]
		mov	[ecx+8], al
		mov	bl, 1

loc_6B18A651:				; CODE XREF: Ordinal550+3Bj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal550	endp

; Exported entry 552.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal552
Ordinal552	proc near		; CODE XREF: Ordinal215+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		mov	eax, [esi]
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+14h]
		test	al, al
		jnz	short loc_6B18A69E
		push	offset aCvaluecollec_2 ; "CValueCollection::SetValue(BYTE) : GetW"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18A6B3
; ---------------------------------------------------------------------------

loc_6B18A69E:				; CODE XREF: Ordinal552+2Ej
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax+34h], 3
		mov	al, [ebp+arg_4]
		mov	ecx, [ebp+var_4]
		mov	[ecx+8], al
		mov	bl, 1

loc_6B18A6B3:				; CODE XREF: Ordinal552+3Bj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal552	endp

; Exported entry 554.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal554
Ordinal554	proc near		; CODE XREF: Ordinal327+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= word ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		mov	eax, [esi]
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+14h]
		test	al, al
		jnz	short loc_6B18A700
		push	offset aCvaluecollec_3 ; "CValueCollection::SetValue(SHORT) : Get"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18A717
; ---------------------------------------------------------------------------

loc_6B18A700:				; CODE XREF: Ordinal554+2Ej
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax+34h], 4
		mov	ax, [ebp+arg_4]
		mov	ecx, [ebp+var_4]
		mov	[ecx+8], ax
		mov	bl, 1

loc_6B18A717:				; CODE XREF: Ordinal554+3Bj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal554	endp

; Exported entry 556.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal556
Ordinal556	proc near		; CODE XREF: Ordinal219+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= word ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		mov	eax, [esi]
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+14h]
		test	al, al
		jnz	short loc_6B18A764
		push	offset aCvaluecollec_4 ; "CValueCollection::SetValue(WORD) : GetW"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18A77B
; ---------------------------------------------------------------------------

loc_6B18A764:				; CODE XREF: Ordinal556+2Ej
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax+34h], 5
		mov	ax, [ebp+arg_4]
		mov	ecx, [ebp+var_4]
		mov	[ecx+8], ax
		mov	bl, 1

loc_6B18A77B:				; CODE XREF: Ordinal556+3Bj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal556	endp

; Exported entry 558.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal558
Ordinal558	proc near		; CODE XREF: Ordinal221+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		mov	eax, [esi]
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+14h]
		test	al, al
		jnz	short loc_6B18A7C8
		push	offset aCvaluecollec_5 ; "CValueCollection::SetValue(LONG) : GetW"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18A7DD
; ---------------------------------------------------------------------------

loc_6B18A7C8:				; CODE XREF: Ordinal558+2Ej
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax+34h], 6
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_4]
		mov	[ecx+8], eax
		mov	bl, 1

loc_6B18A7DD:				; CODE XREF: Ordinal558+3Bj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal558	endp

; Exported entry 560.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal560
Ordinal560	proc near		; CODE XREF: Ordinal333+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		mov	eax, [esi]
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+14h]
		test	al, al
		jnz	short loc_6B18A82A
		push	offset aCvaluecollec_6 ; "CValueCollection::SetValue(DWORD) : Get"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18A83F
; ---------------------------------------------------------------------------

loc_6B18A82A:				; CODE XREF: Ordinal560+2Ej
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax+34h], 7
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_4]
		mov	[ecx+8], eax
		mov	bl, 1

loc_6B18A83F:				; CODE XREF: Ordinal560+3Bj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal560	endp

; Exported entry 562.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal562
Ordinal562	proc near		; CODE XREF: Ordinal225+Fp
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		mov	eax, [esi]
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+14h]
		test	al, al
		jnz	short loc_6B18A88C
		push	offset aCvaluecollec_7 ; "CValueCollection::SetValue(LONGLONG) : "...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18A8AA
; ---------------------------------------------------------------------------

loc_6B18A88C:				; CODE XREF: Ordinal562+2Ej
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax+34h], 8
		mov	ecx, [ebp+var_4]
		mov	eax, [ebp+arg_4]
		mov	[ecx+8], eax
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+var_4]
		mov	[ecx+0Ch], eax
		mov	bl, 1

loc_6B18A8AA:				; CODE XREF: Ordinal562+3Bj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	0Ch
Ordinal562	endp

; Exported entry 564.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal564
Ordinal564	proc near		; CODE XREF: Ordinal227+Fp
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		mov	eax, [esi]
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+14h]
		test	al, al
		jnz	short loc_6B18A8F7
		push	offset aCvaluecollec_8 ; "CValueCollection::SetValue(ULONGLONG)	:"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18A915
; ---------------------------------------------------------------------------

loc_6B18A8F7:				; CODE XREF: Ordinal564+2Ej
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax+34h], 9
		mov	ecx, [ebp+var_4]
		mov	eax, [ebp+arg_4]
		mov	[ecx+8], eax
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+var_4]
		mov	[ecx+0Ch], eax
		mov	bl, 1

loc_6B18A915:				; CODE XREF: Ordinal564+3Bj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	0Ch
Ordinal564	endp

; Exported entry 566.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal566(int,	double)
		public Ordinal566
Ordinal566	proc near		; CODE XREF: Ordinal229+10p
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= qword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		mov	eax, [esi]
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+14h]
		test	al, al
		jnz	short loc_6B18A962
		push	offset aCvaluecollec_9 ; "CValueCollection::SetValue(double) : Ge"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18A977
; ---------------------------------------------------------------------------

loc_6B18A962:				; CODE XREF: Ordinal566+2Ej
		mov	eax, [ebp+var_4]
		fld	[ebp+arg_4]
		mov	dword ptr [eax+34h], 0Ah
		mov	eax, [ebp+var_4]
		fstp	qword ptr [eax+8]
		mov	bl, 1

loc_6B18A977:				; CODE XREF: Ordinal566+3Bj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	0Ch
Ordinal566	endp

; Exported entry 568.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal568
Ordinal568	proc near		; CODE XREF: Ordinal341+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		mov	eax, [esi]
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+14h]
		test	al, al
		jnz	short loc_6B18A9C4
		push	offset aCvaluecolle_10 ; "CValueCollection::SetValue(GUID) : GetW"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18A9DF
; ---------------------------------------------------------------------------

loc_6B18A9C4:				; CODE XREF: Ordinal568+2Ej
		mov	eax, [ebp+var_4]
		mov	esi, [ebp+arg_4]
		push	edi
		mov	dword ptr [eax+34h], 0Bh
		mov	edi, [ebp+var_4]
		add	edi, 8
		movsd
		movsd
		movsd
		movsd
		mov	bl, 1
		pop	edi

loc_6B18A9DF:				; CODE XREF: Ordinal568+3Bj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal568	endp

; Exported entry 570.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal570
Ordinal570	proc near		; CODE XREF: Ordinal343+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		mov	eax, [esi]
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+14h]
		test	al, al
		jnz	short loc_6B18AA2C
		push	offset aCvaluecolle_11 ; "CValueCollection::SetValue(SYSTEMTIME) "...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18AA47
; ---------------------------------------------------------------------------

loc_6B18AA2C:				; CODE XREF: Ordinal570+2Ej
		mov	eax, [ebp+var_4]
		mov	esi, [ebp+arg_4]
		push	edi
		mov	dword ptr [eax+34h], 0Ch
		mov	edi, [ebp+var_4]
		add	edi, 8
		movsd
		movsd
		movsd
		movsd
		mov	bl, 1
		pop	edi

loc_6B18AA47:				; CODE XREF: Ordinal570+3Bj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal570	endp

; Exported entry 573.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal573(int,	char *Src)
		public Ordinal573
Ordinal573	proc near		; CODE XREF: Ordinal236+3j
					; Ordinal584+Ap
					; DATA XREF: ...

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Src		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		mov	eax, [esi]
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+14h]
		test	al, al
		jnz	short loc_6B18AA94
		push	offset aCvaluecolle_12 ; "CValueCollection::SetValue(LPCSTR) : Ge"...

loc_6B18AA8C:				; CODE XREF: Ordinal573+57j
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18AABC
; ---------------------------------------------------------------------------

loc_6B18AA94:				; CODE XREF: Ordinal573+2Ej
		mov	eax, [ebp+var_4]
		add	eax, 18h
		push	eax		; int
		push	[ebp+Src]	; Src
		call	Ordinal1519
		test	al, al
		pop	ecx
		pop	ecx
		jnz	short loc_6B18AAB0
		push	offset aCvaluecolle_13 ; "CValueCollection::SetValue(LPCSTR) : CS"...
		jmp	short loc_6B18AA8C
; ---------------------------------------------------------------------------

loc_6B18AAB0:				; CODE XREF: Ordinal573+50j
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax+34h], 0Dh
		mov	bl, 1

loc_6B18AABC:				; CODE XREF: Ordinal573+3Bj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal573	endp

; Exported entry 576.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal576(int,	wchar_t	*Src)
		public Ordinal576
Ordinal576	proc near		; CODE XREF: Ordinal349+3j
					; Ordinal586+Ap
					; DATA XREF: ...

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Src		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		mov	eax, [esi]
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+14h]
		test	al, al
		jnz	short loc_6B18AB09
		push	offset aCvaluecolle_14 ; "CValueCollection::SetValue(LPCWSTR) :	G"...

loc_6B18AB01:				; CODE XREF: Ordinal576+57j
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18AB31
; ---------------------------------------------------------------------------

loc_6B18AB09:				; CODE XREF: Ordinal576+2Ej
		mov	eax, [ebp+var_4]
		add	eax, 1Ch
		push	eax		; int
		push	[ebp+Src]	; Src
		call	Ordinal1521
		test	al, al
		pop	ecx
		pop	ecx
		jnz	short loc_6B18AB25
		push	offset aCvaluecolle_15 ; "CValueCollection::SetValue(LPCWSTR) :	C"...
		jmp	short loc_6B18AB01
; ---------------------------------------------------------------------------

loc_6B18AB25:				; CODE XREF: Ordinal576+50j
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax+34h], 0Eh
		mov	bl, 1

loc_6B18AB31:				; CODE XREF: Ordinal576+3Bj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal576	endp

; Exported entry 579.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal579(int,	void *Src, size_t dwBytes)
		public Ordinal579
Ordinal579	proc near		; CODE XREF: Ordinal352+3j
					; Ordinal588+1Dp
					; DATA XREF: ...

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Src		= dword	ptr  0Ch
dwBytes		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		xor	ebx, ebx
		cmp	[ebp+Src], ebx
		push	esi
		mov	esi, ecx
		jnz	short loc_6B18AB88
		cmp	[ebp+dwBytes], ebx
		ja	short loc_6B18AB8D

loc_6B18AB57:				; CODE XREF: Ordinal579+4Aj
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		mov	eax, [esi]
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+14h]
		test	al, al
		jnz	short loc_6B18AB9C
		push	offset aCvaluecolle_16 ; "CValueCollection::SetValue(LPCVOID) :	G"...

loc_6B18AB80:				; CODE XREF: Ordinal579+7Cj
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18ABCB
; ---------------------------------------------------------------------------

loc_6B18AB88:				; CODE XREF: Ordinal579+Fj
		cmp	[ebp+dwBytes], ebx
		jnz	short loc_6B18AB57

loc_6B18AB8D:				; CODE XREF: Ordinal579+14j
		push	offset aCvaluecolle_17 ; "CValueCollection::SetValue(LPCVOID) :	p"...
		call	sub_6B18102E
		pop	ecx
		xor	al, al
		jmp	short loc_6B18ABD5
; ---------------------------------------------------------------------------

loc_6B18AB9C:				; CODE XREF: Ordinal579+38j
		cmp	[ebp+dwBytes], ebx
		jbe	short loc_6B18ABBF
		push	[ebp+dwBytes]	; dwBytes
		mov	ecx, [ebp+var_4]
		push	[ebp+Src]	; Src
		add	ecx, 20h
		push	2		; int
		call	Ordinal1202
		test	eax, eax
		jnz	short loc_6B18ABBF
		push	offset aCvaluecolle_18 ; "CValueCollection::SetValue(LPCVOID) :	p"...
		jmp	short loc_6B18AB80
; ---------------------------------------------------------------------------

loc_6B18ABBF:				; CODE XREF: Ordinal579+5Ej
					; Ordinal579+75j
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax+34h], 0Fh
		mov	bl, 1

loc_6B18ABCB:				; CODE XREF: Ordinal579+45j
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		mov	al, bl

loc_6B18ABD5:				; CODE XREF: Ordinal579+59j
		pop	esi
		pop	ebx
		leave
		retn	0Ch
Ordinal579	endp

; Exported entry 581.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal581(int,	VARIANTARG *pvargSrc)
		public Ordinal581
Ordinal581	proc near		; CODE XREF: Ordinal354+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
pvargSrc	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		mov	eax, [esi]
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+14h]
		test	al, al
		jnz	short loc_6B18AC18
		push	offset aCvaluecolle_19 ; "CValueCollection::SetValue(VARIANT) :	G"...
		call	sub_6B18102E

loc_6B18AC15:				; CODE XREF: Ordinal581+5Dj
		pop	ecx
		jmp	short loc_6B18AC46
; ---------------------------------------------------------------------------

loc_6B18AC18:				; CODE XREF: Ordinal581+2Ej
		mov	eax, [ebp+var_4]
		push	[ebp+pvargSrc]	; pvargSrc
		add	eax, 8
		push	eax		; pvarDest
		call	ds:VariantCopyInd
		cmp	eax, ebx
		jge	short loc_6B18AC3A
		push	eax		; Args
		push	offset aCvaluecolle_20 ; "CValueCollection::SetValue(VARIANT) :	V"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18AC15
; ---------------------------------------------------------------------------

loc_6B18AC3A:				; CODE XREF: Ordinal581+4Fj
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax+34h], 10h
		mov	bl, 1

loc_6B18AC46:				; CODE XREF: Ordinal581+3Bj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal581	endp

; Exported entry 588.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal588
Ordinal588	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, ecx
		mov	ecx, [esp+4+arg_4]
		call	Ordinal1052
		mov	ecx, [esp+4+arg_4]
		push	eax		; dwBytes
		call	Ordinal1493
		push	eax		; Src
		push	[esp+0Ch+arg_0]	; int
		mov	ecx, esi
		call	Ordinal579
		pop	esi
		retn	8
Ordinal588	endp

; Exported entry 590.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal590
Ordinal590	proc near		; CODE XREF: Ordinal191+40p
					; Ordinal305+29p
					; DATA XREF: ...

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		mov	ecx, [ebp+arg_0]
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_4]
		push	eax
		call	Ordinal626
		test	eax, eax
		jz	short loc_6B18ACD9
		mov	eax, [ebp+var_4]
		dec	eax
		mov	bl, 1
		jz	short loc_6B18ACB9
		push	offset aCvaluecolle_21 ; "CValueCollection::Load() : switch(defau"...
		jmp	short loc_6B18ACDE
; ---------------------------------------------------------------------------

loc_6B18ACB9:				; CODE XREF: Ordinal590+34j
		mov	ecx, [ebp+arg_0]
		lea	eax, [esi+28h]
		push	eax
		call	Ordinal616
		test	eax, eax
		jz	short loc_6B18ACD9
		mov	ecx, [ebp+arg_0]
		add	esi, 29h
		push	esi
		call	Ordinal616
		test	eax, eax
		jnz	short loc_6B18ACE6

loc_6B18ACD9:				; CODE XREF: Ordinal590+2Cj
					; Ordinal590+4Bj
		push	offset aCvaluecolle_22 ; "CValueCollection::Load() : Archive.Read"...

loc_6B18ACDE:				; CODE XREF: Ordinal590+3Bj
		call	sub_6B18102E
		pop	ecx
		xor	bl, bl

loc_6B18ACE6:				; CODE XREF: Ordinal590+5Bj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal590	endp

; Exported entry 591.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal591
Ordinal591	proc near		; CODE XREF: Ordinal192+21p
					; Ordinal306+1Fp
					; DATA XREF: ...

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	ecx, [ebp+arg_0]
		xor	ebx, ebx
		inc	ebx
		push	ebx
		call	Ordinal627
		test	eax, eax
		jz	short loc_6B18AD44
		mov	ecx, [ebp+arg_0]
		xor	eax, eax
		mov	al, [esi+28h]
		push	eax
		call	Ordinal617
		test	eax, eax
		jz	short loc_6B18AD44
		mov	ecx, [ebp+arg_0]
		xor	eax, eax
		mov	al, [esi+29h]
		push	eax
		call	Ordinal617
		test	eax, eax
		jnz	short loc_6B18AD51

loc_6B18AD44:				; CODE XREF: Ordinal591+28j
					; Ordinal591+3Aj
		push	offset aCvaluecolle_23 ; "CValueCollection::Save() : Archive.Writ"...
		xor	bl, bl
		call	sub_6B18102E
		pop	ecx

loc_6B18AD51:				; CODE XREF: Ordinal591+4Cj
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal591	endp

; Exported entry 592.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal592(void	*Buf1, int)
		public Ordinal592
Ordinal592	proc near		; DATA XREF: .rdata:6B1AAE10o
					; .rdata:6B1AB6F8o ...

Buf1		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		mov	ecx, [esi]
		test	ecx, ecx
		jz	short loc_6B18AD74
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		and	dword ptr [esi], 0

loc_6B18AD74:				; CODE XREF: Ordinal592+9j
		push	10h		; Size
		push	offset dword_6B1AA4BC ;	Buf2
		push	[esp+0Ch+Buf1]	; Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_6B18AD9F
		call	Ordinal278

loc_6B18AD90:				; CODE XREF: Ordinal592+5Aj
					; Ordinal592+78j
		mov	ecx, eax
		add	eax, 8
		neg	ecx
		sbb	ecx, ecx
		and	ecx, eax
		mov	[esi], ecx
		jmp	short loc_6B18ADE6
; ---------------------------------------------------------------------------

loc_6B18AD9F:				; CODE XREF: Ordinal592+28j
		push	10h		; Size
		push	offset dword_6B1AA4AC ;	Buf2
		push	[esp+0Ch+Buf1]	; Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_6B18ADBD
		call	Ordinal372
		jmp	short loc_6B18AD90
; ---------------------------------------------------------------------------

loc_6B18ADBD:				; CODE XREF: Ordinal592+53j
		push	10h		; Size
		push	offset dword_6B1AA4EC ;	Buf2
		push	[esp+0Ch+Buf1]	; Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_6B18ADDB
		call	Ordinal511
		jmp	short loc_6B18AD90
; ---------------------------------------------------------------------------

loc_6B18ADDB:				; CODE XREF: Ordinal592+71j
		push	offset aCvaluecolle_24 ; "CValueCollection::CreateObject() : SymI"...
		call	sub_6B18102E
		pop	ecx

loc_6B18ADE6:				; CODE XREF: Ordinal592+3Cj
		cmp	dword ptr [esi], 0
		pop	esi
		jnz	short loc_6B18ADFB
		push	offset aCvaluecolle_25 ; "CValueCollection::CreateObject() : pObj"...
		call	sub_6B18102E
		pop	ecx
		xor	al, al
		jmp	short locret_6B18ADFD
; ---------------------------------------------------------------------------

loc_6B18ADFB:				; CODE XREF: Ordinal592+89j
		mov	al, 1

locret_6B18ADFD:			; CODE XREF: Ordinal592+98j
		retn	8
Ordinal592	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


sub_6B18AE00	proc near		; DATA XREF: .rdata:6B1AD6BCo
					; .rdata:6B1AD6C0o
		push	2
		pop	eax
		retn
sub_6B18AE00	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18AE04	proc near		; CODE XREF: Ordinal532+1AFp
					; Ordinal532+1FAp ...
		push	esi
		mov	esi, ecx
		mov	ecx, [esi]
		xor	eax, eax
		test	ecx, ecx
		jz	short loc_6B18AE1A
		add	ecx, 8
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		and	dword ptr [esi], 0

loc_6B18AE1A:				; CODE XREF: sub_6B18AE04+9j
		pop	esi
		retn
sub_6B18AE04	endp

; Exported entry 535.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal535
Ordinal535	proc near		; CODE XREF: Ordinal527+6p
					; Ordinal528+6p
					; DATA XREF: ...

var_10		= qword	ptr -10h
var_8		= qword	ptr -8
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	esi, ecx
		mov	eax, [esi+34h]
		push	edi
		mov	edi, [ebp+arg_0]
		cmp	eax, edi
		jnz	short loc_6B18AE37
		mov	al, 1
		jmp	loc_6B18AF23
; ---------------------------------------------------------------------------

loc_6B18AE37:				; CODE XREF: Ordinal535+12j
		push	ebx		; Args
		xor	bl, bl
		test	eax, eax
		jle	loc_6B18AF13
		cmp	eax, 9
		jle	short loc_6B18AEB0
		cmp	eax, 0Dh
		jz	short loc_6B18AE79
		cmp	eax, 0Eh
		jnz	loc_6B18AF13
		cmp	edi, 0Dh
		jnz	loc_6B18AF13
		inc	bl
		cmp	[ebp+arg_4], 0
		jnz	loc_6B18AF20
		mov	eax, [esi+1Ch]
		lea	ecx, [esi+18h]
		push	ecx		; int
		push	eax		; lpWideCharStr
		call	Ordinal1522
		jmp	short loc_6B18AE9B
; ---------------------------------------------------------------------------

loc_6B18AE79:				; CODE XREF: Ordinal535+2Ej
		cmp	edi, 0Eh
		jnz	loc_6B18AF13
		cmp	[ebp+arg_4], 0
		mov	bl, 1
		jnz	loc_6B18AF20
		mov	eax, [esi+18h]
		lea	ecx, [esi+1Ch]
		push	ecx		; int
		push	eax		; lpMultiByteStr
		call	Ordinal1520

loc_6B18AE9B:				; CODE XREF: Ordinal535+5Bj
		test	al, al
		pop	ecx
		pop	ecx
		jnz	short loc_6B18AF1D
		push	offset aCvalueConvertC ; "CValue::Convert() : ccLib::CStringConve"...
		call	sub_6B18102E
		pop	ecx
		xor	bl, bl
		jmp	short loc_6B18AF13
; ---------------------------------------------------------------------------

loc_6B18AEB0:				; CODE XREF: Ordinal535+29j
		test	edi, edi
		jle	short loc_6B18AF13
		cmp	edi, 9
		jle	short loc_6B18AEF4
		cmp	edi, 0Ah
		jnz	short loc_6B18AF13
		cmp	[ebp+arg_4], 0
		mov	bl, 1
		jnz	short loc_6B18AF20
		mov	eax, [esi+0Ch]
		mov	ecx, [esi+8]
		mov	dword ptr [ebp+var_8+4], eax
		and	dword ptr [ebp+var_8+4], 80000000h
		and	eax, 7FFFFFFFh
		and	dword ptr [ebp+var_8], 0
		mov	dword ptr [ebp+var_10],	ecx
		mov	dword ptr [ebp+var_10+4], eax
		fild	[ebp+var_10]
		fild	[ebp+var_8]
		fchs
		faddp	st(1), st
		fstp	qword ptr [esi+8]
		jmp	short loc_6B18AF1D
; ---------------------------------------------------------------------------

loc_6B18AEF4:				; CODE XREF: Ordinal535+9Bj
		push	eax
		mov	ecx, esi
		call	Ordinal534
		push	edi
		mov	ecx, esi
		mov	dword ptr [ebp+var_8+4], eax
		call	Ordinal534
		mov	ecx, dword ptr [ebp+var_8+4]
		cmp	eax, ecx
		mov	edi, [ebp+arg_0]
		jb	short loc_6B18AF13
		mov	bl, 1

loc_6B18AF13:				; CODE XREF: Ordinal535+20j
					; Ordinal535+33j ...
		cmp	[ebp+arg_4], 0
		jnz	short loc_6B18AF20
		test	bl, bl
		jz	short loc_6B18AF20

loc_6B18AF1D:				; CODE XREF: Ordinal535+83j
					; Ordinal535+D6j
		mov	[esi+34h], edi

loc_6B18AF20:				; CODE XREF: Ordinal535+48j
					; Ordinal535+6Cj ...
		mov	al, bl
		pop	ebx

loc_6B18AF23:				; CODE XREF: Ordinal535+16j
		pop	edi
		pop	esi
		leave
		retn	8
Ordinal535	endp

; Exported entry 584.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal584
Ordinal584	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	dword ptr [eax]	; Src
		push	[esp+4+arg_0]	; int
		call	Ordinal573
		retn	8
Ordinal584	endp

; Exported entry 586.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal586
Ordinal586	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	dword ptr [eax]	; Src
		push	[esp+4+arg_0]	; int
		call	Ordinal576
		retn	8
Ordinal586	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18AF4D	proc near		; CODE XREF: sub_6B18AFA9+Ap

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	sub_6B187D45
		mov	ecx, [esp+4+arg_0]
		test	ecx, ecx
		jz	short loc_6B18AF67
		mov	eax, [ecx]
		push	esi
		push	offset dword_6B1AA4DC
		call	dword ptr [eax]

loc_6B18AF67:				; CODE XREF: sub_6B18AF4D+Ej
		mov	eax, [esi]
		pop	esi
		retn	4
sub_6B18AF4D	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18AF6D	proc near		; CODE XREF: sub_6B18AFBE+Ap

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	sub_6B187D45
		mov	ecx, [esp+4+arg_0]
		test	ecx, ecx
		jz	short loc_6B18AF87
		mov	eax, [ecx]
		push	esi
		push	offset dword_6B1AA50C
		call	dword ptr [eax]

loc_6B18AF87:				; CODE XREF: sub_6B18AF6D+Ej
		mov	eax, [esi]
		pop	esi
		retn	4
sub_6B18AF6D	endp

; Exported entry 527.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal527
Ordinal527	proc near		; CODE XREF: Ordinal593+40p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	1
		push	[esp+4+arg_0]
		call	Ordinal535
		retn	4
Ordinal527	endp

; Exported entry 528.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal528
Ordinal528	proc near		; CODE XREF: Ordinal593+6Ep
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	0
		push	[esp+4+arg_0]
		call	Ordinal535
		retn	4
Ordinal528	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18AFA9	proc near		; CODE XREF: Ordinal524+77p
					; Ordinal532+189p ...

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		and	dword ptr [esi], 0
		call	sub_6B18AF4D
		mov	eax, esi
		pop	esi
		retn	4
sub_6B18AFA9	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18AFBE	proc near		; CODE XREF: Ordinal529+39p

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		and	dword ptr [esi], 0
		call	sub_6B18AF6D
		mov	eax, esi
		pop	esi
		retn	4
sub_6B18AFBE	endp

; Exported entry 524.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal524
Ordinal524	proc near		; CODE XREF: Ordinal541+41p
					; DATA XREF: .rdata:off_6B1BF428o

var_34		= byte ptr -34h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 34h
		push	esi
		mov	esi, ecx
		mov	eax, [esi+34h]
		push	edi
		xor	edi, edi
		cmp	eax, 0Eh
		jg	short loc_6B18B025
		jz	short loc_6B18B016
		cmp	eax, edi
		jz	loc_6B18B0C8
		jle	short loc_6B18B034
		cmp	eax, 0Ch
		jle	short loc_6B18B009
		cmp	eax, 0Dh
		jnz	short loc_6B18B034
		mov	eax, [esi+18h]
		mov	edi, [eax-0Ch]
		inc	edi
		jmp	loc_6B18B0C8
; ---------------------------------------------------------------------------

loc_6B18B009:				; CODE XREF: Ordinal524+23j
		push	eax
		mov	ecx, esi
		call	Ordinal534
		jmp	loc_6B18B0C6
; ---------------------------------------------------------------------------

loc_6B18B016:				; CODE XREF: Ordinal524+14j
		mov	eax, [esi+1Ch]
		mov	edi, [eax-0Ch]
		lea	edi, [edi+edi+2]
		jmp	loc_6B18B0C8
; ---------------------------------------------------------------------------

loc_6B18B025:				; CODE XREF: Ordinal524+12j
		sub	eax, 0Fh
		jz	loc_6B18B0BE
		dec	eax
		jz	short loc_6B18B083
		dec	eax
		jz	short loc_6B18B044

loc_6B18B034:				; CODE XREF: Ordinal524+1Ej
					; Ordinal524+28j
		push	offset aCvalueGetsizeS ; "CValue::GetSize() : switch(default)\n"
		call	sub_6B18102E
		pop	ecx
		jmp	loc_6B18B0C8
; ---------------------------------------------------------------------------

loc_6B18B044:				; CODE XREF: Ordinal524+5Fj
		push	dword ptr [esi+30h]
		lea	ecx, [ebp+var_4]
		call	sub_6B18AFA9
		mov	ecx, [ebp+var_4]
		cmp	ecx, edi
		jz	short loc_6B18B079
		lea	edx, [ebp+var_C]
		mov	[ebp+var_C], edi
		mov	[ebp+var_8], edi
		mov	eax, [ecx]
		push	edx
		call	dword ptr [eax+0Ch]
		test	al, al
		jnz	short loc_6B18B076
		push	offset aCvalueGetsizeP ; "CValue::GetSize() : pSerialize->GetSize"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18B079
; ---------------------------------------------------------------------------

loc_6B18B076:				; CODE XREF: Ordinal524+94j
		mov	edi, [ebp+var_C]

loc_6B18B079:				; CODE XREF: Ordinal524+81j
					; Ordinal524+A1j
		lea	ecx, [ebp+var_4]
		call	sub_6B189962
		jmp	short loc_6B18B0C8
; ---------------------------------------------------------------------------

loc_6B18B083:				; CODE XREF: Ordinal524+5Cj
		push	2
		lea	ecx, [ebp+var_34]
		call	Ordinal1028
		add	esi, 8
		push	esi
		lea	ecx, [ebp+var_34]
		call	Ordinal656
		test	eax, eax
		jnz	short loc_6B18B0AA
		push	offset aCvalueGetsizeP ; "CValue::GetSize() : pSerialize->GetSize"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18B0B4
; ---------------------------------------------------------------------------

loc_6B18B0AA:				; CODE XREF: Ordinal524+C8j
		lea	ecx, [ebp+var_34]
		call	Ordinal693
		mov	edi, eax

loc_6B18B0B4:				; CODE XREF: Ordinal524+D5j
		lea	ecx, [ebp+var_34]
		call	Ordinal1029
		jmp	short loc_6B18B0C8
; ---------------------------------------------------------------------------

loc_6B18B0BE:				; CODE XREF: Ordinal524+55j
		lea	ecx, [esi+20h]
		call	Ordinal1052

loc_6B18B0C6:				; CODE XREF: Ordinal524+3Ej
		mov	edi, eax

loc_6B18B0C8:				; CODE XREF: Ordinal524+18j
					; Ordinal524+31j ...
		mov	eax, edi
		pop	edi
		pop	esi
		leave
		retn
Ordinal524	endp

; Exported entry 525.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal525
Ordinal525	proc near		; CODE XREF: Ordinal194+33p
					; Ordinal198+140p ...
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+34h], 10h
		jnz	short loc_6B18B0E1
		lea	eax, [esi+8]
		push	eax		; pvarg
		call	ds:VariantClear

loc_6B18B0E1:				; CODE XREF: Ordinal525+7j
		push	10h		; Size
		lea	eax, [esi+8]
		push	0		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		lea	ecx, [esi+20h]
		call	Ordinal1200
		lea	ecx, [esi+18h]
		call	sub_6B18175E
		lea	ecx, [esi+1Ch]
		call	sub_6B189317
		lea	ecx, [esi+30h]
		call	sub_6B187D45
		and	dword ptr [esi+34h], 0
		mov	byte ptr [esi+38h], 0
		pop	esi
		retn
Ordinal525	endp

; Exported entry 529.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal529
Ordinal529	proc near		; CODE XREF: Ordinal530+14p
					; Ordinal582+4Fp
					; DATA XREF: ...

arg_0		= byte ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		mov	edi, [ebp+arg_4]
		test	edi, edi
		jnz	short loc_6B18B135
		push	offset aCvalueCopyPsou ; "CValue::Copy() : pSource == NULL\n"
		call	sub_6B18102E
		pop	ecx
		xor	al, al
		jmp	short loc_6B18B195
; ---------------------------------------------------------------------------

loc_6B18B135:				; CODE XREF: Ordinal529+9j
		push	ebx
		push	esi		; Args
		mov	esi, [ebp+arg_8]
		mov	ecx, [esi]
		test	ecx, ecx
		jz	short loc_6B18B148
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		and	dword ptr [esi], 0

loc_6B18B148:				; CODE XREF: Ordinal529+23j
		cmp	[ebp+arg_0], 0
		mov	bl, 1
		jz	short loc_6B18B188
		push	edi
		lea	ecx, [ebp+arg_4]
		call	sub_6B18AFBE
		mov	ecx, [ebp+arg_4]
		test	ecx, ecx
		jnz	short loc_6B18B167
		push	offset aCvalueCopyPclo ; "CValue::Copy() : pClone == NULL\n"
		jmp	short loc_6B18B176
; ---------------------------------------------------------------------------

loc_6B18B167:				; CODE XREF: Ordinal529+43j
		mov	eax, [ecx]
		push	esi
		call	dword ptr [eax+10h]
		test	al, al
		jnz	short loc_6B18B17E
		push	offset aCvalueCopyPc_0 ; "CValue::Copy() : pClone->Clone() == FAL"...

loc_6B18B176:				; CODE XREF: Ordinal529+4Aj
		call	sub_6B18102E
		pop	ecx
		xor	bl, bl

loc_6B18B17E:				; CODE XREF: Ordinal529+54j
		lea	ecx, [ebp+arg_4]
		call	sub_6B189962
		jmp	short loc_6B18B191
; ---------------------------------------------------------------------------

loc_6B18B188:				; CODE XREF: Ordinal529+33j
		mov	[esi], edi
		mov	eax, [edi]
		mov	ecx, edi
		call	dword ptr [eax+4]

loc_6B18B191:				; CODE XREF: Ordinal529+6Bj
		pop	esi
		mov	al, bl
		pop	ebx

loc_6B18B195:				; CODE XREF: Ordinal529+18j
		pop	edi
		pop	ebp
		retn
Ordinal529	endp

; Exported entry 530.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal530
Ordinal530	proc near		; CODE XREF: Ordinal190+48p
					; Ordinal531+92p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		lea	esi, [ecx+30h]
		mov	ecx, esi
		call	sub_6B187D45
		push	esi
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	Ordinal529
		add	esp, 0Ch
		pop	esi
		retn	8
Ordinal530	endp

; Exported entry 531.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal531
Ordinal531	proc near		; CODE XREF: Ordinal593+58p
					; Ordinal523+Fp
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	edi
		mov	edi, ecx
		call	Ordinal525
		mov	eax, [esp+8+arg_4]
		mov	byte ptr [edi+38h], 1
		mov	ecx, [eax+34h]
		mov	[edi+34h], ecx
		mov	ecx, [eax+34h]
		cmp	ecx, 0Eh
		mov	bl, 1
		jg	short loc_6B18B22F
		jz	short loc_6B18B220
		test	ecx, ecx
		jz	loc_6B18B29E
		jle	short loc_6B18B23A
		cmp	ecx, 0Ch
		jle	short loc_6B18B212
		cmp	ecx, 0Dh
		jnz	short loc_6B18B23A
		mov	eax, [eax+18h]
		lea	ecx, [edi+18h]
		push	ecx		; int
		push	eax		; Src
		call	Ordinal1519

loc_6B18B1FC:				; CODE XREF: Ordinal531+75j
		test	al, al
		pop	ecx
		pop	ecx
		jnz	loc_6B18B29E
		push	offset aCvalueCopyCstr ; "CValue::Copy() : CStringConvert::Copy()"...

loc_6B18B20B:				; CODE XREF: Ordinal531+87j
		call	sub_6B18102E
		jmp	short loc_6B18B271
; ---------------------------------------------------------------------------

loc_6B18B212:				; CODE XREF: Ordinal531+30j
		push	esi
		add	edi, 8
		lea	esi, [eax+8]
		movsd
		movsd
		movsd
		movsd
		pop	esi
		jmp	short loc_6B18B29E
; ---------------------------------------------------------------------------

loc_6B18B220:				; CODE XREF: Ordinal531+21j
		mov	eax, [eax+1Ch]
		lea	ecx, [edi+1Ch]
		push	ecx		; int
		push	eax		; Src
		call	Ordinal1521
		jmp	short loc_6B18B1FC
; ---------------------------------------------------------------------------

loc_6B18B22F:				; CODE XREF: Ordinal531+1Fj
		sub	ecx, 0Fh
		jz	short loc_6B18B276
		dec	ecx
		jz	short loc_6B18B253
		dec	ecx
		jz	short loc_6B18B241

loc_6B18B23A:				; CODE XREF: Ordinal531+2Bj
					; Ordinal531+35j
		push	offset aCvalueCopySwit ; "CValue::Copy() : switch(default)\n"
		jmp	short loc_6B18B20B
; ---------------------------------------------------------------------------

loc_6B18B241:				; CODE XREF: Ordinal531+80j
		push	dword ptr [eax+30h]
		mov	ecx, edi
		push	[esp+0Ch+arg_0]
		call	Ordinal530
		mov	bl, al
		jmp	short loc_6B18B293
; ---------------------------------------------------------------------------

loc_6B18B253:				; CODE XREF: Ordinal531+7Dj
		add	eax, 8
		push	eax		; pvargSrc
		lea	eax, [edi+8]
		push	eax		; pvarDest
		call	ds:VariantCopyInd
		test	eax, eax
		jge	short loc_6B18B29E
		push	eax		; Args
		push	offset aCvalueCopyVari ; "CValue::Copy() : VariantCopyInd() != S_"...
		call	sub_6B18102E
		pop	ecx

loc_6B18B271:				; CODE XREF: Ordinal531+58j
		pop	ecx
		xor	bl, bl
		jmp	short loc_6B18B297
; ---------------------------------------------------------------------------

loc_6B18B276:				; CODE XREF: Ordinal531+7Aj
		add	eax, 20h
		push	eax
		lea	ecx, [edi+20h]
		call	Ordinal1201
		test	eax, eax
		jnz	short loc_6B18B29E
		push	offset aCvalueCopyM_me ; "CValue::Copy() : m_Memory.Copy() == FAL"...
		call	sub_6B18102E
		pop	ecx
		xor	bl, bl

loc_6B18B293:				; CODE XREF: Ordinal531+99j
		test	bl, bl
		jnz	short loc_6B18B29E

loc_6B18B297:				; CODE XREF: Ordinal531+BCj
		mov	ecx, edi
		call	Ordinal525

loc_6B18B29E:				; CODE XREF: Ordinal531+25j
					; Ordinal531+48j ...
		pop	edi
		mov	al, bl
		pop	ebx
		retn	8
Ordinal531	endp

; Exported entry 532.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal532
Ordinal532	proc near		; CODE XREF: Ordinal191+1C0p
					; Ordinal305+B2p
					; DATA XREF: ...

var_16		= byte ptr -16h
var_15		= byte ptr -15h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ___security_cookie
		push	ebx
		mov	ebx, [ebp+arg_4]
		mov	[ebp+var_4], eax
		push	esi
		lea	eax, [ebp+var_16]
		mov	esi, ecx
		push	eax
		mov	ecx, ebx
		mov	[ebp+var_15], 0
		mov	[ebp+var_16], 0
		call	Ordinal620
		test	eax, eax
		jnz	short loc_6B18B2E1
		push	offset aCvalueLoadArch ; "CValue::Load() : Archive.Read() == FALS"...
		call	sub_6B18102E
		pop	ecx
		jmp	loc_6B18B4C3
; ---------------------------------------------------------------------------

loc_6B18B2E1:				; CODE XREF: Ordinal532+2Aj
		movzx	eax, [ebp+var_16]
		push	edi		; Args
		xor	edi, edi
		cmp	eax, 11h	; switch 18 cases
		mov	[esi+34h], eax
		ja	loc_6B18B4E1	; jumptable 6B18B2F4 default case
		jmp	ds:off_6B18B4FD[eax*4] ; switch	jump

loc_6B18B2FB:				; DATA XREF: .text:off_6B18B4FDo
		add	esi, 8		; jumptable 6B18B2F4 case 1
		push	esi
		mov	ecx, ebx
		call	Ordinal616
		jmp	loc_6B18B3DB
; ---------------------------------------------------------------------------

loc_6B18B30B:				; CODE XREF: Ordinal532+4Fj
					; DATA XREF: .text:off_6B18B4FDo
		add	esi, 8		; jumptable 6B18B2F4 case 2
		push	esi
		mov	ecx, ebx
		call	Ordinal618
		jmp	loc_6B18B3DB
; ---------------------------------------------------------------------------

loc_6B18B31B:				; CODE XREF: Ordinal532+4Fj
					; DATA XREF: .text:off_6B18B4FDo
		add	esi, 8		; jumptable 6B18B2F4 case 3
		push	esi
		mov	ecx, ebx
		call	Ordinal620
		jmp	loc_6B18B3DB
; ---------------------------------------------------------------------------

loc_6B18B32B:				; CODE XREF: Ordinal532+4Fj
					; DATA XREF: .text:off_6B18B4FDo
		add	esi, 8		; jumptable 6B18B2F4 case 4
		push	esi
		mov	ecx, ebx
		call	Ordinal622
		jmp	loc_6B18B3DB
; ---------------------------------------------------------------------------

loc_6B18B33B:				; CODE XREF: Ordinal532+4Fj
					; DATA XREF: .text:off_6B18B4FDo
		add	esi, 8		; jumptable 6B18B2F4 case 5
		push	esi
		mov	ecx, ebx
		call	Ordinal624
		jmp	loc_6B18B3DB
; ---------------------------------------------------------------------------

loc_6B18B34B:				; CODE XREF: Ordinal532+4Fj
					; DATA XREF: .text:off_6B18B4FDo
		add	esi, 8		; jumptable 6B18B2F4 case 6
		push	esi
		mov	ecx, ebx
		call	Ordinal626
		jmp	loc_6B18B3DB
; ---------------------------------------------------------------------------

loc_6B18B35B:				; CODE XREF: Ordinal532+4Fj
					; DATA XREF: .text:off_6B18B4FDo
		add	esi, 8		; jumptable 6B18B2F4 case 7
		push	esi
		mov	ecx, ebx
		call	Ordinal628
		jmp	short loc_6B18B3DB
; ---------------------------------------------------------------------------

loc_6B18B368:				; CODE XREF: Ordinal532+4Fj
					; DATA XREF: .text:off_6B18B4FDo
		add	esi, 8		; jumptable 6B18B2F4 case 8
		push	esi
		mov	ecx, ebx
		call	Ordinal630
		jmp	short loc_6B18B3DB
; ---------------------------------------------------------------------------

loc_6B18B375:				; CODE XREF: Ordinal532+4Fj
					; DATA XREF: .text:off_6B18B4FDo
		add	esi, 8		; jumptable 6B18B2F4 case 9
		push	esi
		mov	ecx, ebx
		call	Ordinal632
		jmp	short loc_6B18B3DB
; ---------------------------------------------------------------------------

loc_6B18B382:				; CODE XREF: Ordinal532+4Fj
					; DATA XREF: .text:off_6B18B4FDo
		add	esi, 8		; jumptable 6B18B2F4 case 10
		push	esi
		mov	ecx, ebx
		call	Ordinal634
		jmp	short loc_6B18B3DB
; ---------------------------------------------------------------------------

loc_6B18B38F:				; CODE XREF: Ordinal532+4Fj
					; DATA XREF: .text:off_6B18B4FDo
		add	esi, 8		; jumptable 6B18B2F4 case 11
		push	esi
		mov	ecx, ebx
		call	Ordinal636
		jmp	short loc_6B18B3DB
; ---------------------------------------------------------------------------

loc_6B18B39C:				; CODE XREF: Ordinal532+4Fj
					; DATA XREF: .text:off_6B18B4FDo
		add	esi, 8		; jumptable 6B18B2F4 case 12
		push	esi
		mov	ecx, ebx
		call	Ordinal638
		jmp	short loc_6B18B3DB
; ---------------------------------------------------------------------------

loc_6B18B3A9:				; CODE XREF: Ordinal532+4Fj
					; DATA XREF: .text:off_6B18B4FDo
		add	esi, 18h	; jumptable 6B18B2F4 case 13
		push	esi
		mov	ecx, ebx
		call	Ordinal642
		jmp	short loc_6B18B3DB
; ---------------------------------------------------------------------------

loc_6B18B3B6:				; CODE XREF: Ordinal532+4Fj
					; DATA XREF: .text:off_6B18B4FDo
		add	esi, 1Ch	; jumptable 6B18B2F4 case 14
		push	esi
		mov	ecx, ebx
		call	Ordinal647
		jmp	short loc_6B18B3DB
; ---------------------------------------------------------------------------

loc_6B18B3C3:				; CODE XREF: Ordinal532+4Fj
					; DATA XREF: .text:off_6B18B4FDo
		add	esi, 20h	; jumptable 6B18B2F4 case 15
		push	esi		; Args
		mov	ecx, ebx
		call	Ordinal652
		jmp	short loc_6B18B3DB
; ---------------------------------------------------------------------------

loc_6B18B3D0:				; CODE XREF: Ordinal532+4Fj
					; DATA XREF: .text:off_6B18B4FDo
		add	esi, 8		; jumptable 6B18B2F4 case 16
		push	esi
		mov	ecx, ebx
		call	Ordinal655

loc_6B18B3DB:				; CODE XREF: Ordinal532+61j
					; Ordinal532+71j ...
		mov	edi, eax
		jmp	loc_6B18B4EC
; ---------------------------------------------------------------------------

loc_6B18B3E2:				; CODE XREF: Ordinal532+4Fj
					; DATA XREF: .text:off_6B18B4FDo
		mov	[ebp+var_14], edi ; jumptable 6B18B2F4 case 17
		xor	eax, eax
		lea	edi, [ebp+var_10]
		stosd
		stosd
		stosd
		push	10h
		lea	eax, [ebp+var_14]
		push	eax
		mov	ecx, ebx
		call	Ordinal650
		test	eax, eax
		jnz	short loc_6B18B408
		push	offset aCvalueLoadArch ; "CValue::Load() : Archive.Read() == FALS"...
		jmp	loc_6B18B4D9
; ---------------------------------------------------------------------------

loc_6B18B408:				; CODE XREF: Ordinal532+157j
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx]
		add	esi, 30h
		push	esi
		lea	edx, [ebp+var_14]
		push	edx
		call	dword ptr [eax+0Ch]
		test	al, al
		jz	loc_6B18B4D4
		mov	esi, [esi]
		test	esi, esi
		jz	loc_6B18B4D4
		push	esi
		lea	ecx, [ebp+arg_4]
		call	sub_6B18AFA9
		cmp	[ebp+arg_4], 0
		jnz	short loc_6B18B446
		push	offset aCvalueLoadPser ; "CValue::Load() : pSerialize == NULL\n"
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18B4A4
; ---------------------------------------------------------------------------

loc_6B18B446:				; CODE XREF: Ordinal532+192j
		and	[ebp+arg_0], 0
		call	Ordinal430
		lea	ecx, [ebp+arg_0]
		mov	esi, eax
		call	sub_6B18AE04
		test	esi, esi
		mov	[ebp+arg_0], esi
		jnz	short loc_6B18B467
		push	offset aCvalueLoadPmem ; "CValue::Load() : pMemoryStream == NULL\n"...
		jmp	short loc_6B18B496
; ---------------------------------------------------------------------------

loc_6B18B467:				; CODE XREF: Ordinal532+1B9j
		mov	ecx, esi
		call	Ordinal429
		push	eax		; Args
		mov	ecx, ebx
		call	Ordinal652
		test	eax, eax
		jnz	short loc_6B18B481
		push	offset aCvalueLoadArch ; "CValue::Load() : Archive.Read() == FALS"...
		jmp	short loc_6B18B496
; ---------------------------------------------------------------------------

loc_6B18B481:				; CODE XREF: Ordinal532+1D3j
		mov	ecx, [ebp+arg_4]
		mov	eax, [ecx]
		add	esi, 8
		push	esi
		call	dword ptr [eax+14h]
		test	al, al
		jnz	short loc_6B18B4AE
		push	offset aCvalueLoadPs_0 ; "CValue::Load() : pSerialize->Load() == "...

loc_6B18B496:				; CODE XREF: Ordinal532+1C0j
					; Ordinal532+1DAj
		call	sub_6B18102E
		pop	ecx
		lea	ecx, [ebp+arg_0]
		call	sub_6B18AE04

loc_6B18B4A4:				; CODE XREF: Ordinal532+19Fj
		lea	ecx, [ebp+arg_4]
		call	sub_6B189962
		jmp	short loc_6B18B4F0
; ---------------------------------------------------------------------------

loc_6B18B4AE:				; CODE XREF: Ordinal532+1EAj
		lea	ecx, [ebp+arg_0]
		call	sub_6B18AE04
		lea	ecx, [ebp+arg_4]
		call	sub_6B189962

loc_6B18B4BE:				; CODE XREF: Ordinal532+4Fj
					; Ordinal532+249j
					; DATA XREF: ...
		mov	[ebp+var_15], 1	; jumptable 6B18B2F4 case 0

loc_6B18B4C2:				; CODE XREF: Ordinal532+256j
		pop	edi

loc_6B18B4C3:				; CODE XREF: Ordinal532+37j
		mov	ecx, [ebp+var_4]
		mov	al, [ebp+var_15]
		pop	esi
		pop	ebx
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn	8
; ---------------------------------------------------------------------------

loc_6B18B4D4:				; CODE XREF: Ordinal532+175j
					; Ordinal532+17Fj
		push	offset aCvalueLoadCrea ; "CValue::Load() : CreateInterface() ==	f"...

loc_6B18B4D9:				; CODE XREF: Ordinal532+15Ej
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18B4F0
; ---------------------------------------------------------------------------

loc_6B18B4E1:				; CODE XREF: Ordinal532+49j
		push	offset aCvalueLoadSwit ; jumptable 6B18B2F4 default case
		call	sub_6B18102E
		pop	ecx

loc_6B18B4EC:				; CODE XREF: Ordinal532+138j
		test	edi, edi
		jnz	short loc_6B18B4BE ; jumptable 6B18B2F4	case 0

loc_6B18B4F0:				; CODE XREF: Ordinal532+207j
					; Ordinal532+23Aj
		push	offset aCvalueLoadBarc ; "CValue::Load() : bArchive == FALSE\n"
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18B4C2
Ordinal532	endp

; ---------------------------------------------------------------------------
off_6B18B4FD	dd offset loc_6B18B4BE	; DATA XREF: Ordinal532+4Fr
		dd offset loc_6B18B2FB	; jump table for switch	statement
		dd offset loc_6B18B30B
		dd offset loc_6B18B31B
		dd offset loc_6B18B32B
		dd offset loc_6B18B33B
		dd offset loc_6B18B34B
		dd offset loc_6B18B35B
		dd offset loc_6B18B368
		dd offset loc_6B18B375
		dd offset loc_6B18B382
		dd offset loc_6B18B38F
		dd offset loc_6B18B39C
		dd offset loc_6B18B3A9
		dd offset loc_6B18B3B6
		dd offset loc_6B18B3C3
		dd offset loc_6B18B3D0
		dd offset loc_6B18B3E2
; Exported entry 533.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal533
Ordinal533	proc near		; CODE XREF: Ordinal192+85p
					; Ordinal306+7Fp
					; DATA XREF: ...

var_74		= qword	ptr -74h
var_60		= byte ptr -60h
var_58		= byte ptr -58h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_15		= byte ptr -15h
var_14		= dword	ptr -14h
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 60h
		mov	eax, ___security_cookie
		push	ebx
		mov	ebx, [ebp+arg_0]
		push	esi
		mov	[ebp+var_4], eax
		mov	esi, ecx
		xor	eax, eax
		mov	al, [esi+34h]
		mov	ecx, ebx
		mov	[ebp+var_15], 0
		push	eax
		call	Ordinal621
		test	eax, eax
		jnz	short loc_6B18B57F
		push	offset aCvalueSaveArch ; "CValue::Save() : Archive.Write() == FAL"...
		call	sub_6B18102E
		pop	ecx
		jmp	loc_6B18B767
; ---------------------------------------------------------------------------

loc_6B18B57F:				; CODE XREF: Ordinal533+28j
		mov	eax, [esi+34h]
		push	edi		; Args
		xor	edi, edi
		cmp	eax, 11h	; switch 18 cases
		ja	loc_6B18B795	; jumptable 6B18B58E default case
		jmp	ds:off_6B18B7B5[eax*4] ; switch	jump

loc_6B18B595:				; DATA XREF: .text:off_6B18B7B5o
		xor	eax, eax	; jumptable 6B18B58E case 1
		mov	al, [esi+8]
		mov	ecx, ebx
		push	eax
		call	Ordinal617
		jmp	loc_6B18B687
; ---------------------------------------------------------------------------

loc_6B18B5A7:				; CODE XREF: Ordinal533+49j
					; DATA XREF: .text:off_6B18B7B5o
		xor	eax, eax	; jumptable 6B18B58E case 2
		mov	al, [esi+8]
		mov	ecx, ebx
		push	eax
		call	Ordinal619
		jmp	loc_6B18B687
; ---------------------------------------------------------------------------

loc_6B18B5B9:				; CODE XREF: Ordinal533+49j
					; DATA XREF: .text:off_6B18B7B5o
		xor	eax, eax	; jumptable 6B18B58E case 3
		mov	al, [esi+8]
		mov	ecx, ebx
		push	eax
		call	Ordinal621
		jmp	loc_6B18B687
; ---------------------------------------------------------------------------

loc_6B18B5CB:				; CODE XREF: Ordinal533+49j
					; DATA XREF: .text:off_6B18B7B5o
		xor	eax, eax	; jumptable 6B18B58E case 4
		mov	ax, [esi+8]
		mov	ecx, ebx
		push	eax
		call	Ordinal623
		jmp	loc_6B18B687
; ---------------------------------------------------------------------------

loc_6B18B5DE:				; CODE XREF: Ordinal533+49j
					; DATA XREF: .text:off_6B18B7B5o
		xor	eax, eax	; jumptable 6B18B58E case 5
		mov	ax, [esi+8]
		mov	ecx, ebx
		push	eax
		call	Ordinal625
		jmp	loc_6B18B687
; ---------------------------------------------------------------------------

loc_6B18B5F1:				; CODE XREF: Ordinal533+49j
					; DATA XREF: .text:off_6B18B7B5o
		push	dword ptr [esi+8] ; jumptable 6B18B58E case 6
		mov	ecx, ebx
		call	Ordinal627
		jmp	loc_6B18B687
; ---------------------------------------------------------------------------

loc_6B18B600:				; CODE XREF: Ordinal533+49j
					; DATA XREF: .text:off_6B18B7B5o
		push	dword ptr [esi+8] ; jumptable 6B18B58E case 7
		mov	ecx, ebx
		call	Ordinal629
		jmp	short loc_6B18B687
; ---------------------------------------------------------------------------

loc_6B18B60C:				; CODE XREF: Ordinal533+49j
					; DATA XREF: .text:off_6B18B7B5o
		push	dword ptr [esi+0Ch] ; jumptable	6B18B58E case 8
		mov	ecx, ebx
		push	dword ptr [esi+8]
		call	Ordinal631
		jmp	short loc_6B18B687
; ---------------------------------------------------------------------------

loc_6B18B61B:				; CODE XREF: Ordinal533+49j
					; DATA XREF: .text:off_6B18B7B5o
		push	dword ptr [esi+0Ch] ; jumptable	6B18B58E case 9
		mov	ecx, ebx
		push	dword ptr [esi+8]
		call	Ordinal633
		jmp	short loc_6B18B687
; ---------------------------------------------------------------------------

loc_6B18B62A:				; CODE XREF: Ordinal533+49j
					; DATA XREF: .text:off_6B18B7B5o
		fld	qword ptr [esi+8] ; jumptable 6B18B58E case 10
		push	ecx
		push	ecx
		mov	ecx, ebx
		fstp	[esp+74h+var_74]
		call	Ordinal635
		jmp	short loc_6B18B687
; ---------------------------------------------------------------------------

loc_6B18B63B:				; CODE XREF: Ordinal533+49j
					; DATA XREF: .text:off_6B18B7B5o
		add	esi, 8		; jumptable 6B18B58E case 11
		push	esi
		mov	ecx, ebx
		call	Ordinal637
		jmp	short loc_6B18B687
; ---------------------------------------------------------------------------

loc_6B18B648:				; CODE XREF: Ordinal533+49j
					; DATA XREF: .text:off_6B18B7B5o
		add	esi, 8		; jumptable 6B18B58E case 12
		push	esi
		mov	ecx, ebx
		call	Ordinal639
		jmp	short loc_6B18B687
; ---------------------------------------------------------------------------

loc_6B18B655:				; CODE XREF: Ordinal533+49j
					; DATA XREF: .text:off_6B18B7B5o
		add	esi, 18h	; jumptable 6B18B58E case 13
		push	esi
		mov	ecx, ebx
		call	Ordinal644
		jmp	short loc_6B18B687
; ---------------------------------------------------------------------------

loc_6B18B662:				; CODE XREF: Ordinal533+49j
					; DATA XREF: .text:off_6B18B7B5o
		add	esi, 1Ch	; jumptable 6B18B58E case 14
		push	esi
		mov	ecx, ebx
		call	Ordinal649
		jmp	short loc_6B18B687
; ---------------------------------------------------------------------------

loc_6B18B66F:				; CODE XREF: Ordinal533+49j
					; DATA XREF: .text:off_6B18B7B5o
		add	esi, 20h	; jumptable 6B18B58E case 15
		push	esi
		mov	ecx, ebx
		call	Ordinal654
		jmp	short loc_6B18B687
; ---------------------------------------------------------------------------

loc_6B18B67C:				; CODE XREF: Ordinal533+49j
					; DATA XREF: .text:off_6B18B7B5o
		add	esi, 8		; jumptable 6B18B58E case 16
		push	esi
		mov	ecx, ebx
		call	Ordinal656

loc_6B18B687:				; CODE XREF: Ordinal533+5Dj
					; Ordinal533+6Fj ...
		mov	edi, eax
		jmp	loc_6B18B7A0
; ---------------------------------------------------------------------------

loc_6B18B68E:				; CODE XREF: Ordinal533+49j
					; DATA XREF: .text:off_6B18B7B5o
		push	dword ptr [esi+30h] ; jumptable	6B18B58E case 17
		lea	ecx, [ebp+arg_0]
		call	sub_6B18AFA9
		mov	ecx, [ebp+arg_0]
		xor	esi, esi
		cmp	ecx, esi
		jnz	short loc_6B18B6B2
		push	offset aCvalueSavePser ; "CValue::Save() : pSerialize == NULL\n"

loc_6B18B6A7:				; CODE XREF: Ordinal533+185j
		call	sub_6B18102E
		pop	ecx
		jmp	loc_6B18B78B
; ---------------------------------------------------------------------------

loc_6B18B6B2:				; CODE XREF: Ordinal533+15Bj
		lea	edx, [ebp+var_20]
		mov	[ebp+var_20], esi
		mov	[ebp+var_1C], esi
		mov	eax, [ecx]
		push	edx
		call	dword ptr [eax+0Ch]
		test	al, al
		jnz	short loc_6B18B6CC
		push	offset aCvaluecolle_26 ; "CValueCollection::Save() : pSerialize->"...
		jmp	short loc_6B18B6A7
; ---------------------------------------------------------------------------

loc_6B18B6CC:				; CODE XREF: Ordinal533+17Ej
		lea	ecx, [ebp+var_60]
		call	sub_6B18A371
		push	[ebp+var_20]
		lea	ecx, [ebp+var_60]
		call	Ordinal429
		mov	ecx, eax
		call	Ordinal1196
		test	eax, eax
		jnz	short loc_6B18B6F4
		push	offset aCvaluecolle_27 ; "CValueCollection::Save() : mem.NewAlloc"...
		jmp	loc_6B18B77D
; ---------------------------------------------------------------------------

loc_6B18B6F4:				; CODE XREF: Ordinal533+1A3j
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx]
		lea	edx, [ebp+var_58]
		push	edx
		call	dword ptr [eax+10h]
		test	al, al
		jnz	short loc_6B18B70B
		push	offset aCvaluecolle_28 ; "CValueCollection::Save() : pSerialize->"...
		jmp	short loc_6B18B77D
; ---------------------------------------------------------------------------

loc_6B18B70B:				; CODE XREF: Ordinal533+1BDj
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_14], esi
		xor	eax, eax
		lea	edi, [ebp+var_10]
		stosd
		stosd
		lea	edx, [ebp+var_14]
		stosd
		mov	eax, [ecx]
		push	edx
		call	dword ptr [eax+20h]
		test	al, al
		jnz	short loc_6B18B72D
		push	offset aCvaluecolle_29 ; "CValueCollection::Save() : pSerialize->"...
		jmp	short loc_6B18B77D
; ---------------------------------------------------------------------------

loc_6B18B72D:				; CODE XREF: Ordinal533+1DFj
		push	10h
		lea	eax, [ebp+var_14]
		push	eax
		mov	ecx, ebx
		call	Ordinal653
		test	eax, eax
		jz	short loc_6B18B778
		lea	ecx, [ebp+var_60]
		call	Ordinal429
		push	eax
		mov	ecx, ebx
		call	Ordinal654
		test	eax, eax
		jz	short loc_6B18B778
		lea	ecx, [ebp+var_60]
		call	j_Ordinal418
		lea	ecx, [ebp+arg_0]
		call	sub_6B189962

loc_6B18B762:				; CODE XREF: Ordinal533+49j
					; Ordinal533+25Dj
					; DATA XREF: ...
		mov	[ebp+var_15], 1	; jumptable 6B18B58E case 0

loc_6B18B766:				; CODE XREF: Ordinal533+26Ej
		pop	edi

loc_6B18B767:				; CODE XREF: Ordinal533+35j
		mov	ecx, [ebp+var_4]
		mov	al, [ebp+var_15]
		pop	esi
		pop	ebx
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn	4
; ---------------------------------------------------------------------------

loc_6B18B778:				; CODE XREF: Ordinal533+1F7j
					; Ordinal533+20Bj
		push	offset aCvaluecolle_23 ; "CValueCollection::Save() : Archive.Writ"...

loc_6B18B77D:				; CODE XREF: Ordinal533+1AAj
					; Ordinal533+1C4j ...
		call	sub_6B18102E
		pop	ecx
		lea	ecx, [ebp+var_60]
		call	j_Ordinal418

loc_6B18B78B:				; CODE XREF: Ordinal533+168j
		lea	ecx, [ebp+arg_0]
		call	sub_6B189962
		jmp	short loc_6B18B7A4
; ---------------------------------------------------------------------------

loc_6B18B795:				; CODE XREF: Ordinal533+43j
		push	offset aCvaluecolle_30 ; jumptable 6B18B58E default case
		call	sub_6B18102E
		pop	ecx

loc_6B18B7A0:				; CODE XREF: Ordinal533+144j
		test	edi, edi
		jnz	short loc_6B18B762 ; jumptable 6B18B58E	case 0

loc_6B18B7A4:				; CODE XREF: Ordinal533+24Ej
		push	offset aCvaluecolle_31 ; "CValueCollection::Save() : bArchive == "...
		call	sub_6B18102E
		pop	ecx
		mov	[ebp+var_15], 0
		jmp	short loc_6B18B766
Ordinal533	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
off_6B18B7B5	dd offset loc_6B18B762	; DATA XREF: Ordinal533+49r
		dd offset loc_6B18B595	; jump table for switch	statement
		dd offset loc_6B18B5A7
		dd offset loc_6B18B5B9
		dd offset loc_6B18B5CB
		dd offset loc_6B18B5DE
		dd offset loc_6B18B5F1
		dd offset loc_6B18B600
		dd offset loc_6B18B60C
		dd offset loc_6B18B61B
		dd offset loc_6B18B62A
		dd offset loc_6B18B63B
		dd offset loc_6B18B648
		dd offset loc_6B18B655
		dd offset loc_6B18B662
		dd offset loc_6B18B66F
		dd offset loc_6B18B67C
		dd offset loc_6B18B68E
; Exported entry 541.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal541
Ordinal541	proc near		; CODE XREF: Ordinal204+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		push	edi
		mov	esi, ecx
		xor	edi, edi
		push	edi
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		mov	eax, [esi]
		push	edi
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], edi
		call	dword ptr [eax+10h]
		test	al, al
		jnz	short loc_6B18B83B
		push	offset aCvaluecolle_32 ; "CValueCollection::GetSize() :	GetReadVa"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18B845
; ---------------------------------------------------------------------------

loc_6B18B83B:				; CODE XREF: Ordinal541+2Fj
		mov	ecx, [ebp+var_4]
		call	Ordinal524
		mov	edi, eax

loc_6B18B845:				; CODE XREF: Ordinal541+3Cj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		mov	eax, edi
		pop	edi
		pop	esi
		leave
		retn	4
Ordinal541	endp

; Exported entry 583.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal583
Ordinal583	proc near		; CODE XREF: Ordinal356+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		mov	eax, [esi]
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+14h]
		test	al, al
		jnz	short loc_6B18B892
		push	offset aCvaluecolle_33 ; "CValueCollection::SetValue(ISymBase) : "...

loc_6B18B88A:				; CODE XREF: Ordinal583+57j
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18B8BA
; ---------------------------------------------------------------------------

loc_6B18B892:				; CODE XREF: Ordinal583+2Ej
		push	[ebp+arg_4]
		mov	ecx, [ebp+var_4]
		xor	eax, eax
		mov	al, [esi+29h]
		push	eax
		call	Ordinal530
		test	al, al
		jnz	short loc_6B18B8AE
		push	offset aCvaluecolle_34 ; "CValueCollection::SetValue(ISymBase) : "...
		jmp	short loc_6B18B88A
; ---------------------------------------------------------------------------

loc_6B18B8AE:				; CODE XREF: Ordinal583+50j
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax+34h], 11h
		mov	bl, 1

loc_6B18B8BA:				; CODE XREF: Ordinal583+3Bj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal583	endp

; Exported entry 593.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal593
Ordinal593	proc near		; CODE XREF: Ordinal547+2Bp
					; Ordinal549+29p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_8]
		push	edi
		xor	ebx, ebx
		push	ebx
		push	esi
		push	[esp+14h+arg_0]
		mov	edi, ecx
		mov	[esi], ebx
		mov	eax, [edi]
		call	dword ptr [eax+10h]
		test	al, al
		jnz	short loc_6B18B8F2
		push	offset aCvaluecolle_35 ; "CValueCollection::GetReadValue() : GetR"...
		call	sub_6B18102E
		jmp	short loc_6B18B94D
; ---------------------------------------------------------------------------

loc_6B18B8F2:				; CODE XREF: Ordinal593+1Aj
		mov	ecx, [esi]
		mov	eax, [esp+0Ch+arg_4]
		cmp	[ecx+34h], eax
		jz	short loc_6B18B954
		cmp	[edi+28h], bl
		jnz	short loc_6B18B909
		push	offset aCvaluecolle_36 ; "CValueCollection::GetReadValue() : m_bA"...
		jmp	short loc_6B18B946
; ---------------------------------------------------------------------------

loc_6B18B909:				; CODE XREF: Ordinal593+36j
		push	eax
		call	Ordinal527
		test	al, al
		jnz	short loc_6B18B91A
		push	offset aCvaluecolle_37 ; "CValueCollection::GetReadValue() : pVal"...
		jmp	short loc_6B18B946
; ---------------------------------------------------------------------------

loc_6B18B91A:				; CODE XREF: Ordinal593+47j
		push	dword ptr [esi]
		add	edi, 30h
		push	ebx
		mov	ecx, edi
		call	Ordinal531
		test	al, al
		jnz	short loc_6B18B932
		push	offset aCvaluecolle_38 ; "CValueCollection::GetReadValue() : m_Au"...
		jmp	short loc_6B18B946
; ---------------------------------------------------------------------------

loc_6B18B932:				; CODE XREF: Ordinal593+5Fj
		push	[esp+0Ch+arg_4]
		mov	ecx, edi
		call	Ordinal528
		test	al, al
		jnz	short loc_6B18B952
		push	offset aCvaluecolle_39 ; "CValueCollection::GetReadValue() : m_Au"...

loc_6B18B946:				; CODE XREF: Ordinal593+3Dj
					; Ordinal593+4Ej ...
		call	sub_6B18102E
		mov	[esi], ebx

loc_6B18B94D:				; CODE XREF: Ordinal593+26j
		pop	ecx
		xor	al, al
		jmp	short loc_6B18B956
; ---------------------------------------------------------------------------

loc_6B18B952:				; CODE XREF: Ordinal593+75j
		mov	[esi], edi

loc_6B18B954:				; CODE XREF: Ordinal593+31j
		mov	al, 1

loc_6B18B956:				; CODE XREF: Ordinal593+86j
		pop	edi
		pop	esi
		pop	ebx
		retn	0Ch
Ordinal593	endp

; Exported entry 594.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal594
Ordinal594	proc near		; CODE XREF: Ordinal275+1ACp
					; Ordinal369+DFp
					; DATA XREF: ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_C]
		push	ebx
		push	esi
		mov	esi, [ebp+arg_10]
		xor	bl, bl
		cmp	eax, 11h	; switch 18 cases
		push	edi
		mov	edi, ecx
		mov	[esi+34h], eax
		ja	loc_6B18BAF8	; jumptable 6B18B978 default case
		jmp	ds:off_6B18BB2A[eax*4] ; switch	jump

loc_6B18B97F:				; DATA XREF: .text:off_6B18BB2Ao
		mov	ecx, [ebp+arg_0] ; jumptable 6B18B978 case 1
		mov	eax, [ecx]
		lea	edx, [esi+8]
		push	edx
		push	[ebp+arg_4]
		call	dword ptr [eax+80h]
		jmp	loc_6B18BAAB
; ---------------------------------------------------------------------------

loc_6B18B996:				; CODE XREF: Ordinal594+1Cj
					; DATA XREF: .text:off_6B18BB2Ao
		mov	ecx, [ebp+arg_0] ; jumptable 6B18B978 case 2
		mov	eax, [ecx]
		lea	edx, [esi+8]
		push	edx
		push	[ebp+arg_4]
		call	dword ptr [eax+7Ch]
		jmp	loc_6B18BAAB
; ---------------------------------------------------------------------------

loc_6B18B9AA:				; CODE XREF: Ordinal594+1Cj
					; DATA XREF: .text:off_6B18BB2Ao
		mov	ecx, [ebp+arg_0] ; jumptable 6B18B978 case 3
		mov	eax, [ecx]
		lea	edx, [esi+8]
		push	edx
		push	[ebp+arg_4]
		call	dword ptr [eax+78h]
		jmp	loc_6B18BAAB
; ---------------------------------------------------------------------------

loc_6B18B9BE:				; CODE XREF: Ordinal594+1Cj
					; DATA XREF: .text:off_6B18BB2Ao
		mov	ecx, [ebp+arg_0] ; jumptable 6B18B978 case 4
		mov	eax, [ecx]
		lea	edx, [esi+8]
		push	edx
		push	[ebp+arg_4]
		call	dword ptr [eax+74h]
		jmp	loc_6B18BAAB
; ---------------------------------------------------------------------------

loc_6B18B9D2:				; CODE XREF: Ordinal594+1Cj
					; DATA XREF: .text:off_6B18BB2Ao
		mov	ecx, [ebp+arg_0] ; jumptable 6B18B978 case 5
		mov	eax, [ecx]
		lea	edx, [esi+8]
		push	edx
		push	[ebp+arg_4]
		call	dword ptr [eax+70h]
		jmp	loc_6B18BAAB
; ---------------------------------------------------------------------------

loc_6B18B9E6:				; CODE XREF: Ordinal594+1Cj
					; DATA XREF: .text:off_6B18BB2Ao
		mov	ecx, [ebp+arg_0] ; jumptable 6B18B978 case 6
		mov	eax, [ecx]
		lea	edx, [esi+8]
		push	edx
		push	[ebp+arg_4]
		call	dword ptr [eax+6Ch]
		jmp	loc_6B18BAAB
; ---------------------------------------------------------------------------

loc_6B18B9FA:				; CODE XREF: Ordinal594+1Cj
					; DATA XREF: .text:off_6B18BB2Ao
		mov	ecx, [ebp+arg_0] ; jumptable 6B18B978 case 7
		mov	eax, [ecx]
		lea	edx, [esi+8]
		push	edx
		push	[ebp+arg_4]
		call	dword ptr [eax+68h]
		jmp	loc_6B18BAAB
; ---------------------------------------------------------------------------

loc_6B18BA0E:				; CODE XREF: Ordinal594+1Cj
					; DATA XREF: .text:off_6B18BB2Ao
		mov	ecx, [ebp+arg_0] ; jumptable 6B18B978 case 8
		mov	eax, [ecx]
		lea	edx, [esi+8]
		push	edx
		push	[ebp+arg_4]
		call	dword ptr [eax+64h]
		jmp	loc_6B18BAAB
; ---------------------------------------------------------------------------

loc_6B18BA22:				; CODE XREF: Ordinal594+1Cj
					; DATA XREF: .text:off_6B18BB2Ao
		mov	ecx, [ebp+arg_0] ; jumptable 6B18B978 case 9
		mov	eax, [ecx]
		lea	edx, [esi+8]
		push	edx
		push	[ebp+arg_4]
		call	dword ptr [eax+60h]
		jmp	short loc_6B18BAAB
; ---------------------------------------------------------------------------

loc_6B18BA33:				; CODE XREF: Ordinal594+1Cj
					; DATA XREF: .text:off_6B18BB2Ao
		mov	ecx, [ebp+arg_0] ; jumptable 6B18B978 case 10
		mov	eax, [ecx]
		lea	edx, [esi+8]
		push	edx
		push	[ebp+arg_4]
		call	dword ptr [eax+5Ch]
		jmp	short loc_6B18BAAB
; ---------------------------------------------------------------------------

loc_6B18BA44:				; CODE XREF: Ordinal594+1Cj
					; DATA XREF: .text:off_6B18BB2Ao
		mov	ecx, [ebp+arg_0] ; jumptable 6B18B978 case 11
		mov	eax, [ecx]
		lea	edx, [esi+8]
		push	edx
		push	[ebp+arg_4]
		call	dword ptr [eax+58h]
		jmp	short loc_6B18BAAB
; ---------------------------------------------------------------------------

loc_6B18BA55:				; CODE XREF: Ordinal594+1Cj
					; DATA XREF: .text:off_6B18BB2Ao
		mov	ecx, [ebp+arg_0] ; jumptable 6B18B978 case 12
		mov	eax, [ecx]
		lea	edx, [esi+8]
		push	edx
		push	[ebp+arg_4]
		call	dword ptr [eax+54h]
		jmp	short loc_6B18BAAB
; ---------------------------------------------------------------------------

loc_6B18BA66:				; CODE XREF: Ordinal594+1Cj
					; DATA XREF: .text:off_6B18BB2Ao
		lea	eax, [esi+18h]	; jumptable 6B18B978 case 13
		push	eax
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	Ordinal595

loc_6B18BA75:				; CODE XREF: Ordinal594+12Dj
					; Ordinal594+13Ej
		add	esp, 0Ch
		jmp	short loc_6B18BAAB
; ---------------------------------------------------------------------------

loc_6B18BA7A:				; CODE XREF: Ordinal594+1Cj
					; DATA XREF: .text:off_6B18BB2Ao
		lea	eax, [esi+1Ch]	; jumptable 6B18B978 case 14
		push	eax
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	Ordinal597
		jmp	short loc_6B18BA75
; ---------------------------------------------------------------------------

loc_6B18BA8B:				; CODE XREF: Ordinal594+1Cj
					; DATA XREF: .text:off_6B18BB2Ao
		lea	eax, [esi+20h]	; jumptable 6B18B978 case 15
		push	eax
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	Ordinal599
		jmp	short loc_6B18BA75
; ---------------------------------------------------------------------------

loc_6B18BA9C:				; CODE XREF: Ordinal594+1Cj
					; DATA XREF: .text:off_6B18BB2Ao
		mov	ecx, [ebp+arg_0] ; jumptable 6B18B978 case 16
		mov	eax, [ecx]
		lea	edx, [esi+8]
		push	edx
		push	[ebp+arg_4]
		call	dword ptr [eax+38h]

loc_6B18BAAB:				; CODE XREF: Ordinal594+35j
					; Ordinal594+49j ...
		mov	bl, al
		jmp	short loc_6B18BB03
; ---------------------------------------------------------------------------

loc_6B18BAAF:				; CODE XREF: Ordinal594+1Cj
					; DATA XREF: .text:off_6B18BB2Ao
		mov	ebx, [ebp+arg_0] ; jumptable 6B18B978 case 17
		mov	eax, [ebx]
		and	[ebp+arg_C], 0
		lea	ecx, [ebp+arg_C]
		push	ecx
		push	[ebp+arg_4]
		mov	ecx, ebx
		call	dword ptr [eax+34h]
		test	al, al
		jnz	short loc_6B18BACC
		xor	bl, bl
		jmp	short loc_6B18BAE6
; ---------------------------------------------------------------------------

loc_6B18BACC:				; CODE XREF: Ordinal594+16Aj
		push	[ebp+arg_C]
		mov	eax, [ebx]
		mov	ecx, ebx
		call	dword ptr [eax+2Ch]
		neg	al
		sbb	al, al
		inc	al
		mov	ecx, esi
		push	eax
		call	Ordinal530
		mov	bl, al

loc_6B18BAE6:				; CODE XREF: Ordinal594+16Ej
		mov	ecx, [ebp+arg_C]
		test	ecx, ecx
		jz	short loc_6B18BB03
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		jmp	short loc_6B18BB03
; ---------------------------------------------------------------------------

loc_6B18BAF4:				; CODE XREF: Ordinal594+1Cj
					; DATA XREF: .text:off_6B18BB2Ao
		mov	bl, 1		; jumptable 6B18B978 case 0
		jmp	short loc_6B18BB19
; ---------------------------------------------------------------------------

loc_6B18BAF8:				; CODE XREF: Ordinal594+16j
		push	offset aCvaluecolle_40 ; jumptable 6B18B978 default case
		call	sub_6B18102E
		pop	ecx

loc_6B18BB03:				; CODE XREF: Ordinal594+151j
					; Ordinal594+18Fj ...
		test	bl, bl
		jnz	short loc_6B18BB19
		push	offset aCvaluecolle_41 ; "CValueCollection::CopyValue()	: bRet =="...
		call	sub_6B18102E
		pop	ecx
		mov	ecx, esi
		call	Ordinal525

loc_6B18BB19:				; CODE XREF: Ordinal594+19Aj
					; Ordinal594+1A9j
		mov	byte ptr [esi+38h], 1
		mov	byte ptr [edi+4], 1
		pop	edi
		pop	esi
		mov	al, bl
		pop	ebx
		pop	ebp
		retn	14h
Ordinal594	endp

; ---------------------------------------------------------------------------
off_6B18BB2A	dd offset loc_6B18BAF4	; DATA XREF: Ordinal594+1Cr
		dd offset loc_6B18B97F	; jump table for switch	statement
		dd offset loc_6B18B996
		dd offset loc_6B18B9AA
		dd offset loc_6B18B9BE
		dd offset loc_6B18B9D2
		dd offset loc_6B18B9E6
		dd offset loc_6B18B9FA
		dd offset loc_6B18BA0E
		dd offset loc_6B18BA22
		dd offset loc_6B18BA33
		dd offset loc_6B18BA44
		dd offset loc_6B18BA55
		dd offset loc_6B18BA66
		dd offset loc_6B18BA7A
		dd offset loc_6B18BA8B
		dd offset loc_6B18BA9C
		dd offset loc_6B18BAAF
; Exported entry 520.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal520
Ordinal520	proc near		; CODE XREF: Ordinal198+3Ap
					; sub_6B184D3A+Fp ...
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+18h]
		mov	dword ptr [esi], offset	off_6B1AE4D0
		call	sub_6B181879
		lea	ecx, [esi+1Ch]
		call	sub_6B181879
		lea	ecx, [esi+20h]
		call	Ordinal1187
		xor	eax, eax
		mov	[esi+30h], eax
		mov	[esi+34h], eax
		mov	[esi+38h], al
		mov	eax, esi
		pop	esi
		retn
Ordinal520	endp

; Exported entry 521.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal521
Ordinal521	proc near		; CODE XREF: sub_6B183D6C+288p
					; Ordinal198+52p ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1AE4D0
		call	Ordinal525
		lea	ecx, [esi+30h]
		call	sub_6B187D45
		lea	ecx, [esi+20h]
		call	Ordinal1189
		lea	ecx, [esi+1Ch]
		call	sub_6B1899B5
		lea	ecx, [esi+18h]
		pop	esi
		jmp	sub_6B1899B5
Ordinal521	endp

; Exported entry 523.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal523
Ordinal523	proc near		; CODE XREF: sub_6B1837AE+12p
					; sub_6B1837DA+18p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		cmp	esi, [esp+4+arg_0]
		jz	short loc_6B18BBF4
		push	[esp+4+arg_0]
		push	0
		call	Ordinal531
		test	al, al
		jnz	short loc_6B18BBF4
		push	offset aCvalueOperator ; "CValue::operator =() : Copy()	== false\n"...
		call	sub_6B18102E
		pop	ecx

loc_6B18BBF4:				; CODE XREF: Ordinal523+7j
					; Ordinal523+16j
		mov	eax, esi
		pop	esi
		retn	4
Ordinal523	endp

; Exported entry 536.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal536
Ordinal536	proc near		; CODE XREF: Ordinal167+3p
					; Ordinal169+4p ...
		push	esi
		mov	esi, ecx
		call	Ordinal457
		lea	ecx, [esi+30h]
		mov	dword ptr [esi], offset	off_6B1AE4FC
		mov	byte ptr [esi+28h], 1
		mov	byte ptr [esi+29h], 0
		call	Ordinal520
		mov	eax, esi
		pop	esi
		retn
Ordinal536	endp

; Exported entry 537.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal537
Ordinal537	proc near		; CODE XREF: Ordinal168+19j
					; Ordinal298+19j ...
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+30h]
		mov	dword ptr [esi], offset	off_6B1AE4FC
		call	Ordinal521
		mov	ecx, esi
		pop	esi
		jmp	Ordinal458
Ordinal537	endp

; Exported entry 538.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal538
Ordinal538	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal457
		lea	ecx, [esi+30h]
		mov	dword ptr [esi], offset	off_6B1AE4FC
		call	Ordinal520
		push	[esp+4+arg_0]
		mov	ecx, esi
		call	Ordinal539
		mov	byte ptr [esi+4], 0
		mov	eax, esi
		pop	esi
		retn	4
Ordinal538	endp

; Exported entry 547.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal547
Ordinal547	proc near		; CODE XREF: Ordinal320+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_4]
		push	eax
		xor	ebx, ebx
		inc	ebx
		push	ebx
		push	[ebp+arg_0]
		mov	ecx, esi
		call	Ordinal593
		test	al, al
		jnz	short loc_6B18BCA3
		push	offset aCvaluecolle_42 ; "CValueCollection::GetValue(bool) : GetR"...
		call	sub_6B18102E
		pop	ecx
		xor	bl, bl
		jmp	short loc_6B18BCAE
; ---------------------------------------------------------------------------

loc_6B18BCA3:				; CODE XREF: Ordinal547+32j
		mov	eax, [ebp+var_4]
		mov	al, [eax+8]
		mov	ecx, [ebp+arg_4]
		mov	[ecx], al

loc_6B18BCAE:				; CODE XREF: Ordinal547+41j
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal547	endp

; Exported entry 549.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal549
Ordinal549	proc near		; CODE XREF: Ordinal322+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		push	2
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal593
		test	al, al
		jnz	short loc_6B18BCFD
		push	offset aCvaluecolle_43 ; "CValueCollection::GetValue(CHAR) : GetR"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18BD0A
; ---------------------------------------------------------------------------

loc_6B18BCFD:				; CODE XREF: Ordinal549+30j
		mov	eax, [ebp+var_4]
		mov	al, [eax+8]
		mov	ecx, [ebp+arg_4]
		mov	[ecx], al
		mov	bl, 1

loc_6B18BD0A:				; CODE XREF: Ordinal549+3Dj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal549	endp

; Exported entry 551.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal551
Ordinal551	proc near		; CODE XREF: Ordinal214+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		push	3
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal593
		test	al, al
		jnz	short loc_6B18BD59
		push	offset aCvaluecolle_44 ; "CValueCollection::GetValue(BYTE) : GetR"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18BD66
; ---------------------------------------------------------------------------

loc_6B18BD59:				; CODE XREF: Ordinal551+30j
		mov	eax, [ebp+var_4]
		mov	al, [eax+8]
		mov	ecx, [ebp+arg_4]
		mov	[ecx], al
		mov	bl, 1

loc_6B18BD66:				; CODE XREF: Ordinal551+3Dj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal551	endp

; Exported entry 553.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal553
Ordinal553	proc near		; CODE XREF: Ordinal326+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		push	4
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal593
		test	al, al
		jnz	short loc_6B18BDB5
		push	offset aCvaluecolle_45 ; "CValueCollection::GetValue(SHORT) : Get"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18BDC4
; ---------------------------------------------------------------------------

loc_6B18BDB5:				; CODE XREF: Ordinal553+30j
		mov	eax, [ebp+var_4]
		mov	ax, [eax+8]
		mov	ecx, [ebp+arg_4]
		mov	[ecx], ax
		mov	bl, 1

loc_6B18BDC4:				; CODE XREF: Ordinal553+3Dj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal553	endp

; Exported entry 555.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal555
Ordinal555	proc near		; CODE XREF: Ordinal218+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		push	5
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal593
		test	al, al
		jnz	short loc_6B18BE13
		push	offset aCvaluecolle_46 ; "CValueCollection::GetValue(WORD) : GetR"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18BE22
; ---------------------------------------------------------------------------

loc_6B18BE13:				; CODE XREF: Ordinal555+30j
		mov	eax, [ebp+var_4]
		mov	ax, [eax+8]
		mov	ecx, [ebp+arg_4]
		mov	[ecx], ax
		mov	bl, 1

loc_6B18BE22:				; CODE XREF: Ordinal555+3Dj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal555	endp

; Exported entry 557.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal557
Ordinal557	proc near		; CODE XREF: Ordinal220+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		push	6
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal593
		test	al, al
		jnz	short loc_6B18BE71
		push	offset aCvaluecolle_47 ; "CValueCollection::GetValue(LONG) : GetR"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18BE7E
; ---------------------------------------------------------------------------

loc_6B18BE71:				; CODE XREF: Ordinal557+30j
		mov	eax, [ebp+var_4]
		mov	eax, [eax+8]
		mov	ecx, [ebp+arg_4]
		mov	[ecx], eax
		mov	bl, 1

loc_6B18BE7E:				; CODE XREF: Ordinal557+3Dj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal557	endp

; Exported entry 559.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal559
Ordinal559	proc near		; CODE XREF: Ordinal222+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		push	7
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal593
		test	al, al
		jnz	short loc_6B18BECD
		push	offset aCvaluecolle_48 ; "CValueCollection::GetValue(DWORD) : Get"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18BEDA
; ---------------------------------------------------------------------------

loc_6B18BECD:				; CODE XREF: Ordinal559+30j
		mov	eax, [ebp+var_4]
		mov	eax, [eax+8]
		mov	ecx, [ebp+arg_4]
		mov	[ecx], eax
		mov	bl, 1

loc_6B18BEDA:				; CODE XREF: Ordinal559+3Dj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal559	endp

; Exported entry 561.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal561
Ordinal561	proc near		; CODE XREF: Ordinal224+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		push	8
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal593
		test	al, al
		jnz	short loc_6B18BF29
		push	offset aCvaluecolle_49 ; "CValueCollection::GetValue(LONGLONG) : "...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18BF3C
; ---------------------------------------------------------------------------

loc_6B18BF29:				; CODE XREF: Ordinal561+30j
		mov	eax, [ebp+var_4]
		mov	edx, [eax+8]
		mov	ecx, [ebp+arg_4]
		mov	[ecx], edx
		mov	eax, [eax+0Ch]
		mov	[ecx+4], eax
		mov	bl, 1

loc_6B18BF3C:				; CODE XREF: Ordinal561+3Dj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal561	endp

; Exported entry 563.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal563
Ordinal563	proc near		; CODE XREF: Ordinal336+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		push	9
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal593
		test	al, al
		jnz	short loc_6B18BF8B
		push	offset aCvaluecolle_50 ; "CValueCollection::GetValue(ULONGLONG)	:"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18BF9E
; ---------------------------------------------------------------------------

loc_6B18BF8B:				; CODE XREF: Ordinal563+30j
		mov	eax, [ebp+var_4]
		mov	edx, [eax+8]
		mov	ecx, [ebp+arg_4]
		mov	[ecx], edx
		mov	eax, [eax+0Ch]
		mov	[ecx+4], eax
		mov	bl, 1

loc_6B18BF9E:				; CODE XREF: Ordinal563+3Dj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal563	endp

; Exported entry 565.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal565
Ordinal565	proc near		; CODE XREF: Ordinal228+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		push	0Ah
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal593
		test	al, al
		jnz	short loc_6B18BFED
		push	offset aCvaluecolle_51 ; "CValueCollection::GetValue(double) : Ge"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18BFFA
; ---------------------------------------------------------------------------

loc_6B18BFED:				; CODE XREF: Ordinal565+30j
		mov	eax, [ebp+var_4]
		fld	qword ptr [eax+8]
		mov	eax, [ebp+arg_4]
		fstp	qword ptr [eax]
		mov	bl, 1

loc_6B18BFFA:				; CODE XREF: Ordinal565+3Dj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal565	endp

; Exported entry 567.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal567
Ordinal567	proc near		; CODE XREF: Ordinal230+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		push	0Bh
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal593
		test	al, al
		jnz	short loc_6B18C049
		push	offset aCvaluecolle_52 ; "CValueCollection::GetValue(GUID) : GetR"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18C05A
; ---------------------------------------------------------------------------

loc_6B18C049:				; CODE XREF: Ordinal567+30j
		mov	esi, [ebp+var_4]
		push	edi
		mov	edi, [ebp+arg_4]
		add	esi, 8
		movsd
		movsd
		movsd
		movsd
		mov	bl, 1
		pop	edi

loc_6B18C05A:				; CODE XREF: Ordinal567+3Dj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal567	endp

; Exported entry 569.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal569
Ordinal569	proc near		; CODE XREF: Ordinal232+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		push	0Ch
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal593
		test	al, al
		jnz	short loc_6B18C0A9
		push	offset aCvaluecolle_53 ; "CValueCollection::GetValue(SYSTEMTIME) "...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18C0BA
; ---------------------------------------------------------------------------

loc_6B18C0A9:				; CODE XREF: Ordinal569+30j
		mov	esi, [ebp+var_4]
		push	edi
		mov	edi, [ebp+arg_4]
		add	esi, 8
		movsd
		movsd
		movsd
		movsd
		mov	bl, 1
		pop	edi

loc_6B18C0BA:				; CODE XREF: Ordinal569+3Dj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal569	endp

; Exported entry 572.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal572(int,	void *Dst, int,	int)
		public Ordinal572
Ordinal572	proc near		; CODE XREF: Ordinal345+3j
					; Ordinal571+15p
					; DATA XREF: ...

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
Dst		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, [ebp+arg_C]
		xor	eax, eax
		cmp	[ebp+Dst], eax
		push	edi
		mov	ebx, ecx
		mov	[esi], eax
		jz	short loc_6B18C14C
		mov	edi, [ebp+arg_8]
		cmp	edi, eax
		jz	short loc_6B18C14C
		push	eax
		push	0FFFFFFFFh
		lea	eax, [ebx+8]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		and	[ebp+arg_C], 0
		lea	eax, [ebp+arg_C]
		push	eax
		push	0Dh
		push	[ebp+arg_0]
		mov	ecx, ebx
		call	Ordinal593
		test	al, al
		jnz	short loc_6B18C11E
		push	offset aCvaluecolle_54 ; "CValueCollection::GetValue(LPSTR) : Get"...

loc_6B18C114:				; CODE XREF: Ordinal572+72j
		call	sub_6B18102E
		pop	ecx
		xor	bl, bl
		jmp	short loc_6B18C140
; ---------------------------------------------------------------------------

loc_6B18C11E:				; CODE XREF: Ordinal572+43j
		mov	eax, [ebp+arg_C]
		push	esi		; int
		push	[ebp+Dst]	; Dst
		add	eax, 18h
		push	eax		; int
		mov	[esi], edi
		call	Ordinal1523
		add	esp, 0Ch
		test	al, al
		jnz	short loc_6B18C13E
		push	offset aCvaluecolle_55 ; "CValueCollection::GetValue(LPSTR) : CSt"...
		jmp	short loc_6B18C114
; ---------------------------------------------------------------------------

loc_6B18C13E:				; CODE XREF: Ordinal572+6Bj
		mov	bl, 1

loc_6B18C140:				; CODE XREF: Ordinal572+52j
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	al, bl
		jmp	short loc_6B18C159
; ---------------------------------------------------------------------------

loc_6B18C14C:				; CODE XREF: Ordinal572+15j
					; Ordinal572+1Cj
		push	offset aCvaluecolle_56 ; "CValueCollection::GetValue(LPSTR) : pMe"...
		call	sub_6B18102E
		pop	ecx
		xor	al, al

loc_6B18C159:				; CODE XREF: Ordinal572+80j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	10h
Ordinal572	endp

; Exported entry 575.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal575(int,	void *Dst, int,	int)
		public Ordinal575
Ordinal575	proc near		; CODE XREF: Ordinal238+3j
					; Ordinal574+15p
					; DATA XREF: ...

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
Dst		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, [ebp+arg_C]
		xor	eax, eax
		cmp	[ebp+Dst], eax
		push	edi
		mov	ebx, ecx
		mov	[esi], eax
		jz	short loc_6B18C1E2
		mov	edi, [ebp+arg_8]
		cmp	edi, eax
		jz	short loc_6B18C1E2
		push	eax
		push	0FFFFFFFFh
		lea	eax, [ebx+8]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		and	[ebp+arg_C], 0
		lea	eax, [ebp+arg_C]
		push	eax
		push	0Eh
		push	[ebp+arg_0]
		mov	ecx, ebx
		call	Ordinal593
		test	al, al
		jnz	short loc_6B18C1B4
		push	offset aCvaluecolle_57 ; "CValueCollection::GetValue(LPWSTR) : Ge"...

loc_6B18C1AA:				; CODE XREF: Ordinal575+72j
		call	sub_6B18102E
		pop	ecx
		xor	bl, bl
		jmp	short loc_6B18C1D6
; ---------------------------------------------------------------------------

loc_6B18C1B4:				; CODE XREF: Ordinal575+43j
		mov	eax, [ebp+arg_C]
		push	esi		; int
		push	[ebp+Dst]	; Dst
		add	eax, 1Ch
		push	eax		; int
		mov	[esi], edi
		call	Ordinal1524
		add	esp, 0Ch
		test	al, al
		jnz	short loc_6B18C1D4
		push	offset aCvaluecolle_58 ; "CValueCollection::GetValue(LPWSTR) : CS"...
		jmp	short loc_6B18C1AA
; ---------------------------------------------------------------------------

loc_6B18C1D4:				; CODE XREF: Ordinal575+6Bj
		mov	bl, 1

loc_6B18C1D6:				; CODE XREF: Ordinal575+52j
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	al, bl
		jmp	short loc_6B18C1EF
; ---------------------------------------------------------------------------

loc_6B18C1E2:				; CODE XREF: Ordinal575+15j
					; Ordinal575+1Cj
		push	offset aCvaluecolle_59 ; "CValueCollection::GetValue(LPWSTR) : pM"...
		call	sub_6B18102E
		pop	ecx
		xor	al, al

loc_6B18C1EF:				; CODE XREF: Ordinal575+80j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	10h
Ordinal575	endp

; Exported entry 578.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal578(int,	void *Dst, int,	int)
		public Ordinal578
Ordinal578	proc near		; CODE XREF: Ordinal241+3j
					; Ordinal577+15p
					; DATA XREF: ...

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
Dst		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, [ebp+arg_C]
		xor	ebx, ebx
		cmp	[ebp+Dst], ebx
		push	edi
		mov	edi, ecx
		mov	[esi], ebx
		jz	short loc_6B18C284
		cmp	[ebp+arg_8], ebx
		jz	short loc_6B18C284
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [edi+8]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	eax, [ebp+arg_C]
		push	eax
		push	0Fh
		push	[ebp+arg_0]
		mov	ecx, edi
		mov	[ebp+arg_C], ebx
		call	Ordinal593
		test	al, al
		jnz	short loc_6B18C245
		push	offset aCvaluecolle_60 ; "CValueCollection::GetValue(LPVOID) : Ge"...

loc_6B18C23D:				; CODE XREF: Ordinal578+66j
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18C278
; ---------------------------------------------------------------------------

loc_6B18C245:				; CODE XREF: Ordinal578+40j
		mov	ecx, [ebp+arg_C]
		add	ecx, 20h
		call	Ordinal1052
		cmp	[ebp+arg_8], eax
		mov	[esi], eax
		jnb	short loc_6B18C25E
		push	offset aCvaluecolle_61 ; "CValueCollection::GetValue(LPVOID) : nS"...
		jmp	short loc_6B18C23D
; ---------------------------------------------------------------------------

loc_6B18C25E:				; CODE XREF: Ordinal578+5Fj
		mov	ecx, [ebp+arg_C]
		push	eax		; Size
		add	ecx, 20h
		call	Ordinal1493
		push	eax		; Src
		push	[ebp+Dst]	; Dst
		call	memcpy
		add	esp, 0Ch
		mov	bl, 1

loc_6B18C278:				; CODE XREF: Ordinal578+4Dj
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	al, bl
		jmp	short loc_6B18C291
; ---------------------------------------------------------------------------

loc_6B18C284:				; CODE XREF: Ordinal578+15j
					; Ordinal578+1Aj
		push	offset aCvaluecolle_62 ; "CValueCollection::GetValue(LPVOID) : pM"...
		call	sub_6B18102E
		pop	ecx
		xor	al, al

loc_6B18C291:				; CODE XREF: Ordinal578+8Cj
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	10h
Ordinal578	endp

; Exported entry 580.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal580(int,	VARIANTARG *pvarDest)
		public Ordinal580
Ordinal580	proc near		; CODE XREF: Ordinal353+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
pvarDest	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		push	10h
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal593
		test	al, al
		jnz	short loc_6B18C2D7
		push	offset aCvaluecolle_63 ; "CValueCollection::GetValue(VARIANT) :	G"...
		call	sub_6B18102E

loc_6B18C2D4:				; CODE XREF: Ordinal580+68j
		pop	ecx
		jmp	short loc_6B18C304
; ---------------------------------------------------------------------------

loc_6B18C2D7:				; CODE XREF: Ordinal580+30j
		push	[ebp+pvarDest]	; pvarg
		call	ds:VariantClear
		mov	eax, [ebp+var_4]
		add	eax, 8
		push	eax		; pvargSrc
		push	[ebp+pvarDest]	; pvarDest
		call	ds:VariantCopyInd
		cmp	eax, ebx
		jge	short loc_6B18C302
		push	eax		; Args
		push	offset aCvaluecolle_64 ; "CValueCollection::GetValue(VARIANT) :	V"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18C2D4
; ---------------------------------------------------------------------------

loc_6B18C302:				; CODE XREF: Ordinal580+5Aj
		mov	bl, 1

loc_6B18C304:				; CODE XREF: Ordinal580+3Dj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal580	endp

; Exported entry 582.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal582
Ordinal582	proc near		; CODE XREF: Ordinal355+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		push	11h
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal593
		test	al, al
		jnz	short loc_6B18C353
		push	offset aCvaluecolle_65 ; "CValueCollection::GetValue(ISymBase) : "...

loc_6B18C34B:				; CODE XREF: Ordinal582+60j
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18C378
; ---------------------------------------------------------------------------

loc_6B18C353:				; CODE XREF: Ordinal582+30j
		mov	eax, [ebp+var_4]
		mov	eax, [eax+30h]
		push	[ebp+arg_4]
		push	eax
		xor	eax, eax
		mov	al, [esi+29h]
		push	eax
		call	Ordinal529
		add	esp, 0Ch
		test	al, al
		jnz	short loc_6B18C376
		push	offset aCvaluecolle_66 ; "CValueCollection::GetValue(ISymBase) : "...
		jmp	short loc_6B18C34B
; ---------------------------------------------------------------------------

loc_6B18C376:				; CODE XREF: Ordinal582+59j
		mov	bl, 1

loc_6B18C378:				; CODE XREF: Ordinal582+3Dj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal582	endp

; Exported entry 585.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal585
Ordinal585	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		push	0Dh
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal593
		test	al, al
		jnz	short loc_6B18C3C7
		push	offset aCvaluecolle_67 ; "CValueCollection::GetValue(CStringA) : "...

loc_6B18C3BF:				; CODE XREF: Ordinal585+59j
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18C3E5
; ---------------------------------------------------------------------------

loc_6B18C3C7:				; CODE XREF: Ordinal585+30j
		mov	eax, [ebp+var_4]
		mov	eax, [eax+18h]
		push	[ebp+arg_4]	; int
		push	eax		; Src
		call	Ordinal1519
		test	al, al
		pop	ecx
		pop	ecx
		jnz	short loc_6B18C3E3
		push	offset aCvaluecolle_68 ; "CValueCollection::GetValue(CStringA) : "...
		jmp	short loc_6B18C3BF
; ---------------------------------------------------------------------------

loc_6B18C3E3:				; CODE XREF: Ordinal585+52j
		mov	bl, 1

loc_6B18C3E5:				; CODE XREF: Ordinal585+3Dj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal585	endp

; Exported entry 587.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal587
Ordinal587	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		push	0Eh
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal593
		test	al, al
		jnz	short loc_6B18C434
		push	offset aCvaluecolle_69 ; "CValueCollection::GetValue(CStringW) : "...

loc_6B18C42C:				; CODE XREF: Ordinal587+59j
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18C452
; ---------------------------------------------------------------------------

loc_6B18C434:				; CODE XREF: Ordinal587+30j
		mov	eax, [ebp+var_4]
		mov	eax, [eax+1Ch]
		push	[ebp+arg_4]	; int
		push	eax		; Src
		call	Ordinal1521
		test	al, al
		pop	ecx
		pop	ecx
		jnz	short loc_6B18C450
		push	offset aCvaluecolle_70 ; "CValueCollection::GetValue(CStringW) : "...
		jmp	short loc_6B18C42C
; ---------------------------------------------------------------------------

loc_6B18C450:				; CODE XREF: Ordinal587+52j
		mov	bl, 1

loc_6B18C452:				; CODE XREF: Ordinal587+3Dj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal587	endp

; Exported entry 589.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal589
Ordinal589	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+8]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+var_4]
		push	eax
		push	0Fh
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal593
		test	al, al
		jnz	short loc_6B18C4A1
		push	offset aCvaluecolle_71 ; "CValueCollection::GetValue(CMemory) :	G"...

loc_6B18C499:				; CODE XREF: Ordinal589+57j
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18C4BD
; ---------------------------------------------------------------------------

loc_6B18C4A1:				; CODE XREF: Ordinal589+30j
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_4]
		add	eax, 20h
		push	eax
		call	Ordinal1201
		test	eax, eax
		jnz	short loc_6B18C4BB
		push	offset aCvaluecolle_72 ; "CValueCollection::GetValue(CMemory) :	M"...
		jmp	short loc_6B18C499
; ---------------------------------------------------------------------------

loc_6B18C4BB:				; CODE XREF: Ordinal589+50j
		mov	bl, 1

loc_6B18C4BD:				; CODE XREF: Ordinal589+3Dj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal589	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B18C4CD(void *, char)
sub_6B18C4CD	proc near		; DATA XREF: .rdata:off_6B1AE4D0o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal521
		test	[esp+4+arg_0], 1
		jz	short loc_6B18C4E3
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B18C4E3:				; CODE XREF: sub_6B18C4CD+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B18C4CD	endp

; Exported entry 522.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal522
Ordinal522	proc near		; CODE XREF: sub_6B183C9F+44p
					; sub_6B183CF3+4Ep ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		lea	ecx, [esi+18h]
		mov	dword ptr [esi], offset	off_6B1AE4D0
		call	sub_6B181879
		lea	ecx, [esi+1Ch]
		call	sub_6B181879
		lea	ecx, [esi+20h]
		call	Ordinal1187
		and	dword ptr [esi+30h], 0
		push	[esp+4+arg_0]
		and	dword ptr [esi+34h], 0
		mov	ecx, esi
		mov	byte ptr [esi+38h], 0
		call	Ordinal523
		mov	byte ptr [esi+38h], 0
		mov	eax, esi
		pop	esi
		retn	4
Ordinal522	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B18C52B(void *, char)
sub_6B18C52B	proc near		; DATA XREF: .rdata:off_6B1AE4FCo

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal537
		test	[esp+4+arg_0], 1
		jz	short loc_6B18C541
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B18C541:				; CODE XREF: sub_6B18C52B+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B18C52B	endp

; Exported entry 571.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal571(int,	void *Dst, int)
		public Ordinal571
Ordinal571	proc near		; CODE XREF: Ordinal344+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Dst		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_4]
		push	eax		; int
		push	[ebp+arg_8]	; int
		push	[ebp+Dst]	; Dst
		push	[ebp+arg_0]	; int
		call	Ordinal572
		leave
		retn	0Ch
Ordinal571	endp

; Exported entry 574.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal574(int,	void *Dst, int)
		public Ordinal574
Ordinal574	proc near		; CODE XREF: Ordinal237+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Dst		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_4]
		push	eax		; int
		push	[ebp+arg_8]	; int
		push	[ebp+Dst]	; Dst
		push	[ebp+arg_0]	; int
		call	Ordinal575
		leave
		retn	0Ch
Ordinal574	endp

; Exported entry 577.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal577(int,	void *Dst, int)
		public Ordinal577
Ordinal577	proc near		; CODE XREF: Ordinal240+3j
					; DATA XREF: .rdata:off_6B1BF428o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Dst		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_4]
		push	eax		; int
		push	[ebp+arg_8]	; int
		push	[ebp+Dst]	; Dst
		push	[ebp+arg_0]	; int
		call	Ordinal578
		leave
		retn	0Ch
Ordinal577	endp

; Exported entry 599.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal599
Ordinal599	proc near		; CODE XREF: Ordinal594+139p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		test	esi, esi
		jnz	short loc_6B18C5B3
		push	offset aCvaluecolle_73 ; "CValueCollectionConvert::GetValue(CMemo"...
		jmp	short loc_6B18C5CF
; ---------------------------------------------------------------------------

loc_6B18C5B3:				; CODE XREF: Ordinal599+9j
		push	[ebp+arg_4]
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+14h]
		mov	ecx, [ebp+arg_8]
		push	eax		; Args
		call	Ordinal1196
		test	eax, eax
		jnz	short loc_6B18C5D9
		push	offset aCvaluecolle_74 ; "CValueCollectionConvert::GetValue(CMemo"...

loc_6B18C5CF:				; CODE XREF: Ordinal599+10j
		call	sub_6B18102E
		pop	ecx
		xor	al, al
		jmp	short loc_6B18C5F7
; ---------------------------------------------------------------------------

loc_6B18C5D9:				; CODE XREF: Ordinal599+27j
		mov	ecx, [ebp+arg_8]
		push	edi
		mov	edi, [esi]
		call	Ordinal1052
		mov	ecx, [ebp+arg_8]
		push	eax
		call	Ordinal1493
		push	eax
		push	[ebp+arg_4]
		mov	ecx, esi
		call	dword ptr [edi+40h]
		pop	edi

loc_6B18C5F7:				; CODE XREF: Ordinal599+36j
		pop	esi
		pop	ebp
		retn
Ordinal599	endp

; Exported entry 600.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal600
Ordinal600	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_6B18C612
		push	offset aCvaluecolle_75 ; "CValueCollectionConvert::SetValue(CMemo"...
		call	sub_6B18102E
		pop	ecx
		xor	al, al
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6B18C612:				; CODE XREF: Ordinal600+7j
		mov	ecx, [esp+4+arg_8]
		push	edi
		mov	edi, [esi]
		call	Ordinal1052
		mov	ecx, [esp+8+arg_8]
		push	eax
		call	Ordinal1493
		push	eax
		push	[esp+10h+arg_4]
		mov	ecx, esi
		call	dword ptr [edi+8Ch]
		pop	edi
		pop	esi
		retn
Ordinal600	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6B18C638(void	*Dst, void *Src, int)
sub_6B18C638	proc near		; CODE XREF: sub_6B18C6D5+46p
					; sub_6B19FC49+51p ...

Dst		= dword	ptr  4
Src		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		add	eax, eax
		push	eax		; Size
		push	[esp+4+Src]	; Src
		push	[esp+8+Dst]	; Dst
		call	memcpy
		add	esp, 0Ch
		retn
sub_6B18C638	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B18C650	proc near		; CODE XREF: sub_6B181657+35j
					; sub_6B1816CF+2Ep ...
		push	8007000Eh
		call	sub_6B181113
sub_6B18C650	endp

; ---------------------------------------------------------------------------
		db 0CCh
; Exported entry 596.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal596
Ordinal596	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jnz	short loc_6B18C671
		push	offset aCvaluecolle_76 ; "CValueCollectionConvert::SetValue(CStri"...
		call	sub_6B18102E
		pop	ecx
		xor	al, al
		retn
; ---------------------------------------------------------------------------

loc_6B18C671:				; CODE XREF: Ordinal596+6j
		mov	eax, [esp+arg_8]
		mov	eax, [eax]
		mov	edx, [ecx]
		push	eax
		push	[esp+4+arg_4]
		call	dword ptr [edx+94h]
		retn
Ordinal596	endp

; Exported entry 598.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal598
Ordinal598	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_0]
		test	ecx, ecx
		jnz	short loc_6B18C69B
		push	offset aCvaluecolle_77 ; "CValueCollectionConvert::SetValue(CStri"...
		call	sub_6B18102E
		pop	ecx
		xor	al, al
		retn
; ---------------------------------------------------------------------------

loc_6B18C69B:				; CODE XREF: Ordinal598+6j
		mov	eax, [esp+arg_8]
		mov	eax, [eax]
		mov	edx, [ecx]
		push	eax
		push	[esp+4+arg_4]
		call	dword ptr [edx+90h]
		retn
Ordinal598	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18C6AF	proc near		; CODE XREF: Ordinal597+88p
					; Ordinal647+84p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 0FFFFFFFFh
		push	esi
		mov	esi, ecx
		jnz	short loc_6B18C6C9
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_6B18C6C9
		push	eax		; Str
		call	ds:wcslen
		pop	ecx

loc_6B18C6C9:				; CODE XREF: sub_6B18C6AF+Aj
					; sub_6B18C6AF+10j
		push	eax
		mov	ecx, esi
		call	sub_6B1892F0
		pop	esi
		retn	4
sub_6B18C6AF	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B18C6D5	proc near		; CODE XREF: sub_6B18C764+1Ap

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		push	esi
		mov	esi, [ecx]
		mov	ebx, [esi-0Ch]
		sub	esi, 10h
		mov	[ebp+var_8], ecx
		mov	ecx, [esi]
		mov	eax, [ecx]
		push	edi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+10h]
		mov	edx, [eax]
		push	2
		push	[ebp+arg_0]
		mov	ecx, eax
		call	dword ptr [edx]
		mov	edi, eax
		test	edi, edi
		jnz	short loc_6B18C708
		call	sub_6B18C650
; ---------------------------------------------------------------------------

loc_6B18C708:				; CODE XREF: sub_6B18C6D5+2Cj
		mov	eax, [ebp+arg_0]
		cmp	ebx, eax
		jge	short loc_6B18C711
		mov	eax, ebx

loc_6B18C711:				; CODE XREF: sub_6B18C6D5+38j
		inc	eax
		push	eax		; int
		lea	eax, [esi+10h]
		push	eax		; Src
		lea	ebx, [edi+10h]
		push	ebx		; Dst
		call	sub_6B18C638
		mov	eax, [ebp+var_4]
		add	esp, 0Ch
		mov	ecx, esi
		mov	[edi+4], eax
		call	sub_6B18163D
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		mov	[eax], ebx
		pop	ebx
		leave
		retn	4
sub_6B18C6D5	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18C73C	proc near		; CODE XREF: sub_6B18C764+3Ep

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		push	2
		push	[esp+8+arg_0]
		sub	eax, 10h
		mov	ecx, [eax]
		mov	edx, [ecx]
		push	eax
		call	dword ptr [edx+8]
		test	eax, eax
		jnz	short loc_6B18C75B
		call	sub_6B18C650
; ---------------------------------------------------------------------------

loc_6B18C75B:				; CODE XREF: sub_6B18C73C+18j
		add	eax, 10h
		mov	[esi], eax
		pop	esi
		retn	4
sub_6B18C73C	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18C764	proc near		; CODE XREF: sub_6B18C7AB+1Fp

arg_0		= dword	ptr  4

		mov	eax, [ecx]
		mov	edx, [eax-0Ch]
		sub	eax, 10h
		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	edx, esi
		jle	short loc_6B18C777
		mov	esi, edx

loc_6B18C777:				; CODE XREF: sub_6B18C764+Fj
		cmp	dword ptr [eax+0Ch], 1
		jle	short loc_6B18C785
		push	esi
		call	sub_6B18C6D5
		jmp	short loc_6B18C7A7
; ---------------------------------------------------------------------------

loc_6B18C785:				; CODE XREF: sub_6B18C764+17j
		mov	eax, [eax+8]
		cmp	eax, esi
		jge	short loc_6B18C7A7
		mov	edx, 400h
		cmp	eax, edx
		jle	short loc_6B18C799
		add	eax, edx
		jmp	short loc_6B18C79B
; ---------------------------------------------------------------------------

loc_6B18C799:				; CODE XREF: sub_6B18C764+2Fj
		add	eax, eax

loc_6B18C79B:				; CODE XREF: sub_6B18C764+33j
		cmp	eax, esi
		jge	short loc_6B18C7A1
		mov	eax, esi

loc_6B18C7A1:				; CODE XREF: sub_6B18C764+39j
		push	eax
		call	sub_6B18C73C

loc_6B18C7A7:				; CODE XREF: sub_6B18C764+1Fj
					; sub_6B18C764+26j
		pop	esi
		retn	4
sub_6B18C764	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18C7AB	proc near		; CODE XREF: Ordinal597+6Fp
					; Ordinal647+6Cp ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		xor	ecx, ecx
		sub	eax, 10h
		inc	ecx
		sub	ecx, [eax+0Ch]
		mov	eax, [eax+8]
		sub	eax, [esp+4+arg_0]
		or	ecx, eax
		jge	short loc_6B18C7CF
		push	[esp+4+arg_0]
		mov	ecx, esi
		call	sub_6B18C764

loc_6B18C7CF:				; CODE XREF: sub_6B18C7AB+17j
		mov	eax, [esi]
		pop	esi
		retn	4
sub_6B18C7AB	endp

; Exported entry 595.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal595
Ordinal595	proc near		; CODE XREF: Ordinal594+114p
					; DATA XREF: .rdata:off_6B1BF428o

var_44		= byte ptr -44h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	eax, offset unknown_libname_56 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 40h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		test	esi, esi
		push	edi
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		jnz	short loc_6B18C806
		push	offset aCvaluecolle_78 ; "CValueCollectionConvert::GetValue(CStri"...
		call	sub_6B18102E
		pop	ecx
		xor	al, al
		jmp	short loc_6B18C879
; ---------------------------------------------------------------------------

loc_6B18C806:				; CODE XREF: Ordinal595+20j
		push	[ebp+arg_4]
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+14h]
		push	[ebp+arg_4]
		mov	edi, eax
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+18h]
		cmp	eax, 0Eh
		jnz	short loc_6B18C823
		shr	edi, 1

loc_6B18C823:				; CODE XREF: Ordinal595+4Aj
		push	offset aCvaluecolle_79 ; "CValueCollectionConvert::GetValue(CStri"...
		lea	ecx, [ebp+var_44]
		mov	byte ptr [ebp+arg_0+3],	0
		call	Ordinal1089
		and	[ebp+var_4], 0
		mov	ecx, [ebp+arg_8]
		push	edi
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B1818C7
		mov	edx, [esi]
		push	edi
		push	eax
		push	[ebp+arg_4]
		mov	ecx, esi
		call	dword ptr [edx+50h]
		mov	ecx, [ebp+arg_8]
		push	0FFFFFFFFh
		mov	byte ptr [ebp+arg_0+3],	al
		call	sub_6B185A33

loc_6B18C85E:				; DATA XREF: sub_6B18C890+3Do
					; sub_6B18C8D3+4Fo
		lea	ecx, [ebp+var_44]
		call	Ordinal1635
		test	eax, eax
		jz	short loc_6B18C86E
		mov	byte ptr [ebp+arg_0+3],	0

loc_6B18C86E:				; CODE XREF: Ordinal595+93j
		lea	ecx, [ebp+var_44]
		call	Ordinal1090
		mov	al, byte ptr [ebp+arg_0+3]

loc_6B18C879:				; CODE XREF: Ordinal595+2Fj
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal595	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18C890	proc near		; DATA XREF: .rdata:6B1BB75Co
		push	13h
		lea	ecx, [ebp-44h]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-44h]
		call	Ordinal1101
		mov	ecx, [ebp-4Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal1103
		lea	ecx, [ebp-44h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B18C85E
		retn
sub_6B18C890	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18C8D3	proc near		; DATA XREF: .rdata:6B1BB76Co
		push	15h
		lea	ecx, [ebp-44h]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-44h]
		call	Ordinal1101
		mov	eax, [ebp-48h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal1103
		lea	ecx, [ebp-44h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B18C85E
		retn
sub_6B18C8D3	endp

; Exported entry 597.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal597
Ordinal597	proc near		; CODE XREF: Ordinal594+128p
					; DATA XREF: .rdata:off_6B1BF428o

var_44		= byte ptr -44h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	eax, offset unknown_libname_57 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 40h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		test	esi, esi
		push	edi
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		jnz	short loc_6B18C959
		push	offset aCvaluecolle_80 ; "CValueCollectionConvert::GetValue(CStri"...
		call	sub_6B18102E
		pop	ecx
		xor	al, al
		jmp	short loc_6B18C9D0
; ---------------------------------------------------------------------------

loc_6B18C959:				; CODE XREF: Ordinal597+20j
		push	[ebp+arg_4]
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+14h]
		push	[ebp+arg_4]
		mov	edi, eax
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+18h]
		cmp	eax, 0Dh
		jnz	short loc_6B18C976
		add	edi, edi

loc_6B18C976:				; CODE XREF: Ordinal597+4Aj
		push	offset aCvaluecolle_81 ; "CValueCollectionConvert::GetValue(CStri"...
		lea	ecx, [ebp+var_44]
		mov	byte ptr [ebp+arg_0+3],	0
		call	Ordinal1089
		and	[ebp+var_4], 0
		mov	ecx, [ebp+arg_8]
		mov	eax, edi
		shr	eax, 1
		push	eax
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B18C7AB
		mov	edx, [esi]
		push	edi
		push	eax
		push	[ebp+arg_4]
		mov	ecx, esi
		call	dword ptr [edx+48h]
		mov	ecx, [ebp+arg_8]
		push	0FFFFFFFFh
		mov	byte ptr [ebp+arg_0+3],	al
		call	sub_6B18C6AF

loc_6B18C9B5:				; DATA XREF: sub_6B18C9E7+3Do
					; sub_6B18CA2A+4Fo
		lea	ecx, [ebp+var_44]
		call	Ordinal1635
		test	eax, eax
		jz	short loc_6B18C9C5
		mov	byte ptr [ebp+arg_0+3],	0

loc_6B18C9C5:				; CODE XREF: Ordinal597+97j
		lea	ecx, [ebp+var_44]
		call	Ordinal1090
		mov	al, byte ptr [ebp+arg_0+3]

loc_6B18C9D0:				; CODE XREF: Ordinal597+2Fj
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal597	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18C9E7	proc near		; DATA XREF: .rdata:6B1BB7C4o
		push	13h
		lea	ecx, [ebp-44h]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-44h]
		call	Ordinal1101
		mov	ecx, [ebp-4Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal1103
		lea	ecx, [ebp-44h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B18C9B5
		retn
sub_6B18C9E7	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18CA2A	proc near		; DATA XREF: .rdata:6B1BB7D4o
		push	15h
		lea	ecx, [ebp-44h]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-44h]
		call	Ordinal1101
		mov	eax, [ebp-48h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal1103
		lea	ecx, [ebp-44h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B18C9B5
		retn
sub_6B18CA2A	endp

; Exported entry 601.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal601
Ordinal601	proc near		; CODE XREF: Ordinal1393+14Bp
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+10h], 0
		and	dword ptr [esi+28h], 0
		push	edi
		lea	ecx, [esi+2Ch]
		mov	dword ptr [esi], offset	off_6B1AEF28
		call	Ordinal1187
		push	0Ch		; Size
		lea	edi, [esi+4]
		push	0		; Val
		push	edi		; Dst
		call	memset
		push	14h		; Size
		lea	eax, [esi+14h]
		push	0		; Val
		push	eax		; Dst
		mov	dword ptr [edi], 0Ch
		call	memset
		add	esp, 18h
		pop	edi
		mov	eax, esi
		pop	esi
		retn
Ordinal601	endp

; Exported entry 605.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal605
Ordinal605	proc near		; CODE XREF: Ordinal1393+15Ap
					; DATA XREF: .rdata:off_6B1BF428o

pDacl		= dword	ptr -18h
pSid		= dword	ptr -14h
var_10		= dword	ptr -10h
pIdentifierAuthority= _SID_IDENTIFIER_AUTHORITY	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		mov	[ebp+var_4], eax
		mov	[esi+10h], ebx
		mov	[esi+28h], ebx
		call	Ordinal1261
		test	al, al
		jz	short loc_6B18CAEC
		xor	eax, eax
		inc	eax
		jmp	loc_6B18CC63
; ---------------------------------------------------------------------------

loc_6B18CAEC:				; CODE XREF: Ordinal605+21j
		push	edi
		lea	eax, [ebp+pSid]
		push	eax		; pSid
		push	ebx		; nSubAuthority7
		push	ebx		; nSubAuthority6
		push	ebx		; nSubAuthority5
		push	ebx		; nSubAuthority4
		push	ebx		; nSubAuthority3
		push	ebx		; nSubAuthority2
		push	220h		; nSubAuthority1
		push	20h		; nSubAuthority0
		push	2		; nSubAuthorityCount
		lea	eax, [ebp+pIdentifierAuthority]
		push	eax		; pIdentifierAuthority
		mov	[ebp+pSid], ebx
		mov	[ebp+var_10], ebx
		mov	[ebp+pIdentifierAuthority.Value], bl
		mov	[ebp+pIdentifierAuthority.Value+1], bl
		mov	[ebp+pIdentifierAuthority.Value+2], bl
		mov	[ebp+pIdentifierAuthority.Value+3], bl
		mov	[ebp+pIdentifierAuthority.Value+4], bl
		mov	[ebp+pIdentifierAuthority.Value+5], 5
		call	AllocateAndInitializeSid
		test	eax, eax
		jz	short loc_6B18CB52
		push	[ebp+pSid]	; pSid
		call	GetLengthSid
		mov	edi, eax
		lea	eax, [ebp+var_10]
		push	eax		; pSid
		push	ebx		; nSubAuthority7
		push	ebx		; nSubAuthority6
		push	ebx		; nSubAuthority5
		push	ebx		; nSubAuthority4
		push	ebx		; nSubAuthority3
		push	ebx		; nSubAuthority2
		push	ebx		; nSubAuthority1
		push	12h		; nSubAuthority0
		push	1		; nSubAuthorityCount
		lea	eax, [ebp+pIdentifierAuthority]
		push	eax		; pIdentifierAuthority
		add	edi, 10h
		call	AllocateAndInitializeSid
		test	eax, eax
		jnz	short loc_6B18CB63

loc_6B18CB52:				; CODE XREF: Ordinal605+64j
		call	ds:GetLastError
		push	eax
		push	offset aCadmindaclCrea ; "CAdminDacl::Create() : AllocateAndIniti"...
		jmp	loc_6B18CC36
; ---------------------------------------------------------------------------

loc_6B18CB63:				; CODE XREF: Ordinal605+8Fj
		push	[ebp+var_10]	; pSid
		call	GetLengthSid
		lea	edi, [edi+eax+8]
		lea	eax, [esi+14h]
		push	1		; dwRevision
		push	eax		; pSecurityDescriptor
		call	InitializeSecurityDescriptor
		test	eax, eax
		jnz	short loc_6B18CB91
		call	ds:GetLastError
		push	eax
		push	offset aCadmindaclCr_0 ; "CAdminDacl::Create() : InitializeSecuri"...
		jmp	loc_6B18CC36
; ---------------------------------------------------------------------------

loc_6B18CB91:				; CODE XREF: Ordinal605+BDj
		push	edi		; Args
		lea	ecx, [esi+2Ch]
		call	Ordinal1196
		cmp	eax, ebx
		mov	[ebp+pDacl], eax
		jnz	short loc_6B18CBA8
		push	offset aCadmindaclCr_1 ; "CAdminDacl::Create() : m_AclMem.NewAllo"...
		jmp	short loc_6B18CBBB
; ---------------------------------------------------------------------------

loc_6B18CBA8:				; CODE XREF: Ordinal605+DEj
		push	2		; dwAclRevision
		push	edi		; nAclLength
		push	eax		; pAcl
		call	InitializeAcl
		test	eax, eax
		jnz	short loc_6B18CBC2
		push	offset aCadmindaclCr_2 ; "CAdminDacl::Create() : InitializeAcl() "...

loc_6B18CBBB:				; CODE XREF: Ordinal605+E5j
		call	sub_6B18102E
		jmp	short loc_6B18CC3C
; ---------------------------------------------------------------------------

loc_6B18CBC2:				; CODE XREF: Ordinal605+F3j
		push	[ebp+var_10]	; pSid
		mov	edi, AddAccessAllowedAce
		push	10000000h	; AccessMask
		push	2		; dwAceRevision
		push	[ebp+pDacl]	; pAcl
		call	edi ; AddAccessAllowedAce
		test	eax, eax
		jz	short loc_6B18CC2A
		push	[ebp+pSid]	; pSid
		push	10000000h	; AccessMask
		push	2		; dwAceRevision
		push	[ebp+pDacl]	; pAcl
		call	edi ; AddAccessAllowedAce
		test	eax, eax
		jz	short loc_6B18CC2A
		push	ebx		; bDaclDefaulted
		push	[ebp+pDacl]	; pDacl
		lea	eax, [esi+14h]
		push	1		; bDaclPresent
		lea	edi, [esi+4]
		push	eax		; pSecurityDescriptor
		mov	dword ptr [edi], 0Ch
		mov	[esi+8], eax
		mov	[esi+0Ch], ebx
		call	SetSecurityDescriptorDacl
		test	eax, eax
		jnz	short loc_6B18CC1F
		call	ds:GetLastError
		push	eax
		push	offset aCadmindaclCr_3 ; "CAdminDacl::Create() : SetSecurityDescr"...
		jmp	short loc_6B18CC36
; ---------------------------------------------------------------------------

loc_6B18CC1F:				; CODE XREF: Ordinal605+14Ej
		lea	eax, [esi+14h]
		mov	[esi+10h], edi
		mov	[esi+28h], eax
		jmp	short loc_6B18CC3D
; ---------------------------------------------------------------------------

loc_6B18CC2A:				; CODE XREF: Ordinal605+118j
					; Ordinal605+12Bj
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCadmindaclCr_4 ; "CAdminDacl::Create() : AddAccessAllowed"...

loc_6B18CC36:				; CODE XREF: Ordinal605+9Dj
					; Ordinal605+CBj ...
		call	sub_6B18102E
		pop	ecx

loc_6B18CC3C:				; CODE XREF: Ordinal605+FFj
		pop	ecx

loc_6B18CC3D:				; CODE XREF: Ordinal605+167j
		cmp	[ebp+var_10], ebx
		mov	edi, FreeSid
		jz	short loc_6B18CC50
		push	[ebp+var_10]	; pSid
		call	edi ; FreeSid
		mov	[ebp+var_10], ebx

loc_6B18CC50:				; CODE XREF: Ordinal605+185j
		cmp	[ebp+pSid], ebx
		jz	short loc_6B18CC5A
		push	[ebp+pSid]	; pSid
		call	edi ; FreeSid

loc_6B18CC5A:				; CODE XREF: Ordinal605+192j
		xor	eax, eax
		cmp	[esi+28h], ebx
		pop	edi
		setnz	al

loc_6B18CC63:				; CODE XREF: Ordinal605+26j
		mov	ecx, [ebp+var_4]
		pop	esi
		pop	ebx
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn
Ordinal605	endp ; sp-analysis failed

; Exported entry 606.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal606
Ordinal606	proc near		; CODE XREF: Ordinal602+9p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		push	edi
		mov	esi, ecx
		and	dword ptr [esi+28h], 0
		and	dword ptr [esi+10h], 0
		push	0Ch		; Size
		lea	edi, [esi+4]
		push	0		; Val
		push	edi		; Dst
		call	memset
		push	14h		; Size
		lea	eax, [esi+14h]
		push	0		; Val
		push	eax		; Dst
		mov	dword ptr [edi], 0Ch
		call	memset
		add	esp, 18h
		pop	edi
		lea	ecx, [esi+2Ch]
		pop	esi
		jmp	Ordinal1200
Ordinal606	endp

; Exported entry 602.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal602
Ordinal602	proc near		; CODE XREF: sub_6B18CCBF+3p
					; Ordinal1393+613p ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1AEF28
		call	Ordinal606
		lea	ecx, [esi+2Ch]
		pop	esi
		jmp	Ordinal1189
Ordinal602	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B18CCBF(void *, char)
sub_6B18CCBF	proc near		; DATA XREF: .rdata:off_6B1AEF28o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal602
		test	[esp+4+arg_0], 1
		jz	short loc_6B18CCD5
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B18CCD5:				; CODE XREF: sub_6B18CCBF+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B18CCBF	endp

; Exported entry 607.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal607
Ordinal607	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, ecx
		mov	dword ptr [eax], offset	off_6B1AF0AC
		retn
Ordinal607	endp

; Exported entry 608.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal608
Ordinal608	proc near		; DATA XREF: .rdata:6B1BB820o
					; .rdata:off_6B1BF428o
		mov	eax, ecx
		mov	dword ptr [eax], offset	off_6B1AF0AC
		retn	4
Ordinal608	endp

; Exported entry 609.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal609
Ordinal609	proc near		; DATA XREF: .rdata:6B1BB830o
					; .rdata:off_6B1BF428o
		mov	dword ptr [ecx], offset	off_6B1AF0AC
		retn
Ordinal609	endp

; Exported entry 610.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal610
Ordinal610	proc near		; CODE XREF: Ordinal465+7p
					; Ordinal1028+7p ...

arg_0		= dword	ptr  4

		mov	eax, ecx
		xor	ecx, ecx
		mov	[eax+8], ecx
		mov	[eax+0Ch], ecx
		mov	[eax+10h], cl
		mov	[eax+18h], ecx
		mov	[eax+1Ch], ecx
		mov	ecx, [esp+arg_0]
		mov	dword ptr [eax], offset	off_6B1AF0B0
		mov	[eax+20h], ecx
		retn	4
Ordinal610	endp

; Exported entry 611.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal611
Ordinal611	proc near		; CODE XREF: Ordinal466+1Fj
					; Ordinal1029+6j ...
		mov	dword ptr [ecx], offset	off_6B1AF0B0
		retn
Ordinal611	endp

; Exported entry 615.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal615
Ordinal615	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	ebx
		push	esi
		push	edi
		xor	edi, edi
		mov	esi, ecx
		xor	ebx, ebx
		inc	edi
		cmp	[esi+10h], bl
		jz	short loc_6B18CD37
		mov	eax, [esi+18h]
		mov	ecx, [esi+1Ch]
		jmp	short loc_6B18CD3B
; ---------------------------------------------------------------------------

loc_6B18CD37:				; CODE XREF: Ordinal615+Dj
		xor	eax, eax
		xor	ecx, ecx

loc_6B18CD3B:				; CODE XREF: Ordinal615+15j
		mov	edx, [esi]
		push	ecx
		push	eax
		mov	ecx, esi
		call	dword ptr [edx+10h]
		test	eax, eax
		jnz	short loc_6B18CD55
		push	offset aCarchiveResetS ; "CArchive::Reset() : SetPosEx() == FALSE"...
		call	sub_6B18102E
		pop	ecx
		xor	edi, edi

loc_6B18CD55:				; CODE XREF: Ordinal615+26j
		mov	eax, edi
		pop	edi
		mov	[esi+8], ebx
		mov	[esi+0Ch], ebx
		mov	[esi+10h], bl
		mov	[esi+18h], ebx
		mov	[esi+1Ch], ebx
		pop	esi
		pop	ebx
		retn
Ordinal615	endp

; Exported entry 693.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal693
Ordinal693	proc near		; CODE XREF: Ordinal459+4Dp
					; Ordinal524+DAp
					; DATA XREF: ...
		mov	eax, [ecx+8]
		mov	edx, [ecx+0Ch]
		retn
Ordinal693	endp

; Exported entry 698.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal698
Ordinal698	proc near		; CODE XREF: Ordinal612+93p
					; Ordinal696+89p ...

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		xor	eax, eax
		dec	ecx
		cmp	ecx, 0Fh	; switch 16 cases
		ja	short locret_6B18CD92 ;	jumptable 6B18CD84 default case
		movzx	ecx, ds:byte_6B18CD9D[ecx]
		jmp	ds:off_6B18CD95[ecx*4] ; switch	jump

loc_6B18CD8B:				; DATA XREF: .text:off_6B18CD95o
		xor	eax, eax	; jumptable 6B18CD84 cases 0-5,9,11-15
		inc	eax
		jmp	short locret_6B18CD92 ;	jumptable 6B18CD84 default case
; ---------------------------------------------------------------------------

loc_6B18CD90:				; CODE XREF: Ordinal698+13j
					; DATA XREF: .text:off_6B18CD95o
		xor	eax, eax	; jumptable 6B18CD84 cases 6-8,10

locret_6B18CD92:			; CODE XREF: Ordinal698+Aj
					; Ordinal698+1Dj
		retn	4		; jumptable 6B18CD84 default case
Ordinal698	endp

; ---------------------------------------------------------------------------
off_6B18CD95	dd offset loc_6B18CD8B	; DATA XREF: Ordinal698+13r
		dd offset loc_6B18CD90	; jump table for switch	statement
byte_6B18CD9D	db	0,     0,     0,     0 ; DATA XREF: Ordinal698+Cr
		db	0,     0,     1,     1 ; indirect table	for switch statement
		db	1,     0,     1,     0
		db	0,     0,     0,     0
; Exported entry 699.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal699
Ordinal699	proc near		; CODE XREF: Ordinal612+9Fp
					; Ordinal696+95p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		xor	eax, eax
		dec	ecx
		cmp	ecx, 0Fh	; switch 16 cases
		ja	short locret_6B18CDD4 ;	jumptable 6B18CDB9 default case
		jmp	ds:off_6B18CDD7[ecx*4] ; switch	jump

loc_6B18CDC0:				; DATA XREF: .text:off_6B18CDD7o
		xor	eax, eax	; jumptable 6B18CDB9 cases 0,9,11
		inc	eax
		jmp	short locret_6B18CDD4 ;	jumptable 6B18CDB9 default case
; ---------------------------------------------------------------------------

loc_6B18CDC5:				; CODE XREF: Ordinal699+Cj
					; DATA XREF: .text:off_6B18CDD7o
		push	2		; jumptable 6B18CDB9 cases 1,12
		jmp	short loc_6B18CDD3
; ---------------------------------------------------------------------------

loc_6B18CDC9:				; CODE XREF: Ordinal699+Cj
					; DATA XREF: .text:off_6B18CDD7o
		push	4		; jumptable 6B18CDB9 cases 2,5
		jmp	short loc_6B18CDD3
; ---------------------------------------------------------------------------

loc_6B18CDCD:				; CODE XREF: Ordinal699+Cj
					; DATA XREF: .text:off_6B18CDD7o
		push	8		; jumptable 6B18CDB9 cases 3,4,13
		jmp	short loc_6B18CDD3
; ---------------------------------------------------------------------------

loc_6B18CDD1:				; CODE XREF: Ordinal699+Cj
					; DATA XREF: .text:off_6B18CDD7o
		push	10h		; jumptable 6B18CDB9 cases 14,15

loc_6B18CDD3:				; CODE XREF: Ordinal699+1Aj
					; Ordinal699+1Ej ...
		pop	eax

locret_6B18CDD4:			; CODE XREF: Ordinal699+Aj
					; Ordinal699+Cj ...
		retn	4		; jumptable 6B18CDB9 default case
Ordinal699	endp

; ---------------------------------------------------------------------------
off_6B18CDD7	dd offset loc_6B18CDC0	; DATA XREF: Ordinal699+Cr
		dd offset loc_6B18CDC5	; jump table for switch	statement
		dd offset loc_6B18CDC9
		dd offset loc_6B18CDCD
		dd offset loc_6B18CDCD
		dd offset loc_6B18CDC9
		dd offset locret_6B18CDD4
		dd offset locret_6B18CDD4
		dd offset locret_6B18CDD4
		dd offset loc_6B18CDC0
		dd offset locret_6B18CDD4
		dd offset loc_6B18CDC0
		dd offset loc_6B18CDC5
		dd offset loc_6B18CDCD
		dd offset loc_6B18CDD1
		dd offset loc_6B18CDD1
; Exported entry 705.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal705
Ordinal705	proc near		; CODE XREF: Ordinal701+65p
					; DATA XREF: .rdata:off_6B1BF428o

var_24		= byte ptr -24h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 24h
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		lea	ecx, [ebp+var_24]
		xor	ebx, ebx
		call	Ordinal1846
		push	[ebp+arg_0]
		lea	ecx, [ebp+var_24]
		call	Ordinal1867
		test	eax, eax
		jz	short loc_6B18CEB1
		lea	ecx, [ebp+var_24]
		call	Ordinal1873
		test	eax, eax
		jz	short loc_6B18CEB1
		lea	ecx, [ebp+var_24]
		call	Ordinal1874
		push	4
		lea	ecx, [ebp+var_4]
		mov	[ebp+var_4], eax
		mov	eax, [edi]
		push	ecx
		mov	ecx, edi
		call	dword ptr [eax+8]
		test	eax, eax
		jnz	short loc_6B18CE6A
		push	offset aCarchiveWritev ; "CArchive::WriteVariantBuffer() : WriteE"...
		jmp	short loc_6B18CEB6
; ---------------------------------------------------------------------------

loc_6B18CE6A:				; CODE XREF: Ordinal705+4Aj
		mov	esi, [ebp+arg_4]
		add	dword ptr [esi], 4
		lea	ecx, [ebp+var_24]
		call	Ordinal1875
		test	eax, eax
		jnz	short loc_6B18CE83
		push	offset aCarchiveWrit_0 ; "CArchive::WriteVariantBuffer() : varBuf"...
		jmp	short loc_6B18CEB6
; ---------------------------------------------------------------------------

loc_6B18CE83:				; CODE XREF: Ordinal705+63j
		push	[ebp+var_4]
		mov	edx, [edi]
		push	eax
		mov	ecx, edi
		call	dword ptr [edx+8]
		test	eax, eax
		jnz	short loc_6B18CE9F
		push	offset aCarchiveWritev ; "CArchive::WriteVariantBuffer() : WriteE"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18CEA7
; ---------------------------------------------------------------------------

loc_6B18CE9F:				; CODE XREF: Ordinal705+79j
		mov	eax, [ebp+var_4]
		add	[esi], eax
		xor	ebx, ebx
		inc	ebx

loc_6B18CEA7:				; CODE XREF: Ordinal705+86j
		lea	ecx, [ebp+var_24]
		call	Ordinal1876
		jmp	short loc_6B18CEBC
; ---------------------------------------------------------------------------

loc_6B18CEB1:				; CODE XREF: Ordinal705+22j
					; Ordinal705+2Ej
		push	offset aCarchiveWrit_1 ; "CArchive::WriteVariantBuffer() : varBuf"...

loc_6B18CEB6:				; CODE XREF: Ordinal705+51j
					; Ordinal705+6Aj
		call	sub_6B18102E
		pop	ecx

loc_6B18CEBC:				; CODE XREF: Ordinal705+98j
		lea	ecx, [ebp+var_24]
		call	Ordinal1850
		pop	edi
		pop	esi
		mov	eax, ebx
		pop	ebx
		leave
		retn	8
Ordinal705	endp

; Exported entry 706.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal706
Ordinal706	proc near		; CODE XREF: Ordinal702+50p
					; DATA XREF: .rdata:off_6B1BF428o

var_24		= byte ptr -24h
cElements	= dword	ptr -4
pvarg		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 24h
		push	ebx
		push	esi
		mov	esi, ecx
		lea	ecx, [ebp+var_24]
		call	Ordinal1846
		mov	eax, [esi]
		push	4
		lea	ecx, [ebp+cElements]
		push	ecx
		xor	ebx, ebx
		mov	ecx, esi
		mov	[ebp+cElements], ebx
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6B18CF05
		push	offset aCarchiveReadva ; "CArchive::ReadVariantBuffer()	: ReadEx("...
		call	sub_6B18102E
		pop	ecx
		jmp	loc_6B18CF87
; ---------------------------------------------------------------------------

loc_6B18CF05:				; CODE XREF: Ordinal706+26j
		push	edi		; Args
		mov	edi, [ebp+arg_4]
		push	[ebp+cElements]	; cElements
		add	dword ptr [edi], 4
		lea	ecx, [ebp+var_24]
		call	Ordinal1856
		test	eax, eax
		jnz	short loc_6B18CF22
		push	offset aCarchiveRead_0 ; "CArchive::ReadVariantBuffer()	: varBuff"...
		jmp	short loc_6B18CF33
; ---------------------------------------------------------------------------

loc_6B18CF22:				; CODE XREF: Ordinal706+4Cj
		lea	ecx, [ebp+var_24]
		call	Ordinal1875
		test	eax, eax
		jnz	short loc_6B18CF3A
		push	offset aCarchiveRead_1 ; "CArchive::ReadVariantBuffer()	: varBuff"...

loc_6B18CF33:				; CODE XREF: Ordinal706+53j
		call	sub_6B18102E
		jmp	short loc_6B18CF85
; ---------------------------------------------------------------------------

loc_6B18CF3A:				; CODE XREF: Ordinal706+5Fj
		push	[ebp+cElements]
		mov	edx, [esi]
		push	eax
		mov	ecx, esi
		call	dword ptr [edx+4]
		test	eax, eax
		jnz	short loc_6B18CF56
		push	offset aCarchiveReadva ; "CArchive::ReadVariantBuffer()	: ReadEx("...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18CF5E
; ---------------------------------------------------------------------------

loc_6B18CF56:				; CODE XREF: Ordinal706+7Aj
		mov	eax, [ebp+cElements]
		add	[edi], eax
		xor	ebx, ebx
		inc	ebx

loc_6B18CF5E:				; CODE XREF: Ordinal706+87j
		lea	ecx, [ebp+var_24]
		call	Ordinal1876
		test	ebx, ebx
		jz	short loc_6B18CF86
		push	[ebp+pvarg]	; pvarg
		lea	ecx, [ebp+var_24]
		call	Ordinal1865
		test	eax, eax
		jnz	short loc_6B18CF86
		push	offset aCarchiveRead_2 ; "CArchive::ReadVariantBuffer()	: varBuff"...
		call	sub_6B18102E
		xor	ebx, ebx

loc_6B18CF85:				; CODE XREF: Ordinal706+6Bj
		pop	ecx

loc_6B18CF86:				; CODE XREF: Ordinal706+9Bj
					; Ordinal706+AAj
		pop	edi

loc_6B18CF87:				; CODE XREF: Ordinal706+33j
		lea	ecx, [ebp+var_24]
		call	Ordinal1850
		pop	esi
		mov	eax, ebx
		pop	ebx
		leave
		retn	8
Ordinal706	endp

; Exported entry 707.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal707
Ordinal707	proc near		; CODE XREF: Ordinal701+AFp
					; DATA XREF: .rdata:off_6B1BF428o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		and	[ebp+var_4], 0
		push	ebx
		mov	ebx, [ebp+arg_0]
		push	edi
		push	dword ptr [ebx+8] ; bstr
		mov	edi, ecx
		call	ds:SysStringByteLen
		push	4
		lea	ecx, [ebp+arg_0]
		mov	[ebp+arg_0], eax
		mov	eax, [edi]
		push	ecx
		mov	ecx, edi
		call	dword ptr [eax+8]
		test	eax, eax
		jnz	short loc_6B18CFD0
		push	offset aCarchiveWrit_2 ; "CArchive::WriteVariantString() : WriteE"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18D002
; ---------------------------------------------------------------------------

loc_6B18CFD0:				; CODE XREF: Ordinal707+2Aj
		push	esi		; Args
		push	[ebp+arg_0]
		mov	esi, [ebp+arg_4]
		add	dword ptr [esi], 4
		push	dword ptr [ebx+8]
		mov	eax, [edi]
		mov	ecx, edi
		call	dword ptr [eax+8]
		test	eax, eax
		jnz	short loc_6B18CFF5
		push	offset aCarchiveWrit_2 ; "CArchive::WriteVariantString() : WriteE"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18D001
; ---------------------------------------------------------------------------

loc_6B18CFF5:				; CODE XREF: Ordinal707+4Fj
		mov	eax, [ebp+arg_0]
		add	[esi], eax
		mov	[ebp+var_4], 1

loc_6B18D001:				; CODE XREF: Ordinal707+5Cj
		pop	esi

loc_6B18D002:				; CODE XREF: Ordinal707+37j
		mov	eax, [ebp+var_4]
		pop	edi
		pop	ebx
		leave
		retn	8
Ordinal707	endp

; Exported entry 708.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal708
Ordinal708	proc near		; CODE XREF: Ordinal702+9Ap
					; DATA XREF: .rdata:off_6B1BF428o

len		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		push	edi
		mov	edi, ecx
		mov	eax, [edi]
		push	4
		lea	ecx, [ebp+len]
		push	ecx
		xor	ebx, ebx
		mov	ecx, edi
		mov	[ebp+len], ebx
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6B18D036
		push	offset aCarchiveRead_3 ; "CArchive::ReadVariantString()	: ReadEx("...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18D07D
; ---------------------------------------------------------------------------

loc_6B18D036:				; CODE XREF: Ordinal708+1Cj
		push	esi		; Args
		push	[ebp+len]	; len
		mov	esi, [ebp+arg_4]
		add	dword ptr [esi], 4
		push	ebx		; psz
		call	ds:SysAllocStringByteLen
		test	eax, eax
		mov	ecx, [ebp+arg_0]
		mov	[ecx+8], eax
		jnz	short loc_6B18D05E
		push	offset aCarchiveRead_4 ; "CArchive::ReadVariantString()	: SysAllo"...

loc_6B18D056:				; CODE XREF: Ordinal708+67j
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18D07C
; ---------------------------------------------------------------------------

loc_6B18D05E:				; CODE XREF: Ordinal708+44j
		push	[ebp+len]
		mov	edx, [edi]
		push	eax
		mov	ecx, edi
		call	dword ptr [edx+4]
		test	eax, eax
		jnz	short loc_6B18D074
		push	offset aCarchiveRead_3 ; "CArchive::ReadVariantString()	: ReadEx("...
		jmp	short loc_6B18D056
; ---------------------------------------------------------------------------

loc_6B18D074:				; CODE XREF: Ordinal708+60j
		mov	eax, [ebp+len]
		add	[esi], eax
		xor	ebx, ebx
		inc	ebx

loc_6B18D07C:				; CODE XREF: Ordinal708+51j
		pop	esi

loc_6B18D07D:				; CODE XREF: Ordinal708+29j
		pop	edi
		mov	eax, ebx
		pop	ebx
		leave
		retn	8
Ordinal708	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18D085	proc near		; CODE XREF: sub_6B18DAA0+2Cp

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_6B18D094
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+8]

loc_6B18D094:				; CODE XREF: sub_6B18D085+7j
		mov	eax, [esp+4+arg_0]
		mov	[esi], eax
		pop	esi
		retn	4
sub_6B18D085	endp

; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_2. PRESS KEYPAD "+" TO EXPAND]
; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_3. PRESS KEYPAD "+" TO EXPAND]
; Exported entry 612.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal612
Ordinal612	proc near		; CODE XREF: Ordinal613+19p
					; Ordinal614+15p
					; DATA XREF: ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		mov	ebx, [ebp+arg_8]
		push	esi
		mov	esi, ecx
		mov	ecx, [ebp+arg_4]
		xor	eax, eax
		mov	[ecx], eax
		mov	ecx, [ebp+arg_C]
		push	edi
		xor	edi, edi
		mov	[ebx], eax
		inc	edi
		mov	[ecx], eax
		cmp	[esi+20h], edi
		jz	short loc_6B18D103
		push	offset aCarchivePeekM_ ; "CArchive::Peek() : m_eArchiveType != eR"...
		jmp	short loc_6B18D11D
; ---------------------------------------------------------------------------

loc_6B18D103:				; CODE XREF: Ordinal612+22j
		lea	ecx, [ebp+var_C]
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	eax, [esi]
		push	ecx
		mov	ecx, esi
		call	dword ptr [eax+0Ch]
		test	eax, eax
		jnz	short loc_6B18D12A
		push	offset aCarchivePeekGe ; "CArchive::Peek() : GetPosEx()	== FALSE\n"...

loc_6B18D11D:				; CODE XREF: Ordinal612+29j
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6B18D1BA
; ---------------------------------------------------------------------------

loc_6B18D12A:				; CODE XREF: Ordinal612+3Ej
		cmp	byte ptr [esi+10h], 0
		jnz	short loc_6B18D140
		mov	eax, [ebp+var_C]
		mov	[esi+18h], eax
		mov	eax, [ebp+var_8]
		mov	[esi+1Ch], eax
		mov	byte ptr [esi+10h], 1

loc_6B18D140:				; CODE XREF: Ordinal612+56j
		mov	eax, [esi]
		and	[ebp+var_4], 0
		push	edi
		lea	ecx, [ebp+arg_8+3]
		push	ecx
		mov	ecx, esi
		mov	byte ptr [ebp+arg_8+3],	0
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6B18D15F
		push	offset aCarchivePeekRe ; "CArchive::Peek() : ReadEx() == FALSE\n"
		jmp	short loc_6B18D191
; ---------------------------------------------------------------------------

loc_6B18D15F:				; CODE XREF: Ordinal612+7Ej
		movzx	edx, byte ptr [ebp+arg_8+3]
		mov	eax, [ebp+arg_4]
		push	edx
		mov	ecx, esi
		mov	[eax], edx
		call	Ordinal698
		test	eax, eax
		mov	ecx, esi
		jz	short loc_6B18D180
		push	edx
		call	Ordinal699
		mov	[ebx], eax
		jmp	short loc_6B18D1C4
; ---------------------------------------------------------------------------

loc_6B18D180:				; CODE XREF: Ordinal612+9Cj
		mov	eax, [esi]
		push	4
		push	ebx
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6B18D1C1
		push	offset aCarchivePeakRe ; "CArchive::Peak() : ReadEx() == FALSE\n"

loc_6B18D191:				; CODE XREF: Ordinal612+85j
		call	sub_6B18102E
		pop	ecx

loc_6B18D197:				; CODE XREF: Ordinal612+F7j
		push	[ebp+var_8]
		mov	eax, [esi]
		push	[ebp+var_C]
		mov	ecx, esi
		call	dword ptr [eax+10h]
		test	eax, eax
		jnz	short loc_6B18D1B7
		push	offset aCarchivePeekSe ; "CArchive::Peek() : SetPosEx()	== FALSE\n"...
		call	sub_6B18102E
		and	[ebp+var_4], 0
		pop	ecx

loc_6B18D1B7:				; CODE XREF: Ordinal612+CEj
		mov	eax, [ebp+var_4]

loc_6B18D1BA:				; CODE XREF: Ordinal612+4Dj
					; Ordinal612+133j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	10h
; ---------------------------------------------------------------------------

loc_6B18D1C1:				; CODE XREF: Ordinal612+B2j
		push	5
		pop	edi

loc_6B18D1C4:				; CODE XREF: Ordinal612+A6j
		cmp	[ebp+arg_0], 0
		mov	[ebp+var_4], 1
		jz	short loc_6B18D197
		add	edi, [ebx]
		mov	eax, [esi]
		xor	ebx, ebx
		mov	ecx, edi
		add	ecx, [ebp+var_C]
		mov	edx, ebx
		adc	edx, [ebp+var_8]
		push	edx
		push	ecx
		mov	ecx, esi
		call	dword ptr [eax+10h]
		test	eax, eax
		jz	short loc_6B18D1F4
		add	[esi+8], edi
		adc	[esi+0Ch], ebx
		jmp	short loc_6B18D208
; ---------------------------------------------------------------------------

loc_6B18D1F4:				; CODE XREF: Ordinal612+112j
		push	offset aCarchivePeekSe ; "CArchive::Peek() : SetPosEx()	== FALSE\n"...
		call	sub_6B18101A
		mov	eax, [ebp+arg_C]
		pop	ecx
		mov	dword ptr [eax], 1

loc_6B18D208:				; CODE XREF: Ordinal612+11Aj
		xor	eax, eax
		inc	eax
		jmp	short loc_6B18D1BA
Ordinal612	endp

; Exported entry 613.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal613
Ordinal613	proc near		; CODE XREF: Ordinal652+1Bp
					; Ordinal642+30p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	eax, [ebp+arg_0]
		push	esi
		xor	edx, edx
		lea	esi, [ebp+arg_0]
		push	esi
		push	eax
		mov	[eax], edx
		lea	eax, [ebp+var_4]
		push	eax
		push	edx
		mov	[ebp+var_4], edx
		call	Ordinal612
		pop	esi
		leave
		retn	4
Ordinal613	endp

; Exported entry 614.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal614
Ordinal614	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		and	[ebp+var_4], 0
		lea	eax, [ebp+arg_0]
		push	eax
		lea	eax, [ebp+var_4]
		push	eax
		push	[ebp+arg_0]
		push	0
		call	Ordinal612
		leave
		retn	4
Ordinal614	endp

; Exported entry 696.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal696
Ordinal696	proc near		; CODE XREF: Ordinal641+Ep
					; Ordinal646+Ep ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		mov	ebx, [ebp+arg_C]
		push	esi
		push	edi
		xor	edi, edi
		xor	eax, eax
		mov	esi, ecx
		inc	edi
		mov	[ebx], eax
		cmp	[esi+20h], edi
		jz	short loc_6B18D26F
		push	offset aCarchiveReadM_ ; "CArchive::Read() : m_eArchiveType != eR"...
		jmp	short loc_6B18D289
; ---------------------------------------------------------------------------

loc_6B18D26F:				; CODE XREF: Ordinal696+18j
		lea	ecx, [ebp+var_C]
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	eax, [esi]
		push	ecx
		mov	ecx, esi
		call	dword ptr [eax+0Ch]
		test	eax, eax
		jnz	short loc_6B18D296
		push	offset aCarchiveWriteG ; "CArchive::Write() : GetPosEx() == FALSE"...

loc_6B18D289:				; CODE XREF: Ordinal696+1Fj
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6B18D354
; ---------------------------------------------------------------------------

loc_6B18D296:				; CODE XREF: Ordinal696+34j
		cmp	byte ptr [esi+10h], 0
		jnz	short loc_6B18D2AC
		mov	eax, [ebp+var_C]
		mov	[esi+18h], eax
		mov	eax, [ebp+var_8]
		mov	[esi+1Ch], eax
		mov	byte ptr [esi+10h], 1

loc_6B18D2AC:				; CODE XREF: Ordinal696+4Cj
		mov	eax, [esi]
		and	[ebp+var_4], 0
		push	edi
		lea	ecx, [ebp+arg_C+3]
		push	ecx
		mov	ecx, esi
		mov	byte ptr [ebp+arg_C+3],	0
		call	dword ptr [eax+4]
		test	eax, eax
		jz	short loc_6B18D318
		movzx	edx, byte ptr [ebp+arg_C+3]
		cmp	edx, [ebp+arg_0]
		jz	short loc_6B18D2D4
		push	offset aCarchiveReadEr ; "CArchive::Read() : eReadType != eDataTy"...
		jmp	short loc_6B18D31D
; ---------------------------------------------------------------------------

loc_6B18D2D4:				; CODE XREF: Ordinal696+7Dj
		push	edx
		mov	ecx, esi
		call	Ordinal698
		test	eax, eax
		mov	ecx, esi
		jz	short loc_6B18D2EC
		push	edx
		call	Ordinal699
		mov	[ebx], eax
		jmp	short loc_6B18D2FB
; ---------------------------------------------------------------------------

loc_6B18D2EC:				; CODE XREF: Ordinal696+92j
		mov	eax, [esi]
		push	4
		push	ebx
		call	dword ptr [eax+4]
		test	eax, eax
		jz	short loc_6B18D318
		push	5
		pop	edi

loc_6B18D2FB:				; CODE XREF: Ordinal696+9Cj
		mov	eax, [ebx]
		cmp	[ebp+arg_8], eax
		jnb	short loc_6B18D309
		push	offset aCarchiveReadDw ; "CArchive::Read() : dwSize < dwRead\n"
		jmp	short loc_6B18D31D
; ---------------------------------------------------------------------------

loc_6B18D309:				; CODE XREF: Ordinal696+B2j
		mov	edx, [esi]
		push	eax
		push	[ebp+arg_4]
		mov	ecx, esi
		call	dword ptr [edx+4]
		test	eax, eax
		jnz	short loc_6B18D341

loc_6B18D318:				; CODE XREF: Ordinal696+74j
					; Ordinal696+A8j
		push	offset aCarchiveReadRe ; "CArchive::Read() : ReadEx() == FALSE\n"

loc_6B18D31D:				; CODE XREF: Ordinal696+84j
					; Ordinal696+B9j
		call	sub_6B18102E
		mov	eax, [esi]
		pop	ecx
		push	[ebp+var_8]
		mov	ecx, esi
		push	[ebp+var_C]
		call	dword ptr [eax+10h]
		test	eax, eax
		jnz	short loc_6B18D351
		push	offset aCarchiveReadSe ; "CArchive::Read() : SetPosEx()	== FALSE\n"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18D351
; ---------------------------------------------------------------------------

loc_6B18D341:				; CODE XREF: Ordinal696+C8j
		add	edi, [ebx]
		mov	[ebp+var_4], 1
		add	[esi+8], edi
		adc	dword ptr [esi+0Ch], 0

loc_6B18D351:				; CODE XREF: Ordinal696+E4j
					; Ordinal696+F1j
		mov	eax, [ebp+var_4]

loc_6B18D354:				; CODE XREF: Ordinal696+43j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	10h
Ordinal696	endp

; Exported entry 697.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal697
Ordinal697	proc near		; CODE XREF: Ordinal617+9p
					; Ordinal619+9p ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+20h], 2
		jz	short loc_6B18D37C
		push	offset aCarchiveWriteM ; "CArchive::Write() : m_eArchiveType !=	e"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6B18D449
; ---------------------------------------------------------------------------

loc_6B18D37C:				; CODE XREF: Ordinal697+Dj
		mov	eax, [esi]
		push	edi		; Args
		lea	ecx, [ebp+var_C]
		xor	edi, edi
		push	ecx
		mov	ecx, esi
		mov	[ebp+var_C], edi
		mov	[ebp+var_8], edi
		call	dword ptr [eax+0Ch]
		test	eax, eax
		jnz	short loc_6B18D3A6
		push	offset aCarchiveWriteG ; "CArchive::Write() : GetPosEx() == FALSE"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6B18D448
; ---------------------------------------------------------------------------

loc_6B18D3A6:				; CODE XREF: Ordinal697+37j
		cmp	byte ptr [esi+10h], 0
		jnz	short loc_6B18D3BC
		mov	eax, [ebp+var_C]
		mov	[esi+18h], eax
		mov	eax, [ebp+var_8]
		mov	[esi+1Ch], eax
		mov	byte ptr [esi+10h], 1

loc_6B18D3BC:				; CODE XREF: Ordinal697+4Fj
		mov	eax, [esi]
		mov	[ebp+var_4], edi
		push	ebx		; Args
		mov	ebx, [ebp+arg_0]
		xor	edi, edi
		inc	edi
		push	edi
		lea	ecx, [ebp+arg_0+3]
		push	ecx
		mov	ecx, esi
		mov	byte ptr [ebp+arg_0+3],	bl
		call	dword ptr [eax+8]
		test	eax, eax
		jz	short loc_6B18D40A
		push	ebx
		mov	ecx, esi
		call	Ordinal698
		test	eax, eax
		jnz	short loc_6B18D3F9
		mov	eax, [esi]
		push	4
		lea	ecx, [ebp+arg_8]
		push	ecx
		mov	ecx, esi
		call	dword ptr [eax+8]
		test	eax, eax
		jz	short loc_6B18D40A
		push	5
		pop	edi

loc_6B18D3F9:				; CODE XREF: Ordinal697+88j
		push	[ebp+arg_8]
		mov	eax, [esi]
		push	[ebp+arg_4]
		mov	ecx, esi
		call	dword ptr [eax+8]
		test	eax, eax
		jnz	short loc_6B18D433

loc_6B18D40A:				; CODE XREF: Ordinal697+7Cj
					; Ordinal697+99j
		push	offset aCarchiveWriteW ; "CArchive::Write() : WriteEx()	== FALSE\n"...
		call	sub_6B18102E
		mov	eax, [esi]
		pop	ecx
		push	[ebp+var_8]
		mov	ecx, esi
		push	[ebp+var_C]
		call	dword ptr [eax+10h]
		test	eax, eax
		jnz	short loc_6B18D444
		push	offset aCarchiveWriteS ; "CArchive::Write() : SetPosEx() == FALSE"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18D444
; ---------------------------------------------------------------------------

loc_6B18D433:				; CODE XREF: Ordinal697+ADj
		add	edi, [ebp+arg_8]
		mov	[ebp+var_4], 1
		add	[esi+8], edi
		adc	dword ptr [esi+0Ch], 0

loc_6B18D444:				; CODE XREF: Ordinal697+C9j
					; Ordinal697+D6j
		mov	eax, [ebp+var_4]
		pop	ebx

loc_6B18D448:				; CODE XREF: Ordinal697+46j
		pop	edi

loc_6B18D449:				; CODE XREF: Ordinal697+1Cj
		pop	esi
		leave
		retn	0Ch
Ordinal697	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18D44E	proc near		; CODE XREF: Ordinal710+B2p
					; Ordinal709+57p
		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_6B18D45D
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+8]

loc_6B18D45D:				; CODE XREF: sub_6B18D44E+7j
		and	dword ptr [esi], 0
		mov	eax, esi
		pop	esi
		retn
sub_6B18D44E	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18D464	proc near		; CODE XREF: sub_6B18DAA0+37p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, ecx
		push	edi
		mov	edi, [esi]
		cmp	edi, eax
		jz	short loc_6B18D488
		test	eax, eax
		mov	[esi], eax
		jz	short loc_6B18D47E
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+4]

loc_6B18D47E:				; CODE XREF: sub_6B18D464+12j
		test	edi, edi
		jz	short loc_6B18D488
		mov	eax, [edi]
		push	edi
		call	dword ptr [eax+8]

loc_6B18D488:				; CODE XREF: sub_6B18D464+Cj
					; sub_6B18D464+1Cj
		pop	edi
		mov	eax, esi
		pop	esi
		retn	4
sub_6B18D464	endp

; Exported entry 617.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal617
Ordinal617	proc near		; CODE XREF: Ordinal591+33p
					; Ordinal591+45p ...

arg_0		= byte ptr  4

		push	1
		lea	eax, [esp+4+arg_0]
		push	eax
		push	0Ah
		call	Ordinal697
		retn	4
Ordinal617	endp

; Exported entry 619.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal619
Ordinal619	proc near		; CODE XREF: Ordinal533+6Ap
					; Ordinal662+9p
					; DATA XREF: ...

arg_0		= byte ptr  4

		push	1
		lea	eax, [esp+4+arg_0]
		push	eax
		push	0Ch
		call	Ordinal697
		retn	4
Ordinal619	endp

; Exported entry 621.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal621
Ordinal621	proc near		; CODE XREF: Ordinal533+21p
					; Ordinal533+7Cp ...

arg_0		= byte ptr  4

		push	1
		lea	eax, [esp+4+arg_0]
		push	eax
		push	1
		call	Ordinal697
		retn	4
Ordinal621	endp

; Exported entry 623.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal623
Ordinal623	proc near		; CODE XREF: Ordinal533+8Fp
					; Ordinal666+9p
					; DATA XREF: ...

arg_0		= byte ptr  4

		push	2
		lea	eax, [esp+4+arg_0]
		push	eax
		push	0Dh
		call	Ordinal697
		retn	4
Ordinal623	endp

; Exported entry 625.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal625
Ordinal625	proc near		; CODE XREF: Ordinal533+A2p
					; Ordinal668+9p
					; DATA XREF: ...

arg_0		= byte ptr  4

		push	2
		lea	eax, [esp+4+arg_0]
		push	eax
		push	2
		call	Ordinal697
		retn	4
Ordinal625	endp

; Exported entry 627.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal627
Ordinal627	proc near		; CODE XREF: Ordinal192+3Bp
					; Ordinal306+3Ep ...

arg_0		= byte ptr  4

		push	4
		lea	eax, [esp+4+arg_0]
		push	eax
		push	6
		call	Ordinal697
		retn	4
Ordinal627	endp

; Exported entry 629.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal629
Ordinal629	proc near		; CODE XREF: Ordinal533+C0p
					; Ordinal658j ...

arg_0		= byte ptr  4

		push	4
		lea	eax, [esp+4+arg_0]
		push	eax
		push	3
		call	Ordinal697
		retn	4
Ordinal629	endp

; Exported entry 631.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal631
Ordinal631	proc near		; CODE XREF: Ordinal533+CFp
					; Ordinal674+Cp
					; DATA XREF: ...

arg_0		= byte ptr  4

		push	8
		lea	eax, [esp+4+arg_0]
		push	eax
		push	0Eh
		call	Ordinal697
		retn	8
Ordinal631	endp

; Exported entry 633.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal633
Ordinal633	proc near		; CODE XREF: Ordinal533+DEp
					; Ordinal676+Cp
					; DATA XREF: ...

arg_0		= byte ptr  4

		push	8
		lea	eax, [esp+4+arg_0]
		push	eax
		push	4
		call	Ordinal697
		retn	8
Ordinal633	endp

; Exported entry 635.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal635
Ordinal635	proc near		; CODE XREF: Ordinal533+EFp
					; Ordinal678+Ep
					; DATA XREF: ...

arg_0		= byte ptr  4

		push	8
		lea	eax, [esp+4+arg_0]
		push	eax
		push	5
		call	Ordinal697
		retn	8
Ordinal635	endp

; Exported entry 637.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal637
Ordinal637	proc near		; CODE XREF: Ordinal533+FCp
					; Ordinal680+9p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	10h
		push	[esp+4+arg_0]
		push	0Fh
		call	Ordinal697
		retn	4
Ordinal637	endp

; Exported entry 639.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal639
Ordinal639	proc near		; CODE XREF: Ordinal533+109p
					; Ordinal682+9p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	10h
		push	[esp+4+arg_0]
		push	10h
		call	Ordinal697
		retn	4
Ordinal639	endp

; Exported entry 641.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal641
Ordinal641	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		push	7
		call	Ordinal696
		retn	0Ch
Ordinal641	endp

; Exported entry 643.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal643(LPCSTR lpString)
		public Ordinal643
Ordinal643	proc near		; CODE XREF: Ordinal644+6p
					; Ordinal683+9p
					; DATA XREF: ...

lpString	= dword	ptr  4

		push	esi
		push	[esp+4+lpString] ; lpString
		mov	esi, ecx
		call	ds:lstrlenA
		inc	eax
		push	eax
		push	[esp+8+lpString]
		mov	ecx, esi
		push	7
		call	Ordinal697
		pop	esi
		retn	4
Ordinal643	endp

; Exported entry 644.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal644
Ordinal644	proc near		; CODE XREF: Ordinal507+63p
					; Ordinal533+116p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax]	; lpString
		call	Ordinal643
		retn	4
Ordinal644	endp

; Exported entry 646.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal646
Ordinal646	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		push	8
		call	Ordinal696
		retn	0Ch
Ordinal646	endp

; Exported entry 648.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal648(LPCWSTR lpString)
		public Ordinal648
Ordinal648	proc near		; CODE XREF: Ordinal649+6p
					; Ordinal686+9p
					; DATA XREF: ...

lpString	= dword	ptr  4

		push	esi
		push	[esp+4+lpString] ; lpString
		mov	esi, ecx
		call	ds:lstrlenW
		lea	eax, [eax+eax+2]
		push	eax
		push	[esp+8+lpString]
		mov	ecx, esi
		push	8
		call	Ordinal697
		pop	esi
		retn	4
Ordinal648	endp

; Exported entry 649.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal649
Ordinal649	proc near		; CODE XREF: Ordinal507+56p
					; Ordinal533+123p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax]	; lpString
		call	Ordinal648
		retn	4
Ordinal649	endp

; Exported entry 651.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal651
Ordinal651	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		push	9
		call	Ordinal696
		retn	0Ch
Ordinal651	endp

; Exported entry 653.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal653
Ordinal653	proc near		; CODE XREF: Ordinal533+1F0p
					; Ordinal654+19p
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	9
		call	Ordinal697
		retn	8
Ordinal653	endp

; Exported entry 654.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal654
Ordinal654	proc near		; CODE XREF: Ordinal391+34p
					; Ordinal533+130p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	ecx, [esp+4+arg_0]
		call	Ordinal1052
		mov	ecx, [esp+4+arg_0]
		push	eax
		call	Ordinal1493
		push	eax
		mov	ecx, esi
		call	Ordinal653
		pop	esi
		retn	4
Ordinal654	endp

; Exported entry 658.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal658
Ordinal658	proc near		; CODE XREF: Ordinal192+4Dp
					; Ordinal192+6Fp ...
		jmp	Ordinal629
Ordinal658	endp

; Exported entry 660.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal660
Ordinal660	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal617
		test	eax, eax
		jnz	short loc_6B18D65A
		push	offset dword_6B1BB82C
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18D65A:				; CODE XREF: Ordinal660+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal660	endp

; Exported entry 662.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal662
Ordinal662	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal619
		test	eax, eax
		jnz	short loc_6B18D688
		push	offset dword_6B1BB82C
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18D688:				; CODE XREF: Ordinal662+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal662	endp

; Exported entry 664.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal664
Ordinal664	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal621
		test	eax, eax
		jnz	short loc_6B18D6B6
		push	offset dword_6B1BB82C
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18D6B6:				; CODE XREF: Ordinal664+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal664	endp

; Exported entry 666.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal666
Ordinal666	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal623
		test	eax, eax
		jnz	short loc_6B18D6E4
		push	offset dword_6B1BB82C
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18D6E4:				; CODE XREF: Ordinal666+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal666	endp

; Exported entry 668.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal668
Ordinal668	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal625
		test	eax, eax
		jnz	short loc_6B18D712
		push	offset dword_6B1BB82C
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18D712:				; CODE XREF: Ordinal668+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal668	endp

; Exported entry 670.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal670
Ordinal670	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal627
		test	eax, eax
		jnz	short loc_6B18D740
		push	offset dword_6B1BB82C
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18D740:				; CODE XREF: Ordinal670+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal670	endp

; Exported entry 672.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal672
Ordinal672	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal629
		test	eax, eax
		jnz	short loc_6B18D76E
		push	offset dword_6B1BB82C
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18D76E:				; CODE XREF: Ordinal672+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal672	endp

; Exported entry 674.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal674
Ordinal674	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_4]
		mov	esi, ecx
		push	[ebp+arg_0]
		call	Ordinal631
		test	eax, eax
		jnz	short loc_6B18D79F
		push	offset dword_6B1BB82C
		lea	eax, [ebp+arg_4]
		push	eax
		mov	[ebp+arg_4], offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18D79F:				; CODE XREF: Ordinal674+13j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	8
Ordinal674	endp

; Exported entry 676.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal676
Ordinal676	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_4]
		mov	esi, ecx
		push	[ebp+arg_0]
		call	Ordinal633
		test	eax, eax
		jnz	short loc_6B18D7D0
		push	offset dword_6B1BB82C
		lea	eax, [ebp+arg_4]
		push	eax
		mov	[ebp+arg_4], offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18D7D0:				; CODE XREF: Ordinal676+13j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	8
Ordinal676	endp

; Exported entry 678.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal678(double)
		public Ordinal678
Ordinal678	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= qword	ptr -0Ch
arg_0		= qword	ptr  8

		push	ebp
		mov	ebp, esp
		fld	[ebp+arg_0]
		push	esi
		push	ecx
		push	ecx
		fstp	[esp+0Ch+var_C]
		mov	esi, ecx
		call	Ordinal635
		test	eax, eax
		jnz	short loc_6B18D803
		push	offset dword_6B1BB82C
		lea	eax, [ebp+arg_0+4]
		push	eax
		mov	dword ptr [ebp+arg_0+4], offset	off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18D803:				; CODE XREF: Ordinal678+15j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	8
Ordinal678	endp

; Exported entry 680.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal680
Ordinal680	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal637
		test	eax, eax
		jnz	short loc_6B18D831
		push	offset dword_6B1BB82C
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18D831:				; CODE XREF: Ordinal680+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal680	endp

; Exported entry 682.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal682
Ordinal682	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal639
		test	eax, eax
		jnz	short loc_6B18D85F
		push	offset dword_6B1BB82C
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18D85F:				; CODE XREF: Ordinal682+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal682	endp

; Exported entry 683.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal683(LPCSTR lpString)
		public Ordinal683
Ordinal683	proc near		; DATA XREF: .rdata:off_6B1BF428o

lpString	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+lpString]	; lpString
		mov	esi, ecx
		call	Ordinal643
		test	eax, eax
		jnz	short loc_6B18D88D
		push	offset dword_6B1BB82C
		lea	eax, [ebp+lpString]
		push	eax
		mov	[ebp+lpString],	offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18D88D:				; CODE XREF: Ordinal683+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal683	endp

; Exported entry 684.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal684
Ordinal684	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal644
		test	eax, eax
		jnz	short loc_6B18D8BB
		push	offset dword_6B1BB82C
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18D8BB:				; CODE XREF: Ordinal684+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal684	endp

; Exported entry 686.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal686(LPCWSTR lpString)
		public Ordinal686
Ordinal686	proc near		; DATA XREF: .rdata:off_6B1BF428o

lpString	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+lpString]	; lpString
		mov	esi, ecx
		call	Ordinal648
		test	eax, eax
		jnz	short loc_6B18D8E9
		push	offset dword_6B1BB82C
		lea	eax, [ebp+lpString]
		push	eax
		mov	[ebp+lpString],	offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18D8E9:				; CODE XREF: Ordinal686+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal686	endp

; Exported entry 687.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal687
Ordinal687	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal649
		test	eax, eax
		jnz	short loc_6B18D917
		push	offset dword_6B1BB82C
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18D917:				; CODE XREF: Ordinal687+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal687	endp

; Exported entry 690.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal690
Ordinal690	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal654
		test	eax, eax
		jnz	short loc_6B18D945
		push	offset dword_6B1BB82C
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18D945:				; CODE XREF: Ordinal690+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal690	endp

; Exported entry 695.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal695
Ordinal695	proc near		; CODE XREF: Ordinal616+8p
					; Ordinal618+8p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_4]
		push	eax
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	Ordinal696
		leave
		retn	0Ch
Ordinal695	endp

; Exported entry 710.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal710
Ordinal710	proc near		; CODE XREF: Ordinal702+D5p
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= dword	ptr -0Ch
dwBytes		= dword	ptr -8
pStm		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		and	[ebp+var_C], 0
		and	[ebp+dwBytes], 0
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		mov	eax, [edi]
		push	4
		lea	ecx, [ebp+dwBytes]
		push	ecx
		mov	ecx, edi
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6B18D99E
		push	offset aCarchiveRead_5 ; "CArchive::ReadVariantObject()	: ReadEx("...
		call	sub_6B18102E
		pop	ecx
		jmp	loc_6B18DA4F
; ---------------------------------------------------------------------------

loc_6B18D99E:				; CODE XREF: Ordinal710+22j
		push	[ebp+dwBytes]	; dwBytes
		mov	esi, [ebp+arg_4]
		add	dword ptr [esi], 4
		push	2		; uFlags
		call	ds:GlobalAlloc
		mov	ebx, eax
		test	ebx, ebx
		jnz	short loc_6B18D9BC
		push	offset aCarchiveRead_6 ; "CArchive::ReadVariantObject()	: GlobalA"...
		jmp	short loc_6B18D9CC
; ---------------------------------------------------------------------------

loc_6B18D9BC:				; CODE XREF: Ordinal710+49j
		push	ebx		; hMem
		call	ds:GlobalLock
		test	eax, eax
		jnz	short loc_6B18D9D4
		push	offset aCarchiveRead_7 ; "CArchive::ReadVariantObject()	: GlobalL"...

loc_6B18D9CC:				; CODE XREF: Ordinal710+50j
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18DA08
; ---------------------------------------------------------------------------

loc_6B18D9D4:				; CODE XREF: Ordinal710+5Bj
		push	[ebp+dwBytes]
		mov	edx, [edi]
		push	eax
		mov	ecx, edi
		call	dword ptr [edx+4]
		xor	edi, edi
		inc	edi
		test	eax, eax
		jnz	short loc_6B18D9F3
		push	offset aCarchiveRead_5 ; "CArchive::ReadVariantObject()	: ReadEx("...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18D9FB
; ---------------------------------------------------------------------------

loc_6B18D9F3:				; CODE XREF: Ordinal710+7Aj
		mov	eax, [ebp+dwBytes]
		add	[esi], eax
		mov	[ebp+var_C], edi

loc_6B18D9FB:				; CODE XREF: Ordinal710+87j
		push	ebx		; hMem
		call	ds:GlobalUnlock
		cmp	[ebp+var_C], 0
		jnz	short loc_6B18DA15

loc_6B18DA08:				; CODE XREF: Ordinal710+68j
		test	ebx, ebx
		jz	short loc_6B18DA4F
		push	ebx		; hMem
		call	ds:GlobalFree
		jmp	short loc_6B18DA4F
; ---------------------------------------------------------------------------

loc_6B18DA15:				; CODE XREF: Ordinal710+9Cj
		and	[ebp+pStm], 0
		lea	ecx, [ebp+pStm]
		call	sub_6B18D44E
		push	eax		; ppstm
		push	edi		; fDeleteOnRelease
		push	ebx		; hGlobal
		call	ds:CreateStreamOnHGlobal
		test	eax, eax
		jge	short loc_6B18DA58
		push	eax		; Args
		push	offset aCarchiveRead_8 ; "CArchive::ReadVariantObject()	: CreateS"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		push	ebx		; hMem
		call	ds:GlobalFree

loc_6B18DA42:				; CODE XREF: Ordinal710+FEj
					; Ordinal710+123j
		mov	eax, [ebp+pStm]
		test	eax, eax
		jz	short loc_6B18DA4F
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+8]

loc_6B18DA4F:				; CODE XREF: Ordinal710+2Fj
					; Ordinal710+A0j ...
		xor	eax, eax

loc_6B18DA51:				; CODE XREF: Ordinal710+134j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
; ---------------------------------------------------------------------------

loc_6B18DA58:				; CODE XREF: Ordinal710+C2j
		mov	eax, [ebp+arg_0]
		mov	cx, [eax]
		cmp	cx, 9
		jz	short loc_6B18DA6A
		cmp	cx, 0Dh
		jnz	short loc_6B18DA42

loc_6B18DA6A:				; CODE XREF: Ordinal710+F8j
		add	eax, 8
		push	eax		; ppvObj
		push	offset iidInterface ; iidInterface
		push	[ebp+pStm]	; pStm
		call	ds:OleLoadFromStream
		test	eax, eax
		jge	short loc_6B18DA8F
		push	eax		; Args
		push	offset aCarchiveRead_9 ; "CArchive::ReadVariantObject()	: OleLoad"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		jmp	short loc_6B18DA42
; ---------------------------------------------------------------------------

loc_6B18DA8F:				; CODE XREF: Ordinal710+114j
		mov	eax, [ebp+pStm]
		test	eax, eax
		jz	short loc_6B18DA9C
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+8]

loc_6B18DA9C:				; CODE XREF: Ordinal710+12Aj
		mov	eax, edi
		jmp	short loc_6B18DA51
Ordinal710	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B18DAA0	proc near		; CODE XREF: sub_6B18E06F+7p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		test	eax, eax
		push	esi
		push	edi
		mov	edi, ecx
		jz	short loc_6B18DAD3
		mov	ecx, [eax]
		lea	edx, [ebp+arg_0]
		push	edx
		push	offset dword_6B1AF358
		push	eax
		call	dword ptr [ecx]
		mov	esi, eax
		test	esi, esi
		jl	short loc_6B18DAC7
		mov	eax, [ebp+arg_0]
		jmp	short loc_6B18DAC9
; ---------------------------------------------------------------------------

loc_6B18DAC7:				; CODE XREF: sub_6B18DAA0+20j
		xor	eax, eax

loc_6B18DAC9:				; CODE XREF: sub_6B18DAA0+25j
		push	eax
		mov	ecx, edi
		call	sub_6B18D085
		jmp	short loc_6B18DAE1
; ---------------------------------------------------------------------------

loc_6B18DAD3:				; CODE XREF: sub_6B18DAA0+Cj
		push	0
		mov	ecx, edi
		call	sub_6B18D464
		mov	esi, 80004002h

loc_6B18DAE1:				; CODE XREF: sub_6B18DAA0+31j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
sub_6B18DAA0	endp

; Exported entry 616.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal616
Ordinal616	proc near		; CODE XREF: Ordinal590+44p
					; Ordinal590+54p ...

arg_0		= dword	ptr  4

		push	1
		push	[esp+4+arg_0]
		push	0Ah
		call	Ordinal695
		retn	4
Ordinal616	endp

; Exported entry 618.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal618
Ordinal618	proc near		; CODE XREF: Ordinal532+6Cp
					; Ordinal661+9p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	1
		push	[esp+4+arg_0]
		push	0Ch
		call	Ordinal695
		retn	4
Ordinal618	endp

; Exported entry 620.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal620
Ordinal620	proc near		; CODE XREF: Ordinal532+23p
					; Ordinal532+7Cp ...

arg_0		= dword	ptr  4

		push	1
		push	[esp+4+arg_0]
		push	1
		call	Ordinal695
		retn	4
Ordinal620	endp

; Exported entry 622.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal622
Ordinal622	proc near		; CODE XREF: Ordinal532+8Cp
					; Ordinal665+9p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	2
		push	[esp+4+arg_0]
		push	0Dh
		call	Ordinal695
		retn	4
Ordinal622	endp

; Exported entry 624.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal624
Ordinal624	proc near		; CODE XREF: Ordinal532+9Cp
					; Ordinal667+9p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	2
		push	[esp+4+arg_0]
		push	2
		call	Ordinal695
		retn	4
Ordinal624	endp

; Exported entry 626.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal626
Ordinal626	proc near		; CODE XREF: Ordinal191+65p
					; Ordinal305+4Bp ...

arg_0		= dword	ptr  4

		push	4
		push	[esp+4+arg_0]
		push	6
		call	Ordinal695
		retn	4
Ordinal626	endp

; Exported entry 628.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal628
Ordinal628	proc near		; CODE XREF: Ordinal532+BCp
					; Ordinal657j ...

arg_0		= dword	ptr  4

		push	4
		push	[esp+4+arg_0]
		push	3
		call	Ordinal695
		retn	4
Ordinal628	endp

; Exported entry 630.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal630
Ordinal630	proc near		; CODE XREF: Ordinal532+C9p
					; Ordinal673+9p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	8
		push	[esp+4+arg_0]
		push	0Eh
		call	Ordinal695
		retn	4
Ordinal630	endp

; Exported entry 632.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal632
Ordinal632	proc near		; CODE XREF: Ordinal532+D6p
					; Ordinal675+9p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	8
		push	[esp+4+arg_0]
		push	4
		call	Ordinal695
		retn	4
Ordinal632	endp

; Exported entry 634.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal634
Ordinal634	proc near		; CODE XREF: Ordinal532+E3p
					; Ordinal677+9p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	8
		push	[esp+4+arg_0]
		push	5
		call	Ordinal695
		retn	4
Ordinal634	endp

; Exported entry 636.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal636
Ordinal636	proc near		; CODE XREF: Ordinal532+F0p
					; Ordinal679+9p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	10h
		push	[esp+4+arg_0]
		push	0Fh
		call	Ordinal695
		retn	4
Ordinal636	endp

; Exported entry 638.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal638
Ordinal638	proc near		; CODE XREF: Ordinal532+FDp
					; Ordinal681+9p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	10h
		push	[esp+4+arg_0]
		push	10h
		call	Ordinal695
		retn	4
Ordinal638	endp

; Exported entry 640.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal640
Ordinal640	proc near		; CODE XREF: Ordinal642+74p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	7
		call	Ordinal695
		retn	8
Ordinal640	endp

; Exported entry 645.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal645
Ordinal645	proc near		; CODE XREF: Ordinal647+77p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	8
		call	Ordinal695
		retn	8
Ordinal645	endp

; Exported entry 650.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal650
Ordinal650	proc near		; CODE XREF: Ordinal532+150p
					; Ordinal652+5Ap
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	9
		call	Ordinal695
		retn	8
Ordinal650	endp

; Exported entry 652.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal652(char	Args)
		public Ordinal652
Ordinal652	proc near		; CODE XREF: Ordinal390+47p
					; Ordinal532+124p ...

Args		= byte ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, dword ptr [ebp+Args]
		push	edi
		mov	edi, ecx
		mov	ecx, esi
		call	Ordinal1200
		and	dword ptr [ebp+Args], 0
		lea	eax, [ebp+Args]
		push	eax
		mov	ecx, edi
		call	Ordinal613
		test	eax, eax
		jnz	short loc_6B18DC0A
		push	offset aCarchiveReadCm ; "CArchive::Read(CMemory&) : Peek() == FA"...
		jmp	short loc_6B18DC1D
; ---------------------------------------------------------------------------

loc_6B18DC0A:				; CODE XREF: Ordinal652+22j
		push	dword ptr [ebp+Args] ; Args
		mov	ecx, esi
		call	Ordinal1196
		test	eax, eax
		jnz	short loc_6B18DC27
		push	offset aCarchiveRea_10 ; "CArchive::Read(CMemory&) : Memory.NewAl"...

loc_6B18DC1D:				; CODE XREF: Ordinal652+29j
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B18DC3E
; ---------------------------------------------------------------------------

loc_6B18DC27:				; CODE XREF: Ordinal652+37j
		mov	ecx, esi
		call	Ordinal1052
		push	eax
		mov	ecx, esi
		call	Ordinal1493
		push	eax
		mov	ecx, edi
		call	Ordinal650

loc_6B18DC3E:				; CODE XREF: Ordinal652+46j
		pop	edi
		pop	esi
		pop	ebp
		retn	4
Ordinal652	endp ; sp-analysis failed

; Exported entry 657.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal657
Ordinal657	proc near		; CODE XREF: Ordinal191+91p
					; Ordinal191+19Ep ...
		jmp	Ordinal628
Ordinal657	endp

; Exported entry 659.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal659
Ordinal659	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal616
		test	eax, eax
		jnz	short loc_6B18DC70
		push	offset dword_6B1BB82C
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18DC70:				; CODE XREF: Ordinal659+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal659	endp

; Exported entry 661.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal661
Ordinal661	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal618
		test	eax, eax
		jnz	short loc_6B18DC9E
		push	offset dword_6B1BB82C
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18DC9E:				; CODE XREF: Ordinal661+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal661	endp

; Exported entry 663.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal663
Ordinal663	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal620
		test	eax, eax
		jnz	short loc_6B18DCCC
		push	offset dword_6B1BB82C
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18DCCC:				; CODE XREF: Ordinal663+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal663	endp

; Exported entry 665.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal665
Ordinal665	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal622
		test	eax, eax
		jnz	short loc_6B18DCFA
		push	offset dword_6B1BB82C
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18DCFA:				; CODE XREF: Ordinal665+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal665	endp

; Exported entry 667.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal667
Ordinal667	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal624
		test	eax, eax
		jnz	short loc_6B18DD28
		push	offset dword_6B1BB82C
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18DD28:				; CODE XREF: Ordinal667+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal667	endp

; Exported entry 669.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal669
Ordinal669	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal626
		test	eax, eax
		jnz	short loc_6B18DD56
		push	offset dword_6B1BB82C
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18DD56:				; CODE XREF: Ordinal669+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal669	endp

; Exported entry 671.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal671
Ordinal671	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal628
		test	eax, eax
		jnz	short loc_6B18DD84
		push	offset dword_6B1BB82C
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18DD84:				; CODE XREF: Ordinal671+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal671	endp

; Exported entry 673.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal673
Ordinal673	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal630
		test	eax, eax
		jnz	short loc_6B18DDB2
		push	offset dword_6B1BB82C
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18DDB2:				; CODE XREF: Ordinal673+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal673	endp

; Exported entry 675.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal675
Ordinal675	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal632
		test	eax, eax
		jnz	short loc_6B18DDE0
		push	offset dword_6B1BB82C
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18DDE0:				; CODE XREF: Ordinal675+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal675	endp

; Exported entry 677.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal677
Ordinal677	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal634
		test	eax, eax
		jnz	short loc_6B18DE0E
		push	offset dword_6B1BB82C
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18DE0E:				; CODE XREF: Ordinal677+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal677	endp

; Exported entry 679.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal679
Ordinal679	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal636
		test	eax, eax
		jnz	short loc_6B18DE3C
		push	offset dword_6B1BB82C
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18DE3C:				; CODE XREF: Ordinal679+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal679	endp

; Exported entry 681.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal681
Ordinal681	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal638
		test	eax, eax
		jnz	short loc_6B18DE6A
		push	offset dword_6B1BB82C
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18DE6A:				; CODE XREF: Ordinal681+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal681	endp

; Exported entry 689.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal689(char	Args)
		public Ordinal689
Ordinal689	proc near		; DATA XREF: .rdata:off_6B1BF428o

Args		= byte ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	dword ptr [ebp+Args] ; Args
		mov	esi, ecx
		call	Ordinal652
		test	eax, eax
		jnz	short loc_6B18DE98
		push	offset dword_6B1BB82C
		lea	eax, [ebp+Args]
		push	eax
		mov	dword ptr [ebp+Args], offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18DE98:				; CODE XREF: Ordinal689+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal689	endp

; Exported entry 702.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal702
Ordinal702	proc near		; CODE XREF: Ordinal704+8Ap
					; Ordinal655+ABp
					; DATA XREF: ...

pvarg		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ebx, [ebp+pvarg]
		push	edi
		push	ebx		; pvarg
		mov	edi, ecx
		call	ds:VariantClear
		mov	eax, [edi]
		and	[ebp+pvarg], 0
		push	2
		push	ebx
		mov	ecx, edi
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6B18DED2
		push	offset aCarchiveRea_11 ; "CArchive::ReadVariant() : ReadEx() ==	F"...
		call	sub_6B18102E
		pop	ecx
		jmp	loc_6B18DF67
; ---------------------------------------------------------------------------

loc_6B18DED2:				; CODE XREF: Ordinal702+21j
		push	esi		; Args
		mov	esi, [ebp+arg_4]
		add	dword ptr [esi], 2
		mov	ax, [ebx]
		test	ah, 20h
		mov	cl, al
		jz	short loc_6B18DF1F
		and	cl, 11h
		cmp	cl, 11h
		jnz	short loc_6B18DF05
		push	esi
		push	ebx
		mov	ecx, edi
		call	Ordinal706
		test	eax, eax
		jnz	short loc_6B18DF5F
		push	offset aCarchiveRea_12 ; "CArchive::ReadVariant() : ReadVariantBu"...

loc_6B18DEFD:				; CODE XREF: Ordinal702+7Ej
					; Ordinal702+A8j ...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18DF66
; ---------------------------------------------------------------------------

loc_6B18DF05:				; CODE XREF: Ordinal702+4Aj
		and	al, 0Ch
		cmp	al, 0Ch
		jnz	short loc_6B18DF5F
		push	esi
		push	ebx
		mov	ecx, edi
		call	Ordinal704
		test	eax, eax
		jnz	short loc_6B18DF5F
		push	offset aCarchiveRea_13 ; "CArchive::ReadVariant() : ReadVariantAr"...
		jmp	short loc_6B18DEFD
; ---------------------------------------------------------------------------

loc_6B18DF1F:				; CODE XREF: Ordinal702+42j
		and	cl, 9
		cmp	cl, 9
		jz	short loc_6B18DF70
		mov	cl, al
		and	cl, 0Dh
		cmp	cl, 0Dh
		jz	short loc_6B18DF70
		test	al, 8
		mov	ecx, edi
		jz	short loc_6B18DF49
		push	esi
		push	ebx
		call	Ordinal708
		test	eax, eax
		jnz	short loc_6B18DF5F
		push	offset aCarchiveRea_14 ; "CArchive::ReadVariant() : ReadVariantSt"...
		jmp	short loc_6B18DEFD
; ---------------------------------------------------------------------------

loc_6B18DF49:				; CODE XREF: Ordinal702+96j
		mov	eax, [edi]
		push	10h
		push	ebx
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6B18DF5C
		push	offset aCarchiveRea_11 ; "CArchive::ReadVariant() : ReadEx() ==	F"...
		jmp	short loc_6B18DEFD
; ---------------------------------------------------------------------------

loc_6B18DF5C:				; CODE XREF: Ordinal702+B4j
		add	dword ptr [esi], 10h

loc_6B18DF5F:				; CODE XREF: Ordinal702+57j
					; Ordinal702+6Aj ...
		mov	[ebp+pvarg], 1

loc_6B18DF66:				; CODE XREF: Ordinal702+64j
		pop	esi

loc_6B18DF67:				; CODE XREF: Ordinal702+2Ej
		mov	eax, [ebp+pvarg]
		pop	edi
		pop	ebx
		pop	ebp
		retn	8
; ---------------------------------------------------------------------------

loc_6B18DF70:				; CODE XREF: Ordinal702+86j
					; Ordinal702+90j
		push	esi
		push	ebx
		mov	ecx, edi
		call	Ordinal710
		test	eax, eax
		jnz	short loc_6B18DF5F
		push	offset aCarchiveRea_15 ; "CArchive::ReadVariant() : ReadVariantOb"...
		jmp	loc_6B18DEFD
Ordinal702	endp

; Exported entry 704.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal704
Ordinal704	proc near		; CODE XREF: Ordinal702+70p
					; DATA XREF: .rdata:off_6B1BF428o

var_28		= byte ptr -28h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
pvarg		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		push	ebx
		push	esi
		mov	esi, ecx
		lea	ecx, [ebp+var_28]
		call	Ordinal1805
		mov	eax, [esi]
		push	4
		lea	ecx, [ebp+var_8]
		xor	ebx, ebx
		push	ecx
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		mov	[ebp+var_8], ebx
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6B18DFC2
		push	offset aCarchiveRea_16 ; "CArchive::ReadVariantArray() : ReadEx()"...
		call	sub_6B18102E
		pop	ecx
		jmp	loc_6B18E05E
; ---------------------------------------------------------------------------

loc_6B18DFC2:				; CODE XREF: Ordinal704+29j
		push	edi		; Args
		mov	edi, [ebp+arg_4]
		push	[ebp+var_8]
		add	dword ptr [edi], 4
		lea	ecx, [ebp+var_28]
		call	Ordinal1815
		test	eax, eax
		jnz	short loc_6B18DFDF
		push	offset aCarchiveRea_17 ; "CArchive::ReadVariantArray() : varArray"...
		jmp	short loc_6B18DFF0
; ---------------------------------------------------------------------------

loc_6B18DFDF:				; CODE XREF: Ordinal704+4Fj
		lea	ecx, [ebp+var_28]
		call	Ordinal1835
		test	eax, eax
		jnz	short loc_6B18DFF7
		push	offset aCarchiveRea_18 ; "CArchive::ReadVariantArray() : varArray"...

loc_6B18DFF0:				; CODE XREF: Ordinal704+56j
		call	sub_6B18102E
		jmp	short loc_6B18E05C
; ---------------------------------------------------------------------------

loc_6B18DFF7:				; CODE XREF: Ordinal704+62j
		cmp	[ebp+var_8], 0
		mov	[ebp+var_4], 1
		jbe	short loc_6B18E031

loc_6B18E004:				; CODE XREF: Ordinal704+97j
		push	ebx		; rgIndices
		lea	ecx, [ebp+var_28]
		call	Ordinal1834
		push	edi
		push	eax
		mov	ecx, esi
		call	Ordinal702
		test	eax, eax
		jz	short loc_6B18E022
		inc	ebx
		cmp	ebx, [ebp+var_8]
		jb	short loc_6B18E004
		jmp	short loc_6B18E031
; ---------------------------------------------------------------------------

loc_6B18E022:				; CODE XREF: Ordinal704+91j
		push	offset aCarchiveRea_19 ; "CArchive::ReadVariantArray() : ReadVari"...
		call	sub_6B18102E
		and	[ebp+var_4], 0
		pop	ecx

loc_6B18E031:				; CODE XREF: Ordinal704+7Bj
					; Ordinal704+99j
		lea	ecx, [ebp+var_28]
		call	Ordinal1836
		cmp	[ebp+var_4], 0
		jz	short loc_6B18E05D
		push	[ebp+pvarg]	; pvarg
		lea	ecx, [ebp+var_28]
		call	Ordinal1824
		test	eax, eax
		jnz	short loc_6B18E05D
		push	offset aCarchiveRea_20 ; "CArchive::ReadVariantArray() : varArray"...
		call	sub_6B18102E
		and	[ebp+var_4], 0

loc_6B18E05C:				; CODE XREF: Ordinal704+6Ej
		pop	ecx

loc_6B18E05D:				; CODE XREF: Ordinal704+B6j
					; Ordinal704+C5j
		pop	edi

loc_6B18E05E:				; CODE XREF: Ordinal704+36j
		lea	ecx, [ebp+var_28]
		call	Ordinal1809
		mov	eax, [ebp+var_4]
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal704	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18E06F	proc near		; CODE XREF: Ordinal700+E9p
					; Ordinal700+FCp ...

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		call	sub_6B18DAA0
		test	eax, eax
		jge	short loc_6B18E08C
		cmp	eax, 80004002h
		jz	short loc_6B18E08C
		push	eax
		call	sub_6B1A8F50
; ---------------------------------------------------------------------------

loc_6B18E08C:				; CODE XREF: sub_6B18E06F+Ej
					; sub_6B18E06F+15j
		mov	eax, esi
		pop	esi
		retn	4
sub_6B18E06F	endp

; Exported entry 655.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal655
Ordinal655	proc near		; CODE XREF: Ordinal532+131p
					; Ordinal691+9p
					; DATA XREF: ...

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_1		= byte ptr -1
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+20h], 1
		jz	short loc_6B18E0B3
		push	offset aCarchiveReadVa ; "CArchive::Read(VARIANT) : m_eArchiveTyp"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6B18E182
; ---------------------------------------------------------------------------

loc_6B18E0B3:				; CODE XREF: Ordinal655+Dj
		mov	eax, [esi]
		push	ebx		; Args
		lea	ecx, [ebp+var_14]
		xor	ebx, ebx
		push	ecx
		mov	ecx, esi
		mov	[ebp+var_14], ebx
		mov	[ebp+var_10], ebx
		call	dword ptr [eax+0Ch]
		test	eax, eax
		jnz	short loc_6B18E0DD
		push	offset aCarchiveRea_21 ; "CArchive::Read(VARIANT) : GetPosEx() =="...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6B18E181
; ---------------------------------------------------------------------------

loc_6B18E0DD:				; CODE XREF: Ordinal655+37j
		cmp	[esi+10h], bl
		jnz	short loc_6B18E0F2
		mov	eax, [ebp+var_14]
		mov	[esi+18h], eax
		mov	eax, [ebp+var_10]
		mov	[esi+1Ch], eax
		mov	byte ptr [esi+10h], 1

loc_6B18E0F2:				; CODE XREF: Ordinal655+4Ej
		mov	eax, [esi]
		push	edi		; Args
		push	1
		lea	ecx, [ebp+var_1]
		push	ecx
		mov	ecx, esi
		xor	edi, edi
		mov	[ebp+var_1], bl
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6B18E110

loc_6B18E109:				; CODE XREF: Ordinal655+9Dj
		push	offset aCarchiveRea_22 ; "CArchive::Read(VARIANT) : ReadEx() ==	F"...
		jmp	short loc_6B18E14B
; ---------------------------------------------------------------------------

loc_6B18E110:				; CODE XREF: Ordinal655+75j
		cmp	[ebp+var_1], 0Bh
		jz	short loc_6B18E11D
		push	offset aCarchiveRea_23 ; "CArchive::Read(VARIANT) : eReadType != "...
		jmp	short loc_6B18E14B
; ---------------------------------------------------------------------------

loc_6B18E11D:				; CODE XREF: Ordinal655+82j
		mov	eax, [esi]
		push	4
		lea	ecx, [ebp+var_C]
		push	ecx
		mov	ecx, esi
		mov	[ebp+var_C], ebx
		call	dword ptr [eax+4]
		test	eax, eax
		jz	short loc_6B18E109
		lea	eax, [ebp+var_8]
		push	eax
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_8], ebx
		call	Ordinal702
		test	eax, eax
		jnz	short loc_6B18E16F
		push	offset aCarchiveRea_24 ; "CArchive::Read(VARIANT) : ReadVariant()"...

loc_6B18E14B:				; CODE XREF: Ordinal655+7Cj
					; Ordinal655+89j
		call	sub_6B18102E
		mov	eax, [esi]
		pop	ecx
		push	[ebp+var_10]
		mov	ecx, esi
		push	[ebp+var_14]
		call	dword ptr [eax+10h]
		test	eax, eax
		jnz	short loc_6B18E17E
		push	offset aCarchiveRea_25 ; "CArchive::Read(VARIANT) : SetPosEx() =="...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18E17E
; ---------------------------------------------------------------------------

loc_6B18E16F:				; CODE XREF: Ordinal655+B2j
		mov	eax, [ebp+var_8]
		xor	edi, edi
		add	eax, 5
		inc	edi
		add	[esi+8], eax
		adc	[esi+0Ch], ebx

loc_6B18E17E:				; CODE XREF: Ordinal655+CEj
					; Ordinal655+DBj
		mov	eax, edi
		pop	edi

loc_6B18E181:				; CODE XREF: Ordinal655+46j
		pop	ebx

loc_6B18E182:				; CODE XREF: Ordinal655+1Cj
		pop	esi
		leave
		retn	4
Ordinal655	endp

; Exported entry 691.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal691
Ordinal691	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal655
		test	eax, eax
		jnz	short loc_6B18E1AE
		push	offset dword_6B1BB82C
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18E1AE:				; CODE XREF: Ordinal691+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal691	endp

; Exported entry 700.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal700
Ordinal700	proc near		; CODE XREF: Ordinal700+A1p
					; Ordinal701+Bp
					; DATA XREF: ...

var_20		= byte ptr -20h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 20h
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		mov	ax, [edi]
		test	ah, 40h
		mov	ebx, ecx
		jnz	loc_6B18E2BD
		test	ah, 20h
		mov	ecx, eax
		jz	loc_6B18E27B
		and	ecx, 0Ch
		cmp	cx, 0Ch
		jz	short loc_6B18E1ED
		and	al, 11h
		cmp	al, 11h
		jnz	loc_6B18E2BD

loc_6B18E1ED:				; CODE XREF: Ordinal700+2Cj
		mov	eax, [edi+8]
		cmp	word ptr [eax],	1
		jnz	loc_6B18E2BD
		xor	esi, esi
		cmp	[eax+14h], esi
		jnz	loc_6B18E2BD
		cmp	cx, 0Ch
		jnz	loc_6B18E2C7
		lea	ecx, [ebp+var_20]
		call	Ordinal1805
		push	edi
		lea	ecx, [ebp+var_20]
		call	Ordinal1826
		test	eax, eax
		jz	short loc_6B18E26F
		lea	ecx, [ebp+var_20]
		call	Ordinal1843
		test	eax, eax
		jz	short loc_6B18E26F
		lea	ecx, [ebp+var_20]
		call	Ordinal1835
		test	eax, eax
		lea	ecx, [ebp+var_20]
		jz	short loc_6B18E272
		call	Ordinal1844
		mov	edi, eax
		test	edi, edi
		jle	short loc_6B18E264

loc_6B18E24A:				; CODE XREF: Ordinal700+ADj
		push	esi		; rgIndices
		lea	ecx, [ebp+var_20]
		call	Ordinal1834
		push	eax
		mov	ecx, ebx
		call	Ordinal700
		test	eax, eax
		jz	short loc_6B18E264
		inc	esi
		cmp	esi, edi
		jl	short loc_6B18E24A

loc_6B18E264:				; CODE XREF: Ordinal700+93j
					; Ordinal700+A8j
		lea	ecx, [ebp+var_20]
		call	Ordinal1836
		xor	esi, esi
		inc	esi

loc_6B18E26F:				; CODE XREF: Ordinal700+6Dj
					; Ordinal700+79j
		lea	ecx, [ebp+var_20]

loc_6B18E272:				; CODE XREF: Ordinal700+88j
		call	Ordinal1809
		mov	eax, esi
		jmp	short loc_6B18E2CA
; ---------------------------------------------------------------------------

loc_6B18E27B:				; CODE XREF: Ordinal700+1Fj
		and	ecx, 0Dh
		cmp	cx, 0Dh
		mov	dl, 9
		jz	short loc_6B18E28E
		mov	bl, al
		and	bl, dl
		cmp	bl, dl
		jnz	short loc_6B18E2C7

loc_6B18E28E:				; CODE XREF: Ordinal700+CFj
		and	[ebp+arg_0], 0
		cmp	cx, 0Dh
		jnz	short loc_6B18E2A5
		push	dword ptr [edi+8]
		lea	ecx, [ebp+arg_0]
		call	sub_6B18E06F
		jmp	short loc_6B18E2B6
; ---------------------------------------------------------------------------

loc_6B18E2A5:				; CODE XREF: Ordinal700+E1j
		and	al, dl
		cmp	al, dl
		jnz	short loc_6B18E2BD
		push	dword ptr [edi+8]
		lea	ecx, [ebp+arg_0]
		call	sub_6B18E06F

loc_6B18E2B6:				; CODE XREF: Ordinal700+EEj
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jnz	short loc_6B18E2C1

loc_6B18E2BD:				; CODE XREF: Ordinal700+14j
					; Ordinal700+32j ...
		xor	eax, eax
		jmp	short loc_6B18E2CA
; ---------------------------------------------------------------------------

loc_6B18E2C1:				; CODE XREF: Ordinal700+106j
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+8]

loc_6B18E2C7:				; CODE XREF: Ordinal700+54j
					; Ordinal700+D7j
		xor	eax, eax
		inc	eax

loc_6B18E2CA:				; CODE XREF: Ordinal700+C4j
					; Ordinal700+10Aj
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal700	endp

; Exported entry 709.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal709
Ordinal709	proc near		; CODE XREF: Ordinal701+EAp
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
pPStm		= dword	ptr -8
hMem		= dword	ptr -4
pstm		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	eax, [ebp+pstm]
		push	esi
		push	edi
		mov	edi, ecx
		mov	cx, [eax]
		xor	esi, esi
		cmp	cx, 9
		mov	[ebp+pPStm], esi
		jnz	short loc_6B18E2F9
		push	dword ptr [eax+8]
		lea	ecx, [ebp+pPStm]
		call	sub_6B18E06F
		jmp	short loc_6B18E30A
; ---------------------------------------------------------------------------

loc_6B18E2F9:				; CODE XREF: Ordinal709+19j
		cmp	cx, 0Dh
		jnz	short loc_6B18E30F
		push	dword ptr [eax+8]
		lea	ecx, [ebp+pPStm]
		call	sub_6B18E06F

loc_6B18E30A:				; CODE XREF: Ordinal709+26j
		cmp	[ebp+pPStm], esi
		jnz	short loc_6B18E321

loc_6B18E30F:				; CODE XREF: Ordinal709+2Cj
		push	offset aCarchiveWrit_3 ; "CArchive::WriteVariantObject() : pPersi"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6B18E43B
; ---------------------------------------------------------------------------

loc_6B18E321:				; CODE XREF: Ordinal709+3Cj
		push	ebx		; Args
		lea	ecx, [ebp+pstm]
		mov	[ebp+pstm], esi
		call	sub_6B18D44E
		push	eax		; ppstm
		push	1		; fDeleteOnRelease
		push	esi		; hGlobal
		call	ds:CreateStreamOnHGlobal
		cmp	eax, esi
		jl	loc_6B18E415
		cmp	[ebp+pstm], esi
		jz	loc_6B18E415
		push	[ebp+pstm]	; pStm
		push	[ebp+pPStm]	; pPStm
		call	ds:OleSaveToStream
		cmp	eax, esi
		jge	short loc_6B18E363
		push	eax
		push	offset aCarchiveWrit_4 ; "CArchive::WriteVariantObject() : OleSav"...
		jmp	loc_6B18E41B
; ---------------------------------------------------------------------------

loc_6B18E363:				; CODE XREF: Ordinal709+85j
		lea	eax, [ebp+hMem]
		push	eax		; phglobal
		push	[ebp+pstm]	; pstm
		mov	[ebp+hMem], esi
		call	ds:GetHGlobalFromStream
		test	eax, eax
		jl	loc_6B18E409
		cmp	[ebp+hMem], esi
		jz	loc_6B18E409
		push	[ebp+hMem]	; hMem
		call	ds:GlobalLock
		mov	ebx, eax
		xor	esi, esi
		cmp	ebx, esi
		jnz	short loc_6B18E39C
		push	offset aCarchiveWrit_5 ; "CArchive::WriteVariantObject() : Global"...
		jmp	short loc_6B18E40E
; ---------------------------------------------------------------------------

loc_6B18E39C:				; CODE XREF: Ordinal709+C2j
		push	[ebp+hMem]	; hMem
		mov	[ebp+var_10], esi
		call	ds:GlobalSize
		push	4
		lea	ecx, [ebp+var_C]
		mov	[ebp+var_C], eax
		mov	eax, [edi]
		push	ecx
		mov	ecx, edi
		call	dword ptr [eax+8]
		test	eax, eax
		jz	short loc_6B18E3D1
		push	[ebp+var_C]
		mov	esi, [ebp+arg_4]
		add	dword ptr [esi], 4
		mov	eax, [edi]
		push	ebx
		mov	ecx, edi
		call	dword ptr [eax+8]
		test	eax, eax
		jnz	short loc_6B18E3DE

loc_6B18E3D1:				; CODE XREF: Ordinal709+E9j
		push	offset aCarchiveWrit_6 ; "CArchive::WriteVariantObject() : WriteE"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18E3EA
; ---------------------------------------------------------------------------

loc_6B18E3DE:				; CODE XREF: Ordinal709+FEj
		mov	eax, [ebp+var_C]
		add	[esi], eax
		mov	[ebp+var_10], 1

loc_6B18E3EA:				; CODE XREF: Ordinal709+10Bj
		push	[ebp+hMem]	; hMem
		call	ds:GlobalUnlock
		mov	eax, [ebp+pstm]
		and	[ebp+hMem], 0
		test	eax, eax
		jz	short loc_6B18E404
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+8]

loc_6B18E404:				; CODE XREF: Ordinal709+12Bj
		mov	esi, [ebp+var_10]
		jmp	short loc_6B18E42F
; ---------------------------------------------------------------------------

loc_6B18E409:				; CODE XREF: Ordinal709+A4j
					; Ordinal709+ADj
		push	offset aCarchiveWrit_7 ; "CArchive::WriteVariantObject() : GetHGl"...

loc_6B18E40E:				; CODE XREF: Ordinal709+C9j
		call	sub_6B18102E
		jmp	short loc_6B18E421
; ---------------------------------------------------------------------------

loc_6B18E415:				; CODE XREF: Ordinal709+68j
					; Ordinal709+71j
		push	eax		; Args
		push	offset aCarchiveWrit_8 ; "CArchive::WriteVariantObject() : Create"...

loc_6B18E41B:				; CODE XREF: Ordinal709+8Dj
		call	sub_6B18102E
		pop	ecx

loc_6B18E421:				; CODE XREF: Ordinal709+142j
		mov	eax, [ebp+pstm]
		cmp	eax, esi
		pop	ecx
		jz	short loc_6B18E42F
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+8]

loc_6B18E42F:				; CODE XREF: Ordinal709+136j
					; Ordinal709+156j
		mov	eax, [ebp+pPStm]
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+8]
		mov	eax, esi
		pop	ebx

loc_6B18E43B:				; CODE XREF: Ordinal709+4Bj
		pop	edi
		pop	esi
		leave
		retn	8
Ordinal709	endp

; Exported entry 642.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal642
Ordinal642	proc near		; CODE XREF: Ordinal506+A2p
					; Ordinal532+10Ap ...

var_4C		= byte ptr -4Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_58 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 48h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		call	sub_6B18175E
		lea	eax, [ebp+var_2C]
		xor	edi, edi
		push	eax
		mov	ecx, esi
		mov	[ebp+var_2C], edi
		call	Ordinal613
		test	eax, eax
		jnz	short loc_6B18E489
		push	offset aCarchiveReadCs ; "CArchive::Read(CStringA&) : PeekSize() "...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B18E4F2
; ---------------------------------------------------------------------------

loc_6B18E489:				; CODE XREF: Ordinal642+37j
		push	offset aCarchiveRea_26 ; "CArchive::Read(CStringA&)"
		lea	ecx, [ebp+var_4C]
		mov	[ebp+var_28], 1
		call	Ordinal1089
		push	[ebp+var_2C]
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_4], edi
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B1818C7
		push	[ebp+var_2C]
		mov	ecx, esi
		push	eax
		call	Ordinal640
		mov	ecx, [ebp+arg_0]
		push	0FFFFFFFFh
		mov	[ebp+var_28], eax
		call	sub_6B185A33
		cmp	[ebp+var_28], edi
		jnz	short loc_6B18E4D7
		push	offset aCarchiveRea_27 ; "CArchive::Read(CStringA&) : Read() ==	F"...
		call	sub_6B18102E
		pop	ecx

loc_6B18E4D7:				; CODE XREF: Ordinal642+89j
					; DATA XREF: sub_6B18E50B+3Do ...
		lea	ecx, [ebp+var_4C]
		call	Ordinal1635
		test	eax, eax
		jz	short loc_6B18E4E7
		and	[ebp+var_28], 0

loc_6B18E4E7:				; CODE XREF: Ordinal642+A0j
		lea	ecx, [ebp+var_4C]
		call	Ordinal1090
		mov	eax, [ebp+var_28]

loc_6B18E4F2:				; CODE XREF: Ordinal642+46j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal642	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18E50B	proc near		; DATA XREF: .rdata:6B1BB860o
		push	13h
		lea	ecx, [ebp-4Ch]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-4Ch]
		call	Ordinal1101
		mov	ecx, [ebp-50h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-4Ch]
		call	Ordinal1103
		lea	ecx, [ebp-4Ch]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B18E4D7
		retn
sub_6B18E50B	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18E54E	proc near		; DATA XREF: .rdata:6B1BB870o
		push	15h
		lea	ecx, [ebp-4Ch]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-4Ch]
		call	Ordinal1101
		mov	eax, [ebp-54h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-4Ch]
		call	Ordinal1103
		lea	ecx, [ebp-4Ch]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B18E4D7
		retn
sub_6B18E54E	endp

; Exported entry 647.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal647
Ordinal647	proc near		; CODE XREF: Ordinal506+94p
					; Ordinal532+117p ...

var_4C		= byte ptr -4Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_59 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 48h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		call	sub_6B189317
		lea	eax, [ebp+var_2C]
		xor	edi, edi
		push	eax
		mov	ecx, esi
		mov	[ebp+var_2C], edi
		call	Ordinal613
		test	eax, eax
		jnz	short loc_6B18E5EB
		push	offset aCarchiveRea_28 ; "CArchive::Read(CStringW&) : Peek() ==	F"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B18E657
; ---------------------------------------------------------------------------

loc_6B18E5EB:				; CODE XREF: Ordinal647+37j
		push	offset aCarchiveRea_29 ; "CArchive::Read(CStringW&)"
		lea	ecx, [ebp+var_4C]
		mov	[ebp+var_28], 1
		call	Ordinal1089
		mov	eax, [ebp+var_2C]
		mov	ecx, [ebp+arg_0]
		shr	eax, 1
		mov	[ebp+var_4], edi
		push	eax
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B18C7AB
		push	[ebp+var_2C]
		mov	ecx, esi
		push	eax
		call	Ordinal645
		mov	ecx, [ebp+arg_0]
		push	0FFFFFFFFh
		mov	[ebp+var_28], eax
		call	sub_6B18C6AF
		cmp	[ebp+var_28], edi
		jnz	short loc_6B18E63C
		push	offset aCarchiveRea_30 ; "CArchive::Read(CStringW&) : Read() ==	F"...
		call	sub_6B18102E
		pop	ecx

loc_6B18E63C:				; CODE XREF: Ordinal647+8Cj
					; DATA XREF: sub_6B18E670+3Do ...
		lea	ecx, [ebp+var_4C]
		call	Ordinal1635
		test	eax, eax
		jz	short loc_6B18E64C
		and	[ebp+var_28], 0

loc_6B18E64C:				; CODE XREF: Ordinal647+A3j
		lea	ecx, [ebp+var_4C]
		call	Ordinal1090
		mov	eax, [ebp+var_28]

loc_6B18E657:				; CODE XREF: Ordinal647+46j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal647	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18E670	proc near		; DATA XREF: .rdata:6B1BB8C8o
		push	13h
		lea	ecx, [ebp-4Ch]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-4Ch]
		call	Ordinal1101
		mov	ecx, [ebp-50h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-4Ch]
		call	Ordinal1103
		lea	ecx, [ebp-4Ch]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B18E63C
		retn
sub_6B18E670	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18E6B3	proc near		; DATA XREF: .rdata:6B1BB8D8o
		push	15h
		lea	ecx, [ebp-4Ch]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-4Ch]
		call	Ordinal1101
		mov	eax, [ebp-54h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-4Ch]
		call	Ordinal1103
		lea	ecx, [ebp-4Ch]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B18E63C
		retn
sub_6B18E6B3	endp

; Exported entry 685.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal685
Ordinal685	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal642
		test	eax, eax
		jnz	short loc_6B18E72F
		push	offset dword_6B1BB82C
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18E72F:				; CODE XREF: Ordinal685+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal685	endp

; Exported entry 688.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal688
Ordinal688	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal647
		test	eax, eax
		jnz	short loc_6B18E75D
		push	offset dword_6B1BB82C
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18E75D:				; CODE XREF: Ordinal688+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal688	endp

; Exported entry 701.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal701
Ordinal701	proc near		; CODE XREF: Ordinal703+91p
					; Ordinal656+BFp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ebx, [ebp+arg_0]
		push	edi
		push	ebx
		mov	edi, ecx
		call	Ordinal700
		test	eax, eax
		jnz	short loc_6B18E78A
		push	offset aCarchiveWrit_9 ; "CArchive::WriteVariant() : IsVariantSup"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6B18E844
; ---------------------------------------------------------------------------

loc_6B18E78A:				; CODE XREF: Ordinal701+12j
		mov	eax, [edi]
		and	[ebp+arg_0], 0
		push	2
		push	ebx
		mov	ecx, edi
		call	dword ptr [eax+8]
		test	eax, eax
		jnz	short loc_6B18E7AC
		push	offset aCarchiveWri_10 ; "CArchive::WriteVariant() : WriteEx() =="...
		call	sub_6B18102E
		pop	ecx
		jmp	loc_6B18E841
; ---------------------------------------------------------------------------

loc_6B18E7AC:				; CODE XREF: Ordinal701+36j
		push	esi		; Args
		mov	esi, [ebp+arg_4]
		add	dword ptr [esi], 2
		mov	ax, [ebx]
		test	ah, 20h
		mov	cl, al
		jz	short loc_6B18E7F9
		and	cl, 11h
		cmp	cl, 11h
		jnz	short loc_6B18E7DF
		push	esi
		push	ebx
		mov	ecx, edi
		call	Ordinal705
		test	eax, eax
		jnz	short loc_6B18E839
		push	offset aCarchiveWri_11 ; "CArchive::WriteVariant() : WriteVariant"...

loc_6B18E7D7:				; CODE XREF: Ordinal701+93j
					; Ordinal701+BDj ...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18E840
; ---------------------------------------------------------------------------

loc_6B18E7DF:				; CODE XREF: Ordinal701+5Fj
		and	al, 0Ch
		cmp	al, 0Ch
		jnz	short loc_6B18E839
		push	esi
		push	ebx
		mov	ecx, edi
		call	Ordinal703
		test	eax, eax
		jnz	short loc_6B18E839
		push	offset aCarchiveWri_12 ; "CArchive::WriteVariant() : WriteVariant"...
		jmp	short loc_6B18E7D7
; ---------------------------------------------------------------------------

loc_6B18E7F9:				; CODE XREF: Ordinal701+57j
		and	cl, 9
		cmp	cl, 9
		jz	short loc_6B18E84A
		mov	cl, al
		and	cl, 0Dh
		cmp	cl, 0Dh
		jz	short loc_6B18E84A
		test	al, 8
		mov	ecx, edi
		jz	short loc_6B18E823
		push	esi
		push	ebx
		call	Ordinal707
		test	eax, eax
		jnz	short loc_6B18E839
		push	offset aCarchiveWri_13 ; "CArchive::WriteVariant() : WriteVariant"...
		jmp	short loc_6B18E7D7
; ---------------------------------------------------------------------------

loc_6B18E823:				; CODE XREF: Ordinal701+ABj
		mov	eax, [edi]
		push	10h
		push	ebx
		call	dword ptr [eax+8]
		test	eax, eax
		jnz	short loc_6B18E836
		push	offset aCarchiveWri_10 ; "CArchive::WriteVariant() : WriteEx() =="...
		jmp	short loc_6B18E7D7
; ---------------------------------------------------------------------------

loc_6B18E836:				; CODE XREF: Ordinal701+C9j
		add	dword ptr [esi], 10h

loc_6B18E839:				; CODE XREF: Ordinal701+6Cj
					; Ordinal701+7Fj ...
		mov	[ebp+arg_0], 1

loc_6B18E840:				; CODE XREF: Ordinal701+79j
		pop	esi

loc_6B18E841:				; CODE XREF: Ordinal701+43j
		mov	eax, [ebp+arg_0]

loc_6B18E844:				; CODE XREF: Ordinal701+21j
		pop	edi
		pop	ebx
		pop	ebp
		retn	8
; ---------------------------------------------------------------------------

loc_6B18E84A:				; CODE XREF: Ordinal701+9Bj
					; Ordinal701+A5j
		push	esi
		push	ebx
		mov	ecx, edi
		call	Ordinal709
		test	eax, eax
		jnz	short loc_6B18E839
		push	offset aCarchiveWri_14 ; "CArchive::WriteVariant() : WriteVariant"...
		jmp	loc_6B18E7D7
Ordinal701	endp

; Exported entry 703.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal703
Ordinal703	proc near		; CODE XREF: Ordinal701+85p
					; DATA XREF: .rdata:off_6B1BF428o

var_28		= byte ptr -28h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		push	ebx
		push	esi
		push	edi
		mov	ebx, ecx
		xor	edi, edi
		lea	ecx, [ebp+var_28]
		mov	[ebp+var_8], edi
		call	Ordinal1805
		push	[ebp+arg_0]
		lea	ecx, [ebp+var_28]
		call	Ordinal1826
		test	eax, eax
		jz	loc_6B18E91C
		lea	ecx, [ebp+var_28]
		call	Ordinal1843
		test	eax, eax
		jz	loc_6B18E91C
		lea	ecx, [ebp+var_28]
		call	Ordinal1844
		push	4
		lea	ecx, [ebp+var_4]
		mov	[ebp+var_4], eax
		mov	eax, [ebx]
		push	ecx
		mov	ecx, ebx
		call	dword ptr [eax+8]
		test	eax, eax
		jnz	short loc_6B18E8BF
		push	offset aCarchiveWri_15 ; "CArchive::WriteVariantArray()	: WriteEx"...
		jmp	short loc_6B18E921
; ---------------------------------------------------------------------------

loc_6B18E8BF:				; CODE XREF: Ordinal703+55j
		mov	esi, [ebp+arg_4]
		add	dword ptr [esi], 4
		lea	ecx, [ebp+var_28]
		call	Ordinal1835
		test	eax, eax
		jnz	short loc_6B18E8D8
		push	offset aCarchiveWri_16 ; "CArchive::WriteVariantArray()	: varArra"...
		jmp	short loc_6B18E921
; ---------------------------------------------------------------------------

loc_6B18E8D8:				; CODE XREF: Ordinal703+6Ej
		cmp	[ebp+var_4], 0
		mov	[ebp+var_8], 1
		jbe	short loc_6B18E912

loc_6B18E8E5:				; CODE XREF: Ordinal703+9Ej
		push	edi		; rgIndices
		lea	ecx, [ebp+var_28]
		call	Ordinal1834
		push	esi
		push	eax
		mov	ecx, ebx
		call	Ordinal701
		test	eax, eax
		jz	short loc_6B18E903
		inc	edi
		cmp	edi, [ebp+var_4]
		jb	short loc_6B18E8E5
		jmp	short loc_6B18E912
; ---------------------------------------------------------------------------

loc_6B18E903:				; CODE XREF: Ordinal703+98j
		push	offset aCarchiveWri_17 ; "CArchive::WriteVariantArray()	: WriteVa"...
		call	sub_6B18102E
		and	[ebp+var_8], 0
		pop	ecx

loc_6B18E912:				; CODE XREF: Ordinal703+82j
					; Ordinal703+A0j
		lea	ecx, [ebp+var_28]
		call	Ordinal1836
		jmp	short loc_6B18E927
; ---------------------------------------------------------------------------

loc_6B18E91C:				; CODE XREF: Ordinal703+25j
					; Ordinal703+35j
		push	offset aCarchiveWri_18 ; "CArchive::WriteVariantArray()	: varArra"...

loc_6B18E921:				; CODE XREF: Ordinal703+5Cj
					; Ordinal703+75j
		call	sub_6B18102E
		pop	ecx

loc_6B18E927:				; CODE XREF: Ordinal703+B9j
		lea	ecx, [ebp+var_28]
		call	Ordinal1809
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal703	endp

; Exported entry 656.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal656
Ordinal656	proc near		; CODE XREF: Ordinal524+C1p
					; Ordinal533+13Dp ...

var_40		= byte ptr -40h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_1		= byte ptr -1
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 40h
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+20h], 2
		jz	short loc_6B18E95A
		push	offset aCarchiveWriteV ; "CArchive::Write(VARIANT) : m_eArchiveTy"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6B18EA6E
; ---------------------------------------------------------------------------

loc_6B18E95A:				; CODE XREF: Ordinal656+Dj
		mov	eax, [esi]
		push	ebx		; Args
		lea	ecx, [ebp+var_18]
		xor	ebx, ebx
		push	ecx
		mov	ecx, esi
		mov	[ebp+var_18], ebx
		mov	[ebp+var_14], ebx
		call	dword ptr [eax+0Ch]
		test	eax, eax
		jnz	short loc_6B18E984
		push	offset aCarchiveWri_19 ; "CArchive::Write(VARIANT) : GetPosEx()	="...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6B18EA6D
; ---------------------------------------------------------------------------

loc_6B18E984:				; CODE XREF: Ordinal656+37j
		cmp	[esi+10h], bl
		jnz	short loc_6B18E999
		mov	eax, [ebp+var_18]
		mov	[esi+18h], eax
		mov	eax, [ebp+var_14]
		mov	[esi+1Ch], eax
		mov	byte ptr [esi+10h], 1

loc_6B18E999:				; CODE XREF: Ordinal656+4Ej
		mov	eax, [esi]
		push	1
		lea	ecx, [ebp+var_1]
		push	ecx
		mov	ecx, esi
		mov	[ebp+var_10], ebx
		mov	[ebp+var_1], 0Bh
		call	dword ptr [eax+8]
		test	eax, eax
		jnz	short loc_6B18E9E1
		push	offset aCarchiveWri_20 ; "CArchive::Write(VARIANT) : WriteEx() =="...
		call	sub_6B18102E
		pop	ecx

loc_6B18E9BC:				; CODE XREF: Ordinal656+10Fj
		push	[ebp+var_14]
		mov	eax, [esi]
		push	[ebp+var_18]
		mov	ecx, esi
		call	dword ptr [eax+10h]
		test	eax, eax
		jnz	loc_6B18EA6A
		push	offset aCarchiveWri_21 ; "CArchive::Write(VARIANT) : SetPosEx()	="...
		call	sub_6B18102E
		pop	ecx
		jmp	loc_6B18EA6A
; ---------------------------------------------------------------------------

loc_6B18E9E1:				; CODE XREF: Ordinal656+76j
		push	2
		lea	ecx, [ebp+var_40]
		mov	[ebp+var_8], ebx
		call	Ordinal1028
		lea	eax, [ebp+var_8]
		push	eax
		push	[ebp+arg_0]
		lea	ecx, [ebp+var_40]
		call	Ordinal701
		test	eax, eax
		jnz	short loc_6B18EA08
		push	offset aCarchiveWri_22 ; "CArchive::Write(VARIANT) : dummyArchive"...
		jmp	short loc_6B18EA3A
; ---------------------------------------------------------------------------

loc_6B18EA08:				; CODE XREF: Ordinal656+C6j
		mov	eax, [esi]
		push	4
		lea	ecx, [ebp+var_8]
		push	ecx
		mov	ecx, esi
		call	dword ptr [eax+8]
		test	eax, eax
		jnz	short loc_6B18EA20
		push	offset aCarchiveWri_20 ; "CArchive::Write(VARIANT) : WriteEx() =="...
		jmp	short loc_6B18EA3A
; ---------------------------------------------------------------------------

loc_6B18EA20:				; CODE XREF: Ordinal656+DEj
		lea	eax, [ebp+var_C]
		push	eax
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_C], ebx
		call	Ordinal701
		test	eax, eax
		jnz	short loc_6B18EA4D
		push	offset aCarchiveWri_23 ; "CArchive::Write(VARIANT) : WriteVariant"...

loc_6B18EA3A:				; CODE XREF: Ordinal656+CDj
					; Ordinal656+E5j
		call	sub_6B18102E
		pop	ecx
		lea	ecx, [ebp+var_40]
		call	Ordinal1029
		jmp	loc_6B18E9BC
; ---------------------------------------------------------------------------

loc_6B18EA4D:				; CODE XREF: Ordinal656+FAj
		push	edi
		mov	edi, [ebp+var_C]
		lea	ecx, [ebp+var_40]
		add	edi, 5
		mov	[ebp+var_10], 1
		call	Ordinal1029
		add	[esi+8], edi
		pop	edi
		adc	[esi+0Ch], ebx

loc_6B18EA6A:				; CODE XREF: Ordinal656+92j
					; Ordinal656+A3j
		mov	eax, [ebp+var_10]

loc_6B18EA6D:				; CODE XREF: Ordinal656+46j
		pop	ebx

loc_6B18EA6E:				; CODE XREF: Ordinal656+1Cj
		pop	esi
		leave
		retn	4
Ordinal656	endp

; Exported entry 692.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal692
Ordinal692	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal656
		test	eax, eax
		jnz	short loc_6B18EA9A
		push	offset dword_6B1BB82C
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6B1AF0AC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B18EA9A:				; CODE XREF: Ordinal692+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal692	endp

; Exported entry 719.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal719
Ordinal719	proc near		; CODE XREF: Ordinal712+9p
					; Ordinal738+72p ...

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	ecx, [esi+8]
		call	Ordinal1113
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		pop	esi
		leave
		retn
Ordinal719	endp

; Exported entry 720.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal720
Ordinal720	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		mov	esi, ecx
		xor	edi, edi
		push	edi
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		push	edi		; int
		push	edi		; lDistanceToMove
		lea	ecx, [esi+8]
		call	Ordinal1130
		test	eax, eax
		jnz	short loc_6B18EB03
		push	offset aCautocyclelogf ; "CAutoCycleLogFile::Clear() : m_File.Set"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18EB06
; ---------------------------------------------------------------------------

loc_6B18EB03:				; CODE XREF: Ordinal720+27j
		xor	edi, edi
		inc	edi

loc_6B18EB06:				; CODE XREF: Ordinal720+34j
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, edi
		pop	edi
		pop	esi
		leave
		retn
Ordinal720	endp

; Exported entry 724.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal724
Ordinal724	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	ecx, [esi+8]
		call	Ordinal1125
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal724	endp

; Exported entry 725.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal725
Ordinal725	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	ecx, [esi+8]
		call	Ordinal1052
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal725	endp

; Exported entry 726.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal726
Ordinal726	proc near		; CODE XREF: Ordinal739+1Cp
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	ecx, [esi+8]
		call	Ordinal1129
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		mov	edi, edx
		call	Ordinal1573
		mov	edx, edi
		pop	edi
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal726	endp

; Exported entry 727.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal727
Ordinal727	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	eax, [ebp+arg_0]
		lea	ecx, [ebp+var_C]
		mov	[esi+48h], eax
		call	Ordinal1573
		pop	esi
		leave
		retn	4
Ordinal727	endp

; Exported entry 728.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal728
Ordinal728	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	esi, [esi+48h]
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal728	endp

; Exported entry 729.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal729
Ordinal729	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	eax, [ebp+arg_0]
		mov	[esi+38h], eax
		mov	eax, [ebp+arg_4]
		lea	ecx, [ebp+var_C]
		mov	[esi+3Ch], eax
		call	Ordinal1573
		pop	esi
		leave
		retn	8
Ordinal729	endp

; Exported entry 730.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal730
Ordinal730	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	edi, [esi+38h]
		mov	esi, [esi+3Ch]
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, edi
		pop	edi
		mov	edx, esi
		pop	esi
		leave
		retn
Ordinal730	endp

; Exported entry 731.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal731
Ordinal731	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	eax, [ebp+arg_0]
		lea	ecx, [ebp+var_C]
		mov	[esi+44h], eax
		call	Ordinal1573
		pop	esi
		leave
		retn	4
Ordinal731	endp

; Exported entry 732.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal732
Ordinal732	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	esi, [esi+44h]
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal732	endp

; Exported entry 733.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal733
Ordinal733	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	eax, [ebp+arg_0]
		lea	ecx, [ebp+var_C]
		mov	[esi+40h], eax
		call	Ordinal1573
		pop	esi
		leave
		retn	4
Ordinal733	endp

; Exported entry 734.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal734
Ordinal734	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	esi, [esi+40h]
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal734	endp

; Exported entry 723.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal723
Ordinal723	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	esi, [esi+2Ch]
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal723	endp

; Exported entry 712.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal712
Ordinal712	proc near		; CODE XREF: sub_6B18EDD1+3p
					; Ordinal1542+1Cj
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1B017C
		call	Ordinal719
		lea	ecx, [esi+4Ch]
		call	Ordinal1616
		lea	ecx, [esi+30h]
		call	sub_6B1899B5
		lea	ecx, [esi+2Ch]
		call	sub_6B1899B5
		lea	ecx, [esi+28h]
		call	sub_6B1899B5
		lea	ecx, [esi+24h]
		call	sub_6B1899B5
		lea	ecx, [esi+8]
		pop	esi
		jmp	Ordinal1109
Ordinal712	endp

; Exported entry 711.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal711
Ordinal711	proc near		; CODE XREF: Ordinal1541+3p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+8]
		mov	dword ptr [esi], offset	off_6B1B017C
		call	Ordinal1107
		lea	ecx, [esi+24h]
		call	sub_6B181879
		lea	ecx, [esi+28h]
		call	sub_6B181879
		lea	ecx, [esi+2Ch]
		call	sub_6B181879
		lea	ecx, [esi+30h]
		call	sub_6B181879
		xor	ecx, ecx
		xor	eax, eax
		inc	eax
		mov	[esi+34h], ecx
		mov	[esi+38h], ecx
		mov	[esi+3Ch], ecx
		mov	[esi+48h], ecx
		lea	ecx, [esi+4Ch]
		mov	[esi+40h], eax
		mov	[esi+44h], eax
		call	Ordinal1615
		lea	eax, [esi+14h]
		push	eax		; lpSystemTime
		call	ds:GetLocalTime
		mov	eax, esi
		pop	esi
		retn
Ordinal711	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B18EDD1(void *, char)
sub_6B18EDD1	proc near		; DATA XREF: .rdata:off_6B1B017Co

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal712
		test	[esp+4+arg_0], 1
		jz	short loc_6B18EDE7
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B18EDE7:				; CODE XREF: sub_6B18EDD1+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B18EDD1	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B18EDED	proc near		; CODE XREF: Ordinal735+23p
					; Ordinal735+2Dp ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_1		= byte ptr -1
arg_0		= byte ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	al, [ebp+arg_0]
		push	edi
		xor	edi, edi
		cmp	al, [ebp+arg_4]
		mov	[ebp+var_C], ecx
		mov	[ebp+var_8], edi
		jz	short loc_6B18EE5E
		push	ebx
		push	esi
		mov	esi, [ecx]
		mov	ebx, [esi-0Ch]
		cmp	ebx, edi
		mov	[ebp+var_1], 0
		jle	short loc_6B18EE5C

loc_6B18EE13:				; CODE XREF: sub_6B18EDED+5Ej
		mov	cl, [ebp+arg_0]
		lea	eax, [edi+esi]
		cmp	[eax], cl
		jnz	short loc_6B18EE3D
		cmp	[ebp+var_1], 0
		jnz	short loc_6B18EE32
		mov	ecx, [ebp+var_C]
		push	ebx
		mov	[ebp+var_1], 1
		call	sub_6B1818C7
		mov	esi, eax

loc_6B18EE32:				; CODE XREF: sub_6B18EDED+34j
		mov	cl, [ebp+arg_4]
		inc	[ebp+var_8]
		lea	eax, [edi+esi]
		mov	[eax], cl

loc_6B18EE3D:				; CODE XREF: sub_6B18EDED+2Ej
		push	eax		; unsigned __int8 *
		call	ds:_mbsinc
		mov	edi, eax
		sub	edi, esi
		cmp	edi, ebx
		pop	ecx
		jl	short loc_6B18EE13
		cmp	[ebp+var_1], 0
		jz	short loc_6B18EE5C
		mov	ecx, [ebp+var_C]
		push	ebx
		call	sub_6B181598

loc_6B18EE5C:				; CODE XREF: sub_6B18EDED+24j
					; sub_6B18EDED+64j
		pop	esi
		pop	ebx

loc_6B18EE5E:				; CODE XREF: sub_6B18EDED+15j
		mov	eax, [ebp+var_8]
		pop	edi
		leave
		retn	8
sub_6B18EDED	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6B18EE66(char *Str,	void *Src)
sub_6B18EE66	proc near		; CODE XREF: Ordinal735+5Cp

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
Size		= dword	ptr -4
Str		= dword	ptr  8
Src		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 24h
		push	esi
		push	edi
		xor	edi, edi
		cmp	[ebp+Str], edi
		mov	esi, ecx
		mov	[ebp+var_18], esi
		jz	short loc_6B18EE88
		push	[ebp+Str]	; Str
		call	strlen
		pop	ecx
		mov	[ebp+var_8], eax
		jmp	short loc_6B18EE8B
; ---------------------------------------------------------------------------

loc_6B18EE88:				; CODE XREF: sub_6B18EE66+12j
		mov	[ebp+var_8], edi

loc_6B18EE8B:				; CODE XREF: sub_6B18EE66+20j
		cmp	[ebp+var_8], edi
		jnz	short loc_6B18EE97
		xor	eax, eax
		jmp	loc_6B18EFC9
; ---------------------------------------------------------------------------

loc_6B18EE97:				; CODE XREF: sub_6B18EE66+28j
		cmp	[ebp+Src], edi
		jz	short loc_6B18EEAA
		push	[ebp+Src]	; Str
		call	strlen
		pop	ecx
		mov	[ebp+Size], eax
		jmp	short loc_6B18EEAD
; ---------------------------------------------------------------------------

loc_6B18EEAA:				; CODE XREF: sub_6B18EE66+34j
		mov	[ebp+Size], edi

loc_6B18EEAD:				; CODE XREF: sub_6B18EE66+42j
		mov	esi, [esi]
		mov	[ebp+var_10], edi
		mov	edi, [esi-0Ch]
		add	edi, esi
		cmp	esi, edi
		jnb	loc_6B18EFC6
		push	ebx
		mov	ebx, ds:_mbsstr
		jmp	short loc_6B18EED1
; ---------------------------------------------------------------------------

loc_6B18EEC8:				; CODE XREF: sub_6B18EE66+75j
		mov	ecx, [ebp+var_8]
		inc	[ebp+var_10]
		lea	esi, [eax+ecx]

loc_6B18EED1:				; CODE XREF: sub_6B18EE66+60j
					; sub_6B18EE66+8Cj
		push	[ebp+Str]	; unsigned __int8 *
		push	esi		; unsigned __int8 *
		call	ebx ; _mbsstr
		test	eax, eax
		pop	ecx
		pop	ecx
		jnz	short loc_6B18EEC8
		test	esi, esi
		jz	short loc_6B18EEEA
		push	esi		; Str
		call	strlen
		pop	ecx
		jmp	short loc_6B18EEEC
; ---------------------------------------------------------------------------

loc_6B18EEEA:				; CODE XREF: sub_6B18EE66+79j
		xor	eax, eax

loc_6B18EEEC:				; CODE XREF: sub_6B18EE66+82j
		lea	esi, [esi+eax+1]
		cmp	esi, edi
		jb	short loc_6B18EED1
		cmp	[ebp+var_10], 0
		jle	loc_6B18EFC5
		mov	edi, [ebp+Size]
		sub	edi, [ebp+var_8]
		mov	eax, [ebp+var_18]
		imul	edi, [ebp+var_10]
		mov	eax, [eax]
		mov	esi, [eax-0Ch]
		add	edi, esi
		cmp	edi, esi
		mov	[ebp+var_14], esi
		mov	[ebp+var_20], edi
		mov	eax, edi
		jg	short loc_6B18EF20
		mov	eax, esi

loc_6B18EF20:				; CODE XREF: sub_6B18EE66+B6j
		mov	ecx, [ebp+var_18]
		push	eax
		call	sub_6B1818C7
		lea	ecx, [eax+esi]
		mov	[ebp+var_1C], eax
		mov	[ebp+var_24], ecx
		cmp	eax, ecx
		jmp	short loc_6B18EFB3
; ---------------------------------------------------------------------------

loc_6B18EF36:				; CODE XREF: sub_6B18EE66+150j
		push	[ebp+Str]	; unsigned __int8 *
		push	[ebp+var_C]	; unsigned __int8 *
		call	ebx ; _mbsstr
		mov	esi, eax
		test	esi, esi
		pop	ecx
		pop	ecx
		jz	short loc_6B18EF9A

loc_6B18EF46:				; CODE XREF: sub_6B18EE66+12Fj
		mov	edi, [ebp+var_1C]
		mov	ecx, [ebp+var_8]
		mov	eax, [ebp+Size]
		sub	edi, esi
		sub	edi, ecx
		add	edi, [ebp+var_14]
		add	ecx, esi
		push	edi		; Size
		add	eax, esi
		push	ecx		; Src
		push	eax		; Dst
		call	ds:memmove
		push	[ebp+Size]	; Size
		push	[ebp+Src]	; Src
		push	esi		; Dst
		call	memcpy
		mov	eax, [ebp+Size]
		push	[ebp+Str]	; unsigned __int8 *
		add	eax, esi
		mov	[ebp+var_C], eax
		mov	eax, [ebp+Size]
		push	[ebp+var_C]	; unsigned __int8 *
		add	edi, esi
		mov	byte ptr [edi+eax], 0
		sub	eax, [ebp+var_8]
		add	[ebp+var_14], eax
		call	ebx ; _mbsstr
		mov	esi, eax
		add	esp, 20h
		test	esi, esi
		jnz	short loc_6B18EF46
		mov	edi, [ebp+var_20]

loc_6B18EF9A:				; CODE XREF: sub_6B18EE66+DEj
		mov	esi, [ebp+var_C]
		test	esi, esi
		jz	short loc_6B18EFAA
		push	esi		; Str
		call	strlen
		pop	ecx
		jmp	short loc_6B18EFAC
; ---------------------------------------------------------------------------

loc_6B18EFAA:				; CODE XREF: sub_6B18EE66+139j
		xor	eax, eax

loc_6B18EFAC:				; CODE XREF: sub_6B18EE66+142j
		lea	eax, [esi+eax+1]
		cmp	eax, [ebp+var_24]

loc_6B18EFB3:				; CODE XREF: sub_6B18EE66+CEj
		mov	[ebp+var_C], eax
		jb	loc_6B18EF36
		mov	ecx, [ebp+var_18]
		push	edi
		call	sub_6B181598

loc_6B18EFC5:				; CODE XREF: sub_6B18EE66+92j
		pop	ebx

loc_6B18EFC6:				; CODE XREF: sub_6B18EE66+53j
		mov	eax, [ebp+var_10]

loc_6B18EFC9:				; CODE XREF: sub_6B18EE66+2Cj
		pop	edi
		pop	esi
		leave
		retn	8
sub_6B18EE66	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6B18EFCF(unsigned __int8 *)
sub_6B18EFCF	proc near		; CODE XREF: Ordinal735+Fp
					; Ordinal722+72p ...

arg_0		= dword	ptr  4

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_0]
		test	ebp, ebp
		mov	ebx, ecx
		jz	short loc_6B18F028
		cmp	byte ptr [ebp+0], 0
		jz	short loc_6B18F028
		push	esi
		mov	esi, [ebx]
		mov	al, [esi]
		push	edi
		xor	edi, edi
		test	al, al
		jz	short loc_6B18F026

loc_6B18EFED:				; CODE XREF: sub_6B18EFCF+47j
		movzx	eax, al
		push	eax		; unsigned int
		push	ebp		; unsigned __int8 *
		call	ds:_mbschr
		test	eax, eax
		pop	ecx
		pop	ecx
		jz	short loc_6B18F006
		test	edi, edi
		jnz	short loc_6B18F008
		mov	edi, esi
		jmp	short loc_6B18F008
; ---------------------------------------------------------------------------

loc_6B18F006:				; CODE XREF: sub_6B18EFCF+2Dj
		xor	edi, edi

loc_6B18F008:				; CODE XREF: sub_6B18EFCF+31j
					; sub_6B18EFCF+35j
		push	esi		; unsigned __int8 *
		call	ds:_mbsinc
		mov	esi, eax
		mov	al, [esi]
		test	al, al
		pop	ecx
		jnz	short loc_6B18EFED
		test	edi, edi
		jz	short loc_6B18F026
		sub	edi, [ebx]
		mov	ecx, ebx
		push	edi
		call	sub_6B181FD8

loc_6B18F026:				; CODE XREF: sub_6B18EFCF+1Cj
					; sub_6B18EFCF+4Bj
		pop	edi
		pop	esi

loc_6B18F028:				; CODE XREF: sub_6B18EFCF+Aj
					; sub_6B18EFCF+10j
		pop	ebp
		mov	eax, ebx
		pop	ebx
		retn	4
sub_6B18EFCF	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6B18F02F(char *Format, va_list Args)
sub_6B18F02F	proc near		; CODE XREF: sub_6B18F0EE+Dp
					; Ordinal722+46p ...

Format		= dword	ptr  8
Args		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		cmp	[ebp+Format], 0
		push	esi
		push	edi
		mov	edi, ecx
		jnz	short loc_6B18F046
		push	80070057h
		call	sub_6B181113
; ---------------------------------------------------------------------------

loc_6B18F046:				; CODE XREF: sub_6B18F02F+Bj
		push	[ebp+Args]	; ArgList
		push	[ebp+Format]	; Format
		call	ds:_vscprintf
		pop	ecx
		pop	ecx
		mov	esi, eax
		push	esi
		mov	ecx, edi
		call	sub_6B1818C7
		push	[ebp+Args]	; Args
		push	[ebp+Format]	; Format
		push	eax		; Dest
		call	ds:vsprintf
		add	esp, 0Ch
		push	esi
		mov	ecx, edi
		call	sub_6B181598
		pop	edi
		pop	esi
		pop	ebp
		retn	8
sub_6B18F02F	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6B18F07C(unsigned __int8 *)
sub_6B18F07C	proc near		; CODE XREF: Ordinal735+16p
					; Ordinal1539+4Fp ...

arg_0		= dword	ptr  4

		push	ebx
		push	edi
		mov	edi, [esp+8+arg_0]
		test	edi, edi
		mov	ebx, ecx
		jz	short loc_6B18F0E7
		cmp	byte ptr [edi],	0
		jz	short loc_6B18F0E7
		push	esi
		mov	esi, [ebx]
		jmp	short loc_6B18F0AD
; ---------------------------------------------------------------------------

loc_6B18F092:				; CODE XREF: sub_6B18F07C+35j
		movzx	eax, al
		push	eax		; unsigned int
		push	edi		; unsigned __int8 *
		call	ds:_mbschr
		test	eax, eax
		pop	ecx
		pop	ecx
		jz	short loc_6B18F0B3
		push	esi		; unsigned __int8 *
		call	ds:_mbsinc
		pop	ecx
		mov	esi, eax

loc_6B18F0AD:				; CODE XREF: sub_6B18F07C+14j
		mov	al, [esi]
		test	al, al
		jnz	short loc_6B18F092

loc_6B18F0B3:				; CODE XREF: sub_6B18F07C+25j
		mov	eax, [ebx]
		cmp	esi, eax
		jz	short loc_6B18F0E6
		push	dword ptr [eax-0Ch]
		mov	ecx, ebx
		sub	esi, eax
		call	sub_6B1818C7
		mov	ecx, [ebx]
		mov	edi, [ecx-0Ch]
		sub	edi, esi
		lea	ecx, [edi+1]
		push	ecx		; Size
		lea	ecx, [eax+esi]
		push	ecx		; Src
		push	eax		; Dst
		call	ds:memmove
		add	esp, 0Ch
		push	edi
		mov	ecx, ebx
		call	sub_6B181598

loc_6B18F0E6:				; CODE XREF: sub_6B18F07C+3Bj
		pop	esi

loc_6B18F0E7:				; CODE XREF: sub_6B18F07C+Aj
					; sub_6B18F07C+Fj
		pop	edi
		mov	eax, ebx
		pop	ebx
		retn	4
sub_6B18F07C	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6B18F0EE(int,	char *Format, char Args)
sub_6B18F0EE	proc near		; CODE XREF: Ordinal737+60p
					; Ordinal737+94p ...

arg_0		= dword	ptr  4
Format		= dword	ptr  8
Args		= byte ptr  0Ch

		mov	ecx, [esp+arg_0]
		lea	eax, [esp+Args]
		push	eax		; Args
		push	[esp+4+Format]	; Format
		call	sub_6B18F02F
		retn
sub_6B18F0EE	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18F101	proc near		; CODE XREF: Ordinal737+12Cp
					; Ordinal737+137p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		push	esi
		push	dword ptr [eax-0Ch] ; Size
		mov	esi, ecx
		push	eax		; int
		call	sub_6B185A58
		mov	eax, esi
		pop	esi
		retn	4
sub_6B18F101	endp

; Exported entry 735.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal735
Ordinal735	proc near		; DATA XREF: .rdata:6B1B0180o
					; .rdata:6B1B7B50o ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	eax, offset dword_6B1B018C
		push	eax		; unsigned __int8 *
		push	eax		; unsigned __int8 *
		mov	ecx, esi
		call	sub_6B18EFCF
		mov	ecx, eax
		call	sub_6B18F07C
		push	20h
		pop	edi
		push	edi
		push	9
		mov	ecx, esi
		call	sub_6B18EDED
		push	edi
		push	7
		mov	ecx, esi
		call	sub_6B18EDED
		push	edi
		push	8
		mov	ecx, esi
		call	sub_6B18EDED
		push	edi
		push	0Ch
		mov	ecx, esi
		call	sub_6B18EDED
		push	edi
		push	0Bh
		mov	ecx, esi
		call	sub_6B18EDED
		push	offset asc_6B1B0188 ; "	"
		push	offset pszTrimChars ; "\r\n"
		mov	ecx, esi
		call	sub_6B18EE66
		push	edi
		push	0Dh
		mov	ecx, esi
		call	sub_6B18EDED
		push	edi
		push	0Ah
		mov	ecx, esi
		call	sub_6B18EDED
		xor	eax, eax
		pop	edi
		inc	eax
		pop	esi
		retn	4
Ordinal735	endp

; Exported entry 737.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal737
Ordinal737	proc near		; CODE XREF: Ordinal738+10p
					; DATA XREF: .rdata:off_6B1BF428o

var_60		= byte ptr -60h
SystemTime	= _SYSTEMTIME ptr -40h
Format		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_60 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 5Ch
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_14], eax
		lea	eax, [ebp+SystemTime]
		mov	[ebp+var_10], esp
		push	eax		; lpSystemTime
		mov	esi, ecx
		call	ds:GetLocalTime
		push	offset aCautocyclelo_0 ; "CAutoCycleLogFile::BuildFileName()"
		lea	ecx, [ebp+var_60]
		call	Ordinal1089
		xor	ebx, ebx
		lea	ecx, [ebp+var_28]
		mov	[ebp+var_4], ebx
		call	sub_6B181879
		mov	eax, [esi+34h]
		dec	eax
		dec	eax
		mov	byte ptr [ebp+var_4], 2
		jz	short loc_6B18F212
		dec	eax
		jz	short loc_6B18F200
		dec	eax
		jnz	short loc_6B18F232
		movzx	eax, [ebp+SystemTime.wDay]
		push	eax		; Args
		push	offset a_02d	; "_%02d"

loc_6B18F1F2:				; CODE XREF: Ordinal737+7Aj
		lea	eax, [ebp+var_28]
		push	eax		; int
		call	sub_6B18F0EE
		add	esp, 0Ch
		jmp	short loc_6B18F232
; ---------------------------------------------------------------------------

loc_6B18F200:				; CODE XREF: Ordinal737+4Dj
		movzx	eax, [ebp+SystemTime.wDayOfWeek]
		push	ds:off_6B1B00E0[eax*4]
		push	offset a_S	; "_%s"
		jmp	short loc_6B18F1F2
; ---------------------------------------------------------------------------

loc_6B18F212:				; CODE XREF: Ordinal737+4Aj
		movzx	eax, [ebp+SystemTime.wDay]
		push	eax
		movzx	eax, [ebp+SystemTime.wMonth]
		push	eax
		movzx	eax, [ebp+SystemTime.wYear]
		push	eax		; Args
		lea	eax, [ebp+var_28]
		push	offset a_04d02d02d ; "_%04d%02d%02d"
		push	eax		; int
		call	sub_6B18F0EE
		add	esp, 14h

loc_6B18F232:				; CODE XREF: Ordinal737+50j
					; Ordinal737+68j
		lea	ecx, [ebp+var_2C]
		call	sub_6B181879
		cmp	[esi+3Ch], ebx
		mov	byte ptr [ebp+var_4], 3
		ja	short loc_6B18F248
		cmp	[esi+38h], ebx
		jbe	short loc_6B18F299

loc_6B18F248:				; CODE XREF: Ordinal737+ABj
		mov	eax, [esi+40h]
		xor	edi, edi
		inc	edi

loc_6B18F24E:				; CODE XREF: Ordinal737+C4j
		push	0Ah
		xor	edx, edx
		pop	ecx
		div	ecx
		cmp	eax, ebx
		jbe	short loc_6B18F25C
		inc	edi
		jmp	short loc_6B18F24E
; ---------------------------------------------------------------------------

loc_6B18F25C:				; CODE XREF: Ordinal737+C1j
		lea	ecx, [ebp+Format]
		call	sub_6B181879
		push	edi		; Args
		lea	eax, [ebp+Format]
		push	offset a_0Dlu	; "_%%0%dlu"
		push	eax		; int
		mov	byte ptr [ebp+var_4], 4
		call	sub_6B18F0EE
		mov	edi, [ebp+Format]
		add	esp, 0Ch
		push	dword ptr [esi+44h] ; Args
		lea	eax, [ebp+var_2C]
		push	edi		; Format
		push	eax		; int
		call	sub_6B18F0EE
		add	esp, 0Ch
		lea	ecx, [edi-10h]
		mov	byte ptr [ebp+var_4], 3
		call	sub_6B18163D

loc_6B18F299:				; CODE XREF: Ordinal737+B0j
		lea	eax, [esi+24h]
		lea	edi, [esi+2Ch]
		push	eax
		mov	ecx, edi
		call	sub_6B181F8B
		push	5Ch
		mov	ecx, edi
		call	sub_6B182485
		push	offset SubBlock	; "\\"
		mov	ecx, edi
		call	sub_6B185AA4
		lea	eax, [esi+28h]
		push	eax
		mov	ecx, edi
		call	sub_6B18F101
		lea	eax, [ebp+var_28]
		push	eax
		mov	ecx, edi
		call	sub_6B18F101
		lea	eax, [ebp+var_2C]
		push	eax
		mov	ecx, edi
		call	sub_6B18F101
		push	offset dword_6B1B0198 ;	Str
		mov	ecx, edi
		call	sub_6B185AA4
		add	esi, 30h
		push	esi
		mov	ecx, edi
		call	sub_6B18F101
		mov	ecx, [ebp+var_2C]
		add	ecx, 0FFFFFFF0h
		call	sub_6B18163D
		mov	ecx, [ebp+var_28]
		add	ecx, 0FFFFFFF0h
		call	sub_6B18163D

loc_6B18F30A:				; DATA XREF: sub_6B18F33A+3Do
					; sub_6B18F37D+4Fo
		lea	ecx, [ebp+var_60]
		call	Ordinal1635
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		lea	ecx, [ebp+var_60]
		inc	esi
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal737	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18F33A	proc near		; DATA XREF: .rdata:6B1BB948o
		push	13h
		lea	ecx, [ebp-60h]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-60h]
		call	Ordinal1101
		mov	ecx, [ebp-64h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-60h]
		call	Ordinal1103
		lea	ecx, [ebp-60h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B18F30A
		retn
sub_6B18F33A	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18F37D	proc near		; DATA XREF: .rdata:6B1BB958o
		push	15h
		lea	ecx, [ebp-60h]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-60h]
		call	Ordinal1101
		mov	eax, [ebp-68h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-60h]
		call	Ordinal1103
		lea	ecx, [ebp-60h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B18F30A
		retn
sub_6B18F37D	endp

; Exported entry 738.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal738
Ordinal738	proc near		; CODE XREF: Ordinal739+79p
					; Ordinal718+16Bp
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		push	edi
		lea	edi, [esi+8]
		mov	ecx, edi
		call	Ordinal1113
		mov	ecx, esi
		call	Ordinal737
		test	eax, eax
		jnz	short loc_6B18F3F8
		push	offset aCautocyclelo_1 ; "CAutoCycleLogFile::Open() : BuildFileNa"...

loc_6B18F3F0:				; CODE XREF: Ordinal738+58j
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B18F449
; ---------------------------------------------------------------------------

loc_6B18F3F8:				; CODE XREF: Ordinal738+17j
		mov	eax, [esi+2Ch]
		xor	ecx, ecx
		xor	edx, edx
		cmp	[esp+8+arg_0], ecx
		push	ecx		; hTemplateFile
		setz	dl
		push	80h		; dwFlagsAndAttributes
		lea	edx, [edx+edx+2]
		push	edx		; dwCreationDisposition
		push	ecx		; lpSecurityAttributes
		push	1		; dwShareMode
		push	40000000h	; dwDesiredAccess
		push	eax		; Args
		mov	ecx, edi
		call	Ordinal1112
		test	eax, eax
		jnz	short loc_6B18F42C
		push	offset aCautocyclelo_2 ; "CAutoCycleLogFile::Open() : m_File.Open"...
		jmp	short loc_6B18F3F0
; ---------------------------------------------------------------------------

loc_6B18F42C:				; CODE XREF: Ordinal738+51j
		mov	ecx, edi
		call	Ordinal1116
		test	eax, eax
		jnz	short loc_6B18F44D
		push	offset aCautocyclelo_3 ; "CAutoCycleLogFile::Open() : m_File.Seek"...
		call	sub_6B18102E
		pop	ecx
		mov	ecx, esi
		call	Ordinal719

loc_6B18F449:				; CODE XREF: Ordinal738+24j
		xor	eax, eax
		jmp	short loc_6B18F450
; ---------------------------------------------------------------------------

loc_6B18F44D:				; CODE XREF: Ordinal738+63j
		xor	eax, eax
		inc	eax

loc_6B18F450:				; CODE XREF: Ordinal738+79j
		pop	edi
		pop	esi
		retn	4
Ordinal738	endp

; Exported entry 739.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal739
Ordinal739	proc near		; CODE XREF: Ordinal736+1Bp
					; DATA XREF: .rdata:off_6B1BF428o

SystemTime	= _SYSTEMTIME ptr -10h

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		xor	ebx, ebx
		push	edi
		mov	esi, ecx
		xor	edi, edi
		inc	ebx
		cmp	[esi+3Ch], edi
		ja	short loc_6B18F46F
		cmp	[esi+38h], edi
		jbe	short loc_6B18F492

loc_6B18F46F:				; CODE XREF: Ordinal739+13j
		mov	ecx, esi
		call	Ordinal726
		cmp	edx, [esi+3Ch]
		jb	short loc_6B18F492
		ja	short loc_6B18F482
		cmp	eax, [esi+38h]
		jbe	short loc_6B18F492

loc_6B18F482:				; CODE XREF: Ordinal739+26j
		inc	dword ptr [esi+44h]
		mov	eax, [esi+44h]
		cmp	eax, [esi+40h]
		jbe	short loc_6B18F490
		mov	[esi+44h], ebx

loc_6B18F490:				; CODE XREF: Ordinal739+36j
		mov	edi, ebx

loc_6B18F492:				; CODE XREF: Ordinal739+18j
					; Ordinal739+24j ...
		lea	eax, [ebp+SystemTime]
		push	eax		; lpSystemTime
		call	ds:GetLocalTime
		test	edi, edi
		jnz	short loc_6B18F4CB
		mov	eax, [esi+34h]
		cmp	eax, 2
		jl	short loc_6B18F4D5
		cmp	eax, 4
		jg	short loc_6B18F4D5
		mov	ax, [ebp+SystemTime.wYear]
		cmp	ax, [esi+14h]
		jnz	short loc_6B18F4CB
		mov	ax, [ebp+SystemTime.wMonth]
		cmp	ax, [esi+16h]
		jnz	short loc_6B18F4CB
		mov	ax, [ebp+SystemTime.wDay]
		cmp	ax, [esi+1Ah]
		jz	short loc_6B18F4D5

loc_6B18F4CB:				; CODE XREF: Ordinal739+49j
					; Ordinal739+60j ...
		push	ebx
		mov	ecx, esi
		call	Ordinal738
		jmp	short loc_6B18F4D7
; ---------------------------------------------------------------------------

loc_6B18F4D5:				; CODE XREF: Ordinal739+51j
					; Ordinal739+56j ...
		mov	eax, ebx

loc_6B18F4D7:				; CODE XREF: Ordinal739+7Ej
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal739	endp

; Exported entry 718.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal718(LPCSTR Src, int, int, int, int)
		public Ordinal718
Ordinal718	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_5C		= byte ptr -5Ch
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		mov	eax, offset unknown_libname_61 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 50h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		mov	[ebp+var_14], eax
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_5C]
		mov	[ebp+var_28], esi
		call	Ordinal1571
		cmp	[ebp+Src], ebx
		mov	[ebp+var_4], ebx
		jz	loc_6B18F658
		push	[ebp+Src]	; lpString
		mov	edi, ds:lstrlenA
		call	edi ; lstrlenA
		test	eax, eax
		jz	loc_6B18F658
		cmp	[ebp+arg_4], ebx
		jz	loc_6B18F658
		push	[ebp+arg_4]	; lpString
		call	edi ; lstrlenA
		test	eax, eax
		jz	loc_6B18F658
		cmp	[ebp+arg_C], ebx
		jz	loc_6B18F658
		mov	ecx, esi
		call	Ordinal719
		push	offset aCautocyclelo_4 ; "CAutoCycleLogFile::Open()"
		lea	ecx, [ebp+var_48]
		call	Ordinal1089
		push	[ebp+Src]	; Src
		lea	ecx, [esi+24h]
		mov	byte ptr [ebp+var_4], 2
		call	sub_6B181EA9
		push	[ebp+arg_4]	; Src
		lea	ecx, [esi+28h]
		call	sub_6B181EA9
		push	[ebp+arg_8]	; Src
		lea	ecx, [esi+30h]
		call	sub_6B181EA9
		jmp	loc_6B18F626
; ---------------------------------------------------------------------------

loc_6B18F589:				; DATA XREF: .rdata:6B1BB9B8o
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B18F621
		retn
; ---------------------------------------------------------------------------

loc_6B18F5CC:				; DATA XREF: .rdata:6B1BB9C8o
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	eax, [ebp+var_4C]
		push	dword ptr [eax]
		lea	eax, [ebp+var_24]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+var_24]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B18F621
		retn
; ---------------------------------------------------------------------------

loc_6B18F621:				; DATA XREF: Ordinal718+EAo
					; Ordinal718+13Fo
		mov	esi, [ebp+var_28]
		xor	ebx, ebx

loc_6B18F626:				; CODE XREF: Ordinal718+A8j
		lea	ecx, [ebp+var_48]
		call	Ordinal1635
		test	eax, eax
		jz	short loc_6B18F63C
		lea	ecx, [ebp+var_48]
		call	Ordinal1090
		jmp	short loc_6B18F663
; ---------------------------------------------------------------------------

loc_6B18F63C:				; CODE XREF: Ordinal718+154j
		mov	eax, [ebp+arg_C]
		push	[ebp+arg_10]
		mov	ecx, esi
		mov	[esi+34h], eax
		call	Ordinal738
		lea	ecx, [ebp+var_48]
		mov	esi, eax
		call	Ordinal1090
		jmp	short loc_6B18F665
; ---------------------------------------------------------------------------

loc_6B18F658:				; CODE XREF: Ordinal718+37j
					; Ordinal718+4Aj ...
		push	offset aCautocyclelo_5 ; "CAutoCycleLogFile::Open() : szDirectory"...
		call	sub_6B18102E
		pop	ecx

loc_6B18F663:				; CODE XREF: Ordinal718+15Ej
		xor	esi, esi

loc_6B18F665:				; CODE XREF: Ordinal718+17Aj
		lea	ecx, [ebp+var_5C]
		call	Ordinal1573
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	14h
Ordinal718	endp ; sp-analysis failed

; Exported entry 736.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal736
Ordinal736	proc near		; CODE XREF: Ordinal722+93p
					; Ordinal1545+237p
					; DATA XREF: ...

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	ecx, esi
		call	Ordinal739
		test	eax, eax
		jnz	short loc_6B18F6BB
		push	offset aCautocyclelo_6 ; "CAutoCycleLogFile::LogEx() : CycleLogFi"...
		call	sub_6B18102E
		pop	ecx
		xor	esi, esi
		jmp	short loc_6B18F6F8
; ---------------------------------------------------------------------------

loc_6B18F6BB:				; CODE XREF: Ordinal736+22j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	ecx, [eax-0Ch]
		push	edi		; Args
		push	ecx		; nNumberOfBytesToWrite
		lea	edi, [esi+8]
		push	eax		; lpBuffer
		mov	ecx, edi
		call	Ordinal1119
		test	eax, eax
		jnz	short loc_6B18F6E3
		push	offset aCautocyclelo_7 ; "CAutoCycleLogFile::LogEx() : m_File.Wri"...
		call	sub_6B18102E
		pop	ecx
		xor	esi, esi
		jmp	short loc_6B18F6F7
; ---------------------------------------------------------------------------

loc_6B18F6E3:				; CODE XREF: Ordinal736+4Aj
		cmp	dword ptr [esi+48h], 0
		jz	short loc_6B18F6F4
		mov	ecx, edi
		call	Ordinal1124
		mov	esi, eax
		jmp	short loc_6B18F6F7
; ---------------------------------------------------------------------------

loc_6B18F6F4:				; CODE XREF: Ordinal736+5Fj
		xor	esi, esi
		inc	esi

loc_6B18F6F7:				; CODE XREF: Ordinal736+59j
					; Ordinal736+6Aj
		pop	edi

loc_6B18F6F8:				; CODE XREF: Ordinal736+31j
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal736	endp

; Exported entry 722.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal722(char	*Format, va_list Args)
		public Ordinal722
Ordinal722	proc near		; CODE XREF: Ordinal721+Dp
					; DATA XREF: .rdata:off_6B1BF428o

var_4C		= byte ptr -4Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Format		= dword	ptr  8
Args		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_62 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 48h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		mov	esi, ecx
		push	edi
		lea	ecx, [ebp+var_28]
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_2C], esi
		call	sub_6B181879
		and	[ebp+var_4], 0
		push	offset aCautocyclelo_8 ; "CAutoCycleLogFile::LogV()"
		lea	ecx, [ebp+var_4C]
		call	Ordinal1089
		push	[ebp+Args]	; Args
		lea	ecx, [ebp+var_28]
		push	[ebp+Format]	; Format
		mov	byte ptr [ebp+var_4], 2
		call	sub_6B18F02F
		mov	eax, [esi]
		lea	ecx, [ebp+var_28]
		push	ecx
		mov	ecx, esi
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6B18F770
		push	offset aCautocyclelo_9 ; "CAutoCycleLogFile::LogV() : Filter() =="...
		call	sub_6B18102E
		pop	ecx

loc_6B18F76C:				; CODE XREF: Ordinal722+8Aj
		xor	esi, esi
		jmp	short loc_6B18F7A1
; ---------------------------------------------------------------------------

loc_6B18F770:				; CODE XREF: Ordinal722+58j
		mov	esi, offset pszTrimChars ; "\r\n"
		push	esi		; unsigned __int8 *
		lea	ecx, [ebp+var_28]
		call	sub_6B18EFCF
		push	esi		; Str
		lea	ecx, [ebp+var_28]
		call	sub_6B185AA4

loc_6B18F787:				; DATA XREF: sub_6B18F7CF+3Do
					; sub_6B18F812+4Fo
		lea	ecx, [ebp+var_4C]
		call	Ordinal1635
		test	eax, eax
		jnz	short loc_6B18F76C
		mov	ecx, [ebp+var_2C]
		lea	eax, [ebp+var_28]
		push	eax
		call	Ordinal736
		mov	esi, eax

loc_6B18F7A1:				; CODE XREF: Ordinal722+67j
		lea	ecx, [ebp+var_4C]
		call	Ordinal1090
		mov	ecx, [ebp+var_28]
		add	ecx, 0FFFFFFF0h
		call	sub_6B18163D
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal722	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18F7CF	proc near		; DATA XREF: .rdata:6B1BBA28o
		push	13h
		lea	ecx, [ebp-4Ch]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-4Ch]
		call	Ordinal1101
		mov	ecx, [ebp-50h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-4Ch]
		call	Ordinal1103
		lea	ecx, [ebp-4Ch]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B18F787
		retn
sub_6B18F7CF	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B18F812	proc near		; DATA XREF: .rdata:6B1BBA38o
		push	15h
		lea	ecx, [ebp-4Ch]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-4Ch]
		call	Ordinal1101
		mov	eax, [ebp-54h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-4Ch]
		call	Ordinal1103
		lea	ecx, [ebp-4Ch]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B18F787
		retn
sub_6B18F812	endp

; Exported entry 721.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal721(int, char *Format, char Args)
		public Ordinal721
Ordinal721	proc near		; CODE XREF: Ordinal713+Dp
					; Ordinal714+12p ...

arg_0		= dword	ptr  4
Format		= dword	ptr  8
Args		= byte ptr  0Ch

		mov	ecx, [esp+arg_0]
		lea	eax, [esp+Args]
		push	eax		; Args
		push	[esp+4+Format]	; Format
		call	Ordinal722
		retn
Ordinal721	endp

; Exported entry 713.

; =============== S U B	R O U T	I N E =======================================


; int __thiscall Ordinal713(int, char Args)
		public Ordinal713
Ordinal713	proc near		; DATA XREF: .rdata:off_6B1BF428o

Args		= byte ptr  4

		push	esi
		push	dword ptr [esp+4+Args] ; Args
		mov	esi, ecx
		push	offset aLd	; "%ld"
		push	esi		; int
		call	Ordinal721
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		retn	4
Ordinal713	endp

; Exported entry 714.

; =============== S U B	R O U T	I N E =======================================


; int __thiscall Ordinal714(char Args, double)
		public Ordinal714
Ordinal714	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= qword	ptr -0Ch
arg_0		= qword	ptr  4

		fld	[esp+arg_0]
		push	esi
		push	ecx
		push	ecx		; Args
		fstp	[esp+0Ch+var_C]
		mov	esi, ecx
		push	offset asc_6B1B03A4 ; "%f"
		push	esi		; int
		call	Ordinal721
		add	esp, 10h
		mov	eax, esi
		pop	esi
		retn	8
Ordinal714	endp

; Exported entry 715.

; =============== S U B	R O U T	I N E =======================================


; int __thiscall Ordinal715(int, char Args)
		public Ordinal715
Ordinal715	proc near		; DATA XREF: .rdata:off_6B1BF428o

Args		= byte ptr  4

		push	esi
		push	dword ptr [esp+4+Args] ; Args
		mov	esi, ecx
		push	offset aLu	; "%lu"
		push	esi		; int
		call	Ordinal721
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		retn	4
Ordinal715	endp

; Exported entry 716.

; =============== S U B	R O U T	I N E =======================================


; int __thiscall Ordinal716(int, char)
		public Ordinal716
Ordinal716	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= byte ptr  4

		movsx	eax, [esp+arg_0]
		push	esi
		push	eax		; Args
		mov	esi, ecx
		push	offset aC	; "%c"
		push	esi		; int
		call	Ordinal721
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		retn	4
Ordinal716	endp

; Exported entry 717.

; =============== S U B	R O U T	I N E =======================================


; int __thiscall Ordinal717(int, char Args)
		public Ordinal717
Ordinal717	proc near		; DATA XREF: .rdata:off_6B1BF428o

Args		= byte ptr  4

		push	esi
		push	dword ptr [esp+4+Args] ; Args
		mov	esi, ecx
		push	offset aS	; "%s"
		push	esi		; int
		call	Ordinal721
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		retn	4
Ordinal717	endp

; Exported entry 740.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal740
Ordinal740	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+4]
		mov	dword ptr [esi], offset	off_6B1B03B4
		call	Ordinal1187
		xor	eax, eax
		lea	ecx, [esi+28h]
		mov	[esi+14h], eax
		mov	[esi+18h], eax
		mov	[esi+1Ch], eax
		mov	[esi+20h], eax
		mov	[esi+24h], eax
		call	Ordinal1615
		mov	eax, esi
		pop	esi
		retn
Ordinal740	endp

; Exported entry 742.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal742(int,	SIZE_T dwBytes)
		public Ordinal742
Ordinal742	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
dwBytes		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+28h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		push	[ebp+dwBytes]	; dwBytes
		lea	ebx, [esi+4]
		push	[ebp+arg_0]	; int
		mov	ecx, ebx
		call	Ordinal1195
		test	eax, eax
		mov	[esi+14h], eax
		jnz	short loc_6B18F976
		push	offset aCcircularbuffe ; "CCircularBuffer::Create() : m_Buffer.Al"...
		call	sub_6B18102E
		pop	ecx
		xor	esi, esi
		jmp	short loc_6B18F994
; ---------------------------------------------------------------------------

loc_6B18F976:				; CODE XREF: Ordinal742+2Fj
		push	edi
		mov	edi, [esi+14h]
		mov	ecx, ebx
		call	Ordinal1052
		and	dword ptr [esi+24h], 0
		add	eax, edi
		mov	[esi+20h], edi
		mov	[esi+1Ch], edi
		mov	[esi+18h], eax
		xor	esi, esi
		inc	esi
		pop	edi

loc_6B18F994:				; CODE XREF: Ordinal742+3Ej
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal742	endp

; Exported entry 743.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal743
Ordinal743	proc near		; CODE XREF: Ordinal741+9p
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+28h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	ecx, [esi+4]
		call	Ordinal1200
		and	dword ptr [esi+20h], 0
		and	dword ptr [esi+1Ch], 0
		and	dword ptr [esi+24h], 0
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		pop	esi
		leave
		retn
Ordinal743	endp

; Exported entry 744.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal744
Ordinal744	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+28h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	eax, [esi+14h]
		and	dword ptr [esi+24h], 0
		lea	ecx, [ebp+var_C]
		mov	[esi+20h], eax
		mov	[esi+1Ch], eax
		call	Ordinal1573
		pop	esi
		leave
		retn
Ordinal744	endp

; Exported entry 750.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal750
Ordinal750	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+28h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	esi, [esi+24h]
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal750	endp

; Exported entry 751.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal751
Ordinal751	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+28h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	ecx, [esi+4]
		call	Ordinal1052
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal751	endp

; Exported entry 752.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal752
Ordinal752	proc near		; CODE XREF: Ordinal747+25p
					; Ordinal748+25p ...

NumberOfBytesWritten= dword ptr	-4
Dst		= dword	ptr  8
hFile		= dword	ptr  0Ch
nNumberOfBytesToWrite= dword ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		xor	edx, edx
		cmp	[esi+14h], edx
		jnz	short loc_6B18FA86
		push	offset aCcircularbuf_0 ; "CCircularBuffer::ReadEx() : m_pBufferBe"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6B18FBA9
; ---------------------------------------------------------------------------

loc_6B18FA86:				; CODE XREF: Ordinal752+Cj
		push	edi		; Args
		mov	edi, [ebp+nNumberOfBytesToWrite]
		cmp	[esi+24h], edi
		jnb	short loc_6B18FAA1
		push	offset aCcircularbuf_1 ; "CCircularBuffer::ReadEx() : m_nDataSize"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6B18FBA8
; ---------------------------------------------------------------------------

loc_6B18FAA1:				; CODE XREF: Ordinal752+27j
		mov	ecx, [esi+1Ch]
		mov	eax, [esi+18h]
		push	ebx
		lea	ebx, [ecx+edi]
		cmp	ebx, eax
		mov	[ebp+NumberOfBytesWritten], edx
		ja	short loc_6B18FB16
		cmp	[ebp+Dst], edx
		jz	short loc_6B18FAC6
		push	edi		; Size
		push	ecx		; Src
		push	[ebp+Dst]	; Dst
		call	memcpy
		add	esp, 0Ch
		xor	edx, edx

loc_6B18FAC6:				; CODE XREF: Ordinal752+4Fj
		cmp	[ebp+hFile], edx
		jz	short loc_6B18FB02
		push	edx		; lpOverlapped
		lea	eax, [ebp+NumberOfBytesWritten]
		push	eax		; lpNumberOfBytesWritten
		push	edi		; nNumberOfBytesToWrite
		push	dword ptr [esi+1Ch] ; lpBuffer
		push	[ebp+hFile]	; hFile
		call	ds:WriteFile
		test	eax, eax
		jz	short loc_6B18FAE6
		cmp	[ebp+NumberOfBytesWritten], edi
		jz	short loc_6B18FB00

loc_6B18FAE6:				; CODE XREF: Ordinal752+79j
					; Ordinal752+E1j ...
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCcircularbuf_2 ; "CCircularBuffer::ReadEx() : WriteFile()"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	loc_6B18FBA7
; ---------------------------------------------------------------------------

loc_6B18FB00:				; CODE XREF: Ordinal752+7Ej
		xor	edx, edx

loc_6B18FB02:				; CODE XREF: Ordinal752+63j
		cmp	[ebp+arg_C], edx
		jz	loc_6B18FBA4
		add	[esi+1Ch], edi
		sub	[esi+24h], edi
		jmp	loc_6B18FBA4
; ---------------------------------------------------------------------------

loc_6B18FB16:				; CODE XREF: Ordinal752+4Aj
		sub	eax, ecx
		cmp	[ebp+Dst], edx
		mov	ebx, eax
		jz	short loc_6B18FB2E
		push	ebx		; Size
		push	ecx		; Src
		push	[ebp+Dst]	; Dst
		call	memcpy
		add	esp, 0Ch
		xor	edx, edx

loc_6B18FB2E:				; CODE XREF: Ordinal752+B7j
		cmp	[ebp+hFile], edx
		jz	short loc_6B18FB4E
		push	edx		; lpOverlapped
		lea	eax, [ebp+NumberOfBytesWritten]
		push	eax		; lpNumberOfBytesWritten
		push	ebx		; nNumberOfBytesToWrite
		push	dword ptr [esi+1Ch] ; lpBuffer
		push	[ebp+hFile]	; hFile
		call	ds:WriteFile
		test	eax, eax
		jz	short loc_6B18FAE6
		cmp	[ebp+NumberOfBytesWritten], ebx
		jnz	short loc_6B18FAE6

loc_6B18FB4E:				; CODE XREF: Ordinal752+CBj
		mov	eax, [ebp+Dst]
		sub	edi, ebx
		test	eax, eax
		jz	short loc_6B18FB66
		push	edi		; Size
		push	dword ptr [esi+14h] ; Src
		add	ebx, eax
		push	ebx		; Dst
		call	memcpy
		add	esp, 0Ch

loc_6B18FB66:				; CODE XREF: Ordinal752+EFj
		cmp	[ebp+hFile], 0
		jz	short loc_6B18FB90
		push	0		; lpOverlapped
		lea	eax, [ebp+NumberOfBytesWritten]
		push	eax		; lpNumberOfBytesWritten
		push	edi		; nNumberOfBytesToWrite
		push	dword ptr [esi+14h] ; lpBuffer
		push	[ebp+hFile]	; hFile
		call	ds:WriteFile
		test	eax, eax
		jz	loc_6B18FAE6
		cmp	[ebp+NumberOfBytesWritten], edi
		jnz	loc_6B18FAE6

loc_6B18FB90:				; CODE XREF: Ordinal752+104j
		cmp	[ebp+arg_C], 0
		jz	short loc_6B18FBA4
		mov	eax, [esi+14h]
		add	eax, edi
		mov	[esi+1Ch], eax
		mov	eax, [ebp+nNumberOfBytesToWrite]
		sub	[esi+24h], eax

loc_6B18FBA4:				; CODE XREF: Ordinal752+9Fj
					; Ordinal752+ABj ...
		xor	eax, eax
		inc	eax

loc_6B18FBA7:				; CODE XREF: Ordinal752+95j
		pop	ebx

loc_6B18FBA8:				; CODE XREF: Ordinal752+36j
		pop	edi

loc_6B18FBA9:				; CODE XREF: Ordinal752+1Bj
		pop	esi
		leave
		retn	10h
Ordinal752	endp

; Exported entry 753.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal753
Ordinal753	proc near		; CODE XREF: Ordinal745+23p
					; Ordinal746+23p
					; DATA XREF: ...

NumberOfBytesRead= dword ptr -4
Src		= dword	ptr  8
hFile		= dword	ptr  0Ch
nNumberOfBytesToRead= dword ptr	 10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		cmp	[esi+14h], ebx
		jnz	short loc_6B18FBCF
		push	offset aCcircularbuf_3 ; "CCircularBuffer::WriteEx() : m_pBufferB"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6B18FCE0
; ---------------------------------------------------------------------------

loc_6B18FBCF:				; CODE XREF: Ordinal753+Dj
		push	edi		; Args
		lea	ecx, [esi+4]
		call	Ordinal1052
		mov	ecx, [esi+24h]
		mov	edi, [ebp+nNumberOfBytesToRead]
		add	ecx, edi
		cmp	ecx, eax
		jbe	short loc_6B18FBF6
		push	offset aCcircularbuf_4 ; "CCircularBuffer::WriteEx() : m_nDataSiz"...
		call	sub_6B18102E

loc_6B18FBEE:				; CODE XREF: Ordinal753+11Bj
		pop	ecx
		xor	eax, eax
		jmp	loc_6B18FCDF
; ---------------------------------------------------------------------------

loc_6B18FBF6:				; CODE XREF: Ordinal753+34j
		mov	ecx, [esi+20h]
		mov	eax, [esi+18h]
		lea	edx, [ecx+edi]
		cmp	edx, eax
		mov	[ebp+NumberOfBytesRead], ebx
		ja	short loc_6B18FC44
		cmp	[ebp+Src], ebx
		jz	short loc_6B18FC18
		push	edi		; Size
		push	[ebp+Src]	; Src
		push	ecx		; Dst
		call	memcpy
		add	esp, 0Ch

loc_6B18FC18:				; CODE XREF: Ordinal753+5Bj
		cmp	[ebp+hFile], ebx
		jz	short loc_6B18FC3C
		push	ebx		; lpOverlapped
		lea	eax, [ebp+NumberOfBytesRead]
		push	eax		; lpNumberOfBytesRead
		push	edi		; nNumberOfBytesToRead
		push	dword ptr [esi+20h] ; lpBuffer
		push	[ebp+hFile]	; hFile
		call	ds:ReadFile
		test	eax, eax
		jz	loc_6B18FCB7
		cmp	[ebp+NumberOfBytesRead], edi
		jnz	short loc_6B18FCB7

loc_6B18FC3C:				; CODE XREF: Ordinal753+6Dj
		add	[esi+20h], edi
		jmp	loc_6B18FCD9
; ---------------------------------------------------------------------------

loc_6B18FC44:				; CODE XREF: Ordinal753+56j
		sub	eax, ecx
		cmp	[ebp+Src], 0
		mov	ebx, eax
		jz	short loc_6B18FC5B
		push	ebx		; Size
		push	[ebp+Src]	; Src
		push	ecx		; Dst
		call	memcpy
		add	esp, 0Ch

loc_6B18FC5B:				; CODE XREF: Ordinal753+9Ej
		cmp	[ebp+hFile], 0
		jz	short loc_6B18FC7D
		push	0		; lpOverlapped
		lea	eax, [ebp+NumberOfBytesRead]
		push	eax		; lpNumberOfBytesRead
		push	ebx		; nNumberOfBytesToRead
		push	dword ptr [esi+20h] ; lpBuffer
		push	[ebp+hFile]	; hFile
		call	ds:ReadFile
		test	eax, eax
		jz	short loc_6B18FCB7
		cmp	[ebp+NumberOfBytesRead], ebx
		jnz	short loc_6B18FCB7

loc_6B18FC7D:				; CODE XREF: Ordinal753+B1j
		mov	eax, [ebp+Src]
		sub	edi, ebx
		test	eax, eax
		jz	short loc_6B18FC95
		push	edi		; Size
		add	ebx, eax
		push	ebx		; Src
		push	dword ptr [esi+14h] ; Dst
		call	memcpy
		add	esp, 0Ch

loc_6B18FC95:				; CODE XREF: Ordinal753+D6j
		cmp	[ebp+hFile], 0
		jz	short loc_6B18FCCE
		push	0		; lpOverlapped
		lea	eax, [ebp+NumberOfBytesRead]
		push	eax		; lpNumberOfBytesRead
		push	edi		; nNumberOfBytesToRead
		push	dword ptr [esi+14h] ; lpBuffer
		push	[ebp+hFile]	; hFile
		call	ds:ReadFile
		test	eax, eax
		jz	short loc_6B18FCB7
		cmp	[ebp+NumberOfBytesRead], edi
		jz	short loc_6B18FCCE

loc_6B18FCB7:				; CODE XREF: Ordinal753+83j
					; Ordinal753+8Cj ...
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCcircularbuf_5 ; "CCircularBuffer::WriteEx() : ReadFile()"...
		call	sub_6B18102E
		pop	ecx
		jmp	loc_6B18FBEE
; ---------------------------------------------------------------------------

loc_6B18FCCE:				; CODE XREF: Ordinal753+EBj
					; Ordinal753+107j
		mov	eax, [esi+14h]
		add	eax, edi
		mov	edi, [ebp+nNumberOfBytesToRead]
		mov	[esi+20h], eax

loc_6B18FCD9:				; CODE XREF: Ordinal753+91j
		add	[esi+24h], edi
		xor	eax, eax
		inc	eax

loc_6B18FCDF:				; CODE XREF: Ordinal753+43j
		pop	edi

loc_6B18FCE0:				; CODE XREF: Ordinal753+1Cj
		pop	esi
		pop	ebx
		leave
		retn	0Ch
Ordinal753	endp

; Exported entry 741.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal741
Ordinal741	proc near		; CODE XREF: sub_6B18FE28+3p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1B03B4
		call	Ordinal743
		lea	ecx, [esi+28h]
		call	Ordinal1616
		lea	ecx, [esi+4]
		pop	esi
		jmp	Ordinal1189
Ordinal741	endp

; Exported entry 745.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal745
Ordinal745	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+28h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		push	[ebp+arg_4]
		mov	ecx, esi
		push	0
		push	[ebp+arg_0]
		call	Ordinal753
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn	8
Ordinal745	endp

; Exported entry 746.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal746
Ordinal746	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+28h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		push	[ebp+arg_4]
		mov	ecx, esi
		push	[ebp+arg_0]
		push	0
		call	Ordinal753
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn	8
Ordinal746	endp

; Exported entry 747.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal747
Ordinal747	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+28h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		push	1
		push	[ebp+arg_4]
		mov	ecx, esi
		push	0
		push	[ebp+arg_0]
		call	Ordinal752
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn	8
Ordinal747	endp

; Exported entry 748.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal748
Ordinal748	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+28h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		push	1
		push	[ebp+arg_4]
		mov	ecx, esi
		push	[ebp+arg_0]
		push	0
		call	Ordinal752
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn	8
Ordinal748	endp

; Exported entry 749.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal749
Ordinal749	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+28h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		push	0
		push	[ebp+arg_4]
		mov	ecx, esi
		push	0
		push	[ebp+arg_0]
		call	Ordinal752
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn	8
Ordinal749	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B18FE28(void *, char)
sub_6B18FE28	proc near		; DATA XREF: .rdata:off_6B1B03B4o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal741
		test	[esp+4+arg_0], 1
		jz	short loc_6B18FE3E
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B18FE3E:				; CODE XREF: sub_6B18FE28+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B18FE28	endp

; Exported entry 754.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal754
Ordinal754	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	[esp+4+arg_C]
		mov	esi, ecx
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		call	Ordinal927
		xor	eax, eax
		push	10h		; Size
		push	eax		; Val
		mov	[esi+0B8h], eax
		mov	[esi+0BCh], eax
		lea	eax, [esi+0C0h]
		push	eax		; Dst
		mov	dword ptr [esi], offset	off_6B1B0550
		call	memset
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		retn	10h
Ordinal754	endp

; Exported entry 758.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal758
Ordinal758	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	edi, [esi+0B8h]
		mov	esi, [esi+0BCh]
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, edi
		pop	edi
		mov	edx, esi
		pop	esi
		leave
		retn
Ordinal758	endp

; Exported entry 763.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal763
Ordinal763	proc near		; DATA XREF: .rdata:off_6B1BF428o
		xor	eax, eax
		retn	0Ch
Ordinal763	endp

; Exported entry 764.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal764
Ordinal764	proc near		; DATA XREF: .rdata:off_6B1BF428o
		xor	eax, eax
		retn	8
Ordinal764	endp

; Exported entry 765.
; Exported entry 766.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal766
Ordinal766	proc near		; DATA XREF: .rdata:off_6B1BF428o
		xor	eax, eax	; ccL35_765
		retn	4
Ordinal766	endp

; Exported entry 767.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal767(int,	LPCVOID	lpBuffer, DWORD	nNumberOfBytesToWrite)
		public Ordinal767
Ordinal767	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
lpBuffer	= dword	ptr  8
nNumberOfBytesToWrite= dword ptr  0Ch

		push	[esp+nNumberOfBytesToWrite] ; nNumberOfBytesToWrite
		mov	eax, [esp+4+arg_0]
		push	[esp+4+lpBuffer] ; lpBuffer
		add	eax, 10h
		push	eax		; int
		call	Ordinal939
		retn	0Ch
Ordinal767	endp

; Exported entry 768.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal768(int,	LPVOID lpBuffer, DWORD nNumberOfBytesToRead)
		public Ordinal768
Ordinal768	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
lpBuffer	= dword	ptr  8
nNumberOfBytesToRead= dword ptr	 0Ch

		push	[esp+nNumberOfBytesToRead] ; nNumberOfBytesToRead
		mov	eax, [esp+4+arg_0]
		push	[esp+4+lpBuffer] ; lpBuffer
		add	eax, 10h
		push	eax		; int
		call	Ordinal940
		retn	0Ch
Ordinal768	endp

; Exported entry 769.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal769
Ordinal769	proc near		; DATA XREF: .rdata:off_6B1BF428o
		call	Ordinal944
		sub	eax, 10h
		retn
Ordinal769	endp

; Exported entry 771.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal771(LPCVOID lpBuffer)
		public Ordinal771
Ordinal771	proc near		; CODE XREF: Ordinal760+30p
					; Ordinal761+40p ...

lpBuffer	= dword	ptr  4

		push	10h		; nNumberOfBytesToWrite
		push	[esp+4+lpBuffer] ; lpBuffer
		push	0		; int
		call	Ordinal939
		test	eax, eax
		jnz	short loc_6B18FF29
		push	offset aCcircularstore ; "CCircularStore::WriteOffset()	: WriteHe"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short locret_6B18FF2C
; ---------------------------------------------------------------------------

loc_6B18FF29:				; CODE XREF: Ordinal771+Fj
		xor	eax, eax
		inc	eax

locret_6B18FF2C:			; CODE XREF: Ordinal771+1Ej
		retn	4
Ordinal771	endp

; Exported entry 772.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal772(void	*lpBuffer)
		public Ordinal772
Ordinal772	proc near		; CODE XREF: Ordinal770+1Fp
					; Ordinal756+44p
					; DATA XREF: ...

lpBuffer	= dword	ptr  4

		push	esi
		push	10h		; Size
		push	0		; Val
		push	[esp+0Ch+lpBuffer] ; Dst
		mov	esi, ecx
		call	memset
		add	esp, 0Ch
		push	10h		; nNumberOfBytesToRead
		push	[esp+8+lpBuffer] ; lpBuffer
		mov	ecx, esi
		push	0		; int
		call	Ordinal940
		test	eax, eax
		pop	esi
		jnz	short loc_6B18FF65
		push	offset aCcircularsto_0 ; "CCircularStore::ReadOffset() : ReadHead"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short locret_6B18FF68
; ---------------------------------------------------------------------------

loc_6B18FF65:				; CODE XREF: Ordinal772+25j
		xor	eax, eax
		inc	eax

locret_6B18FF68:			; CODE XREF: Ordinal772+34j
		retn	4
Ordinal772	endp

; Exported entry 760.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal760
Ordinal760	proc near		; CODE XREF: Ordinal755+9p
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	ecx, esi
		call	Ordinal950
		test	eax, eax
		jz	short loc_6B18FFAF
		lea	eax, [esi+0C0h]
		push	eax		; lpBuffer
		mov	ecx, esi
		call	Ordinal771
		test	eax, eax
		jnz	short loc_6B18FFAF
		push	offset aCcircularsto_1 ; "CCircularStore::Close() : WriteOffset()"...
		call	sub_6B18102E
		pop	ecx

loc_6B18FFAF:				; CODE XREF: Ordinal760+25j
					; Ordinal760+37j
		mov	ecx, esi
		call	Ordinal931
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal760	endp

; Exported entry 761.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal761
Ordinal761	proc near		; CODE XREF: Ordinal759+8Fp
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	ecx, [esi+20h]
		lea	eax, [esi+0C0h]
		and	dword ptr [eax+4], 0
		add	ecx, 20h
		mov	[eax], ecx
		mov	[esi+0C8h], ecx
		mov	ecx, [eax+4]
		mov	[esi+0CCh], ecx
		push	eax		; lpBuffer
		mov	ecx, esi
		call	Ordinal771
		test	eax, eax
		jnz	short loc_6B19001D
		push	offset aCcircularsto_2 ; "CCircularStore::Clear() : WriteOffset()"...
		call	sub_6B18102E
		pop	ecx
		xor	esi, esi
		jmp	short loc_6B190026
; ---------------------------------------------------------------------------

loc_6B19001D:				; CODE XREF: Ordinal761+47j
		mov	ecx, esi
		call	Ordinal932
		mov	esi, eax

loc_6B190026:				; CODE XREF: Ordinal761+56j
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal761	endp

; Exported entry 762.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal762(LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, int)
		public Ordinal762
Ordinal762	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_98		= byte ptr -98h
var_80		= dword	ptr -80h
Buffer		= byte ptr -70h
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_48		= byte ptr -48h
var_3C		= dword	ptr -3Ch
lDistanceToMove	= dword	ptr -38h
var_34		= dword	ptr -34h
Dst		= byte ptr -30h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
lpBuffer	= dword	ptr  8
nNumberOfBytesToWrite= dword ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 98h
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_48]
		call	Ordinal1571
		mov	eax, [ebp+arg_8]
		mov	[eax], ebx
		mov	[eax+4], ebx
		mov	eax, [ebp+nNumberOfBytesToWrite]
		cmp	eax, ebx
		jz	loc_6B19038E
		cmp	[ebp+lpBuffer],	ebx
		jz	loc_6B19038E
		mov	edi, [esi+0B8h]
		mov	ecx, [esi+0BCh]
		mov	edx, edi
		or	edx, ecx
		jz	short loc_6B1900A0
		mov	edx, [esi+20h]
		lea	eax, [edx+eax+20h]
		xor	edx, edx
		cmp	edx, ecx
		jb	short loc_6B1900A0
		ja	short loc_6B190096
		cmp	eax, edi
		jbe	short loc_6B1900A0

loc_6B190096:				; CODE XREF: Ordinal762+5Dj
		push	offset aCcircularsto_3 ; "CCircularStore::Add()	: dwSize + sizeof"...
		jmp	loc_6B190393
; ---------------------------------------------------------------------------

loc_6B1900A0:				; CODE XREF: Ordinal762+4Ej
					; Ordinal762+5Bj ...
		lea	eax, [ebp+var_8]
		lea	edi, [esi+8]
		push	eax
		mov	ecx, edi
		mov	[ebp+var_8], ebx
		mov	[ebp+var_4], ebx
		call	Ordinal1128
		test	eax, eax
		jnz	short loc_6B1900CC
		mov	ecx, edi
		call	Ordinal1052
		mov	[esi+14h], eax
		push	offset aCcircularsto_4 ; "CCircularStore::Add()	: m_File.GetLengt"...
		jmp	loc_6B190393
; ---------------------------------------------------------------------------

loc_6B1900CC:				; CODE XREF: Ordinal762+83j
		mov	edx, [esi+0BCh]
		lea	eax, [esi+0C0h]
		mov	edi, [eax]
		mov	ebx, [eax+4]
		mov	eax, [esi+0C8h]
		mov	[ebp+lDistanceToMove], eax
		mov	eax, [esi+0CCh]
		mov	[ebp+var_34], eax
		mov	eax, [esi+0B8h]
		or	eax, edx
		jz	short loc_6B190136
		mov	ecx, [ebp+nNumberOfBytesToWrite]
		xor	eax, eax
		add	ecx, edi
		adc	eax, ebx
		add	ecx, 28h
		adc	eax, 0
		cmp	eax, edx
		jb	short loc_6B190136
		ja	short loc_6B190116
		cmp	ecx, [esi+0B8h]
		jbe	short loc_6B190136

loc_6B190116:				; CODE XREF: Ordinal762+D9j
		push	ebx		; int
		push	edi		; lDistanceToMove
		lea	ecx, [esi+8]
		call	Ordinal1130
		test	eax, eax
		jz	loc_6B1902BB
		mov	[ebp+var_8], edi
		mov	edi, [esi+20h]
		mov	[ebp+var_4], ebx
		add	edi, 20h
		xor	ebx, ebx

loc_6B190136:				; CODE XREF: Ordinal762+C4j
					; Ordinal762+D7j ...
		push	28h		; Size
		lea	eax, [ebp+Dst]
		push	0		; Val
		push	eax		; Dst
		call	memset
		mov	ecx, [ebp+var_8]
		add	esp, 0Ch
		cmp	edi, ecx
		jnz	short loc_6B19015F
		mov	eax, [ebp+var_4]
		cmp	ebx, eax
		jnz	short loc_6B19015F
		mov	[ebp+var_28], ecx
		mov	[ebp+var_24], eax
		jmp	loc_6B190272
; ---------------------------------------------------------------------------

loc_6B19015F:				; CODE XREF: Ordinal762+118j
					; Ordinal762+11Fj
		lea	eax, [ebp+Dst]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_8]
		push	eax		; int
		push	ebx		; int
		push	edi		; lDistanceToMove
		mov	ecx, esi
		call	Ordinal957
		test	eax, eax
		jz	loc_6B1902C5
		and	[ebp+var_3C], 0
		jmp	short loc_6B1901D5
; ---------------------------------------------------------------------------

loc_6B19017E:				; CODE XREF: Ordinal762+21Dj
		cmp	[ebp+var_3C], 0
		jnz	short loc_6B190203
		cmp	[ebp+var_34], ebx
		ja	short loc_6B190203
		jb	short loc_6B190190
		cmp	[ebp+lDistanceToMove], edi
		jnb	short loc_6B190203

loc_6B190190:				; CODE XREF: Ordinal762+156j
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_8]
		push	eax		; int
		push	[ebp+var_34]	; int
		mov	ecx, esi
		push	[ebp+lDistanceToMove] ;	lDistanceToMove
		call	Ordinal957
		test	eax, eax
		jz	loc_6B1902C5
		mov	eax, [ebp+var_58]
		mov	edx, [ebp+var_54]
		cmp	eax, edx
		mov	[ebp+var_3C], 1
		jbe	short loc_6B190200
		mov	ecx, [ebp+var_18]
		sub	eax, edx
		add	ecx, eax
		cmp	ecx, 0FFFFFFFFh
		jbe	short loc_6B1901DA
		push	offset aCdatastoreAddU ; "CDataStore::Add() : uBlockSize > DWORD("...
		call	sub_6B18101A
		pop	ecx

loc_6B1901D5:				; CODE XREF: Ordinal762+149j
					; Ordinal762+1CBj
		mov	eax, [ebp+var_18]
		jmp	short loc_6B19024D
; ---------------------------------------------------------------------------

loc_6B1901DA:				; CODE XREF: Ordinal762+195j
		sub	edi, eax
		lea	eax, [ebp+Buffer]
		sbb	ebx, 0
		mov	[ebp+var_18], ecx
		push	eax
		mov	ecx, esi
		mov	[ebp+var_28], edi
		mov	[ebp+var_24], ebx
		mov	[ebp+var_58], edx
		call	Ordinal958
		test	eax, eax
		jz	loc_6B190387
		jmp	short loc_6B1901D5
; ---------------------------------------------------------------------------

loc_6B190200:				; CODE XREF: Ordinal762+189j
		mov	eax, [ebp+var_18]

loc_6B190203:				; CODE XREF: Ordinal762+14Fj
					; Ordinal762+154j ...
		xor	ecx, ecx
		add	eax, edi
		adc	ecx, ebx
		add	eax, 28h
		adc	ecx, 0
		cmp	ecx, [ebp+var_4]
		ja	short loc_6B190258
		jb	short loc_6B19021B
		cmp	eax, [ebp+var_8]
		jnb	short loc_6B190258

loc_6B19021B:				; CODE XREF: Ordinal762+1E1j
		lea	edx, [ebp+var_98]
		push	edx		; lpBuffer
		lea	edx, [ebp+var_8]
		push	edx		; int
		push	ecx		; int
		push	eax		; lDistanceToMove
		mov	ecx, esi
		call	Ordinal957
		test	eax, eax
		jz	loc_6B1902C5
		mov	eax, [ebp+var_18]
		mov	ecx, [ebp+var_80]
		lea	eax, [ecx+eax+28h]
		cmp	eax, 0FFFFFFFFh
		ja	loc_6B1902CF
		mov	[ebp+var_18], eax

loc_6B19024D:				; CODE XREF: Ordinal762+1A5j
		cmp	eax, [ebp+nNumberOfBytesToWrite]
		jb	loc_6B19017E
		jmp	short loc_6B190278
; ---------------------------------------------------------------------------

loc_6B190258:				; CODE XREF: Ordinal762+1DFj
					; Ordinal762+1E6j ...
		push	ebx		; int
		lea	ecx, [esi+8]
		push	edi		; lDistanceToMove
		call	Ordinal1130
		test	eax, eax
		jz	short loc_6B1902BB
		mov	[ebp+var_8], edi
		mov	[ebp+var_4], ebx
		mov	[ebp+var_28], edi
		mov	[ebp+var_24], ebx

loc_6B190272:				; CODE XREF: Ordinal762+127j
		mov	eax, [ebp+nNumberOfBytesToWrite]
		mov	[ebp+var_18], eax

loc_6B190278:				; CODE XREF: Ordinal762+223j
		mov	ecx, [ebp+nNumberOfBytesToWrite]
		cmp	eax, ecx
		mov	[ebp+var_14], ecx
		jbe	short loc_6B1902E5
		xor	ecx, ecx
		add	eax, edi
		adc	ecx, ebx
		add	eax, 28h
		adc	ecx, 0
		cmp	eax, [ebp+var_8]
		jnz	short loc_6B1902E5
		cmp	ecx, [ebp+var_4]
		jnz	short loc_6B1902E5
		mov	eax, [ebp+nNumberOfBytesToWrite]
		xor	ecx, ecx
		add	eax, edi
		adc	ecx, ebx
		add	eax, 28h
		adc	ecx, 0
		push	ecx		; int
		mov	[ebp+var_4], ecx
		push	eax		; lDistanceToMove
		lea	ecx, [esi+8]
		mov	[ebp+var_8], eax
		call	Ordinal1130
		test	eax, eax
		jnz	short loc_6B1902DF

loc_6B1902BB:				; CODE XREF: Ordinal762+EFj
					; Ordinal762+231j
		push	offset aCcircularsto_5 ; "CCircularStore::Add()	: m_File.SetLengt"...
		jmp	loc_6B190393
; ---------------------------------------------------------------------------

loc_6B1902C5:				; CODE XREF: Ordinal762+13Fj
					; Ordinal762+174j ...
		push	offset aCcircularsto_6 ; "CCircularStore::Add()	: ReadIndex() == "...
		jmp	loc_6B190393
; ---------------------------------------------------------------------------

loc_6B1902CF:				; CODE XREF: Ordinal762+211j
		push	offset aCdatastoreAddU ; "CDataStore::Add() : uBlockSize > DWORD("...
		call	sub_6B18101A
		pop	ecx
		jmp	loc_6B190258
; ---------------------------------------------------------------------------

loc_6B1902DF:				; CODE XREF: Ordinal762+286j
		mov	eax, [ebp+var_14]
		mov	[ebp+var_18], eax

loc_6B1902E5:				; CODE XREF: Ordinal762+24Dj
					; Ordinal762+25Ej ...
		cmp	dword ptr [esi+1Ch], 0
		jz	short loc_6B1902FD
		push	[ebp+nNumberOfBytesToWrite]
		push	[ebp+lpBuffer]
		call	Ordinal924
		pop	ecx
		pop	ecx
		mov	[ebp+var_10], eax
		jmp	short loc_6B190301
; ---------------------------------------------------------------------------

loc_6B1902FD:				; CODE XREF: Ordinal762+2B6j
		and	[ebp+var_10], 0

loc_6B190301:				; CODE XREF: Ordinal762+2C8j
		lea	eax, [ebp+Dst]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_28], edi
		mov	[ebp+var_24], ebx
		call	Ordinal958
		test	eax, eax
		jz	short loc_6B19037C
		push	[ebp+nNumberOfBytesToWrite] ; nNumberOfBytesToWrite
		mov	eax, [ebp+var_28]
		push	[ebp+lpBuffer]	; lpBuffer
		mov	ecx, [ebp+var_24]
		add	eax, 28h
		adc	ecx, 0
		push	ecx		; int
		push	eax		; lDistanceToMove
		lea	ecx, [esi+8]
		call	Ordinal1120
		test	eax, eax
		jz	short loc_6B19037C
		mov	ecx, [ebp+var_18]
		xor	edx, edx
		add	ecx, edi
		adc	edx, ebx
		add	ecx, 28h
		lea	eax, [esi+0C0h]
		adc	edx, 0
		mov	[eax], ecx
		push	eax		; lpBuffer
		mov	ecx, esi
		mov	[eax+4], edx
		mov	[esi+0C8h], edi
		mov	[esi+0CCh], ebx
		call	Ordinal771
		test	eax, eax
		jnz	short loc_6B19036F
		push	offset aCcircularsto_7 ; "CCircularStore::Add()	: WriteOffset()	="...
		jmp	short loc_6B190393
; ---------------------------------------------------------------------------

loc_6B19036F:				; CODE XREF: Ordinal762+333j
		mov	eax, [ebp+arg_8]
		xor	esi, esi
		mov	[eax], edi
		mov	[eax+4], ebx
		inc	esi
		jmp	short loc_6B19039B
; ---------------------------------------------------------------------------

loc_6B19037C:				; CODE XREF: Ordinal762+2E1j
					; Ordinal762+301j
		lea	ecx, [esi+8]
		call	Ordinal1052
		mov	[esi+14h], eax

loc_6B190387:				; CODE XREF: Ordinal762+1C5j
		push	offset aCcircularsto_8 ; "CCircularStore::Add()	: WriteIndex() =="...
		jmp	short loc_6B190393
; ---------------------------------------------------------------------------

loc_6B19038E:				; CODE XREF: Ordinal762+2Fj
					; Ordinal762+38j
		push	offset aCcircularsto_9 ; "CCircularStore::Add()	: dwSize == 0\n"

loc_6B190393:				; CODE XREF: Ordinal762+68j
					; Ordinal762+94j ...
		call	sub_6B18102E
		pop	ecx
		xor	esi, esi

loc_6B19039B:				; CODE XREF: Ordinal762+347j
		lea	ecx, [ebp+var_48]
		call	Ordinal1573
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		leave
		retn	0Ch
Ordinal762	endp

; Exported entry 770.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal770
Ordinal770	proc near		; DATA XREF: .rdata:6B1B0554o
					; .rdata:off_6B1BF428o

Buffer		= byte ptr -40h
lDistanceToMove	= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 40h
		push	edi
		mov	edi, ecx
		call	Ordinal955
		test	eax, eax
		jnz	short loc_6B1903C5
		push	offset aCcircularst_10 ; "CCircularStore::ValidateFile() : CDataS"...
		jmp	short loc_6B1903D9
; ---------------------------------------------------------------------------

loc_6B1903C5:				; CODE XREF: Ordinal770+10j
		lea	eax, [ebp+lDistanceToMove]
		push	eax		; lpBuffer
		mov	ecx, edi
		call	Ordinal772
		test	eax, eax
		jnz	short loc_6B1903E6
		push	offset aCcircularst_11 ; "CCircularStore::ValidateFile() : ReadOf"...

loc_6B1903D9:				; CODE XREF: Ordinal770+17j
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6B1904C9
; ---------------------------------------------------------------------------

loc_6B1903E6:				; CODE XREF: Ordinal770+26j
		and	[ebp+var_8], 0
		and	[ebp+var_4], 0
		push	esi		; Args
		lea	eax, [ebp+var_8]
		lea	esi, [edi+8]
		push	eax
		mov	ecx, esi
		call	Ordinal1128
		test	eax, eax
		jnz	short loc_6B19041D
		mov	ecx, esi
		call	Ordinal1052
		mov	[edi+14h], eax
		push	offset aCcircularst_12 ; "CCircularStore::ValidateFile() : m_File"...

loc_6B190410:				; CODE XREF: Ordinal770+10Aj
					; Ordinal770+114j
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6B1904C8
; ---------------------------------------------------------------------------

loc_6B19041D:				; CODE XREF: Ordinal770+53j
		mov	esi, [ebp+lDistanceToMove]
		mov	edx, [ebp+var_14]
		mov	eax, esi
		or	eax, edx
		jz	loc_6B1904C5
		mov	ecx, [ebp+var_4]
		cmp	edx, ecx
		ja	loc_6B1904BB
		mov	eax, [ebp+var_8]
		jb	short loc_6B190441
		cmp	esi, eax
		ja	short loc_6B1904BB

loc_6B190441:				; CODE XREF: Ordinal770+8Fj
		cmp	[ebp+var_C], ecx
		ja	short loc_6B1904BB
		jb	short loc_6B19044D
		cmp	[ebp+var_10], eax
		ja	short loc_6B1904BB

loc_6B19044D:				; CODE XREF: Ordinal770+9Aj
		mov	eax, [edi+20h]
		xor	ecx, ecx
		add	eax, 20h
		cmp	edx, ecx
		jb	short loc_6B1904BB
		ja	short loc_6B19045F
		cmp	esi, eax
		jb	short loc_6B1904BB

loc_6B19045F:				; CODE XREF: Ordinal770+ADj
		cmp	[ebp+var_C], ecx
		jb	short loc_6B1904BB
		ja	short loc_6B19046B
		cmp	[ebp+var_10], eax
		jb	short loc_6B1904BB

loc_6B19046B:				; CODE XREF: Ordinal770+B8j
		cmp	esi, [ebp+var_8]
		jnz	short loc_6B190475
		cmp	edx, [ebp+var_4]
		jz	short loc_6B19048A

loc_6B190475:				; CODE XREF: Ordinal770+C2j
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_8]
		push	eax		; int
		push	edx		; int
		push	esi		; lDistanceToMove
		mov	ecx, edi
		call	Ordinal957
		test	eax, eax
		jz	short loc_6B1904B1

loc_6B19048A:				; CODE XREF: Ordinal770+C7j
		mov	eax, [ebp+var_10]
		cmp	eax, [ebp+var_8]
		jnz	short loc_6B19049A
		mov	ecx, [ebp+var_C]
		cmp	ecx, [ebp+var_4]
		jz	short loc_6B1904C5

loc_6B19049A:				; CODE XREF: Ordinal770+E4j
		lea	ecx, [ebp+Buffer]
		push	ecx		; lpBuffer
		lea	ecx, [ebp+var_8]
		push	ecx		; int
		push	[ebp+var_C]	; int
		mov	ecx, edi
		push	eax		; lDistanceToMove
		call	Ordinal957
		test	eax, eax
		jnz	short loc_6B1904C5

loc_6B1904B1:				; CODE XREF: Ordinal770+DCj
		push	offset aCcircularst_13 ; "CCircularStore::ValidateFile() : ReadIn"...
		jmp	loc_6B190410
; ---------------------------------------------------------------------------

loc_6B1904BB:				; CODE XREF: Ordinal770+86j
					; Ordinal770+93j ...
		push	offset aCcircularst_14 ; "CCircularStore::ValidateFile() : offset"...
		jmp	loc_6B190410
; ---------------------------------------------------------------------------

loc_6B1904C5:				; CODE XREF: Ordinal770+7Bj
					; Ordinal770+ECj ...
		xor	eax, eax
		inc	eax

loc_6B1904C8:				; CODE XREF: Ordinal770+6Cj
		pop	esi

loc_6B1904C9:				; CODE XREF: Ordinal770+35j
		pop	edi
		leave
		retn
Ordinal770	endp

; Exported entry 755.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal755
Ordinal755	proc near		; CODE XREF: sub_6B1905A4+3p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1B0550
		call	Ordinal760
		mov	ecx, esi
		pop	esi
		jmp	Ordinal928
Ordinal755	endp

; Exported entry 759.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal759
Ordinal759	proc near		; CODE XREF: Ordinal756+9Fp
					; DATA XREF: .rdata:off_6B1BF428o

var_14		= byte ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_14]
		call	Ordinal1571
		mov	eax, [ebp+arg_0]
		mov	edi, [ebp+arg_4]
		or	eax, edi
		jnz	short loc_6B190519
		mov	[esi+0B8h], ebx
		mov	[esi+0BCh], ebx
		jmp	short loc_6B190590
; ---------------------------------------------------------------------------

loc_6B190519:				; CODE XREF: Ordinal759+27j
		mov	eax, [esi+20h]
		xor	ecx, ecx
		add	eax, 48h
		cmp	edi, ecx
		ja	short loc_6B19053B
		jb	short loc_6B19052C
		cmp	[ebp+arg_0], eax
		jnb	short loc_6B19053B

loc_6B19052C:				; CODE XREF: Ordinal759+43j
		push	offset aCcircularst_15 ; "CCircularStore::SetMaxSize() : uMaxSize"...

loc_6B190531:				; CODE XREF: Ordinal759+7Aj
					; Ordinal759+9Dj
		call	sub_6B18102E
		pop	ecx
		xor	esi, esi
		jmp	short loc_6B190593
; ---------------------------------------------------------------------------

loc_6B19053B:				; CODE XREF: Ordinal759+41j
					; Ordinal759+48j
		lea	eax, [ebp+var_8]
		lea	ebx, [esi+8]
		push	eax
		mov	ecx, ebx
		call	Ordinal1128
		test	eax, eax
		jnz	short loc_6B19055E
		mov	ecx, ebx
		call	Ordinal1052
		mov	[esi+14h], eax
		push	offset aCcircularst_16 ; "CCircularStore::SetMaxSize() : m_File.G"...
		jmp	short loc_6B190531
; ---------------------------------------------------------------------------

loc_6B19055E:				; CODE XREF: Ordinal759+69j
		mov	eax, [ebp+var_4]
		cmp	eax, edi
		jb	short loc_6B190581
		ja	short loc_6B19056F
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_0]
		jbe	short loc_6B190581

loc_6B19056F:				; CODE XREF: Ordinal759+83j
		mov	ecx, esi
		call	Ordinal761
		test	eax, eax
		jnz	short loc_6B190581
		push	offset aCcircularst_17 ; "CCircularStore::SetMaxSize() : Clear() "...
		jmp	short loc_6B190531
; ---------------------------------------------------------------------------

loc_6B190581:				; CODE XREF: Ordinal759+81j
					; Ordinal759+8Bj ...
		mov	eax, [ebp+arg_0]
		mov	[esi+0B8h], eax
		mov	[esi+0BCh], edi

loc_6B190590:				; CODE XREF: Ordinal759+35j
		xor	esi, esi
		inc	esi

loc_6B190593:				; CODE XREF: Ordinal759+57j
		lea	ecx, [ebp+var_14]
		call	Ordinal1573
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal759	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1905A4(void *, char)
sub_6B1905A4	proc near		; DATA XREF: .rdata:off_6B1B0550o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal755
		test	[esp+4+arg_0], 1
		jz	short loc_6B1905BA
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1905BA:				; CODE XREF: sub_6B1905A4+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1905A4	endp

; Exported entry 756.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal756
Ordinal756	proc near		; CODE XREF: Ordinal757+2Ap
					; DATA XREF: .rdata:off_6B1BF428o

Args		= dword	ptr  8
nNumberOfBytesToWrite= dword ptr  0Ch
dwShareMode	= dword	ptr  10h
lpSecurityAttributes= dword ptr	 14h
dwCreationDisposition= dword ptr  18h
dwFlagsAndAttributes= dword ptr	 1Ch
hTemplateFile	= dword	ptr  20h
arg_1C		= dword	ptr  24h
arg_20		= dword	ptr  28h
arg_24		= dword	ptr  2Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_1C]
		push	edi
		add	eax, 10h
		push	eax		; int
		push	[ebp+hTemplateFile] ; hTemplateFile
		mov	edi, ecx
		push	[ebp+dwFlagsAndAttributes] ; dwFlagsAndAttributes
		push	[ebp+dwCreationDisposition] ; dwCreationDisposition
		push	[ebp+lpSecurityAttributes] ; lpSecurityAttributes
		push	[ebp+dwShareMode] ; dwShareMode
		push	[ebp+nNumberOfBytesToWrite] ; nNumberOfBytesToWrite
		push	[ebp+Args]	; Args
		call	Ordinal930
		test	eax, eax
		jnz	short loc_6B1905FA
		push	offset aCcircularst_18 ; "CCircularStore::Open() : CDataStore::Op"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B190673
; ---------------------------------------------------------------------------

loc_6B1905FA:				; CODE XREF: Ordinal756+29j
		push	esi		; Args
		lea	esi, [edi+0C0h]
		push	esi		; lpBuffer
		mov	ecx, edi
		call	Ordinal772
		test	eax, eax
		jnz	short loc_6B19061C
		push	offset aCcircularst_19 ; "CCircularStore::Open() : ReadOffset()	="...

loc_6B190612:				; CODE XREF: Ordinal756+ADj
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B190672
; ---------------------------------------------------------------------------

loc_6B19061C:				; CODE XREF: Ordinal756+4Bj
		mov	eax, [esi]
		or	eax, [esi+4]
		jz	short loc_6B190631
		mov	eax, [edi+0C8h]
		or	eax, [edi+0CCh]
		jnz	short loc_6B19064C

loc_6B190631:				; CODE XREF: Ordinal756+61j
		mov	eax, [edi+20h]
		add	eax, 20h
		and	dword ptr [esi+4], 0
		mov	[esi], eax
		mov	[edi+0C8h], eax
		mov	eax, [esi+4]
		mov	[edi+0CCh], eax

loc_6B19064C:				; CODE XREF: Ordinal756+6Fj
		mov	ecx, edi
		call	Ordinal950
		test	eax, eax
		jz	short loc_6B19066F
		push	[ebp+arg_24]
		mov	ecx, edi
		push	[ebp+arg_20]
		call	Ordinal759
		test	eax, eax
		jnz	short loc_6B19066F
		push	offset aCcircularst_20 ; "CCircularStore::Open() : SetMaxSize()	="...
		jmp	short loc_6B190612
; ---------------------------------------------------------------------------

loc_6B19066F:				; CODE XREF: Ordinal756+95j
					; Ordinal756+A6j
		xor	eax, eax
		inc	eax

loc_6B190672:				; CODE XREF: Ordinal756+5Aj
		pop	esi

loc_6B190673:				; CODE XREF: Ordinal756+38j
		pop	edi
		pop	ebp
		retn	28h
Ordinal756	endp

; Exported entry 757.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal757
Ordinal757	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_10]
		mov	eax, [ebp+arg_4]
		push	[ebp+arg_C]
		neg	eax
		push	[ebp+arg_8]
		sbb	eax, eax
		push	0
		push	80h
		add	eax, 3
		push	eax
		push	0
		push	1
		push	0C0000000h
		push	[ebp+arg_0]
		call	Ordinal756
		pop	ebp
		retn	14h
Ordinal757	endp

; Exported entry 773.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal773
Ordinal773	proc near		; CODE XREF: Ordinal1752+Dp
					; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, ecx
		and	dword ptr [eax+4], 0
		mov	dword ptr [eax], offset	off_6B1B0A84
		mov	dword ptr [eax+8], 3
		retn
Ordinal773	endp

; Exported entry 778.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal778
Ordinal778	proc near		; CODE XREF: Ordinal776+Ap
					; Ordinal1393+F5p
					; DATA XREF: ...

var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		cmp	[ebp+arg_0], 0
		jnz	short loc_6B1906E5
		lea	ecx, [ebp+var_8]
		call	Ordinal969
		lea	ecx, [ebp+var_8]
		call	Ordinal1649
		lea	ecx, [ebp+var_8]
		mov	[ebp+arg_0], eax
		call	Ordinal970

loc_6B1906E5:				; CODE XREF: Ordinal778+9j
		mov	eax, [ebp+arg_0]
		dec	eax
		push	esi
		jz	short loc_6B19071E
		dec	eax
		jz	short loc_6B1906FD
		dec	eax
		jz	short loc_6B1906F9
		mov	eax, 80004005h
		jmp	short loc_6B19071B
; ---------------------------------------------------------------------------

loc_6B1906F9:				; CODE XREF: Ordinal778+31j
		xor	eax, eax
		jmp	short loc_6B19071B
; ---------------------------------------------------------------------------

loc_6B1906FD:				; CODE XREF: Ordinal778+2Ej
		push	2
		pop	esi
		mov	eax, offset aCoinit_apartme ; "COINIT_APARTMENTTHREADED"

loc_6B190705:				; CODE XREF: Ordinal778+66j
		push	eax		; Args
		push	offset aCcoinitializeC ; "CCoInitialize::CoInitialize()	: %s\n"
		call	sub_6B181006
		pop	ecx
		pop	ecx
		push	esi		; dwCoInit
		push	0		; pvReserved
		call	ds:CoInitializeEx

loc_6B19071B:				; CODE XREF: Ordinal778+38j
					; Ordinal778+3Cj
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------

loc_6B19071E:				; CODE XREF: Ordinal778+2Bj
		xor	esi, esi
		mov	eax, offset aCoinit_multith ; "COINIT_MULTITHREADED"
		jmp	short loc_6B190705
Ordinal778	endp

; Exported entry 779.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal779
Ordinal779	proc near		; CODE XREF: Ordinal777+14p
					; Ordinal1393+64Ap
					; DATA XREF: ...

ms_exc		= CPPEH_RECORD ptr -18h

		push	8
		push	offset stru_6B1B0B38
		call	__SEH_prolog
		and	[ebp+ms_exc.disabled], 0
		call	ds:CoUninitialize
		jmp	short loc_6B190761
; ---------------------------------------------------------------------------

loc_6B19073F:				; DATA XREF: .rdata:stru_6B1B0B38o
		mov	eax, [ebp+ms_exc.exc_ptr] ; Exception filter 0 for function 6B190727
		mov	eax, [eax]
		mov	eax, [eax]
		xor	ecx, ecx
		cmp	eax, 0C0000005h
		setz	cl
		mov	eax, ecx
		retn
; ---------------------------------------------------------------------------

loc_6B190753:				; DATA XREF: .rdata:stru_6B1B0B38o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 6B190727
		push	offset aCcoinitializ_1 ; "CCoInitialize::CoUninitialize() : GetEx"...
		call	sub_6B18102E
		pop	ecx

loc_6B190761:				; CODE XREF: Ordinal779+16j
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		call	__SEH_epilog
		retn
Ordinal779	endp

; Exported entry 776.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal776
Ordinal776	proc near		; CODE XREF: Ordinal774+16p
					; Ordinal1752+1Ep
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		push	edi
		mov	esi, ecx
		call	Ordinal778
		mov	ebx, eax
		test	ebx, ebx
		pop	ecx
		jl	short loc_6B19078F
		mov	[esi+8], edi
		call	ds:GetCurrentThreadId
		mov	[esi+4], eax
		jmp	short loc_6B19079C
; ---------------------------------------------------------------------------

loc_6B19078F:				; CODE XREF: Ordinal776+14j
		push	ebx		; Args
		push	offset aCcoinitializeI ; "CCoInitialize::Initialize() :	CoInitial"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx

loc_6B19079C:				; CODE XREF: Ordinal776+22j
		pop	edi
		pop	esi
		mov	eax, ebx
		pop	ebx
		retn	4
Ordinal776	endp

; Exported entry 777.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal777
Ordinal777	proc near		; CODE XREF: Ordinal775+6j
					; sub_6B190819+9p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+8], 3
		jz	short loc_6B1907D1
		call	ds:GetCurrentThreadId
		cmp	[esi+4], eax
		jnz	short loc_6B1907C6
		call	Ordinal779
		mov	dword ptr [esi+8], 3
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6B1907C6:				; CODE XREF: Ordinal777+12j
		push	offset aCcoinitializeU ; "CCoInitialize::Uninitialize()	: m_dwThr"...
		call	sub_6B18102E
		pop	ecx

loc_6B1907D1:				; CODE XREF: Ordinal777+7j
		pop	esi
		retn
Ordinal777	endp

; Exported entry 774.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal774
Ordinal774	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+4], 0
		push	edi
		push	eax
		mov	dword ptr [esi], offset	off_6B1B0A84
		mov	[esi+8], eax
		call	Ordinal776
		mov	edi, eax
		test	edi, edi
		jge	short loc_6B190807
		push	edi		; Args
		push	offset aCcoinitializ_0 ; "CCoInitialize::CCoInitialize() : Initia"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		push	edi
		call	sub_6B1A8F50
; ---------------------------------------------------------------------------

loc_6B190807:				; CODE XREF: Ordinal774+1Fj
		pop	edi
		mov	eax, esi
		pop	esi
		retn	4
Ordinal774	endp

; Exported entry 775.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal775
Ordinal775	proc near		; CODE XREF: Ordinal1752+93p
					; DATA XREF: .rdata:off_6B1BF428o
		mov	dword ptr [ecx], offset	off_6B1B0A84
		jmp	Ordinal777
Ordinal775	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B190819(void *, char)
sub_6B190819	proc near		; DATA XREF: .rdata:off_6B1B0A84o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1B0A84
		call	Ordinal777
		test	[esp+4+arg_0], 1
		jz	short loc_6B190835
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B190835:				; CODE XREF: sub_6B190819+13j
		mov	eax, esi
		pop	esi
		retn	4
sub_6B190819	endp

; Exported entry 784.
; Exported entry 1617.
; Exported entry 1706.
; Exported entry 1882.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1706
Ordinal1706	proc near		; DATA XREF: .rdata:off_6B1BF428o
		lea	eax, [ecx+4]	; ccL35_784
					; ccL35_1617
					; ccL35_1706
		retn
Ordinal1706	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19083F	proc near		; CODE XREF: sub_6B190FE8+29p
					; sub_6B1914D6+10p
		mov	edx, [ecx+4]
		test	edx, edx
		jnz	short loc_6B190849
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6B190849:				; CODE XREF: sub_6B19083F+5j
		mov	eax, [ecx+0Ch]
		sub	eax, edx
		push	0Ch
		cdq
		pop	ecx
		idiv	ecx
		retn
sub_6B19083F	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B190855	proc near		; CODE XREF: sub_6B190FE8+3Dp
					; sub_6B190FE8:loc_6B19103Cp ...
		mov	edx, [ecx+4]
		test	edx, edx
		jnz	short loc_6B19085F
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6B19085F:				; CODE XREF: sub_6B190855+5j
		mov	eax, [ecx+8]
		sub	eax, edx
		push	0Ch
		cdq
		pop	ecx
		idiv	ecx
		retn
sub_6B190855	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_6B19086B	proc near		; CODE XREF: sub_6B190FE8+4Fp
					; sub_6B191214+4Fp

var_50		= dword	ptr -50h
var_28		= byte ptr -28h
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_63 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		push	offset aVectorTTooLong ; "vector<T> too	long"
		lea	ecx, [ebp+var_28]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_28]
		push	eax
		lea	ecx, [ebp+var_50]
		call	sub_6B181357
		push	offset dword_6B1BA9E8
		lea	eax, [ebp+var_50]
		push	eax
		mov	[ebp+var_50], offset off_6B1AA914
		call	_CxxThrowException
sub_6B19086B	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry 789.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal789(unsigned __int8 *)
		public Ordinal789
Ordinal789	proc near		; CODE XREF: Ordinal790+17p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		mov	esi, [edi+8]
		xor	bl, bl
		jmp	short loc_6B1908D3
; ---------------------------------------------------------------------------

loc_6B1908B8:				; CODE XREF: Ordinal789+2Aj
		mov	eax, [esi+4]
		push	[esp+0Ch+arg_0]	; unsigned __int8 *
		push	eax		; unsigned __int8 *
		call	ds:_mbsicmp
		test	eax, eax
		pop	ecx
		pop	ecx
		jnz	short loc_6B1908D0
		cmp	[esi], bl
		jnz	short loc_6B1908DA

loc_6B1908D0:				; CODE XREF: Ordinal789+1Ej
		add	esi, 0Ch

loc_6B1908D3:				; CODE XREF: Ordinal789+Aj
		cmp	esi, [edi+0Ch]
		jnz	short loc_6B1908B8
		jmp	short loc_6B1908DC
; ---------------------------------------------------------------------------

loc_6B1908DA:				; CODE XREF: Ordinal789+22j
		mov	bl, 1

loc_6B1908DC:				; CODE XREF: Ordinal789+2Cj
		pop	edi
		pop	esi
		mov	al, bl
		pop	ebx
		retn	4
Ordinal789	endp

; Exported entry 790.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal790
Ordinal790	proc near		; CODE XREF: Ordinal1393+2E6p
					; Ordinal1393+30Fp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		xor	esi, esi
		xor	al, al
		cmp	[esp+4+arg_4], esi
		push	edi
		mov	edi, ecx
		jbe	short loc_6B19090B

loc_6B1908F2:				; CODE XREF: Ordinal790+25j
		mov	eax, [esp+8+arg_0]
		push	dword ptr [eax+esi*4] ;	unsigned __int8	*
		mov	ecx, edi
		call	Ordinal789
		test	al, al
		jnz	short loc_6B19090B
		inc	esi
		cmp	esi, [esp+8+arg_4]
		jb	short loc_6B1908F2

loc_6B19090B:				; CODE XREF: Ordinal790+Cj
					; Ordinal790+1Ej
		pop	edi
		pop	esi
		retn	8
Ordinal790	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B190910	proc near		; CODE XREF: Ordinal791+92p
					; Ordinal794+105p

arg_0		= byte ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, ecx
		mov	ecx, [esp+4+arg_4]
		test	ecx, ecx
		jl	short loc_6B19093B
		mov	eax, [esi]
		cmp	ecx, [eax-0Ch]
		jge	short loc_6B19093B
		movzx	edx, [esp+4+arg_0]
		push	edx		; unsigned int
		add	eax, ecx
		push	eax		; unsigned __int8 *
		call	ds:_mbschr
		test	eax, eax
		pop	ecx
		pop	ecx
		jz	short loc_6B19093B
		sub	eax, [esi]
		jmp	short loc_6B19093E
; ---------------------------------------------------------------------------

loc_6B19093B:				; CODE XREF: sub_6B190910+9j
					; sub_6B190910+10j ...
		or	eax, 0FFFFFFFFh

loc_6B19093E:				; CODE XREF: sub_6B190910+29j
		pop	esi
		retn	8
sub_6B190910	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B190942	proc near		; CODE XREF: Ordinal794+D8p

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		test	edx, edx
		jl	short loc_6B190957
		mov	eax, [ecx]
		cmp	edx, [eax-0Ch]
		jg	short loc_6B190957
		mov	al, [eax+edx]
		retn	4
; ---------------------------------------------------------------------------

loc_6B190957:				; CODE XREF: sub_6B190942+6j
					; sub_6B190942+Dj
		push	80070057h
		call	sub_6B181113
sub_6B190942	endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6B190962(void *Src,	size_t Size, int)
sub_6B190962	proc near		; CODE XREF: sub_6B1909CA+Fp

Src		= dword	ptr  4
Size		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		cmp	[esp+Src], 0
		push	esi
		push	edi
		mov	edi, [esp+8+Size]
		mov	esi, ecx
		jnz	short loc_6B19097F
		test	edi, edi
		jz	short loc_6B19097F
		push	80070057h
		call	sub_6B181113
; ---------------------------------------------------------------------------

loc_6B19097F:				; CODE XREF: sub_6B190962+Dj
					; sub_6B190962+11j
		mov	ecx, [esp+8+arg_8]
		mov	eax, [ecx]
		push	1
		push	edi
		call	dword ptr [eax]
		test	eax, eax
		jnz	short loc_6B190993
		call	sub_6B18C650
; ---------------------------------------------------------------------------

loc_6B190993:				; CODE XREF: sub_6B190962+2Aj
		add	eax, 10h
		push	edi
		mov	ecx, esi
		mov	[esi], eax
		call	sub_6B181598
		push	edi		; Size
		push	[esp+0Ch+Src]	; Src
		push	dword ptr [esi]	; Dst
		call	memcpy
		add	esp, 0Ch
		pop	edi
		mov	eax, esi
		pop	esi
		retn	0Ch
sub_6B190962	endp

; Exported entry 793.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal793
Ordinal793	proc near		; CODE XREF: sub_6B190D20+3Fp
					; sub_6B190E06+3Fp ...
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+8]
		call	sub_6B1899B5
		lea	ecx, [esi+4]
		pop	esi
		jmp	sub_6B1899B5
Ordinal793	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6B1909CA(void *Src,	size_t Size, int)
sub_6B1909CA	proc near		; CODE XREF: sub_6B190A9C+56p

Src		= dword	ptr  4
Size		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	[esp+4+arg_8]	; int
		mov	esi, ecx
		push	[esp+8+Size]	; Size
		push	[esp+0Ch+Src]	; Src
		call	sub_6B190962
		mov	eax, esi
		pop	esi
		retn	0Ch
sub_6B1909CA	endp

; Exported entry 796.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal796
Ordinal796	proc near		; CODE XREF: sub_6B190A2B+1Cp
					; sub_6B190FE8+1Ep
					; DATA XREF: ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_64 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		mov	al, [edi]
		mov	esi, ecx
		mov	[esi], al
		lea	eax, [edi+4]
		lea	ecx, [esi+4]
		push	eax
		mov	[ebp+var_10], esi
		call	sub_6B1816B1
		and	[ebp+var_4], 0
		add	edi, 8
		push	edi
		lea	ecx, [esi+8]
		call	sub_6B1816B1
		mov	ecx, [ebp+var_C]
		pop	edi
		mov	eax, esi
		pop	esi
		mov	large fs:0, ecx
		leave
		retn	4
Ordinal796	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B190A2B	proc near		; CODE XREF: sub_6B190D20+28p
					; sub_6B190E06+28p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_65 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_10], ecx
		and	[ebp+var_4], 0
		test	ecx, ecx
		jz	short loc_6B190A4C
		push	[ebp+arg_4]
		call	Ordinal796

loc_6B190A4C:				; CODE XREF: sub_6B190A2B+17j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		leave
		retn
sub_6B190A2B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B190A58	proc near		; CODE XREF: sub_6B190B01+28p
					; sub_6B190C83+28p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_65 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_10], ecx
		and	[ebp+var_4], 0
		test	ecx, ecx
		jz	short loc_6B190A79
		push	[ebp+arg_4]
		call	sub_6B1816B1

loc_6B190A79:				; CODE XREF: sub_6B190A58+17j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		leave
		retn
sub_6B190A58	endp

; Exported entry 792.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal792
Ordinal792	proc near		; CODE XREF: Ordinal791+32p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+4]
		call	sub_6B181879
		lea	ecx, [esi+8]
		call	sub_6B181879
		mov	eax, esi
		pop	esi
		retn
Ordinal792	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6B190A9C(int, int, size_t Size)
sub_6B190A9C	proc near		; CODE XREF: sub_6B190B6B+75p
					; sub_6B190C0A+17p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
Size		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		and	[ebp+var_4], 0
		push	ebx
		mov	ebx, [ebp+arg_4]
		test	ebx, ebx
		push	esi
		push	edi
		jge	short loc_6B190AB0
		xor	ebx, ebx

loc_6B190AB0:				; CODE XREF: sub_6B190A9C+10j
		mov	edi, [ebp+Size]
		test	edi, edi
		jge	short loc_6B190AB9
		xor	edi, edi

loc_6B190AB9:				; CODE XREF: sub_6B190A9C+19j
		mov	esi, [ecx]
		mov	eax, [esi-0Ch]
		lea	edx, [ebx+edi]
		cmp	edx, eax
		jle	short loc_6B190AC9
		mov	edi, eax
		sub	edi, ebx

loc_6B190AC9:				; CODE XREF: sub_6B190A9C+27j
		cmp	ebx, eax
		jle	short loc_6B190ACF
		xor	edi, edi

loc_6B190ACF:				; CODE XREF: sub_6B190A9C+2Fj
		test	ebx, ebx
		jnz	short loc_6B190AE2
		cmp	edi, eax
		jnz	short loc_6B190AE2
		push	ecx
		mov	ecx, [ebp+arg_0]
		call	sub_6B1816B1
		jmp	short loc_6B190AF7
; ---------------------------------------------------------------------------

loc_6B190AE2:				; CODE XREF: sub_6B190A9C+35j
					; sub_6B190A9C+39j
		mov	ecx, [esi-10h]
		mov	eax, [ecx]
		call	dword ptr [eax+10h]
		mov	ecx, [ebp+arg_0]
		push	eax		; int
		push	edi		; Size
		add	esi, ebx
		push	esi		; Src
		call	sub_6B1909CA

loc_6B190AF7:				; CODE XREF: sub_6B190A9C+44j
		mov	eax, [ebp+arg_0]
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	0Ch
sub_6B190A9C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B190B01	proc near		; CODE XREF: sub_6B190D03+13p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	eax, offset unknown_libname_66 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	ecx
		mov	eax, [ebp+arg_8]
		and	[ebp+var_4], 0
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		mov	[ebp+var_10], esp
		mov	[ebp+var_14], eax

loc_6B190B20:				; CODE XREF: sub_6B190B01+36j
		cmp	esi, [ebp+arg_4]
		jz	short loc_6B190B59
		push	esi
		push	[ebp+arg_8]
		call	sub_6B190A58
		add	[ebp+arg_8], 4
		pop	ecx
		pop	ecx
		add	esi, 4
		jmp	short loc_6B190B20
; ---------------------------------------------------------------------------

loc_6B190B39:				; DATA XREF: .rdata:stru_6B1BBAE8o
		mov	esi, [ebp+var_14]
		jmp	short loc_6B190B4B
; ---------------------------------------------------------------------------

loc_6B190B3E:				; CODE XREF: sub_6B190B01+4Dj
		mov	ecx, [esi]
		sub	ecx, 10h
		call	sub_6B18163D
		add	esi, 4

loc_6B190B4B:				; CODE XREF: sub_6B190B01+3Bj
		cmp	esi, [ebp+arg_8]
		jnz	short loc_6B190B3E
		push	0
		push	0
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B190B59:				; CODE XREF: sub_6B190B01+22j
		mov	ecx, [ebp+var_C]
		mov	eax, [ebp+arg_8]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn
sub_6B190B01	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6B190B6B(int, unsigned __int8 *, int)
sub_6B190B6B	proc near		; CODE XREF: Ordinal794+5Bp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		and	[ebp+var_8], 0
		push	esi
		mov	esi, [ebp+arg_8]
		mov	edx, [esi]
		test	edx, edx
		mov	[ebp+var_4], ecx
		jge	short loc_6B190B8B
		push	80070057h
		call	sub_6B181113
; ---------------------------------------------------------------------------

loc_6B190B8B:				; CODE XREF: sub_6B190B6B+14j
		cmp	[ebp+arg_4], 0
		jnz	short loc_6B190B9C
		push	ecx
		mov	ecx, [ebp+arg_0]
		call	sub_6B1816B1
		jmp	short loc_6B190C02
; ---------------------------------------------------------------------------

loc_6B190B9C:				; CODE XREF: sub_6B190B6B+24j
		mov	eax, [ecx]
		push	ebx
		push	edi
		mov	edi, [eax-0Ch]
		lea	ebx, [eax+edx]
		add	edi, eax
		cmp	ebx, edi
		jnb	short loc_6B190BE7
		push	[ebp+arg_4]	; unsigned __int8 *
		push	ebx		; unsigned __int8 *
		call	ds:_mbsspn
		add	ebx, eax
		cmp	ebx, edi
		pop	ecx
		pop	ecx
		mov	[ebp+arg_8], eax
		jnb	short loc_6B190BE7
		push	[ebp+arg_4]	; unsigned __int8 *
		push	ebx		; unsigned __int8 *
		call	ds:_mbscspn
		pop	ecx
		pop	ecx
		mov	ecx, [esi]
		add	ecx, [ebp+arg_8]
		push	eax		; Size
		push	ecx		; int
		push	[ebp+arg_0]	; int
		lea	edx, [ecx+eax+1]
		mov	ecx, [ebp+var_4]
		mov	[esi], edx
		call	sub_6B190A9C
		jmp	short loc_6B190C00
; ---------------------------------------------------------------------------

loc_6B190BE7:				; CODE XREF: sub_6B190B6B+3Fj
					; sub_6B190B6B+54j
		or	dword ptr [esi], 0FFFFFFFFh
		mov	eax, [ebp+var_4]
		mov	eax, [eax]
		mov	ecx, [eax-10h]
		mov	eax, [ecx]
		call	dword ptr [eax+10h]
		mov	ecx, [ebp+arg_0]
		push	eax
		call	sub_6B1817A6

loc_6B190C00:				; CODE XREF: sub_6B190B6B+7Aj
		pop	edi
		pop	ebx

loc_6B190C02:				; CODE XREF: sub_6B190B6B+2Fj
		mov	eax, [ebp+arg_0]
		pop	esi
		leave
		retn	0Ch
sub_6B190B6B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B190C0A	proc near		; CODE XREF: Ordinal791+DFp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	eax, [ecx]
		mov	eax, [eax-0Ch]
		sub	eax, [ebp+arg_4]
		and	[ebp+var_4], 0
		push	eax		; Size
		push	[ebp+arg_4]	; int
		push	[ebp+arg_0]	; int
		call	sub_6B190A9C
		mov	eax, [ebp+arg_0]
		leave
		retn	8
sub_6B190C0A	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B190C2D	proc near		; CODE XREF: Ordinal791+70p

arg_0		= byte ptr  4

		push	ebx
		mov	bl, [esp+4+arg_0]
		push	edi
		mov	edi, ecx
		mov	eax, [edi]
		jmp	short loc_6B190C41
; ---------------------------------------------------------------------------

loc_6B190C39:				; CODE XREF: sub_6B190C2D+16j
		push	eax		; unsigned __int8 *
		call	ds:_mbsinc
		pop	ecx

loc_6B190C41:				; CODE XREF: sub_6B190C2D+Aj
		cmp	bl, [eax]
		jz	short loc_6B190C39
		mov	ecx, [edi]
		cmp	eax, ecx
		jz	short loc_6B190C7C
		push	esi
		push	dword ptr [ecx-0Ch]
		sub	eax, ecx
		mov	ecx, edi
		mov	ebx, eax
		call	sub_6B1818C7
		mov	ecx, [edi]
		mov	esi, [ecx-0Ch]
		sub	esi, ebx
		lea	ecx, [esi+1]
		push	ecx		; Size
		lea	ecx, [eax+ebx]
		push	ecx		; Src
		push	eax		; Dst
		call	ds:memmove
		add	esp, 0Ch
		push	esi
		mov	ecx, edi
		call	sub_6B181598
		pop	esi

loc_6B190C7C:				; CODE XREF: sub_6B190C2D+1Cj
		mov	eax, edi
		pop	edi
		pop	ebx
		retn	4
sub_6B190C2D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B190C83	proc near		; CODE XREF: sub_6B190D87+13p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	eax, offset unknown_libname_67 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	ecx
		mov	eax, [ebp+arg_0]
		and	[ebp+var_4], 0
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		mov	[ebp+var_14], eax

loc_6B190C9F:				; CODE XREF: sub_6B190C83+36j
		cmp	[ebp+arg_4], 0
		jbe	short loc_6B190CDB
		push	[ebp+arg_8]
		push	[ebp+arg_0]
		call	sub_6B190A58
		dec	[ebp+arg_4]
		add	[ebp+arg_0], 4
		pop	ecx
		pop	ecx
		jmp	short loc_6B190C9F
; ---------------------------------------------------------------------------

loc_6B190CBB:				; DATA XREF: .rdata:stru_6B1BBB38o
		mov	esi, [ebp+var_14]
		jmp	short loc_6B190CCD
; ---------------------------------------------------------------------------

loc_6B190CC0:				; CODE XREF: sub_6B190C83+4Dj
		mov	ecx, [esi]
		sub	ecx, 10h
		call	sub_6B18163D
		add	esi, 4

loc_6B190CCD:				; CODE XREF: sub_6B190C83+3Bj
		cmp	esi, [ebp+arg_0]
		jnz	short loc_6B190CC0
		push	0
		push	0
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B190CDB:				; CODE XREF: sub_6B190C83+20j
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn
sub_6B190C83	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B190CEA	proc near		; CODE XREF: sub_6B190DA4+10p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		jmp	short loc_6B190CFB
; ---------------------------------------------------------------------------

loc_6B190CF1:				; CODE XREF: sub_6B190CEA+15j
		mov	ecx, esi
		call	sub_6B1899B5
		add	esi, 4

loc_6B190CFB:				; CODE XREF: sub_6B190CEA+5j
		cmp	esi, [esp+4+arg_4]
		jnz	short loc_6B190CF1
		pop	esi
		retn
sub_6B190CEA	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B190D03	proc near		; CODE XREF: sub_6B191214+B1p
					; sub_6B191214+D7p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+var_4]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6B190B01
		add	esp, 14h
		leave
		retn
sub_6B190D03	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B190D20	proc near		; CODE XREF: sub_6B190E83+13p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	eax, offset unknown_libname_68 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	ecx
		mov	eax, [ebp+arg_8]
		and	[ebp+var_4], 0
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		mov	[ebp+var_10], esp
		mov	[ebp+var_14], eax

loc_6B190D3F:				; CODE XREF: sub_6B190D20+36j
		cmp	esi, [ebp+arg_4]
		jz	short loc_6B190D75
		push	esi
		push	[ebp+arg_8]
		call	sub_6B190A2B
		add	[ebp+arg_8], 0Ch
		pop	ecx
		pop	ecx
		add	esi, 0Ch
		jmp	short loc_6B190D3F
; ---------------------------------------------------------------------------

loc_6B190D58:				; DATA XREF: .rdata:stru_6B1BBB88o
		mov	esi, [ebp+var_14]
		jmp	short loc_6B190D67
; ---------------------------------------------------------------------------

loc_6B190D5D:				; CODE XREF: sub_6B190D20+4Aj
		mov	ecx, esi
		call	Ordinal793
		add	esi, 0Ch

loc_6B190D67:				; CODE XREF: sub_6B190D20+3Bj
		cmp	esi, [ebp+arg_8]
		jnz	short loc_6B190D5D
		push	0
		push	0
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B190D75:				; CODE XREF: sub_6B190D20+22j
		mov	ecx, [ebp+var_C]
		mov	eax, [ebp+arg_8]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn
sub_6B190D20	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B190D87	proc near		; CODE XREF: sub_6B190EEE+11p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+var_4]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6B190C83
		add	esp, 14h
		leave
		retn
sub_6B190D87	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B190DA4	proc near		; CODE XREF: sub_6B190FBB+Fp
					; sub_6B191214+F4p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+var_4]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6B190CEA
		add	esp, 10h
		leave
		retn
sub_6B190DA4	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B190DBE	proc near		; CODE XREF: sub_6B191214+194p
					; sub_6B191214+1EFp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		jmp	short loc_6B190DD3
; ---------------------------------------------------------------------------

loc_6B190DC5:				; CODE XREF: sub_6B190DBE+19j
		push	[esp+4+arg_8]
		mov	ecx, esi
		call	sub_6B181F8B
		add	esi, 4

loc_6B190DD3:				; CODE XREF: sub_6B190DBE+5j
		cmp	esi, [esp+4+arg_4]
		jnz	short loc_6B190DC5
		pop	esi
		retn
sub_6B190DBE	endp

; Exported entry 797.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal797
Ordinal797	proc near		; CODE XREF: sub_6B190EA0+17p
					; sub_6B190F46+Dp
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	al, [edi]
		mov	esi, ecx
		mov	[esi], al
		lea	eax, [edi+4]
		push	eax
		lea	ecx, [esi+4]
		call	sub_6B181F8B
		add	edi, 8
		push	edi
		lea	ecx, [esi+8]
		call	sub_6B181F8B
		pop	edi
		mov	eax, esi
		pop	esi
		retn	4
Ordinal797	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B190E06	proc near		; CODE XREF: sub_6B190F0F+13p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	eax, offset unknown_libname_69 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	ecx
		mov	eax, [ebp+arg_0]
		and	[ebp+var_4], 0
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		mov	[ebp+var_14], eax

loc_6B190E22:				; CODE XREF: sub_6B190E06+36j
		cmp	[ebp+arg_4], 0
		jbe	short loc_6B190E5B
		push	[ebp+arg_8]
		push	[ebp+arg_0]
		call	sub_6B190A2B
		dec	[ebp+arg_4]
		add	[ebp+arg_0], 0Ch
		pop	ecx
		pop	ecx
		jmp	short loc_6B190E22
; ---------------------------------------------------------------------------

loc_6B190E3E:				; DATA XREF: .rdata:stru_6B1BBBD8o
		mov	esi, [ebp+var_14]
		jmp	short loc_6B190E4D
; ---------------------------------------------------------------------------

loc_6B190E43:				; CODE XREF: sub_6B190E06+4Aj
		mov	ecx, esi
		call	Ordinal793
		add	esi, 0Ch

loc_6B190E4D:				; CODE XREF: sub_6B190E06+3Bj
		cmp	esi, [ebp+arg_0]
		jnz	short loc_6B190E43
		push	0
		push	0
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B190E5B:				; CODE XREF: sub_6B190E06+20j
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn
sub_6B190E06	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B190E6A	proc near		; CODE XREF: sub_6B190F2C+10p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		jmp	short loc_6B190E7B
; ---------------------------------------------------------------------------

loc_6B190E71:				; CODE XREF: sub_6B190E6A+15j
		mov	ecx, esi
		call	Ordinal793
		add	esi, 0Ch

loc_6B190E7B:				; CODE XREF: sub_6B190E6A+5j
		cmp	esi, [esp+4+arg_4]
		jnz	short loc_6B190E71
		pop	esi
		retn
sub_6B190E6A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B190E83	proc near		; CODE XREF: sub_6B190FE8+AFp
					; sub_6B190FE8+D5p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+var_4]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6B190D20
		add	esp, 14h
		leave
		retn
sub_6B190E83	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B190EA0	proc near		; CODE XREF: sub_6B190F63+10p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_4]
		cmp	[ebp+arg_0], esi
		jz	short loc_6B190EC1

loc_6B190EAC:				; CODE XREF: sub_6B190EA0+1Fj
		sub	[ebp+arg_8], 0Ch
		mov	ecx, [ebp+arg_8]
		sub	esi, 0Ch
		push	esi
		call	Ordinal797
		cmp	esi, [ebp+arg_0]
		jnz	short loc_6B190EAC

loc_6B190EC1:				; CODE XREF: sub_6B190EA0+Aj
		mov	eax, [ebp+arg_8]
		pop	esi
		pop	ebp
		retn
sub_6B190EA0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B190EC7	proc near		; CODE XREF: sub_6B190F7D+10p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_4]
		cmp	[ebp+arg_0], esi
		jz	short loc_6B190EE8

loc_6B190ED3:				; CODE XREF: sub_6B190EC7+1Fj
		sub	[ebp+arg_8], 4
		mov	ecx, [ebp+arg_8]
		sub	esi, 4
		push	esi
		call	sub_6B181F8B
		cmp	esi, [ebp+arg_0]
		jnz	short loc_6B190ED3

loc_6B190EE8:				; CODE XREF: sub_6B190EC7+Aj
		mov	eax, [ebp+arg_8]
		pop	esi
		pop	ebp
		retn
sub_6B190EC7	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B190EEE	proc near		; CODE XREF: sub_6B191214+C4p
					; sub_6B191214+17Ap ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		mov	edi, [esp+8+arg_0]
		push	ecx
		push	[esp+0Ch+arg_8]
		push	esi
		push	edi
		call	sub_6B190D87
		add	esp, 10h
		lea	eax, [edi+esi*4]
		pop	edi
		pop	esi
		retn	0Ch
sub_6B190EEE	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B190F0F	proc near		; CODE XREF: sub_6B190F97+11p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+var_4]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6B190E06
		add	esp, 14h
		leave
		retn
sub_6B190F0F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B190F2C	proc near		; CODE XREF: sub_6B190FE8+F2p
					; sub_6B190FE8+124p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+var_4]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6B190E6A
		add	esp, 10h
		leave
		retn
sub_6B190F2C	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B190F46	proc near		; CODE XREF: sub_6B190FE8+19Fp
					; sub_6B190FE8+1FDp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		jmp	short loc_6B190F5B
; ---------------------------------------------------------------------------

loc_6B190F4D:				; CODE XREF: sub_6B190F46+19j
		push	[esp+4+arg_8]
		mov	ecx, esi
		call	Ordinal797
		add	esi, 0Ch

loc_6B190F5B:				; CODE XREF: sub_6B190F46+5j
		cmp	esi, [esp+4+arg_4]
		jnz	short loc_6B190F4D
		pop	esi
		retn
sub_6B190F46	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B190F63	proc near		; CODE XREF: sub_6B190FE8+1F0p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+var_4]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6B190EA0
		add	esp, 10h
		leave
		retn
sub_6B190F63	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B190F7D	proc near		; CODE XREF: sub_6B191214+1E2p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+var_4]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6B190EC7
		add	esp, 10h
		leave
		retn
sub_6B190F7D	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B190F97	proc near		; CODE XREF: sub_6B190FE8+C2p
					; sub_6B190FE8+186p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		mov	edi, [esp+8+arg_0]
		push	ecx
		push	[esp+0Ch+arg_8]
		push	esi
		push	edi
		call	sub_6B190F0F
		lea	eax, [esi+esi*2]
		add	esp, 10h
		lea	eax, [edi+eax*4]
		pop	edi
		pop	esi
		retn	0Ch
sub_6B190F97	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B190FBB	proc near		; CODE XREF: Ordinal782+CBp
					; Ordinal786+7p ...
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6B190FDA
		push	esi
		push	dword ptr [esi+8]
		push	eax
		call	sub_6B190DA4
		push	dword ptr [esi+4] ; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 10h

loc_6B190FDA:				; CODE XREF: sub_6B190FBB+8j
		and	dword ptr [esi+4], 0
		and	dword ptr [esi+8], 0
		and	dword ptr [esi+0Ch], 0
		pop	esi
		retn
sub_6B190FBB	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6B190FE8(int, int, void *)
sub_6B190FE8	proc near		; CODE XREF: sub_6B191427+2Cp

var_20		= byte ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	eax, offset unknown_libname_70 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 14h
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	[ebp+arg_8]
		mov	esi, ecx
		lea	ecx, [ebp+var_20]
		mov	[ebp+var_14], esi
		call	Ordinal796
		and	[ebp+var_4], 0
		mov	ecx, esi
		call	sub_6B19083F
		mov	edi, [ebp+arg_4]
		test	edi, edi
		mov	ebx, eax
		jz	loc_6B1911ED
		mov	ecx, esi
		call	sub_6B190855
		mov	ecx, 15555555h
		sub	ecx, eax
		cmp	ecx, edi
		mov	ecx, esi
		jnb	short loc_6B19103C
		call	sub_6B19086B
; ---------------------------------------------------------------------------

loc_6B19103C:				; CODE XREF: sub_6B190FE8+4Dj
		call	sub_6B190855
		add	eax, edi
		cmp	ebx, eax
		jnb	loc_6B191121
		mov	eax, ebx
		shr	eax, 1
		mov	ecx, 15555555h
		sub	ecx, eax
		cmp	ecx, ebx
		jnb	short loc_6B19105E
		xor	ebx, ebx
		jmp	short loc_6B191060
; ---------------------------------------------------------------------------

loc_6B19105E:				; CODE XREF: sub_6B190FE8+70j
		add	ebx, eax

loc_6B191060:				; CODE XREF: sub_6B190FE8+74j
		mov	ecx, esi
		call	sub_6B190855
		add	eax, edi
		cmp	ebx, eax
		jnb	short loc_6B191078
		mov	ecx, esi
		call	sub_6B190855
		mov	ebx, eax
		add	ebx, edi

loc_6B191078:				; CODE XREF: sub_6B190FE8+83j
		lea	ebx, [ebx+ebx*2]
		shl	ebx, 2
		push	ebx		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	ecx, [esi+4]
		push	esi
		push	eax
		push	[ebp+arg_0]
		mov	[ebp+arg_8], eax
		push	ecx
		mov	[ebp+arg_4], eax
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B190E83
		add	esp, 14h
		lea	ecx, [ebp+var_20]
		push	ecx
		push	edi
		push	eax
		mov	ecx, esi
		mov	[ebp+arg_4], eax
		call	sub_6B190F97
		mov	[ebp+arg_4], eax
		mov	eax, [esi+8]
		push	esi
		push	[ebp+arg_4]
		push	eax
		push	[ebp+arg_0]
		call	sub_6B190E83
		add	esp, 10h
		mov	ecx, esi
		call	sub_6B190855
		add	edi, eax
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6B1910EA
		push	esi
		push	dword ptr [esi+8]
		push	eax
		call	sub_6B190F2C
		push	dword ptr [esi+4] ; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 10h

loc_6B1910EA:				; CODE XREF: sub_6B190FE8+EBj
		mov	eax, [ebp+arg_8]
		lea	ecx, [edi+edi*2]
		add	ebx, eax
		lea	ecx, [eax+ecx*4]
		mov	[esi+0Ch], ebx
		mov	[esi+8], ecx
		mov	[esi+4], eax
		jmp	loc_6B1911ED
; ---------------------------------------------------------------------------

loc_6B191103:				; DATA XREF: .rdata:6B1BBC4Co
		push	[ebp+var_14]
		push	[ebp+arg_4]
		push	[ebp+arg_8]
		call	sub_6B190F2C
		push	[ebp+arg_8]	; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 10h
		jmp	loc_6B1911B2
; ---------------------------------------------------------------------------

loc_6B191121:				; CODE XREF: sub_6B190FE8+5Dj
		mov	ecx, [esi+8]
		mov	eax, ecx
		sub	eax, [ebp+arg_0]
		push	0Ch
		cdq
		pop	ebx
		idiv	ebx
		mov	[ebp+arg_8], ecx
		push	esi
		cmp	eax, edi
		jnb	loc_6B1911BB
		mov	eax, [ebp+arg_0]
		lea	ebx, [edi+edi*2]
		shl	ebx, 2
		lea	edx, [ebx+eax]
		push	edx
		push	ecx
		push	eax
		call	sub_6B190E83
		mov	eax, [esi+8]
		sub	eax, [ebp+arg_0]
		add	esp, 10h
		lea	ecx, [ebp+var_20]
		push	ecx
		push	0Ch
		pop	ecx
		cdq
		idiv	ecx
		mov	ecx, esi
		mov	byte ptr [ebp+var_4], 3
		sub	edi, eax
		push	edi
		push	dword ptr [esi+8]
		call	sub_6B190F97
		add	[esi+8], ebx
		mov	esi, [esi+8]
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_20]
		push	eax
		sub	esi, ebx
		push	esi
		push	[ebp+arg_0]
		call	sub_6B190F46
		add	esp, 0Ch
		jmp	short loc_6B1911ED
; ---------------------------------------------------------------------------

loc_6B191191:				; DATA XREF: .rdata:6B1BBC5Co
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_14]
		push	ecx
		mov	ecx, [ecx+8]
		lea	eax, [eax+eax*2]
		shl	eax, 2
		add	ecx, eax
		push	ecx
		mov	ecx, [ebp+arg_0]
		add	eax, ecx
		push	eax
		call	sub_6B190F2C
		add	esp, 0Ch

loc_6B1911B2:				; CODE XREF: sub_6B190FE8+134j
		push	0
		push	0
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B1911BB:				; CODE XREF: sub_6B190FE8+14Dj
		lea	edi, [edi+edi*2]
		push	ecx
		mov	ebx, ecx
		shl	edi, 2
		push	ecx
		sub	ebx, edi
		push	ebx
		call	sub_6B190E83
		push	[ebp+arg_8]
		mov	[esi+8], eax
		mov	esi, [ebp+arg_0]
		push	ebx
		push	esi
		call	sub_6B190F63
		lea	eax, [ebp+var_20]
		push	eax
		add	edi, esi
		push	edi
		push	esi
		call	sub_6B190F46
		add	esp, 28h

loc_6B1911ED:				; CODE XREF: sub_6B190FE8+35j
					; sub_6B190FE8+116j ...
		mov	ecx, [ebp+var_18]
		add	ecx, 0FFFFFFF0h
		call	sub_6B18163D
		mov	ecx, [ebp+var_1C]
		add	ecx, 0FFFFFFF0h
		call	sub_6B18163D
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn	0Ch
sub_6B190FE8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B191214	proc near		; CODE XREF: sub_6B191499+27p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	eax, offset unknown_libname_71 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 10h
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	[ebp+arg_8]
		mov	esi, ecx
		lea	ecx, [ebp+arg_8]
		mov	[ebp+var_18], esi
		call	sub_6B1816B1
		and	[ebp+var_4], 0
		mov	ecx, esi
		call	sub_6B1A62F1
		mov	edi, [ebp+arg_4]
		test	edi, edi
		mov	ebx, eax
		jz	loc_6B19140B
		mov	ecx, esi
		call	sub_6B1A17A8
		mov	ecx, 3FFFFFFFh
		sub	ecx, eax
		cmp	ecx, edi
		mov	ecx, esi
		jnb	short loc_6B191268
		call	sub_6B19086B
; ---------------------------------------------------------------------------

loc_6B191268:				; CODE XREF: sub_6B191214+4Dj
		call	sub_6B1A17A8
		add	eax, edi
		cmp	ebx, eax
		jnb	loc_6B19134C
		mov	eax, ebx
		shr	eax, 1
		mov	ecx, 3FFFFFFFh
		sub	ecx, eax
		cmp	ecx, ebx
		jnb	short loc_6B19128A
		xor	ebx, ebx
		jmp	short loc_6B19128C
; ---------------------------------------------------------------------------

loc_6B19128A:				; CODE XREF: sub_6B191214+70j
		add	ebx, eax

loc_6B19128C:				; CODE XREF: sub_6B191214+74j
		mov	ecx, esi
		call	sub_6B1A17A8
		add	eax, edi
		cmp	ebx, eax
		jnb	short loc_6B1912A4
		mov	ecx, esi
		call	sub_6B1A17A8
		mov	ebx, eax
		add	ebx, edi

loc_6B1912A4:				; CODE XREF: sub_6B191214+83j
		shl	ebx, 2
		push	ebx		; Size
		mov	[ebp+var_1C], ebx
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	ebx, eax
		mov	eax, [esi+4]
		push	esi
		push	ebx
		push	[ebp+arg_0]
		mov	[ebp+var_14], ebx
		push	eax
		mov	[ebp+arg_4], ebx
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B190D03
		add	esp, 14h
		lea	ecx, [ebp+arg_8]
		push	ecx
		push	edi
		push	eax
		mov	ecx, esi
		mov	[ebp+arg_4], eax
		call	sub_6B190EEE
		mov	[ebp+arg_4], eax
		mov	eax, [esi+8]
		push	esi
		push	[ebp+arg_4]
		push	eax
		push	[ebp+arg_0]
		call	sub_6B190D03
		add	esp, 10h
		mov	ecx, esi
		call	sub_6B1A17A8
		add	edi, eax
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6B191318
		push	esi
		push	dword ptr [esi+8]
		push	eax
		call	sub_6B190DA4
		push	dword ptr [esi+4] ; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 10h

loc_6B191318:				; CODE XREF: sub_6B191214+EDj
		mov	eax, [ebp+var_1C]
		add	eax, ebx
		mov	[esi+0Ch], eax
		lea	eax, [ebx+edi*4]
		mov	[esi+8], eax
		mov	[esi+4], ebx
		jmp	loc_6B19140B
; ---------------------------------------------------------------------------

loc_6B19132E:				; DATA XREF: .rdata:6B1BBCD8o
		push	[ebp+var_18]
		push	[ebp+arg_4]
		push	[ebp+var_14]
		call	sub_6B190DA4
		push	[ebp+var_14]	; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 10h
		jmp	loc_6B1913D0
; ---------------------------------------------------------------------------

loc_6B19134C:				; CODE XREF: sub_6B191214+5Dj
		mov	eax, [esi+8]
		mov	ebx, [ebp+arg_0]
		mov	ecx, eax
		sub	ecx, ebx
		sar	ecx, 2
		cmp	ecx, edi
		mov	[ebp+var_1C], eax
		push	esi
		jnb	short loc_6B1913D9
		mov	ecx, edi
		shl	ecx, 2
		mov	[ebp+var_1C], ecx
		add	ecx, ebx
		push	ecx
		push	eax
		push	ebx
		call	sub_6B190D03
		mov	eax, [esi+8]
		add	esp, 10h
		lea	ecx, [ebp+arg_8]
		push	ecx
		mov	ecx, eax
		sub	ecx, ebx
		sar	ecx, 2
		sub	edi, ecx
		push	edi
		push	eax
		mov	ecx, esi
		mov	byte ptr [ebp+var_4], 3
		call	sub_6B190EEE
		mov	eax, [ebp+var_1C]
		add	[esi+8], eax
		mov	esi, [esi+8]
		and	[ebp+var_4], 0
		lea	ecx, [ebp+arg_8]
		push	ecx
		sub	esi, eax
		push	esi
		push	ebx
		call	sub_6B190DBE
		add	esp, 0Ch
		jmp	short loc_6B19140B
; ---------------------------------------------------------------------------

loc_6B1913B2:				; DATA XREF: .rdata:6B1BBCE8o
		mov	ecx, [ebp+var_18]
		mov	eax, [ebp+arg_4]
		push	ecx
		mov	ecx, [ecx+8]
		shl	eax, 2
		add	ecx, eax
		push	ecx
		mov	ecx, [ebp+arg_0]
		add	eax, ecx
		push	eax
		call	sub_6B190DA4
		add	esp, 0Ch

loc_6B1913D0:				; CODE XREF: sub_6B191214+133j
		push	0
		push	0
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B1913D9:				; CODE XREF: sub_6B191214+14Bj
		push	eax
		mov	[ebp+arg_0], eax
		shl	edi, 2
		sub	[ebp+arg_0], edi
		push	eax
		push	[ebp+arg_0]
		call	sub_6B190D03
		push	[ebp+var_1C]
		mov	[esi+8], eax
		push	[ebp+arg_0]
		push	ebx
		call	sub_6B190F7D
		lea	eax, [ebp+arg_8]
		push	eax
		add	edi, ebx
		push	edi
		push	ebx
		call	sub_6B190DBE
		add	esp, 28h

loc_6B19140B:				; CODE XREF: sub_6B191214+35j
					; sub_6B191214+115j ...
		mov	ecx, [ebp+arg_8]
		add	ecx, 0FFFFFFF0h
		call	sub_6B18163D
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn	0Ch
sub_6B191214	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6B191427(int, int, void *)
sub_6B191427	proc near		; CODE XREF: sub_6B1914D6+35p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		mov	edi, ecx
		call	sub_6B190855
		test	eax, eax
		jnz	short loc_6B191438
		xor	esi, esi
		jmp	short loc_6B191447
; ---------------------------------------------------------------------------

loc_6B191438:				; CODE XREF: sub_6B191427+Bj
		mov	eax, [esp+8+arg_4]
		sub	eax, [edi+4]
		push	0Ch
		cdq
		pop	ecx
		idiv	ecx
		mov	esi, eax

loc_6B191447:				; CODE XREF: sub_6B191427+Fj
		push	[esp+8+arg_8]	; void *
		mov	ecx, edi
		push	1		; int
		push	[esp+10h+arg_4]	; int
		call	sub_6B190FE8
		mov	ecx, [edi+4]
		lea	eax, [esi+esi*2]
		lea	ecx, [ecx+eax*4]
		mov	eax, [esp+8+arg_0]
		pop	edi
		mov	[eax], ecx
		pop	esi
		retn	0Ch
sub_6B191427	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19146C	proc near		; CODE XREF: Ordinal781+9j
					; Ordinal782+42p
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6B19148B
		push	esi
		push	dword ptr [esi+8]
		push	eax
		call	sub_6B190F2C
		push	dword ptr [esi+4] ; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 10h

loc_6B19148B:				; CODE XREF: sub_6B19146C+8j
		and	dword ptr [esi+4], 0
		and	dword ptr [esi+8], 0
		and	dword ptr [esi+0Ch], 0
		pop	esi
		retn
sub_6B19146C	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B191499	proc near		; CODE XREF: sub_6B191516+35p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		mov	edi, ecx
		call	sub_6B1A17A8
		test	eax, eax
		jnz	short loc_6B1914AA
		xor	esi, esi
		jmp	short loc_6B1914B4
; ---------------------------------------------------------------------------

loc_6B1914AA:				; CODE XREF: sub_6B191499+Bj
		mov	esi, [esp+8+arg_4]
		sub	esi, [edi+4]
		sar	esi, 2

loc_6B1914B4:				; CODE XREF: sub_6B191499+Fj
		push	[esp+8+arg_8]
		mov	ecx, edi
		push	1
		push	[esp+10h+arg_4]
		call	sub_6B191214
		mov	eax, [edi+4]
		lea	ecx, [eax+esi*4]
		mov	eax, [esp+8+arg_0]
		pop	edi
		mov	[eax], ecx
		pop	esi
		retn	0Ch
sub_6B191499	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1914D6	proc near		; CODE XREF: Ordinal791+112p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		mov	esi, ecx
		call	sub_6B190855
		mov	ecx, esi
		mov	edi, eax
		call	sub_6B19083F
		cmp	edi, eax
		push	[ebp+arg_0]
		mov	ecx, esi
		jnb	short loc_6B191503
		push	1
		push	dword ptr [esi+8]
		call	sub_6B190F97
		mov	[esi+8], eax
		jmp	short loc_6B191510
; ---------------------------------------------------------------------------

loc_6B191503:				; CODE XREF: sub_6B1914D6+1Cj
		mov	eax, [esi+8]
		push	eax		; int
		lea	eax, [ebp+arg_0]
		push	eax		; int
		call	sub_6B191427

loc_6B191510:				; CODE XREF: sub_6B1914D6+2Bj
		pop	edi
		pop	esi
		pop	ebp
		retn	4
sub_6B1914D6	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B191516	proc near		; CODE XREF: Ordinal794+17Ap
					; Ordinal795+75p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		mov	esi, ecx
		call	sub_6B1A17A8
		mov	ecx, esi
		mov	edi, eax
		call	sub_6B1A62F1
		cmp	edi, eax
		push	[ebp+arg_0]
		mov	ecx, esi
		jnb	short loc_6B191543
		push	1
		push	dword ptr [esi+8]
		call	sub_6B190EEE
		mov	[esi+8], eax
		jmp	short loc_6B191550
; ---------------------------------------------------------------------------

loc_6B191543:				; CODE XREF: sub_6B191516+1Cj
		mov	eax, [esi+8]
		push	eax
		lea	eax, [ebp+arg_0]
		push	eax
		call	sub_6B191499

loc_6B191550:				; CODE XREF: sub_6B191516+2Bj
		pop	edi
		pop	esi
		pop	ebp
		retn	4
sub_6B191516	endp

; Exported entry 780.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal780
Ordinal780	proc near		; CODE XREF: Ordinal1393+2B7p
					; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, ecx
		xor	ecx, ecx
		mov	dword ptr [eax], offset	off_6B1B0C24
		mov	[eax+8], ecx
		mov	[eax+0Ch], ecx
		mov	[eax+10h], ecx
		retn
Ordinal780	endp

; Exported entry 781.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal781
Ordinal781	proc near		; CODE XREF: sub_6B191AE8+3p
					; Ordinal1393+43Dp ...
		mov	dword ptr [ecx], offset	off_6B1B0C24
		add	ecx, 4
		jmp	sub_6B19146C
Ordinal781	endp

; Exported entry 791.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal791
Ordinal791	proc near		; CODE XREF: Ordinal782+A0p
					; DATA XREF: .rdata:off_6B1BF428o

var_44		= byte ptr -44h
var_20		= byte ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_72 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 40h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		mov	edi, ecx
		push	offset aCcommandlinePr ; "CCommandLine::ProcessCommand()"
		lea	ecx, [ebp+var_44]
		mov	[ebp+var_14], eax
		call	Ordinal1089
		xor	ebx, ebx
		lea	ecx, [ebp+var_20]
		mov	[ebp+var_4], ebx
		call	Ordinal792
		mov	esi, [ebp+arg_4]
		push	esi
		lea	ecx, [ebp+var_18]
		mov	byte ptr [ebp+var_4], 2
		mov	[ebp+var_20], bl
		call	sub_6B181F8B
		mov	eax, [esi]
		mov	ecx, [eax-0Ch]
		cmp	ecx, ebx
		jl	short loc_6B1915F6
		mov	al, [eax]
		cmp	al, 22h
		jnz	short loc_6B1915F2
		push	esi
		lea	ecx, [ebp+var_1C]
		call	sub_6B181F8B
		push	22h
		lea	ecx, [ebp+var_1C]
		call	sub_6B182485
		push	22h
		mov	ecx, eax
		call	sub_6B190C2D
		jmp	loc_6B191683
; ---------------------------------------------------------------------------

loc_6B1915F2:				; CODE XREF: Ordinal791+57j
		cmp	ecx, ebx
		jge	short loc_6B191600

loc_6B1915F6:				; CODE XREF: Ordinal791+51j
		push	80070057h
		call	sub_6B181113
; ---------------------------------------------------------------------------

loc_6B191600:				; CODE XREF: Ordinal791+7Cj
		mov	ecx, [ebp+arg_0]
		push	ebx
		mov	byte ptr [ebp+arg_4], al
		push	[ebp+arg_4]
		call	sub_6B190910
		cmp	eax, 0FFFFFFFFh
		jz	short loc_6B19167A
		mov	eax, [esi]
		mov	eax, [eax-0Ch]
		cmp	eax, 1
		jg	short loc_6B19164B
		push	offset aCcommandline_0 ; "CCommandLine::ProcessCommand() : sToken"...
		call	sub_6B18102E
		pop	ecx
		mov	ecx, [ebp+var_18]
		add	ecx, 0FFFFFFF0h
		call	sub_6B18163D
		mov	ecx, [ebp+var_1C]
		add	ecx, 0FFFFFFF0h
		call	sub_6B18163D
		lea	ecx, [ebp+var_44]
		call	Ordinal1090
		xor	al, al
		jmp	short loc_6B1916BF
; ---------------------------------------------------------------------------

loc_6B19164B:				; CODE XREF: Ordinal791+A4j
		push	1
		lea	eax, [ebp+arg_4]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_20], 1
		call	sub_6B190C0A
		push	eax
		lea	ecx, [ebp+var_1C]
		mov	byte ptr [ebp+var_4], 3
		call	sub_6B181F8B
		mov	ecx, [ebp+arg_4]
		add	ecx, 0FFFFFFF0h
		mov	byte ptr [ebp+var_4], 2
		call	sub_6B18163D
		jmp	short loc_6B191683
; ---------------------------------------------------------------------------

loc_6B19167A:				; CODE XREF: Ordinal791+9Aj
		push	esi
		lea	ecx, [ebp+var_1C]
		call	sub_6B181F8B

loc_6B191683:				; CODE XREF: Ordinal791+75j
					; Ordinal791+100j
		lea	eax, [ebp+var_20]
		push	eax
		lea	ecx, [edi+4]
		call	sub_6B1914D6
		mov	ecx, [ebp+var_18]
		add	ecx, 0FFFFFFF0h
		call	sub_6B18163D
		mov	ecx, [ebp+var_1C]
		add	ecx, 0FFFFFFF0h
		call	sub_6B18163D

loc_6B1916A5:				; DATA XREF: sub_6B1916D8+3Do
					; sub_6B19171B+4Fo
		lea	ecx, [ebp+var_44]
		call	Ordinal1635
		mov	ebx, eax
		neg	ebx
		sbb	bl, bl
		lea	ecx, [ebp+var_44]
		inc	bl
		call	Ordinal1090
		mov	al, bl

loc_6B1916BF:				; CODE XREF: Ordinal791+D1j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal791	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1916D8	proc near		; DATA XREF: .rdata:6B1BBD64o
		push	13h
		lea	ecx, [ebp-44h]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-44h]
		call	Ordinal1101
		mov	ecx, [ebp-4Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal1103
		lea	ecx, [ebp-44h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1916A5
		retn
sub_6B1916D8	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19171B	proc near		; DATA XREF: .rdata:6B1BBD74o
		push	15h
		lea	ecx, [ebp-44h]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-44h]
		call	Ordinal1101
		mov	eax, [ebp-48h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal1103
		lea	ecx, [ebp-44h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1916A5
		retn
sub_6B19171B	endp

; Exported entry 794.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal794(char	*Src, int)
		public Ordinal794
Ordinal794	proc near		; CODE XREF: Ordinal782+59p
					; DATA XREF: .rdata:off_6B1BF428o

var_54		= byte ptr -54h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_73 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 50h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCcommandlineTo ; "CCommandLine::Tokenize()"
		lea	ecx, [ebp+var_54]
		mov	[ebp+var_14], eax
		call	Ordinal1089
		and	[ebp+var_4], 0
		push	[ebp+Src]	; Src
		lea	ecx, [ebp+Src]
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B18281C
		lea	ecx, [ebp+var_28]
		call	sub_6B181879
		and	[ebp+var_2C], 0
		mov	byte ptr [ebp+var_4], 3

loc_6B1917BB:				; CODE XREF: Ordinal794+17Fj
		lea	eax, [ebp+var_2C]
		push	eax		; int
		push	offset asc_6B1B0188 ; "	"
		lea	eax, [ebp+var_34]
		push	eax		; int
		lea	ecx, [ebp+Src]
		call	sub_6B190B6B
		push	eax
		lea	ecx, [ebp+var_28]
		mov	byte ptr [ebp+var_4], 4
		call	sub_6B181F8B
		mov	ecx, [ebp+var_34]
		add	ecx, 0FFFFFFF0h
		mov	byte ptr [ebp+var_4], 3
		call	sub_6B18163D
		mov	esi, [ebp+var_28]
		mov	eax, [esi-0Ch]
		test	eax, eax
		jnz	short loc_6B19183C
		lea	ecx, [esi-10h]
		call	sub_6B18163D
		mov	ecx, [ebp+Src]
		add	ecx, 0FFFFFFF0h
		call	sub_6B18163D

loc_6B191809:				; DATA XREF: sub_6B1918F4+3Do
					; sub_6B191937+4Fo
		lea	ecx, [ebp+var_54]
		call	Ordinal1635
		mov	ebx, eax
		neg	ebx
		sbb	bl, bl
		lea	ecx, [ebp+var_54]
		inc	bl
		call	Ordinal1090
		mov	al, bl

loc_6B191823:				; CODE XREF: Ordinal794+139j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
; ---------------------------------------------------------------------------

loc_6B19183C:				; CODE XREF: Ordinal794+84j
		jl	short loc_6B191858
		cmp	byte ptr [esi],	22h
		jnz	short loc_6B191851
		dec	eax
		push	eax
		lea	ecx, [ebp+var_28]
		call	sub_6B190942
		cmp	al, 22h
		jnz	short loc_6B19186C

loc_6B191851:				; CODE XREF: Ordinal794+D1j
		mov	eax, [esi-0Ch]
		test	eax, eax
		jge	short loc_6B191862

loc_6B191858:				; CODE XREF: Ordinal794:loc_6B19183Cj
		push	80070057h
		call	sub_6B181113
; ---------------------------------------------------------------------------

loc_6B191862:				; CODE XREF: Ordinal794+E6j
		cmp	byte ptr [esi],	22h
		jnz	short loc_6B1918E3
		cmp	eax, 1
		jnz	short loc_6B1918E3

loc_6B19186C:				; CODE XREF: Ordinal794+DFj
		mov	ebx, [ebp+var_2C]
		push	ebx
		push	22h
		lea	ecx, [ebp+Src]
		call	sub_6B190910
		mov	edi, eax
		cmp	edi, 0FFFFFFFFh
		jnz	short loc_6B1918AE
		push	offset aCcommandline_1 ; "CCommandLine::Tokenize() : sString.Find"...
		call	sub_6B18102E
		pop	ecx
		lea	ecx, [esi-10h]
		call	sub_6B18163D
		mov	ecx, [ebp+Src]
		add	ecx, 0FFFFFFF0h
		call	sub_6B18163D
		lea	ecx, [ebp+var_54]
		call	Ordinal1090
		xor	al, al
		jmp	loc_6B191823
; ---------------------------------------------------------------------------

loc_6B1918AE:				; CODE XREF: Ordinal794+10Fj
		mov	eax, edi
		sub	eax, ebx
		inc	eax
		inc	eax
		push	eax		; Size
		dec	ebx
		push	ebx		; int
		lea	eax, [ebp+var_30]
		push	eax		; int
		lea	ecx, [ebp+Src]
		call	sub_6B190A9C
		push	eax
		lea	ecx, [ebp+var_28]
		mov	byte ptr [ebp+var_4], 5
		call	sub_6B18F101
		mov	ecx, [ebp+var_30]
		add	ecx, 0FFFFFFF0h
		mov	byte ptr [ebp+var_4], 3
		call	sub_6B18163D
		inc	edi
		mov	[ebp+var_2C], edi

loc_6B1918E3:				; CODE XREF: Ordinal794+F5j
					; Ordinal794+FAj
		mov	ecx, [ebp+arg_4]
		lea	eax, [ebp+var_28]
		push	eax
		call	sub_6B191516
		jmp	loc_6B1917BB
Ordinal794	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1918F4	proc near		; DATA XREF: .rdata:6B1BBDECo
		push	13h
		lea	ecx, [ebp-54h]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-54h]
		call	Ordinal1101
		mov	ecx, [ebp-5Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-54h]
		call	Ordinal1103
		lea	ecx, [ebp-54h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B191809
		retn
sub_6B1918F4	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B191937	proc near		; DATA XREF: .rdata:6B1BBDFCo
		push	15h
		lea	ecx, [ebp-54h]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-54h]
		call	Ordinal1101
		mov	eax, [ebp-58h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-54h]
		call	Ordinal1103
		lea	ecx, [ebp-54h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B191809
		retn
sub_6B191937	endp

; Exported entry 795.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal795(unsigned __int8 *, int)
		public Ordinal795
Ordinal795	proc near		; CODE XREF: Ordinal786+16p
					; Ordinal788+24p
					; DATA XREF: ...

var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_25		= byte ptr -25h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_74 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		mov	edi, ecx
		push	offset aCcommandlineGe ; "CCommandLine::GetSwitchValuesEx()"
		lea	ecx, [ebp+var_48]
		mov	[ebp+var_14], eax
		mov	[ebp+var_25], 1
		call	Ordinal1089
		mov	esi, [edi+8]
		xor	ebx, ebx
		mov	[ebp+var_4], ebx
		mov	byte ptr [ebp+var_4], 1

loc_6B1919C6:				; CODE XREF: Ordinal795+7Dj
		cmp	esi, [edi+0Ch]
		jz	loc_6B191AB5
		mov	eax, [esi+4]
		push	[ebp+arg_0]	; unsigned __int8 *
		push	eax		; unsigned __int8 *
		call	ds:_mbsicmp
		test	eax, eax
		pop	ecx
		pop	ecx
		jnz	short loc_6B191A06
		cmp	[esi], bl
		jz	short loc_6B191A06
		add	esi, 0Ch
		cmp	esi, [edi+0Ch]
		jz	loc_6B191AA3
		cmp	[esi], bl
		jnz	loc_6B191AA3
		mov	ecx, [ebp+arg_4]
		lea	eax, [esi+4]
		push	eax
		call	sub_6B191516

loc_6B191A06:				; CODE XREF: Ordinal795+54j
					; Ordinal795+58j
		add	esi, 0Ch
		jmp	short loc_6B1919C6
; ---------------------------------------------------------------------------

loc_6B191A0B:				; DATA XREF: .rdata:6B1BBE54o
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B191AB3
		retn
; ---------------------------------------------------------------------------

loc_6B191A4E:				; DATA XREF: .rdata:6B1BBE64o
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	eax, [ebp+var_4C]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B191AB3
		retn
; ---------------------------------------------------------------------------

loc_6B191AA3:				; CODE XREF: Ordinal795+60j
					; Ordinal795+68j
		push	offset aCcommandline_2 ; "CCommandLine::GetSwitchValuesEx() : pos"...
		call	sub_6B18102E
		pop	ecx
		mov	[ebp+var_25], bl
		jmp	short loc_6B191AB5
; ---------------------------------------------------------------------------

loc_6B191AB3:				; DATA XREF: Ordinal795+BCo
					; Ordinal795+111o
		xor	ebx, ebx

loc_6B191AB5:				; CODE XREF: Ordinal795+3Dj
					; Ordinal795+125j
		lea	ecx, [ebp+var_48]
		call	Ordinal1635
		test	eax, eax
		jz	short loc_6B191AC4
		mov	[ebp+var_25], bl

loc_6B191AC4:				; CODE XREF: Ordinal795+133j
		lea	ecx, [ebp+var_48]
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	al, [ebp+var_25]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal795	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B191AE8(void *, char)
sub_6B191AE8	proc near		; DATA XREF: .rdata:off_6B1B0C24o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal781
		test	[esp+4+arg_0], 1
		jz	short loc_6B191AFE
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B191AFE:				; CODE XREF: sub_6B191AE8+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B191AE8	endp

; Exported entry 782.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal782(LPCSTR lpString, char *Src)
		public Ordinal782
Ordinal782	proc near		; CODE XREF: Ordinal783+11p
					; DATA XREF: .rdata:off_6B1BF428o

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
lpString	= dword	ptr  8
Src		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	ebx
		push	esi
		xor	ebx, ebx
		cmp	[ebp+lpString],	ebx
		push	edi
		mov	edi, ecx
		jz	loc_6B191BD8
		push	[ebp+lpString]	; lpString
		mov	esi, ds:lstrlenA
		call	esi ; lstrlenA
		test	eax, eax
		jz	loc_6B191BD8
		cmp	[ebp+Src], ebx
		jz	loc_6B191BD8
		push	[ebp+Src]	; lpString
		call	esi ; lstrlenA
		test	eax, eax
		jz	loc_6B191BD8
		lea	ecx, [edi+4]
		call	sub_6B19146C
		lea	eax, [ebp+var_14]
		push	eax		; int
		push	[ebp+lpString]	; Src
		mov	ecx, edi
		mov	[ebp+var_10], ebx
		mov	[ebp+var_C], ebx
		mov	[ebp+var_8], ebx
		call	Ordinal794
		test	al, al
		jnz	short loc_6B191B75
		push	offset aCcommandlinePa ; "CCommandLine::Parse()	: Tokenize() ==	f"...
		call	sub_6B18102E
		pop	ecx
		xor	bl, bl
		jmp	short loc_6B191BCC
; ---------------------------------------------------------------------------

loc_6B191B75:				; CODE XREF: Ordinal782+60j
		lea	ecx, [ebp+var_4]
		call	sub_6B181879
		lea	eax, [ebp+var_4]
		push	eax		; int
		push	[ebp+Src]	; Src
		call	Ordinal1519
		test	al, al
		pop	ecx
		pop	ecx
		jnz	short loc_6B191B96
		push	offset aCcommandline_3 ; "CCommandLine::Parse()	: CStringConvert:"...
		jmp	short loc_6B191BBC
; ---------------------------------------------------------------------------

loc_6B191B96:				; CODE XREF: Ordinal782+89j
		mov	esi, [ebp+var_10]
		mov	bl, 1
		jmp	short loc_6B191BB0
; ---------------------------------------------------------------------------

loc_6B191B9D:				; CODE XREF: Ordinal782+AFj
		push	esi
		lea	eax, [ebp+var_4]
		push	eax
		mov	ecx, edi
		call	Ordinal791
		test	al, al
		jz	short loc_6B191BB7
		add	esi, 4

loc_6B191BB0:				; CODE XREF: Ordinal782+97j
		cmp	esi, [ebp+var_C]
		jnz	short loc_6B191B9D
		jmp	short loc_6B191BC4
; ---------------------------------------------------------------------------

loc_6B191BB7:				; CODE XREF: Ordinal782+A7j
		push	offset aCcommandline_4 ; "CCommandLine::Parse()	: ProcessCommand("...

loc_6B191BBC:				; CODE XREF: Ordinal782+90j
		call	sub_6B18102E
		pop	ecx
		xor	bl, bl

loc_6B191BC4:				; CODE XREF: Ordinal782+B1j
		lea	ecx, [ebp+var_4]
		call	sub_6B1899B5

loc_6B191BCC:				; CODE XREF: Ordinal782+6Fj
		lea	ecx, [ebp+var_14]
		call	sub_6B190FBB
		mov	al, bl
		jmp	short loc_6B191BE5
; ---------------------------------------------------------------------------

loc_6B191BD8:				; CODE XREF: Ordinal782+10j
					; Ordinal782+23j ...
		push	offset aCcommandline_5 ; "CCommandLine::Parse()	: szCommandLine	="...
		call	sub_6B18102E
		pop	ecx
		xor	al, al

loc_6B191BE5:				; CODE XREF: Ordinal782+D2j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal782	endp

; Exported entry 783.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal783
Ordinal783	proc near		; CODE XREF: Ordinal1393+2C3p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		push	offset asc_6B1B0E14 ; "/-"
		mov	esi, ecx
		call	ds:GetCommandLineA
		push	eax		; lpString
		mov	ecx, esi
		call	Ordinal782
		pop	esi
		retn
Ordinal783	endp

; Exported entry 786.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal786(unsigned __int8 *, int)
		public Ordinal786
Ordinal786	proc near		; CODE XREF: Ordinal785+19p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, ecx
		mov	ecx, [esp+4+arg_4]
		call	sub_6B190FBB
		push	[esp+4+arg_4]	; int
		mov	ecx, esi
		push	[esp+8+arg_0]	; unsigned __int8 *
		call	Ordinal795
		pop	esi
		retn	8
Ordinal786	endp

; Exported entry 788.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal788
Ordinal788	proc near		; CODE XREF: Ordinal787+1Cp
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		mov	ecx, [ebp+arg_8]
		call	sub_6B190FBB
		xor	esi, esi
		cmp	[ebp+arg_4], esi
		mov	bl, 1
		jbe	short loc_6B191C65

loc_6B191C3C:				; CODE XREF: Ordinal788+31j
		push	[ebp+arg_8]	; int
		mov	eax, [ebp+arg_0]
		push	dword ptr [eax+esi*4] ;	unsigned __int8	*
		mov	ecx, edi
		call	Ordinal795
		test	al, al
		jz	short loc_6B191C58
		inc	esi
		cmp	esi, [ebp+arg_4]
		jb	short loc_6B191C3C
		jmp	short loc_6B191C65
; ---------------------------------------------------------------------------

loc_6B191C58:				; CODE XREF: Ordinal788+2Bj
		push	offset aCcommandline_6 ; "CCommandLine::GetSwitchValues() : GetSw"...
		call	sub_6B18102E
		pop	ecx
		xor	bl, bl

loc_6B191C65:				; CODE XREF: Ordinal788+17j
					; Ordinal788+33j
		pop	edi
		pop	esi
		mov	al, bl
		pop	ebx
		pop	ebp
		retn	0Ch
Ordinal788	endp

; Exported entry 785.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal785(unsigned __int8 *)
		public Ordinal785
Ordinal785	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		lea	eax, [ebp+var_10]
		push	eax		; int
		push	[ebp+arg_0]	; unsigned __int8 *
		xor	esi, esi
		mov	[ebp+var_C], esi
		mov	[ebp+var_8], esi
		mov	[ebp+var_4], esi
		call	Ordinal786
		test	al, al
		jnz	short loc_6B191C9D
		push	offset aCcommandline_7 ; "CCommandLine::GetSwitchValue() : GetSwi"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B191CA7
; ---------------------------------------------------------------------------

loc_6B191C9D:				; CODE XREF: Ordinal785+20j
		mov	eax, [ebp+var_C]
		cmp	eax, [ebp+var_8]
		jz	short loc_6B191CA7
		mov	esi, [eax]

loc_6B191CA7:				; CODE XREF: Ordinal785+2Dj
					; Ordinal785+35j
		lea	ecx, [ebp+var_10]
		call	sub_6B190FBB
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal785	endp

; Exported entry 787.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal787
Ordinal787	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		lea	eax, [ebp+var_10]
		push	eax
		push	[ebp+arg_4]
		xor	esi, esi
		push	[ebp+arg_0]
		mov	[ebp+var_C], esi
		mov	[ebp+var_8], esi
		mov	[ebp+var_4], esi
		call	Ordinal788
		test	al, al
		jnz	short loc_6B191CE8
		push	offset aCcommandline_7 ; "CCommandLine::GetSwitchValue() : GetSwi"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B191CF2
; ---------------------------------------------------------------------------

loc_6B191CE8:				; CODE XREF: Ordinal787+23j
		mov	eax, [ebp+var_C]
		cmp	eax, [ebp+var_8]
		jz	short loc_6B191CF2
		mov	esi, [eax]

loc_6B191CF2:				; CODE XREF: Ordinal787+30j
					; Ordinal787+38j
		lea	ecx, [ebp+var_10]
		call	sub_6B190FBB
		mov	eax, esi
		pop	esi
		leave
		retn	8
Ordinal787	endp

; Exported entry 798.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal798
Ordinal798	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	Ordinal1391
		and	dword ptr [esi+28Ch], 0
		mov	dword ptr [esi], offset	off_6B1B0E98
		mov	dword ptr [esi+248h], 1
		mov	eax, esi
		pop	esi
		retn
Ordinal798	endp

; Exported entry 799.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal799
Ordinal799	proc near		; CODE XREF: sub_6B191D7A+3p
					; DATA XREF: .rdata:off_6B1BF428o
		mov	dword ptr [ecx], offset	off_6B1B0E98
		jmp	Ordinal1392
Ordinal799	endp

; Exported entry 800.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal800
Ordinal800	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+28Ch]
		retn
Ordinal800	endp

; Exported entry 801.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal801
Ordinal801	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
lpString2	= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_10]	; int
		mov	eax, [ebp+arg_0]
		push	[ebp+arg_C]	; int
		mov	[ecx+28Ch], eax
		push	[ebp+arg_8]	; int
		push	[ebp+lpString2]	; lpString2
		call	Ordinal1393
		pop	ebp
		retn	14h
Ordinal801	endp

; Exported entry 811.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal811
Ordinal811	proc near		; CODE XREF: Ordinal804p Ordinal806+3p
					; DATA XREF: ...
		mov	ecx, [ecx+28Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+1Ch]
		test	eax, eax
		jge	short loc_6B191D76
		push	eax		; Args
		push	offset aCcomserviceUnr ; "CComService::Unregister() : m_pComModul"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6B191D76:				; CODE XREF: Ordinal811+Dj
		xor	eax, eax
		inc	eax
		retn
Ordinal811	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B191D7A(void *, char)
sub_6B191D7A	proc near		; DATA XREF: .rdata:off_6B1B0E98o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal799
		test	[esp+4+arg_0], 1
		jz	short loc_6B191D90
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B191D90:				; CODE XREF: sub_6B191D7A+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B191D7A	endp

; Exported entry 804.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal804
Ordinal804	proc near		; DATA XREF: .rdata:6B1B0F00o
					; .rdata:off_6B1BF428o
		call	Ordinal811
		test	eax, eax
		jnz	short loc_6B191DAE
		push	offset aCcomserviceOnu ; "CComService::OnUnRegServer() : Unregist"...
		call	sub_6B18102E
		pop	ecx
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_6B191DAE:				; CODE XREF: Ordinal804+7j
		xor	eax, eax
		retn
Ordinal804	endp

; Exported entry 806.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal806
Ordinal806	proc near		; DATA XREF: .rdata:6B1B0F08o
					; .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	Ordinal811
		test	eax, eax
		jnz	short loc_6B191DC8
		push	offset aCcomserviceOnr ; "CComService::OnRemoveService() : Unregi"...
		call	sub_6B18102E
		pop	ecx

loc_6B191DC8:				; CODE XREF: Ordinal806+Aj
		mov	ecx, esi
		pop	esi
		jmp	Ordinal1423
Ordinal806	endp

; Exported entry 809.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal809
Ordinal809	proc near		; CODE XREF: Ordinal802+3p Ordinal803p ...
		mov	eax, [ecx+23Ch]
		mov	ecx, [ecx+28Ch]
		mov	edx, [ecx]
		push	eax
		push	0
		call	dword ptr [edx+18h]
		test	eax, eax
		jge	short loc_6B191DF8
		push	eax		; Args
		push	offset aCcomserviceReg ; "CComService::RegisterStandalone() : m_p"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6B191DF8:				; CODE XREF: Ordinal809+16j
		xor	eax, eax
		inc	eax
		retn
Ordinal809	endp

; Exported entry 810.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal810
Ordinal810	proc near		; CODE XREF: Ordinal805+Ep
					; Ordinal807+Ep
					; DATA XREF: ...
		mov	eax, [ecx+23Ch]
		mov	ecx, [ecx+28Ch]
		mov	edx, [ecx]
		push	eax
		push	1
		call	dword ptr [edx+18h]
		test	eax, eax
		jge	short loc_6B191E24
		push	eax		; Args
		push	offset aCcomserviceR_0 ; "CComService::RegisterService() : m_pCom"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6B191E24:				; CODE XREF: Ordinal810+16j
		xor	eax, eax
		inc	eax
		retn
Ordinal810	endp

; Exported entry 802.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal802
Ordinal802	proc near		; DATA XREF: .rdata:6B1B0EF8o
					; .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	Ordinal809
		test	eax, eax
		jnz	short loc_6B191E44
		push	offset aCcomserviceO_0 ; "CComService::OnRunEmbedded() : Register"...
		call	sub_6B18102E
		pop	ecx
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6B191E44:				; CODE XREF: Ordinal802+Aj
		mov	ecx, esi
		pop	esi
		jmp	Ordinal1425
Ordinal802	endp

; Exported entry 803.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal803
Ordinal803	proc near		; DATA XREF: .rdata:6B1B0EFCo
					; .rdata:off_6B1BF428o
		call	Ordinal809
		test	eax, eax
		jnz	short loc_6B191E64
		push	offset aCcomserviceO_1 ; "CComService::OnRegServer() : RegisterSt"...
		call	sub_6B18102E
		pop	ecx
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_6B191E64:				; CODE XREF: Ordinal803+7j
		xor	eax, eax
		retn
Ordinal803	endp

; Exported entry 805.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal805
Ordinal805	proc near		; DATA XREF: .rdata:6B1B0F04o
					; .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	Ordinal1269
		test	al, al
		mov	ecx, esi
		jz	short loc_6B191E85
		call	Ordinal810
		test	eax, eax
		jnz	short loc_6B191E9E
		push	offset aCcomserviceOni ; "CComService::OnInstallService() : Regis"...
		jmp	short loc_6B191E93
; ---------------------------------------------------------------------------

loc_6B191E85:				; CODE XREF: Ordinal805+Cj
		call	Ordinal809
		test	eax, eax
		jnz	short loc_6B191E9E
		push	offset aCcomserviceO_2 ; "CComService::OnInstallService() : Regis"...

loc_6B191E93:				; CODE XREF: Ordinal805+1Cj
		call	sub_6B18102E
		pop	ecx
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6B191E9E:				; CODE XREF: Ordinal805+15j
					; Ordinal805+25j
		mov	ecx, esi
		pop	esi
		jmp	Ordinal1422
Ordinal805	endp

; Exported entry 807.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal807
Ordinal807	proc near		; DATA XREF: .rdata:6B1B0F10o
					; .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1269
		test	al, al
		mov	ecx, esi
		jz	short loc_6B191EC4
		call	Ordinal810
		test	eax, eax
		jnz	short loc_6B191EDD
		push	offset aCcomserviceO_3 ; "CComService::OnRunService() :	RegisterS"...
		jmp	short loc_6B191ED2
; ---------------------------------------------------------------------------

loc_6B191EC4:				; CODE XREF: Ordinal807+Cj
		call	Ordinal809
		test	eax, eax
		jnz	short loc_6B191EDD
		push	offset aCcomserviceO_4 ; "CComService::OnRunService() :	RegisterS"...

loc_6B191ED2:				; CODE XREF: Ordinal807+1Cj
		call	sub_6B18102E
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_6B191EE8
; ---------------------------------------------------------------------------

loc_6B191EDD:				; CODE XREF: Ordinal807+15j
					; Ordinal807+25j
		push	[esp+4+arg_0]
		mov	ecx, esi
		call	Ordinal1419

loc_6B191EE8:				; CODE XREF: Ordinal807+35j
		pop	esi
		retn	4
Ordinal807	endp

; Exported entry 808.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal808
Ordinal808	proc near		; DATA XREF: .rdata:6B1B0F0Co
					; .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	Ordinal809
		test	eax, eax
		jnz	short loc_6B191F08
		push	offset aCcomserviceO_5 ; "CComService::OnRunDebug() : RegisterSta"...
		call	sub_6B18102E
		pop	ecx
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6B191F08:				; CODE XREF: Ordinal808+Aj
		mov	ecx, esi
		pop	esi
		jmp	Ordinal1420
Ordinal808	endp

; Exported entry 818.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal818
Ordinal818	proc near		; CODE XREF: Ordinal815+8p
					; Ordinal816+8p
					; DATA XREF: ...

ConsoleTitle	= byte ptr -24h
var_4		= dword	ptr -4

		sub	esp, 24h
		mov	eax, ___security_cookie
		mov	[esp+24h+var_4], eax
		push	20h		; nSize
		lea	eax, [esp+28h+ConsoleTitle]
		push	eax		; lpConsoleTitle
		call	ds:GetConsoleTitleA
		test	eax, eax
		ja	short loc_6B191F3B
		call	ds:GetLastError
		test	eax, eax
		jz	short loc_6B191F3B
		xor	eax, eax
		jmp	short loc_6B191F3E
; ---------------------------------------------------------------------------

loc_6B191F3B:				; CODE XREF: Ordinal818+1Bj
					; Ordinal818+25j
		xor	eax, eax
		inc	eax

loc_6B191F3E:				; CODE XREF: Ordinal818+29j
		mov	ecx, [esp+24h+var_4]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		add	esp, 24h
		retn
Ordinal818	endp

; Exported entry 822.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal822
Ordinal822	proc near		; DATA XREF: .rdata:off_6B1BF428o
		lea	eax, [ecx+3Ch]
		retn
Ordinal822	endp

; Exported entry 823.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal823
Ordinal823	proc near		; DATA XREF: .rdata:off_6B1BF428o
		xor	eax, eax
		cmp	dword ptr [ecx+38h], 0FFFFFFFFh
		setnz	al
		retn
Ordinal823	endp

; Exported entry 824.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal824
Ordinal824	proc near		; CODE XREF: Ordinal1236+Ep
					; DATA XREF: .rdata:6B1B16B8o ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	dword ptr [eax], 0
		jz	short locret_6B191F74
		test	byte ptr [eax+0Ch], 3
		jz	short locret_6B191F74
		cmp	word ptr [eax+6], 73h
		jnz	short locret_6B191F74
		mov	eax, [ecx]
		call	dword ptr [eax+2Ch]

locret_6B191F74:			; CODE XREF: Ordinal824+7j
					; Ordinal824+Dj ...
		retn	4
Ordinal824	endp

; Exported entry 825.
; Exported entry 826.
; Exported entry 827.
; Exported entry 828.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal827
Ordinal827	proc near		; DATA XREF: .rdata:6B1B16BCo
					; .rdata:6B1B16C0o ...
		retn	4		; ccL35_825
Ordinal827	endp			; ccL35_826
					; ccL35_827
; Exported entry 829.
; Exported entry 1415.
; Exported entry 1421.
; Exported entry 1626.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal829
Ordinal829	proc near		; DATA XREF: .rdata:6B1B0EF0o
					; .rdata:6B1B0EF4o ...
		xor	eax, eax	; ccL35_829
					; ccL35_1415
					; ccL35_1421
		retn
Ordinal829	endp

; Exported entry 830.
; Exported entry 831.
; Exported entry 832.
; Exported entry 833.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal830
Ordinal830	proc near		; DATA XREF: .rdata:6B1B16D0o
					; .rdata:6B1B16D4o ...
		mov	eax, [ecx]	; ccL35_830
					; ccL35_831
					; ccL35_832
		jmp	dword ptr [eax+2Ch]
Ordinal830	endp

; Exported entry 834.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal834
Ordinal834	proc near		; DATA XREF: .rdata:6B1B16B0o
					; .rdata:6B1B5180o ...
		push	offset aCconsoleInitin ; "CConsole::InitInstance()\n"
		call	sub_6B181006
		xor	eax, eax
		pop	ecx
		inc	eax
		retn
Ordinal834	endp

; Exported entry 835.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal835
Ordinal835	proc near		; DATA XREF: .rdata:6B1B16B4o
					; .rdata:6B1B5184o ...
		push	offset aCconsoleExitin ; "CConsole::ExitInstance()\n"
		call	sub_6B181006
		pop	ecx
		retn
Ordinal835	endp

; Exported entry 838.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal838
Ordinal838	proc near		; CODE XREF: Ordinal836+56p
					; DATA XREF: .rdata:off_6B1BF428o

Buffer		= _INPUT_RECORD	ptr -288h
NumberOfEvents	= dword	ptr -8
NumberOfEventsRead= dword ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 288h
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		jmp	loc_6B192043
; ---------------------------------------------------------------------------

loc_6B191FB0:				; CODE XREF: Ordinal838+B5j
		mov	eax, [ebp+NumberOfEvents]
		xor	ebx, ebx
		cmp	eax, ebx
		jz	loc_6B192079
		cmp	eax, 20h
		mov	[ebp+NumberOfEventsRead], ebx
		jb	short loc_6B191FC8
		push	20h
		pop	eax

loc_6B191FC8:				; CODE XREF: Ordinal838+26j
		lea	ecx, [ebp+NumberOfEventsRead]
		push	ecx		; lpNumberOfEventsRead
		push	eax		; nLength
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		push	dword ptr [esi+38h] ; hConsoleInput
		call	ds:ReadConsoleInputA
		test	eax, eax
		jz	loc_6B192066
		cmp	[ebp+NumberOfEventsRead], ebx
		jz	short loc_6B192066
		jbe	short loc_6B192043
		lea	edi, [ebp+Buffer.Event]

loc_6B191FF2:				; CODE XREF: Ordinal838+A4j
		movzx	eax, word ptr [edi-4]
		dec	eax
		jz	short loc_6B192032
		dec	eax
		jz	short loc_6B192028
		dec	eax
		dec	eax
		jz	short loc_6B19201E
		sub	eax, 4
		jz	short loc_6B192014
		sub	eax, 8
		jnz	short loc_6B19203A
		mov	eax, [esi]
		push	edi
		mov	ecx, esi
		call	dword ptr [eax+28h]
		jmp	short loc_6B19203A
; ---------------------------------------------------------------------------

loc_6B192014:				; CODE XREF: Ordinal838+66j
		mov	eax, [esi]
		push	edi
		mov	ecx, esi
		call	dword ptr [eax+24h]
		jmp	short loc_6B19203A
; ---------------------------------------------------------------------------

loc_6B19201E:				; CODE XREF: Ordinal838+61j
		mov	eax, [esi]
		push	edi
		mov	ecx, esi
		call	dword ptr [eax+20h]
		jmp	short loc_6B19203A
; ---------------------------------------------------------------------------

loc_6B192028:				; CODE XREF: Ordinal838+5Dj
		mov	eax, [esi]
		push	edi
		mov	ecx, esi
		call	dword ptr [eax+1Ch]
		jmp	short loc_6B19203A
; ---------------------------------------------------------------------------

loc_6B192032:				; CODE XREF: Ordinal838+5Aj
		mov	eax, [esi]
		push	edi
		mov	ecx, esi
		call	dword ptr [eax+18h]

loc_6B19203A:				; CODE XREF: Ordinal838+6Bj
					; Ordinal838+75j ...
		inc	ebx
		add	edi, 14h
		cmp	ebx, [ebp+NumberOfEventsRead]
		jb	short loc_6B191FF2

loc_6B192043:				; CODE XREF: Ordinal838+Ej
					; Ordinal838+4Dj
		lea	eax, [ebp+NumberOfEvents]
		push	eax		; lpNumberOfEvents
		push	dword ptr [esi+38h] ; hConsoleInput
		call	ds:GetNumberOfConsoleInputEvents
		test	eax, eax
		jnz	loc_6B191FB0
		call	ds:GetLastError
		push	eax
		push	offset aCconsoleProces ; "CConsole::ProcessEvents() : GetNumberOf"...
		jmp	short loc_6B192072
; ---------------------------------------------------------------------------

loc_6B192066:				; CODE XREF: Ordinal838+42j
					; Ordinal838+4Bj
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsoleProc_0 ; "CConsole::ProcessEvents() : ReadConsole"...

loc_6B192072:				; CODE XREF: Ordinal838+C7j
		call	sub_6B18102E
		pop	ecx
		pop	ecx

loc_6B192079:				; CODE XREF: Ordinal838+1Aj
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal838	endp


; =============== S U B	R O U T	I N E =======================================


; BOOL __stdcall HandlerRoutine(DWORD)
HandlerRoutine	proc near		; DATA XREF: Ordinal817+36o
					; Ordinal837+138o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		sub	eax, 0
		jz	short loc_6B1920CD
		dec	eax
		jz	short loc_6B1920C0
		dec	eax
		jz	short loc_6B1920B3
		sub	eax, 3
		jz	short loc_6B1920A6
		dec	eax
		jz	short loc_6B192099
		xor	eax, eax
		jmp	short locret_6B1920D8
; ---------------------------------------------------------------------------

loc_6B192099:				; CODE XREF: HandlerRoutine+15j
		mov	ecx, dword_6B1C1260
		mov	eax, [ecx]
		call	dword ptr [eax+3Ch]
		jmp	short locret_6B1920D8
; ---------------------------------------------------------------------------

loc_6B1920A6:				; CODE XREF: HandlerRoutine+12j
		mov	ecx, dword_6B1C1260
		mov	eax, [ecx]
		call	dword ptr [eax+38h]
		jmp	short locret_6B1920D8
; ---------------------------------------------------------------------------

loc_6B1920B3:				; CODE XREF: HandlerRoutine+Dj
		mov	ecx, dword_6B1C1260
		mov	eax, [ecx]
		call	dword ptr [eax+2Ch]
		jmp	short locret_6B1920D8
; ---------------------------------------------------------------------------

loc_6B1920C0:				; CODE XREF: HandlerRoutine+Aj
		mov	ecx, dword_6B1C1260
		mov	eax, [ecx]
		call	dword ptr [eax+34h]
		jmp	short locret_6B1920D8
; ---------------------------------------------------------------------------

loc_6B1920CD:				; CODE XREF: HandlerRoutine+7j
		mov	ecx, dword_6B1C1260
		mov	eax, [ecx]
		call	dword ptr [eax+30h]

locret_6B1920D8:			; CODE XREF: HandlerRoutine+19j
					; HandlerRoutine+26j ...
		retn	4
HandlerRoutine	endp

; Exported entry 819.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal819(char	*Src)
		public Ordinal819
Ordinal819	proc near		; CODE XREF: Ordinal854+38p
					; DATA XREF: .rdata:off_6B1BF428o

Src		= dword	ptr  4

		push	esi
		lea	esi, [ecx+84h]
		push	esi		; int
		push	[esp+8+Src]	; Src
		call	Ordinal1519
		test	al, al
		pop	ecx
		pop	ecx
		jnz	short loc_6B1920FE
		push	offset aCconsoleSettit ; "CConsole::SetTitle() : CStringConvert::"...
		call	sub_6B18102E
		jmp	short loc_6B19211C
; ---------------------------------------------------------------------------

loc_6B1920FE:				; CODE XREF: Ordinal819+15j
		push	dword ptr [esi]	; lpConsoleTitle
		call	ds:SetConsoleTitleA
		test	eax, eax
		jnz	short loc_6B192121
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsoleSett_0 ; "CConsole::SetTitle() : SetConsoleTitle("...
		call	sub_6B18102E
		pop	ecx

loc_6B19211C:				; CODE XREF: Ordinal819+21j
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B192124
; ---------------------------------------------------------------------------

loc_6B192121:				; CODE XREF: Ordinal819+2Dj
		xor	eax, eax
		inc	eax

loc_6B192124:				; CODE XREF: Ordinal819+44j
		pop	esi
		retn	4
Ordinal819	endp

; Exported entry 836.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal836
Ordinal836	proc near		; DATA XREF: .rdata:6B1B16ACo
					; .rdata:6B1B517Co ...

var_14		= byte ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	esi
		push	offset aCconsoleRun ; "CConsole::Run()\n"
		mov	esi, ecx
		call	sub_6B181006
		mov	eax, [esi+38h]
		pop	ecx
		lea	ecx, [esi+4]
		mov	[ebp+var_8], eax
		mov	eax, [ecx]
		call	dword ptr [eax+0Ch]
		push	0
		push	dword ptr [esi+2Ch]
		lea	ecx, [ebp+var_14]
		mov	[ebp+var_4], eax
		call	Ordinal1604

loc_6B19215A:				; CODE XREF: Ordinal836+5Bj
		mov	ecx, esi
		call	Ordinal1748
		test	eax, eax
		jnz	short loc_6B192186
		push	eax
		push	0FFFFFFFFh
		push	eax
		lea	eax, [ebp+var_8]
		push	eax
		push	2
		lea	ecx, [ebp+var_14]
		call	Ordinal1606
		sub	eax, 0
		jnz	short loc_6B192185
		mov	ecx, esi
		call	Ordinal838
		jmp	short loc_6B19215A
; ---------------------------------------------------------------------------

loc_6B192185:				; CODE XREF: Ordinal836+52j
		dec	eax

loc_6B192186:				; CODE XREF: Ordinal836+3Bj
		lea	ecx, [ebp+var_14]
		call	Ordinal1605
		xor	eax, eax
		pop	esi
		leave
		retn
Ordinal836	endp

; Exported entry 817.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal817
Ordinal817	proc near		; CODE XREF: Ordinal837+15Fp
					; Ordinal813+9p ...

var_4		= dword	ptr -4

		push	ecx
		push	ebx
		push	esi		; Args
		mov	ebx, ecx
		mov	eax, [ebx]
		push	2710h
		mov	[esp+10h+var_4], 1
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6B1921C1
		push	offset aCconsoleDestro ; "CConsole::Destroy() :	Terminate() == FA"...
		call	sub_6B18102E
		xor	esi, esi
		pop	ecx
		mov	[esp+0Ch+var_4], esi
		jmp	short loc_6B1921C3
; ---------------------------------------------------------------------------

loc_6B1921C1:				; CODE XREF: Ordinal817+19j
		xor	esi, esi

loc_6B1921C3:				; CODE XREF: Ordinal817+2Cj
		cmp	[ebx+58h], esi
		jz	short loc_6B1921EF
		push	esi		; Add
		push	offset HandlerRoutine ;	HandlerRoutine
		call	ds:SetConsoleCtrlHandler
		test	eax, eax
		jnz	short loc_6B1921EF
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsoleDest_0 ; "CConsole::Destroy() :	SetConsoleCtrlHan"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	[esp+0Ch+var_4], esi

loc_6B1921EF:				; CODE XREF: Ordinal817+33j
					; Ordinal817+43j
		cmp	[ebx+5Ch], esi
		mov	[ebx+58h], esi
		jz	short loc_6B192224
		mov	eax, [ebx+38h]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_6B192224
		push	dword ptr [ebx+60h] ; dwMode
		push	eax		; hConsoleHandle
		call	ds:SetConsoleMode
		test	eax, eax
		jnz	short loc_6B192224
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsoleDest_1 ; "CConsole::Destroy() :	FreeConsole() == "...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	[esp+0Ch+var_4], esi

loc_6B192224:				; CODE XREF: Ordinal817+62j
					; Ordinal817+6Aj ...
		cmp	[ebx+74h], esi
		push	ebp
		mov	[ebx+60h], esi
		mov	[ebx+5Ch], esi
		jnz	short loc_6B192238
		lea	ebp, [ebx+64h]
		cmp	[ebp+0], esi
		jz	short loc_6B192271

loc_6B192238:				; CODE XREF: Ordinal817+9Bj
		push	edi
		mov	edi, ds:_iob
		push	8
		lea	ebp, [ebx+64h]
		pop	ecx
		mov	esi, ebp
		push	1
		rep movsd
		call	ds:?sync_with_stdio@ios_base@std@@SA_N_N@Z ; std::ios_base::sync_with_stdio(bool)
		test	al, al
		pop	ecx
		pop	edi
		jnz	short loc_6B19226F
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsoleDest_2 ; "CConsole::Destroy() :	::std::cin.sync_w"...
		call	sub_6B18102E
		and	[esp+18h+var_4], 0
		pop	ecx
		pop	ecx

loc_6B19226F:				; CODE XREF: Ordinal817+C2j
		xor	esi, esi

loc_6B192271:				; CODE XREF: Ordinal817+A3j
		push	20h		; Size
		push	esi		; Val
		push	ebp		; Dst
		call	memset
		add	esp, 0Ch
		cmp	[ebx+54h], esi
		pop	ebp
		jz	short loc_6B1922A4
		call	ds:FreeConsole
		test	eax, eax
		jnz	short loc_6B1922A4
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsoleDest_1 ; "CConsole::Destroy() :	FreeConsole() == "...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	[esp+0Ch+var_4], esi

loc_6B1922A4:				; CODE XREF: Ordinal817+EEj
					; Ordinal817+F8j
		or	dword ptr [ebx+38h], 0FFFFFFFFh
		push	16h		; Size
		lea	eax, [ebx+3Ch]
		push	esi		; Val
		push	eax		; Dst
		mov	[ebx+54h], esi
		call	memset
		add	esp, 0Ch
		lea	ecx, [ebx+84h]
		call	sub_6B18175E
		mov	eax, [esp+0Ch+var_4]
		pop	esi
		pop	ebx
		pop	ecx
		retn
Ordinal817	endp

; Exported entry 837.

; =============== S U B	R O U T	I N E =======================================


; int __thiscall Ordinal837(LPVOID lpParameter,	int)
		public Ordinal837
Ordinal837	proc near		; CODE XREF: Ordinal815+85p
					; Ordinal816+64p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	ebx
		push	ebp
		push	esi
		mov	esi, ds:GetStdHandle
		push	0FFFFFFF6h	; nStdHandle
		mov	ebx, ecx
		xor	ebp, ebp
		call	esi ; GetStdHandle
		cmp	eax, 0FFFFFFFFh
		mov	[ebx+38h], eax
		jnz	short loc_6B1922F7
		call	ds:GetLastError
		push	eax
		push	offset aCconsoleCreate ; "CConsole::CreateEx() : GetStdHandle()	="...
		jmp	loc_6B192423
; ---------------------------------------------------------------------------

loc_6B1922F7:				; CODE XREF: Ordinal837+17j
		push	0FFFFFFF5h	; nStdHandle
		call	esi ; GetStdHandle
		lea	ecx, [ebx+3Ch]
		push	ecx		; lpConsoleScreenBufferInfo
		push	eax		; hConsoleOutput
		call	ds:GetConsoleScreenBufferInfo
		test	eax, eax
		jnz	short loc_6B19231B
		call	ds:GetLastError
		push	eax
		push	offset aCconsoleCrea_0 ; "CConsole::CreateEx() : GetConsoleScreen"...
		jmp	loc_6B192423
; ---------------------------------------------------------------------------

loc_6B19231B:				; CODE XREF: Ordinal837+3Bj
		cmp	[esp+0Ch+arg_0], ebp
		jz	short loc_6B19236B
		lea	esi, [ebx+60h]
		push	esi		; lpMode
		push	dword ptr [ebx+38h] ; hConsoleHandle
		call	ds:GetConsoleMode
		test	eax, eax
		jnz	short loc_6B192343
		call	ds:GetLastError
		push	eax
		push	offset aCconsoleCrea_1 ; "CConsole::CreateEx() : GetConsoleMode()"...
		jmp	loc_6B192423
; ---------------------------------------------------------------------------

loc_6B192343:				; CODE XREF: Ordinal837+63j
		mov	eax, [esi]
		or	eax, [esp+0Ch+arg_0]
		push	eax		; dwMode
		push	dword ptr [ebx+38h] ; hConsoleHandle
		call	ds:SetConsoleMode
		cmp	eax, ebp
		mov	[ebx+5Ch], eax
		jnz	short loc_6B19236B
		call	ds:GetLastError
		push	eax
		push	offset aCconsoleCrea_2 ; "CConsole::CreateEx() : SetConsoleMode()"...
		jmp	loc_6B192423
; ---------------------------------------------------------------------------

loc_6B19236B:				; CODE XREF: Ordinal837+52j
					; Ordinal837+8Bj
		push	4000h		; int
		push	dword ptr [ebx+38h] ; __int32
		call	ds:_open_osfhandle
		cmp	eax, 0FFFFFFFFh
		pop	ecx
		pop	ecx
		jnz	short loc_6B192391
		call	ds:GetLastError
		push	eax
		push	offset aCconsoleCrea_3 ; "CConsole::CreateEx() : _open_osfhandle("...
		jmp	loc_6B192423
; ---------------------------------------------------------------------------

loc_6B192391:				; CODE XREF: Ordinal837+B1j
		push	offset Format	; "r"
		push	eax		; FileHandle
		call	ds:_fdopen
		cmp	eax, ebp
		pop	ecx
		pop	ecx
		jnz	short loc_6B1923B1
		call	ds:GetLastError
		push	eax
		push	offset aCconsoleCrea_4 ; "CConsole::CreateEx() : _tfdopen() == NU"...
		jmp	short loc_6B192423
; ---------------------------------------------------------------------------

loc_6B1923B1:				; CODE XREF: Ordinal837+D4j
		mov	esi, ds:_iob
		push	edi
		push	8
		pop	ecx
		lea	edi, [ebx+64h]
		rep movsd
		mov	edi, ds:_iob
		push	8
		pop	ecx
		mov	esi, eax
		push	1
		rep movsd
		call	ds:?sync_with_stdio@ios_base@std@@SA_N_N@Z ; std::ios_base::sync_with_stdio(bool)
		test	al, al
		pop	ecx
		pop	edi
		jnz	short loc_6B1923E9
		call	ds:GetLastError
		push	eax
		push	offset aCconsoleCrea_5 ; "CConsole::CreateEx() : ::std::cin.sync_"...
		jmp	short loc_6B192423
; ---------------------------------------------------------------------------

loc_6B1923E9:				; CODE XREF: Ordinal837+10Cj
		push	ebp		; int
		push	ebp		; dwStackSize
		push	ebp		; lpThreadAttributes
		mov	ecx, ebx	; lpParameter
		call	Ordinal1736
		test	eax, eax
		jnz	short loc_6B192403
		push	offset aCconsoleCrea_6 ; "CConsole::CreateEx() : CThread::Create("...
		call	sub_6B18102E
		jmp	short loc_6B192429
; ---------------------------------------------------------------------------

loc_6B192403:				; CODE XREF: Ordinal837+128j
		push	1		; Add
		push	offset HandlerRoutine ;	HandlerRoutine
		call	ds:SetConsoleCtrlHandler
		cmp	eax, ebp
		mov	[ebx+58h], eax
		jnz	short loc_6B192439
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsoleCrea_7 ; "CConsole::CreateEx() : SetConsoleCtrlHa"...

loc_6B192423:				; CODE XREF: Ordinal837+25j
					; Ordinal837+49j ...
		call	sub_6B18102E
		pop	ecx

loc_6B192429:				; CODE XREF: Ordinal837+134j
		pop	ecx
		mov	ecx, ebx
		call	Ordinal817

loc_6B192431:				; CODE XREF: Ordinal837+16Fj
		pop	esi
		mov	eax, ebp
		pop	ebp
		pop	ebx
		retn	4
; ---------------------------------------------------------------------------

loc_6B192439:				; CODE XREF: Ordinal837+148j
		xor	ebp, ebp
		inc	ebp
		jmp	short loc_6B192431
Ordinal837	endp

; Exported entry 812.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal812
Ordinal812	proc near		; CODE XREF: Ordinal1231+3p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		push	edi
		mov	esi, ecx
		call	Ordinal1734
		or	dword ptr [esi+38h], 0FFFFFFFFh
		xor	edi, edi
		lea	ecx, [esi+84h]
		mov	dword ptr [esi], offset	off_6B1B16A0
		mov	[esi+54h], edi
		mov	[esi+58h], edi
		mov	[esi+5Ch], edi
		mov	[esi+60h], edi
		call	sub_6B181879
		lea	ecx, [esi+88h]
		call	Ordinal1179
		push	16h		; Size
		lea	eax, [esi+3Ch]
		push	edi		; Val
		push	eax		; Dst
		mov	dword_6B1C1260,	esi
		call	memset
		push	20h		; Size
		lea	eax, [esi+64h]
		push	edi		; Val
		push	eax		; Dst
		call	memset
		add	esp, 18h
		pop	edi
		mov	eax, esi
		pop	esi
		retn
Ordinal812	endp

; Exported entry 813.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal813
Ordinal813	proc near		; CODE XREF: sub_6B1925CA+3p
					; Ordinal1232+27j
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1B16A0
		call	Ordinal817
		and	dword_6B1C1260,	0
		lea	ecx, [esi+88h]
		call	Ordinal1180
		lea	ecx, [esi+84h]
		call	sub_6B1899B5
		mov	ecx, esi
		pop	esi
		jmp	Ordinal1735
Ordinal813	endp

; Exported entry 815.

; =============== S U B	R O U T	I N E =======================================


; int __thiscall Ordinal815(LPVOID lpParameter,	int)
		public Ordinal815
Ordinal815	proc near		; CODE XREF: Ordinal1383+1Fp
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal817
		call	Ordinal818
		test	eax, eax
		jz	short loc_6B192500
		call	ds:FreeConsole
		test	eax, eax
		jnz	short loc_6B192500
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsoleCrea_8 ; "CConsole::Create() : FreeConsole() ==	F"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B192559
; ---------------------------------------------------------------------------

loc_6B192500:				; CODE XREF: Ordinal815+Fj
					; Ordinal815+19j
		push	edi		; Args
		lea	edi, [esi+88h]
		mov	ecx, edi
		call	Ordinal1230
		test	al, al
		jnz	short loc_6B19252C
		mov	ecx, edi
		call	Ordinal1185
		test	al, al
		jnz	short loc_6B19252C
		push	offset aCconsoleCrea_9 ; "CConsole::Create() : m_Kernel.Create() "...
		call	sub_6B18102E

loc_6B192527:				; CODE XREF: Ordinal815+7Dj
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B192558
; ---------------------------------------------------------------------------

loc_6B19252C:				; CODE XREF: Ordinal815+42j
					; Ordinal815+4Dj
		call	ds:AllocConsole
		test	eax, eax
		mov	[esi+54h], eax
		jnz	short loc_6B19254D
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsoleCre_10 ; "CConsole::Create() : AllocConsole() == "...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B192527
; ---------------------------------------------------------------------------

loc_6B19254D:				; CODE XREF: Ordinal815+69j
		push	[esp+8+arg_0]	; int
		mov	ecx, esi	; lpParameter
		call	Ordinal837

loc_6B192558:				; CODE XREF: Ordinal815+5Cj
		pop	edi

loc_6B192559:				; CODE XREF: Ordinal815+30j
		pop	esi
		retn	4
Ordinal815	endp

; Exported entry 816.

; =============== S U B	R O U T	I N E =======================================


; int __thiscall Ordinal816(LPVOID lpParameter,	int, int)
		public Ordinal816
Ordinal816	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, ecx
		call	Ordinal817
		call	Ordinal818
		test	eax, eax
		jnz	short loc_6B1925BB
		push	1
		call	Ordinal1273
		test	al, al
		pop	ecx
		jnz	short loc_6B192586
		push	offset aCconsoleAttach ; "CConsole::Attach() : COSInfo::IsWinXP()"...

loc_6B19257F:				; CODE XREF: Ordinal816+38j
		call	sub_6B18102E
		jmp	short loc_6B1925B6
; ---------------------------------------------------------------------------

loc_6B192586:				; CODE XREF: Ordinal816+1Bj
		mov	eax, [esi+98h]
		test	eax, eax
		jnz	short loc_6B192597
		push	offset aCconsoleAtta_0 ; "CConsole::Attach() : m_Kernel.AttachCon"...
		jmp	short loc_6B19257F
; ---------------------------------------------------------------------------

loc_6B192597:				; CODE XREF: Ordinal816+31j
		push	[esp+4+arg_0]
		call	eax
		test	eax, eax
		mov	[esi+54h], eax
		jnz	short loc_6B1925BB
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsoleAtta_1 ; "CConsole::Attach() : AttachConsole() =="...
		call	sub_6B18102E
		pop	ecx

loc_6B1925B6:				; CODE XREF: Ordinal816+27j
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B1925C6
; ---------------------------------------------------------------------------

loc_6B1925BB:				; CODE XREF: Ordinal816+Fj
					; Ordinal816+45j
		push	[esp+4+arg_4]	; int
		mov	ecx, esi	; lpParameter
		call	Ordinal837

loc_6B1925C6:				; CODE XREF: Ordinal816+5Cj
		pop	esi
		retn	8
Ordinal816	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1925CA(void *, char)
sub_6B1925CA	proc near		; DATA XREF: .rdata:off_6B1B16A0o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal813
		test	[esp+4+arg_0], 1
		jz	short loc_6B1925E0
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1925E0:				; CODE XREF: sub_6B1925CA+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1925CA	endp

; Exported entry 820.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal820
Ordinal820	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_75 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		mov	[ebp+var_10], esp
		push	offset aCconsoleGettit ; "CConsole::GetTitle()"
		lea	ecx, [ebp+var_48]
		mov	[ebp+var_14], eax
		mov	[ebp+var_28], edi
		call	Ordinal1089
		and	[ebp+var_4], 0
		lea	esi, [edi+84h]
		mov	ecx, esi
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B18175E
		mov	ebx, 80h

loc_6B19262D:				; CODE XREF: Ordinal820+88j
		push	ebx
		mov	ecx, esi
		call	sub_6B1818C7
		push	ebx		; nSize
		push	eax		; lpConsoleTitle
		call	ds:GetConsoleTitleA
		test	eax, eax
		jnz	loc_6B19270B
		call	ds:GetLastError
		test	eax, eax
		jz	short loc_6B192663
		xor	eax, eax
		push	eax		; Args
		push	offset aCconsoleSett_1 ; "CConsole::SetTitle() : GetConsoleTitle("...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		jmp	loc_6B19270B
; ---------------------------------------------------------------------------

loc_6B192663:				; CODE XREF: Ordinal820+67j
		push	0FFFFFFFFh
		mov	ecx, esi
		add	ebx, ebx
		call	sub_6B185A33
		jmp	short loc_6B19262D
; ---------------------------------------------------------------------------

loc_6B192670:				; DATA XREF: .rdata:6B1BBEBCo
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B192708
		retn
; ---------------------------------------------------------------------------

loc_6B1926B3:				; DATA XREF: .rdata:6B1BBECCo
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	eax, [ebp+var_4C]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B192708
		retn
; ---------------------------------------------------------------------------

loc_6B192708:				; DATA XREF: Ordinal820+C7o
					; Ordinal820+11Co
		mov	edi, [ebp+var_28]

loc_6B19270B:				; CODE XREF: Ordinal820+59j
					; Ordinal820+78j
		mov	edi, [edi+84h]
		lea	ecx, [ebp+var_48]
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, edi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal820	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
; Exported entry 842.
; Exported entry 873.

		public Ordinal873
Ordinal873:				; DATA XREF: .rdata:off_6B1BF428o
		add	ecx, 4		; ccL35_842
		jmp	Ordinal1649
; Exported entry 855.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal855
Ordinal855	proc near		; CODE XREF: Ordinal850+6p
					; Ordinal1420+48p
					; DATA XREF: ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  4

		push	ecx
		cmp	[esp+4+arg_0], 0
		push	ebx
		push	ebp
		push	esi
		push	edi
		mov	ebx, ecx
		mov	[esp+14h+var_4], 1
		jnz	loc_6B192861
		cmp	dword ptr [ebx+28h], 0
		jnz	short loc_6B192763
		lea	ebp, [ebx+18h]
		cmp	dword ptr [ebp+0], 0
		jz	short loc_6B19279B

loc_6B192763:				; CODE XREF: Ordinal855+1Ej
		mov	edi, ds:_iob
		push	8
		lea	ebp, [ebx+18h]
		pop	ecx
		add	edi, 20h
		mov	esi, ebp
		push	1
		rep movsd
		call	ds:?sync_with_stdio@ios_base@std@@SA_N_N@Z ; std::ios_base::sync_with_stdio(bool)
		test	al, al
		pop	ecx
		jnz	short loc_6B19279B
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsolewindow ; "CConsoleWindow::RedirectIO() : ::std::c"...
		call	sub_6B18102E
		and	[esp+1Ch+var_4], 0
		pop	ecx
		pop	ecx

loc_6B19279B:				; CODE XREF: Ordinal855+27j
					; Ordinal855+47j
		push	20h		; Size
		push	0		; Val
		push	ebp		; Dst
		call	memset
		add	esp, 0Ch
		cmp	dword ptr [ebx+48h], 0
		jnz	short loc_6B1927B7
		lea	ebp, [ebx+38h]
		cmp	dword ptr [ebp+0], 0
		jz	short loc_6B1927EF

loc_6B1927B7:				; CODE XREF: Ordinal855+72j
		mov	edi, ds:_iob
		push	8
		lea	ebp, [ebx+38h]
		pop	ecx
		add	edi, 40h
		mov	esi, ebp
		push	1
		rep movsd
		call	ds:?sync_with_stdio@ios_base@std@@SA_N_N@Z ; std::ios_base::sync_with_stdio(bool)
		test	al, al
		pop	ecx
		jnz	short loc_6B1927EF
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsolewind_0 ; "CConsoleWindow::RedirectIO() : ::std::c"...
		call	sub_6B18102E
		and	[esp+1Ch+var_4], 0
		pop	ecx
		pop	ecx

loc_6B1927EF:				; CODE XREF: Ordinal855+7Bj
					; Ordinal855+9Bj
		push	20h		; Size
		push	0		; Val
		push	ebp		; Dst
		call	memset
		mov	eax, [ebx+10h]
		mov	edi, ds:SetStdHandle
		or	ebp, 0FFFFFFFFh
		add	esp, 0Ch
		cmp	eax, ebp
		mov	esi, offset aCconsolewind_1 ; "CConsoleWindow::Destroy() : SetStdHandl"...
		jz	short loc_6B19282E
		push	eax		; hHandle
		push	0FFFFFFF5h	; nStdHandle
		call	edi ; SetStdHandle
		test	eax, eax
		jnz	short loc_6B19282E
		call	ds:GetLastError
		push	eax		; Args
		push	esi		; Format
		call	sub_6B18102E
		and	[esp+1Ch+var_4], 0
		pop	ecx
		pop	ecx

loc_6B19282E:				; CODE XREF: Ordinal855+D5j
					; Ordinal855+DEj
		mov	eax, [ebx+14h]
		cmp	eax, ebp
		mov	[ebx+10h], ebp
		jz	short loc_6B192855
		push	eax		; hHandle
		push	0FFFFFFF4h	; nStdHandle
		call	edi ; SetStdHandle
		test	eax, eax
		jnz	short loc_6B192855
		call	ds:GetLastError
		push	eax		; Args
		push	esi		; Format
		call	sub_6B18102E
		and	[esp+1Ch+var_4], 0
		pop	ecx
		pop	ecx

loc_6B192855:				; CODE XREF: Ordinal855+FCj
					; Ordinal855+105j
		mov	eax, [esp+14h+var_4]
		mov	[ebx+14h], ebp
		jmp	loc_6B19296B
; ---------------------------------------------------------------------------

loc_6B192861:				; CODE XREF: Ordinal855+14j
		mov	edi, ds:GetStdHandle
		push	0FFFFFFF5h	; nStdHandle
		call	edi ; GetStdHandle
		lea	esi, [ebx+4]
		mov	ecx, esi
		mov	[ebx+10h], eax
		call	Ordinal1649
		mov	ebp, ds:SetStdHandle
		push	eax		; hHandle
		push	0FFFFFFF5h	; nStdHandle
		call	ebp ; SetStdHandle
		test	eax, eax
		jz	short loc_6B19289E
		push	0FFFFFFF4h	; nStdHandle
		call	edi ; GetStdHandle
		mov	ecx, esi
		mov	[ebx+14h], eax
		call	Ordinal1649
		push	eax		; hHandle
		push	0FFFFFFF4h	; nStdHandle
		call	ebp ; SetStdHandle
		test	eax, eax
		jnz	short loc_6B1928AF

loc_6B19289E:				; CODE XREF: Ordinal855+14Bj
		call	ds:GetLastError
		push	eax
		push	offset aCconsolewind_2 ; "CConsoleWindow::RedirectIO() : SetStdHa"...
		jmp	loc_6B192961
; ---------------------------------------------------------------------------

loc_6B1928AF:				; CODE XREF: Ordinal855+162j
		push	4001h		; int
		mov	ecx, esi
		call	Ordinal1649
		push	eax		; __int32
		call	ds:_open_osfhandle
		cmp	eax, 0FFFFFFFFh
		pop	ecx
		pop	ecx
		jnz	short loc_6B1928DA
		call	ds:GetLastError
		push	eax
		push	offset aCconsolewind_3 ; "CConsoleWindow::RedirectIO() : _open_os"...
		jmp	loc_6B192961
; ---------------------------------------------------------------------------

loc_6B1928DA:				; CODE XREF: Ordinal855+18Dj
		push	offset aW	; "w"
		push	eax		; FileHandle
		call	ds:_fdopen
		test	eax, eax
		pop	ecx
		pop	ecx
		jnz	short loc_6B1928FA
		call	ds:GetLastError
		push	eax
		push	offset aCconsolewind_4 ; "CConsoleWindow::RedirectIO() : _tfdopen"...
		jmp	short loc_6B192961
; ---------------------------------------------------------------------------

loc_6B1928FA:				; CODE XREF: Ordinal855+1B0j
		mov	esi, ds:_iob
		add	esi, 20h
		push	8
		pop	edx
		mov	ecx, edx
		lea	edi, [ebx+18h]
		rep movsd
		mov	edi, ds:_iob
		add	edi, 20h
		mov	ecx, edx
		mov	esi, eax
		rep movsd
		mov	esi, ds:_iob
		add	esi, 40h
		mov	ecx, edx
		lea	edi, [ebx+38h]
		rep movsd
		mov	edi, ds:_iob
		mov	ecx, edx
		mov	esi, eax
		add	edi, 40h
		push	1
		rep movsd
		call	ds:?sync_with_stdio@ios_base@std@@SA_N_N@Z ; std::ios_base::sync_with_stdio(bool)
		test	al, al
		pop	ecx
		jz	short loc_6B192955
		push	1
		call	ds:?sync_with_stdio@ios_base@std@@SA_N_N@Z ; std::ios_base::sync_with_stdio(bool)
		test	al, al
		pop	ecx
		jnz	short loc_6B192968

loc_6B192955:				; CODE XREF: Ordinal855+20Cj
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsolewindow ; "CConsoleWindow::RedirectIO() : ::std::c"...

loc_6B192961:				; CODE XREF: Ordinal855+170j
					; Ordinal855+19Bj ...
		call	sub_6B18102E
		pop	ecx
		pop	ecx

loc_6B192968:				; CODE XREF: Ordinal855+219j
		xor	eax, eax
		inc	eax

loc_6B19296B:				; CODE XREF: Ordinal855+122j
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		pop	ecx
		retn	4
Ordinal855	endp

; Exported entry 856.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal856
Ordinal856	proc near		; DATA XREF: .rdata:off_6B1BF428o

ConsoleScreenBufferInfo= _CONSOLE_SCREEN_BUFFER_INFO ptr -20h
NumberOfAttrsWritten= dword ptr	-8
dwWriteCoord	= COORD	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 20h
		push	esi
		lea	esi, [ecx+4]
		lea	eax, [ebp+ConsoleScreenBufferInfo]
		push	eax		; lpConsoleScreenBufferInfo
		mov	ecx, esi
		call	Ordinal1649
		push	eax		; hConsoleOutput
		call	ds:GetConsoleScreenBufferInfo
		test	eax, eax
		jnz	short loc_6B19299A
		push	offset aCconsolewind_5 ; "CConsoleWindow::Clear() : GetConsoleScr"...
		jmp	short loc_6B192A05
; ---------------------------------------------------------------------------

loc_6B19299A:				; CODE XREF: Ordinal856+1Ej
		movsx	ecx, [ebp+ConsoleScreenBufferInfo.dwSize.X]
		movsx	eax, [ebp+ConsoleScreenBufferInfo.dwSize.Y]
		and	[ebp+dwWriteCoord.X], 0
		imul	eax, ecx
		and	[ebp+dwWriteCoord.Y], 0
		lea	ecx, [ebp+NumberOfAttrsWritten]
		push	ecx		; lpNumberOfCharsWritten
		push	dword ptr [ebp+dwWriteCoord.X] ; dwWriteCoord
		mov	ecx, esi
		push	eax		; nLength
		push	20h		; cCharacter
		mov	[ebp+NumberOfAttrsWritten], eax
		call	Ordinal1649
		push	eax		; hConsoleOutput
		call	ds:FillConsoleOutputCharacterA
		test	eax, eax
		jz	short loc_6B192A00
		lea	eax, [ebp+NumberOfAttrsWritten]
		push	eax		; lpNumberOfAttrsWritten
		push	dword ptr [ebp+dwWriteCoord.X] ; dwWriteCoord
		mov	ecx, esi
		push	[ebp+NumberOfAttrsWritten] ; nLength
		push	dword ptr [ebp+ConsoleScreenBufferInfo.wAttributes] ; wAttribute
		call	Ordinal1649
		push	eax		; hConsoleOutput
		call	ds:FillConsoleOutputAttribute
		test	eax, eax
		jz	short loc_6B192A00
		push	dword ptr [ebp+dwWriteCoord.X] ; dwCursorPosition
		mov	ecx, esi
		call	Ordinal1649
		push	eax		; hConsoleOutput
		call	ds:SetConsoleCursorPosition
		jmp	short loc_6B192A0D
; ---------------------------------------------------------------------------

loc_6B192A00:				; CODE XREF: Ordinal856+59j
					; Ordinal856+78j
		push	offset aCconsolewind_6 ; "CConsoleWindow::Clear() : FillConsoleOu"...

loc_6B192A05:				; CODE XREF: Ordinal856+25j
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax

loc_6B192A0D:				; CODE XREF: Ordinal856+8Bj
		pop	esi
		leave
		retn
Ordinal856	endp

; Exported entry 857.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal857(LPCSTR NumberOfCharsWritten,	WORD wAttribute)
		public Ordinal857
Ordinal857	proc near		; DATA XREF: .rdata:off_6B1BF428o

ConsoleScreenBufferInfo= _CONSOLE_SCREEN_BUFFER_INFO ptr -18h
NumberOfCharsWritten= dword ptr	 8
wAttribute	= word ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	ebx
		mov	ebx, [ebp+NumberOfCharsWritten]
		test	ebx, ebx
		push	esi
		push	edi
		mov	edi, ecx
		jz	loc_6B192AB7
		mov	esi, ds:lstrlenA
		push	ebx		; lpString
		call	esi ; lstrlenA
		test	eax, eax
		jz	loc_6B192AB7
		lea	eax, [ebp+ConsoleScreenBufferInfo]
		add	edi, 4
		push	eax		; lpConsoleScreenBufferInfo
		mov	ecx, edi
		call	Ordinal1649
		push	eax		; hConsoleOutput
		call	ds:GetConsoleScreenBufferInfo
		test	eax, eax
		jnz	short loc_6B192A5E
		call	ds:GetLastError
		push	eax
		push	offset aCconsolewind_7 ; "CConsoleWindow::PrintLine() :	GetConsol"...
		jmp	short loc_6B192AAF
; ---------------------------------------------------------------------------

loc_6B192A5E:				; CODE XREF: Ordinal857+3Ej
		push	ebx		; lpString
		call	esi ; lstrlenA
		lea	ecx, [ebp+NumberOfCharsWritten]
		push	ecx		; lpNumberOfCharsWritten
		push	dword ptr [ebp+ConsoleScreenBufferInfo.dwCursorPosition.X] ; dwWriteCoord
		mov	ecx, edi
		push	eax		; nLength
		push	ebx		; lpCharacter
		mov	[ebp+NumberOfCharsWritten], eax
		call	Ordinal1649
		push	eax		; hConsoleOutput
		call	ds:WriteConsoleOutputCharacterA
		test	eax, eax
		jz	short loc_6B192AA3
		lea	eax, [ebp+NumberOfCharsWritten]
		push	eax		; lpNumberOfAttrsWritten
		push	dword ptr [ebp+ConsoleScreenBufferInfo.dwCursorPosition.X] ; dwWriteCoord
		mov	ecx, edi
		push	[ebp+NumberOfCharsWritten] ; nLength
		push	dword ptr [ebp+wAttribute] ; wAttribute
		call	Ordinal1649
		push	eax		; hConsoleOutput
		call	ds:FillConsoleOutputAttribute
		test	eax, eax
		jz	short loc_6B192AA3
		xor	eax, eax
		inc	eax
		jmp	short loc_6B192AC4
; ---------------------------------------------------------------------------

loc_6B192AA3:				; CODE XREF: Ordinal857+6Dj
					; Ordinal857+8Cj
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsolewind_8 ; "CConsoleWindow::PrintLine() :	WriteCons"...

loc_6B192AAF:				; CODE XREF: Ordinal857+4Cj
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B192AC1
; ---------------------------------------------------------------------------

loc_6B192AB7:				; CODE XREF: Ordinal857+10j
					; Ordinal857+21j
		push	offset aCconsolewind_9 ; "CConsoleWindow::PrintLine() :	szText =="...
		call	sub_6B18102E

loc_6B192AC1:				; CODE XREF: Ordinal857+A5j
		pop	ecx
		xor	eax, eax

loc_6B192AC4:				; CODE XREF: Ordinal857+91j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal857	endp

; Exported entry 862.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal862
Ordinal862	proc near		; DATA XREF: .rdata:off_6B1BF428o

ConsoleScreenBufferInfo= _CONSOLE_SCREEN_BUFFER_INFO ptr -18h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	esi
		mov	esi, [ebp+arg_0]
		and	dword ptr [esi], 0
		and	dword ptr [esi+4], 0
		lea	eax, [ebp+ConsoleScreenBufferInfo]
		push	eax		; lpConsoleScreenBufferInfo
		add	ecx, 4
		call	Ordinal1649
		push	eax		; hConsoleOutput
		call	ds:GetConsoleScreenBufferInfo
		test	eax, eax
		jnz	short loc_6B192B0A
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsolewin_10 ; "CConsoleWindow::GetPosition()	: GetCons"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B192B1A
; ---------------------------------------------------------------------------

loc_6B192B0A:				; CODE XREF: Ordinal862+26j
		movsx	eax, [ebp+ConsoleScreenBufferInfo.dwCursorPosition.X]
		mov	[esi], eax
		movsx	eax, [ebp+ConsoleScreenBufferInfo.dwCursorPosition.Y]
		mov	[esi+4], eax
		xor	eax, eax
		inc	eax

loc_6B192B1A:				; CODE XREF: Ordinal862+3Dj
		pop	esi
		leave
		retn	4
Ordinal862	endp

; Exported entry 863.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal863(COORD dwCursorPosition)
		public Ordinal863
Ordinal863	proc near		; DATA XREF: .rdata:off_6B1BF428o

dwCursorPosition= COORD	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, dword ptr [ebp+dwCursorPosition.X]
		mov	dx, [eax]
		mov	ax, [eax+4]
		mov	[ebp+dwCursorPosition.X], dx
		mov	[ebp+dwCursorPosition.Y], ax
		push	dword ptr [ebp+dwCursorPosition.X] ; dwCursorPosition
		add	ecx, 4
		call	Ordinal1649
		push	eax		; hConsoleOutput
		call	ds:SetConsoleCursorPosition
		pop	ebp
		retn	4
Ordinal863	endp

; Exported entry 864.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal864
Ordinal864	proc near		; DATA XREF: .rdata:off_6B1BF428o

ConsoleScreenBufferInfo= _CONSOLE_SCREEN_BUFFER_INFO ptr -18h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	esi
		mov	esi, [ebp+arg_0]
		and	dword ptr [esi], 0
		and	dword ptr [esi+4], 0
		lea	eax, [ebp+ConsoleScreenBufferInfo]
		push	eax		; lpConsoleScreenBufferInfo
		add	ecx, 4
		call	Ordinal1649
		push	eax		; hConsoleOutput
		call	ds:GetConsoleScreenBufferInfo
		test	eax, eax
		jnz	short loc_6B192B89
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsolewin_11 ; "CConsoleWindow::GetSize() : GetConsoleS"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B192B99
; ---------------------------------------------------------------------------

loc_6B192B89:				; CODE XREF: Ordinal864+26j
		movsx	eax, [ebp+ConsoleScreenBufferInfo.dwSize.X]
		mov	[esi], eax
		movsx	eax, [ebp+ConsoleScreenBufferInfo.dwSize.Y]
		mov	[esi+4], eax
		xor	eax, eax
		inc	eax

loc_6B192B99:				; CODE XREF: Ordinal864+3Dj
		pop	esi
		leave
		retn	4
Ordinal864	endp

; Exported entry 865.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal865
Ordinal865	proc near		; DATA XREF: .rdata:off_6B1BF428o

ConsoleScreenBufferInfo= _CONSOLE_SCREEN_BUFFER_INFO ptr -18h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	esi
		lea	esi, [ecx+4]
		lea	eax, [ebp+ConsoleScreenBufferInfo]
		push	eax		; lpConsoleScreenBufferInfo
		mov	ecx, esi
		call	Ordinal1649
		push	eax		; hConsoleOutput
		call	ds:GetConsoleScreenBufferInfo
		test	eax, eax
		jnz	short loc_6B192BD5
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsolewin_12 ; "CConsoleWindow::SetSize() : GetConsoleS"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B192BF8
; ---------------------------------------------------------------------------

loc_6B192BD5:				; CODE XREF: Ordinal865+1Ej
		mov	eax, [ebp+arg_0]
		mov	cx, [eax]
		mov	ax, [eax+4]
		mov	[ebp+ConsoleScreenBufferInfo.dwSize.X],	cx
		mov	[ebp+ConsoleScreenBufferInfo.dwSize.Y],	ax
		push	dword ptr [ebp+ConsoleScreenBufferInfo.dwSize.X] ; dwSize
		mov	ecx, esi
		call	Ordinal1649
		push	eax		; hConsoleOutput
		call	ds:SetConsoleScreenBufferSize

loc_6B192BF8:				; CODE XREF: Ordinal865+35j
		pop	esi
		leave
		retn	4
Ordinal865	endp

; Exported entry 866.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal866(WORD	wAttribute, COORD dwWriteCoord)
		public Ordinal866
Ordinal866	proc near		; DATA XREF: .rdata:off_6B1BF428o

ConsoleScreenBufferInfo= _CONSOLE_SCREEN_BUFFER_INFO ptr -1Ch
NumberOfAttrsWritten= dword ptr	-4
wAttribute	= word ptr  8
dwWriteCoord	= COORD	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		push	esi
		push	dword ptr [ebp+wAttribute] ; wAttributes
		lea	esi, [ecx+4]
		mov	ecx, esi
		call	Ordinal1649
		push	eax		; hConsoleOutput
		call	ds:SetConsoleTextAttribute
		test	eax, eax
		jnz	short loc_6B192C2A
		call	ds:GetLastError
		push	eax
		push	offset aCconsolewin_13 ; "CConsoleWindow::SetDefaultColors() : Se"...
		jmp	short loc_6B192C52
; ---------------------------------------------------------------------------

loc_6B192C2A:				; CODE XREF: Ordinal866+1Dj
		cmp	dword ptr [ebp+dwWriteCoord.X],	0
		jz	short loc_6B192C90
		lea	eax, [ebp+ConsoleScreenBufferInfo]
		push	eax		; lpConsoleScreenBufferInfo
		mov	ecx, esi
		call	Ordinal1649
		push	eax		; hConsoleOutput
		call	ds:GetConsoleScreenBufferInfo
		test	eax, eax
		jnz	short loc_6B192C5D
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsolewin_14 ; "CConsoleWindow::SetDefaultColors() : Ge"...

loc_6B192C52:				; CODE XREF: Ordinal866+2Bj
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B192C93
; ---------------------------------------------------------------------------

loc_6B192C5D:				; CODE XREF: Ordinal866+47j
		movsx	ecx, [ebp+ConsoleScreenBufferInfo.dwSize.X]
		movsx	eax, [ebp+ConsoleScreenBufferInfo.dwSize.Y]
		and	[ebp+dwWriteCoord.X], 0
		imul	eax, ecx
		and	[ebp+dwWriteCoord.Y], 0
		lea	ecx, [ebp+NumberOfAttrsWritten]
		push	ecx		; lpNumberOfAttrsWritten
		push	dword ptr [ebp+dwWriteCoord.X] ; dwWriteCoord
		mov	ecx, esi
		push	eax		; nLength
		push	dword ptr [ebp+wAttribute] ; wAttribute
		mov	[ebp+NumberOfAttrsWritten], eax
		call	Ordinal1649
		push	eax		; hConsoleOutput
		call	ds:FillConsoleOutputAttribute
		jmp	short loc_6B192C93
; ---------------------------------------------------------------------------

loc_6B192C90:				; CODE XREF: Ordinal866+31j
		xor	eax, eax
		inc	eax

loc_6B192C93:				; CODE XREF: Ordinal866+5Ej
					; Ordinal866+91j
		pop	esi
		leave
		retn	8
Ordinal866	endp

; Exported entry 867.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal867
Ordinal867	proc near		; DATA XREF: .rdata:off_6B1BF428o

ConsoleCursorInfo= _CONSOLE_CURSOR_INFO	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	esi
		lea	esi, [ecx+4]
		lea	eax, [ebp+ConsoleCursorInfo]
		push	eax		; lpConsoleCursorInfo
		mov	ecx, esi
		call	Ordinal1649
		push	eax		; hConsoleOutput
		call	ds:GetConsoleCursorInfo
		test	eax, eax
		jnz	short loc_6B192CCE
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsolewin_15 ; "CConsoleWindow::SetCursorVisible() : Ge"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B192CE6
; ---------------------------------------------------------------------------

loc_6B192CCE:				; CODE XREF: Ordinal867+1Dj
		mov	eax, [ebp+arg_0]
		mov	[ebp+ConsoleCursorInfo.bVisible], eax
		lea	eax, [ebp+ConsoleCursorInfo]
		push	eax		; lpConsoleCursorInfo
		mov	ecx, esi
		call	Ordinal1649
		push	eax		; hConsoleOutput
		call	ds:SetConsoleCursorInfo

loc_6B192CE6:				; CODE XREF: Ordinal867+34j
		pop	esi
		leave
		retn	4
Ordinal867	endp

; Exported entry 868.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal868
Ordinal868	proc near		; DATA XREF: .rdata:off_6B1BF428o

ConsoleCursorInfo= _CONSOLE_CURSOR_INFO	ptr -8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		lea	eax, [ebp+ConsoleCursorInfo]
		push	eax		; lpConsoleCursorInfo
		add	ecx, 4
		call	Ordinal1649
		push	eax		; hConsoleOutput
		call	ds:GetConsoleCursorInfo
		test	eax, eax
		jnz	short loc_6B192D1E
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsolewin_16 ; "CConsoleWindow::GetCursorVisible() : Ge"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		leave
		retn
; ---------------------------------------------------------------------------

loc_6B192D1E:				; CODE XREF: Ordinal868+1Aj
		mov	eax, [ebp+ConsoleCursorInfo.bVisible]
		leave
		retn
Ordinal868	endp

; Exported entry 871.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal871
Ordinal871	proc near		; CODE XREF: Ordinal851+16p
					; Ordinal852+1Cp
					; DATA XREF: ...
		add	ecx, 4
		call	Ordinal1649
		xor	ecx, ecx
		cmp	eax, 0FFFFFFFFh
		setnz	cl
		mov	eax, ecx
		retn
Ordinal871	endp

; Exported entry 872.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal872
Ordinal872	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		add	ecx, 4
		call	Ordinal1649
		push	0FFFFFFF5h	; nStdHandle
		mov	esi, eax
		call	ds:GetStdHandle
		sub	eax, esi
		neg	eax
		sbb	eax, eax
		inc	eax
		pop	esi
		retn
Ordinal872	endp

; Exported entry 850.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal850
Ordinal850	proc near		; CODE XREF: Ordinal851+3p
					; Ordinal853+10p ...
		push	esi
		push	edi
		push	0
		mov	esi, ecx
		call	Ordinal855
		lea	ecx, [esi+4]
		mov	edi, eax
		call	Ordinal1160
		mov	eax, edi
		pop	edi
		pop	esi
		retn
Ordinal850	endp

; Exported entry 851.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal851
Ordinal851	proc near		; CODE XREF: Ordinal843+17p
					; Ordinal1420+3Bp
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal850
		push	[esp+4+arg_0]
		lea	ecx, [esi+4]
		call	Ordinal1154
		mov	ecx, esi
		call	Ordinal871
		pop	esi
		retn	4
Ordinal851	endp

; Exported entry 853.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal853
Ordinal853	proc near		; CODE XREF: Ordinal852+Cp
					; Ordinal1420+8Ep
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		push	edi
		lea	ecx, [esi+4]
		call	Ordinal1157
		mov	ecx, esi
		mov	edi, eax
		call	Ordinal850
		mov	eax, edi
		pop	edi
		pop	esi
		retn
Ordinal853	endp

; Exported entry 843.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal843
Ordinal843	proc near		; CODE XREF: Ordinal840+4Cp
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		lea	ecx, [esi+4]
		call	Ordinal1649
		cmp	eax, [esp+4+arg_0]
		jz	short loc_6B192DD0
		push	[esp+4+arg_0]
		mov	ecx, esi
		call	Ordinal851
		test	eax, eax
		jnz	short loc_6B192DD0
		push	offset aCconsolewin_17 ; "CConsoleWindow::operator =() : Attach()"...
		call	sub_6B18102E
		pop	ecx

loc_6B192DD0:				; CODE XREF: Ordinal843+Fj
					; Ordinal843+1Ej
		mov	eax, esi
		pop	esi
		retn	4
Ordinal843	endp

; Exported entry 852.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal852
Ordinal852	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal850
		mov	ecx, [esp+4+arg_0]
		call	Ordinal853
		push	eax
		lea	ecx, [esi+4]
		call	Ordinal1154
		mov	ecx, esi
		call	Ordinal871
		pop	esi
		retn	4
Ordinal852	endp

; Exported entry 854.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal854
Ordinal854	proc near		; CODE XREF: Ordinal1236+51p
					; Ordinal1420+65p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		lea	ecx, [esi+4]
		call	Ordinal1649
		push	eax		; hConsoleOutput
		call	ds:SetConsoleActiveScreenBuffer
		test	eax, eax
		jnz	short loc_6B192E28
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsolewin_18 ; "CConsoleWindow::Activate() : SetConsole"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B192E3D
; ---------------------------------------------------------------------------

loc_6B192E28:				; CODE XREF: Ordinal854+14j
		mov	ecx, [esp+4+arg_0]
		test	ecx, ecx
		jz	short loc_6B192E3A
		push	dword ptr [esi+0Ch] ; Src
		call	Ordinal819
		jmp	short loc_6B192E3D
; ---------------------------------------------------------------------------

loc_6B192E3A:				; CODE XREF: Ordinal854+33j
		xor	eax, eax
		inc	eax

loc_6B192E3D:				; CODE XREF: Ordinal854+2Bj
					; Ordinal854+3Dj
		pop	esi
		retn	4
Ordinal854	endp

; Exported entry 839.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal839
Ordinal839	proc near		; CODE XREF: Ordinal1391+4Ap
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+4]
		mov	dword ptr [esi], offset	off_6B1B1E40
		call	Ordinal1149
		lea	ecx, [esi+0Ch]
		call	sub_6B181879
		or	dword ptr [esi+10h], 0FFFFFFFFh
		or	dword ptr [esi+14h], 0FFFFFFFFh
		lea	ecx, [esi+58h]
		call	Ordinal1615
		push	20h		; Size
		lea	eax, [esi+18h]
		push	0		; Val
		push	eax		; Dst
		call	memset
		push	20h		; Size
		lea	eax, [esi+38h]
		push	0		; Val
		push	eax		; Dst
		call	memset
		add	esp, 18h
		mov	eax, esi
		pop	esi
		retn
Ordinal839	endp

; Exported entry 840.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal840
Ordinal840	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		lea	ecx, [esi+4]
		mov	dword ptr [esi], offset	off_6B1B1E40
		call	Ordinal1149
		lea	ecx, [esi+0Ch]
		call	sub_6B181879
		or	dword ptr [esi+10h], 0FFFFFFFFh
		or	dword ptr [esi+14h], 0FFFFFFFFh
		lea	ecx, [esi+58h]
		call	Ordinal1615
		push	20h		; Size
		lea	eax, [esi+18h]
		push	0		; Val
		push	eax		; Dst
		call	memset
		push	20h		; Size
		lea	eax, [esi+38h]
		push	0		; Val
		push	eax		; Dst
		call	memset
		add	esp, 18h
		push	[esp+4+arg_0]
		mov	ecx, esi
		call	Ordinal843
		mov	eax, esi
		pop	esi
		retn	4
Ordinal840	endp

; Exported entry 841.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal841
Ordinal841	proc near		; CODE XREF: sub_6B192FBF+3p
					; Ordinal1392+5Cp
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1B1E40
		call	Ordinal850
		lea	ecx, [esi+58h]
		call	Ordinal1616
		lea	ecx, [esi+0Ch]
		call	sub_6B1899B5
		lea	ecx, [esi+4]
		pop	esi
		jmp	Ordinal1152
Ordinal841	endp

; Exported entry 859.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal859(char	*Format, va_list Args)
		public Ordinal859
Ordinal859	proc near		; CODE XREF: Ordinal858+21p
					; DATA XREF: .rdata:off_6B1BF428o

var_14		= byte ptr -14h
NumberOfCharsWritten= dword ptr	-8
lpBuffer	= dword	ptr -4
Format		= dword	ptr  8
Args		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	esi
		mov	esi, ecx
		push	edi
		lea	edi, [esi+4]
		mov	ecx, edi
		call	Ordinal1649
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6B192F29
		xor	eax, eax
		jmp	loc_6B192FB9
; ---------------------------------------------------------------------------

loc_6B192F29:				; CODE XREF: Ordinal859+17j
		push	0
		push	0FFFFFFFFh
		add	esi, 58h
		push	esi
		lea	ecx, [ebp+var_14]
		call	Ordinal1571
		lea	ecx, [ebp+lpBuffer]
		call	sub_6B181879
		push	[ebp+Args]	; Args
		lea	eax, [ebp+lpBuffer]
		push	[ebp+Format]	; Format
		push	eax		; int
		call	Ordinal1529
		add	esp, 0Ch
		test	al, al
		jnz	short loc_6B192F66
		push	offset aCconsolewin_19 ; "CConsoleWindow::PrintV() : CStringConve"...
		call	sub_6B18102E

loc_6B192F61:				; CODE XREF: Ordinal859+93j
		pop	ecx
		xor	esi, esi
		jmp	short loc_6B192FA7
; ---------------------------------------------------------------------------

loc_6B192F66:				; CODE XREF: Ordinal859+4Cj
		mov	eax, [ebp+lpBuffer]
		and	[ebp+NumberOfCharsWritten], 0
		mov	ecx, [eax-0Ch]
		push	0		; lpReserved
		lea	edx, [ebp+NumberOfCharsWritten]
		push	edx		; lpNumberOfCharsWritten
		push	ecx		; nNumberOfCharsToWrite
		push	eax		; lpBuffer
		mov	ecx, edi
		call	Ordinal1649
		push	eax		; hConsoleOutput
		call	ds:WriteConsoleA
		test	eax, eax
		jnz	short loc_6B192F9E
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsolewin_20 ; "CConsoleWindow::PrintV() : WriteConsole"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B192F61
; ---------------------------------------------------------------------------

loc_6B192F9E:				; CODE XREF: Ordinal859+7Fj
		xor	eax, eax
		cmp	eax, [ebp+NumberOfCharsWritten]
		sbb	esi, esi
		neg	esi

loc_6B192FA7:				; CODE XREF: Ordinal859+5Bj
		lea	ecx, [ebp+lpBuffer]
		call	sub_6B1899B5
		lea	ecx, [ebp+var_14]
		call	Ordinal1573
		mov	eax, esi

loc_6B192FB9:				; CODE XREF: Ordinal859+1Bj
		pop	edi
		pop	esi
		leave
		retn	8
Ordinal859	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B192FBF(void *, char)
sub_6B192FBF	proc near		; DATA XREF: .rdata:off_6B1B1E40o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal841
		test	[esp+4+arg_0], 1
		jz	short loc_6B192FD5
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B192FD5:				; CODE XREF: sub_6B192FBF+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B192FBF	endp

; Exported entry 858.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal858(int, char *Format, char Args)
		public Ordinal858
Ordinal858	proc near		; CODE XREF: Ordinal844+Dp
					; Ordinal845+12p ...

arg_0		= dword	ptr  4
Format		= dword	ptr  8
Args		= byte ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		lea	ecx, [esi+4]
		call	Ordinal1649
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6B192FF1
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6B192FF1:				; CODE XREF: Ordinal858+10j
		lea	eax, [esp+4+Args]
		push	eax		; Args
		push	[esp+8+Format]	; Format
		mov	ecx, esi
		call	Ordinal859
		pop	esi
		retn
Ordinal858	endp

; Exported entry 844.

; =============== S U B	R O U T	I N E =======================================


; int __thiscall Ordinal844(int, char Args)
		public Ordinal844
Ordinal844	proc near		; DATA XREF: .rdata:off_6B1BF428o

Args		= byte ptr  4

		push	esi
		push	dword ptr [esp+4+Args] ; Args
		mov	esi, ecx
		push	offset aLd	; "%ld"
		push	esi		; int
		call	Ordinal858
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		retn	4
Ordinal844	endp

; Exported entry 845.

; =============== S U B	R O U T	I N E =======================================


; int __thiscall Ordinal845(char Args, double)
		public Ordinal845
Ordinal845	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= qword	ptr -0Ch
arg_0		= qword	ptr  4

		fld	[esp+arg_0]
		push	esi
		push	ecx
		push	ecx		; Args
		fstp	[esp+0Ch+var_C]
		mov	esi, ecx
		push	offset asc_6B1B03A4 ; "%f"
		push	esi		; int
		call	Ordinal858
		add	esp, 10h
		mov	eax, esi
		pop	esi
		retn	8
Ordinal845	endp

; Exported entry 846.

; =============== S U B	R O U T	I N E =======================================


; int __thiscall Ordinal846(int, char Args)
		public Ordinal846
Ordinal846	proc near		; DATA XREF: .rdata:off_6B1BF428o

Args		= byte ptr  4

		push	esi
		push	dword ptr [esp+4+Args] ; Args
		mov	esi, ecx
		push	offset aLu	; "%lu"
		push	esi		; int
		call	Ordinal858
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		retn	4
Ordinal846	endp

; Exported entry 847.

; =============== S U B	R O U T	I N E =======================================


; int __thiscall Ordinal847(int, char)
		public Ordinal847
Ordinal847	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= byte ptr  4

		movsx	eax, [esp+arg_0]
		push	esi
		push	eax		; Args
		mov	esi, ecx
		push	offset aC	; "%c"
		push	esi		; int
		call	Ordinal858
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		retn	4
Ordinal847	endp

; Exported entry 848.

; =============== S U B	R O U T	I N E =======================================


; int __thiscall Ordinal848(int, char Args)
		public Ordinal848
Ordinal848	proc near		; DATA XREF: .rdata:off_6B1BF428o

Args		= byte ptr  4

		push	esi
		push	dword ptr [esp+4+Args] ; Args
		mov	esi, ecx
		push	offset aS	; "%s"
		push	esi		; int
		call	Ordinal858
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		retn	4
Ordinal848	endp

; Exported entry 861.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal861(char	*Format, va_list Args)
		public Ordinal861
Ordinal861	proc near		; CODE XREF: Ordinal860+21p
					; DATA XREF: .rdata:off_6B1BF428o

var_24		= byte ptr -24h
NumberOfCharsWritten= dword ptr	-18h
lpBuffer	= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Format		= dword	ptr  8
Args		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_76 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 18h
		push	ebx
		push	esi
		mov	esi, ecx
		push	edi
		lea	ebx, [esi+4]
		mov	ecx, ebx
		mov	[ebp+var_10], esp
		call	Ordinal1649
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6B1930B9
		xor	eax, eax
		jmp	short loc_6B193131
; ---------------------------------------------------------------------------

loc_6B1930B9:				; CODE XREF: Ordinal861+22j
		xor	edi, edi
		push	edi
		push	0FFFFFFFFh
		add	esi, 58h
		push	esi
		lea	ecx, [ebp+var_24]
		call	Ordinal1571
		lea	ecx, [ebp+lpBuffer]
		mov	[ebp+var_4], edi
		call	sub_6B181879
		push	[ebp+Args]	; Args
		lea	ecx, [ebp+lpBuffer]
		push	[ebp+Format]	; Format
		mov	byte ptr [ebp+var_4], 2
		call	sub_6B18F02F
		mov	esi, [ebp+lpBuffer]
		push	edi		; lpReserved
		lea	ecx, [ebp+NumberOfCharsWritten]
		push	ecx		; lpNumberOfCharsWritten
		mov	[ebp+NumberOfCharsWritten], edi
		mov	eax, [esi-0Ch]
		push	eax		; nNumberOfCharsToWrite
		push	esi		; lpBuffer
		mov	ecx, ebx
		call	Ordinal1649
		push	eax		; hConsoleOutput
		call	ds:WriteConsoleA
		test	eax, eax
		jz	short loc_6B19311F
		xor	eax, eax
		cmp	eax, [ebp+NumberOfCharsWritten]
		sbb	edi, edi
		neg	edi
		jmp	short loc_6B19311F
; ---------------------------------------------------------------------------

loc_6B193114:				; DATA XREF: .rdata:6B1BBF2Co
		mov	eax, offset loc_6B19311A
		retn
; ---------------------------------------------------------------------------

loc_6B19311A:				; DATA XREF: Ordinal861:loc_6B193114o
		mov	esi, [ebp+lpBuffer]
		xor	edi, edi

loc_6B19311F:				; CODE XREF: Ordinal861+76j
					; Ordinal861+81j
		lea	ecx, [esi-10h]
		call	sub_6B18163D
		lea	ecx, [ebp+var_24]
		call	Ordinal1573
		mov	eax, edi

loc_6B193131:				; CODE XREF: Ordinal861+26j
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn	8
Ordinal861	endp ; sp-analysis failed

; Exported entry 860.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal860(int, char *Format, char Args)
		public Ordinal860
Ordinal860	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
Format		= dword	ptr  8
Args		= byte ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		lea	ecx, [esi+4]
		call	Ordinal1649
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6B193158
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6B193158:				; CODE XREF: Ordinal860+10j
		lea	eax, [esp+4+Args]
		push	eax		; Args
		push	[esp+8+Format]	; Format
		mov	ecx, esi
		call	Ordinal861
		pop	esi
		retn
Ordinal860	endp

; Exported entry 869.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal869(char	*Src)
		public Ordinal869
Ordinal869	proc near		; CODE XREF: Ordinal849+5Fp
					; Ordinal1420+59p
					; DATA XREF: ...

var_44		= byte ptr -44h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8

		mov	eax, offset unknown_libname_77 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 40h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		mov	esi, ecx
		push	offset aCconsolewin_21 ; "CConsoleWindow::SetTitle"
		lea	ecx, [ebp+var_44]
		mov	[ebp+var_14], eax
		call	Ordinal1089
		and	[ebp+var_4], 0
		push	[ebp+Src]	; Src
		lea	ecx, [esi+0Ch]
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B181EA9

loc_6B1931A7:				; DATA XREF: sub_6B1931D9+3Do
					; sub_6B19321C+4Fo
		lea	ecx, [ebp+var_44]
		call	Ordinal1635
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		lea	ecx, [ebp+var_44]
		inc	esi
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal869	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1931D9	proc near		; DATA XREF: .rdata:6B1BBF84o
		push	13h
		lea	ecx, [ebp-44h]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-44h]
		call	Ordinal1101
		mov	ecx, [ebp-4Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal1103
		lea	ecx, [ebp-44h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1931A7
		retn
sub_6B1931D9	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19321C	proc near		; DATA XREF: .rdata:6B1BBF94o
		push	15h
		lea	ecx, [ebp-44h]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-44h]
		call	Ordinal1101
		mov	eax, [ebp-48h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal1103
		lea	ecx, [ebp-44h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1931A7
		retn
sub_6B19321C	endp

; Exported entry 849.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal849(int,	int, DWORD Src)
		public Ordinal849
Ordinal849	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
Src		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		push	esi
		mov	esi, ecx
		push	edi
		mov	[ebp+var_4], esi
		call	Ordinal850
		xor	ebx, ebx
		push	ebx		; lpScreenBufferData
		push	1		; dwFlags
		push	ebx		; lpSecurityAttributes
		push	3		; dwShareMode
		push	0C0000000h	; dwDesiredAccess
		lea	edi, [esi+4]
		call	ds:CreateConsoleScreenBuffer
		push	eax
		mov	ecx, edi
		call	Ordinal1154
		mov	ecx, edi
		call	Ordinal1649
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6B1932C6
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsolewin_22 ; "CConsoleWindow::Create() : CreateConsol"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	loc_6B1933C7
; ---------------------------------------------------------------------------

loc_6B1932C6:				; CODE XREF: Ordinal849+39j
		cmp	[ebp+Src], ebx
		jz	short loc_6B1932E8
		push	[ebp+Src]	; Src
		mov	ecx, esi
		call	Ordinal869
		test	eax, eax
		jnz	short loc_6B1932E8
		push	offset aCconsolewin_23 ; "CConsoleWindow::Create() : SetTitle()	="...
		call	sub_6B18102E
		jmp	loc_6B1933BC
; ---------------------------------------------------------------------------

loc_6B1932E8:				; CODE XREF: Ordinal849+58j
					; Ordinal849+66j
		cmp	[ebp+arg_0], ebx
		jz	short loc_6B19333E
		lea	eax, [ebp+Src]
		push	eax		; lpMode
		mov	ecx, edi
		mov	[ebp+Src], ebx
		call	Ordinal1649
		push	eax		; hConsoleHandle
		call	ds:GetConsoleMode
		test	eax, eax
		jnz	short loc_6B193317
		call	ds:GetLastError
		push	eax
		push	offset aCconsolewin_24 ; "CConsoleWindow::Create() : GetConsoleMo"...
		jmp	loc_6B1933B6
; ---------------------------------------------------------------------------

loc_6B193317:				; CODE XREF: Ordinal849+93j
		mov	eax, [ebp+Src]
		or	eax, [ebp+arg_0]
		mov	ecx, edi
		push	eax		; dwMode
		call	Ordinal1649
		push	eax		; hConsoleHandle
		call	ds:SetConsoleMode
		test	eax, eax
		jnz	short loc_6B19333E
		call	ds:GetLastError
		push	eax
		push	offset aCconsolewin_25 ; "CConsoleWindow::Create() : SetConsoleMo"...
		jmp	short loc_6B1933B6
; ---------------------------------------------------------------------------

loc_6B19333E:				; CODE XREF: Ordinal849+7Aj
					; Ordinal849+BDj
		mov	esi, [ebp+arg_4]
		cmp	esi, ebx
		jz	loc_6B1933CE
		push	dword ptr [esi]	; dwSize
		mov	ecx, edi
		call	Ordinal1649
		push	eax		; hConsoleOutput
		call	ds:SetConsoleScreenBufferSize
		test	eax, eax
		jnz	short loc_6B19336B
		call	ds:GetLastError
		push	eax
		push	offset aCconsolewin_26 ; "CConsoleWindow::Create() : SetConsoleSc"...
		jmp	short loc_6B1933B6
; ---------------------------------------------------------------------------

loc_6B19336B:				; CODE XREF: Ordinal849+EAj
		xor	eax, eax
		mov	ax, [esi+8]
		mov	ecx, edi
		push	eax		; wAttributes
		call	Ordinal1649
		push	eax		; hConsoleOutput
		call	ds:SetConsoleTextAttribute
		test	eax, eax
		jnz	short loc_6B193392
		call	ds:GetLastError
		push	eax
		push	offset aCconsolewin_27 ; "CConsoleWindow::Create() : SetConsoleTe"...
		jmp	short loc_6B1933B6
; ---------------------------------------------------------------------------

loc_6B193392:				; CODE XREF: Ordinal849+111j
		add	esi, 0Ah
		push	esi		; lpConsoleWindow
		push	1		; bAbsolute
		mov	ecx, edi
		call	Ordinal1649
		push	eax		; hConsoleOutput
		call	ds:SetConsoleWindowInfo
		test	eax, eax
		jnz	short loc_6B1933CE
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsolewin_28 ; "CConsoleWindow::Create() : SetConsoleWi"...

loc_6B1933B6:				; CODE XREF: Ordinal849+A1j
					; Ordinal849+CBj ...
		call	sub_6B18102E
		pop	ecx

loc_6B1933BC:				; CODE XREF: Ordinal849+72j
		pop	ecx
		mov	ecx, [ebp+var_4]
		call	Ordinal850

loc_6B1933C5:				; CODE XREF: Ordinal849+160j
		mov	eax, ebx

loc_6B1933C7:				; CODE XREF: Ordinal849+50j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	0Ch
; ---------------------------------------------------------------------------

loc_6B1933CE:				; CODE XREF: Ordinal849+D2j
					; Ordinal849+137j
		xor	ebx, ebx
		inc	ebx
		jmp	short loc_6B1933C5
Ordinal849	endp

; Exported entry 875.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal875
Ordinal875	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	dword ptr [ecx], offset	off_6B1B20C8
		retn
Ordinal875	endp

; Exported entry 878.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal878
Ordinal878	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+14h]
		and	eax, 0Fh
		retn
Ordinal878	endp

; Exported entry 879.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal879
Ordinal879	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+14h]
		shr	eax, 4
		and	eax, 0Fh
		retn
Ordinal879	endp

; Exported entry 880.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal880
Ordinal880	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+14h]
		shr	eax, 8
		and	eax, 0Fh
		retn
Ordinal880	endp

; Exported entry 881.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal881
Ordinal881	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+14h]
		shr	eax, 0Ch
		and	eax, 3
		retn
Ordinal881	endp

; Exported entry 882.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal882
Ordinal882	proc near		; DATA XREF: .rdata:off_6B1BF428o
		xor	eax, eax
		mov	al, [ecx+16h]
		and	eax, 0Fh
		retn
Ordinal882	endp

; Exported entry 883.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal883
Ordinal883	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+14h]
		shr	eax, 14h
		retn
Ordinal883	endp

; Exported entry 884.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal884
Ordinal884	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+18h]
		shr	eax, 12h
		and	eax, 1
		retn
Ordinal884	endp

; Exported entry 885.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal885
Ordinal885	proc near		; DATA XREF: .rdata:off_6B1BF428o
		lea	eax, [ecx+3Dh]
		retn
Ordinal885	endp

; Exported entry 887.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal887
Ordinal887	proc near		; CODE XREF: Ordinal874+A0p
					; DATA XREF: .rdata:off_6B1BF428o

var_1C		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h

		push	0Ch
		push	offset stru_6B1B2118
		call	__SEH_prolog
		mov	esi, ecx
		xor	eax, eax
		cmp	[esi+2Ch], eax
		jz	short loc_6B19346E
		cmp	[esi+28h], eax
		jz	short loc_6B19346E
		mov	[esi+14h], eax
		xor	edi, edi
		inc	edi
		mov	[ebp+ms_exc.disabled], eax
		mov	eax, 1
		cpuid
		mov	[ebp+var_1C], eax
		mov	eax, [ebp+var_1C]
		mov	[esi+14h], eax
		jmp	short loc_6B193466
; ---------------------------------------------------------------------------

loc_6B193452:				; DATA XREF: .rdata:stru_6B1B2118o
		xor	eax, eax	; Exception filter 0 for function 6B19341D
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_6B193456:				; DATA XREF: .rdata:stru_6B1B2118o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 6B19341D
		push	offset aCcpuinfoLoadsi ; "CCPUInfo::LoadSignature() : __except (E"...
		call	sub_6B18102E
		pop	ecx
		xor	edi, edi

loc_6B193466:				; CODE XREF: Ordinal887+33j
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		mov	eax, edi
		jmp	short loc_6B193470
; ---------------------------------------------------------------------------

loc_6B19346E:				; CODE XREF: Ordinal887+13j
					; Ordinal887+18j
		xor	eax, eax

loc_6B193470:				; CODE XREF: Ordinal887+4Fj
		call	__SEH_epilog
		retn
Ordinal887	endp

; Exported entry 888.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal888
Ordinal888	proc near		; CODE XREF: Ordinal874+A7p
					; DATA XREF: .rdata:off_6B1BF428o

var_1C		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h

		push	0Ch
		push	offset stru_6B1B2170
		call	__SEH_prolog
		mov	esi, ecx
		xor	eax, eax
		cmp	[esi+2Ch], eax
		jz	short loc_6B1934C7
		cmp	[esi+28h], eax
		jz	short loc_6B1934C7
		mov	[esi+18h], eax
		xor	edi, edi
		inc	edi
		mov	[ebp+ms_exc.disabled], eax
		mov	eax, 1
		cpuid
		mov	[ebp+var_1C], edx
		mov	eax, [ebp+var_1C]
		mov	[esi+18h], eax
		jmp	short loc_6B1934BF
; ---------------------------------------------------------------------------

loc_6B1934AB:				; DATA XREF: .rdata:stru_6B1B2170o
		xor	eax, eax	; Exception filter 0 for function 6B193476
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_6B1934AF:				; DATA XREF: .rdata:stru_6B1B2170o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 6B193476
		push	offset aCcpuinfoLoadfe ; "CCPUInfo::LoadFeatures() : __except (EX"...
		call	sub_6B18102E
		pop	ecx
		xor	edi, edi

loc_6B1934BF:				; CODE XREF: Ordinal888+33j
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		mov	eax, edi
		jmp	short loc_6B1934C9
; ---------------------------------------------------------------------------

loc_6B1934C7:				; CODE XREF: Ordinal888+13j
					; Ordinal888+18j
		xor	eax, eax

loc_6B1934C9:				; CODE XREF: Ordinal888+4Fj
		call	__SEH_epilog
		retn
Ordinal888	endp

; Exported entry 889.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal889
Ordinal889	proc near		; CODE XREF: Ordinal874+B8p
					; DATA XREF: .rdata:off_6B1BF428o

Src		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h

		push	1Ch
		push	offset stru_6B1B21E0
		call	__SEH_prolog
		mov	esi, ecx
		mov	[ebp+var_20], esi
		xor	ebx, ebx
		cmp	[esi+2Ch], ebx
		jz	loc_6B19359F
		cmp	[esi+28h], ebx
		jz	loc_6B19359F
		mov	eax, [esi+18h]
		shr	eax, 12h
		test	al, 1
		jz	loc_6B19359F
		lea	edi, [esi+1Ch]
		push	0Ch		; Size
		push	ebx		; Val
		push	edi		; Dst
		call	memset
		add	esp, 0Ch
		mov	[ebp+var_1C], 1
		mov	[ebp+ms_exc.disabled], ebx
		mov	eax, 1
		cpuid
		mov	[ebp+Src], eax
		mov	eax, 3
		cpuid
		mov	[ebp+var_28], edx
		mov	[ebp+var_24], ecx
		push	0Ch		; Size
		lea	eax, [ebp+Src]
		push	eax		; Src
		push	edi		; Dst
		call	memcpy
		add	esp, 0Ch
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		jmp	short loc_6B193564
; ---------------------------------------------------------------------------

loc_6B193547:				; DATA XREF: .rdata:stru_6B1B21E0o
		xor	eax, eax	; Exception filter 0 for function 6B1934CF
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_6B19354B:				; DATA XREF: .rdata:stru_6B1B21E0o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 6B1934CF
		push	offset aCcpuinfoLoadse ; "CCPUInfo::LoadSerial() : __except (EXCE"...
		call	sub_6B18102E
		pop	ecx
		and	[ebp+var_1C], 0
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		mov	esi, [ebp+var_20]

loc_6B193564:				; CODE XREF: Ordinal889+76j
		cmp	[ebp+var_1C], 0
		jz	short loc_6B19359A
		movzx	eax, word ptr [esi+24h]
		push	eax
		movzx	eax, word ptr [esi+26h]
		push	eax
		movzx	eax, word ptr [esi+20h]
		push	eax
		movzx	eax, word ptr [esi+22h]
		push	eax
		movzx	eax, word ptr [esi+1Ch]
		push	eax
		movzx	eax, word ptr [esi+1Eh]
		push	eax
		push	offset a04x04x04x04x04 ; "%04X-%04X-%04X-%04X-%04X-%04X"
		add	esi, 3Dh
		push	esi		; LPSTR
		call	ds:wsprintfA
		add	esp, 20h

loc_6B19359A:				; CODE XREF: Ordinal889+99j
		mov	eax, [ebp+var_1C]
		jmp	short loc_6B1935A1
; ---------------------------------------------------------------------------

loc_6B19359F:				; CODE XREF: Ordinal889+16j
					; Ordinal889+1Fj ...
		xor	eax, eax

loc_6B1935A1:				; CODE XREF: Ordinal889+CEj
		call	__SEH_epilog
		retn
Ordinal889	endp

; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_4. PRESS KEYPAD "+" TO EXPAND]
; Exported entry 890.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal890(char *Src, LPSTR lpString1)
		public Ordinal890
Ordinal890	proc near		; CODE XREF: Ordinal886+8Ep
					; DATA XREF: .rdata:off_6B1BF428o

lpString2	= dword	ptr -4
Src		= dword	ptr  8
lpString1	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		lea	ecx, [ebp+lpString2]
		call	sub_6B181879
		lea	eax, [ebp+lpString2]
		push	eax		; int
		push	[ebp+Src]	; Src
		call	Ordinal1519
		test	al, al
		pop	ecx
		pop	ecx
		jnz	short loc_6B1935E7
		xor	bl, bl
		jmp	short loc_6B1935F5
; ---------------------------------------------------------------------------

loc_6B1935E7:				; CODE XREF: Ordinal890+1Dj
		push	[ebp+lpString2]	; lpString2
		push	[ebp+lpString1]	; lpString1
		call	ds:lstrcpyA
		mov	bl, 1

loc_6B1935F5:				; CODE XREF: Ordinal890+21j
		lea	ecx, [ebp+lpString2]
		call	sub_6B1899B5
		mov	al, bl
		pop	ebx
		leave
		retn
Ordinal890	endp

; Exported entry 886.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal886
Ordinal886	proc near		; CODE XREF: Ordinal874+99p
					; DATA XREF: .rdata:off_6B1BF428o

var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
Src		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_1C		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h

		push	24h
		push	offset stru_6B1B2230
		call	__SEH_prolog
		mov	eax, ___security_cookie
		mov	[ebp+var_1C], eax
		mov	esi, ecx
		mov	[ebp+var_34], esi
		xor	ebx, ebx
		cmp	[esi+2Ch], ebx
		jnz	short loc_6B193626
		xor	eax, eax
		jmp	short loc_6B19369A
; ---------------------------------------------------------------------------

loc_6B193626:				; CODE XREF: Ordinal886+1Ej
		lea	edi, [esi+4]
		push	0Dh		; Size
		push	ebx		; Val
		push	edi		; Dst
		call	memset
		add	esp, 0Ch
		mov	[ebp+var_30], 1
		mov	[ebp+ms_exc.disabled], ebx
		xor	eax, eax
		cpuid
		mov	[ebp+Src], ebx
		mov	[ebp+var_28], edx
		mov	[ebp+var_24], ecx
		push	0Dh		; Size
		lea	eax, [ebp+Src]
		push	eax		; Src
		push	edi		; Dst
		call	memcpy
		add	esp, 0Ch
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		jmp	short loc_6B19367E
; ---------------------------------------------------------------------------

loc_6B193661:				; DATA XREF: .rdata:stru_6B1B2230o
		xor	eax, eax	; Exception filter 0 for function 6B193602
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_6B193665:				; DATA XREF: .rdata:stru_6B1B2230o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 6B193602
		push	offset aCcpuinfoLoadve ; "CCPUInfo::LoadVendor() : __except (EXCE"...
		call	sub_6B18102E
		pop	ecx
		and	[ebp+var_30], 0
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		mov	esi, [ebp+var_34]

loc_6B19367E:				; CODE XREF: Ordinal886+5Dj
		cmp	[ebp+var_30], 0
		jz	short loc_6B193697
		mov	byte ptr [esi+10h], 0
		lea	eax, [esi+30h]
		push	eax		; lpString1
		add	esi, 4
		push	esi		; Src
		call	Ordinal890
		pop	ecx
		pop	ecx

loc_6B193697:				; CODE XREF: Ordinal886+80j
		mov	eax, [ebp+var_30]

loc_6B19369A:				; CODE XREF: Ordinal886+22j
		mov	ecx, [ebp+var_1C]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		call	__SEH_epilog
		retn
Ordinal886	endp

; Exported entry 874.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal874
Ordinal874	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h

		push	10h
		push	offset stru_6B1B2280
		call	__SEH_prolog
		mov	esi, ecx
		mov	[ebp+var_20], esi
		mov	dword ptr [esi], offset	off_6B1B20C8
		xor	edi, edi
		mov	[esi+14h], edi
		mov	[esi+18h], edi
		mov	[esi+28h], edi
		mov	[esi+2Ch], edi
		push	0Dh		; Size
		push	edi		; Val
		lea	eax, [esi+4]
		push	eax		; Dst
		call	memset
		push	0Dh		; Size
		push	edi		; Val
		lea	eax, [esi+30h]
		push	eax		; Dst
		call	memset
		push	0Ch		; Size
		push	edi		; Val
		lea	eax, [esi+1Ch]
		push	eax		; Dst
		call	memset
		push	1Eh		; Size
		push	edi		; Val
		lea	eax, [esi+3Dh]
		push	eax		; Dst
		call	memset
		add	esp, 30h
		mov	dword ptr [esi+2Ch], 1
		mov	[ebp+ms_exc.disabled], edi
		mov	[ebp+var_1C], edi
		xor	eax, eax
		cpuid
		mov	[ebp+var_1C], eax
		mov	eax, [ebp+var_1C]
		mov	[esi+28h], eax
		jmp	short loc_6B193736
; ---------------------------------------------------------------------------

loc_6B19371C:				; DATA XREF: .rdata:stru_6B1B2280o
		xor	eax, eax	; Exception filter 0 for function 6B1936A8
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_6B193720:				; DATA XREF: .rdata:stru_6B1B2280o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 6B1936A8
		push	offset aCcpuinfoCcpuin ; "CCPUInfo::CCPUInfo() : __except (EXCEPT"...
		call	sub_6B18102E
		pop	ecx
		mov	esi, [ebp+var_20]
		xor	edi, edi
		mov	[esi+2Ch], edi

loc_6B193736:				; CODE XREF: Ordinal874+72j
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		cmp	[esi+2Ch], edi
		jz	short loc_6B193765
		mov	ecx, esi
		call	Ordinal886
		mov	ecx, esi
		call	Ordinal887
		mov	ecx, esi
		call	Ordinal888
		mov	eax, [esi+18h]
		shr	eax, 12h
		test	al, 1
		jz	short loc_6B193765
		mov	ecx, esi
		call	Ordinal889

loc_6B193765:				; CODE XREF: Ordinal874+95j
					; Ordinal874+B4j
		mov	eax, esi
		call	__SEH_epilog
		retn
Ordinal874	endp

; Exported entry 891.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal891
Ordinal891	proc near		; CODE XREF: Ordinal903+Ep
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1237
		mov	eax, [esp+4+arg_0]
		mov	[esi+14h], eax
		mov	dword ptr [esi], offset	off_6B1B228C
		mov	eax, esi
		pop	esi
		retn	4
Ordinal891	endp

; Exported entry 892.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal892
Ordinal892	proc near		; CODE XREF: sub_6B193BE5+3p
					; Ordinal904+50j
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6B1B228C
		jmp	Ordinal1238
Ordinal892	endp

; Exported entry 893.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal893(char	Args)
		public Ordinal893
Ordinal893	proc near		; DATA XREF: .rdata:6B1B2290o
					; .rdata:off_6B1BF428o

Args		= byte ptr  4

		push	esi
		push	dword ptr [esp+4+Args] ; Args
		mov	esi, ecx
		push	offset aCnewcrashhandl ; "CNewCrashHandler::NewHandler() : nSize "...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	ecx, [esi+14h]
		mov	eax, [ecx]
		push	0
		push	2
		call	dword ptr [eax+4]
		push	dword ptr [esp+4+Args]
		mov	ecx, esi
		call	Ordinal1241
		pop	esi
		retn	4
Ordinal893	endp

; Exported entry 894.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal894
Ordinal894	proc near		; CODE XREF: Ordinal903+17p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1083
		mov	eax, [esp+4+arg_0]
		mov	[esi+0Ch], eax
		mov	dword ptr [esi], offset	off_6B1B22C4
		mov	eax, esi
		pop	esi
		retn	4
Ordinal894	endp

; Exported entry 895.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal895
Ordinal895	proc near		; CODE XREF: sub_6B193C01+3p
					; Ordinal904+47p
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6B1B22C4
		jmp	Ordinal1084
Ordinal895	endp

; Exported entry 896.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal896
Ordinal896	proc near		; DATA XREF: .rdata:6B1B22C8o
					; .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	eax, [edi]
		push	dword ptr [eax]	; Args
		mov	esi, ecx
		push	offset aCexceptioncras ; "CExceptionCrashHandler::ExceptionHandle"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	ecx, [esi+0Ch]
		mov	eax, [ecx]
		push	edi
		push	3
		call	dword ptr [eax+4]
		push	edi
		mov	ecx, esi
		call	Ordinal1087
		pop	edi
		pop	esi
		retn	4
Ordinal896	endp

; Exported entry 897.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal897
Ordinal897	proc near		; CODE XREF: Ordinal903+20p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1310
		mov	eax, [esp+4+arg_0]
		mov	[esi+0Ch], eax
		mov	dword ptr [esi], offset	off_6B1B2314
		mov	eax, esi
		pop	esi
		retn	4
Ordinal897	endp

; Exported entry 898.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal898
Ordinal898	proc near		; CODE XREF: sub_6B193C1D+3p
					; Ordinal904+3Fp
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6B1B2314
		jmp	Ordinal1311
Ordinal898	endp

; Exported entry 899.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal899
Ordinal899	proc near		; DATA XREF: .rdata:6B1B2318o
					; .rdata:off_6B1BF428o
		push	esi
		push	offset aCpurecallcrash ; "CPurecallCrashHandler::PurecallHandler("...
		mov	esi, ecx
		call	sub_6B18102E
		pop	ecx
		mov	ecx, [esi+0Ch]
		mov	eax, [ecx]
		push	0
		push	4
		call	dword ptr [eax+4]
		mov	ecx, esi
		pop	esi
		jmp	Ordinal1314
Ordinal899	endp

; Exported entry 900.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal900
Ordinal900	proc near		; CODE XREF: Ordinal903+29p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1353
		mov	eax, [esp+4+arg_0]
		mov	[esi+0Ch], eax
		mov	dword ptr [esi], offset	off_6B1B2348
		mov	eax, esi
		pop	esi
		retn	4
Ordinal900	endp

; Exported entry 901.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal901
Ordinal901	proc near		; CODE XREF: sub_6B193C39+3p
					; Ordinal904+37p
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6B1B2348
		jmp	Ordinal1354
Ordinal901	endp

; Exported entry 902.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal902(char	Args, int)
		public Ordinal902
Ordinal902	proc near		; DATA XREF: .rdata:6B1B234Co
					; .rdata:off_6B1BF428o

Args		= byte ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	dword ptr [esp+4+Args] ; Args
		mov	esi, ecx
		push	offset aCsecuritycrash ; "CSecurityCrashHandler::SecurityHandler("...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	ecx, [esi+0Ch]
		mov	eax, [ecx]
		push	0
		push	5
		call	dword ptr [eax+4]
		push	[esp+4+arg_4]
		mov	ecx, esi
		push	dword ptr [esp+8+Args]
		call	Ordinal1357
		pop	esi
		retn	8
Ordinal902	endp

; Exported entry 906.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal906
Ordinal906	proc near		; CODE XREF: Ordinal904+9p
					; Ordinal905+1Fp ...

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1572
		lea	ecx, [esi+4]
		call	Ordinal1240
		lea	ecx, [esi+2Ch]
		call	Ordinal1313
		lea	ecx, [esi+1Ch]
		call	Ordinal1086
		lea	ecx, [esi+3Ch]
		call	Ordinal1356
		lea	ecx, [esi+70h]
		call	Ordinal1679
		and	dword ptr [esi+4Ch], 0
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		pop	esi
		leave
		retn
Ordinal906	endp

; Exported entry 908.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal908
Ordinal908	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1572
		mov	esi, [esi+4Ch]
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal908	endp

; Exported entry 909.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal909
Ordinal909	proc near		; CODE XREF: Ordinal146+37p
					; Ordinal146+59p ...

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1572
		mov	eax, [ebp+arg_0]
		dec	eax
		dec	eax
		jz	short loc_6B19396E
		dec	eax
		jz	short loc_6B193966
		dec	eax
		jz	short loc_6B19395E
		dec	eax
		jnz	short loc_6B193974
		mov	eax, [ebp+arg_4]
		mov	[esi+68h], eax
		jmp	short loc_6B193974
; ---------------------------------------------------------------------------

loc_6B19395E:				; CODE XREF: Ordinal909+23j
		mov	eax, [ebp+arg_4]
		mov	[esi+60h], eax
		jmp	short loc_6B193974
; ---------------------------------------------------------------------------

loc_6B193966:				; CODE XREF: Ordinal909+20j
		mov	eax, [ebp+arg_4]
		mov	[esi+58h], eax
		jmp	short loc_6B193974
; ---------------------------------------------------------------------------

loc_6B19396E:				; CODE XREF: Ordinal909+1Dj
		mov	eax, [ebp+arg_4]
		mov	[esi+50h], eax

loc_6B193974:				; CODE XREF: Ordinal909+26j
					; Ordinal909+2Ej ...
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		pop	esi
		leave
		retn	8
Ordinal909	endp

; Exported entry 910.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal910
Ordinal910	proc near		; CODE XREF: Ordinal907+3Cp
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	edi
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1572
		mov	eax, [ebp+arg_0]
		xor	edi, edi
		dec	eax
		jz	short loc_6B1939C2
		dec	eax
		jz	short loc_6B1939BD
		dec	eax
		jz	short loc_6B1939B8
		dec	eax
		jz	short loc_6B1939B3
		dec	eax
		jnz	short loc_6B1939C5
		mov	edi, [esi+68h]
		jmp	short loc_6B1939C5
; ---------------------------------------------------------------------------

loc_6B1939B3:				; CODE XREF: Ordinal910+28j
		mov	edi, [esi+60h]
		jmp	short loc_6B1939C5
; ---------------------------------------------------------------------------

loc_6B1939B8:				; CODE XREF: Ordinal910+25j
		mov	edi, [esi+58h]
		jmp	short loc_6B1939C5
; ---------------------------------------------------------------------------

loc_6B1939BD:				; CODE XREF: Ordinal910+22j
		mov	edi, [esi+50h]
		jmp	short loc_6B1939C5
; ---------------------------------------------------------------------------

loc_6B1939C2:				; CODE XREF: Ordinal910+1Fj
		xor	edi, edi
		inc	edi

loc_6B1939C5:				; CODE XREF: Ordinal910+2Bj
					; Ordinal910+30j ...
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, edi
		pop	edi
		pop	esi
		leave
		retn	4
Ordinal910	endp

; Exported entry 911.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal911
Ordinal911	proc near		; CODE XREF: Ordinal146+43p
					; Ordinal146+65p ...

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1572
		mov	eax, [ebp+arg_0]
		dec	eax
		dec	eax
		jz	short loc_6B193A15
		dec	eax
		jz	short loc_6B193A0D
		dec	eax
		jz	short loc_6B193A05
		dec	eax
		jnz	short loc_6B193A1B
		mov	eax, [ebp+arg_4]
		mov	[esi+6Ch], eax
		jmp	short loc_6B193A1B
; ---------------------------------------------------------------------------

loc_6B193A05:				; CODE XREF: Ordinal911+23j
		mov	eax, [ebp+arg_4]
		mov	[esi+64h], eax
		jmp	short loc_6B193A1B
; ---------------------------------------------------------------------------

loc_6B193A0D:				; CODE XREF: Ordinal911+20j
		mov	eax, [ebp+arg_4]
		mov	[esi+5Ch], eax
		jmp	short loc_6B193A1B
; ---------------------------------------------------------------------------

loc_6B193A15:				; CODE XREF: Ordinal911+1Dj
		mov	eax, [ebp+arg_4]
		mov	[esi+54h], eax

loc_6B193A1B:				; CODE XREF: Ordinal911+26j
					; Ordinal911+2Ej ...
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		pop	esi
		leave
		retn	8
Ordinal911	endp

; Exported entry 912.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal912
Ordinal912	proc near		; CODE XREF: Ordinal907+269p
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	edi
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1572
		mov	eax, [ebp+arg_0]
		xor	edi, edi
		dec	eax
		jz	short loc_6B193A69
		dec	eax
		jz	short loc_6B193A64
		dec	eax
		jz	short loc_6B193A5F
		dec	eax
		jz	short loc_6B193A5A
		dec	eax
		jnz	short loc_6B193A6B
		mov	edi, [esi+6Ch]
		jmp	short loc_6B193A6B
; ---------------------------------------------------------------------------

loc_6B193A5A:				; CODE XREF: Ordinal912+28j
		mov	edi, [esi+64h]
		jmp	short loc_6B193A6B
; ---------------------------------------------------------------------------

loc_6B193A5F:				; CODE XREF: Ordinal912+25j
		mov	edi, [esi+5Ch]
		jmp	short loc_6B193A6B
; ---------------------------------------------------------------------------

loc_6B193A64:				; CODE XREF: Ordinal912+22j
		mov	edi, [esi+54h]
		jmp	short loc_6B193A6B
; ---------------------------------------------------------------------------

loc_6B193A69:				; CODE XREF: Ordinal912+1Fj
		xor	edi, edi

loc_6B193A6B:				; CODE XREF: Ordinal912+2Bj
					; Ordinal912+30j ...
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, edi
		pop	edi
		pop	esi
		leave
		retn	4
Ordinal912	endp

; Exported entry 913.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal913
Ordinal913	proc near		; CODE XREF: Ordinal146+4Dp
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1572
		push	[ebp+arg_0]
		lea	ecx, [esi+4]
		call	Ordinal1243
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		pop	esi
		leave
		retn	4
Ordinal913	endp

; Exported entry 914.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal914
Ordinal914	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1572
		lea	ecx, [esi+4]
		call	Ordinal1493
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal914	endp

; Exported entry 917.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal917
Ordinal917	proc near		; CODE XREF: Ordinal146+9Fp
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1572
		mov	eax, [ebp+arg_0]
		lea	ecx, [ebp+var_C]
		mov	[esi+84h], eax
		call	Ordinal1573
		pop	esi
		leave
		retn	4
Ordinal917	endp

; Exported entry 918.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal918
Ordinal918	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1572
		mov	esi, [esi+84h]
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal918	endp

; Exported entry 919.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal919
Ordinal919	proc near		; CODE XREF: Ordinal146+A9p
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1572
		mov	eax, [ebp+arg_0]
		lea	ecx, [ebp+var_C]
		mov	[esi+88h], eax
		call	Ordinal1573
		pop	esi
		leave
		retn	4
Ordinal919	endp

; Exported entry 920.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal920
Ordinal920	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1572
		mov	esi, [esi+88h]
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal920	endp

; Exported entry 921.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal921
Ordinal921	proc near		; CODE XREF: Ordinal146+B3p
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1572
		mov	eax, [ebp+arg_0]
		lea	ecx, [ebp+var_C]
		mov	[esi+8Ch], eax
		call	Ordinal1573
		pop	esi
		leave
		retn	4
Ordinal921	endp

; Exported entry 922.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal922
Ordinal922	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1572
		mov	esi, [esi+8Ch]
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal922	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B193BE5(void *, char)
sub_6B193BE5	proc near		; DATA XREF: .rdata:off_6B1B228Co

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal892
		test	[esp+4+arg_0], 1
		jz	short loc_6B193BFB
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B193BFB:				; CODE XREF: sub_6B193BE5+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B193BE5	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B193C01(void *, char)
sub_6B193C01	proc near		; DATA XREF: .rdata:off_6B1B22C4o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal895
		test	[esp+4+arg_0], 1
		jz	short loc_6B193C17
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B193C17:				; CODE XREF: sub_6B193C01+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B193C01	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B193C1D(void *, char)
sub_6B193C1D	proc near		; DATA XREF: .rdata:off_6B1B2314o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal898
		test	[esp+4+arg_0], 1
		jz	short loc_6B193C33
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B193C33:				; CODE XREF: sub_6B193C1D+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B193C1D	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B193C39(void *, char)
sub_6B193C39	proc near		; DATA XREF: .rdata:off_6B1B2348o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal901
		test	[esp+4+arg_0], 1
		jz	short loc_6B193C4F
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B193C4F:				; CODE XREF: sub_6B193C39+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B193C39	endp

; Exported entry 916.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal916
Ordinal916	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1572
		mov	esi, [esi+7Ch]
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal916	endp

; Exported entry 904.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal904
Ordinal904	proc near		; CODE XREF: Ordinal132+6j
					; sub_6B193EEA+3p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1B2388
		call	Ordinal906
		lea	ecx, [esi+90h]
		call	Ordinal1616
		lea	ecx, [esi+80h]
		call	sub_6B1899B5
		lea	ecx, [esi+7Ch]
		call	sub_6B1899B5
		lea	ecx, [esi+70h]
		call	Ordinal973
		lea	ecx, [esi+3Ch]
		call	Ordinal901
		lea	ecx, [esi+2Ch]
		call	Ordinal898
		lea	ecx, [esi+1Ch]
		call	Ordinal895
		lea	ecx, [esi+4]
		pop	esi
		jmp	Ordinal892
Ordinal904	endp

; Exported entry 905.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame fpd=78h

		public Ordinal905
Ordinal905	proc near		; CODE XREF: Ordinal133+56p
					; DATA XREF: .rdata:off_6B1BF428o

var_118		= byte ptr -118h
var_50		= byte ptr -50h
var_44		= byte ptr -44h

		push	ebp
		lea	ebp, [esp-78h]
		sub	esp, 118h
		push	esi
		mov	esi, ecx
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+78h+var_50]
		call	Ordinal1572
		mov	ecx, esi
		call	Ordinal906
		lea	ecx, [esi+70h]
		call	Ordinal978
		test	eax, eax
		jnz	short loc_6B193D0D
		push	offset aCcrashhandlerE ; "CCrashHandler::Enable() : m_DebugHelp.C"...
		call	sub_6B18101A
		pop	ecx

loc_6B193D0D:				; CODE XREF: Ordinal905+2Ej
		lea	ecx, [ebp+78h+var_44]
		call	Ordinal1487
		push	0		; Filename
		lea	ecx, [ebp+78h+var_44]
		call	Ordinal1489
		test	al, al
		jnz	short loc_6B193D3B
		push	offset aCcrashhandle_2 ; "CCrashHandler::Enable() : path.SplitPat"...
		call	sub_6B18102E
		pop	ecx
		lea	ecx, [ebp+78h+var_44]
		call	Ordinal1488
		jmp	loc_6B193E3B
; ---------------------------------------------------------------------------

loc_6B193D3B:				; CODE XREF: Ordinal905+4Fj
		push	edi		; Args
		lea	edi, [esi+7Ch]
		mov	eax, [edi]
		cmp	dword ptr [eax-0Ch], 0
		jnz	short loc_6B193D7B
		lea	ecx, [ebp+78h+var_44]
		call	Ordinal1010
		push	eax
		lea	ecx, [ebp+78h+var_44]
		call	Ordinal1105
		push	eax		; Args
		push	offset aSS_dmp	; "%s%s.dmp"
		push	edi		; int
		call	Ordinal1525
		add	esp, 10h
		test	al, al
		jnz	short loc_6B193D7B
		push	offset aCcrashhandle_3 ; "CCrashHandler::Enable() : CStringConver"...
		call	sub_6B18102E
		pop	ecx
		jmp	loc_6B193E32
; ---------------------------------------------------------------------------

loc_6B193D7B:				; CODE XREF: Ordinal905+73j
					; Ordinal905+97j
		lea	ecx, [ebp+78h+var_118]
		call	Ordinal1879
		lea	ecx, [ebp+78h+var_44]
		call	Ordinal1649
		push	eax		; Filename
		lea	ecx, [ebp+78h+var_118]
		call	Ordinal1881
		test	eax, eax
		jnz	short loc_6B193DBC
		push	offset aCcrashhandle_4 ; "CCrashHandler::Enable() : versionInfo.L"...
		call	sub_6B18101A
		pop	ecx

loc_6B193DA9:				; CODE XREF: Ordinal905+106j
		lea	ecx, [esi+4]
		call	Ordinal1239
		test	eax, eax
		jnz	short loc_6B193DE1
		push	offset aCcrashhandle_5 ; "CCrashHandler::Enable() : m_NewHandler."...
		jmp	short loc_6B193E18
; ---------------------------------------------------------------------------

loc_6B193DBC:				; CODE XREF: Ordinal905+CAj
		lea	eax, [esi+80h]
		push	eax		; int
		lea	ecx, [ebp+78h+var_118]
		call	Ordinal1886
		push	eax		; Src
		call	Ordinal1519
		test	al, al
		pop	ecx
		pop	ecx
		jnz	short loc_6B193DA9
		push	offset aCcrashhandle_6 ; "CCrashHandler::Enable() : CStringConver"...
		jmp	short loc_6B193E18
; ---------------------------------------------------------------------------

loc_6B193DE1:				; CODE XREF: Ordinal905+E1j
		lea	ecx, [esi+2Ch]
		call	Ordinal1312
		test	eax, eax
		jnz	short loc_6B193DF4
		push	offset aCcrashhandle_7 ; "CCrashHandler::Enable() : m_PurecallHan"...
		jmp	short loc_6B193E18
; ---------------------------------------------------------------------------

loc_6B193DF4:				; CODE XREF: Ordinal905+119j
		lea	ecx, [esi+1Ch]
		call	Ordinal1085
		test	eax, eax
		jnz	short loc_6B193E07
		push	offset aCcrashhandle_8 ; "CCrashHandler::Enable() : m_ExceptionHa"...
		jmp	short loc_6B193E18
; ---------------------------------------------------------------------------

loc_6B193E07:				; CODE XREF: Ordinal905+12Cj
		lea	ecx, [esi+3Ch]
		call	Ordinal1355
		test	eax, eax
		jnz	short loc_6B193E20
		push	offset aCcrashhandle_9 ; "CCrashHandler::Enable() : m_SecurityHan"...

loc_6B193E18:				; CODE XREF: Ordinal905+E8j
					; Ordinal905+10Dj ...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B193E27
; ---------------------------------------------------------------------------

loc_6B193E20:				; CODE XREF: Ordinal905+13Fj
		mov	dword ptr [esi+4Ch], 1

loc_6B193E27:				; CODE XREF: Ordinal905+14Cj
		lea	ecx, [ebp+78h+var_118]
		call	Ordinal1880

loc_6B193E32:				; CODE XREF: Ordinal905+A4j
		lea	ecx, [ebp+78h+var_44]
		call	Ordinal1488
		pop	edi

loc_6B193E3B:				; CODE XREF: Ordinal905+64j
		cmp	dword ptr [esi+4Ch], 0
		jnz	short loc_6B193E48
		mov	ecx, esi
		call	Ordinal906

loc_6B193E48:				; CODE XREF: Ordinal905+16Dj
		mov	esi, [esi+4Ch]
		lea	ecx, [ebp+78h+var_50]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		add	ebp, 78h
		leave
		retn
Ordinal905	endp

; Exported entry 903.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal903
Ordinal903	proc near		; CODE XREF: Ordinal131+3p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		push	edi
		push	esi
		lea	ecx, [esi+4]
		mov	dword ptr [esi], offset	off_6B1B2388
		call	Ordinal891
		push	esi
		lea	ecx, [esi+1Ch]
		call	Ordinal894
		push	esi
		lea	ecx, [esi+2Ch]
		call	Ordinal897
		push	esi
		lea	ecx, [esi+3Ch]
		call	Ordinal900
		xor	eax, eax
		xor	edi, edi
		inc	edi
		lea	ecx, [esi+70h]
		mov	[esi+4Ch], eax
		mov	[esi+50h], edi
		mov	[esi+54h], eax
		mov	[esi+58h], edi
		mov	[esi+5Ch], eax
		mov	[esi+60h], edi
		mov	[esi+64h], eax
		mov	[esi+68h], edi
		mov	[esi+6Ch], eax
		call	Ordinal972
		lea	ecx, [esi+7Ch]
		call	sub_6B181879
		lea	ecx, [esi+80h]
		call	sub_6B181879
		lea	ecx, [esi+90h]
		mov	[esi+84h], edi
		mov	[esi+88h], edi
		mov	dword ptr [esi+8Ch], 22h
		call	Ordinal1615
		pop	edi
		mov	eax, esi
		pop	esi
		retn
Ordinal903	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B193EEA(void *, char)
sub_6B193EEA	proc near		; DATA XREF: .rdata:off_6B1B2388o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal904
		test	[esp+4+arg_0], 1
		jz	short loc_6B193F00
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B193F00:				; CODE XREF: sub_6B193EEA+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B193EEA	endp

; Exported entry 907.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal907(char	Args, int)
		public Ordinal907
Ordinal907	proc near		; DATA XREF: .rdata:6B1AA600o
					; .rdata:6B1B238Co ...

var_A8		= byte ptr -0A8h
var_64		= dword	ptr -64h
var_60		= byte ptr -60h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
SystemTime	= _SYSTEMTIME ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Args		= byte ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_78 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 9Ch
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		mov	esi, ecx
		push	edi
		mov	[ebp+var_14], eax
		lea	eax, [esi+90h]
		mov	[ebp+var_10], esp
		push	eax
		lea	ecx, [ebp+var_60]
		mov	[ebp+var_30], esi
		call	Ordinal1572
		push	dword ptr [ebp+Args]
		xor	edi, edi
		mov	ecx, esi
		mov	[ebp+var_4], edi
		call	Ordinal910
		test	eax, eax
		jz	loc_6B194192
		push	[ebp+arg_4]
		push	dword ptr [ebp+Args] ; Args
		push	offset aCcrashhandlerD ; "CCrashHandler::Dump()	: eCrashType = %l"...
		call	sub_6B18102E
		add	esp, 0Ch
		lea	ecx, [ebp+var_28]
		call	sub_6B181879
		cmp	[esi+84h], edi
		mov	eax, [esi+7Ch]
		mov	byte ptr [ebp+var_4], 1
		mov	[ebp+var_2C], eax
		jnz	short loc_6B193F88
		cmp	[esi+88h], edi
		jz	loc_6B194129

loc_6B193F88:				; CODE XREF: Ordinal907+74j
		push	offset aCcrashhandl_10 ; "CCrashHandler::Dump()"
		lea	ecx, [ebp+var_50]
		call	Ordinal1089
		lea	ecx, [ebp+var_A8]
		call	Ordinal1487
		push	dword ptr [esi+7Ch] ; Args
		lea	ecx, [ebp+var_A8]
		mov	byte ptr [ebp+var_4], 4
		call	Ordinal1489
		test	al, al
		jnz	short loc_6B193FC6
		push	offset aCcrashhandl_11 ; "CCrashHandler::Dump()	: path.SplitPath("...
		call	sub_6B18102E
		pop	ecx
		jmp	loc_6B194074
; ---------------------------------------------------------------------------

loc_6B193FC6:				; CODE XREF: Ordinal907+AEj
		lea	ecx, [ebp+var_A8]
		call	Ordinal1010
		push	eax
		lea	ecx, [ebp+var_A8]
		call	Ordinal1105
		push	eax		; Args
		lea	eax, [ebp+var_28]
		push	offset aSS_0	; "%s%s"
		push	eax		; int
		call	sub_6B18F0EE
		add	esp, 10h
		cmp	[esi+88h], edi
		jz	short loc_6B194014
		mov	eax, [esi+80h]
		cmp	[eax-0Ch], edi
		jz	short loc_6B194014
		push	eax		; Args
		lea	eax, [ebp+var_28]
		push	offset aS_1	; "-%s"
		push	eax		; int
		call	sub_6B1824C6
		add	esp, 0Ch

loc_6B194014:				; CODE XREF: Ordinal907+EFj
					; Ordinal907+FAj
		cmp	[esi+84h], edi
		jz	short loc_6B19405A
		lea	eax, [ebp+SystemTime]
		push	eax		; lpSystemTime
		call	ds:GetLocalTime
		movzx	eax, [ebp+SystemTime.wMilliseconds]
		push	eax
		movzx	eax, [ebp+SystemTime.wSecond]
		push	eax
		movzx	eax, [ebp+SystemTime.wMinute]
		push	eax
		movzx	eax, [ebp+SystemTime.wHour]
		push	eax
		movzx	eax, [ebp+SystemTime.wDay]
		push	eax
		movzx	eax, [ebp+SystemTime.wMonth]
		push	eax
		movzx	eax, [ebp+SystemTime.wYear]
		push	eax		; Args
		lea	eax, [ebp+var_28]
		push	offset a04d02d02d02d02 ; "-%04d-%02d-%02d-%02d-%02d-%02d-%03d"
		push	eax		; int
		call	sub_6B1824C6
		add	esp, 24h

loc_6B19405A:				; CODE XREF: Ordinal907+114j
		lea	ecx, [ebp+var_A8]
		call	Ordinal1854
		push	eax		; Str
		lea	ecx, [ebp+var_28]
		call	sub_6B185AA4
		mov	eax, [ebp+var_28]
		mov	[ebp+var_2C], eax

loc_6B194074:				; CODE XREF: Ordinal907+BBj
		lea	ecx, [ebp+var_A8]
		call	Ordinal1488
		jmp	loc_6B194121
; ---------------------------------------------------------------------------

loc_6B194084:				; DATA XREF: .rdata:6B1BC004o
		push	13h
		lea	ecx, [ebp+var_50]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_50]
		call	Ordinal1101
		mov	ecx, [ebp+var_64]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_50]
		call	Ordinal1103
		lea	ecx, [ebp+var_50]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B19411C
		retn
; ---------------------------------------------------------------------------

loc_6B1940C7:				; DATA XREF: .rdata:6B1BC014o
		push	15h
		lea	ecx, [ebp+var_50]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_50]
		call	Ordinal1101
		mov	eax, [ebp+var_54]
		push	dword ptr [eax]
		lea	eax, [ebp+SystemTime]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+SystemTime]
		push	eax		; Src
		lea	ecx, [ebp+var_50]
		call	Ordinal1103
		lea	ecx, [ebp+var_50]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B19411C
		retn
; ---------------------------------------------------------------------------

loc_6B19411C:				; DATA XREF: Ordinal907+1BBo
					; Ordinal907+210o
		mov	esi, [ebp+var_30]
		xor	edi, edi

loc_6B194121:				; CODE XREF: Ordinal907+179j
		lea	ecx, [ebp+var_50]
		call	Ordinal1090

loc_6B194129:				; CODE XREF: Ordinal907+7Cj
		cmp	[ebp+arg_4], edi
		lea	ecx, [esi+70h]	; int
		jnz	short loc_6B19414A
		push	dword ptr [esi+8Ch] ; int
		push	[ebp+var_2C]	; Args
		call	Ordinal981
		test	eax, eax
		jnz	short loc_6B19416A
		push	offset aCcrashhandl_12 ; "CCrashHandler::Dump()	: m_DebugHelp.Sna"...
		jmp	short loc_6B194164
; ---------------------------------------------------------------------------

loc_6B19414A:				; CODE XREF: Ordinal907+229j
		push	[ebp+arg_4]	; int
		push	dword ptr [esi+8Ch] ; int
		push	[ebp+var_2C]	; Args
		call	Ordinal980
		test	eax, eax
		jnz	short loc_6B19416A
		push	offset aCcrashhandl_13 ; "CCrashHandler::Dump()	: m_DebugHelp.Dum"...

loc_6B194164:				; CODE XREF: Ordinal907+242j
		call	sub_6B18102E
		pop	ecx

loc_6B19416A:				; CODE XREF: Ordinal907+23Bj
					; Ordinal907+257j
		push	dword ptr [ebp+Args]
		mov	ecx, esi
		call	Ordinal912
		test	eax, eax
		jz	short loc_6B194187
		push	0FFFFFFFFh	; uExitCode
		call	ds:GetCurrentProcess
		push	eax		; hProcess
		call	ds:TerminateProcess

loc_6B194187:				; CODE XREF: Ordinal907+270j
		mov	ecx, [ebp+var_28]
		add	ecx, 0FFFFFFF0h
		call	sub_6B18163D

loc_6B194192:				; CODE XREF: Ordinal907+43j
		lea	ecx, [ebp+var_60]
		call	Ordinal1573
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal907	endp ; sp-analysis failed

; Exported entry 915.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal915(char	*Src)
		public Ordinal915
Ordinal915	proc near		; CODE XREF: Ordinal146+21Cp
					; DATA XREF: .rdata:off_6B1BF428o

var_58		= byte ptr -58h
var_44		= byte ptr -44h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8

		mov	eax, offset unknown_libname_79 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 4Ch
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		mov	esi, ecx
		push	edi
		mov	[ebp+var_14], eax
		lea	eax, [esi+90h]
		mov	[ebp+var_10], esp
		push	eax
		lea	ecx, [ebp+var_58]
		call	Ordinal1572
		and	[ebp+var_4], 0
		push	offset aCcrashhandlerS ; "CCrashHandler::SetDumpFileName()"
		lea	ecx, [ebp+var_44]
		call	Ordinal1089
		push	[ebp+Src]	; Src
		lea	ecx, [esi+7Ch]
		mov	byte ptr [ebp+var_4], 2
		call	sub_6B181EA9

loc_6B1941FF:				; DATA XREF: sub_6B194239+3Do
					; sub_6B19427C+4Fo
		lea	ecx, [ebp+var_44]
		call	Ordinal1635
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		lea	ecx, [ebp+var_44]
		inc	esi
		call	Ordinal1090
		lea	ecx, [ebp+var_58]
		call	Ordinal1573
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal915	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B194239	proc near		; DATA XREF: .rdata:6B1BC074o
		push	13h
		lea	ecx, [ebp-44h]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-44h]
		call	Ordinal1101
		mov	ecx, [ebp-4Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal1103
		lea	ecx, [ebp-44h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1941FF
		retn
sub_6B194239	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19427C	proc near		; DATA XREF: .rdata:6B1BC084o
		push	15h
		lea	ecx, [ebp-44h]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-44h]
		call	Ordinal1101
		mov	eax, [ebp-48h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal1103
		lea	ecx, [ebp-44h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1941FF
		retn
sub_6B19427C	endp

; Exported entry 923.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal923
Ordinal923	proc near		; CODE XREF: Ordinal924+1Cp
					; Ordinal925+5Dp
					; DATA XREF: ...

arg_0		= byte ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_4]
		mov	eax, [ecx]
		push	esi
		movzx	esi, [esp+4+arg_0]
		mov	edx, eax
		and	edx, 0FFh
		xor	edx, esi
		shr	eax, 8
		xor	eax, ds:dword_6B1B2710[edx*4]
		pop	esi
		mov	[ecx], eax
		retn
Ordinal923	endp

; Exported entry 924.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal924
Ordinal924	proc near		; CODE XREF: Ordinal762+2BEp
					; Ordinal957+D7p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		or	[ebp+var_4], 0FFFFFFFFh
		push	esi
		xor	esi, esi
		cmp	[ebp+arg_4], esi
		jbe	short loc_6B19431E

loc_6B194305:				; CODE XREF: Ordinal924+27j
		lea	eax, [ebp+var_4]
		push	eax
		mov	eax, [ebp+arg_0]
		movzx	eax, byte ptr [esi+eax]
		push	eax
		call	Ordinal923
		inc	esi
		cmp	esi, [ebp+arg_4]
		pop	ecx
		pop	ecx
		jb	short loc_6B194305

loc_6B19431E:				; CODE XREF: Ordinal924+Ej
		mov	eax, [ebp+var_4]
		not	eax
		pop	esi
		leave
		retn
Ordinal924	endp

; Exported entry 925.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal925(int, LONG lDistanceToMove, int, int, int, int)
		public Ordinal925
Ordinal925	proc near		; CODE XREF: Ordinal926+50p
					; Ordinal931+72p ...

Buffer		= byte ptr -2004h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
lDistanceToMove	= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		mov	eax, 2004h
		call	__alloca_probe
		mov	eax, ___security_cookie
		push	ebx
		mov	ebx, [ebp+arg_C]
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_14]
		or	dword ptr [eax], 0FFFFFFFFh
		push	esi
		push	edi

loc_6B194347:				; CODE XREF: Ordinal925+79j
		mov	esi, 2000h
		cmp	ebx, esi
		ja	short loc_6B194356
		test	ebx, ebx
		mov	esi, ebx
		jz	short loc_6B1943A1

loc_6B194356:				; CODE XREF: Ordinal925+28j
		mov	ecx, [ebp+arg_0]
		push	esi		; nNumberOfBytesToRead
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		push	[ebp+arg_8]	; int
		push	[ebp+lDistanceToMove] ;	lDistanceToMove
		call	Ordinal1118
		test	eax, eax
		jz	short loc_6B1943A8
		xor	edi, edi
		test	esi, esi
		jbe	short loc_6B19438F

loc_6B194376:				; CODE XREF: Ordinal925+67j
		push	[ebp+arg_14]
		xor	eax, eax
		mov	al, [ebp+edi+Buffer]
		push	eax
		call	Ordinal923
		inc	edi
		cmp	edi, esi
		pop	ecx
		pop	ecx
		jb	short loc_6B194376

loc_6B19438F:				; CODE XREF: Ordinal925+4Ej
		xor	eax, eax
		sub	ebx, esi
		sbb	[ebp+arg_10], eax
		add	[ebp+lDistanceToMove], esi
		adc	[ebp+arg_8], eax
		mov	eax, [ebp+arg_14]
		jmp	short loc_6B194347
; ---------------------------------------------------------------------------

loc_6B1943A1:				; CODE XREF: Ordinal925+2Ej
		not	dword ptr [eax]
		xor	eax, eax
		inc	eax
		jmp	short loc_6B1943B5
; ---------------------------------------------------------------------------

loc_6B1943A8:				; CODE XREF: Ordinal925+48j
		push	offset aCcrc32FileFile ; "CCRC32::File() : FileObject.Read() ==	F"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax

loc_6B1943B5:				; CODE XREF: Ordinal925+80j
		mov	ecx, [ebp+var_4]
		pop	edi
		pop	esi
		pop	ebx
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn
Ordinal925	endp

; Exported entry 926.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal926(LPCSTR	Args, LONG lDistanceToMove, int, int, int, int)
		public Ordinal926
Ordinal926	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= dword	ptr -0Ch
Args		= dword	ptr  8
lDistanceToMove	= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		lea	ecx, [ebp+var_C]
		call	Ordinal1107
		xor	esi, esi
		push	esi		; hTemplateFile
		push	80h		; dwFlagsAndAttributes
		push	3		; dwCreationDisposition
		push	esi		; lpSecurityAttributes
		push	1		; dwShareMode
		push	80000000h	; dwDesiredAccess
		push	[ebp+Args]	; Args
		lea	ecx, [ebp+var_C]
		call	Ordinal1112
		test	eax, eax
		jnz	short loc_6B1943FF
		push	offset aCcrc32FileFi_0 ; "CCRC32::File() : file.Open() == FALSE\n"
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B19441C
; ---------------------------------------------------------------------------

loc_6B1943FF:				; CODE XREF: Ordinal926+2Ej
		push	[ebp+arg_14]	; int
		lea	eax, [ebp+var_C]
		push	[ebp+arg_10]	; int
		push	[ebp+arg_C]	; int
		push	[ebp+arg_8]	; int
		push	[ebp+lDistanceToMove] ;	lDistanceToMove
		push	eax		; int
		call	Ordinal925
		add	esp, 18h
		mov	esi, eax

loc_6B19441C:				; CODE XREF: Ordinal926+3Bj
		lea	ecx, [ebp+var_C]
		call	Ordinal1109
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal926	endp

; Exported entry 927.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal927
Ordinal927	proc near		; CODE XREF: Ordinal754+13p
					; Ordinal942+3Ep
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		mov	esi, ecx
		push	edi
		lea	ecx, [esi+8]
		mov	dword ptr [esi], offset	off_6B1B2B68
		call	Ordinal1107
		xor	edi, edi
		lea	ecx, [esi+84h]
		mov	[esi+14h], edi
		mov	[esi+18h], edi
		mov	dword ptr [esi+1Ch], 1
		mov	[esi+20h], edi
		mov	[esi+24h], edi
		call	Ordinal1615
		mov	eax, [esp+8+arg_0]
		mov	[esi+0A4h], eax
		mov	eax, [esp+8+arg_4]
		mov	[esi+0A8h], eax
		mov	eax, [esp+8+arg_8]
		mov	[esi+0ACh], eax
		mov	eax, [esp+8+arg_C]
		push	4		; Size
		mov	[esi+0B0h], eax
		lea	eax, [esi+80h]
		push	edi		; Val
		push	eax		; Dst
		call	memset
		push	58h		; Size
		lea	eax, [esi+28h]
		push	edi		; Val
		push	eax		; Dst
		call	memset
		add	esp, 18h
		pop	edi
		mov	eax, esi
		pop	esi
		retn	10h
Ordinal927	endp

; Exported entry 939.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal939(int,	LPCVOID	lpBuffer, DWORD	nNumberOfBytesToWrite)
		public Ordinal939
Ordinal939	proc near		; CODE XREF: Ordinal767+10p
					; Ordinal771+8p
					; DATA XREF: ...

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
lpBuffer	= dword	ptr  0Ch
nNumberOfBytesToWrite= dword ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+nNumberOfBytesToWrite]
		lea	edx, [eax+ecx]
		cmp	edx, [esi+20h]
		ja	short loc_6B194526
		cmp	ecx, ebx
		jz	short loc_6B194526
		cmp	[ebp+lpBuffer],	ebx
		jz	short loc_6B194526
		push	ecx		; nNumberOfBytesToWrite
		push	[ebp+lpBuffer]	; lpBuffer
		add	eax, 20h
		push	ebx		; int
		lea	edi, [esi+8]
		push	eax		; lDistanceToMove
		mov	ecx, edi
		call	Ordinal1120
		test	eax, eax
		jnz	short loc_6B1944FC
		push	offset aCdatastoreWrit ; "CDataStore::WriteHeader() : m_File.Writ"...
		jmp	short loc_6B19452B
; ---------------------------------------------------------------------------

loc_6B1944FC:				; CODE XREF: Ordinal939+4Bj
		cmp	[esi+18h], ebx
		jz	short loc_6B194521
		mov	ecx, edi
		call	Ordinal1124
		test	eax, eax
		jnz	short loc_6B194521
		mov	ecx, edi
		call	Ordinal1052
		push	offset aCdatastoreWr_0 ; "CDataStore::WriteHeader() : m_File.Flus"...
		mov	[esi+14h], eax
		call	sub_6B18102E
		pop	ecx

loc_6B194521:				; CODE XREF: Ordinal939+57j
					; Ordinal939+62j
		xor	ebx, ebx
		inc	ebx
		jmp	short loc_6B194531
; ---------------------------------------------------------------------------

loc_6B194526:				; CODE XREF: Ordinal939+2Bj
					; Ordinal939+2Fj ...
		push	offset aCdatastoreWr_1 ; "CDataStore::WriteHeader() : dwOffset + "...

loc_6B19452B:				; CODE XREF: Ordinal939+52j
		call	sub_6B18102E
		pop	ecx

loc_6B194531:				; CODE XREF: Ordinal939+7Cj
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		pop	edi
		pop	esi
		mov	eax, ebx
		pop	ebx
		leave
		retn	0Ch
Ordinal939	endp

; Exported entry 940.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal940(int,	LPVOID lpBuffer, DWORD nNumberOfBytesToRead)
		public Ordinal940
Ordinal940	proc near		; CODE XREF: Ordinal768+10p
					; Ordinal772+1Dp ...

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
lpBuffer	= dword	ptr  0Ch
nNumberOfBytesToRead= dword ptr	 10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+nNumberOfBytesToRead]
		lea	edx, [eax+ecx]
		cmp	edx, [esi+20h]
		ja	short loc_6B194598
		test	ecx, ecx
		jz	short loc_6B194598
		cmp	[ebp+lpBuffer],	0
		jz	short loc_6B194598
		push	ecx		; nNumberOfBytesToRead
		push	[ebp+lpBuffer]	; lpBuffer
		add	eax, 20h
		push	0		; int
		push	eax		; lDistanceToMove
		lea	ecx, [esi+8]
		call	Ordinal1118
		test	eax, eax
		jnz	short loc_6B194593
		push	offset aCdatastoreRead ; "CDataStore::ReadHeader() : m_File.Read("...
		jmp	short loc_6B19459D
; ---------------------------------------------------------------------------

loc_6B194593:				; CODE XREF: Ordinal940+48j
		xor	esi, esi
		inc	esi
		jmp	short loc_6B1945A5
; ---------------------------------------------------------------------------

loc_6B194598:				; CODE XREF: Ordinal940+28j
					; Ordinal940+2Cj ...
		push	offset aCdatastoreRe_0 ; "CDataStore::ReadHeader() : dwOffset +	d"...

loc_6B19459D:				; CODE XREF: Ordinal940+4Fj
		call	sub_6B18102E
		pop	ecx
		xor	esi, esi

loc_6B1945A5:				; CODE XREF: Ordinal940+54j
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn	0Ch
Ordinal940	endp

; Exported entry 941.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal941
Ordinal941	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	edi, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		lea	ecx, [edi+eax]
		cmp	ecx, [esi+20h]
		ja	short loc_6B194615
		test	eax, eax
		jz	short loc_6B194615
		mov	ecx, [ebp+arg_8]
		push	eax
		call	Ordinal1196
		test	eax, eax
		jnz	short loc_6B1945F7
		push	offset aCdatastoreRe_1 ; "CDataStore::ReadHeader() : Memory.NewAl"...
		jmp	short loc_6B19461A
; ---------------------------------------------------------------------------

loc_6B1945F7:				; CODE XREF: Ordinal941+3Aj
		mov	ecx, [ebp+arg_8]
		call	Ordinal1052
		mov	ecx, [ebp+arg_8]
		push	eax		; nNumberOfBytesToRead
		call	Ordinal1493
		push	eax		; lpBuffer
		push	edi		; int
		mov	ecx, esi
		call	Ordinal940
		mov	esi, eax
		jmp	short loc_6B194622
; ---------------------------------------------------------------------------

loc_6B194615:				; CODE XREF: Ordinal941+29j
					; Ordinal941+2Dj
		push	offset aCdatastoreRe_0 ; "CDataStore::ReadHeader() : dwOffset +	d"...

loc_6B19461A:				; CODE XREF: Ordinal941+41j
		call	sub_6B18102E
		pop	ecx
		xor	esi, esi

loc_6B194622:				; CODE XREF: Ordinal941+5Fj
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		pop	edi
		mov	eax, esi
		pop	esi
		leave
		retn	0Ch
Ordinal941	endp ; sp-analysis failed

; Exported entry 943.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal943
Ordinal943	proc near		; CODE XREF: Ordinal942+67p
					; DATA XREF: .rdata:off_6B1BF428o

var_1C		= byte ptr -1Ch
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		push	ebx
		push	esi
		mov	ebx, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [ebx+84h]
		push	eax
		lea	ecx, [ebp+var_1C]
		call	Ordinal1571
		mov	esi, [ebp+arg_0]
		test	esi, esi
		jnz	short loc_6B194666
		push	offset aCdatastoreAppe ; "CDataStore::AppendDataStore()	: pDataSt"...
		call	sub_6B18102E
		pop	ecx
		jmp	loc_6B1946F0
; ---------------------------------------------------------------------------

loc_6B194666:				; CODE XREF: Ordinal943+22j
		push	edi		; Args
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		push	4		; Size
		lea	edi, [esi+80h]
		push	0		; Val
		push	edi		; Dst
		call	memset
		mov	eax, [esi+1Ch]
		and	dword ptr [esi+1Ch], 0
		mov	[ebp+arg_0], eax
		mov	eax, [esi]
		add	esp, 0Ch
		mov	ecx, esi
		mov	[edi], ebx
		call	dword ptr [eax+4]
		test	eax, eax
		mov	[ebp+var_4], eax
		jnz	short loc_6B1946B2
		push	offset aCappendstoreAp ; "CAppendStore::AppendDataStore() : pData"...
		call	sub_6B18102E
		pop	ecx

loc_6B1946B2:				; CODE XREF: Ordinal943+73j
		mov	eax, [ebp+arg_0]
		and	dword ptr [edi], 0
		mov	[esi+1Ch], eax
		cmp	dword ptr [ebx+18h], 0
		pop	edi
		jz	short loc_6B1946E5
		lea	esi, [ebx+8]
		mov	ecx, esi
		call	Ordinal1124
		test	eax, eax
		jnz	short loc_6B1946E5
		mov	ecx, esi
		call	Ordinal1052
		push	offset aCdatastoreAp_0 ; "CDataStore::AppendDataStore()	: m_File."...
		mov	[ebx+14h], eax
		call	sub_6B18102E
		pop	ecx

loc_6B1946E5:				; CODE XREF: Ordinal943+8Ej
					; Ordinal943+9Cj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		mov	esi, [ebp+var_4]

loc_6B1946F0:				; CODE XREF: Ordinal943+2Fj
		lea	ecx, [ebp+var_1C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal943	endp

; Exported entry 944.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal944
Ordinal944	proc near		; CODE XREF: Ordinal769p
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	esi, [esi+20h]
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal944	endp

; Exported entry 945.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal945
Ordinal945	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	esi, [esi+1Ch]
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal945	endp

; Exported entry 946.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal946
Ordinal946	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	eax, [ebp+arg_0]
		lea	ecx, [ebp+var_C]
		mov	[esi+1Ch], eax
		call	Ordinal1573
		pop	esi
		leave
		retn	4
Ordinal946	endp

; Exported entry 947.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal947
Ordinal947	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	esi, [esi+18h]
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal947	endp

; Exported entry 948.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal948
Ordinal948	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	eax, [ebp+arg_0]
		lea	ecx, [ebp+var_C]
		mov	[esi+18h], eax
		call	Ordinal1573
		pop	esi
		leave
		retn	4
Ordinal948	endp

; Exported entry 949.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal949
Ordinal949	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	ecx, [esi+8]
		call	Ordinal1125
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal949	endp

; Exported entry 950.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal950
Ordinal950	proc near		; CODE XREF: Ordinal760+1Ep
					; Ordinal756+8Ep ...

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		cmp	dword ptr [esi+24h], 0
		jz	short loc_6B194848
		lea	ecx, [esi+8]
		call	Ordinal1125
		test	eax, eax
		jz	short loc_6B194848
		xor	esi, esi
		inc	esi
		jmp	short loc_6B19484A
; ---------------------------------------------------------------------------

loc_6B194848:				; CODE XREF: Ordinal950+20j
					; Ordinal950+2Cj
		xor	esi, esi

loc_6B19484A:				; CODE XREF: Ordinal950+31j
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal950	endp

; Exported entry 951.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal951
Ordinal951	proc near		; CODE XREF: Ordinal952+9p
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		push	[ebp+arg_0]
		lea	ecx, [esi+8]
		call	Ordinal1128
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal951	endp

; Exported entry 952.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal952
Ordinal952	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		lea	eax, [ebp+var_8]
		push	eax
		call	Ordinal951
		test	eax, eax
		jnz	short loc_6B1948A5
		xor	edx, edx
		leave
		retn
; ---------------------------------------------------------------------------

loc_6B1948A5:				; CODE XREF: Ordinal952+10j
		mov	eax, [ebp+var_8]
		mov	edx, [ebp+var_4]
		leave
		retn
Ordinal952	endp

; Exported entry 954.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal954
Ordinal954	proc near		; CODE XREF: Ordinal956+2Dp
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	esi, [esi+14h]
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal954	endp

; Exported entry 957.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal957(LONG	lDistanceToMove, int, int, void	*lpBuffer)
		public Ordinal957
Ordinal957	proc near		; CODE XREF: Ordinal762+138p
					; Ordinal762+16Dp ...

var_30		= byte ptr -30h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
lDistanceToMove	= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
lpBuffer	= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 30h
		push	ebx
		mov	ebx, [ebp+lpBuffer]
		push	esi
		push	edi
		push	28h		; Size
		mov	edi, ecx
		push	0		; Val
		push	ebx		; Dst
		mov	[ebp+var_4], edi
		call	memset
		mov	esi, [ebp+arg_8]
		mov	eax, [esi]
		add	esp, 0Ch
		or	eax, [esi+4]
		jnz	short loc_6B194923
		lea	ecx, [edi+8]
		push	esi
		call	Ordinal1128
		test	eax, eax
		jnz	short loc_6B194923
		lea	ecx, [edi+8]
		call	Ordinal1052
		mov	[edi+14h], eax
		push	offset aCdatastoreRe_2 ; "CDataStore::ReadIndex() : m_File.GetLen"...
		jmp	loc_6B194A3F
; ---------------------------------------------------------------------------

loc_6B194923:				; CODE XREF: Ordinal957+26j
					; Ordinal957+33j
		mov	eax, [edi+20h]
		mov	ecx, [esi]
		mov	esi, [esi+4]
		xor	edx, edx
		add	eax, 20h
		cmp	esi, edx
		jb	loc_6B194A3A
		ja	short loc_6B194942
		cmp	ecx, eax
		jb	loc_6B194A3A

loc_6B194942:				; CODE XREF: Ordinal957+5Fj
		cmp	[ebp+arg_4], edx
		jb	loc_6B194A3A
		ja	short loc_6B194956
		cmp	[ebp+lDistanceToMove], eax
		jb	loc_6B194A3A

loc_6B194956:				; CODE XREF: Ordinal957+72j
		add	ecx, 0FFFFFFD8h
		adc	esi, 0FFFFFFFFh
		cmp	[ebp+arg_4], esi
		ja	loc_6B194A3A
		jb	short loc_6B194970
		cmp	[ebp+lDistanceToMove], ecx
		ja	loc_6B194A3A

loc_6B194970:				; CODE XREF: Ordinal957+8Cj
		push	28h		; nNumberOfBytesToRead
		push	ebx		; lpBuffer
		push	[ebp+arg_4]	; int
		lea	esi, [edi+8]
		push	[ebp+lDistanceToMove] ;	lDistanceToMove
		mov	ecx, esi
		call	Ordinal1118
		test	eax, eax
		jnz	short loc_6B19499B
		mov	ecx, esi
		call	Ordinal1052
		mov	[edi+14h], eax
		push	offset aCdatastoreRe_3 ; "CDataStore::ReadIndex() : m_File.Read()"...
		jmp	loc_6B194A3F
; ---------------------------------------------------------------------------

loc_6B19499B:				; CODE XREF: Ordinal957+ACj
		push	0Ah
		pop	ecx
		mov	esi, ebx
		lea	edi, [ebp+var_30]
		rep movsd
		lea	eax, [ebp+var_30]
		push	28h
		xor	edi, edi
		push	eax
		mov	[ebp+var_C], edi
		call	Ordinal924
		cmp	[ebx+24h], eax
		pop	ecx
		pop	ecx
		jz	short loc_6B1949C3
		push	offset aCdatastoreRe_4 ; "CDataStore::ReadIndex() : Index.m_dwHea"...
		jmp	short loc_6B194A3F
; ---------------------------------------------------------------------------

loc_6B1949C3:				; CODE XREF: Ordinal957+E1j
		mov	ecx, [ebx]
		mov	eax, [ebp+var_4]
		cmp	ecx, [eax+0ACh]
		jnz	short loc_6B194A33
		mov	ecx, [ebx+4]
		cmp	ecx, [eax+0B0h]
		jnz	short loc_6B194A33
		mov	eax, [ebx+8]
		cmp	eax, [ebp+lDistanceToMove]
		mov	esi, [ebx+0Ch]
		mov	[ebp+var_8], eax
		jnz	short loc_6B194A2C
		cmp	esi, [ebp+arg_4]
		jnz	short loc_6B194A2C
		mov	ecx, [ebx+18h]
		cmp	[ebx+1Ch], ecx
		ja	short loc_6B194A2C
		mov	edx, [ebp+arg_8]
		xor	eax, eax
		add	ecx, [ebp+lDistanceToMove]
		adc	eax, [ebp+arg_4]
		add	ecx, 28h
		adc	eax, edi
		cmp	eax, [edx+4]
		ja	short loc_6B194A2C
		jb	short loc_6B194A11
		cmp	ecx, [edx]
		ja	short loc_6B194A2C

loc_6B194A11:				; CODE XREF: Ordinal957+132j
		mov	eax, [ebx+10h]
		mov	ebx, [ebx+14h]
		add	eax, 28h
		adc	ebx, edi
		cmp	ebx, esi
		ja	short loc_6B194A2C
		jb	short loc_6B194A27
		cmp	eax, [ebp+var_8]
		ja	short loc_6B194A2C

loc_6B194A27:				; CODE XREF: Ordinal957+147j
		xor	eax, eax
		inc	eax
		jmp	short loc_6B194A47
; ---------------------------------------------------------------------------

loc_6B194A2C:				; CODE XREF: Ordinal957+10Ej
					; Ordinal957+113j ...
		push	offset aCdatastoreRe_5 ; "CDataStore::ReadIndex() : Index.m_uInde"...
		jmp	short loc_6B194A3F
; ---------------------------------------------------------------------------

loc_6B194A33:				; CODE XREF: Ordinal957+F5j
					; Ordinal957+100j
		push	offset aCdatastoreRe_6 ; "CDataStore::ReadIndex() : Index.m_dwSig"...
		jmp	short loc_6B194A3F
; ---------------------------------------------------------------------------

loc_6B194A3A:				; CODE XREF: Ordinal957+59j
					; Ordinal957+63j ...
		push	offset aCdatastoreRe_7 ; "CDataStore::ReadIndex() : uFileSize <	s"...

loc_6B194A3F:				; CODE XREF: Ordinal957+45j
					; Ordinal957+BDj ...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax

loc_6B194A47:				; CODE XREF: Ordinal957+151j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	10h
Ordinal957	endp

; Exported entry 958.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal958
Ordinal958	proc near		; CODE XREF: Ordinal762+1BEp
					; Ordinal762+2DAp ...

Buffer		= dword	ptr -28h
var_24		= dword	ptr -24h
lDistanceToMove	= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		mov	ebx, ecx
		mov	eax, [ebx+0ACh]
		push	0Ah
		pop	ecx
		lea	edi, [ebp+Buffer]
		rep movsd
		and	[ebp+var_4], 0
		mov	[ebp+Buffer], eax
		mov	eax, [ebx+0B0h]
		mov	[ebp+var_24], eax
		lea	eax, [ebp+Buffer]
		push	28h
		push	eax
		call	Ordinal924
		pop	ecx
		pop	ecx
		push	28h		; nNumberOfBytesToWrite
		mov	[ebp+var_4], eax
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		push	[ebp+var_1C]	; int
		lea	esi, [ebx+8]
		push	[ebp+lDistanceToMove] ;	lDistanceToMove
		mov	ecx, esi
		call	Ordinal1120
		test	eax, eax
		jnz	short loc_6B194ABD
		mov	ecx, esi
		call	Ordinal1052
		push	offset aCdatastoreWr_2 ; "CDataStore::WriteIndex() : m_File.Write"...
		mov	[ebx+14h], eax
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B194AC0
; ---------------------------------------------------------------------------

loc_6B194ABD:				; CODE XREF: Ordinal958+54j
		xor	eax, eax
		inc	eax

loc_6B194AC0:				; CODE XREF: Ordinal958+6Dj
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal958	endp

; Exported entry 959.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal959
Ordinal959	proc near		; CODE XREF: Ordinal930+12Bp
					; Ordinal930+1D0p ...

Buffer		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 20h
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		mov	ebx, ecx
		mov	eax, [ebx+0A4h]
		push	8
		pop	ecx
		lea	edi, [ebp+Buffer]
		rep movsd
		mov	[ebp+Buffer], eax
		mov	eax, [ebx+0A8h]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+Buffer]
		push	20h
		xor	edi, edi
		push	eax
		mov	[ebp+var_8], edi
		call	Ordinal924
		pop	ecx
		pop	ecx
		push	20h		; nNumberOfBytesToWrite
		mov	[ebp+var_8], eax
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		push	edi		; int
		lea	esi, [ebx+8]
		push	edi		; lDistanceToMove
		mov	ecx, esi
		call	Ordinal1120
		test	eax, eax
		jnz	short loc_6B194B33
		mov	ecx, esi
		call	Ordinal1052
		push	offset aCdatastoreWrit ; "CDataStore::WriteHeader() : m_File.Writ"...
		mov	[ebx+14h], eax
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B194B36
; ---------------------------------------------------------------------------

loc_6B194B33:				; CODE XREF: Ordinal959+51j
		xor	eax, eax
		inc	eax

loc_6B194B36:				; CODE XREF: Ordinal959+6Aj
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal959	endp

; Exported entry 960.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal960(int,	void *lpBuffer)
		public Ordinal960
Ordinal960	proc near		; CODE XREF: Ordinal930+1B6p
					; Ordinal930+204p ...

var_24		= byte ptr -24h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
lpBuffer	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 24h
		push	ebx
		mov	ebx, [ebp+lpBuffer]
		push	esi
		push	edi
		push	20h		; Size
		mov	edi, ecx
		push	0		; Val
		push	ebx		; Dst
		mov	[ebp+var_4], edi
		call	memset
		mov	esi, [ebp+arg_0]
		mov	eax, [esi]
		add	esp, 0Ch
		or	eax, [esi+4]
		jnz	short loc_6B194B87
		lea	ecx, [edi+8]
		push	esi
		call	Ordinal1128
		test	eax, eax
		jnz	short loc_6B194B87
		lea	ecx, [edi+8]
		call	Ordinal1052
		mov	[edi+14h], eax
		push	offset aCdatastoreRe_8 ; "CDataStore::ReadHeader() : m_File.GetLe"...
		jmp	loc_6B194C2B
; ---------------------------------------------------------------------------

loc_6B194B87:				; CODE XREF: Ordinal960+26j
					; Ordinal960+33j
		xor	eax, eax
		cmp	[esi+4], eax
		ja	short loc_6B194B9F
		jb	short loc_6B194B95
		cmp	dword ptr [esi], 20h
		jnb	short loc_6B194B9F

loc_6B194B95:				; CODE XREF: Ordinal960+51j
		push	offset aCdatastoreRe_9 ; "CDataStore::ReadHeader() : uFileSize < "...
		jmp	loc_6B194C2B
; ---------------------------------------------------------------------------

loc_6B194B9F:				; CODE XREF: Ordinal960+4Fj
					; Ordinal960+56j
		push	20h		; nNumberOfBytesToRead
		push	ebx		; lpBuffer
		push	eax		; int
		lea	esi, [edi+8]
		push	eax		; lDistanceToMove
		mov	ecx, esi
		call	Ordinal1118
		test	eax, eax
		jnz	short loc_6B194BC3
		mov	ecx, esi
		call	Ordinal1052
		mov	[edi+14h], eax
		push	offset aCdatastoreRead ; "CDataStore::ReadHeader() : m_File.Read("...
		jmp	short loc_6B194C2B
; ---------------------------------------------------------------------------

loc_6B194BC3:				; CODE XREF: Ordinal960+73j
		push	8
		pop	ecx
		lea	eax, [ebp+var_24]
		mov	esi, ebx
		lea	edi, [ebp+var_24]
		push	20h
		rep movsd
		and	[ebp+var_C], 0
		push	eax
		call	Ordinal924
		cmp	[ebx+18h], eax
		pop	ecx
		pop	ecx
		jz	short loc_6B194BEA
		push	offset aCdatastoreR_10 ; "CDataStore::ReadHeader() : Header.m_dwH"...
		jmp	short loc_6B194C2B
; ---------------------------------------------------------------------------

loc_6B194BEA:				; CODE XREF: Ordinal960+A4j
		mov	ecx, [ebx]
		mov	eax, [ebp+var_4]
		cmp	ecx, [eax+0A4h]
		jnz	short loc_6B194C26
		mov	ecx, [ebx+4]
		cmp	ecx, [eax+0A8h]
		jnz	short loc_6B194C26
		mov	eax, [ebx+8]
		mov	ebx, [ebx+0Ch]
		mov	ecx, eax
		or	ecx, ebx
		jz	short loc_6B194C21
		mov	ecx, [ebp+arg_0]
		cmp	eax, [ecx]
		jnz	short loc_6B194C1A
		cmp	ebx, [ecx+4]
		jz	short loc_6B194C21

loc_6B194C1A:				; CODE XREF: Ordinal960+D6j
		push	offset aCdatastoreR_11 ; "CDataStore::ReadHeader() : Header.m_uFi"...
		jmp	short loc_6B194C2B
; ---------------------------------------------------------------------------

loc_6B194C21:				; CODE XREF: Ordinal960+CFj
					; Ordinal960+DBj
		xor	eax, eax
		inc	eax
		jmp	short loc_6B194C33
; ---------------------------------------------------------------------------

loc_6B194C26:				; CODE XREF: Ordinal960+B8j
					; Ordinal960+C3j
		push	offset aCdatastoreR_12 ; "CDataStore::ReadHeader() : Header.m_dwS"...

loc_6B194C2B:				; CODE XREF: Ordinal960+45j
					; Ordinal960+5Dj ...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax

loc_6B194C33:				; CODE XREF: Ordinal960+E7j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal960	endp

; Exported entry 963.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal963(int,	void *lpBuffer)
		public Ordinal963
Ordinal963	proc near		; CODE XREF: Ordinal968+7Fp
					; Ordinal953+41p ...

arg_0		= dword	ptr  4
lpBuffer	= dword	ptr  8

		push	ebx
		push	esi
		push	edi
		push	28h		; Size
		push	0		; Val
		push	[esp+14h+lpBuffer] ; Dst
		mov	edi, ecx
		call	memset
		mov	esi, [esp+18h+arg_0]
		mov	eax, [esi]
		add	esp, 0Ch
		or	eax, [esi+4]
		jnz	short loc_6B194C7A
		lea	ebx, [edi+8]
		push	esi
		mov	ecx, ebx
		call	Ordinal1128
		test	eax, eax
		jnz	short loc_6B194C7A
		mov	ecx, ebx
		call	Ordinal1052
		mov	[edi+14h], eax
		push	offset aCdatastoreR_13 ; "CDataStore::ReadFirstIndex() : m_File.G"...
		jmp	short loc_6B194CA2
; ---------------------------------------------------------------------------

loc_6B194C7A:				; CODE XREF: Ordinal963+1Ej
					; Ordinal963+2Dj
		mov	eax, [edi+20h]
		add	eax, 20h
		xor	ecx, ecx
		cmp	eax, [esi]
		jnz	short loc_6B194C8B
		cmp	ecx, [esi+4]
		jz	short loc_6B194CAC

loc_6B194C8B:				; CODE XREF: Ordinal963+4Aj
		push	[esp+0Ch+lpBuffer] ; lpBuffer
		push	esi		; int
		push	ecx		; int
		push	eax		; lDistanceToMove
		mov	ecx, edi
		call	Ordinal957
		test	eax, eax
		jnz	short loc_6B194CAC
		push	offset aCdatastoreR_14 ; "CDataStore::ReadFirstIndex() : ReadInde"...

loc_6B194CA2:				; CODE XREF: Ordinal963+3Ej
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B194CAF
; ---------------------------------------------------------------------------

loc_6B194CAC:				; CODE XREF: Ordinal963+4Fj
					; Ordinal963+61j
		xor	eax, eax
		inc	eax

loc_6B194CAF:				; CODE XREF: Ordinal963+70j
		pop	edi
		pop	esi
		pop	ebx
		retn	8
Ordinal963	endp

; Exported entry 964.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal964(int,	int, void *lpBuffer)
		public Ordinal964
Ordinal964	proc near		; CODE XREF: Ordinal968+D5p
					; Ordinal953+A8p ...

var_28		= byte ptr -28h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
lpBuffer	= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		push	0Ah
		mov	ebx, ecx
		pop	ecx
		push	28h		; Size
		push	0		; Val
		push	[ebp+lpBuffer]	; Dst
		lea	edi, [ebp+var_28]
		rep movsd
		call	memset
		mov	esi, [ebp+arg_4]
		mov	eax, [esi]
		add	esp, 0Ch
		or	eax, [esi+4]
		jnz	short loc_6B194D04
		lea	edi, [ebx+8]
		push	esi
		mov	ecx, edi
		call	Ordinal1128
		test	eax, eax
		jnz	short loc_6B194D04
		mov	ecx, edi
		call	Ordinal1052
		mov	[ebx+14h], eax
		push	offset aCdatastoreR_15 ; "CDataStore::ReadNextIndex() :	m_File.Ge"...
		jmp	short loc_6B194D40
; ---------------------------------------------------------------------------

loc_6B194D04:				; CODE XREF: Ordinal964+2Dj
					; Ordinal964+3Cj
		mov	eax, [ebp+var_10]
		mov	edi, [esi]
		mov	edx, [esi+4]
		xor	ecx, ecx
		add	eax, [ebp+var_20]
		adc	ecx, [ebp+var_1C]
		add	eax, 28h
		adc	ecx, 0
		add	edi, 0FFFFFFFFh
		adc	edx, 0FFFFFFFFh
		cmp	ecx, edx
		jb	short loc_6B194D2A
		ja	short loc_6B194D4A
		cmp	eax, edi
		jnb	short loc_6B194D4A

loc_6B194D2A:				; CODE XREF: Ordinal964+6Dj
		push	[ebp+lpBuffer]	; lpBuffer
		push	esi		; int
		push	ecx		; int
		push	eax		; lDistanceToMove
		mov	ecx, ebx
		call	Ordinal957
		test	eax, eax
		jnz	short loc_6B194D4A
		push	offset aCdatastoreR_16 ; "CDataStore::ReadNextIndex() :	ReadIndex"...

loc_6B194D40:				; CODE XREF: Ordinal964+4Dj
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B194D4D
; ---------------------------------------------------------------------------

loc_6B194D4A:				; CODE XREF: Ordinal964+6Fj
					; Ordinal964+73j ...
		xor	eax, eax
		inc	eax

loc_6B194D4D:				; CODE XREF: Ordinal964+93j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	0Ch
Ordinal964	endp

; Exported entry 965.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal965(int,	int, void *lpBuffer)
		public Ordinal965
Ordinal965	proc near		; CODE XREF: Ordinal962+65p
					; Ordinal962+1A4p ...

var_28		= byte ptr -28h
lDistanceToMove	= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
lpBuffer	= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		push	0Ah
		mov	ebx, ecx
		pop	ecx
		push	28h		; Size
		push	0		; Val
		push	[ebp+lpBuffer]	; Dst
		lea	edi, [ebp+var_28]
		rep movsd
		call	memset
		mov	eax, [ebp+lDistanceToMove]
		add	esp, 0Ch
		or	eax, [ebp+var_14]
		jz	short loc_6B194DA7
		push	[ebp+lpBuffer]	; lpBuffer
		mov	ecx, ebx
		push	[ebp+arg_4]	; int
		push	[ebp+var_14]	; int
		push	[ebp+lDistanceToMove] ;	lDistanceToMove
		call	Ordinal957
		test	eax, eax
		jnz	short loc_6B194DA7
		push	offset aCdatastoreR_17 ; "CDataStore::ReadPreviousIndex() : ReadI"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B194DAA
; ---------------------------------------------------------------------------

loc_6B194DA7:				; CODE XREF: Ordinal965+2Bj
					; Ordinal965+42j
		xor	eax, eax
		inc	eax

loc_6B194DAA:				; CODE XREF: Ordinal965+51j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	0Ch
Ordinal965	endp

; Exported entry 967.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal967
Ordinal967	proc near		; CODE XREF: Ordinal968+68p
					; Ordinal968+115p ...
		push	58h		; Size
		add	ecx, 28h
		push	0		; Val
		push	ecx		; Dst
		call	memset
		add	esp, 0Ch
		retn
Ordinal967	endp

; Exported entry 968.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal968(int,	void *Dst)
		public Ordinal968
Ordinal968	proc near		; CODE XREF: Ordinal968+FCp
					; Ordinal966+1Ep ...

Buffer		= byte ptr -34h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Dst		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 34h
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+Dst]
		push	28h		; Size
		push	0		; Val
		push	edi		; Dst
		mov	ebx, ecx
		call	memset
		lea	esi, [ebx+28h]
		add	esp, 0Ch
		cmp	dword ptr [esi], 0
		mov	[ebp+var_4], esi
		jz	short loc_6B194E28
		cmp	[ebp+arg_0], 0
		jz	short loc_6B194E28
		mov	eax, [ebx+38h]
		or	eax, [ebx+3Ch]
		jz	short loc_6B194E20
		mov	eax, [ebx+48h]
		sub	eax, [ebx+4Ch]
		cmp	eax, 28h
		jbe	short loc_6B194E20
		add	eax, 0FFFFFFD8h
		cmp	eax, [ebp+arg_0]
		jb	short loc_6B194E20
		push	0Ah
		pop	ecx
		push	58h		; Size
		push	0		; Val
		push	[ebp+var_4]	; Dst
		lea	esi, [ebx+30h]
		rep movsd
		call	memset
		add	esp, 0Ch

loc_6B194E20:				; CODE XREF: Ordinal968+32j
					; Ordinal968+3Dj ...
		xor	eax, eax
		inc	eax
		jmp	loc_6B194EC3
; ---------------------------------------------------------------------------

loc_6B194E28:				; CODE XREF: Ordinal968+24j
					; Ordinal968+2Aj
		mov	ecx, ebx
		call	Ordinal967
		and	[ebp+var_C], 0
		and	[ebp+var_8], 0
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_C]
		push	eax		; int
		mov	ecx, ebx
		call	Ordinal963
		test	eax, eax
		jnz	short loc_6B194E5A
		push	offset aCdatastoreFind ; "CDataStore::FindAddIndex() : ReadFirstI"...
		call	sub_6B18102E
		pop	ecx
		jmp	loc_6B194EDC
; ---------------------------------------------------------------------------

loc_6B194E5A:				; CODE XREF: Ordinal968+86j
		mov	eax, [ebp+var_2C]
		or	eax, [ebp+var_28]
		jz	short loc_6B194EAB

loc_6B194E62:				; CODE XREF: Ordinal968+E4j
		mov	eax, [ebx+4Ch]
		mov	ecx, [ebx+48h]
		mov	edx, [ebp+var_1C]
		sub	ecx, eax
		sub	edx, eax
		cmp	edx, ecx
		jbe	short loc_6B194E7E
		push	0Ah
		lea	edi, [ebx+30h]
		pop	ecx
		lea	esi, [ebp+Buffer]
		rep movsd

loc_6B194E7E:				; CODE XREF: Ordinal968+AFj
		push	0Ah
		pop	ecx
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_C]
		push	eax		; int
		lea	esi, [ebp+Buffer]
		lea	edi, [ebx+58h]
		lea	eax, [ebp+Buffer]
		rep movsd
		push	eax		; int
		mov	ecx, ebx
		call	Ordinal964
		test	eax, eax
		jz	short loc_6B194ECA
		mov	eax, [ebp+var_2C]
		or	eax, [ebp+var_28]
		jnz	short loc_6B194E62
		mov	esi, [ebp+var_4]

loc_6B194EAB:				; CODE XREF: Ordinal968+9Ej
		xor	eax, eax
		inc	eax
		cmp	[ebp+arg_0], 0
		mov	[esi], eax
		jbe	short loc_6B194EC3
		push	[ebp+Dst]	; Dst
		mov	ecx, ebx
		push	[ebp+arg_0]	; int
		call	Ordinal968

loc_6B194EC3:				; CODE XREF: Ordinal968+61j
					; Ordinal968+F2j ...
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
; ---------------------------------------------------------------------------

loc_6B194ECA:				; CODE XREF: Ordinal968+DCj
		push	offset aCdatastoreFi_0 ; "CDataStore::FindAddIndex() : ReadNextIn"...
		call	sub_6B18102E
		pop	ecx
		mov	ecx, ebx
		call	Ordinal967

loc_6B194EDC:				; CODE XREF: Ordinal968+93j
		xor	eax, eax
		jmp	short loc_6B194EC3
Ordinal968	endp

; Exported entry 930.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame fpd=0C4h

; int __stdcall	Ordinal930(LPCSTR Args,	DWORD nNumberOfBytesToWrite, DWORD dwShareMode,	LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile, int)
		public Ordinal930
Ordinal930	proc near		; CODE XREF: Ordinal756+22p
					; Ordinal929+24p
					; DATA XREF: ...

var_144		= byte ptr -144h
Dst		= byte ptr -138h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
var_124		= dword	ptr -124h
var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
lDistanceToMove	= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
Buffer		= byte ptr -104h
var_4		= dword	ptr -4
Args		= dword	ptr  8
nNumberOfBytesToWrite= dword ptr  0Ch
dwShareMode	= dword	ptr  10h
lpSecurityAttributes= dword ptr	 14h
dwCreationDisposition= dword ptr  18h
dwFlagsAndAttributes= dword ptr	 1Ch
hTemplateFile	= dword	ptr  20h
arg_1C		= dword	ptr  24h

		push	ebp
		lea	ebp, [esp-0C4h]
		sub	esp, 144h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		mov	[ebp+0C4h+var_4], eax
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+0C4h+var_144]
		call	Ordinal1571
		push	[ebp+0C4h+hTemplateFile] ; hTemplateFile
		lea	edi, [esi+8]
		push	[ebp+0C4h+dwFlagsAndAttributes]	; dwFlagsAndAttributes
		mov	ecx, edi
		push	[ebp+0C4h+dwCreationDisposition] ; dwCreationDisposition
		mov	[ebp+0C4h+var_108], edi
		push	[ebp+0C4h+lpSecurityAttributes]	; lpSecurityAttributes
		push	[ebp+0C4h+dwShareMode] ; dwShareMode
		push	[ebp+0C4h+nNumberOfBytesToWrite] ; dwDesiredAccess
		push	[ebp+0C4h+Args]	; Args
		call	Ordinal1112
		test	eax, eax
		jnz	short loc_6B194F69
		mov	ecx, edi
		call	Ordinal1052
		push	offset aCdatastoreOpen ; "CDataStore::Open() : m_File.Open() ==	F"...
		mov	[esi+14h], eax
		call	sub_6B18102E
		pop	ecx

loc_6B194F62:				; CODE XREF: Ordinal930+1EBj
		xor	esi, esi
		jmp	loc_6B195126
; ---------------------------------------------------------------------------

loc_6B194F69:				; CODE XREF: Ordinal930+6Bj
		mov	eax, [ebp+0C4h+dwCreationDisposition]
		dec	eax
		jz	short loc_6B194F97
		dec	eax
		jz	short loc_6B194F97
		dec	eax
		jz	short loc_6B194F9A
		dec	eax
		jz	short loc_6B194F88
		dec	eax
		jz	short loc_6B194F97
		push	offset aCdatastoreOp_0 ; "CDataStore::Open() : switch(Default)\n"
		jmp	loc_6B1950BE
; ---------------------------------------------------------------------------

loc_6B194F88:				; CODE XREF: Ordinal930+99j
		call	ds:GetLastError
		mov	ebx, eax
		neg	ebx
		sbb	ebx, ebx
		inc	ebx
		jmp	short loc_6B194F9A
; ---------------------------------------------------------------------------

loc_6B194F97:				; CODE XREF: Ordinal930+90j
					; Ordinal930+93j ...
		xor	ebx, ebx
		inc	ebx

loc_6B194F9A:				; CODE XREF: Ordinal930+96j
					; Ordinal930+B5j
		xor	eax, eax
		test	byte ptr [ebp+0C4h+nNumberOfBytesToWrite], 2
		mov	[esi+24h], eax
		jnz	short loc_6B194FB1
		test	byte ptr [ebp+0C4h+nNumberOfBytesToWrite+3], 40h
		jz	short loc_6B194FB8

loc_6B194FB1:				; CODE XREF: Ordinal930+C6j
		mov	dword ptr [esi+24h], 1

loc_6B194FB8:				; CODE XREF: Ordinal930+CFj
		mov	[ebp+0C4h+var_118], eax
		mov	[ebp+0C4h+var_114], eax
		lea	eax, [ebp+0C4h+var_118]
		push	eax
		mov	ecx, edi
		call	Ordinal1128
		test	eax, eax
		jnz	short loc_6B194FE1
		mov	ecx, edi
		call	Ordinal1052
		mov	[esi+14h], eax
		push	offset aCdatastoreOp_1 ; "CDataStore::Open() : m_File.GetLength()"...
		jmp	loc_6B1950BE
; ---------------------------------------------------------------------------

loc_6B194FE1:				; CODE XREF: Ordinal930+EBj
		push	20h		; Size
		lea	eax, [ebp+0C4h+Dst]
		push	0		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		test	ebx, ebx
		lea	eax, [ebp+0C4h+Dst]
		mov	ecx, esi
		push	eax
		jz	loc_6B1950E0
		mov	ebx, [ebp+0C4h+arg_1C]
		mov	[ebp+0C4h+var_128], ebx
		mov	[esi+20h], ebx
		call	Ordinal959
		test	eax, eax
		jz	loc_6B1950B9
		mov	edi, 100h
		push	edi		; Size
		lea	eax, [ebp+0C4h+Buffer]
		push	0		; Val
		push	eax		; Dst
		call	memset
		and	[ebp+0C4h+var_10C], 0
		add	esp, 0Ch
		test	ebx, ebx
		mov	[ebp+0C4h+nNumberOfBytesToWrite], ebx
		mov	[ebp+0C4h+lDistanceToMove], 20h
		jbe	short loc_6B19507A

loc_6B195041:				; CODE XREF: Ordinal930+198j
		mov	ebx, [ebp+0C4h+nNumberOfBytesToWrite]
		cmp	ebx, edi
		jbe	short loc_6B19504D
		mov	ebx, edi

loc_6B19504D:				; CODE XREF: Ordinal930+169j
		mov	ecx, [ebp+0C4h+var_108]
		push	ebx		; nNumberOfBytesToWrite
		lea	eax, [ebp+0C4h+Buffer]
		push	eax		; lpBuffer
		push	[ebp+0C4h+var_10C] ; int
		push	[ebp+0C4h+lDistanceToMove] ; lDistanceToMove
		call	Ordinal1120
		test	eax, eax
		jz	short loc_6B1950D0
		sub	[ebp+0C4h+nNumberOfBytesToWrite], ebx
		add	[ebp+0C4h+lDistanceToMove], ebx
		adc	[ebp+0C4h+var_10C], 0
		cmp	[ebp+0C4h+nNumberOfBytesToWrite], 0
		ja	short loc_6B195041

loc_6B19507A:				; CODE XREF: Ordinal930+15Fj
		mov	edi, [ebp+0C4h+var_108]

loc_6B19507D:				; CODE XREF: Ordinal930+236j
		mov	ecx, esi
		call	Ordinal950
		test	eax, eax
		jz	loc_6B195123
		lea	eax, [ebp+0C4h+Dst]
		push	eax		; lpBuffer
		lea	eax, [ebp+0C4h+var_118]
		push	eax		; int
		mov	ecx, esi
		call	Ordinal960
		test	eax, eax
		jz	short loc_6B1950ED
		xor	ebx, ebx
		lea	eax, [ebp+0C4h+Dst]
		push	eax
		mov	ecx, esi
		mov	[ebp+0C4h+var_130], ebx
		mov	[ebp+0C4h+var_12C], ebx
		mov	[ebp+0C4h+var_124], ebx
		call	Ordinal959
		test	eax, eax
		jnz	short loc_6B195123

loc_6B1950B9:				; CODE XREF: Ordinal930+132j
		push	offset aCdatastoreOp_2 ; "CDataStore::Open() : WriteHeader() ==	F"...

loc_6B1950BE:				; CODE XREF: Ordinal930+A3j
					; Ordinal930+FCj ...
		call	sub_6B18102E
		pop	ecx
		mov	ecx, edi

loc_6B1950C6:				; CODE XREF: Ordinal930+1FEj
		call	Ordinal1113
		jmp	loc_6B194F62
; ---------------------------------------------------------------------------

loc_6B1950D0:				; CODE XREF: Ordinal930+182j
		push	offset aCdatastoreOp_3 ; "CDataStore::Open() : m_File.Write() == "...
		call	sub_6B18102E
		pop	ecx
		mov	ecx, [ebp+0C4h+var_108]
		jmp	short loc_6B1950C6
; ---------------------------------------------------------------------------

loc_6B1950E0:				; CODE XREF: Ordinal930+119j
		lea	eax, [ebp+0C4h+var_118]
		push	eax		; int
		call	Ordinal960
		test	eax, eax
		jnz	short loc_6B1950F4

loc_6B1950ED:				; CODE XREF: Ordinal930+1BDj
		push	offset aCdatastoreOp_4 ; "CDataStore::Open() : ReadHeader() == FA"...
		jmp	short loc_6B1950BE
; ---------------------------------------------------------------------------

loc_6B1950F4:				; CODE XREF: Ordinal930+20Bj
		mov	eax, [ebp+0C4h+var_128]
		push	4		; Size
		mov	[esi+20h], eax
		lea	eax, [esi+80h]
		push	0		; Val
		push	eax		; Dst
		call	memset
		mov	eax, [esi]
		add	esp, 0Ch
		mov	ecx, esi
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	loc_6B19507D
		push	offset aCdatastoreOp_5 ; "CDataStore::Open() : ValidateFile() == "...
		jmp	short loc_6B1950BE
; ---------------------------------------------------------------------------

loc_6B195123:				; CODE XREF: Ordinal930+1A6j
					; Ordinal930+1D7j
		xor	esi, esi
		inc	esi

loc_6B195126:				; CODE XREF: Ordinal930+84j
		lea	ecx, [ebp+0C4h+var_144]
		call	Ordinal1573
		mov	ecx, [ebp+0C4h+var_4]
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		add	ebp, 0C4h
		leave
		retn	20h
Ordinal930	endp

; Exported entry 931.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal931
Ordinal931	proc near		; CODE XREF: Ordinal760+46p
					; Ordinal928+9p
					; DATA XREF: ...

Buffer		= byte ptr -34h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_20		= dword	ptr -20h
var_14		= byte ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 34h
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		xor	edi, edi
		push	edi
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_14]
		call	Ordinal1571
		xor	ebx, ebx
		mov	ecx, esi
		inc	ebx
		call	Ordinal950
		test	eax, eax
		jz	short loc_6B1951EC
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_8]
		push	eax		; int
		mov	ecx, esi
		mov	[ebp+var_8], edi
		mov	[ebp+var_4], edi
		call	Ordinal960
		test	eax, eax
		jnz	short loc_6B195195
		push	offset aCdatastoreClos ; "CDataStore::Close() :	ReadHeader() ==	F"...
		jmp	short loc_6B1951E4
; ---------------------------------------------------------------------------

loc_6B195195:				; CODE XREF: Ordinal931+44j
		cmp	[esi+1Ch], edi
		mov	eax, [ebp+var_8]
		mov	[ebp+var_2C], eax
		mov	eax, [ebp+var_4]
		mov	[ebp+var_28], eax
		jz	short loc_6B1951CD
		mov	eax, [esi+20h]
		cmp	eax, edi
		jbe	short loc_6B1951CD
		lea	ecx, [ebp+var_20]
		push	ecx		; int
		push	edi		; int
		push	eax		; int
		push	edi		; int
		lea	eax, [esi+8]
		push	20h		; lDistanceToMove
		push	eax		; int
		call	Ordinal925
		add	esp, 18h
		test	eax, eax
		jnz	short loc_6B1951D0
		push	offset aCdatastoreCl_0 ; "CDataStore::Close() :	CCRC32::File() =="...
		jmp	short loc_6B1951E4
; ---------------------------------------------------------------------------

loc_6B1951CD:				; CODE XREF: Ordinal931+5Cj
					; Ordinal931+63j
		mov	[ebp+var_20], edi

loc_6B1951D0:				; CODE XREF: Ordinal931+7Cj
		lea	eax, [ebp+Buffer]
		push	eax
		mov	ecx, esi
		call	Ordinal959
		test	eax, eax
		jnz	short loc_6B1951EC
		push	offset aCdatastoreCl_1 ; "CDataStore::Close() :	WriteHeader() == "...

loc_6B1951E4:				; CODE XREF: Ordinal931+4Bj
					; Ordinal931+83j
		call	sub_6B18102E
		pop	ecx
		xor	ebx, ebx

loc_6B1951EC:				; CODE XREF: Ordinal931+2Bj
					; Ordinal931+95j
		lea	ecx, [esi+8]
		mov	[esi+20h], edi
		mov	[esi+24h], edi
		call	Ordinal1113
		test	eax, eax
		jnz	short loc_6B19520B
		push	offset aCdatastoreCl_2 ; "CDataStore::Close() :	m_File.Close() =="...
		call	sub_6B18102E
		pop	ecx
		xor	ebx, ebx

loc_6B19520B:				; CODE XREF: Ordinal931+B4j
		lea	ecx, [ebp+var_14]
		call	Ordinal1573
		pop	edi
		pop	esi
		mov	eax, ebx
		pop	ebx
		leave
		retn
Ordinal931	endp

; Exported entry 932.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal932
Ordinal932	proc near		; CODE XREF: Ordinal761+5Ap
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	ecx, esi
		call	Ordinal967
		mov	eax, [esi+20h]
		add	eax, 20h
		push	0		; int
		push	eax		; lDistanceToMove
		lea	ecx, [esi+8]
		call	Ordinal1130
		test	eax, eax
		jnz	short loc_6B195261
		push	offset aCdatastoreClea ; "CDataStore::Clear() :	m_File.SetLength("...
		call	sub_6B18102E
		pop	ecx
		xor	esi, esi
		jmp	short loc_6B195264
; ---------------------------------------------------------------------------

loc_6B195261:				; CODE XREF: Ordinal932+36j
		xor	esi, esi
		inc	esi

loc_6B195264:				; CODE XREF: Ordinal932+45j
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal932	endp

; Exported entry 935.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal935(LONG	lDistanceToMove, int, LPVOID lpBuffer, DWORD nNumberOfBytesToRead)
		public Ordinal935
Ordinal935	proc near		; CODE XREF: Ordinal936+98p
					; Ordinal955+11Bp
					; DATA XREF: ...

Buffer		= byte ptr -3Ch
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_14		= byte ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
lDistanceToMove	= dword	ptr  8
arg_4		= dword	ptr  0Ch
lpBuffer	= dword	ptr  10h
nNumberOfBytesToRead= dword ptr	 14h

		push	ebp
		mov	ebp, esp
		sub	esp, 3Ch
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_14]
		call	Ordinal1571
		mov	edi, [ebp+lDistanceToMove]
		mov	ebx, [ebp+arg_4]
		mov	eax, edi
		or	eax, ebx
		jz	loc_6B195345
		xor	eax, eax
		cmp	[ebp+nNumberOfBytesToRead], eax
		jz	loc_6B195345
		cmp	[ebp+lpBuffer],	eax
		jz	loc_6B195345
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_8]
		push	eax		; int
		push	ebx		; int
		push	edi		; lDistanceToMove
		mov	ecx, esi
		call	Ordinal957
		test	eax, eax
		jnz	short loc_6B1952D5
		push	offset aCdatastoreR_18 ; "CDataStore::Read() : ReadIndex() == FAL"...
		jmp	short loc_6B19534A
; ---------------------------------------------------------------------------

loc_6B1952D5:				; CODE XREF: Ordinal935+5Bj
		cmp	[ebp+var_20], 0
		jnz	short loc_6B1952E2
		push	offset aCdatastoreR_19 ; "CDataStore::Read() : index.m_dwDataSize"...
		jmp	short loc_6B19534A
; ---------------------------------------------------------------------------

loc_6B1952E2:				; CODE XREF: Ordinal935+68j
		mov	eax, [ebp+nNumberOfBytesToRead]
		cmp	eax, [ebp+var_20]
		jbe	short loc_6B1952F1
		push	offset aCdatastoreR_20 ; "CDataStore::Read() : dwSize >	index.m_d"...
		jmp	short loc_6B19534A
; ---------------------------------------------------------------------------

loc_6B1952F1:				; CODE XREF: Ordinal935+77j
		push	eax		; nNumberOfBytesToRead
		push	[ebp+lpBuffer]	; lpBuffer
		add	edi, 28h
		adc	ebx, 0
		push	ebx		; int
		lea	ecx, [esi+8]
		push	edi		; lDistanceToMove
		call	Ordinal1118
		test	eax, eax
		jnz	short loc_6B19531B
		lea	ecx, [esi+8]
		call	Ordinal1052
		mov	[esi+14h], eax
		push	offset aCdatastoreR_21 ; "CDataStore::Read() : m_File.Read() ==	F"...
		jmp	short loc_6B19534A
; ---------------------------------------------------------------------------

loc_6B19531B:				; CODE XREF: Ordinal935+96j
		mov	eax, [ebp+var_20]
		cmp	[ebp+nNumberOfBytesToRead], eax
		jnz	short loc_6B195340
		cmp	dword ptr [esi+1Ch], 0
		jz	short loc_6B195340
		push	eax
		push	[ebp+lpBuffer]
		call	Ordinal924
		cmp	eax, [ebp+var_1C]
		pop	ecx
		pop	ecx
		jz	short loc_6B195340
		push	offset aCdatastoreR_22 ; "CDataStore::Read() : dwCRC32 != index.m"...
		jmp	short loc_6B19534A
; ---------------------------------------------------------------------------

loc_6B195340:				; CODE XREF: Ordinal935+B0j
					; Ordinal935+B6j ...
		xor	esi, esi
		inc	esi
		jmp	short loc_6B195352
; ---------------------------------------------------------------------------

loc_6B195345:				; CODE XREF: Ordinal935+28j
					; Ordinal935+33j ...
		push	offset aCdatastoreR_23 ; "CDataStore::Read() : uIndex =	0\n"

loc_6B19534A:				; CODE XREF: Ordinal935+62j
					; Ordinal935+6Fj ...
		call	sub_6B18102E
		pop	ecx
		xor	esi, esi

loc_6B195352:				; CODE XREF: Ordinal935+D2j
		lea	ecx, [ebp+var_14]
		call	Ordinal1573
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		leave
		retn	10h
Ordinal935	endp

; Exported entry 936.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal936(LONG	lDistanceToMove, int, int)
		public Ordinal936
Ordinal936	proc near		; DATA XREF: .rdata:off_6B1BF428o

Buffer		= byte ptr -3Ch
var_20		= dword	ptr -20h
var_14		= byte ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
lDistanceToMove	= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 3Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_14]
		call	Ordinal1571
		mov	eax, [ebp+lDistanceToMove]
		or	eax, [ebp+arg_4]
		jnz	short loc_6B195396
		push	offset aCdatastoreR_23 ; "CDataStore::Read() : uIndex =	0\n"

loc_6B19538C:				; CODE XREF: Ordinal936+59j
					; Ordinal936+66j ...
		call	sub_6B18102E
		pop	ecx
		xor	esi, esi
		jmp	short loc_6B195402
; ---------------------------------------------------------------------------

loc_6B195396:				; CODE XREF: Ordinal936+22j
		and	[ebp+var_8], 0
		and	[ebp+var_4], 0
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_8]
		push	eax		; int
		push	[ebp+arg_4]	; int
		mov	ecx, esi
		push	[ebp+lDistanceToMove] ;	lDistanceToMove
		call	Ordinal957
		test	eax, eax
		jnz	short loc_6B1953BE
		push	offset aCdatastoreR_18 ; "CDataStore::Read() : ReadIndex() == FAL"...
		jmp	short loc_6B19538C
; ---------------------------------------------------------------------------

loc_6B1953BE:				; CODE XREF: Ordinal936+52j
		cmp	[ebp+var_20], 0
		jnz	short loc_6B1953CB
		push	offset aCdatastoreR_19 ; "CDataStore::Read() : index.m_dwDataSize"...
		jmp	short loc_6B19538C
; ---------------------------------------------------------------------------

loc_6B1953CB:				; CODE XREF: Ordinal936+5Fj
		push	[ebp+var_20]
		mov	ecx, [ebp+arg_8]
		call	Ordinal1196
		test	eax, eax
		jnz	short loc_6B1953E1
		push	offset aCdatastoreR_24 ; "CDataStore::Read() : Memory.NewAlloc() "...
		jmp	short loc_6B19538C
; ---------------------------------------------------------------------------

loc_6B1953E1:				; CODE XREF: Ordinal936+75j
		mov	ecx, [ebp+arg_8]
		call	Ordinal1052
		mov	ecx, [ebp+arg_8]
		push	eax		; nNumberOfBytesToRead
		call	Ordinal1493
		push	eax		; lpBuffer
		push	[ebp+arg_4]	; int
		mov	ecx, esi
		push	[ebp+lDistanceToMove] ;	lDistanceToMove
		call	Ordinal935
		mov	esi, eax

loc_6B195402:				; CODE XREF: Ordinal936+31j
		lea	ecx, [ebp+var_14]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn	0Ch
Ordinal936	endp ; sp-analysis failed

; Exported entry 937.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal937(LONG	lDistanceToMove, int, int)
		public Ordinal937
Ordinal937	proc near		; DATA XREF: .rdata:off_6B1BF428o

Buffer		= byte ptr -3Ch
var_20		= dword	ptr -20h
var_14		= byte ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
lDistanceToMove	= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 3Ch
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		xor	edi, edi
		push	edi
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_14]
		call	Ordinal1571
		mov	eax, [ebp+lDistanceToMove]
		or	eax, [ebp+arg_4]
		mov	ebx, [ebp+arg_8]
		mov	[ebx], edi
		jnz	short loc_6B19544A
		push	offset aCdatastoreGeti ; "CDataStore::GetIndexSize() : uIndex =	0"...

loc_6B195442:				; CODE XREF: Ordinal937+5Dj
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B195478
; ---------------------------------------------------------------------------

loc_6B19544A:				; CODE XREF: Ordinal937+2Aj
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_8]
		push	eax		; int
		push	[ebp+arg_4]	; int
		mov	ecx, esi
		push	[ebp+lDistanceToMove] ;	lDistanceToMove
		mov	[ebp+var_8], edi
		mov	[ebp+var_4], edi
		call	Ordinal957
		test	eax, eax
		jnz	short loc_6B195470
		push	offset aCdatastoreGe_0 ; "CDataStore::GetIndexSize() : ReadIndex("...
		jmp	short loc_6B195442
; ---------------------------------------------------------------------------

loc_6B195470:				; CODE XREF: Ordinal937+56j
		mov	eax, [ebp+var_20]
		xor	edi, edi
		mov	[ebx], eax
		inc	edi

loc_6B195478:				; CODE XREF: Ordinal937+37j
		lea	ecx, [ebp+var_14]
		call	Ordinal1573
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	0Ch
Ordinal937	endp

; Exported entry 953.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal953(void	*Dst)
		public Ordinal953
Ordinal953	proc near		; DATA XREF: .rdata:off_6B1BF428o

Buffer		= byte ptr -40h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_18		= byte ptr -18h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
Dst		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 40h
		push	ebx
		push	esi
		push	edi
		mov	ebx, ecx
		xor	edi, edi
		push	edi
		push	0FFFFFFFFh
		lea	eax, [ebx+84h]
		push	eax
		lea	ecx, [ebp+var_18]
		mov	[ebp+var_4], ebx
		call	Ordinal1571
		mov	esi, [ebp+Dst]
		push	40h		; Size
		push	edi		; Val
		push	esi		; Dst
		call	memset
		add	esp, 0Ch
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_C]
		push	eax		; int
		mov	ecx, ebx
		mov	[ebp+var_C], edi
		mov	[ebp+var_8], edi
		call	Ordinal963
		test	eax, eax
		jnz	short loc_6B1954DA
		push	offset aCdatastoreGets ; "CDataStore::GetStatistics() :	ReadFirst"...
		jmp	short loc_6B19554B
; ---------------------------------------------------------------------------

loc_6B1954DA:				; CODE XREF: Ordinal953+48j
		push	1
		pop	ebx
		jmp	short loc_6B19553A
; ---------------------------------------------------------------------------

loc_6B1954DF:				; CODE XREF: Ordinal953+B7j
		mov	ecx, [ebp+var_24]
		cmp	ecx, edi
		mov	eax, [ebp+var_28]
		jnz	short loc_6B1954F7
		add	[esi+20h], ebx
		adc	[esi+24h], edi
		add	[esi+28h], eax
		adc	[esi+2Ch], edi
		jmp	short loc_6B195522
; ---------------------------------------------------------------------------

loc_6B1954F7:				; CODE XREF: Ordinal953+5Ej
		cmp	ecx, eax
		jnz	short loc_6B195508
		add	[esi], ebx
		adc	[esi+4], edi
		add	[esi+8], eax
		adc	[esi+0Ch], edi
		jmp	short loc_6B195522
; ---------------------------------------------------------------------------

loc_6B195508:				; CODE XREF: Ordinal953+70j
		add	[esi+10h], ebx
		adc	[esi+14h], edi
		add	[esi+30h], ebx
		adc	[esi+34h], edi
		add	[esi+18h], ecx
		adc	[esi+1Ch], edi
		sub	eax, ecx
		add	[esi+38h], eax
		adc	[esi+3Ch], edi

loc_6B195522:				; CODE XREF: Ordinal953+6Cj
					; Ordinal953+7Dj
		mov	ecx, [ebp+var_4]
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_C]
		push	eax		; int
		lea	eax, [ebp+Buffer]
		push	eax		; int
		call	Ordinal964
		test	eax, eax
		jz	short loc_6B195546

loc_6B19553A:				; CODE XREF: Ordinal953+54j
		mov	eax, [ebp+var_38]
		or	eax, [ebp+var_34]
		jnz	short loc_6B1954DF
		mov	edi, ebx
		jmp	short loc_6B195551
; ---------------------------------------------------------------------------

loc_6B195546:				; CODE XREF: Ordinal953+AFj
		push	offset aCdatastoreGe_1 ; "CDataStore::GetStatistics() :	ReadNextI"...

loc_6B19554B:				; CODE XREF: Ordinal953+4Fj
		call	sub_6B18102E
		pop	ecx

loc_6B195551:				; CODE XREF: Ordinal953+BBj
		lea	ecx, [ebp+var_18]
		call	Ordinal1573
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal953	endp

; Exported entry 955.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal955
Ordinal955	proc near		; CODE XREF: Ordinal770+9p
					; DATA XREF: .rdata:6B1B2B6Co ...

var_64		= dword	ptr -64h
lDistanceToMove	= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_4C		= dword	ptr -4Ch
nNumberOfBytesToRead= byte ptr -48h
Buffer		= byte ptr -3Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_1C		= byte ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 64h
		push	ebx
		push	edi
		mov	ebx, ecx
		call	Ordinal967
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_C]
		xor	edi, edi
		push	eax		; int
		mov	ecx, ebx
		mov	[ebp+var_C], edi
		mov	[ebp+var_8], edi
		call	Ordinal960
		test	eax, eax
		jnz	short loc_6B19559E
		push	offset aCdatastoreVali ; "CDataStore::ValidateFile() : ReadHeader"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6B19573D
; ---------------------------------------------------------------------------

loc_6B19559E:				; CODE XREF: Ordinal955+28j
		cmp	[ebx+1Ch], edi
		push	esi		; Args
		jz	short loc_6B195602
		cmp	[ebp+var_2C], edi
		jbe	short loc_6B195602
		cmp	[ebp+var_28], edi
		jz	short loc_6B1955F7
		lea	eax, [ebp+var_4]
		push	eax		; int
		push	edi		; int
		push	dword ptr [ebx+20h] ; int
		lea	esi, [ebx+8]
		push	edi		; int
		push	20h		; lDistanceToMove
		push	esi		; int
		mov	[ebp+var_4], edi
		call	Ordinal925
		add	esp, 18h
		test	eax, eax
		jnz	short loc_6B1955E8
		mov	ecx, esi
		call	Ordinal1052
		mov	[ebx+14h], eax
		push	offset aCdatastoreVa_0 ; "CDataStore::ValidateFile() : CCRC32::Fi"...

loc_6B1955DB:				; CODE XREF: Ordinal955+93j
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6B19573C
; ---------------------------------------------------------------------------

loc_6B1955E8:				; CODE XREF: Ordinal955+68j
		mov	eax, [ebp+var_4]
		cmp	eax, [ebp+var_28]
		jz	short loc_6B195602
		push	offset aCdatastoreVa_1 ; "CDataStore::ValidateFile() : dwCRC32 !="...
		jmp	short loc_6B1955DB
; ---------------------------------------------------------------------------

loc_6B1955F7:				; CODE XREF: Ordinal955+4Aj
		push	offset aCdatastoreVa_2 ; "CDataStore::ValidateFile() : header.m_d"...
		call	sub_6B18101A
		pop	ecx

loc_6B195602:				; CODE XREF: Ordinal955+40j
					; Ordinal955+45j ...
		lea	ecx, [ebp+var_1C]
		call	Ordinal1187
		lea	eax, [ebp+var_64]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_C]
		push	eax		; int
		mov	ecx, ebx
		mov	[ebp+var_4], 1
		call	Ordinal963
		test	eax, eax
		jnz	short loc_6B195634
		push	offset aCdatastoreVa_3 ; "CDataStore::ValidateFile() : ReadFirstI"...
		call	sub_6B18102E
		pop	ecx
		jmp	loc_6B195732
; ---------------------------------------------------------------------------

loc_6B195634:				; CODE XREF: Ordinal955+C0j
		mov	eax, [ebp+lDistanceToMove]
		or	eax, [ebp+var_58]
		jz	loc_6B19572C
		jmp	short loc_6B195644
; ---------------------------------------------------------------------------

loc_6B195642:				; CODE XREF: Ordinal955+183j
		xor	edi, edi

loc_6B195644:				; CODE XREF: Ordinal955+DEj
		cmp	dword ptr [ebp+nNumberOfBytesToRead], edi
		jbe	short loc_6B1956A1
		lea	ecx, [ebp+var_1C]
		call	Ordinal1052
		cmp	eax, dword ptr [ebp+nNumberOfBytesToRead]
		jnb	short loc_6B195669
		push	dword ptr [ebp+nNumberOfBytesToRead] ; Args
		lea	ecx, [ebp+var_1C]
		call	Ordinal1196
		test	eax, eax
		jz	loc_6B1956ED

loc_6B195669:				; CODE XREF: Ordinal955+F2j
		push	dword ptr [ebp+nNumberOfBytesToRead] ; nNumberOfBytesToRead
		lea	ecx, [ebp+var_1C]
		call	Ordinal1493
		push	eax		; lpBuffer
		push	[ebp+var_58]	; int
		mov	ecx, ebx
		push	[ebp+lDistanceToMove] ;	lDistanceToMove
		call	Ordinal935
		test	eax, eax
		jz	short loc_6B195700
		push	dword ptr [ebp+nNumberOfBytesToRead]
		mov	esi, [ebx]
		lea	ecx, [ebp+var_1C]
		call	Ordinal1493
		push	eax
		lea	eax, [ebp+var_64]
		push	eax
		mov	ecx, ebx
		call	dword ptr [esi+8]
		test	eax, eax
		jz	short loc_6B195707

loc_6B1956A1:				; CODE XREF: Ordinal955+E5j
		mov	eax, [ebx+4Ch]
		mov	ecx, [ebx+48h]
		mov	edx, [ebp+var_4C]
		sub	ecx, eax
		sub	edx, eax
		cmp	edx, ecx
		jbe	short loc_6B1956BD
		push	0Ah
		lea	edi, [ebx+30h]
		pop	ecx
		lea	esi, [ebp+var_64]
		rep movsd

loc_6B1956BD:				; CODE XREF: Ordinal955+14Ej
		push	0Ah
		pop	ecx
		lea	eax, [ebp+var_64]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_C]
		push	eax		; int
		lea	edi, [ebx+58h]
		lea	esi, [ebp+var_64]
		lea	eax, [ebp+var_64]
		rep movsd
		push	eax		; int
		mov	ecx, ebx
		call	Ordinal964
		test	eax, eax
		jz	short loc_6B195716
		mov	eax, [ebp+lDistanceToMove]
		or	eax, [ebp+var_58]
		jnz	loc_6B195642
		jmp	short loc_6B19572C
; ---------------------------------------------------------------------------

loc_6B1956ED:				; CODE XREF: Ordinal955+101j
		push	offset aCdatastoreVa_4 ; "CDataStore::ValidateFile() : data.NewAl"...
		call	sub_6B18102E
		mov	dword ptr [ebx+14h], 0Eh
		jmp	short loc_6B195711
; ---------------------------------------------------------------------------

loc_6B195700:				; CODE XREF: Ordinal955+122j
		push	offset aCdatastoreVa_5 ; "CDataStore::ValidateFile() : Read() == "...
		jmp	short loc_6B19570C
; ---------------------------------------------------------------------------

loc_6B195707:				; CODE XREF: Ordinal955+13Dj
		push	offset aCdatastoreVa_6 ; "CDataStore::ValidateFile() : ValidateDa"...

loc_6B19570C:				; CODE XREF: Ordinal955+1A3j
		call	sub_6B18102E

loc_6B195711:				; CODE XREF: Ordinal955+19Cj
		mov	[ebp+var_4], edi
		jmp	short loc_6B195724
; ---------------------------------------------------------------------------

loc_6B195716:				; CODE XREF: Ordinal955+17Bj
		push	offset aCdatastoreVa_6 ; "CDataStore::ValidateFile() : ValidateDa"...
		call	sub_6B18102E
		and	[ebp+var_4], 0

loc_6B195724:				; CODE XREF: Ordinal955+1B2j
		pop	ecx
		mov	ecx, ebx
		call	Ordinal967

loc_6B19572C:				; CODE XREF: Ordinal955+D8j
					; Ordinal955+189j
		mov	edi, [ebp+var_4]
		mov	[ebx+28h], edi

loc_6B195732:				; CODE XREF: Ordinal955+CDj
		lea	ecx, [ebp+var_1C]
		call	Ordinal1189
		mov	eax, edi

loc_6B19573C:				; CODE XREF: Ordinal955+81j
		pop	esi

loc_6B19573D:				; CODE XREF: Ordinal955+37j
		pop	edi
		pop	ebx
		leave
		retn
Ordinal955	endp ; sp-analysis failed

; Exported entry 962.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal962
Ordinal962	proc near		; CODE XREF: Ordinal961+20p
					; DATA XREF: .rdata:off_6B1BF428o

var_5C		= byte ptr -5Ch
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
Buffer		= byte ptr -34h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 5Ch
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+arg_4]
		xor	eax, eax
		push	ebx
		mov	ebx, [ebp+arg_0]
		mov	[ecx], eax
		mov	ecx, [ebx+8]
		or	ecx, [ebx+0Ch]
		jnz	short loc_6B195763
		inc	eax
		jmp	loc_6B195A57
; ---------------------------------------------------------------------------

loc_6B195763:				; CODE XREF: Ordinal962+1Aj
		push	esi
		push	edi		; Args
		push	0Ah
		pop	ecx
		push	0Ah
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	esi, ebx
		lea	edi, [ebp+var_5C]
		rep movsd
		pop	ecx
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_C]
		mov	esi, ebx
		lea	edi, [ebp+Buffer]
		push	eax		; int
		rep movsd
		mov	ecx, [ebp+var_4]
		push	ebx		; int
		call	Ordinal964
		test	eax, eax
		jz	loc_6B195A48
		mov	edi, [ebp+var_4]
		lea	eax, [ebp+var_5C]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_C]
		push	eax		; int
		push	ebx		; int
		mov	ecx, edi
		call	Ordinal965
		test	eax, eax
		jz	loc_6B195A48
		mov	eax, [ebp+var_2C]
		or	eax, [ebp+var_28]
		jz	loc_6B195841
		xor	ecx, ecx
		cmp	[ebp+var_18], ecx
		jnz	short loc_6B195841
		cmp	ecx, ecx
		mov	eax, [ebx+18h]
		mov	edx, [ebp+var_1C]
		lea	eax, [eax+edx+28h]
		ja	short loc_6B1957D9
		cmp	eax, 0FFFFFFFFh
		jbe	short loc_6B1957E6

loc_6B1957D9:				; CODE XREF: Ordinal962+91j
		push	offset aCdatastoreMerg ; "CDataStore::MergeEx()	: uBlockSize > DW"...
		call	sub_6B18101A
		pop	ecx
		jmp	short loc_6B195841
; ---------------------------------------------------------------------------

loc_6B1957E6:				; CODE XREF: Ordinal962+96j
		push	ebx
		mov	ecx, edi
		mov	[ebx+18h], eax
		call	Ordinal958
		test	eax, eax
		jz	loc_6B195A01
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_C]
		push	eax		; int
		push	ebx		; int
		mov	ecx, edi
		call	Ordinal964
		test	eax, eax
		jz	loc_6B195A48
		mov	eax, [ebp+var_2C]
		or	eax, [ebp+var_28]
		jz	short loc_6B195838
		mov	eax, [ebx+8]
		mov	[ebp+var_24], eax
		mov	eax, [ebx+0Ch]
		mov	[ebp+var_20], eax
		lea	eax, [ebp+Buffer]
		push	eax
		mov	ecx, edi
		call	Ordinal958
		test	eax, eax
		jz	loc_6B195A01

loc_6B195838:				; CODE XREF: Ordinal962+D6j
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 1

loc_6B195841:				; CODE XREF: Ordinal962+78j
					; Ordinal962+83j ...
		xor	ecx, ecx
		cmp	[ebx+1Ch], ecx
		jnz	loc_6B1958F5
		mov	eax, [ebp+var_54]
		or	eax, [ebp+var_50]
		jz	loc_6B1958F5
		cmp	[ebp+var_40], ecx
		jnz	loc_6B1958F5
		cmp	ecx, ecx
		mov	eax, [ebx+18h]
		mov	edx, [ebp+var_44]
		lea	eax, [eax+edx+28h]
		ja	short loc_6B195874
		cmp	eax, 0FFFFFFFFh
		jbe	short loc_6B195881

loc_6B195874:				; CODE XREF: Ordinal962+12Cj
		push	offset aCdatastoreMerg ; "CDataStore::MergeEx()	: uBlockSize > DW"...
		call	sub_6B18101A
		pop	ecx
		jmp	short loc_6B1958F5
; ---------------------------------------------------------------------------

loc_6B195881:				; CODE XREF: Ordinal962+131j
		mov	[ebp+var_44], eax
		lea	eax, [ebp+var_5C]
		push	eax
		mov	ecx, edi
		call	Ordinal958
		test	eax, eax
		jz	loc_6B195A01
		mov	eax, [ebp+var_2C]
		or	eax, [ebp+var_28]
		jz	short loc_6B1958BE
		mov	eax, [ebp+var_54]
		mov	[ebp+var_24], eax
		mov	eax, [ebp+var_50]
		mov	[ebp+var_20], eax
		lea	eax, [ebp+Buffer]
		push	eax
		mov	ecx, edi
		call	Ordinal958
		test	eax, eax
		jz	loc_6B195A01

loc_6B1958BE:				; CODE XREF: Ordinal962+15Cj
		mov	eax, [ebp+arg_4]
		push	0Ah
		mov	dword ptr [eax], 1
		pop	ecx
		lea	esi, [ebp+var_5C]
		mov	edi, ebx
		rep movsd
		mov	eax, [ebx+8]
		or	eax, [ebx+0Ch]
		jz	short loc_6B1958F2
		mov	ecx, [ebp+var_4]
		lea	eax, [ebp+var_5C]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_C]
		push	eax		; int
		push	ebx		; int
		call	Ordinal965
		test	eax, eax
		jz	loc_6B1959EB

loc_6B1958F2:				; CODE XREF: Ordinal962+196j
		mov	edi, [ebp+var_4]

loc_6B1958F5:				; CODE XREF: Ordinal962+105j
					; Ordinal962+111j ...
		mov	esi, [ebp+var_44]
		mov	ecx, [ebp+var_40]
		sub	esi, ecx
		cmp	dword ptr [ebx+1Ch], 0
		jnz	loc_6B19598A
		mov	eax, [ebp+var_54]
		or	eax, [ebp+var_50]
		jz	short loc_6B19598A
		test	esi, esi
		jbe	short loc_6B19598A
		mov	eax, [ebx+18h]
		add	eax, esi
		cmp	eax, 0FFFFFFFFh
		jbe	short loc_6B19592A
		push	offset aCdatastoreMerg ; "CDataStore::MergeEx()	: uBlockSize > DW"...
		call	sub_6B18101A
		pop	ecx
		jmp	short loc_6B19598A
; ---------------------------------------------------------------------------

loc_6B19592A:				; CODE XREF: Ordinal962+1DAj
		lea	eax, [ebp+var_5C]
		mov	[ebp+var_44], ecx
		push	eax
		mov	ecx, edi
		call	Ordinal958
		test	eax, eax
		jz	loc_6B195A01
		sub	[ebx+8], esi
		push	ebx
		mov	ecx, edi
		sbb	dword ptr [ebx+0Ch], 0
		add	[ebx+18h], esi
		call	Ordinal958
		test	eax, eax
		jz	loc_6B195A01
		mov	eax, [ebp+var_2C]
		or	eax, [ebp+var_28]
		jz	short loc_6B195981
		mov	eax, [ebx+8]
		mov	[ebp+var_24], eax
		mov	eax, [ebx+0Ch]
		mov	[ebp+var_20], eax
		lea	eax, [ebp+Buffer]
		push	eax
		mov	ecx, edi
		call	Ordinal958
		test	eax, eax
		jz	loc_6B195A01

loc_6B195981:				; CODE XREF: Ordinal962+21Fj
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 1

loc_6B19598A:				; CODE XREF: Ordinal962+1C0j
					; Ordinal962+1CCj ...
		mov	eax, [ebp+var_2C]
		or	eax, [ebp+var_28]
		jnz	loc_6B195A43
		mov	eax, [ebx+1Ch]
		mov	ecx, [ebx+18h]
		sub	ecx, eax
		jz	loc_6B195A43
		test	eax, eax
		jnz	short loc_6B1959F2
		push	dword ptr [ebx+0Ch] ; int
		lea	esi, [edi+8]
		push	dword ptr [ebx+8] ; lDistanceToMove
		mov	ecx, esi
		call	Ordinal1130
		test	eax, eax
		jz	short loc_6B195A29
		and	[ebp+var_C], 0
		and	[ebp+var_8], 0
		push	0Ah
		pop	ecx
		lea	esi, [ebp+var_5C]
		mov	edi, ebx
		rep movsd
		mov	eax, [ebx+8]
		or	eax, [ebx+0Ch]
		jz	short loc_6B195A3A
		mov	ecx, [ebp+var_4]
		lea	eax, [ebp+var_5C]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_C]
		push	eax		; int
		push	ebx		; int
		call	Ordinal965
		test	eax, eax
		jnz	short loc_6B195A3A

loc_6B1959EB:				; CODE XREF: Ordinal962+1ABj
		push	offset aCdatastoreMe_0 ; "CDataStore::MergeEx()	: ReadPreviousInd"...
		jmp	short loc_6B195A4D
; ---------------------------------------------------------------------------

loc_6B1959F2:				; CODE XREF: Ordinal962+265j
		push	ebx
		mov	ecx, edi
		mov	[ebx+18h], eax
		call	Ordinal958
		test	eax, eax
		jnz	short loc_6B195A08

loc_6B195A01:				; CODE XREF: Ordinal962+B2j
					; Ordinal962+F1j ...
		push	offset aCdatastoreMe_1 ; "CDataStore::MergeEx()	: WriteIndex() =="...
		jmp	short loc_6B195A4D
; ---------------------------------------------------------------------------

loc_6B195A08:				; CODE XREF: Ordinal962+2BEj
		mov	eax, [ebx+18h]
		xor	ecx, ecx
		add	eax, [ebx+8]
		lea	esi, [edi+8]
		adc	ecx, [ebx+0Ch]
		add	eax, 28h
		adc	ecx, 0
		push	ecx		; int
		push	eax		; lDistanceToMove
		mov	ecx, esi
		call	Ordinal1130
		test	eax, eax
		jnz	short loc_6B195A3A

loc_6B195A29:				; CODE XREF: Ordinal962+279j
		mov	ecx, esi
		call	Ordinal1052
		mov	[edi+14h], eax
		push	offset aCdatastoreMe_2 ; "CDataStore::MergeEx()	: m_File.SetLengt"...
		jmp	short loc_6B195A4D
; ---------------------------------------------------------------------------

loc_6B195A3A:				; CODE XREF: Ordinal962+293j
					; Ordinal962+2A8j ...
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 1

loc_6B195A43:				; CODE XREF: Ordinal962+24Fj
					; Ordinal962+25Dj
		xor	eax, eax
		inc	eax
		jmp	short loc_6B195A55
; ---------------------------------------------------------------------------

loc_6B195A48:				; CODE XREF: Ordinal962+51j
					; Ordinal962+6Cj ...
		push	offset aCdatastoreMe_3 ; "CDataStore::MergeEx()	: ReadNextIndex()"...

loc_6B195A4D:				; CODE XREF: Ordinal962+2AFj
					; Ordinal962+2C5j ...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax

loc_6B195A55:				; CODE XREF: Ordinal962+305j
		pop	edi
		pop	esi

loc_6B195A57:				; CODE XREF: Ordinal962+1Dj
		pop	ebx
		leave
		retn	8
Ordinal962	endp

; Exported entry 966.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal966
Ordinal966	proc near		; CODE XREF: Ordinal933+6Ep
					; Ordinal956+1Ep
					; DATA XREF: ...

Dst		= byte ptr -30h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
lpBuffer	= dword	ptr  8
nNumberOfBytesToWrite= dword ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 30h
		mov	eax, [ebp+arg_C]
		push	ebx
		push	esi
		xor	esi, esi
		mov	ebx, ecx
		mov	[eax], esi
		mov	[eax+4], esi
		cmp	[ebx+28h], esi
		jnz	short loc_6B195A95
		lea	eax, [ebp+Dst]
		push	eax		; Dst
		push	esi		; int
		call	Ordinal968
		test	eax, eax
		jnz	short loc_6B195A95
		push	offset aCdatastoreAp_1 ; "CDataStore::AppendData() : FindAddIndex"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6B195B99
; ---------------------------------------------------------------------------

loc_6B195A95:				; CODE XREF: Ordinal966+17j
					; Ordinal966+25j
		push	edi		; Args
		lea	eax, [ebp+var_8]
		lea	edi, [ebx+8]
		push	eax
		mov	ecx, edi
		mov	[ebp+var_8], esi
		mov	[ebp+var_4], esi
		call	Ordinal1128
		test	eax, eax
		jnz	short loc_6B195ABF
		mov	ecx, edi
		call	Ordinal1052
		push	offset aCdatastoreAp_2 ; "CDataStore::AppendData() : m_File.GetLe"...
		jmp	loc_6B195B8D
; ---------------------------------------------------------------------------

loc_6B195ABF:				; CODE XREF: Ordinal966+50j
		push	28h		; Size
		lea	eax, [ebp+Dst]
		push	esi		; Val
		push	eax		; Dst
		call	memset
		mov	eax, [ebp+var_8]
		mov	edi, [ebp+nNumberOfBytesToWrite]
		mov	[ebp+var_28], eax
		mov	eax, [ebp+var_4]
		mov	[ebp+var_24], eax
		mov	eax, [ebx+60h]
		mov	[ebp+var_20], eax
		mov	eax, [ebx+64h]
		add	esp, 0Ch
		cmp	[ebx+1Ch], esi
		mov	[ebp+var_18], edi
		mov	[ebp+var_1C], eax
		jz	short loc_6B195B01
		push	edi
		push	[ebp+lpBuffer]
		call	Ordinal924
		pop	ecx
		pop	ecx
		mov	[ebp+var_10], eax
		jmp	short loc_6B195B04
; ---------------------------------------------------------------------------

loc_6B195B01:				; CODE XREF: Ordinal966+93j
		mov	[ebp+var_10], esi

loc_6B195B04:				; CODE XREF: Ordinal966+A3j
		lea	eax, [ebp+Dst]
		push	eax
		mov	ecx, ebx
		mov	[ebp+var_14], edi
		call	Ordinal958
		test	eax, eax
		jz	short loc_6B195B80
		mov	eax, [ebp+var_28]
		mov	ecx, [ebp+var_24]
		push	edi		; nNumberOfBytesToWrite
		push	[ebp+lpBuffer]	; lpBuffer
		add	eax, 28h
		adc	ecx, esi
		push	ecx		; int
		push	eax		; lDistanceToMove
		lea	ecx, [ebx+8]
		call	Ordinal1120
		test	eax, eax
		jz	short loc_6B195B80
		cmp	[ebp+arg_8], 0
		push	0Ah
		lea	edi, [ebx+58h]
		pop	ecx
		lea	esi, [ebp+Dst]
		rep movsd
		jz	short loc_6B195B6D
		cmp	dword ptr [ebx+18h], 0
		jz	short loc_6B195B6D
		lea	esi, [ebx+8]
		mov	ecx, esi
		call	Ordinal1124
		test	eax, eax
		jnz	short loc_6B195B6D
		mov	ecx, esi
		call	Ordinal1052
		push	offset aCdatastoreAp_3 ; "CDataStore::AppendData() : m_File.Flush"...
		mov	[ebx+14h], eax
		call	sub_6B18102E
		pop	ecx

loc_6B195B6D:				; CODE XREF: Ordinal966+E6j
					; Ordinal966+ECj ...
		mov	eax, [ebp+arg_C]
		mov	ecx, [ebp+var_28]
		mov	[eax], ecx
		mov	ecx, [ebp+var_24]
		mov	[eax+4], ecx
		xor	eax, eax
		inc	eax
		jmp	short loc_6B195B98
; ---------------------------------------------------------------------------

loc_6B195B80:				; CODE XREF: Ordinal966+B8j
					; Ordinal966+D5j
		lea	ecx, [ebx+8]
		call	Ordinal1052
		push	offset aCdatastoreAp_4 ; "CDataStore::AppendData() : WriteIndex()"...

loc_6B195B8D:				; CODE XREF: Ordinal966+5Ej
		mov	[ebx+14h], eax
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax

loc_6B195B98:				; CODE XREF: Ordinal966+122j
		pop	edi

loc_6B195B99:				; CODE XREF: Ordinal966+34j
		pop	esi
		pop	ebx
		leave
		retn	10h
Ordinal966	endp

; Exported entry 928.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal928
Ordinal928	proc near		; CODE XREF: Ordinal755+11j
					; Ordinal942+71p ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1B2B68
		call	Ordinal931
		lea	ecx, [esi+84h]
		call	Ordinal1616
		lea	ecx, [esi+8]
		pop	esi
		jmp	Ordinal1109
Ordinal928	endp

; Exported entry 929.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal929(LPCSTR Args,	int, int)
		public Ordinal929
Ordinal929	proc near		; CODE XREF: Ordinal942+4Bp
					; DATA XREF: .rdata:off_6B1BF428o

Args		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]	; int
		mov	eax, [esp+4+arg_4]
		push	0		; hTemplateFile
		neg	eax
		push	80h		; dwFlagsAndAttributes
		sbb	eax, eax
		add	eax, 3
		push	eax		; dwCreationDisposition
		push	0		; lpSecurityAttributes
		push	1		; dwShareMode
		push	0C0000000h	; nNumberOfBytesToWrite
		push	[esp+1Ch+Args]	; Args
		call	Ordinal930
		retn	0Ch
Ordinal929	endp

; Exported entry 933.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame fpd=6Ch

; int __stdcall	Ordinal933(LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, int)
		public Ordinal933
Ordinal933	proc near		; CODE XREF: Ordinal934+90p
					; DATA XREF: .rdata:off_6B1BF428o

Buffer		= byte ptr -8Ch
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_64		= byte ptr -64h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_3C		= byte ptr -3Ch
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
Dst		= dword	ptr -28h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
lpBuffer	= dword	ptr  8
nNumberOfBytesToWrite= dword ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		lea	ebp, [esp-6Ch]
		sub	esp, 8Ch
		push	ebx
		push	esi
		push	edi
		mov	ebx, ecx
		xor	edi, edi
		push	edi
		push	0FFFFFFFFh
		lea	eax, [ebx+84h]
		push	eax
		lea	ecx, [ebp+6Ch+var_3C]
		call	Ordinal1571
		mov	esi, [ebp+6Ch+arg_8]
		mov	[esi], edi
		mov	[esi+4], edi
		mov	edi, [ebp+6Ch+nNumberOfBytesToWrite]
		test	edi, edi
		jz	loc_6B195DB5
		cmp	[ebp+6Ch+lpBuffer], 0
		jz	loc_6B195DB5
		lea	eax, [ebp+6Ch+Dst]
		push	eax		; Dst
		push	edi		; int
		mov	ecx, ebx
		call	Ordinal968
		test	eax, eax
		jnz	short loc_6B195C48
		push	offset aCdatastoreAddF ; "CDataStore::Add() : FindAddIndex() ==	F"...
		jmp	loc_6B195DBA
; ---------------------------------------------------------------------------

loc_6B195C48:				; CODE XREF: Ordinal933+4Fj
		mov	eax, [ebp+6Ch+var_20]
		or	eax, [ebp+6Ch+var_1C]
		jnz	short loc_6B195C72
		push	esi
		xor	esi, esi
		inc	esi
		push	esi
		push	edi
		push	[ebp+6Ch+lpBuffer]
		mov	ecx, ebx
		call	Ordinal966
		test	eax, eax
		jnz	loc_6B195DC2
		push	offset aCdatastoreAddA ; "CDataStore::Add() : AppendData() == FAL"...
		jmp	loc_6B195DBA
; ---------------------------------------------------------------------------

loc_6B195C72:				; CODE XREF: Ordinal933+61j
		xor	esi, esi
		cmp	[ebp+6Ch+var_C], esi
		jbe	loc_6B195D1E
		lea	eax, [ebp+6Ch+Buffer]
		push	eax		; lpBuffer
		lea	eax, [ebp+6Ch+var_30]
		push	eax		; int
		lea	eax, [ebp+6Ch+Dst]
		push	eax		; int
		mov	ecx, ebx
		mov	[ebp+6Ch+var_30], esi
		mov	[ebp+6Ch+var_2C], esi
		call	Ordinal964
		test	eax, eax
		jnz	short loc_6B195CA9
		push	offset aCdatastoreAddR ; "CDataStore::Add() : ReadNextIndex() == "...
		call	sub_6B18102E
		jmp	loc_6B195DC1
; ---------------------------------------------------------------------------

loc_6B195CA9:				; CODE XREF: Ordinal933+ABj
		mov	eax, [ebp+6Ch+var_C]
		push	0Ah
		pop	ecx
		lea	esi, [ebp+6Ch+Dst]
		lea	edi, [ebp+6Ch+var_64]
		rep movsd
		mov	[ebp+6Ch+var_10], eax
		lea	eax, [ebp+6Ch+Dst]
		push	eax
		mov	ecx, ebx
		call	Ordinal958
		test	eax, eax
		jz	loc_6B195DAE
		mov	edx, [ebp+6Ch+var_5C]
		mov	eax, [ebp+6Ch+var_48]
		mov	esi, [ebp+6Ch+var_58]
		mov	edi, [ebp+6Ch+var_4C]
		xor	ecx, ecx
		add	eax, edx
		adc	ecx, esi
		add	eax, 28h
		adc	ecx, 0
		sub	edi, [ebp+6Ch+var_48]
		mov	[ebp+6Ch+var_18], edx
		mov	edx, [ebp+6Ch+var_84]
		sub	edi, 28h
		or	edx, [ebp+6Ch+var_80]
		mov	[ebp+6Ch+var_20], eax
		mov	[ebp+6Ch+var_1C], ecx
		mov	[ebp+6Ch+var_10], edi
		mov	[ebp+6Ch+var_14], esi
		jz	short loc_6B195D1B
		mov	[ebp+6Ch+var_7C], eax
		lea	eax, [ebp+6Ch+Buffer]
		mov	[ebp+6Ch+var_78], ecx
		push	eax
		mov	ecx, ebx
		call	Ordinal958
		test	eax, eax
		jz	loc_6B195DAE

loc_6B195D1B:				; CODE XREF: Ordinal933+113j
		mov	edi, [ebp+6Ch+nNumberOfBytesToWrite]

loc_6B195D1E:				; CODE XREF: Ordinal933+8Aj
		cmp	dword ptr [ebx+1Ch], 0
		jz	short loc_6B195D34
		push	edi
		push	[ebp+6Ch+lpBuffer]
		call	Ordinal924
		pop	ecx
		pop	ecx
		mov	[ebp+6Ch+var_8], eax
		jmp	short loc_6B195D38
; ---------------------------------------------------------------------------

loc_6B195D34:				; CODE XREF: Ordinal933+135j
		and	[ebp+6Ch+var_8], 0

loc_6B195D38:				; CODE XREF: Ordinal933+145j
		lea	eax, [ebp+6Ch+Dst]
		push	eax
		mov	ecx, ebx
		mov	[ebp+6Ch+var_C], edi
		call	Ordinal958
		test	eax, eax
		jz	short loc_6B195DA3
		mov	eax, [ebp+6Ch+var_20]
		mov	ecx, [ebp+6Ch+var_1C]
		push	edi		; nNumberOfBytesToWrite
		push	[ebp+6Ch+lpBuffer] ; lpBuffer
		add	eax, 28h
		adc	ecx, 0
		push	ecx		; int
		lea	esi, [ebx+8]
		push	eax		; lDistanceToMove
		mov	ecx, esi
		call	Ordinal1120
		test	eax, eax
		jz	short loc_6B195DA3
		cmp	dword ptr [ebx+18h], 0
		jz	short loc_6B195D90
		mov	ecx, esi
		call	Ordinal1124
		test	eax, eax
		jnz	short loc_6B195D90
		mov	ecx, esi
		call	Ordinal1052
		push	offset aCdatastoreAddM ; "CDataStore::Add() : m_File.Flush() ==	F"...
		mov	[ebx+14h], eax
		call	sub_6B18102E
		pop	ecx

loc_6B195D90:				; CODE XREF: Ordinal933+181j
					; Ordinal933+18Cj
		mov	ecx, [ebp+6Ch+var_20]
		mov	eax, [ebp+6Ch+arg_8]
		mov	[eax], ecx
		mov	ecx, [ebp+6Ch+var_1C]
		xor	esi, esi
		mov	[eax+4], ecx
		inc	esi
		jmp	short loc_6B195DC2
; ---------------------------------------------------------------------------

loc_6B195DA3:				; CODE XREF: Ordinal933+15Bj
					; Ordinal933+17Bj
		lea	ecx, [ebx+8]
		call	Ordinal1052
		mov	[ebx+14h], eax

loc_6B195DAE:				; CODE XREF: Ordinal933+DAj
					; Ordinal933+128j
		push	offset aCdatastoreAddW ; "CDataStore::Add() : WriteIndex() == FAL"...
		jmp	short loc_6B195DBA
; ---------------------------------------------------------------------------

loc_6B195DB5:				; CODE XREF: Ordinal933+31j
					; Ordinal933+3Bj
		push	offset aCdatastoreAddD ; "CDataStore::Add() : dwSize ==	0\n"

loc_6B195DBA:				; CODE XREF: Ordinal933+56j
					; Ordinal933+80j ...
		call	sub_6B18102E
		xor	esi, esi

loc_6B195DC1:				; CODE XREF: Ordinal933+B7j
		pop	ecx

loc_6B195DC2:				; CODE XREF: Ordinal933+75j
					; Ordinal933+1B4j
		lea	ecx, [ebp+6Ch+var_3C]
		call	Ordinal1573
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		add	ebp, 6Ch
		leave
		retn	0Ch
Ordinal933	endp

; Exported entry 942.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame fpd=74h

; int __stdcall	Ordinal942(LPCSTR Args)
		public Ordinal942
Ordinal942	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C4		= byte ptr -0C4h
var_C		= byte ptr -0Ch
Args		= dword	ptr  8

		push	ebp
		lea	ebp, [esp-74h]
		sub	esp, 0C4h
		push	esi
		push	edi
		mov	esi, ecx
		xor	edi, edi
		push	edi
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+74h+var_C]
		call	Ordinal1571
		push	dword ptr [esi+0B0h]
		lea	ecx, [ebp+74h+var_C4]
		push	dword ptr [esi+0ACh]
		push	dword ptr [esi+0A8h]
		push	dword ptr [esi+0A4h]
		call	Ordinal927
		push	edi		; int
		push	edi		; int
		push	[ebp+74h+Args]	; Args
		lea	ecx, [ebp+74h+var_C4]
		call	Ordinal929
		test	eax, eax
		jnz	short loc_6B195E37
		push	offset aCdatastoreAp_5 ; "CDataStore::AppendDataStore()	: appendS"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B195E44
; ---------------------------------------------------------------------------

loc_6B195E37:				; CODE XREF: Ordinal942+52j
		lea	eax, [ebp+74h+var_C4]
		push	eax
		mov	ecx, esi
		call	Ordinal943
		mov	edi, eax

loc_6B195E44:				; CODE XREF: Ordinal942+5Fj
		lea	ecx, [ebp+74h+var_C4]
		call	Ordinal928
		lea	ecx, [ebp+74h+var_C]
		call	Ordinal1573
		mov	eax, edi
		pop	edi
		pop	esi
		add	ebp, 74h
		leave
		retn	4
Ordinal942	endp

; Exported entry 956.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal956
Ordinal956	proc near		; DATA XREF: .rdata:6B1B0558o
					; .rdata:6B1B2B70o ...

var_8		= byte ptr -8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	esi
		mov	esi, ecx
		mov	ecx, [esi+80h]
		test	ecx, ecx
		jz	short loc_6B195EA3
		lea	eax, [ebp+var_8]
		push	eax
		push	0
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		call	Ordinal966
		test	eax, eax
		jnz	short loc_6B195EA3
		mov	ecx, [esi+80h]
		call	Ordinal954
		push	offset aCdatastoreVa_7 ; "CDataStore::ValidateData() : m_AppendIn"...
		mov	[esi+14h], eax
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B195EA6
; ---------------------------------------------------------------------------

loc_6B195EA3:				; CODE XREF: Ordinal956+10j
					; Ordinal956+25j
		xor	eax, eax
		inc	eax

loc_6B195EA6:				; CODE XREF: Ordinal956+42j
		pop	esi
		leave
		retn	0Ch
Ordinal956	endp

; Exported entry 961.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal961
Ordinal961	proc near		; CODE XREF: Ordinal938+8Ep
					; Ordinal934+115p
					; DATA XREF: ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		and	[ebp+var_4], 0
		push	esi
		push	edi
		xor	edi, edi
		mov	esi, ecx
		inc	edi
		jmp	short loc_6B195EC2
; ---------------------------------------------------------------------------

loc_6B195EBC:				; CODE XREF: Ordinal961+27j
		cmp	[ebp+var_4], 0
		jz	short loc_6B195EE1

loc_6B195EC2:				; CODE XREF: Ordinal961+Fj
		lea	eax, [ebp+var_4]
		push	eax
		push	[ebp+arg_0]
		mov	ecx, esi
		call	Ordinal962
		test	eax, eax
		jnz	short loc_6B195EBC
		push	offset aCdatastoreMe_4 ; "CDataStore::Merge() :	MergeEx() == FALS"...
		call	sub_6B18102E
		pop	ecx
		xor	edi, edi

loc_6B195EE1:				; CODE XREF: Ordinal961+15j
		mov	eax, edi
		pop	edi
		pop	esi
		leave
		retn	4
Ordinal961	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B195EE9(void *, char)
sub_6B195EE9	proc near		; DATA XREF: .rdata:off_6B1B2B68o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal928
		test	[esp+4+arg_0], 1
		jz	short loc_6B195EFF
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B195EFF:				; CODE XREF: sub_6B195EE9+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B195EE9	endp

; Exported entry 938.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal938(LONG	lDistanceToMove, int)
		public Ordinal938
Ordinal938	proc near		; CODE XREF: Ordinal934+9Fp
					; DATA XREF: .rdata:off_6B1BF428o

Buffer		= byte ptr -3Ch
var_20		= dword	ptr -20h
var_14		= byte ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
lDistanceToMove	= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 3Ch
		push	esi
		push	edi
		mov	esi, ecx
		xor	edi, edi
		push	edi
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_14]
		call	Ordinal1571
		mov	eax, [ebp+lDistanceToMove]
		or	eax, [ebp+arg_4]
		jnz	short loc_6B195F3B
		push	offset aCdatastoreDele ; "CDataStore::Delete() : uIndex	= 0\n"

loc_6B195F30:				; CODE XREF: Ordinal938+5Aj
					; Ordinal938+66j ...
		call	sub_6B18102E
		pop	ecx
		jmp	loc_6B195FCE
; ---------------------------------------------------------------------------

loc_6B195F3B:				; CODE XREF: Ordinal938+24j
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_8]
		push	eax		; int
		push	[ebp+arg_4]	; int
		mov	ecx, esi
		push	[ebp+lDistanceToMove] ;	lDistanceToMove
		mov	[ebp+var_8], edi
		mov	[ebp+var_4], edi
		call	Ordinal957
		test	eax, eax
		jnz	short loc_6B195F61
		push	offset aCdatastoreDe_0 ; "CDataStore::Delete() : ReadIndex() ==	F"...
		jmp	short loc_6B195F30
; ---------------------------------------------------------------------------

loc_6B195F61:				; CODE XREF: Ordinal938+53j
		cmp	[ebp+var_20], edi
		jnz	short loc_6B195F6D
		push	offset aCdatastoreDe_1 ; "CDataStore::Delete() : Info.m_dwDataSiz"...
		jmp	short loc_6B195F30
; ---------------------------------------------------------------------------

loc_6B195F6D:				; CODE XREF: Ordinal938+5Fj
		mov	ecx, esi
		call	Ordinal967
		lea	eax, [ebp+Buffer]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_20], edi
		call	Ordinal958
		test	eax, eax
		jnz	short loc_6B195F8D
		push	offset aCdatastoreDe_2 ; "CDataStore::Delete() : WriteIndex() == "...
		jmp	short loc_6B195F30
; ---------------------------------------------------------------------------

loc_6B195F8D:				; CODE XREF: Ordinal938+7Fj
		lea	eax, [ebp+Buffer]
		push	eax
		mov	ecx, esi
		call	Ordinal961
		test	eax, eax
		jnz	short loc_6B195FA3
		push	offset aCdatastoreDe_3 ; "CDataStore::Delete() : Merge() == FALSE"...
		jmp	short loc_6B195F30
; ---------------------------------------------------------------------------

loc_6B195FA3:				; CODE XREF: Ordinal938+95j
		cmp	[esi+18h], edi
		jz	short loc_6B195FCB
		lea	edi, [esi+8]
		mov	ecx, edi
		call	Ordinal1124
		test	eax, eax
		jnz	short loc_6B195FCB
		mov	ecx, edi
		call	Ordinal1052
		push	offset aCdatastoreDe_4 ; "CDataStore::Delete() : m_File.Flush()	="...
		mov	[esi+14h], eax
		call	sub_6B18102E
		pop	ecx

loc_6B195FCB:				; CODE XREF: Ordinal938+A1j
					; Ordinal938+AFj
		xor	edi, edi
		inc	edi

loc_6B195FCE:				; CODE XREF: Ordinal938+31j
		lea	ecx, [ebp+var_14]
		call	Ordinal1573
		mov	eax, edi
		pop	edi
		pop	esi
		leave
		retn	8
Ordinal938	endp

; Exported entry 934.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal934(int,	LPCVOID	lpBuffer, DWORD	nNumberOfBytesToWrite)
		public Ordinal934
Ordinal934	proc near		; DATA XREF: .rdata:off_6B1BF428o

Buffer		= byte ptr -44h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_1C		= byte ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
lpBuffer	= dword	ptr  0Ch
nNumberOfBytesToWrite= dword ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 44h
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_1C]
		call	Ordinal1571
		cmp	[ebp+nNumberOfBytesToWrite], ebx
		jz	loc_6B196147
		cmp	[ebp+lpBuffer],	ebx
		jz	loc_6B196147
		mov	edi, [ebp+arg_0]
		mov	eax, [edi]
		mov	ecx, [edi+4]
		mov	edx, eax
		or	edx, ecx
		jz	loc_6B196147
		lea	edx, [ebp+Buffer]
		push	edx		; lpBuffer
		lea	edx, [ebp+var_8]
		push	edx		; int
		push	ecx		; int
		push	eax		; lDistanceToMove
		mov	ecx, esi
		mov	[ebp+var_8], ebx
		mov	[ebp+var_4], ebx
		call	Ordinal957
		test	eax, eax
		jnz	short loc_6B196046
		push	offset aCdatastoreUpda ; "CDataStore::Update() : ReadIndex() ==	F"...
		jmp	loc_6B19614C
; ---------------------------------------------------------------------------

loc_6B196046:				; CODE XREF: Ordinal934+5Cj
		cmp	[ebp+var_28], ebx
		jnz	short loc_6B196055
		push	offset aCdatastoreUp_0 ; "CDataStore::Update() : Info.m_dwDataSiz"...
		jmp	loc_6B19614C
; ---------------------------------------------------------------------------

loc_6B196055:				; CODE XREF: Ordinal934+6Bj
		mov	eax, [ebp+nNumberOfBytesToWrite]
		cmp	[ebp+var_2C], eax
		mov	ecx, esi
		jnb	short loc_6B196098
		mov	eax, [edi+4]
		mov	ebx, [edi]
		push	edi		; int
		push	[ebp+nNumberOfBytesToWrite] ; nNumberOfBytesToWrite
		mov	[ebp+var_C], eax
		push	[ebp+lpBuffer]	; lpBuffer
		call	Ordinal933
		test	eax, eax
		jz	short loc_6B19608E
		push	[ebp+var_C]	; int
		mov	ecx, esi
		push	ebx		; lDistanceToMove
		call	Ordinal938
		test	eax, eax
		jz	short loc_6B19608E

loc_6B196086:				; CODE XREF: Ordinal934+128j
					; Ordinal934+137j ...
		xor	esi, esi
		inc	esi
		jmp	loc_6B196154
; ---------------------------------------------------------------------------

loc_6B19608E:				; CODE XREF: Ordinal934+97j
					; Ordinal934+A6j
		push	offset aCdatastoreUp_1 ; "CDataStore::Update() : Add() == FALSE\n"
		jmp	loc_6B19614C
; ---------------------------------------------------------------------------

loc_6B196098:				; CODE XREF: Ordinal934+7Fj
		call	Ordinal967
		cmp	[esi+1Ch], ebx
		jz	short loc_6B1960B4
		push	[ebp+nNumberOfBytesToWrite]
		push	[ebp+lpBuffer]
		call	Ordinal924
		pop	ecx
		pop	ecx
		mov	[ebp+var_24], eax
		jmp	short loc_6B1960B7
; ---------------------------------------------------------------------------

loc_6B1960B4:				; CODE XREF: Ordinal934+C2j
		mov	[ebp+var_24], ebx

loc_6B1960B7:				; CODE XREF: Ordinal934+D4j
		mov	eax, [ebp+nNumberOfBytesToWrite]
		mov	[ebp+var_28], eax
		lea	eax, [ebp+Buffer]
		push	eax
		mov	ecx, esi
		call	Ordinal958
		test	eax, eax
		jz	short loc_6B196135
		push	[ebp+nNumberOfBytesToWrite] ; nNumberOfBytesToWrite
		mov	eax, [ebp+var_3C]
		push	[ebp+lpBuffer]	; lpBuffer
		mov	ecx, [ebp+var_38]
		add	eax, 28h
		adc	ecx, ebx
		push	ecx		; int
		lea	edi, [esi+8]
		push	eax		; lDistanceToMove
		mov	ecx, edi
		call	Ordinal1120
		test	eax, eax
		jz	short loc_6B196135
		lea	eax, [ebp+Buffer]
		push	eax
		mov	ecx, esi
		call	Ordinal961
		test	eax, eax
		jnz	short loc_6B196103
		push	offset aCdatastoreUp_2 ; "CDataStore::Update() : Merge() == FALSE"...
		jmp	short loc_6B19614C
; ---------------------------------------------------------------------------

loc_6B196103:				; CODE XREF: Ordinal934+11Cj
		cmp	[esi+18h], ebx
		jz	loc_6B196086
		mov	ecx, edi
		call	Ordinal1124
		test	eax, eax
		jnz	loc_6B196086
		mov	ecx, edi
		call	Ordinal1052
		push	offset aCdatastoreUp_3 ; "CDataStore::Update() : m_File.Flush()	="...
		mov	[esi+14h], eax
		call	sub_6B18102E
		pop	ecx
		jmp	loc_6B196086
; ---------------------------------------------------------------------------

loc_6B196135:				; CODE XREF: Ordinal934+ECj
					; Ordinal934+10Dj
		lea	ecx, [esi+8]
		call	Ordinal1052
		mov	[esi+14h], eax
		push	offset aCdatastoreUp_4 ; "CDataStore::Update() : WriteIndex() == "...
		jmp	short loc_6B19614C
; ---------------------------------------------------------------------------

loc_6B196147:				; CODE XREF: Ordinal934+22j
					; Ordinal934+2Bj ...
		push	offset aCdatastoreUp_5 ; "CDataStore::Update() : dwSize	= 0\n"

loc_6B19614C:				; CODE XREF: Ordinal934+63j
					; Ordinal934+72j ...
		call	sub_6B18102E
		pop	ecx
		xor	esi, esi

loc_6B196154:				; CODE XREF: Ordinal934+ABj
		lea	ecx, [ebp+var_1C]
		call	Ordinal1573
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		leave
		retn	0Ch
Ordinal934	endp

; Exported entry 969.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame fpd=0A8h

		public Ordinal969
Ordinal969	proc near		; CODE XREF: Ordinal778+Ep
					; DATA XREF: .rdata:off_6B1BF428o

var_128		= byte ptr -128h
cbData		= dword	ptr -11Ch
var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
Dst		= byte ptr -108h
var_4		= dword	ptr -4

		push	ebp
		lea	ebp, [esp-0A8h]
		sub	esp, 128h
		mov	eax, ___security_cookie
		push	esi
		push	edi
		xor	edi, edi
		mov	esi, ecx
		inc	edi
		push	edi
		mov	[ebp+0A8h+var_4], eax
		mov	dword ptr [esi], offset	off_6B1B3E4C
		mov	dword ptr [esi+4], 3
		call	Ordinal1268
		test	al, al
		pop	ecx
		jnz	loc_6B196275
		push	edi
		call	Ordinal1271
		test	al, al
		pop	ecx
		jnz	loc_6B196275
		push	ebx
		lea	ecx, [ebp+0A8h+var_128]
		mov	dword ptr [esi+4], 2
		call	Ordinal1316
		xor	ebx, ebx
		push	ebx		; int
		push	20019h		; samDesired
		push	offset aClsidBdc678904 ; "CLSID\\{bdc67890-4fc0-11d0-a805-00aa006d"...
		push	80000000h	; hKey
		lea	ecx, [ebp+0A8h+var_128]
		call	Ordinal1321
		test	eax, eax
		jz	loc_6B19626A
		mov	edi, 104h
		push	edi		; Size
		lea	eax, [ebp+0A8h+Dst]
		push	ebx		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		lea	eax, [ebp+0A8h+cbData]
		push	eax		; lpcbData
		lea	eax, [ebp+0A8h+Dst]
		push	eax		; lpData
		push	offset ValueName ; lpValueName
		lea	ecx, [ebp+0A8h+var_128]
		mov	[ebp+0A8h+cbData], edi
		call	Ordinal1331
		test	eax, eax
		jz	short loc_6B19626A
		lea	eax, [ebp+0A8h+var_118]
		push	eax
		lea	eax, [ebp+0A8h+var_110]
		push	eax
		lea	eax, [ebp+0A8h+var_10C]
		push	eax
		lea	eax, [ebp+0A8h+var_114]
		push	eax
		lea	eax, [ebp+0A8h+Dst]
		push	offset aDDDD	; "%d,%d,%d,%d"
		push	eax		; Src
		mov	[ebp+0A8h+var_118], ebx
		mov	[ebp+0A8h+var_110], ebx
		mov	[ebp+0A8h+var_10C], ebx
		mov	[ebp+0A8h+var_114], ebx
		call	ds:sscanf
		add	esp, 18h
		cmp	eax, 4
		jnz	short loc_6B19626A
		cmp	[ebp+0A8h+var_114], eax
		jg	short loc_6B196263
		jnz	short loc_6B19626A
		cmp	[ebp+0A8h+var_10C], 47h
		jg	short loc_6B196263
		jnz	short loc_6B19626A
		cmp	[ebp+0A8h+var_110], ebx
		jg	short loc_6B196263
		jnz	short loc_6B19626A
		cmp	[ebp+0A8h+var_118], 0D00h
		jl	short loc_6B19626A

loc_6B196263:				; CODE XREF: Ordinal969+E2j
					; Ordinal969+EAj ...
		mov	dword ptr [esi+4], 1

loc_6B19626A:				; CODE XREF: Ordinal969+77j
					; Ordinal969+AAj ...
		lea	ecx, [ebp+0A8h+var_128]
		call	Ordinal1318
		pop	ebx
		jmp	short loc_6B196278
; ---------------------------------------------------------------------------

loc_6B196275:				; CODE XREF: Ordinal969+36j
					; Ordinal969+45j
		mov	[esi+4], edi

loc_6B196278:				; CODE XREF: Ordinal969+10Ej
		mov	ecx, [ebp+0A8h+var_4]
		pop	edi
		mov	eax, esi
		pop	esi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		add	ebp, 0A8h
		leave
		retn
Ordinal969	endp

; Exported entry 970.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal970
Ordinal970	proc near		; CODE XREF: Ordinal778+21p
					; DATA XREF: .rdata:off_6B1BF428o
		mov	dword ptr [ecx], offset	off_6B1B3E4C
		retn
Ordinal970	endp

; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_5. PRESS KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1962B3	proc near		; CODE XREF: sub_6B19641A+16Dp

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h
arg_0		= dword	ptr  8

		push	10h
		push	offset stru_6B1B3E50
		call	__SEH_prolog
		xor	eax, eax
		inc	eax
		and	[ebp+ms_exc.disabled], 0
		mov	edx, [ebp+arg_0]
		mov	ecx, [edx]
		mov	[ebp+var_1C], ecx
		cmp	byte ptr [ecx-5], 0E8h
		jnz	short loc_6B1962DB
		add	ecx, 0FFFFFFFBh

loc_6B1962D7:				; CODE XREF: sub_6B1962B3+31j
		mov	[edx], ecx
		jmp	short loc_6B1962F6
; ---------------------------------------------------------------------------

loc_6B1962DB:				; CODE XREF: sub_6B1962B3+1Fj
		cmp	byte ptr [ecx-6], 0FFh
		jnz	short loc_6B1962E6
		add	ecx, 0FFFFFFFAh
		jmp	short loc_6B1962D7
; ---------------------------------------------------------------------------

loc_6B1962E6:				; CODE XREF: sub_6B1962B3+2Cj
		xor	eax, eax
		mov	[ebp+var_20], eax
		jmp	short loc_6B1962F6
; ---------------------------------------------------------------------------

loc_6B1962ED:				; DATA XREF: .rdata:stru_6B1B3E50o
		xor	eax, eax	; Exception filter 0 for function 6B1962B3
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_6B1962F1:				; DATA XREF: .rdata:stru_6B1B3E50o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 6B1962B3
		xor	eax, eax

loc_6B1962F6:				; CODE XREF: sub_6B1962B3+26j
					; sub_6B1962B3+38j
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		call	__SEH_epilog
		retn
sub_6B1962B3	endp

; Exported entry 972.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal972
Ordinal972	proc near		; CODE XREF: Ordinal903+51p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	Ordinal1219
		mov	dword ptr [esi], offset	off_6B1B3E5C
		mov	eax, esi
		pop	esi
		retn
Ordinal972	endp

; Exported entry 977.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal977
Ordinal977	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= byte ptr  4

		cmp	[esp+arg_0], 0
		push	esi
		mov	esi, ecx
		jz	short loc_6B196325
		call	Ordinal1230
		test	al, al
		jz	short loc_6B19634D

loc_6B196325:				; CODE XREF: Ordinal977+8j
		cmp	[esp+4+arg_0], 0
		push	ebx
		mov	bl, 1
		jnz	short loc_6B196335
		and	dword ptr [esi+8], 0
		jmp	short loc_6B19634A
; ---------------------------------------------------------------------------

loc_6B196335:				; CODE XREF: Ordinal977+1Bj
		push	offset Args	; "MiniDumpWriteDump"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6B19634A
		xor	bl, bl

loc_6B19634A:				; CODE XREF: Ordinal977+21j
					; Ordinal977+34j
		mov	al, bl
		pop	ebx

loc_6B19634D:				; CODE XREF: Ordinal977+11j
		pop	esi
		retn	4
Ordinal977	endp

; Exported entry 980.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal980(LPCSTR Args,	int, int)
		public Ordinal980
Ordinal980	proc near		; CODE XREF: Ordinal907+250p
					; sub_6B19641A+1DEp
					; DATA XREF: ...

var_18		= byte ptr -18h
Dst		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
Args		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	esi
		push	edi
		mov	esi, ecx
		xor	edi, edi
		cmp	[esi+8], edi
		jnz	short loc_6B196374
		push	offset aCdebughelpDump ; "CDebugHelp::Dump() : MiniDumpWriteDump "...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6B196414
; ---------------------------------------------------------------------------

loc_6B196374:				; CODE XREF: Ordinal980+Fj
		lea	ecx, [ebp+var_18]
		call	Ordinal1107
		push	edi		; hTemplateFile
		push	80h		; dwFlagsAndAttributes
		push	2		; dwCreationDisposition
		push	edi		; lpSecurityAttributes
		push	edi		; dwShareMode
		push	40000000h	; dwDesiredAccess
		push	[ebp+Args]	; Args
		lea	ecx, [ebp+var_18]
		call	Ordinal1112
		test	eax, eax
		jnz	short loc_6B1963A7
		push	offset aCdebughelpDu_0 ; "CDebugHelp::Dump() : dumpFile.Open() =="...
		call	sub_6B18102E

loc_6B1963A4:				; CODE XREF: Ordinal980+B4j
		pop	ecx
		jmp	short loc_6B19640A
; ---------------------------------------------------------------------------

loc_6B1963A7:				; CODE XREF: Ordinal980+47j
		push	0Ch		; Size
		lea	eax, [ebp+Dst]
		push	edi		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		call	ds:GetCurrentThreadId
		mov	[ebp+Dst], eax
		mov	eax, [ebp+arg_8]
		push	edi
		mov	[ebp+var_8], eax
		push	edi
		lea	eax, [ebp+Dst]
		push	eax
		push	[ebp+arg_4]
		lea	ecx, [ebp+var_18]
		mov	[ebp+var_4], 1
		call	Ordinal1649
		push	eax
		call	ds:GetCurrentProcessId
		push	eax
		call	ds:GetCurrentProcess
		push	eax
		call	dword ptr [esi+8]
		test	eax, eax
		jnz	short loc_6B196407
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCdebughelpDu_1 ; "CDebugHelp::Dump() : MiniDumpWriteDump("...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B1963A4
; ---------------------------------------------------------------------------

loc_6B196407:				; CODE XREF: Ordinal980+A0j
		xor	edi, edi
		inc	edi

loc_6B19640A:				; CODE XREF: Ordinal980+54j
		lea	ecx, [ebp+var_18]
		call	Ordinal1109
		mov	eax, edi

loc_6B196414:				; CODE XREF: Ordinal980+1Ej
		pop	edi
		pop	esi
		leave
		retn	0Ch
Ordinal980	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_6B19641A(int,	LPCSTR Args, int)
sub_6B19641A	proc near		; CODE XREF: Ordinal981+9p

var_5FC		= byte ptr -5FCh
var_5F0		= dword	ptr -5F0h
var_5AC		= dword	ptr -5ACh
var_5A8		= dword	ptr -5A8h
var_5A4		= dword	ptr -5A4h
var_5A0		= dword	ptr -5A0h
var_510		= dword	ptr -510h
var_50C		= dword	ptr -50Ch
var_508		= dword	ptr -508h
var_504		= dword	ptr -504h
var_500		= dword	ptr -500h
var_4FC		= dword	ptr -4FCh
var_4F8		= dword	ptr -4F8h
var_4F4		= dword	ptr -4F4h
var_4F0		= dword	ptr -4F0h
var_4EC		= dword	ptr -4ECh
var_4E8		= dword	ptr -4E8h
var_4E0		= dword	ptr -4E0h
var_4D8		= dword	ptr -4D8h
var_4D4		= dword	ptr -4D4h
Dst		= dword	ptr -2D0h
var_244		= dword	ptr -244h
var_240		= dword	ptr -240h
var_23C		= dword	ptr -23Ch
var_238		= dword	ptr -238h
var_234		= dword	ptr -234h
var_230		= dword	ptr -230h
var_22C		= dword	ptr -22Ch
var_228		= dword	ptr -228h
var_224		= dword	ptr -224h
var_220		= dword	ptr -220h
var_21C		= dword	ptr -21Ch
var_218		= dword	ptr -218h
var_214		= dword	ptr -214h
var_208		= dword	ptr -208h
var_0		= dword	ptr  0
arg_0		= dword	ptr  8
Args		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 5FCh
		mov	[ebp+var_4EC], eax
		mov	[ebp+var_4F8], ebx
		mov	[ebp+var_4F0], ecx
		mov	[ebp+var_4F4], edx
		mov	[ebp+var_500], edi
		mov	[ebp+var_4FC], esi
		xor	eax, eax
		mov	ax, gs
		mov	[ebp+var_510], eax
		mov	ax, fs
		mov	[ebp+var_50C], eax
		mov	ax, es
		mov	[ebp+var_508], eax
		mov	ax, ds
		mov	[ebp+var_504], eax
		mov	ax, cs
		mov	[ebp+var_4E0], eax
		mov	ax, ss
		mov	[ebp+var_4D4], eax
		mov	eax, [ebp+var_0]
		mov	[ebp+var_4E8], eax
		mov	eax, ebp
		add	eax, 8
		mov	[ebp+var_4D8], eax
		push	esi
		push	edi
		push	ebx
		push	ecx
		push	edx
		push	2CCh		; Size
		xor	esi, esi
		lea	eax, [ebp+Dst]
		push	esi		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		lea	eax, [ebp+Dst]
		push	eax		; lpContext
		mov	[ebp+Dst], 1003Fh
		call	ds:GetCurrentThread
		push	eax		; hThread
		call	ds:GetThreadContext
		cmp	eax, esi
		mov	[ebp+var_5A0], eax
		jz	loc_6B196603
		mov	eax, [ebp+var_4EC]
		mov	[ebp+var_220], eax
		mov	eax, [ebp+var_4F8]
		mov	[ebp+var_22C], eax
		mov	eax, [ebp+var_4F0]
		mov	[ebp+var_224], eax
		mov	eax, [ebp+var_4F4]
		mov	[ebp+var_228], eax
		mov	eax, [ebp+var_500]
		mov	[ebp+var_234], eax
		mov	eax, [ebp+var_4FC]
		mov	[ebp+var_230], eax
		mov	eax, [ebp+var_510]
		mov	[ebp+var_244], eax
		mov	eax, [ebp+var_50C]
		mov	[ebp+var_240], eax
		mov	eax, [ebp+var_508]
		mov	[ebp+var_23C], eax
		mov	eax, [ebp+var_504]
		mov	[ebp+var_238], eax
		mov	eax, [ebp+var_4E0]
		mov	[ebp+var_214], eax
		mov	eax, [ebp+var_4D4]
		mov	[ebp+var_208], eax
		mov	eax, [ebp+var_4E8]
		mov	[ebp+var_21C], eax
		mov	eax, [ebp+4]
		mov	[ebp+var_5A4], eax
		lea	eax, [ebp+var_5A4]
		push	eax
		call	sub_6B1962B3
		cmp	eax, esi
		pop	ecx
		mov	[ebp+var_5A0], eax
		jz	short loc_6B196603
		mov	eax, [ebp+var_5A4]
		push	50h		; Size
		mov	[ebp+var_218], eax
		lea	eax, [ebp+var_5FC]
		push	esi		; Val
		push	eax		; Dst
		call	memset
		push	8		; Size
		lea	eax, [ebp+var_5AC]
		push	esi		; Val
		push	eax		; Dst
		call	memset
		mov	eax, [ebp+var_218]
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_5F0], eax
		lea	eax, [ebp+Dst]
		mov	[ebp+var_5A8], eax
		lea	eax, [ebp+var_5FC]
		add	esp, 18h
		mov	[ebp+var_5AC], eax
		lea	eax, [ebp+var_5AC]
		push	eax		; int
		push	[ebp+arg_8]	; int
		push	[ebp+Args]	; Args
		call	Ordinal980
		mov	[ebp+var_5A0], eax

loc_6B196603:				; CODE XREF: sub_6B19641A+BBj
					; sub_6B19641A+17Bj
		pop	edx
		pop	ecx
		pop	ebx
		pop	edi
		pop	esi
		mov	eax, [ebp+var_5A0]
		mov	esp, ebp
		pop	ebp
		retn
sub_6B19641A	endp

; Exported entry 974.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal974(LPCSTR Args)
		public Ordinal974
Ordinal974	proc near		; CODE XREF: Ordinal978+13p
					; DATA XREF: .rdata:off_6B1BF428o

Args		= dword	ptr  4

		push	esi
		push	[esp+4+Args]	; Args
		mov	esi, ecx
		call	Ordinal1226
		test	al, al
		jz	short loc_6B19662D
		mov	ecx, esi
		call	Ordinal1230
		test	al, al
		jnz	short loc_6B196631

loc_6B19662D:				; CODE XREF: Ordinal974+Ej
		xor	al, al
		jmp	short loc_6B19664C
; ---------------------------------------------------------------------------

loc_6B196631:				; CODE XREF: Ordinal974+19j
		push	ebx
		push	offset Args	; "MiniDumpWriteDump"
		mov	ecx, esi
		mov	bl, 1
		call	Ordinal1229
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6B196649
		xor	bl, bl

loc_6B196649:				; CODE XREF: Ordinal974+33j
		mov	al, bl
		pop	ebx

loc_6B19664C:				; CODE XREF: Ordinal974+1Dj
		pop	esi
		retn	4
Ordinal974	endp

; Exported entry 975.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal975(LPCSTR Args,	DWORD dwFlags)
		public Ordinal975
Ordinal975	proc near		; DATA XREF: .rdata:off_6B1BF428o

Args		= dword	ptr  4
dwFlags		= dword	ptr  8

		push	esi
		push	[esp+4+dwFlags]	; dwFlags
		mov	esi, ecx
		push	[esp+8+Args]	; Args
		call	Ordinal1227
		test	al, al
		jz	short loc_6B19666F
		mov	ecx, esi
		call	Ordinal1230
		test	al, al
		jnz	short loc_6B196673

loc_6B19666F:				; CODE XREF: Ordinal975+12j
		xor	al, al
		jmp	short loc_6B19668E
; ---------------------------------------------------------------------------

loc_6B196673:				; CODE XREF: Ordinal975+1Dj
		push	ebx
		push	offset Args	; "MiniDumpWriteDump"
		mov	ecx, esi
		mov	bl, 1
		call	Ordinal1229
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6B19668B
		xor	bl, bl

loc_6B19668B:				; CODE XREF: Ordinal975+37j
		mov	al, bl
		pop	ebx

loc_6B19668E:				; CODE XREF: Ordinal975+21j
		pop	esi
		retn	8
Ordinal975	endp

; Exported entry 981.

; =============== S U B	R O U T	I N E =======================================


; int __thiscall Ordinal981(int, LPCSTR	Args, int)
		public Ordinal981
Ordinal981	proc near		; CODE XREF: Ordinal907+234p
					; DATA XREF: .rdata:off_6B1BF428o

Args		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]	; int
		push	[esp+4+Args]	; Args
		push	ecx		; int
		call	sub_6B19641A
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_6B1966B6
		push	offset aCdebughelpSnap ; "CDebugHelp::Snap() : DumpWithContext() "...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short locret_6B1966B9
; ---------------------------------------------------------------------------

loc_6B1966B6:				; CODE XREF: Ordinal981+13j
		xor	eax, eax
		inc	eax

locret_6B1966B9:			; CODE XREF: Ordinal981+22j
		retn	8
Ordinal981	endp

; Exported entry 973.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal973
Ordinal973	proc near		; CODE XREF: Ordinal904+2Fp
					; sub_6B1966F3+3p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+8], 0
		mov	dword ptr [esi], offset	off_6B1B3E5C
		call	Ordinal1228
		mov	ecx, esi
		pop	esi
		jmp	Ordinal1221
Ordinal973	endp

; Exported entry 978.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal978
Ordinal978	proc near		; CODE XREF: Ordinal905+27p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+8], 0
		call	Ordinal1228
		push	offset aDbghelp_dll ; "DBGHELP.DLL"
		mov	ecx, esi
		call	Ordinal974
		movzx	eax, al
		pop	esi
		retn
Ordinal978	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1966F3(void *, char)
sub_6B1966F3	proc near		; DATA XREF: .rdata:off_6B1B3E5Co

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal973
		test	[esp+4+arg_0], 1
		jz	short loc_6B196709
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B196709:				; CODE XREF: sub_6B1966F3+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1966F3	endp

; Exported entry 995.
; Exported entry 1095.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1095
Ordinal1095	proc near		; CODE XREF: Ordinal147+25p
					; Ordinal147+A8p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0] ; ccL35_995
		mov	[ecx+4], eax
		retn	4
Ordinal1095	endp

; Exported entry 997.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal997
Ordinal997	proc near		; CODE XREF: Ordinal147+7Fp
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+2Ch], eax
		retn	4
Ordinal997	endp

; Exported entry 999.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal999
Ordinal999	proc near		; CODE XREF: Ordinal147+4Dp
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+1Ch], eax
		retn	4
Ordinal999	endp

; Exported entry 1001.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1001
Ordinal1001	proc near		; CODE XREF: Ordinal147+57p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+20h], eax
		retn	4
Ordinal1001	endp

; Exported entry 1003.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1003
Ordinal1003	proc near		; CODE XREF: Ordinal147+61p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+24h], eax
		retn	4
Ordinal1003	endp

; Exported entry 1005.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1005
Ordinal1005	proc near		; CODE XREF: Ordinal147+6Bp
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+28h], eax
		retn	4
Ordinal1005	endp

; Exported entry 1007.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1007
Ordinal1007	proc near		; CODE XREF: Ordinal147+2Fp
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+10h], eax
		retn	4
Ordinal1007	endp

; Exported entry 1009.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1009
Ordinal1009	proc near		; CODE XREF: Ordinal147+39p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+14h], eax
		retn	4
Ordinal1009	endp

; Exported entry 1010.
; Exported entry 1098.
; Exported entry 1495.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1010
Ordinal1010	proc near		; CODE XREF: Ordinal146+137p
					; Ordinal905+78p ...
		mov	eax, [ecx+14h]	; ccL35_1010
					; ccL35_1098
		retn
Ordinal1010	endp

; Exported entry 1012.
; Exported entry 1100.
; Exported entry 1496.
; Exported entry 1744.
; Exported entry 1813.
; Exported entry 1854.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1854
Ordinal1854	proc near		; CODE XREF: Ordinal907+15Ap
					; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+18h]	; ccL35_1012
					; ccL35_1100
					; ccL35_1496
					; ccL35_1744
					; ccL35_1813
		retn
Ordinal1854	endp

; Exported entry 1017.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1017
Ordinal1017	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+58h], eax
		retn	4
Ordinal1017	endp

; Exported entry 1018.
; Exported entry 1885.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1018
Ordinal1018	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+58h]	; ccL35_1018
		retn
Ordinal1018	endp

; Exported entry 1019.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1019
Ordinal1019	proc near		; CODE XREF: Ordinal986+33p
					; Ordinal987+10p ...

arg_0		= dword	ptr  4

		jmp	short loc_6B196779
; ---------------------------------------------------------------------------

loc_6B196777:				; CODE XREF: Ordinal1019+9j
		mov	ecx, eax

loc_6B196779:				; CODE XREF: Ordinal1019j
		mov	eax, [ecx+58h]
		test	eax, eax
		jnz	short loc_6B196777
		mov	ecx, [ecx+4]
		test	ecx, ecx
		jz	short loc_6B196790
		cmp	ecx, [esp+arg_0]
		jg	short loc_6B196790
		inc	eax
		jmp	short locret_6B196792
; ---------------------------------------------------------------------------

loc_6B196790:				; CODE XREF: Ordinal1019+10j
					; Ordinal1019+16j
		xor	eax, eax

locret_6B196792:			; CODE XREF: Ordinal1019+19j
		retn	4
Ordinal1019	endp

; Exported entry 1020.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1020
Ordinal1020	proc near		; CODE XREF: Ordinal147+75p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+30h], eax
		retn	4
Ordinal1020	endp

; Exported entry 1021.
; Exported entry 1502.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1021
Ordinal1021	proc near		; CODE XREF: Ordinal1056+7Dp
					; Ordinal1422+BFp
					; DATA XREF: ...
		mov	eax, [ecx+30h]	; ccL35_1021
		retn
Ordinal1021	endp

; Exported entry 1022.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1022
Ordinal1022	proc near		; CODE XREF: Ordinal982+49p
					; Ordinal983+4Ap
					; DATA XREF: ...

var_1C		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h

		push	0Ch
		push	offset stru_6B1B3F78
		call	__SEH_prolog
		mov	esi, ecx
		mov	[ebp+var_1C], esi
		cmp	dword ptr [esi+50h], 0
		jz	short loc_6B1967BF
		xor	eax, eax
		inc	eax
		jmp	short loc_6B1967EB
; ---------------------------------------------------------------------------

loc_6B1967BF:				; CODE XREF: Ordinal1022+15j
		and	[ebp+ms_exc.disabled], 0
		lea	eax, [esi+38h]
		push	eax		; lpCriticalSection
		call	ds:InitializeCriticalSection
		mov	dword ptr [esi+50h], 1
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		jmp	short loc_6B1967E8
; ---------------------------------------------------------------------------

loc_6B1967DA:				; DATA XREF: .rdata:stru_6B1B3F78o
		xor	eax, eax	; Exception filter 0 for function 6B1967A3
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_6B1967DE:				; DATA XREF: .rdata:stru_6B1B3F78o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 6B1967A3
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		mov	esi, [ebp+var_1C]

loc_6B1967E8:				; CODE XREF: Ordinal1022+35j
		mov	eax, [esi+50h]

loc_6B1967EB:				; CODE XREF: Ordinal1022+1Aj
		call	__SEH_epilog
		retn
Ordinal1022	endp

; Exported entry 1023.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1023
Ordinal1023	proc near		; CODE XREF: Ordinal151+3p
					; Ordinal152+3p ...

ms_exc		= CPPEH_RECORD ptr -18h

		push	8
		push	offset stru_6B1B3F88
		call	__SEH_prolog
		cmp	dword ptr [ecx+50h], 0
		jz	short loc_6B196825
		and	[ebp+ms_exc.disabled], 0
		add	ecx, 38h
		push	ecx		; lpCriticalSection
		call	ds:EnterCriticalSection
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		xor	eax, eax
		inc	eax
		jmp	short loc_6B196827
; ---------------------------------------------------------------------------

loc_6B19681A:				; DATA XREF: .rdata:stru_6B1B3F88o
		xor	eax, eax	; Exception filter 0 for function 6B1967F1
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_6B19681E:				; DATA XREF: .rdata:stru_6B1B3F88o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 6B1967F1
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh

loc_6B196825:				; CODE XREF: Ordinal1023+10j
		xor	eax, eax

loc_6B196827:				; CODE XREF: Ordinal1023+27j
		call	__SEH_epilog
		retn
Ordinal1023	endp

; Exported entry 1024.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1024
Ordinal1024	proc near		; CODE XREF: Ordinal151+1Ep
					; Ordinal152+2Fp ...
		cmp	dword ptr [ecx+50h], 0
		jz	short locret_6B19683D
		add	ecx, 38h
		push	ecx		; lpCriticalSection
		call	ds:LeaveCriticalSection

locret_6B19683D:			; CODE XREF: Ordinal1024+4j
		retn
Ordinal1024	endp

; Exported entry 448.
; Exported entry 1014.
; Exported entry 1038.
; Exported entry 1052.
; Exported entry 1088.
; Exported entry 1094.
; Exported entry 1134.
; Exported entry 1207.
; Exported entry 1315.
; Exported entry 1329.
; Exported entry 1358.
; Exported entry 1481.
; Exported entry 1492.
; Exported entry 1576.
; Exported entry 1597.
; Exported entry 1603.
; Exported entry 1783.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1052
Ordinal1052	proc near		; CODE XREF: Ordinal147+BBp
					; Ordinal406+21p ...
		mov	eax, [ecx+8]	; ccL35_448
					; ccL35_1014
					; ccL35_1038
					; ccL35_1052
					; ccL35_1088
					; ccL35_1094
					; ccL35_1134
					; ccL35_1207
					; ccL35_1315
					; ccL35_1329
					; ccL35_1358
					; ccL35_1481
					; ccL35_1492
					; ccL35_1576
					; ccL35_1597
					; ccL35_1603
		retn
Ordinal1052	endp

; Exported entry 870.
; Exported entry 1016.
; Exported entry 1040.
; Exported entry 1102.
; Exported entry 1191.
; Exported entry 1192.
; Exported entry 1208.
; Exported entry 1244.
; Exported entry 1460.
; Exported entry 1493.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1493
Ordinal1493	proc near		; CODE XREF: Ordinal407+21p
					; Ordinal408+52p ...
		mov	eax, [ecx+0Ch]	; ccL35_870
					; ccL35_1016
					; ccL35_1040
					; ccL35_1102
					; ccL35_1191
					; ccL35_1192
					; ccL35_1208
					; ccL35_1244
					; ccL35_1460
		retn
Ordinal1493	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6B196846(int,	unsigned __int8	*)
sub_6B196846	proc near		; CODE XREF: Ordinal1013+1Ep
					; Ordinal1015+1Ep

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		push	[esp+arg_4]	; unsigned __int8 *
		push	eax		; unsigned __int8 *
		call	ds:_mbscmp
		neg	eax
		pop	ecx
		sbb	eax, eax
		pop	ecx
		neg	eax
		retn
sub_6B196846	endp

; Exported entry 984.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal984
Ordinal984	proc near		; CODE XREF: Ordinal150+6j
					; sub_6B1968F4+3p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+50h], 0
		mov	dword ptr [esi], offset	off_6B1B3F94
		jz	short loc_6B19687D
		lea	eax, [esi+38h]
		push	eax		; lpCriticalSection
		call	ds:DeleteCriticalSection
		and	dword ptr [esi+50h], 0

loc_6B19687D:				; CODE XREF: Ordinal984+Dj
		mov	eax, [esi+34h]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_6B196890
		push	eax		; hObject
		call	ds:CloseHandle
		or	dword ptr [esi+34h], 0FFFFFFFFh

loc_6B196890:				; CODE XREF: Ordinal984+23j
		lea	ecx, [esi+0Ch]
		call	sub_6B1899B5
		lea	ecx, [esi+8]
		pop	esi
		jmp	sub_6B1899B5
Ordinal984	endp

; Exported entry 982.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal982
Ordinal982	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		push	edi
		xor	edi, edi
		lea	ecx, [esi+8]
		mov	dword ptr [esi], offset	off_6B1B3F94
		mov	[esi+4], edi
		call	sub_6B181879
		lea	ecx, [esi+0Ch]
		call	sub_6B181879
		or	dword ptr [esi+34h], 0FFFFFFFFh
		mov	ecx, esi
		mov	[esi+10h], edi
		mov	[esi+14h], edi
		mov	[esi+18h], edi
		mov	[esi+1Ch], edi
		mov	[esi+20h], edi
		mov	[esi+24h], edi
		mov	[esi+28h], edi
		mov	[esi+2Ch], edi
		mov	[esi+30h], edi
		mov	[esi+50h], edi
		mov	[esi+54h], edi
		mov	[esi+58h], edi
		call	Ordinal1022
		pop	edi
		mov	eax, esi
		pop	esi
		retn
Ordinal982	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1968F4(void *, char)
sub_6B1968F4	proc near		; DATA XREF: .rdata:off_6B1B3F94o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal984
		test	[esp+4+arg_0], 1
		jz	short loc_6B19690A
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B19690A:				; CODE XREF: sub_6B1968F4+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1968F4	endp

; Exported entry 986.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal986(int,	char *Format, va_list Args)
		public Ordinal986
Ordinal986	proc near		; CODE XREF: Ordinal987+26p
					; Ordinal988+21p ...

SystemTime	= _SYSTEMTIME ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Format		= dword	ptr  0Ch
Args		= dword	ptr  10h

		mov	eax, offset unknown_libname_80 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 18h
		push	ebx
		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		push	edi
		mov	[ebp+var_10], esp
		call	dword ptr [eax+8]
		xor	ebx, ebx
		jmp	short loc_6B196937
; ---------------------------------------------------------------------------

loc_6B19692E:				; CODE XREF: Ordinal986+2Cj
		mov	esi, eax
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+8]

loc_6B196937:				; CODE XREF: Ordinal986+1Cj
		mov	eax, [esi+58h]
		cmp	eax, ebx
		jnz	short loc_6B19692E
		push	[ebp+arg_0]
		mov	ecx, esi
		call	Ordinal1019
		test	eax, eax
		jz	loc_6B196A82
		lea	ecx, [ebp+var_14]
		call	sub_6B181879
		cmp	[esi+24h], ebx
		mov	[ebp+var_4], ebx
		mov	byte ptr [ebp+var_4], 1
		jz	short loc_6B1969A2
		lea	eax, [ebp+SystemTime]
		push	eax		; lpSystemTime
		call	ds:GetLocalTime
		movzx	eax, [ebp+SystemTime.wMilliseconds]
		push	eax
		movzx	eax, [ebp+SystemTime.wSecond]
		push	eax
		movzx	eax, [ebp+SystemTime.wMinute]
		push	eax
		movzx	eax, [ebp+SystemTime.wHour]
		push	eax
		movzx	eax, [ebp+SystemTime.wDay]
		push	eax
		movzx	eax, [ebp+SystemTime.wMonth]
		push	eax
		movzx	eax, [ebp+SystemTime.wYear]
		push	eax		; Args
		lea	eax, [ebp+var_14]
		push	offset a04d02d02d02d_0 ; "%04d-%02d-%02d-%02d-%02d-%02d-%03d : "
		push	eax		; int
		call	sub_6B1824C6
		add	esp, 24h

loc_6B1969A2:				; CODE XREF: Ordinal986+52j
		cmp	[esi+28h], ebx
		jz	short loc_6B1969C4
		mov	eax, [esi+8]
		cmp	[eax-0Ch], ebx
		jz	short loc_6B1969C4
		push	eax		; Args
		mov	edi, offset aS_0 ; "%s : "
		lea	eax, [ebp+var_14]
		push	edi		; Format
		push	eax		; int
		call	sub_6B1824C6
		add	esp, 0Ch
		jmp	short loc_6B1969C9
; ---------------------------------------------------------------------------

loc_6B1969C4:				; CODE XREF: Ordinal986+95j
					; Ordinal986+9Dj
		mov	edi, offset aS_0 ; "%s : "

loc_6B1969C9:				; CODE XREF: Ordinal986+B2j
		cmp	[esi+20h], ebx
		jz	short loc_6B1969E6
		call	ds:GetCurrentProcessId
		push	eax		; Args
		lea	eax, [ebp+var_14]
		push	offset a0x04x	; "0x%04X : "
		push	eax		; int
		call	sub_6B1824C6
		add	esp, 0Ch

loc_6B1969E6:				; CODE XREF: Ordinal986+BCj
		cmp	[esi+1Ch], ebx
		jz	short loc_6B196A03
		call	ds:GetCurrentThreadId
		push	eax		; Args
		lea	eax, [ebp+var_14]
		push	offset a0x04x	; "0x%04X : "
		push	eax		; int
		call	sub_6B1824C6
		add	esp, 0Ch

loc_6B196A03:				; CODE XREF: Ordinal986+D9j
		cmp	[esi+30h], ebx
		jz	short loc_6B196A34
		mov	eax, [ebp+arg_0]
		dec	eax
		jz	short loc_6B196A22
		dec	eax
		jz	short loc_6B196A1B
		dec	eax
		jnz	short loc_6B196A34
		push	offset aError	; "Error"
		jmp	short loc_6B196A27
; ---------------------------------------------------------------------------

loc_6B196A1B:				; CODE XREF: Ordinal986+FFj
		push	offset aWarning	; "Warning"
		jmp	short loc_6B196A27
; ---------------------------------------------------------------------------

loc_6B196A22:				; CODE XREF: Ordinal986+FCj
		push	offset aInformation ; "Information"

loc_6B196A27:				; CODE XREF: Ordinal986+109j
					; Ordinal986+110j
		lea	eax, [ebp+var_14]
		push	edi		; Format
		push	eax		; int
		call	sub_6B1824C6
		add	esp, 0Ch

loc_6B196A34:				; CODE XREF: Ordinal986+F6j
					; Ordinal986+102j
		push	[ebp+Args]	; Args
		lea	ecx, [ebp+var_14]
		push	[ebp+Format]	; Format
		call	sub_6B181F44
		cmp	[esi+2Ch], ebx
		jz	short loc_6B196A5E
		mov	edi, offset pszTrimChars ; "\r\n"
		push	edi		; unsigned __int8 *
		lea	ecx, [ebp+var_14]
		call	sub_6B18EFCF
		push	edi		; Str
		lea	ecx, [ebp+var_14]
		call	sub_6B185AA4

loc_6B196A5E:				; CODE XREF: Ordinal986+135j
		mov	edi, [ebp+var_14]
		mov	eax, [esi]
		push	edi
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+4]
		lea	ecx, [edi-10h]
		jmp	short loc_6B196A7D
; ---------------------------------------------------------------------------

loc_6B196A71:				; DATA XREF: .rdata:6B1BC0DCo
		mov	eax, offset loc_6B196A77
		retn
; ---------------------------------------------------------------------------

loc_6B196A77:				; DATA XREF: Ordinal986:loc_6B196A71o
		mov	ecx, [ebp+var_14]
		add	ecx, 0FFFFFFF0h

loc_6B196A7D:				; CODE XREF: Ordinal986+15Fj
		call	sub_6B18163D

loc_6B196A82:				; CODE XREF: Ordinal986+3Aj
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn	0Ch
Ordinal986	endp ; sp-analysis failed

; Exported entry 987.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal987(int, char *Format, char Args)
		public Ordinal987
Ordinal987	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
Format		= dword	ptr  8
Args		= byte ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+8]
		push	1
		mov	ecx, esi
		call	Ordinal1019
		test	eax, eax
		jz	short loc_6B196ABE
		lea	eax, [esp+4+Args]
		push	eax		; Args
		push	[esp+8+Format]	; Format
		mov	ecx, esi
		push	1		; int
		call	Ordinal986

loc_6B196ABE:				; CODE XREF: Ordinal987+17j
		pop	esi
		retn
Ordinal987	endp

; Exported entry 988.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal988(char	*Format, va_list Args)
		public Ordinal988
Ordinal988	proc near		; CODE XREF: sub_6B181006+Ep
					; DATA XREF: .rdata:off_6B1BF428o

Format		= dword	ptr  4
Args		= dword	ptr  8

		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		call	dword ptr [eax+8]
		push	1
		mov	ecx, esi
		call	Ordinal1019
		test	eax, eax
		jz	short loc_6B196AE6
		push	[esp+4+Args]	; Args
		mov	ecx, esi
		push	[esp+8+Format]	; Format
		push	1		; int
		call	Ordinal986

loc_6B196AE6:				; CODE XREF: Ordinal988+13j
		pop	esi
		retn	8
Ordinal988	endp

; Exported entry 989.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal989(int, char *Format, char Args)
		public Ordinal989
Ordinal989	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
Format		= dword	ptr  8
Args		= byte ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+8]
		push	2
		mov	ecx, esi
		call	Ordinal1019
		test	eax, eax
		jz	short loc_6B196B15
		lea	eax, [esp+4+Args]
		push	eax		; Args
		push	[esp+8+Format]	; Format
		mov	ecx, esi
		push	2		; int
		call	Ordinal986

loc_6B196B15:				; CODE XREF: Ordinal989+17j
		pop	esi
		retn
Ordinal989	endp

; Exported entry 990.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal990(char	*Format, va_list Args)
		public Ordinal990
Ordinal990	proc near		; CODE XREF: sub_6B18101A+Ep
					; DATA XREF: .rdata:off_6B1BF428o

Format		= dword	ptr  4
Args		= dword	ptr  8

		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		call	dword ptr [eax+8]
		push	2
		mov	ecx, esi
		call	Ordinal1019
		test	eax, eax
		jz	short loc_6B196B3D
		push	[esp+4+Args]	; Args
		mov	ecx, esi
		push	[esp+8+Format]	; Format
		push	2		; int
		call	Ordinal986

loc_6B196B3D:				; CODE XREF: Ordinal990+13j
		pop	esi
		retn	8
Ordinal990	endp

; Exported entry 991.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal991(int, char *Format, char Args)
		public Ordinal991
Ordinal991	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
Format		= dword	ptr  8
Args		= byte ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+8]
		push	3
		mov	ecx, esi
		call	Ordinal1019
		test	eax, eax
		jz	short loc_6B196B6C
		lea	eax, [esp+4+Args]
		push	eax		; Args
		push	[esp+8+Format]	; Format
		mov	ecx, esi
		push	3		; int
		call	Ordinal986

loc_6B196B6C:				; CODE XREF: Ordinal991+17j
		pop	esi
		retn
Ordinal991	endp

; Exported entry 992.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal992(char	*Format, va_list Args)
		public Ordinal992
Ordinal992	proc near		; CODE XREF: sub_6B18102E+Ep
					; DATA XREF: .rdata:off_6B1BF428o

Format		= dword	ptr  4
Args		= dword	ptr  8

		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		call	dword ptr [eax+8]
		push	3
		mov	ecx, esi
		call	Ordinal1019
		test	eax, eax
		jz	short loc_6B196B94
		push	[esp+4+Args]	; Args
		mov	ecx, esi
		push	[esp+8+Format]	; Format
		push	3		; int
		call	Ordinal986

loc_6B196B94:				; CODE XREF: Ordinal992+13j
		pop	esi
		retn	8
Ordinal992	endp

; Exported entry 1025.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1025
Ordinal1025	proc near		; CODE XREF: Ordinal1026+19p
					; Ordinal993+2Fp
					; DATA XREF: ...

lpFileName	= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_81 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	ecx
		push	ebx
		push	esi
		mov	esi, ecx
		mov	eax, [esi+34h]
		or	ebx, 0FFFFFFFFh
		cmp	eax, ebx
		push	edi
		mov	[ebp+var_10], esp
		jz	short loc_6B196BC0
		push	eax		; hObject
		call	ds:CloseHandle
		mov	[esi+34h], ebx

loc_6B196BC0:				; CODE XREF: Ordinal1025+1Cj
		lea	ecx, [ebp+lpFileName]
		call	sub_6B181879
		lea	eax, [esi+0Ch]
		xor	edi, edi
		mov	[ebp+var_4], edi
		push	eax
		lea	ecx, [ebp+lpFileName]
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B181F8B
		push	5Ch
		lea	ecx, [ebp+lpFileName]
		call	sub_6B182485
		push	dword ptr [esi+8] ; Args
		lea	eax, [ebp+lpFileName]
		push	offset aS_2	; "\\%s"
		push	eax		; int
		call	sub_6B1824C6
		add	esp, 0Ch
		cmp	[esi+18h], edi
		jz	short loc_6B196C18
		call	ds:GetCurrentProcessId
		push	eax		; Args
		lea	eax, [ebp+lpFileName]
		push	offset a0x04x_0	; "-%0x%04X"
		push	eax		; int
		call	sub_6B1824C6
		add	esp, 0Ch

loc_6B196C18:				; CODE XREF: Ordinal1025+66j
		push	offset a_log	; ".log"
		lea	ecx, [ebp+lpFileName]
		call	sub_6B185AA4
		push	edi		; hTemplateFile
		push	80h		; dwFlagsAndAttributes
		push	4		; dwCreationDisposition
		push	edi		; lpSecurityAttributes
		push	1		; dwShareMode
		push	40000000h	; dwDesiredAccess
		push	[ebp+lpFileName] ; lpFileName
		call	ds:CreateFileA
		cmp	eax, ebx
		mov	[esi+34h], eax
		jz	short loc_6B196C50
		push	2		; dwMoveMethod
		push	edi		; lpDistanceToMoveHigh
		push	edi		; lDistanceToMove
		push	eax		; hFile
		call	ds:SetFilePointer

loc_6B196C50:				; CODE XREF: Ordinal1025+ABj
		xor	eax, eax
		cmp	[esi+34h], ebx
		setnz	al
		mov	esi, eax
		jmp	short loc_6B196C64
; ---------------------------------------------------------------------------

loc_6B196C5C:				; DATA XREF: .rdata:6B1BC134o
		mov	eax, offset loc_6B196C62
		retn
; ---------------------------------------------------------------------------

loc_6B196C62:				; DATA XREF: Ordinal1025:loc_6B196C5Co
		xor	esi, esi

loc_6B196C64:				; CODE XREF: Ordinal1025+C2j
		mov	ecx, [ebp+lpFileName]
		add	ecx, 0FFFFFFF0h
		call	sub_6B18163D
		mov	ecx, [ebp+var_C]
		pop	edi
		mov	eax, esi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn
Ordinal1025	endp

; Exported entry 1026.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1026
Ordinal1026	proc near		; CODE XREF: Ordinal1011+13p
					; Ordinal1013+38p ...
		push	esi
		mov	esi, ecx
		call	Ordinal1023
		test	eax, eax
		jnz	short loc_6B196C8E
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6B196C8E:				; CODE XREF: Ordinal1026+Aj
		push	edi
		xor	edi, edi
		cmp	dword ptr [esi+34h], 0FFFFFFFFh
		jz	short loc_6B196CA0
		mov	ecx, esi
		call	Ordinal1025
		mov	edi, eax

loc_6B196CA0:				; CODE XREF: Ordinal1026+15j
		mov	ecx, esi
		call	Ordinal1024
		mov	eax, edi
		pop	edi
		pop	esi
		retn
Ordinal1026	endp

; Exported entry 1027.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1027
Ordinal1027	proc near		; CODE XREF: Ordinal153+48p
					; Ordinal994+1Dp
					; DATA XREF: ...

Args		= byte ptr -420h
var_41C		= dword	ptr -41Ch
Ext		= byte ptr -418h
FullPath	= byte ptr -318h
Dir		= byte ptr -214h
Src		= byte ptr -114h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_82 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 414h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		mov	[ebp+var_14], eax
		lea	edi, [esi+8]
		mov	eax, [edi]
		mov	eax, [eax-0Ch]
		test	eax, eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_41C], 1
		jz	short loc_6B196CEF
		mov	eax, [esi+0Ch]
		cmp	dword ptr [eax-0Ch], 0
		jnz	loc_6B196D8E

loc_6B196CEF:				; CODE XREF: Ordinal1027+34j
		mov	ebx, 103h
		push	ebx		; nSize
		lea	eax, [ebp+FullPath]
		push	eax		; lpFilename
		push	0		; hModule
		call	ds:GetModuleFileNameA
		test	eax, eax
		jz	short loc_6B196D87
		cmp	eax, ebx
		jz	short loc_6B196D87
		lea	eax, [ebp+Ext]
		push	eax		; Ext
		lea	eax, [ebp+Src]
		push	eax		; Filename
		lea	eax, [ebp+Dir]
		push	eax		; Dir
		lea	eax, [ebp+Args]
		push	eax		; Drive
		lea	eax, [ebp+FullPath]
		push	eax		; FullPath
		call	ds:_splitpath
		mov	eax, [edi]
		xor	ebx, ebx
		add	esp, 14h
		cmp	[eax-0Ch], ebx
		mov	[ebp+var_4], ebx
		jnz	short loc_6B196D52
		lea	eax, [ebp+Src]
		push	eax		; Src
		mov	ecx, edi
		call	sub_6B181EA9

loc_6B196D52:				; CODE XREF: Ordinal1027+96j
		lea	eax, [esi+0Ch]
		mov	ecx, [eax]
		cmp	[ecx-0Ch], ebx
		jnz	short loc_6B196D8E
		lea	ecx, [ebp+Dir]
		push	ecx
		lea	ecx, [ebp+Args]
		push	ecx		; Args
		push	offset aSS_0	; "%s%s"
		push	eax		; int
		call	sub_6B18F0EE
		add	esp, 10h
		jmp	short loc_6B196D8E
; ---------------------------------------------------------------------------

loc_6B196D7A:				; DATA XREF: .rdata:stru_6B1BC178o
		and	[ebp+var_41C], 0
		mov	eax, offset loc_6B196D8E
		retn
; ---------------------------------------------------------------------------

loc_6B196D87:				; CODE XREF: Ordinal1027+5Aj
					; Ordinal1027+5Ej
		and	[ebp+var_41C], 0

loc_6B196D8E:				; CODE XREF: Ordinal1027+3Dj
					; Ordinal1027+AEj ...
		mov	ecx, [ebp+var_C]
		mov	eax, [ebp+var_41C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal1027	endp ; sp-analysis failed

; Exported entry 983.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal983(char	*Src)
		public Ordinal983
Ordinal983	proc near		; CODE XREF: Ordinal149+7p
					; DATA XREF: .rdata:off_6B1BF428o

Src		= dword	ptr  4

		push	esi
		push	edi
		push	[esp+8+Src]	; Src
		mov	esi, ecx
		xor	edi, edi
		lea	ecx, [esi+8]
		mov	dword ptr [esi], offset	off_6B1B3F94
		mov	[esi+4], edi
		call	sub_6B18281C
		lea	ecx, [esi+0Ch]
		call	sub_6B181879
		or	dword ptr [esi+34h], 0FFFFFFFFh
		mov	ecx, esi
		mov	[esi+10h], edi
		mov	[esi+14h], edi
		mov	[esi+18h], edi
		mov	[esi+1Ch], edi
		mov	[esi+20h], edi
		mov	[esi+24h], edi
		mov	[esi+2Ch], edi
		mov	[esi+30h], edi
		mov	[esi+50h], edi
		mov	[esi+54h], edi
		mov	[esi+58h], edi
		call	Ordinal1022
		pop	edi
		mov	eax, esi
		pop	esi
		retn	4
Ordinal983	endp

; Exported entry 985.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal985(int, int, char	*Format, char Args)
		public Ordinal985
Ordinal985	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
Format		= dword	ptr  10h
Args		= byte ptr  14h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+8]
		push	[ebp+arg_4]
		mov	ecx, esi
		call	Ordinal1019
		test	eax, eax
		jz	short loc_6B196E2E
		lea	eax, [ebp+Args]
		push	eax		; Args
		push	[ebp+Format]	; Format
		mov	ecx, esi
		push	[ebp+arg_4]	; int
		call	Ordinal986

loc_6B196E2E:				; CODE XREF: Ordinal985+1Aj
		pop	esi
		pop	ebp
		retn
Ordinal985	endp

; Exported entry 993.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal993(LPCSTR lpBuffer)
		public Ordinal993
Ordinal993	proc near		; DATA XREF: .rdata:6B1AABC4o
					; .rdata:6B1B3F98o ...

NumberOfBytesWritten= dword ptr	-4
lpBuffer	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+10h], 0
		jz	short loc_6B196E47
		push	[ebp+lpBuffer]	; lpOutputString
		call	ds:OutputDebugStringA

loc_6B196E47:				; CODE XREF: Ordinal993+Bj
		cmp	dword ptr [esi+14h], 0
		jz	short loc_6B196E92
		mov	ecx, esi
		call	Ordinal1023
		test	eax, eax
		jz	short loc_6B196E92
		cmp	dword ptr [esi+34h], 0FFFFFFFFh
		jnz	short loc_6B196E6B
		mov	ecx, esi
		call	Ordinal1025
		cmp	dword ptr [esi+34h], 0FFFFFFFFh
		jz	short loc_6B196E8B

loc_6B196E6B:				; CODE XREF: Ordinal993+2Bj
		and	[ebp+NumberOfBytesWritten], 0
		push	0		; lpOverlapped
		lea	eax, [ebp+NumberOfBytesWritten]
		push	eax		; lpNumberOfBytesWritten
		push	[ebp+lpBuffer]	; lpString
		call	ds:lstrlenA
		push	eax		; nNumberOfBytesToWrite
		push	[ebp+lpBuffer]	; lpBuffer
		push	dword ptr [esi+34h] ; hFile
		call	ds:WriteFile

loc_6B196E8B:				; CODE XREF: Ordinal993+38j
		mov	ecx, esi
		call	Ordinal1024

loc_6B196E92:				; CODE XREF: Ordinal993+1Aj
					; Ordinal993+25j
		pop	esi
		leave
		retn	4
Ordinal993	endp

; Exported entry 994.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal994
Ordinal994	proc near		; CODE XREF: Ordinal152+22p
					; DATA XREF: .rdata:6B1B3F9Co ...
		push	esi
		mov	esi, ecx
		call	Ordinal1023
		test	eax, eax
		jnz	short loc_6B196EA5
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6B196EA5:				; CODE XREF: Ordinal994+Aj
		push	edi
		xor	edi, edi
		inc	edi
		cmp	dword ptr [esi+54h], 0
		jnz	short loc_6B196EBF
		mov	ecx, esi
		mov	[esi+54h], edi
		call	Ordinal1027
		test	eax, eax
		jnz	short loc_6B196EBF
		xor	edi, edi

loc_6B196EBF:				; CODE XREF: Ordinal994+16j
					; Ordinal994+24j
		mov	ecx, esi
		call	Ordinal1024
		mov	eax, edi
		pop	edi
		pop	esi
		retn
Ordinal994	endp

; Exported entry 1011.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1011
Ordinal1011	proc near		; CODE XREF: Ordinal147+43p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		xor	edx, edx
		cmp	[ecx+18h], eax
		mov	[ecx+18h], eax
		setnz	dl
		test	edx, edx
		jz	short locret_6B196EE3
		call	Ordinal1026

locret_6B196EE3:			; CODE XREF: Ordinal1011+11j
		retn	4
Ordinal1011	endp

; Exported entry 1013.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1013(unsigned __int8 *Src)
		public Ordinal1013
Ordinal1013	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8

		mov	eax, offset unknown_libname_83 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		and	[ebp+var_4], 0
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	[ebp+Src]	; unsigned __int8 *
		mov	edi, ecx
		lea	esi, [edi+8]
		push	esi		; int
		call	sub_6B196846
		pop	ecx
		pop	ecx
		push	[ebp+Src]	; Src
		mov	ecx, esi
		movzx	ebx, al
		call	sub_6B181EA9
		test	ebx, ebx
		jz	short loc_6B196F25
		mov	ecx, edi
		call	Ordinal1026
		jmp	short loc_6B196F32
; ---------------------------------------------------------------------------

loc_6B196F25:				; CODE XREF: Ordinal1013+34j
		xor	eax, eax
		inc	eax
		jmp	short loc_6B196F32
; ---------------------------------------------------------------------------

loc_6B196F2A:				; DATA XREF: .rdata:stru_6B1BC1C8o
		mov	eax, offset loc_6B196F30
		retn
; ---------------------------------------------------------------------------

loc_6B196F30:				; DATA XREF: Ordinal1013:loc_6B196F2Ao
		xor	eax, eax

loc_6B196F32:				; CODE XREF: Ordinal1013+3Dj
					; Ordinal1013+42j
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn	4
Ordinal1013	endp

; Exported entry 1015.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1015(unsigned __int8 *Src)
		public Ordinal1015
Ordinal1015	proc near		; CODE XREF: Ordinal147+8Fp
					; DATA XREF: .rdata:off_6B1BF428o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8

		mov	eax, offset unknown_libname_84 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		and	[ebp+var_4], 0
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	[ebp+Src]	; unsigned __int8 *
		mov	edi, ecx
		lea	esi, [edi+0Ch]
		push	esi		; int
		call	sub_6B196846
		pop	ecx
		pop	ecx
		push	[ebp+Src]	; Src
		mov	ecx, esi
		movzx	ebx, al
		call	sub_6B181EA9
		test	ebx, ebx
		jz	short loc_6B196F82
		mov	ecx, edi
		call	Ordinal1026
		jmp	short loc_6B196F8F
; ---------------------------------------------------------------------------

loc_6B196F82:				; CODE XREF: Ordinal1015+34j
		xor	eax, eax
		inc	eax
		jmp	short loc_6B196F8F
; ---------------------------------------------------------------------------

loc_6B196F87:				; DATA XREF: .rdata:stru_6B1BC218o
		mov	eax, offset loc_6B196F8D
		retn
; ---------------------------------------------------------------------------

loc_6B196F8D:				; DATA XREF: Ordinal1015:loc_6B196F87o
		xor	eax, eax

loc_6B196F8F:				; CODE XREF: Ordinal1015+3Dj
					; Ordinal1015+42j
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn	4
Ordinal1015	endp

; Exported entry 1028.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1028
Ordinal1028	proc near		; CODE XREF: Ordinal459+29p
					; Ordinal524+B5p ...

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		call	Ordinal610
		mov	dword ptr [esi], offset	off_6B1B3FF4
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1028	endp

; Exported entry 1029.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1029
Ordinal1029	proc near		; CODE XREF: Ordinal459+5Cp
					; Ordinal524+E4p ...
		mov	dword ptr [ecx], offset	off_6B1B3FF4
		jmp	Ordinal611
Ordinal1029	endp

; Exported entry 1030.
; Exported entry 1031.
; Exported entry 1033.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1033
Ordinal1033	proc near		; DATA XREF: .rdata:6B1B3FF8o
					; .rdata:6B1B3FFCo ...
		xor	eax, eax	; ccL35_1030
					; ccL35_1031
		inc	eax
		retn	8
Ordinal1033	endp

; Exported entry 1032.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1032
Ordinal1032	proc near		; DATA XREF: .rdata:6B1B4000o
					; .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		and	dword ptr [eax], 0
		and	dword ptr [eax+4], 0
		xor	eax, eax
		inc	eax
		retn	4
Ordinal1032	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B196FDA(void *, char)
sub_6B196FDA	proc near		; DATA XREF: .rdata:off_6B1B3FF4o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1029
		test	[esp+4+arg_0], 1
		jz	short loc_6B196FF0
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B196FF0:				; CODE XREF: sub_6B196FDA+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B196FDA	endp

; Exported entry 1043.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1043
Ordinal1043	proc near		; CODE XREF: Ordinal1042+8p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	ecx, edx
		shr	ecx, 2
		jz	short loc_6B19700D

loc_6B197005:				; CODE XREF: Ordinal1043+15j
		not	dword ptr [eax]
		add	eax, 4
		dec	ecx
		jnz	short loc_6B197005

loc_6B19700D:				; CODE XREF: Ordinal1043+Dj
		and	edx, 3
		mov	ecx, edx
		jbe	short locret_6B19701A

loc_6B197014:				; CODE XREF: Ordinal1043+22j
		not	byte ptr [eax]
		inc	eax
		dec	ecx
		jnz	short loc_6B197014

locret_6B19701A:			; CODE XREF: Ordinal1043+1Cj
		retn	8
Ordinal1043	endp

; Exported entry 1041.
; Exported entry 1042.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1042
Ordinal1042	proc near		; DATA XREF: .rdata:6B1B400Co
					; .rdata:6B1B4010o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]	; ccL35_1041
		push	[esp+4+arg_0]
		call	Ordinal1043
		xor	eax, eax
		inc	eax
		retn	8
Ordinal1042	endp

; Exported entry 1035.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1035
Ordinal1035	proc near		; CODE XREF: sub_6B197087+3p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+20h]
		mov	dword ptr [esi], offset	off_6B1B4008
		call	Ordinal1616
		lea	ecx, [esi+10h]
		call	Ordinal1189
		lea	ecx, [esi+4]
		pop	esi
		jmp	sub_6B1899B5
Ordinal1035	endp

; Exported entry 1034.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1034
Ordinal1034	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, ecx
		lea	ecx, [esi+4]
		mov	dword ptr [esi], offset	off_6B1B4008
		call	sub_6B181879
		mov	eax, [esp+4+arg_0]
		mov	[esi+8], eax
		mov	eax, [esp+4+arg_4]
		lea	ecx, [esi+10h]
		mov	[esi+0Ch], eax
		call	Ordinal1187
		lea	ecx, [esi+20h]
		call	Ordinal1615
		mov	eax, esi
		pop	esi
		retn	8
Ordinal1034	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B197087(void *, char)
sub_6B197087	proc near		; DATA XREF: .rdata:off_6B1B4008o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1035
		test	[esp+4+arg_0], 1
		jz	short loc_6B19709D
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B19709D:				; CODE XREF: sub_6B197087+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B197087	endp

; Exported entry 1037.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1037
Ordinal1037	proc near		; CODE XREF: Ordinal1039+3p
					; Ordinal1036+3p
					; DATA XREF: ...

var_5C		= byte ptr -5Ch
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_85 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 50h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		mov	[ebp+var_14], eax
		push	0FFFFFFFFh
		lea	eax, [esi+20h]
		push	eax
		lea	ecx, [ebp+var_5C]
		mov	[ebp+var_28], esi
		call	Ordinal1571
		lea	edi, [esi+4]
		mov	eax, [edi]
		cmp	[eax-0Ch], ebx
		mov	[ebp+var_4], ebx
		jz	short loc_6B1970F1
		lea	ecx, [ebp+var_5C]
		call	Ordinal1573
		xor	eax, eax
		inc	eax
		jmp	loc_6B19720F
; ---------------------------------------------------------------------------

loc_6B1970F1:				; CODE XREF: Ordinal1037+3Cj
		mov	eax, [esi+0Ch]
		inc	eax
		push	eax
		lea	ecx, [esi+10h]
		call	Ordinal1196
		mov	ebx, eax
		test	ebx, ebx
		jnz	short loc_6B19710B
		push	offset aCencryptedstri ; "CEncryptedString::Decrypt() :	m_DecData"...
		jmp	short loc_6B19712E
; ---------------------------------------------------------------------------

loc_6B19710B:				; CODE XREF: Ordinal1037+5Fj
		push	dword ptr [esi+0Ch] ; Size
		push	dword ptr [esi+8] ; Src
		push	ebx		; Dst
		call	memcpy
		mov	eax, [esi]
		add	esp, 0Ch
		push	dword ptr [esi+0Ch]
		mov	ecx, esi
		push	ebx		; Args
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6B197139
		push	offset aCencryptedst_0 ; "CEncryptedString::Decrypt() :	Decrypt()"...

loc_6B19712E:				; CODE XREF: Ordinal1037+66j
		call	sub_6B18102E
		pop	ecx
		jmp	loc_6B1971FA
; ---------------------------------------------------------------------------

loc_6B197139:				; CODE XREF: Ordinal1037+84j
		push	offset aCencryptedst_1 ; "CEncryptedString::Decrypt()"
		lea	ecx, [ebp+var_48]
		call	Ordinal1089
		push	ebx		; Src
		mov	ecx, edi
		mov	byte ptr [ebp+var_4], 2
		call	sub_6B181EA9
		jmp	loc_6B1971F2
; ---------------------------------------------------------------------------

loc_6B197157:				; DATA XREF: .rdata:6B1BC284o
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1971EF
		retn
; ---------------------------------------------------------------------------

loc_6B19719A:				; DATA XREF: .rdata:6B1BC294o
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	eax, [ebp+var_4C]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1971EF
		retn
; ---------------------------------------------------------------------------

loc_6B1971EF:				; DATA XREF: Ordinal1037+F1o
					; Ordinal1037+146o
		mov	esi, [ebp+var_28]

loc_6B1971F2:				; CODE XREF: Ordinal1037+AFj
		lea	ecx, [ebp+var_48]
		call	Ordinal1090

loc_6B1971FA:				; CODE XREF: Ordinal1037+91j
		mov	eax, [esi+4]
		mov	esi, [eax-0Ch]
		lea	ecx, [ebp+var_5C]
		call	Ordinal1573
		xor	eax, eax
		test	esi, esi
		setnz	al

loc_6B19720F:				; CODE XREF: Ordinal1037+49j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal1037	endp ; sp-analysis failed

; Exported entry 1039.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1039
Ordinal1039	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	Ordinal1037
		lea	ecx, [esi+10h]
		pop	esi
		jmp	Ordinal1493
Ordinal1039	endp

; Exported entry 1036.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1036
Ordinal1036	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	Ordinal1037
		mov	eax, [esi+4]
		cmp	dword ptr [eax-0Ch], 0
		pop	esi
		jnz	short locret_6B19724E
		mov	eax, offset ValueName

locret_6B19724E:			; CODE XREF: Ordinal1036+10j
		retn
Ordinal1036	endp

; Exported entry 1047.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1047
Ordinal1047	proc near		; CODE XREF: sub_6B1972E5+3p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		test	eax, eax
		mov	dword ptr [esi], offset	off_6B1B40A0
		jz	short loc_6B19726A
		push	eax		; hMem
		call	ds:LocalFree
		and	dword ptr [esi+4], 0

loc_6B19726A:				; CODE XREF: Ordinal1047+Ej
		pop	esi
		retn
Ordinal1047	endp

; Exported entry 1048.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1048
Ordinal1048	proc near		; DATA XREF: .rdata:off_6B1BF428o
		and	dword ptr [ecx+4], 0
		and	dword ptr [ecx+8], 0
		retn
Ordinal1048	endp

; Exported entry 1053.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1053
Ordinal1053	proc near		; CODE XREF: Ordinal1049+7p
					; Ordinal1050+15p
					; DATA XREF: ...
		push	esi
		push	edi
		mov	edi, ecx
		lea	esi, [edi+4]
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_6B19728C
		push	eax		; hMem
		call	ds:LocalFree
		and	dword ptr [esi], 0

loc_6B19728C:				; CODE XREF: Ordinal1053+Bj
		push	0		; Arguments
		push	0		; nSize
		push	esi		; lpBuffer
		push	400h		; dwLanguageId
		push	dword ptr [edi+8] ; dwMessageId
		push	0		; lpSource
		push	1100h		; dwFlags
		call	ds:FormatMessageA
		test	eax, eax
		jnz	short loc_6B1972C1
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCerrorinfoBuil ; "CErrorInfo::BuildDescription() : Format"...
		call	sub_6B18101A
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B1972D1
; ---------------------------------------------------------------------------

loc_6B1972C1:				; CODE XREF: Ordinal1053+33j
		push	offset pszTrimChars ; "\r\n"
		push	dword ptr [esi]	; psz
		call	ds:StrTrimA
		xor	eax, eax
		inc	eax

loc_6B1972D1:				; CODE XREF: Ordinal1053+4Aj
		pop	edi
		pop	esi
		retn
Ordinal1053	endp

; Exported entry 1044.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1044
Ordinal1044	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, ecx
		and	dword ptr [eax+4], 0
		and	dword ptr [eax+8], 0
		mov	dword ptr [eax], offset	off_6B1B40A0
		retn
Ordinal1044	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1972E5(void *, char)
sub_6B1972E5	proc near		; DATA XREF: .rdata:off_6B1B40A0o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1047
		test	[esp+4+arg_0], 1
		jz	short loc_6B1972FB
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1972FB:				; CODE XREF: sub_6B1972E5+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1972E5	endp

; Exported entry 1049.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1049
Ordinal1049	proc near		; CODE XREF: Ordinal1046+15p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+8], eax
		call	Ordinal1053
		retn	4
Ordinal1049	endp

; Exported entry 1050.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1050
Ordinal1050	proc near		; CODE XREF: Ordinal1045+15p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jle	short loc_6B197322
		and	eax, 0FFFFh
		or	eax, 80070000h

loc_6B197322:				; CODE XREF: Ordinal1050+6j
		mov	[ecx+8], eax
		call	Ordinal1053
		retn	4
Ordinal1050	endp

; Exported entry 1045.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1045
Ordinal1045	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		and	dword ptr [esi+4], 0
		and	dword ptr [esi+8], 0
		mov	dword ptr [esi], offset	off_6B1B40A0
		call	Ordinal1050
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1045	endp

; Exported entry 1046.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1046
Ordinal1046	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		and	dword ptr [esi+4], 0
		and	dword ptr [esi+8], 0
		mov	dword ptr [esi], offset	off_6B1B40A0
		call	Ordinal1049
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1046	endp

; Exported entry 1054.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1054
Ordinal1054	proc near		; CODE XREF: Ordinal1391+55p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+4], 0
		and	dword ptr [esi+8], 0
		lea	ecx, [esi+0Ch]
		mov	dword ptr [esi], offset	off_6B1B414C
		call	Ordinal1187
		and	dword ptr [esi+1Ch], 0
		and	dword ptr [esi+20h], 0
		lea	ecx, [esi+24h]
		call	Ordinal1615
		mov	eax, esi
		pop	esi
		retn
Ordinal1054	endp

; Exported entry 1057.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1057(LPCSTR pszSubKey)
		public Ordinal1057
Ordinal1057	proc near		; CODE XREF: Ordinal1056+3Cp
					; Ordinal1426+43p
					; DATA XREF: ...

var_18		= byte ptr -18h
var_C		= byte ptr -0Ch
pszSubKey	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+24h]
		push	eax
		lea	ecx, [ebp+var_18]
		call	Ordinal1571
		lea	ecx, [ebp+var_C]
		call	Ordinal1316
		push	1		; int
		push	20006h		; samDesired
		push	offset Src	; "SYSTEM\\CurrentControlSet\\Services\\Event"...
		push	80000002h	; hKey
		lea	ecx, [ebp+var_C]
		call	Ordinal1321
		test	eax, eax
		jz	short loc_6B1973EC
		push	[ebp+pszSubKey]	; pszSubKey
		lea	ecx, [ebp+var_C]
		call	Ordinal1323
		test	eax, eax
		jz	short loc_6B1973EC
		xor	esi, esi
		inc	esi
		jmp	short loc_6B197404
; ---------------------------------------------------------------------------

loc_6B1973EC:				; CODE XREF: Ordinal1057+3Cj
					; Ordinal1057+4Bj
		push	offset aCeventlogUnreg ; "CEventLog::Unregister() : reg.DeleteKey"...
		call	sub_6B18102E
		pop	ecx
		lea	ecx, [ebp+var_C]
		call	Ordinal1052
		mov	[esi+8], eax
		xor	esi, esi

loc_6B197404:				; CODE XREF: Ordinal1057+50j
		lea	ecx, [ebp+var_C]
		call	Ordinal1318
		lea	ecx, [ebp+var_18]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal1057	endp

; Exported entry 1059.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1059
Ordinal1059	proc near		; CODE XREF: Ordinal1055+9p
					; Ordinal1058+2Ep ...

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+24h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	eax, [esi+4]
		xor	ebx, ebx
		inc	ebx
		test	eax, eax
		jz	short loc_6B197455
		push	eax		; hEventLog
		call	DeregisterEventSource
		mov	ebx, eax
		call	ds:GetLastError
		and	dword ptr [esi+4], 0
		mov	[esi+8], eax

loc_6B197455:				; CODE XREF: Ordinal1059+22j
		lea	ecx, [esi+0Ch]
		call	Ordinal1200
		and	dword ptr [esi+1Ch], 0
		and	dword ptr [esi+20h], 0
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		pop	esi
		mov	eax, ebx
		pop	ebx
		leave
		retn
Ordinal1059	endp

; Exported entry 1060.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1060
Ordinal1060	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+24h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	esi, [esi+8]
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal1060	endp

; Exported entry 1061.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1061
Ordinal1061	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+24h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		xor	eax, eax
		cmp	[esi+4], eax
		lea	ecx, [ebp+var_C]
		setnz	al
		mov	esi, eax
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal1061	endp

; Exported entry 1082.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1082
Ordinal1082	proc near		; CODE XREF: Ordinal1077+1Ap
					; Ordinal1078+1Ap ...

var_130		= byte ptr -130h
pcbBuffer	= dword	ptr -124h
peUse		= dword	ptr -120h
cchReferencedDomainName= dword ptr -11Ch
Dst		= byte ptr -118h
ReferencedDomainName= byte ptr -14h
var_4		= dword	ptr -4
wType		= word ptr  8
dwEventID	= dword	ptr  0Ch
wNumStrings	= word ptr  10h
lpStrings	= dword	ptr  14h
wCategory	= word ptr  18h
dwDataSize	= dword	ptr  1Ch
lpRawData	= dword	ptr  20h
lpUserSid	= dword	ptr  24h

		push	ebp
		mov	ebp, esp
		sub	esp, 130h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		mov	[ebp+var_4], eax
		push	0FFFFFFFFh
		lea	eax, [esi+24h]
		push	eax
		lea	ecx, [ebp+var_130]
		call	Ordinal1571
		cmp	[esi+4], ebx
		jnz	short loc_6B19750A
		push	offset aCeventlogLogM_ ; "CEventLog::Log() : m_hSource == NULL\n"
		call	sub_6B18101A

loc_6B197504:				; CODE XREF: Ordinal1082+163j
		pop	ecx
		jmp	loc_6B197637
; ---------------------------------------------------------------------------

loc_6B19750A:				; CODE XREF: Ordinal1082+2Cj
		mov	eax, [ebp+lpUserSid]
		cmp	eax, ebx
		jnz	loc_6B1975F7
		cmp	[esi+1Ch], ebx
		jnz	loc_6B1975F4
		cmp	[esi+20h], ebx
		jnz	loc_6B1975F4
		push	edi		; Args
		mov	edi, 101h
		push	edi		; Size
		lea	eax, [ebp+Dst]
		push	ebx		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		lea	eax, [ebp+pcbBuffer]
		push	eax		; pcbBuffer
		lea	eax, [ebp+Dst]
		push	eax		; lpBuffer
		mov	[ebp+pcbBuffer], edi
		call	GetUserNameA
		test	eax, eax
		jz	loc_6B1975E1
		mov	edi, LookupAccountNameA
		lea	eax, [ebp+peUse]
		push	eax		; peUse
		lea	eax, [ebp+cchReferencedDomainName]
		push	eax		; cchReferencedDomainName
		lea	eax, [ebp+ReferencedDomainName]
		push	eax		; ReferencedDomainName
		lea	eax, [ebp+lpUserSid]
		push	eax		; cbSid
		push	ebx		; Sid
		lea	eax, [ebp+Dst]
		push	eax		; lpAccountName
		push	ebx		; lpSystemName
		mov	[ebp+lpUserSid], ebx
		mov	[ebp+cchReferencedDomainName], 10h
		mov	[ebp+peUse], 8
		call	edi ; LookupAccountNameA
		test	eax, eax
		jnz	short loc_6B1975F3
		cmp	[ebp+lpUserSid], ebx
		jbe	short loc_6B1975F3
		push	[ebp+lpUserSid]
		lea	ecx, [esi+0Ch]
		call	Ordinal1196
		lea	ecx, [ebp+peUse]
		push	ecx		; peUse
		lea	ecx, [ebp+cchReferencedDomainName]
		push	ecx		; cchReferencedDomainName
		lea	ecx, [ebp+ReferencedDomainName]
		push	ecx		; ReferencedDomainName
		lea	ecx, [ebp+lpUserSid]
		push	ecx		; cbSid
		push	eax		; Sid
		mov	[esi+1Ch], eax
		lea	eax, [ebp+Dst]
		push	eax		; lpAccountName
		push	ebx		; lpSystemName
		call	edi ; LookupAccountNameA
		test	eax, eax
		jnz	short loc_6B1975F3
		push	offset aCeventlogLogLo ; "CEventLog::Log() : LookupAccountName() "...
		jmp	short loc_6B1975E6
; ---------------------------------------------------------------------------

loc_6B1975E1:				; CODE XREF: Ordinal1082+8Ej
		push	offset aCeventlogLogGe ; "CEventLog::Log() : GetUserName() == FAL"...

loc_6B1975E6:				; CODE XREF: Ordinal1082+113j
		call	sub_6B18102E
		pop	ecx
		mov	dword ptr [esi+20h], 1

loc_6B1975F3:				; CODE XREF: Ordinal1082+D4j
					; Ordinal1082+D9j ...
		pop	edi

loc_6B1975F4:				; CODE XREF: Ordinal1082+4Cj
					; Ordinal1082+55j
		mov	eax, [esi+1Ch]

loc_6B1975F7:				; CODE XREF: Ordinal1082+43j
		push	[ebp+lpRawData]	; lpRawData
		push	[ebp+lpStrings]	; lpStrings
		push	[ebp+dwDataSize] ; dwDataSize
		push	dword ptr [ebp+wNumStrings] ; wNumStrings
		push	eax		; lpUserSid
		push	[ebp+dwEventID]	; dwEventID
		push	dword ptr [ebp+wCategory] ; wCategory
		push	dword ptr [ebp+wType] ;	wType
		push	dword ptr [esi+4] ; hEventLog
		call	ReportEventA
		test	eax, eax
		jnz	short loc_6B197634
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCeventlogLogRe ; "CEventLog::Log() : ReportEvent() == 0, "...
		mov	[esi+8], eax
		call	sub_6B18102E
		pop	ecx
		jmp	loc_6B197504
; ---------------------------------------------------------------------------

loc_6B197634:				; CODE XREF: Ordinal1082+14Cj
		xor	ebx, ebx
		inc	ebx

loc_6B197637:				; CODE XREF: Ordinal1082+39j
		lea	ecx, [ebp+var_130]
		call	Ordinal1573
		mov	ecx, [ebp+var_4]
		pop	esi
		mov	eax, ebx
		pop	ebx
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn	20h
Ordinal1082	endp ; sp-analysis failed

; Exported entry 1055.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1055
Ordinal1055	proc near		; CODE XREF: sub_6B19779D+3p
					; Ordinal1392+51p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1B414C
		call	Ordinal1059
		lea	ecx, [esi+24h]
		call	Ordinal1616
		lea	ecx, [esi+0Ch]
		pop	esi
		jmp	Ordinal1189
Ordinal1055	endp

; Exported entry 1058.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1058(LPCSTR lpSourceName)
		public Ordinal1058
Ordinal1058	proc near		; CODE XREF: Ordinal1393+4BEp
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
lpSourceName	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+24h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		cmp	[ebp+lpSourceName], 0
		jz	short loc_6B1976D2
		push	[ebp+lpSourceName] ; lpString
		call	ds:lstrlenA
		test	eax, eax
		jz	short loc_6B1976D2
		mov	ecx, esi
		call	Ordinal1059
		push	[ebp+lpSourceName] ; lpSourceName
		push	0		; lpUNCServerName
		call	RegisterEventSourceA
		test	eax, eax
		mov	[esi+4], eax
		jnz	short loc_6B1976CD
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCeventlogOpenR ; "CEventLog::Open() : RegisterEventSource"...
		mov	[esi+8], eax
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B1976DC
; ---------------------------------------------------------------------------

loc_6B1976CD:				; CODE XREF: Ordinal1058+43j
		xor	esi, esi
		inc	esi
		jmp	short loc_6B1976DF
; ---------------------------------------------------------------------------

loc_6B1976D2:				; CODE XREF: Ordinal1058+1Dj
					; Ordinal1058+2Aj
		push	offset aCeventlogOpenS ; "CEventLog::Open() : szName ==	NULL\n"
		call	sub_6B18102E

loc_6B1976DC:				; CODE XREF: Ordinal1058+5Aj
		pop	ecx
		xor	esi, esi

loc_6B1976DF:				; CODE XREF: Ordinal1058+5Fj
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal1058	endp

; Exported entry 1077.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1077
Ordinal1077	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_18]
		push	[ebp+arg_14]
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		push	1
		call	Ordinal1082
		pop	ebp
		retn	1Ch
Ordinal1077	endp

; Exported entry 1078.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1078
Ordinal1078	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_18]
		push	[ebp+arg_14]
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		push	2
		call	Ordinal1082
		pop	ebp
		retn	1Ch
Ordinal1078	endp

; Exported entry 1079.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1079
Ordinal1079	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_18]
		push	[ebp+arg_14]
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		push	4
		call	Ordinal1082
		pop	ebp
		retn	1Ch
Ordinal1079	endp

; Exported entry 1080.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1080
Ordinal1080	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_18]
		push	[ebp+arg_14]
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		push	10h
		call	Ordinal1082
		pop	ebp
		retn	1Ch
Ordinal1080	endp

; Exported entry 1081.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1081
Ordinal1081	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_18]
		push	[ebp+arg_14]
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		push	8
		call	Ordinal1082
		pop	ebp
		retn	1Ch
Ordinal1081	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B19779D(void *, char)
sub_6B19779D	proc near		; DATA XREF: .rdata:off_6B1B414Co

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1055
		test	[esp+4+arg_0], 1
		jz	short loc_6B1977B3
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1977B3:				; CODE XREF: sub_6B19779D+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B19779D	endp

; Exported entry 1069.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1069
Ordinal1069	proc near		; CODE XREF: Ordinal1422+67p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	[ebp+arg_0], eax
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		lea	eax, [ebp+arg_0]
		push	eax
		push	1
		push	40000020h
		push	4
		call	Ordinal1082
		pop	ebp
		retn	4
Ordinal1069	endp

; Exported entry 1070.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1070
Ordinal1070	proc near		; CODE XREF: Ordinal1423+40p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	[ebp+arg_0], eax
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		lea	eax, [ebp+arg_0]
		push	eax
		push	1
		push	40000021h
		push	4
		call	Ordinal1082
		pop	ebp
		retn	4
Ordinal1070	endp

; Exported entry 1071.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1071
Ordinal1071	proc near		; CODE XREF: Ordinal1397+Cp
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	[ebp+arg_0], eax
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		lea	eax, [ebp+arg_0]
		push	eax
		push	1
		push	40000022h
		push	4
		call	Ordinal1082
		pop	ebp
		retn	4
Ordinal1071	endp

; Exported entry 1072.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1072
Ordinal1072	proc near		; CODE XREF: Ordinal1398+Cp
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	[ebp+arg_0], eax
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		lea	eax, [ebp+arg_0]
		push	eax
		push	1
		push	40000023h
		push	4
		call	Ordinal1082
		pop	ebp
		retn	4
Ordinal1072	endp

; Exported entry 1073.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1073
Ordinal1073	proc near		; CODE XREF: Ordinal1399+Cp
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	[ebp+arg_0], eax
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		lea	eax, [ebp+arg_0]
		push	eax
		push	1
		push	40000024h
		push	4
		call	Ordinal1082
		pop	ebp
		retn	4
Ordinal1073	endp

; Exported entry 1074.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1074
Ordinal1074	proc near		; CODE XREF: Ordinal1400+Cp
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	[ebp+arg_0], eax
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		lea	eax, [ebp+arg_0]
		push	eax
		push	1
		push	40000025h
		push	4
		call	Ordinal1082
		pop	ebp
		retn	4
Ordinal1074	endp

; Exported entry 1075.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1075
Ordinal1075	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	[ebp+arg_0], eax
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		lea	eax, [ebp+arg_0]
		push	eax
		push	1
		push	40000026h
		push	4
		call	Ordinal1082
		pop	ebp
		retn	4
Ordinal1075	endp

; Exported entry 1076.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1076
Ordinal1076	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	[ebp+arg_0], eax
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		lea	eax, [ebp+arg_0]
		push	eax
		push	1
		push	40000027h
		push	4
		call	Ordinal1082
		pop	ebp
		retn	4
Ordinal1076	endp

; Exported entry 1063.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1063(int, char *Format, va_list Args)
		public Ordinal1063
Ordinal1063	proc near		; CODE XREF: Ordinal1064+Fp
					; Ordinal1065+Fp ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Format		= dword	ptr  0Ch
Args		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	esi
		mov	esi, ecx
		lea	ecx, [ebp+var_4]
		call	sub_6B181879
		push	[ebp+Args]	; Args
		lea	eax, [ebp+var_4]
		push	[ebp+Format]	; Format
		push	eax		; int
		call	Ordinal1529
		add	esp, 0Ch
		test	al, al
		jnz	short loc_6B197916
		push	offset aCeventlogTrace ; "CEventLog::TraceV() :	CStringConvert::F"...
		call	sub_6B18102E
		pop	ecx
		xor	esi, esi
		jmp	short loc_6B197946
; ---------------------------------------------------------------------------

loc_6B197916:				; CODE XREF: Ordinal1063+24j
		push	offset pszTrimChars ; "\r\n"
		lea	ecx, [ebp+var_4]
		call	sub_6B18EFCF
		mov	eax, [ebp+var_4]
		mov	[ebp+var_8], eax
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		lea	eax, [ebp+var_8]
		push	eax
		push	1
		push	80000030h
		push	[ebp+arg_0]
		mov	ecx, esi
		call	Ordinal1082
		mov	esi, eax

loc_6B197946:				; CODE XREF: Ordinal1063+33j
		lea	ecx, [ebp+var_4]
		call	sub_6B1899B5
		mov	eax, esi
		pop	esi
		leave
		retn	0Ch
Ordinal1063	endp

; Exported entry 1064.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal1064(int, char *Format, char Args)
		public Ordinal1064
Ordinal1064	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
Format		= dword	ptr  8
Args		= byte ptr  0Ch

		mov	ecx, [esp+arg_0]
		lea	eax, [esp+Args]
		push	eax		; Args
		push	[esp+4+Format]	; Format
		push	4		; int
		call	Ordinal1063
		retn
Ordinal1064	endp

; Exported entry 1065.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal1065(int, char *Format, char Args)
		public Ordinal1065
Ordinal1065	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
Format		= dword	ptr  8
Args		= byte ptr  0Ch

		mov	ecx, [esp+arg_0]
		lea	eax, [esp+Args]
		push	eax		; Args
		push	[esp+4+Format]	; Format
		push	2		; int
		call	Ordinal1063
		retn
Ordinal1065	endp

; Exported entry 1066.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal1066(int, char *Format, char Args)
		public Ordinal1066
Ordinal1066	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
Format		= dword	ptr  8
Args		= byte ptr  0Ch

		mov	ecx, [esp+arg_0]
		lea	eax, [esp+Args]
		push	eax		; Args
		push	[esp+4+Format]	; Format
		push	1		; int
		call	Ordinal1063
		retn
Ordinal1066	endp

; Exported entry 1067.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal1067(int, char *Format, char Args)
		public Ordinal1067
Ordinal1067	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
Format		= dword	ptr  8
Args		= byte ptr  0Ch

		mov	ecx, [esp+arg_0]
		lea	eax, [esp+Args]
		push	eax		; Args
		push	[esp+4+Format]	; Format
		push	8		; int
		call	Ordinal1063
		retn
Ordinal1067	endp

; Exported entry 1068.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal1068(int, char *Format, char Args)
		public Ordinal1068
Ordinal1068	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
Format		= dword	ptr  8
Args		= byte ptr  0Ch

		mov	ecx, [esp+arg_0]
		lea	eax, [esp+Args]
		push	eax		; Args
		push	[esp+4+Format]	; Format
		push	10h		; int
		call	Ordinal1063
		retn
Ordinal1068	endp

; Exported entry 1056.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1056(char *pszSubKey, LPCSTR lpData, BYTE Data)
		public Ordinal1056
Ordinal1056	proc near		; CODE XREF: Ordinal1426+2Dp
					; DATA XREF: .rdata:off_6B1BF428o

var_B0		= byte ptr -0B0h
var_6C		= byte ptr -6Ch
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= byte ptr -58h
var_38		= dword	ptr -38h
var_34		= byte ptr -34h
Args		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Str		= dword	ptr  8
lpData		= dword	ptr  0Ch
Data		= byte ptr  10h

		mov	eax, offset unknown_libname_86 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 0A4h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		mov	esi, ecx
		xor	edi, edi
		push	edi
		mov	[ebp+var_14], eax
		push	0FFFFFFFFh
		lea	eax, [esi+24h]
		push	eax
		lea	ecx, [ebp+var_6C]
		mov	[ebp+var_38], esi
		call	Ordinal1571
		push	[ebp+Str]	; pszSubKey
		mov	ecx, esi
		mov	[ebp+var_4], edi
		call	Ordinal1057
		lea	ecx, [ebp+var_B0]
		call	Ordinal1487
		cmp	[ebp+lpData], edi
		mov	byte ptr [ebp+var_4], 1
		jnz	short loc_6B197A43
		push	edi		; Args
		lea	ecx, [ebp+var_B0]
		call	Ordinal1489
		test	al, al
		jnz	short loc_6B197A35
		push	offset aCeventlogRegis ; "CEventLog::Register()	: path.SplitPath("...
		call	sub_6B18102E
		pop	ecx
		xor	esi, esi
		jmp	loc_6B197BA9
; ---------------------------------------------------------------------------

loc_6B197A35:				; CODE XREF: Ordinal1056+63j
		lea	ecx, [ebp+var_B0]
		call	Ordinal1021
		mov	[ebp+lpData], eax

loc_6B197A43:				; CODE XREF: Ordinal1056+53j
		lea	ecx, [ebp+Args]
		call	sub_6B181879
		push	offset aCeventlogReg_0 ; "CEventLog::Register()"
		lea	ecx, [ebp+var_58]
		call	Ordinal1089
		push	offset Src	; "SYSTEM\\CurrentControlSet\\Services\\Event"...
		lea	ecx, [ebp+Args]
		mov	byte ptr [ebp+var_4], 4
		call	sub_6B181EA9
		push	[ebp+Str]	; Str
		lea	ecx, [ebp+Args]
		call	sub_6B185AA4
		jmp	loc_6B197B14
; ---------------------------------------------------------------------------

loc_6B197A79:				; DATA XREF: .rdata:6B1BC304o
		push	13h
		lea	ecx, [ebp+var_58]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_58]
		call	Ordinal1101
		mov	ecx, [ebp+var_60]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_58]
		call	Ordinal1103
		lea	ecx, [ebp+var_58]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B197B11
		retn
; ---------------------------------------------------------------------------

loc_6B197ABC:				; DATA XREF: .rdata:6B1BC314o
		push	15h
		lea	ecx, [ebp+var_58]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_58]
		call	Ordinal1101
		mov	eax, [ebp+var_5C]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_58]
		call	Ordinal1103
		lea	ecx, [ebp+var_58]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B197B11
		retn
; ---------------------------------------------------------------------------

loc_6B197B11:				; DATA XREF: Ordinal1056+F8o
					; Ordinal1056+14Do
		mov	esi, [ebp+var_38]

loc_6B197B14:				; CODE XREF: Ordinal1056+B6j
		lea	ecx, [ebp+var_58]
		call	Ordinal1635
		test	eax, eax
		jz	short loc_6B197B24
		xor	esi, esi
		jmp	short loc_6B197B96
; ---------------------------------------------------------------------------

loc_6B197B24:				; CODE XREF: Ordinal1056+160j
		lea	ecx, [ebp+var_34]
		call	Ordinal1316
		push	1		; int
		push	20006h		; samDesired
		push	[ebp+Args]	; Args
		lea	ecx, [ebp+var_34]
		push	80000002h	; hKey
		call	Ordinal1321
		test	eax, eax
		jz	short loc_6B197B76
		push	2		; dwType
		push	[ebp+lpData]	; lpData
		lea	ecx, [ebp+var_34]
		push	offset aEventmessagefi ; "EventMessageFile"
		call	Ordinal1334
		test	eax, eax
		jz	short loc_6B197B76
		push	dword ptr [ebp+Data] ; Data
		lea	ecx, [ebp+var_34]
		push	offset aTypessupported ; "TypesSupported"
		call	Ordinal1338
		test	eax, eax
		jz	short loc_6B197B76
		xor	esi, esi
		inc	esi
		jmp	short loc_6B197B8E
; ---------------------------------------------------------------------------

loc_6B197B76:				; CODE XREF: Ordinal1056+187j
					; Ordinal1056+19Dj ...
		push	offset aCeventlogReg_1 ; "CEventLog::Register()	: reg.Open() ==	F"...
		call	sub_6B18102E
		pop	ecx
		lea	ecx, [ebp+var_34]
		call	Ordinal1052
		mov	[esi+8], eax
		xor	esi, esi

loc_6B197B8E:				; CODE XREF: Ordinal1056+1B6j
		lea	ecx, [ebp+var_34]
		call	Ordinal1318

loc_6B197B96:				; CODE XREF: Ordinal1056+164j
		lea	ecx, [ebp+var_58]
		call	Ordinal1090
		mov	ecx, [ebp+Args]
		add	ecx, 0FFFFFFF0h
		call	sub_6B18163D

loc_6B197BA9:				; CODE XREF: Ordinal1056+72j
		lea	ecx, [ebp+var_B0]
		call	Ordinal1488
		lea	ecx, [ebp+var_6C]
		call	Ordinal1573
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	0Ch
Ordinal1056	endp ; sp-analysis failed

; Exported entry 1062.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal1062(int, int, char *Format, char Args)
		public Ordinal1062
Ordinal1062	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Format		= dword	ptr  0Ch
Args		= byte ptr  10h

		mov	ecx, [esp+arg_0]
		lea	eax, [esp+Args]
		push	eax		; Args
		push	[esp+4+Format]	; Format
		push	[esp+8+arg_4]	; int
		call	Ordinal1063
		retn
Ordinal1062	endp

; Exported entry 1083.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1083
Ordinal1083	proc near		; CODE XREF: Ordinal894+3p
					; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, ecx
		and	dword ptr [eax+4], 0
		and	dword ptr [eax+8], 0
		mov	dword ptr [eax], offset	off_6B1B4354
		mov	dword_6B1C1264,	eax
		retn
Ordinal1083	endp

; Exported entry 1086.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1086
Ordinal1086	proc near		; CODE XREF: Ordinal906+2Bp
					; Ordinal1084+6p ...
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+8], 0
		jz	short loc_6B197C1A
		push	dword ptr [esi+4] ; lpTopLevelExceptionFilter
		call	ds:SetUnhandledExceptionFilter
		and	dword ptr [esi+4], 0

loc_6B197C1A:				; CODE XREF: Ordinal1086+7j
		and	dword ptr [esi+8], 0
		pop	esi
		retn
Ordinal1086	endp

; Exported entry 1087.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1087
Ordinal1087	proc near		; CODE XREF: Ordinal896+26p
					; DATA XREF: .rdata:6B1B4358o ...
		mov	eax, [ecx+4]
		test	eax, eax
		jz	short loc_6B197C29
		jmp	eax
; ---------------------------------------------------------------------------

loc_6B197C29:				; CODE XREF: Ordinal1087+5j
		xor	eax, eax
		retn	4
Ordinal1087	endp


; =============== S U B	R O U T	I N E =======================================


; LONG __stdcall TopLevelExceptionFilter(struct	_EXCEPTION_POINTERS *)
TopLevelExceptionFilter	proc near	; DATA XREF: Ordinal1085+8o
		mov	ecx, dword_6B1C1264
		test	ecx, ecx
		jz	short loc_6B197C3D
		mov	eax, [ecx]
		jmp	dword ptr [eax+4]
; ---------------------------------------------------------------------------

loc_6B197C3D:				; CODE XREF: TopLevelExceptionFilter+8j
		xor	eax, eax
		retn	4
TopLevelExceptionFilter	endp

; Exported entry 1084.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1084
Ordinal1084	proc near		; CODE XREF: Ordinal895+6j
					; sub_6B197C73+3p
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6B1B4354
		call	Ordinal1086
		and	dword_6B1C1264,	0
		retn
Ordinal1084	endp

; Exported entry 1085.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1085
Ordinal1085	proc near		; CODE XREF: Ordinal905+125p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	Ordinal1086
		push	offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
		call	ds:SetUnhandledExceptionFilter
		mov	[esi+4], eax
		xor	eax, eax
		inc	eax
		mov	[esi+8], eax
		pop	esi
		retn
Ordinal1085	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B197C73(void *, char)
sub_6B197C73	proc near		; DATA XREF: .rdata:off_6B1B4354o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1084
		test	[esp+4+arg_0], 1
		jz	short loc_6B197C89
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B197C89:				; CODE XREF: sub_6B197C73+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B197C73	endp

; Exported entry 1091.
; Exported entry 1093.
; Exported entry 1330.
; Exported entry 1635.
; Exported entry 1646.
; Exported entry 1662.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1635
Ordinal1635	proc near		; CODE XREF: Ordinal146+1F1p
					; Ordinal142+4A3p ...
		xor	eax, eax	; ccL35_1091
					; ccL35_1093
					; ccL35_1330
					; ccL35_1635
					; ccL35_1646
		cmp	[ecx+4], eax
		setnz	al
		retn
Ordinal1635	endp

; Exported entry 1099.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1099
Ordinal1099	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+18h], eax
		retn	4
Ordinal1099	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6B197CA2(LPCWSTR lpWideCharStr)
sub_6B197CA2	proc near		; CODE XREF: sub_6B197D6E+Ep

lpWideCharStr	= dword	ptr  4

		xor	eax, eax
		push	eax		; lpUsedDefaultChar
		push	eax		; lpDefaultChar
		push	eax		; cbMultiByte
		push	eax		; lpMultiByteStr
		push	0FFFFFFFFh	; cchWideChar
		push	[esp+14h+lpWideCharStr]	; lpWideCharStr
		push	eax		; dwFlags
		call	Target
		push	eax		; CodePage
		call	ds:WideCharToMultiByte
		dec	eax
		retn
sub_6B197CA2	endp

; Exported entry 1090.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1090
Ordinal1090	proc near		; CODE XREF: Ordinal146+1FDp
					; Ordinal146:loc_6B1827DAp ...
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+1Ch]
		mov	dword ptr [esi], offset	off_6B1B435C
		call	sub_6B1899B5
		lea	ecx, [esi+14h]
		call	sub_6B1899B5
		lea	ecx, [esi+10h]
		call	sub_6B1899B5
		lea	ecx, [esi+0Ch]
		pop	esi
		jmp	sub_6B1899B5
Ordinal1090	endp

; Exported entry 1092.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1092
Ordinal1092	proc near		; CODE XREF: Ordinal1393+35Cp
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+18h], 0
		and	dword ptr [esi+4], 0
		lea	ecx, [esi+0Ch]
		call	sub_6B18175E
		lea	ecx, [esi+10h]
		call	sub_6B18175E
		lea	ecx, [esi+1Ch]
		call	sub_6B18175E
		lea	ecx, [esi+14h]
		pop	esi
		jmp	sub_6B18175E
Ordinal1092	endp

; Exported entry 1089.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1089
Ordinal1089	proc near		; CODE XREF: Ordinal146+115p
					; Ordinal142+38Fp ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+4], 0
		lea	ecx, [esi+0Ch]
		mov	dword ptr [esi], offset	off_6B1B435C
		mov	[esi+8], eax
		call	sub_6B181879
		lea	ecx, [esi+10h]
		call	sub_6B181879
		lea	ecx, [esi+14h]
		call	sub_6B181879
		and	dword ptr [esi+18h], 0
		lea	ecx, [esi+1Ch]
		call	sub_6B181879
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1089	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B197D52(void *, char)
sub_6B197D52	proc near		; DATA XREF: .rdata:off_6B1B435Co

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1090
		test	[esp+4+arg_0], 1
		jz	short loc_6B197D68
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B197D68:				; CODE XREF: sub_6B197D52+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B197D52	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6B197D6E(LPCWSTR lpWideCharStr)
sub_6B197D6E	proc near		; CODE XREF: Ordinal1104+1Bp

lpWideCharStr	= dword	ptr  4

		push	ebx
		mov	ebx, [esp+4+lpWideCharStr]
		test	ebx, ebx
		push	esi
		push	edi
		mov	edi, ecx
		jz	short loc_6B197D86
		push	ebx		; lpWideCharStr
		call	sub_6B197CA2
		pop	ecx
		mov	esi, eax
		jmp	short loc_6B197D88
; ---------------------------------------------------------------------------

loc_6B197D86:				; CODE XREF: sub_6B197D6E+Bj
		xor	esi, esi

loc_6B197D88:				; CODE XREF: sub_6B197D6E+16j
		test	esi, esi
		mov	ecx, edi
		jle	short loc_6B197DAB
		push	esi
		call	sub_6B1818C7
		push	0FFFFFFFFh	; cchWideChar
		push	ebx		; lpWideCharStr
		push	esi		; cbMultiByte
		push	eax		; lpMultiByteStr
		call	sub_6B1815DB
		add	esp, 10h
		push	esi
		mov	ecx, edi
		call	sub_6B181598
		jmp	short loc_6B197DB0
; ---------------------------------------------------------------------------

loc_6B197DAB:				; CODE XREF: sub_6B197D6E+1Ej
		call	sub_6B18175E

loc_6B197DB0:				; CODE XREF: sub_6B197D6E+3Bj
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		retn	4
sub_6B197D6E	endp

; Exported entry 1104.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1104(LPCWSTR lpWideCharStr)
		public Ordinal1104
Ordinal1104	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
lpWideCharStr	= dword	ptr  8

		mov	eax, offset unknown_libname_87 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		and	[ebp+var_4], 0
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	[ebp+lpWideCharStr] ; lpWideCharStr
		add	ecx, 10h
		call	sub_6B197D6E

loc_6B197DD8:				; DATA XREF: sub_6B197DE9o
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn	4
Ordinal1104	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B197DE9	proc near		; DATA XREF: .rdata:stru_6B1BC358o
		mov	eax, offset loc_6B197DD8
		retn
sub_6B197DE9	endp

; Exported entry 1106.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1106
Ordinal1106	proc near		; CODE XREF: Ordinal146+17Ep
					; Ordinal146+1D3p ...

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_88 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	ecx
		and	[ebp+var_4], 0
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		mov	eax, [esi+14h]
		mov	ecx, [esi+10h]
		mov	edx, [esi+0Ch]
		mov	[ebp+var_10], esp
		push	dword ptr [esi+18h]
		mov	[ebp+var_14], esi
		push	eax
		push	ecx
		push	edx
		push	dword ptr [esi+8] ; Args
		lea	eax, [esi+1Ch]
		push	offset aSSSSLd	; "%s, %s, %s, %s (%ld)"
		push	eax		; int
		call	sub_6B18F0EE
		add	esp, 1Ch
		jmp	short loc_6B197E38
; ---------------------------------------------------------------------------

loc_6B197E2F:				; DATA XREF: .rdata:stru_6B1BC3A8o
		mov	eax, offset loc_6B197E35
		retn
; ---------------------------------------------------------------------------

loc_6B197E35:				; DATA XREF: Ordinal1106:loc_6B197E2Fo
		mov	esi, [ebp+var_14]

loc_6B197E38:				; CODE XREF: Ordinal1106+3Ej
		mov	eax, [esi+1Ch]
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn
Ordinal1106	endp

; Exported entry 1097.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1097(char *Src)
		public Ordinal1097
Ordinal1097	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8

		mov	eax, offset unknown_libname_89 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		and	[ebp+var_4], 0
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	[ebp+Src]	; Src
		add	ecx, 14h
		call	sub_6B181EA9

loc_6B197E6A:				; DATA XREF: sub_6B197E7Bo
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn	4
Ordinal1097	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B197E7B	proc near		; DATA XREF: .rdata:stru_6B1BC3F8o
		mov	eax, offset loc_6B197E6A
		retn
sub_6B197E7B	endp

; Exported entry 1101.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1101(char *Src)
		public Ordinal1101
Ordinal1101	proc near		; CODE XREF: Ordinal146+165p
					; Ordinal146+1A8p ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8

		mov	eax, offset unknown_libname_90 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		and	[ebp+var_4], 0
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	[ebp+Src]	; Src
		add	ecx, 0Ch
		call	sub_6B181EA9

loc_6B197EA1:				; DATA XREF: sub_6B197EB2o
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn	4
Ordinal1101	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B197EB2	proc near		; DATA XREF: .rdata:stru_6B1BC448o
		mov	eax, offset loc_6B197EA1
		retn
sub_6B197EB2	endp

; Exported entry 1103.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1103(char *Src)
		public Ordinal1103
Ordinal1103	proc near		; CODE XREF: Ordinal146+176p
					; Ordinal146+1CBp ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8

		mov	eax, offset unknown_libname_91 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		and	[ebp+var_4], 0
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	[ebp+Src]	; Src
		add	ecx, 10h
		call	sub_6B181EA9

loc_6B197ED8:				; DATA XREF: sub_6B197EE9o
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn	4
Ordinal1103	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B197EE9	proc near		; DATA XREF: .rdata:stru_6B1BC498o
		mov	eax, offset loc_6B197ED8
		retn
sub_6B197EE9	endp

; Exported entry 1107.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1107
Ordinal1107	proc near		; CODE XREF: Ordinal154+1Fp
					; Ordinal711+Cp ...
		mov	eax, ecx
		or	dword ptr [eax+4], 0FFFFFFFFh
		and	dword ptr [eax+8], 0
		mov	dword ptr [eax], offset	off_6B1B4378
		retn
Ordinal1107	endp

; Exported entry 1113.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1113
Ordinal1113	proc near		; CODE XREF: Ordinal719+1Cp
					; Ordinal738+9p ...
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_6B197F16
		push	eax		; hObject
		call	ds:CloseHandle
		or	dword ptr [esi+4], 0FFFFFFFFh

loc_6B197F16:				; CODE XREF: Ordinal1113+9j
		xor	eax, eax
		inc	eax
		pop	esi
		retn
Ordinal1113	endp

; Exported entry 1114.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1114(LONG lDistanceToMove, int, DWORD dwMoveMethod)
		public Ordinal1114
Ordinal1114	proc near		; CODE XREF: Ordinal1115+5p
					; Ordinal1116+6p ...

var_8		= dword	ptr -8
DistanceToMoveHigh= dword ptr -4
lDistanceToMove	= dword	ptr  8
arg_4		= dword	ptr  0Ch
dwMoveMethod	= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		mov	eax, [ebp+lDistanceToMove]
		push	esi
		push	[ebp+dwMoveMethod] ; dwMoveMethod
		mov	esi, ecx
		mov	ecx, [ebp+arg_4]
		mov	[ebp+DistanceToMoveHigh], ecx
		lea	ecx, [ebp+DistanceToMoveHigh]
		push	ecx		; lpDistanceToMoveHigh
		push	eax		; lDistanceToMove
		push	dword ptr [esi+4] ; hFile
		mov	[ebp+var_8], eax
		call	ds:SetFilePointer
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6B197F63
		call	ds:GetLastError
		test	eax, eax
		mov	[esi+8], eax
		jz	short loc_6B197F63
		push	eax		; Args
		push	offset aCfileSeekSetfi ; "CFile::Seek()	: SetFilePointer() == INV"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B197F66
; ---------------------------------------------------------------------------

loc_6B197F63:				; CODE XREF: Ordinal1114+28j
					; Ordinal1114+35j
		xor	eax, eax
		inc	eax

loc_6B197F66:				; CODE XREF: Ordinal1114+46j
		pop	esi
		leave
		retn	0Ch
Ordinal1114	endp

; Exported entry 1115.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1115
Ordinal1115	proc near		; DATA XREF: .rdata:off_6B1BF428o
		xor	eax, eax
		push	eax		; dwMoveMethod
		push	eax		; int
		push	eax		; lDistanceToMove
		call	Ordinal1114
		retn
Ordinal1115	endp

; Exported entry 1116.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1116
Ordinal1116	proc near		; CODE XREF: Ordinal738+5Cp
					; DATA XREF: .rdata:off_6B1BF428o
		push	2		; dwMoveMethod
		push	0		; int
		push	0		; lDistanceToMove
		call	Ordinal1114
		retn
Ordinal1116	endp

; Exported entry 1117.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1117(LPVOID lpBuffer, DWORD nNumberOfBytesToRead)
		public Ordinal1117
Ordinal1117	proc near		; CODE XREF: Ordinal164+23p
					; Ordinal1118+1Ep ...

NumberOfBytesRead= dword ptr -4
lpBuffer	= dword	ptr  8
nNumberOfBytesToRead= dword ptr	 0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		and	[ebp+NumberOfBytesRead], 0
		push	esi
		push	edi
		mov	edi, [ebp+nNumberOfBytesToRead]
		push	0		; lpOverlapped
		lea	eax, [ebp+NumberOfBytesRead]
		push	eax		; lpNumberOfBytesRead
		push	edi		; nNumberOfBytesToRead
		push	[ebp+lpBuffer]	; lpBuffer
		mov	esi, ecx
		push	dword ptr [esi+4] ; hFile
		call	ds:ReadFile
		test	eax, eax
		jz	short loc_6B197FB2
		cmp	[ebp+NumberOfBytesRead], edi
		jnz	short loc_6B197FB2
		xor	eax, eax
		inc	eax
		jmp	short loc_6B197FCA
; ---------------------------------------------------------------------------

loc_6B197FB2:				; CODE XREF: Ordinal1117+24j
					; Ordinal1117+29j
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCfileReadReadf ; "CFile::Read()	: ReadFile() ==	FALSE, 0x"...
		mov	[esi+8], eax
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax

loc_6B197FCA:				; CODE XREF: Ordinal1117+2Ej
		pop	edi
		pop	esi
		leave
		retn	8
Ordinal1117	endp

; Exported entry 1119.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1119(LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite)
		public Ordinal1119
Ordinal1119	proc near		; CODE XREF: Ordinal163+23p
					; Ordinal736+43p ...

NumberOfBytesWritten= dword ptr	-4
lpBuffer	= dword	ptr  8
nNumberOfBytesToWrite= dword ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		and	[ebp+NumberOfBytesWritten], 0
		push	esi
		push	edi
		mov	edi, [ebp+nNumberOfBytesToWrite]
		push	0		; lpOverlapped
		lea	eax, [ebp+NumberOfBytesWritten]
		push	eax		; lpNumberOfBytesWritten
		push	edi		; nNumberOfBytesToWrite
		push	[ebp+lpBuffer]	; lpBuffer
		mov	esi, ecx
		push	dword ptr [esi+4] ; hFile
		call	ds:WriteFile
		test	eax, eax
		jz	short loc_6B198000
		cmp	[ebp+NumberOfBytesWritten], edi
		jnz	short loc_6B198000
		xor	eax, eax
		inc	eax
		jmp	short loc_6B198018
; ---------------------------------------------------------------------------

loc_6B198000:				; CODE XREF: Ordinal1119+24j
					; Ordinal1119+29j
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCfileWriteWrit ; "CFile::Write() : WriteFile() == FALSE, "...
		mov	[esi+8], eax
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax

loc_6B198018:				; CODE XREF: Ordinal1119+2Ej
		pop	edi
		pop	esi
		leave
		retn	8
Ordinal1119	endp

; Exported entry 1121.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1121
Ordinal1121	proc near		; CODE XREF: Ordinal1110+Dp
					; Ordinal1122+Fp
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		cmp	edi, 0FFFFFFFFh
		mov	esi, ecx
		jnz	short loc_6B19803A
		push	offset aCfileAttachHfi ; "CFile::Attach() : hFile == INVALID_HAND"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B198047
; ---------------------------------------------------------------------------

loc_6B19803A:				; CODE XREF: Ordinal1121+Bj
		mov	ecx, esi
		call	Ordinal1113
		xor	eax, eax
		mov	[esi+4], edi
		inc	eax

loc_6B198047:				; CODE XREF: Ordinal1121+1Aj
		pop	edi
		pop	esi
		retn	4
Ordinal1121	endp

; Exported entry 1123.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1123
Ordinal1123	proc near		; CODE XREF: Ordinal1122+7p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, [ecx+4]
		or	dword ptr [ecx+4], 0FFFFFFFFh
		call	Ordinal1113
		mov	eax, esi
		pop	esi
		retn
Ordinal1123	endp

; Exported entry 1124.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1124
Ordinal1124	proc near		; CODE XREF: Ordinal736+63p
					; Ordinal939+5Bp ...
		push	dword ptr [ecx+4] ; hFile
		call	ds:FlushFileBuffers
		retn
Ordinal1124	endp

; Exported entry 1126.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1126
Ordinal1126	proc near		; DATA XREF: .rdata:off_6B1BF428o

Buffer		= dword	ptr -8
NumberOfBytesRead= dword ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		xor	eax, eax
		push	eax		; lpOverlapped
		lea	edx, [ebp+NumberOfBytesRead]
		push	edx		; lpNumberOfBytesRead
		push	eax		; nNumberOfBytesToRead
		mov	[ebp+NumberOfBytesRead], eax
		mov	[ebp+Buffer], eax
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		push	dword ptr [ecx+4] ; hFile
		call	ds:ReadFile
		neg	eax
		sbb	eax, eax
		neg	eax
		leave
		retn
Ordinal1126	endp

; Exported entry 1127.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1127
Ordinal1127	proc near		; DATA XREF: .rdata:off_6B1BF428o

Buffer		= dword	ptr -8
NumberOfBytesWritten= dword ptr	-4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		xor	eax, eax
		push	eax		; lpOverlapped
		lea	edx, [ebp+NumberOfBytesWritten]
		push	edx		; lpNumberOfBytesWritten
		push	eax		; nNumberOfBytesToWrite
		mov	[ebp+NumberOfBytesWritten], eax
		mov	[ebp+Buffer], eax
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		push	dword ptr [ecx+4] ; hFile
		call	ds:WriteFile
		neg	eax
		sbb	eax, eax
		neg	eax
		leave
		retn
Ordinal1127	endp

; Exported entry 1128.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1128
Ordinal1128	proc near		; CODE XREF: Ordinal159+20p
					; Ordinal762+7Cp ...

var_8		= dword	ptr -8
FileSizeHigh	= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	esi
		mov	esi, [ebp+arg_0]
		and	dword ptr [esi], 0
		and	dword ptr [esi+4], 0
		push	edi
		lea	eax, [ebp+FileSizeHigh]
		mov	edi, ecx
		push	eax		; lpFileSizeHigh
		push	dword ptr [edi+4] ; hFile
		call	ds:GetFileSize
		cmp	eax, 0FFFFFFFFh
		mov	[ebp+var_8], eax
		jnz	short loc_6B1980FD
		call	ds:GetLastError
		test	eax, eax
		mov	[edi+8], eax
		jz	short loc_6B1980FD
		push	eax		; Args
		push	offset aCfileGetlength ; "CFile::GetLength() : GetFileSize() ==	I"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B19810B
; ---------------------------------------------------------------------------

loc_6B1980FD:				; CODE XREF: Ordinal1128+26j
					; Ordinal1128+33j
		mov	eax, [ebp+var_8]
		mov	[esi], eax
		mov	eax, [ebp+FileSizeHigh]
		mov	[esi+4], eax
		xor	eax, eax
		inc	eax

loc_6B19810B:				; CODE XREF: Ordinal1128+44j
		pop	edi
		pop	esi
		leave
		retn	4
Ordinal1128	endp

; Exported entry 1129.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1129
Ordinal1129	proc near		; CODE XREF: Ordinal726+1Dp
					; DATA XREF: .rdata:off_6B1BF428o

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		and	[ebp+var_8], 0
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_8]
		push	eax
		call	Ordinal1128
		test	eax, eax
		jnz	short loc_6B19812F
		xor	edx, edx
		leave
		retn
; ---------------------------------------------------------------------------

loc_6B19812F:				; CODE XREF: Ordinal1129+18j
		mov	eax, [ebp+var_8]
		mov	edx, [ebp+var_4]
		leave
		retn
Ordinal1129	endp

; Exported entry 1132.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1132
Ordinal1132	proc near		; CODE XREF: Ordinal161+20p
					; Ordinal1131+11p ...

var_8		= dword	ptr -8
DistanceToMoveHigh= dword ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		push	1		; dwMoveMethod
		xor	ebx, ebx
		lea	eax, [ebp+DistanceToMoveHigh]
		push	eax		; lpDistanceToMoveHigh
		mov	edi, ecx
		push	ebx		; lDistanceToMove
		mov	[esi], ebx
		mov	[esi+4], ebx
		push	dword ptr [edi+4] ; hFile
		mov	[ebp+var_8], ebx
		mov	[ebp+DistanceToMoveHigh], ebx
		call	ds:SetFilePointer
		cmp	eax, 0FFFFFFFFh
		mov	[ebp+var_8], eax
		jnz	short loc_6B198187
		call	ds:GetLastError
		cmp	eax, ebx
		mov	[edi+8], eax
		jz	short loc_6B198187
		push	eax		; Args
		push	offset aCfileGetpositi ; "CFile::GetPosition() : SetFilePointer()"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B198195
; ---------------------------------------------------------------------------

loc_6B198187:				; CODE XREF: Ordinal1132+30j
					; Ordinal1132+3Dj
		mov	eax, [ebp+var_8]
		mov	[esi], eax
		mov	eax, [ebp+DistanceToMoveHigh]
		mov	[esi+4], eax
		xor	eax, eax
		inc	eax

loc_6B198195:				; CODE XREF: Ordinal1132+4Ej
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal1132	endp

; Exported entry 1133.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1133(LONG lDistanceToMove, int)
		public Ordinal1133
Ordinal1133	proc near		; CODE XREF: Ordinal162+23p
					; Ordinal1118+Bp ...

lDistanceToMove	= dword	ptr  4
arg_4		= dword	ptr  8

		push	0		; dwMoveMethod
		push	[esp+4+arg_4]	; int
		push	[esp+8+lDistanceToMove]	; lDistanceToMove
		call	Ordinal1114
		retn	8
Ordinal1133	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_6B1981AE	proc near		; CODE XREF: sub_6B19848A+22p

var_50		= dword	ptr -50h
var_28		= byte ptr -28h
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_92 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		push	offset aVectorTTooLong ; "vector<T> too	long"
		lea	ecx, [ebp+var_28]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_28]
		push	eax
		lea	ecx, [ebp+var_50]
		call	sub_6B181357
		push	offset dword_6B1BA9E8
		lea	eax, [ebp+var_50]
		push	eax
		mov	[ebp+var_50], offset off_6B1AA914
		call	_CxxThrowException
sub_6B1981AE	endp

; ---------------------------------------------------------------------------
		db 0CCh

; =============== S U B	R O U T	I N E =======================================


sub_6B1981EF	proc near		; CODE XREF: sub_6B1984CA+10p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_4]
		test	ecx, ecx
		jbe	short locret_6B198207
		mov	eax, [esp+arg_0]

loc_6B1981FB:				; CODE XREF: sub_6B1981EF+16j
		mov	edx, [esp+arg_8]
		mov	dl, [edx]
		mov	[eax], dl
		inc	eax
		dec	ecx
		jnz	short loc_6B1981FB

locret_6B198207:			; CODE XREF: sub_6B1981EF+6j
		retn
sub_6B1981EF	endp

; Exported entry 1109.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1109
Ordinal1109	proc near		; CODE XREF: Ordinal158+1Bp
					; Ordinal712+3Aj ...
		mov	dword ptr [ecx], offset	off_6B1B4378
		jmp	Ordinal1113
Ordinal1109	endp

; Exported entry 1110.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1110
Ordinal1110	proc near		; CODE XREF: Ordinal1108+15p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, ecx
		cmp	[esi+4], eax
		jz	short loc_6B198234
		push	eax
		call	Ordinal1121
		test	eax, eax
		jnz	short loc_6B198234
		push	offset aCfileOperatorA ; "CFile::operator =() :	Attach() == FALSE"...
		call	sub_6B18102E
		pop	ecx

loc_6B198234:				; CODE XREF: Ordinal1110+Aj
					; Ordinal1110+14j
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1110	endp

; Exported entry 1112.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1112(LPCSTR Args, DWORD dwDesiredAccess,	DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes,	HANDLE hTemplateFile)
		public Ordinal1112
Ordinal1112	proc near		; CODE XREF: Ordinal738+4Ap
					; Ordinal926+27p ...

Args		= dword	ptr  8
dwDesiredAccess	= dword	ptr  0Ch
dwShareMode	= dword	ptr  10h
lpSecurityAttributes= dword ptr	 14h
dwCreationDisposition= dword ptr  18h
dwFlagsAndAttributes= dword ptr	 1Ch
hTemplateFile	= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		mov	edi, [ebp+Args]
		test	edi, edi
		mov	esi, ecx
		jz	short loc_6B19829A
		push	edi		; lpString
		call	ds:lstrlenA
		test	eax, eax
		jz	short loc_6B19829A
		mov	ecx, esi
		call	Ordinal1113
		push	[ebp+hTemplateFile] ; hTemplateFile
		push	[ebp+dwFlagsAndAttributes] ; dwFlagsAndAttributes
		push	[ebp+dwCreationDisposition] ; dwCreationDisposition
		push	[ebp+lpSecurityAttributes] ; lpSecurityAttributes
		push	[ebp+dwShareMode] ; dwShareMode
		push	[ebp+dwDesiredAccess] ;	dwDesiredAccess
		push	edi		; lpFileName
		call	ds:CreateFileA
		cmp	eax, 0FFFFFFFFh
		mov	[esi+4], eax
		jnz	short loc_6B198295
		call	ds:GetLastError
		push	eax
		push	edi		; Args
		push	offset aCfileOpenCreat ; "CFile::Open()	: CreateFile() == INVALID"...
		mov	[esi+8], eax
		call	sub_6B18102E
		add	esp, 0Ch
		jmp	short loc_6B1982A5
; ---------------------------------------------------------------------------

loc_6B198295:				; CODE XREF: Ordinal1112+3Fj
		xor	eax, eax
		inc	eax
		jmp	short loc_6B1982A7
; ---------------------------------------------------------------------------

loc_6B19829A:				; CODE XREF: Ordinal1112+Cj
					; Ordinal1112+17j
		push	offset aCfileOpenSzfil ; "CFile::Open()	: szFileName ==	NULL\n"
		call	sub_6B18102E
		pop	ecx

loc_6B1982A5:				; CODE XREF: Ordinal1112+59j
		xor	eax, eax

loc_6B1982A7:				; CODE XREF: Ordinal1112+5Ej
		pop	edi
		pop	esi
		pop	ebp
		retn	1Ch
Ordinal1112	endp

; Exported entry 1118.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1118(LONG lDistanceToMove, int, LPVOID lpBuffer,	DWORD nNumberOfBytesToRead)
		public Ordinal1118
Ordinal1118	proc near		; CODE XREF: Ordinal925+41p
					; Ordinal940+41p ...

lDistanceToMove	= dword	ptr  4
arg_4		= dword	ptr  8
lpBuffer	= dword	ptr  0Ch
nNumberOfBytesToRead= dword ptr	 10h

		push	esi
		push	[esp+4+arg_4]	; int
		mov	esi, ecx
		push	[esp+8+lDistanceToMove]	; lDistanceToMove
		call	Ordinal1133
		test	eax, eax
		jz	short loc_6B1982D9
		push	[esp+4+nNumberOfBytesToRead] ; nNumberOfBytesToRead
		mov	ecx, esi
		push	[esp+8+lpBuffer] ; lpBuffer
		call	Ordinal1117
		test	eax, eax
		jz	short loc_6B1982D9
		xor	eax, eax
		inc	eax
		jmp	short loc_6B1982DB
; ---------------------------------------------------------------------------

loc_6B1982D9:				; CODE XREF: Ordinal1118+12j
					; Ordinal1118+25j
		xor	eax, eax

loc_6B1982DB:				; CODE XREF: Ordinal1118+2Aj
		pop	esi
		retn	10h
Ordinal1118	endp

; Exported entry 1120.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1120(LONG lDistanceToMove, int, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite)
		public Ordinal1120
Ordinal1120	proc near		; CODE XREF: Ordinal762+2FAp
					; Ordinal939+44p ...

lDistanceToMove	= dword	ptr  4
arg_4		= dword	ptr  8
lpBuffer	= dword	ptr  0Ch
nNumberOfBytesToWrite= dword ptr  10h

		push	esi
		push	[esp+4+arg_4]	; int
		mov	esi, ecx
		push	[esp+8+lDistanceToMove]	; lDistanceToMove
		call	Ordinal1133
		test	eax, eax
		jz	short loc_6B19830B
		push	[esp+4+nNumberOfBytesToWrite] ;	nNumberOfBytesToWrite
		mov	ecx, esi
		push	[esp+8+lpBuffer] ; lpBuffer
		call	Ordinal1119
		test	eax, eax
		jz	short loc_6B19830B
		xor	eax, eax
		inc	eax
		jmp	short loc_6B19830D
; ---------------------------------------------------------------------------

loc_6B19830B:				; CODE XREF: Ordinal1120+12j
					; Ordinal1120+25j
		xor	eax, eax

loc_6B19830D:				; CODE XREF: Ordinal1120+2Aj
		pop	esi
		retn	10h
Ordinal1120	endp

; Exported entry 1122.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1122
Ordinal1122	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	ecx, [esp+4+arg_0]
		call	Ordinal1123
		push	eax
		mov	ecx, esi
		call	Ordinal1121
		pop	esi
		retn	4
Ordinal1122	endp

; Exported entry 1130.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1130(LONG lDistanceToMove, int)
		public Ordinal1130
Ordinal1130	proc near		; CODE XREF: Ordinal160+23p
					; Ordinal720+20p ...

lDistanceToMove	= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	[esp+4+arg_4]	; int
		mov	esi, ecx
		push	[esp+8+lDistanceToMove]	; lDistanceToMove
		call	Ordinal1133
		test	eax, eax
		jz	short loc_6B19834F
		push	dword ptr [esi+4] ; hFile
		call	ds:SetEndOfFile
		test	eax, eax
		jz	short loc_6B19834F
		xor	eax, eax
		inc	eax
		jmp	short loc_6B198367
; ---------------------------------------------------------------------------

loc_6B19834F:				; CODE XREF: Ordinal1130+12j
					; Ordinal1130+1Fj
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCfileSetlength ; "CFile::SetLength() : SetEndOfFile() == "...
		mov	[esi+8], eax
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax

loc_6B198367:				; CODE XREF: Ordinal1130+24j
		pop	esi
		retn	8
Ordinal1130	endp

; Exported entry 1131.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1131
Ordinal1131	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		and	[ebp+var_8], 0
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_8]
		push	eax
		call	Ordinal1132
		test	eax, eax
		jnz	short loc_6B198389
		xor	edx, edx
		leave
		retn
; ---------------------------------------------------------------------------

loc_6B198389:				; CODE XREF: Ordinal1131+18j
		mov	eax, [ebp+var_8]
		mov	edx, [ebp+var_4]
		leave
		retn
Ordinal1131	endp

; Exported entry 1135.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1135(LPCSTR lpFileName, int)
		public Ordinal1135
Ordinal1135	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
Args		= byte ptr -4
lpFileName	= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		xor	edi, edi
		cmp	[ebp+arg_4], edi
		jz	loc_6B198424
		or	[ebp+var_8], 0FFFFFFFFh
		push	edi		; hTemplateFile
		push	4000000h	; dwFlagsAndAttributes
		push	4		; dwCreationDisposition
		push	edi		; lpSecurityAttributes
		push	edi		; dwShareMode
		push	0C0000000h	; dwDesiredAccess
		push	[ebp+lpFileName] ; Args
		mov	esi, offset off_6B1B4378
		lea	ecx, [ebp+var_C]
		mov	[ebp+var_C], esi
		mov	dword ptr [ebp+Args], edi
		call	Ordinal1112
		test	eax, eax
		jnz	short loc_6B1983ED
		push	dword ptr [ebp+Args] ; Args
		push	offset aCfileDeleteDel ; "CFile::Delete() : deleteFile.Open() == "...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		lea	ecx, [ebp+var_C]
		mov	[ebp+var_C], esi
		call	Ordinal1113
		jmp	short loc_6B198444
; ---------------------------------------------------------------------------

loc_6B1983ED:				; CODE XREF: Ordinal1135+3Ej
		push	edi		; int
		push	edi		; lDistanceToMove
		lea	ecx, [ebp+var_C]
		call	Ordinal1130
		test	eax, eax
		jnz	short loc_6B19840A
		push	dword ptr [ebp+Args] ; Args
		push	offset aCfileDeleteD_0 ; "CFile::Delete() : deleteFile.SetLength("...
		call	sub_6B18102E
		pop	ecx
		pop	ecx

loc_6B19840A:				; CODE XREF: Ordinal1135+68j
		lea	ecx, [ebp+var_C]
		call	Ordinal1113
		lea	ecx, [ebp+var_C]
		mov	[ebp+var_C], esi
		call	Ordinal1113

loc_6B19841D:				; CODE XREF: Ordinal1135+9Ej
		xor	eax, eax
		inc	eax

loc_6B198420:				; CODE XREF: Ordinal1135+B5j
		pop	edi
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------

loc_6B198424:				; CODE XREF: Ordinal1135+Dj
		push	[ebp+lpFileName] ; lpFileName
		call	ds:DeleteFileA
		test	eax, eax
		jnz	short loc_6B19841D
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCfileDeleteD_1 ; "CFile::Delete() : ::DeleteFile() == FAL"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx

loc_6B198444:				; CODE XREF: Ordinal1135+5Aj
		xor	eax, eax
		jmp	short loc_6B198420
Ordinal1135	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B198448(void *, char)
sub_6B198448	proc near		; DATA XREF: .rdata:off_6B1B4378o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1B4378
		call	Ordinal1113
		test	[esp+4+arg_0], 1
		jz	short loc_6B198464
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B198464:				; CODE XREF: sub_6B198448+13j
		mov	eax, esi
		pop	esi
		retn	4
sub_6B198448	endp

; Exported entry 1108.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1108
Ordinal1108	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		or	dword ptr [esi+4], 0FFFFFFFFh
		and	dword ptr [esi+8], 0
		mov	dword ptr [esi], offset	off_6B1B4378
		call	Ordinal1110
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1108	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6B19848A(size_t Size)
sub_6B19848A	proc near		; CODE XREF: sub_6B1984EA+7p

Size		= dword	ptr  4

		push	esi
		xor	eax, eax
		push	edi
		mov	edi, [esp+8+Size]
		cmp	edi, eax
		mov	esi, ecx
		mov	[esi+4], eax
		mov	[esi+8], eax
		mov	[esi+0Ch], eax
		jnz	short loc_6B1984A5
		xor	al, al
		jmp	short loc_6B1984C5
; ---------------------------------------------------------------------------

loc_6B1984A5:				; CODE XREF: sub_6B19848A+15j
		cmp	edi, 0FFFFFFFFh
		jbe	short loc_6B1984B1
		mov	ecx, esi
		call	sub_6B1981AE
; ---------------------------------------------------------------------------

loc_6B1984B1:				; CODE XREF: sub_6B19848A+1Ej
		push	edi		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	[esi+4], eax
		mov	[esi+8], eax
		add	eax, edi
		mov	[esi+0Ch], eax
		pop	ecx
		mov	al, 1

loc_6B1984C5:				; CODE XREF: sub_6B19848A+19j
		pop	edi
		pop	esi
		retn	4
sub_6B19848A	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1984CA	proc near		; CODE XREF: sub_6B1984EA+1Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		push	[esp+8+arg_8]
		mov	edi, [esp+0Ch+arg_0]
		push	esi
		push	edi
		call	sub_6B1981EF
		add	esp, 0Ch
		lea	eax, [edi+esi]
		pop	edi
		pop	esi
		retn	0Ch
sub_6B1984CA	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6B1984EA(size_t Size, int)
sub_6B1984EA	proc near		; CODE XREF: sub_6B198513+12p

Size		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	[esp+4+Size]	; Size
		mov	esi, ecx
		call	sub_6B19848A
		test	al, al
		jz	short loc_6B19850F
		push	[esp+4+arg_4]
		mov	ecx, esi
		push	[esp+8+Size]
		push	dword ptr [esi+4]
		call	sub_6B1984CA
		mov	[esi+8], eax

loc_6B19850F:				; CODE XREF: sub_6B1984EA+Ej
		pop	esi
		retn	8
sub_6B1984EA	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6B198513(size_t Size)
sub_6B198513	proc near		; CODE XREF: Ordinal1136+41p

var_1		= dword	ptr -1
Size		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		lea	eax, [ebp+var_1]
		push	eax		; int
		push	[ebp+Size]	; Size
		mov	esi, ecx
		mov	byte ptr [ebp+var_1], 0
		call	sub_6B1984EA
		mov	eax, esi
		pop	esi
		leave
		retn	4
sub_6B198513	endp

; Exported entry 1136.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1136(LPCSTR lpString2)
		public Ordinal1136
Ordinal1136	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_44		= byte ptr -44h
var_24		= byte ptr -24h
pszPath		= dword	ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
lpString2	= dword	ptr  8

		mov	eax, offset unknown_libname_93 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 40h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCfileMakesured ; "CFile::MakeSureDirectoryExists()"
		lea	ecx, [ebp+var_44]
		mov	[ebp+var_14], eax
		call	Ordinal1089
		push	[ebp+lpString2]	; lpString
		and	[ebp+var_4], 0
		xor	ebx, ebx
		inc	ebx
		mov	byte ptr [ebp+var_4], bl
		call	ds:lstrlenA
		inc	eax
		inc	eax
		push	eax		; Size
		lea	ecx, [ebp+var_24]
		call	sub_6B198513
		push	[ebp+lpString2]	; lpString2
		mov	edi, [ebp+pszPath]
		push	edi		; lpString1
		call	ds:lstrcpyA
		push	edi		; pszPath
		call	ds:PathAddBackslashA
		push	edi		; pszPath
		call	ds:PathIsUNCA
		test	eax, eax
		jz	short loc_6B1985A7
		push	edi		; pszPath
		call	ds:PathSkipRootA
		push	eax		; lpszCurrent
		push	edi		; lpszStart
		call	ds:CharPrevA
		jmp	short loc_6B1985B2
; ---------------------------------------------------------------------------

loc_6B1985A7:				; CODE XREF: Ordinal1136+63j
		push	5Ch		; unsigned int
		push	edi		; unsigned __int8 *

loc_6B1985AA:				; CODE XREF: Ordinal1136+DFj
		call	ds:_mbschr
		pop	ecx
		pop	ecx

loc_6B1985B2:				; CODE XREF: Ordinal1136+74j
		mov	esi, eax
		test	esi, esi
		jz	loc_6B19864C
		test	ebx, ebx
		jz	loc_6B19864C
		push	edi		; lpFileName
		mov	byte ptr [esi],	0
		call	ds:GetFileAttributesA
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6B198612
		call	ds:GetLastError
		cmp	eax, 2
		jnz	short loc_6B198601
		push	0		; lpSecurityAttributes
		push	edi		; lpPathName
		call	ds:CreateDirectoryA
		mov	ebx, eax
		test	ebx, ebx
		jnz	short loc_6B198603
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCfileMakesur_0 ; "CFile::MakeSureDirectoryExists() : Crea"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B198620
; ---------------------------------------------------------------------------

loc_6B198601:				; CODE XREF: Ordinal1136+ABj
		xor	ebx, ebx

loc_6B198603:				; CODE XREF: Ordinal1136+BAj
					; Ordinal1136+E3j
		push	esi		; lpsz
		mov	byte ptr [esi],	5Ch
		call	ds:CharNextA
		push	5Ch
		push	eax
		jmp	short loc_6B1985AA
; ---------------------------------------------------------------------------

loc_6B198612:				; CODE XREF: Ordinal1136+A0j
		test	al, 10h
		jnz	short loc_6B198603
		push	offset aCfileMakesur_1 ; "CFile::MakeSureDirectoryExists() : (dwA"...
		call	sub_6B18102E

loc_6B198620:				; CODE XREF: Ordinal1136+CEj
		pop	ecx
		lea	ecx, [ebp+var_24]
		call	sub_6B1A1AF0

loc_6B198629:				; DATA XREF: sub_6B198658+3Do
					; sub_6B19869B+4Fo
		xor	esi, esi

loc_6B19862B:				; CODE XREF: Ordinal1136+125j
		lea	ecx, [ebp+var_44]
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
; ---------------------------------------------------------------------------

loc_6B19864C:				; CODE XREF: Ordinal1136+85j
					; Ordinal1136+8Dj
		lea	ecx, [ebp+var_24]
		call	sub_6B1A1AF0
		mov	esi, ebx
		jmp	short loc_6B19862B
Ordinal1136	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B198658	proc near		; DATA XREF: .rdata:6B1BC520o
		push	13h
		lea	ecx, [ebp-44h]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-44h]
		call	Ordinal1101
		mov	ecx, [ebp-4Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal1103
		lea	ecx, [ebp-44h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B198629
		retn
sub_6B198658	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19869B	proc near		; DATA XREF: .rdata:6B1BC530o
		push	15h
		lea	ecx, [ebp-44h]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-44h]
		call	Ordinal1101
		mov	eax, [ebp-48h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal1103
		lea	ecx, [ebp-44h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B198629
		retn
sub_6B19869B	endp

; Exported entry 1137.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1137
Ordinal1137	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		call	Ordinal610
		lea	ecx, [esi+28h]
		mov	dword ptr [esi], offset	off_6B1B4734
		call	Ordinal1107
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1137	endp

; Exported entry 1138.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1138
Ordinal1138	proc near		; CODE XREF: sub_6B19879B+3p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+28h]
		mov	dword ptr [esi], offset	off_6B1B4734
		call	Ordinal1109
		mov	ecx, esi
		pop	esi
		jmp	Ordinal611
Ordinal1138	endp

; Exported entry 1139.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1139
Ordinal1139	proc near		; DATA XREF: .rdata:off_6B1BF428o
		lea	eax, [ecx+28h]
		retn
Ordinal1139	endp

; Exported entry 1140.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1140
Ordinal1140	proc near		; DATA XREF: .rdata:6B1B4738o
					; .rdata:off_6B1BF428o
		add	ecx, 28h
		jmp	Ordinal1117
Ordinal1140	endp

; Exported entry 1141.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1141
Ordinal1141	proc near		; DATA XREF: .rdata:6B1B473Co
					; .rdata:off_6B1BF428o
		add	ecx, 28h
		jmp	Ordinal1119
Ordinal1141	endp

; Exported entry 1142.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1142
Ordinal1142	proc near		; DATA XREF: .rdata:6B1B4740o
					; .rdata:off_6B1BF428o
		add	ecx, 28h
		jmp	Ordinal1132
Ordinal1142	endp

; Exported entry 1143.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1143(LONG lDistanceToMove, int)
		public Ordinal1143
Ordinal1143	proc near		; DATA XREF: .rdata:6B1B4744o
					; .rdata:off_6B1BF428o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
lDistanceToMove	= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		and	[ebp+var_8], 0
		and	[ebp+var_4], 0
		push	esi
		lea	esi, [ecx+28h]
		lea	eax, [ebp+var_8]
		push	eax
		mov	ecx, esi
		call	Ordinal1128
		test	eax, eax
		jnz	short loc_6B19876C
		push	offset aCfilearchiveSe ; "CFileArchive::SetPosEx() : m_File.GetLe"...
		jmp	short loc_6B198783
; ---------------------------------------------------------------------------

loc_6B19876C:				; CODE XREF: Ordinal1143+1Ej
		mov	eax, [ebp+arg_4]
		cmp	eax, [ebp+var_4]
		mov	ecx, [ebp+lDistanceToMove]
		jb	short loc_6B19878D
		ja	short loc_6B19877E
		cmp	ecx, [ebp+var_8]
		jb	short loc_6B19878D

loc_6B19877E:				; CODE XREF: Ordinal1143+32j
		push	offset aCfilearchive_0 ; "CFileArchive::SetPosEx() : uPos >= uFil"...

loc_6B198783:				; CODE XREF: Ordinal1143+25j
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B198796
; ---------------------------------------------------------------------------

loc_6B19878D:				; CODE XREF: Ordinal1143+30j
					; Ordinal1143+37j
		push	eax		; int
		push	ecx		; lDistanceToMove
		mov	ecx, esi
		call	Ordinal1133

loc_6B198796:				; CODE XREF: Ordinal1143+46j
		pop	esi
		leave
		retn	8
Ordinal1143	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B19879B(void *, char)
sub_6B19879B	proc near		; DATA XREF: .rdata:off_6B1B4734o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1138
		test	[esp+4+arg_0], 1
		jz	short loc_6B1987B1
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1987B1:				; CODE XREF: sub_6B19879B+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B19879B	endp

; Exported entry 1144.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1144
Ordinal1144	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, ecx
		and	dword ptr [eax+4], 0
		mov	dword ptr [eax], offset	off_6B1B47B0
		retn
Ordinal1144	endp

; Exported entry 1147.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1147
Ordinal1147	proc near		; CODE XREF: Ordinal1145+6j
					; Ordinal1146+3p ...
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6B1987D8
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+8]
		and	dword ptr [esi+4], 0

loc_6B1987D8:				; CODE XREF: Ordinal1147+8j
		pop	esi
		retn
Ordinal1147	endp

; Exported entry 1148.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1148
Ordinal1148	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		cmp	dword ptr [ecx+4], 0
		jnz	short loc_6B1987F2
		push	offset aCgitRevokeM_pg ; "CGIT::Revoke() : m_pGIT == NULL\n"
		call	sub_6B18102E
		pop	ecx
		mov	eax, 80004005h
		jmp	short locret_6B198816
; ---------------------------------------------------------------------------

loc_6B1987F2:				; CODE XREF: Ordinal1148+4j
		mov	eax, [ecx+4]
		mov	ecx, [eax]
		push	esi
		push	[esp+4+arg_0]
		push	eax
		call	dword ptr [ecx+10h]
		mov	esi, eax
		test	esi, esi
		jge	short loc_6B198813
		push	esi		; Args
		push	offset aCgitRevokeM__0 ; "CGIT::Revoke() : m_pGIT->RevokeInterfac"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx

loc_6B198813:				; CODE XREF: Ordinal1148+2Aj
		mov	eax, esi
		pop	esi

locret_6B198816:			; CODE XREF: Ordinal1148+16j
		retn	4
Ordinal1148	endp

; Exported entry 1145.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1145
Ordinal1145	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	dword ptr [ecx], offset	off_6B1B47B0
		jmp	Ordinal1147
Ordinal1145	endp

; Exported entry 1146.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1146
Ordinal1146	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	Ordinal1147
		add	esi, 4
		push	esi		; ppv
		push	offset riid	; riid
		push	1		; dwClsContext
		push	0		; pUnkOuter
		push	offset rclsid	; rclsid
		call	ds:CoCreateInstance
		mov	esi, eax
		test	esi, esi
		jge	short loc_6B198857
		push	esi		; Args
		push	offset aCgitCreateCocr ; "CGIT::Create() : CoCreateInstance(IID_I"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx

loc_6B198857:				; CODE XREF: Ordinal1146+24j
		mov	eax, esi
		pop	esi
		retn
Ordinal1146	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B19885B(void *, char)
sub_6B19885B	proc near		; DATA XREF: .rdata:off_6B1B47B0o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1B47B0
		call	Ordinal1147
		test	[esp+4+arg_0], 1
		jz	short loc_6B198877
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B198877:				; CODE XREF: sub_6B19885B+13j
		mov	eax, esi
		pop	esi
		retn	4
sub_6B19885B	endp

; Exported entry 1149.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1149
Ordinal1149	proc near		; CODE XREF: Ordinal839+Cp
					; Ordinal840+Cp ...
		mov	eax, ecx
		and	dword ptr [eax+4], 0
		mov	dword ptr [eax], offset	off_6B1B4878
		retn
Ordinal1149	endp

; Exported entry 1161.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1161
Ordinal1161	proc near		; CODE XREF: Ordinal1160+3p
					; Ordinal1361+92p
					; DATA XREF: ...
		mov	eax, [ecx+4]
		test	eax, eax
		jz	short loc_6B19889A
		cmp	eax, 0FFFFFFFFh
		jz	short loc_6B19889A
		xor	eax, eax
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_6B19889A:				; CODE XREF: Ordinal1161+5j
					; Ordinal1161+Aj
		xor	eax, eax
		retn
Ordinal1161	endp

; Exported entry 1160.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1160
Ordinal1160	proc near		; CODE XREF: Ordinal850+10p
					; Ordinal1152+6j ...
		push	esi
		mov	esi, ecx
		call	Ordinal1161
		test	eax, eax
		jz	short loc_6B1988B6
		push	dword ptr [esi+4] ; hObject
		call	ds:CloseHandle
		and	dword ptr [esi+4], 0

loc_6B1988B6:				; CODE XREF: Ordinal1160+Aj
		pop	esi
		retn
Ordinal1160	endp

; Exported entry 1152.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1152
Ordinal1152	proc near		; CODE XREF: Ordinal841+22j
					; Ordinal1360+13p ...
		mov	dword ptr [ecx], offset	off_6B1B4878
		jmp	Ordinal1160
Ordinal1152	endp

; Exported entry 1156.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1156
Ordinal1156	proc near		; CODE XREF: Ordinal1154+7p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1160
		mov	eax, [esp+4+arg_0]
		mov	[esi+4], eax
		xor	eax, eax
		inc	eax
		pop	esi
		retn	4
Ordinal1156	endp

; Exported entry 1157.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1157
Ordinal1157	proc near		; CODE XREF: Ordinal853+7p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, [ecx+4]
		and	dword ptr [ecx+4], 0
		call	Ordinal1160
		mov	eax, esi
		pop	esi
		retn
Ordinal1157	endp

; Exported entry 1158.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1158(HANDLE hSourceHandle)
		public Ordinal1158
Ordinal1158	proc near		; CODE XREF: Ordinal1159+7p
					; .text:6B19CE5Cp
					; DATA XREF: ...

hSourceHandle	= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1160
		push	2		; dwOptions
		push	1		; bInheritHandle
		push	0		; dwDesiredAccess
		add	esi, 4
		push	esi		; lpTargetHandle
		mov	esi, ds:GetCurrentProcess
		call	esi ; GetCurrentProcess
		push	eax		; hTargetProcessHandle
		push	[esp+18h+hSourceHandle]	; hSourceHandle
		call	esi ; GetCurrentProcess
		push	eax		; hSourceProcessHandle
		call	ds:DuplicateHandle
		test	eax, eax
		pop	esi
		jnz	short loc_6B19892E
		call	ds:GetLastError
		push	eax		; Args
		push	offset aChandleCopyDup ; "CHandle::Copy() : DuplicateHandle() == "...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short locret_6B198931
; ---------------------------------------------------------------------------

loc_6B19892E:				; CODE XREF: Ordinal1158+2Bj
		xor	eax, eax
		inc	eax

locret_6B198931:			; CODE XREF: Ordinal1158+42j
		retn	4
Ordinal1158	endp

; Exported entry 1159.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1159
Ordinal1159	proc near		; CODE XREF: Ordinal1153+Dp
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+4] ; hSourceHandle
		call	Ordinal1158
		retn	4
Ordinal1159	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B198943(void *, char)
sub_6B198943	proc near		; DATA XREF: .rdata:off_6B1B4878o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1B4878
		call	Ordinal1160
		test	[esp+4+arg_0], 1
		jz	short loc_6B19895F
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B19895F:				; CODE XREF: sub_6B198943+13j
		mov	eax, esi
		pop	esi
		retn	4
sub_6B198943	endp

; Exported entry 1153.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1153
Ordinal1153	proc near		; CODE XREF: Ordinal1150+11p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		cmp	[esp+4+arg_0], esi
		jz	short loc_6B198986
		push	[esp+4+arg_0]
		call	Ordinal1159
		test	eax, eax
		jnz	short loc_6B198986
		push	offset aChandleOperato ; "CHandle::operator =()	: Copy() == FALSE"...
		call	sub_6B18102E
		pop	ecx

loc_6B198986:				; CODE XREF: Ordinal1153+7j
					; Ordinal1153+14j
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1153	endp

; Exported entry 1154.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1154
Ordinal1154	proc near		; CODE XREF: Ordinal851+Fp
					; Ordinal852+15p ...

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		call	Ordinal1156
		test	eax, eax
		jnz	short loc_6B1989A7
		push	offset aChandleOpera_0 ; "CHandle::operator =()	: Attach() == FAL"...
		call	sub_6B18102E
		pop	ecx

loc_6B1989A7:				; CODE XREF: Ordinal1154+Ej
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1154	endp

; Exported entry 1150.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1150
Ordinal1150	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		and	dword ptr [esi+4], 0
		mov	dword ptr [esi], offset	off_6B1B4878
		call	Ordinal1153
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1150	endp

; Exported entry 1151.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1151
Ordinal1151	proc near		; CODE XREF: Ordinal1680+23p
					; Ordinal1698+5Fp ...

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		and	dword ptr [esi+4], 0
		mov	dword ptr [esi], offset	off_6B1B4878
		call	Ordinal1154
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1151	endp

; Exported entry 1165.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1165
Ordinal1165	proc near		; DATA XREF: .rdata:6B1B4B30o
					; .rdata:6B1B6114o ...
		push	esi
		mov	esi, ecx
		mov	eax, [esi+38h]
		xor	ecx, ecx
		cmp	eax, ecx
		jz	short loc_6B1989FE
		push	ecx		; lParam
		push	ecx		; wParam
		push	10h		; Msg
		push	eax		; hWnd
		call	ds:PostMessageA
		jmp	short loc_6B198A10
; ---------------------------------------------------------------------------

loc_6B1989FE:				; CODE XREF: Ordinal1165+Aj
		mov	eax, [esi+1Ch]
		cmp	eax, ecx
		jz	short loc_6B198A10
		push	ecx		; lParam
		push	ecx		; wParam
		push	12h		; Msg
		push	eax		; idThread
		call	ds:PostThreadMessageA

loc_6B198A10:				; CODE XREF: Ordinal1165+17j
					; Ordinal1165+1Ej
		mov	ecx, esi
		pop	esi
		jmp	Ordinal1742
Ordinal1165	endp

; Exported entry 1167.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1167
Ordinal1167	proc near		; DATA XREF: .rdata:6B1B4B3Co
					; .rdata:6B1B6120o ...
		push	esi
		push	offset aChiddenwindowE ; "CHiddenWindow::ExitInstance()\n"
		mov	esi, ecx
		call	sub_6B181006
		mov	eax, [esi+38h]
		test	eax, eax
		pop	ecx
		jz	short loc_6B198A38
		push	eax		; hWnd
		call	ds:DestroyWindow
		and	dword ptr [esi+38h], 0

loc_6B198A38:				; CODE XREF: Ordinal1167+13j
		cmp	word ptr [esi+3Ch], 0
		jz	short loc_6B198A58
		push	0		; lpModuleName
		call	ds:GetModuleHandleA
		push	eax		; hInstance
		movzx	eax, word ptr [esi+3Ch]
		push	eax		; lpClassName
		call	ds:UnregisterClassA
		and	word ptr [esi+3Ch], 0

loc_6B198A58:				; CODE XREF: Ordinal1167+25j
		pop	esi
		retn
Ordinal1167	endp

; Exported entry 1168.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1168
Ordinal1168	proc near		; DATA XREF: .rdata:6B1B4B34o
					; .rdata:6B1B6118o ...

Msg		= MSG ptr -1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		push	esi
		push	edi
		push	offset aChiddenwindowR ; "CHiddenWindow::Run()\n"
		call	sub_6B181006
		mov	esi, ds:GetMessageA
		pop	ecx
		xor	edi, edi
		jmp	short loc_6B198A8B
; ---------------------------------------------------------------------------

loc_6B198A77:				; CODE XREF: Ordinal1168+3Dj
		lea	eax, [ebp+Msg]
		push	eax		; lpMsg
		call	ds:TranslateMessage
		lea	eax, [ebp+Msg]
		push	eax		; lpMsg
		call	ds:DispatchMessageA

loc_6B198A8B:				; CODE XREF: Ordinal1168+1Bj
		push	edi		; wMsgFilterMax
		push	edi		; wMsgFilterMin
		lea	eax, [ebp+Msg]
		push	edi		; hWnd
		push	eax		; lpMsg
		call	esi ; GetMessageA
		cmp	eax, 1
		jz	short loc_6B198A77
		mov	eax, [ebp+Msg.wParam]
		pop	edi
		pop	esi
		leave
		retn
Ordinal1168	endp

; Exported entry 1169.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1169(int, int, char Args, int)
		public Ordinal1169
Ordinal1169	proc near		; DATA XREF: .rdata:6B1B4B4Co
					; .rdata:6B1B6130o ...

arg_4		= dword	ptr  0Ch
Args		= byte ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_4]
		dec	eax
		dec	eax
		push	esi
		mov	esi, ecx
		jz	short loc_6B198B0A
		sub	eax, 0Fh
		jz	short loc_6B198AF6
		sub	eax, 5
		jz	short loc_6B198ABF
		pop	esi
		pop	ebp
		jmp	ds:DefWindowProcA
; ---------------------------------------------------------------------------

loc_6B198ABF:				; CODE XREF: Ordinal1169+15j
		push	edi
		mov	edi, [ebp+arg_C]
		push	edi
		push	dword ptr [ebp+Args] ; Args
		push	offset aChiddenwindowW ; "CHiddenWindow::WindowProc() :	WM_ENDSES"...
		call	sub_6B181006
		mov	edx, [esi]
		mov	eax, 80000000h
		and	edi, eax
		xor	ecx, ecx
		add	esp, 0Ch
		cmp	edi, eax
		setnz	cl
		xor	eax, eax
		cmp	dword ptr [ebp+Args], eax
		setnz	al
		push	ecx
		mov	ecx, esi
		push	eax
		call	dword ptr [edx+20h]
		pop	edi
		jmp	short loc_6B198B34
; ---------------------------------------------------------------------------

loc_6B198AF6:				; CODE XREF: Ordinal1169+10j
		push	offset aChiddenwindo_0 ; "CHiddenWindow::WindowProc() :	WM_QUERYE"...
		call	sub_6B181006
		mov	eax, [esi]
		pop	ecx
		mov	ecx, esi
		call	dword ptr [eax+1Ch]
		jmp	short loc_6B198B36
; ---------------------------------------------------------------------------

loc_6B198B0A:				; CODE XREF: Ordinal1169+Bj
		push	offset aChiddenwindo_1 ; "CHiddenWindow::WindowProc() :	WM_DESTRO"...
		call	sub_6B181006
		pop	ecx
		push	0		; dwNewLong
		push	0FFFFFFEBh	; nIndex
		push	dword ptr [esi+38h] ; hWnd
		call	ds:SetWindowLongA
		mov	eax, [esi]
		and	dword ptr [esi+38h], 0
		mov	ecx, esi
		call	dword ptr [eax+18h]
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+8]

loc_6B198B34:				; CODE XREF: Ordinal1169+54j
		xor	eax, eax

loc_6B198B36:				; CODE XREF: Ordinal1169+68j
		pop	esi
		pop	ebp
		retn	10h
Ordinal1169	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_6B198B3B(HWND	hWnd)
sub_6B198B3B	proc near		; DATA XREF: Ordinal1166+99o

hWnd		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	0FFFFFFEBh	; nIndex
		push	[ebp+hWnd]	; hWnd
		call	ds:GetWindowLongA
		test	eax, eax
		jnz	short loc_6B198B54
		pop	ebp
		jmp	ds:DefWindowProcA
; ---------------------------------------------------------------------------

loc_6B198B54:				; CODE XREF: sub_6B198B3B+10j
		mov	edx, [eax]
		mov	ecx, eax
		pop	ebp
		jmp	dword ptr [edx+24h]
sub_6B198B3B	endp

; Exported entry 1166.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __fastcall Ordinal1166(LONG dwNewLong)
		public Ordinal1166
Ordinal1166	proc near		; DATA XREF: .rdata:6B1B4B38o
					; .rdata:6B1B611Co ...

Dst		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
lpClassName	= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= byte ptr -14h
var_C		= dword	ptr -0Ch
lpWindowName	= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 44h
		push	ebx
		push	esi
		push	edi
		push	offset aChiddenwindowI ; "CHiddenWindow::InitInstance()\n"
		mov	edi, ecx
		call	sub_6B181006
		pop	ecx
		lea	ecx, [ebp+var_14]
		call	Ordinal1171
		lea	ecx, [ebp+var_14]
		call	Ordinal1177
		xor	esi, esi
		test	al, al
		jz	short loc_6B198BA9
		cmp	[ebp+var_C], esi
		jz	short loc_6B198BA9
		push	esi
		call	[ebp+var_C]
		test	eax, eax
		jnz	short loc_6B198BB4
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCserviceappRun ; "CServiceApp::Run() : ImmDisableIME() =="...
		call	sub_6B18101A
		pop	ecx
		jmp	short loc_6B198BB3
; ---------------------------------------------------------------------------

loc_6B198BA9:				; CODE XREF: Ordinal1166+2Aj
					; Ordinal1166+2Fj
		push	offset aCserviceappR_0 ; "CServiceApp::Run() : imm.Create() == FA"...
		call	sub_6B18101A

loc_6B198BB3:				; CODE XREF: Ordinal1166+4Bj
		pop	ecx

loc_6B198BB4:				; CODE XREF: Ordinal1166+37j
		lea	ecx, [ebp+var_14]
		call	Ordinal1172
		push	30h		; Size
		lea	eax, [ebp+Dst]
		push	esi		; Val
		push	eax		; Dst
		mov	[ebp+var_4], esi
		call	memset
		mov	eax, [edi+40h]
		mov	ebx, ds:GetModuleHandleA
		add	esp, 0Ch
		lea	ecx, [ebp+Dst]
		push	ecx		; lpwcx
		push	eax		; lpszClass
		push	esi		; lpModuleName
		call	ebx ; GetModuleHandleA
		push	eax		; hInstance
		call	ds:GetClassInfoExA
		test	eax, eax
		jnz	short loc_6B198C4C
		push	esi		; lpModuleName
		mov	[ebp+Dst], 30h
		mov	[ebp+var_40], esi
		mov	[ebp+var_3C], offset sub_6B198B3B
		mov	[ebp+var_38], esi
		mov	[ebp+var_34], esi
		call	ebx ; GetModuleHandleA
		mov	[ebp+var_30], eax
		mov	eax, [edi+40h]
		mov	[ebp+lpClassName], eax
		lea	eax, [ebp+Dst]
		push	eax		; WNDCLASSEXA *
		mov	[ebp+var_2C], esi
		mov	[ebp+var_28], esi
		mov	[ebp+var_24], esi
		mov	[ebp+var_20], esi
		mov	[ebp+var_18], esi
		call	ds:RegisterClassExA
		cmp	ax, si
		mov	[edi+3Ch], ax
		jnz	short loc_6B198C4C
		mov	eax, [edi+40h]
		lea	ecx, [ebp+Dst]
		push	ecx		; lpwcx
		push	eax		; lpszClass
		push	esi		; lpModuleName
		call	ebx ; GetModuleHandleA
		push	eax		; hInstance
		call	ds:GetClassInfoExA
		test	eax, eax
		jnz	short loc_6B198C4C
		push	offset aChiddenwindo_2 ; "CHiddenWindow::InitInstance()	: Registe"...
		jmp	short loc_6B198C9F
; ---------------------------------------------------------------------------

loc_6B198C4C:				; CODE XREF: Ordinal1166+8Cj
					; Ordinal1166+D1j ...
		mov	eax, [edi+44h]
		push	esi		; lpParam
		push	esi		; lpModuleName
		mov	[ebp+lpWindowName], eax
		call	ebx ; GetModuleHandleA
		push	eax		; hInstance
		push	esi		; hMenu
		push	esi		; hWndParent
		push	esi		; nHeight
		push	esi		; nWidth
		push	esi		; Y
		push	esi		; X
		push	esi		; dwStyle
		push	[ebp+lpWindowName] ; lpWindowName
		push	[ebp+lpClassName] ; lpClassName
		push	esi		; dwExStyle
		call	ds:CreateWindowExA
		cmp	eax, esi
		mov	[edi+38h], eax
		jnz	short loc_6B198C79
		push	offset aChiddenwindo_3 ; "CHiddenWindow::InitInstance()	: CreateW"...
		jmp	short loc_6B198C9F
; ---------------------------------------------------------------------------

loc_6B198C79:				; CODE XREF: Ordinal1166+114j
		push	esi		; dwErrCode
		call	ds:SetLastError
		push	edi		; dwNewLong
		push	0FFFFFFEBh	; nIndex
		push	dword ptr [edi+38h] ; hWnd
		call	ds:SetWindowLongA
		test	eax, eax
		jnz	short loc_6B198CA7
		call	ds:GetLastError
		test	eax, eax
		jz	short loc_6B198CA7
		push	offset aChiddenwindo_4 ; "CHiddenWindow::InitInstance()	: SetWind"...

loc_6B198C9F:				; CODE XREF: Ordinal1166+EEj
					; Ordinal1166+11Bj
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B198CAE
; ---------------------------------------------------------------------------

loc_6B198CA7:				; CODE XREF: Ordinal1166+132j
					; Ordinal1166+13Cj
		mov	[ebp+var_4], 1

loc_6B198CAE:				; CODE XREF: Ordinal1166+149j
		mov	eax, [ebp+var_4]
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal1166	endp

; Exported entry 1170.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1170
Ordinal1170	proc near		; CODE XREF: Ordinal1163+9p
					; Ordinal1164+2Cp
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		push	0FFFFFFFFh
		call	dword ptr [eax+4]
		lea	ecx, [esi+40h]
		call	sub_6B18175E
		lea	ecx, [esi+44h]
		pop	esi
		jmp	sub_6B18175E
Ordinal1170	endp

; Exported entry 1162.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1162
Ordinal1162	proc near		; CODE XREF: Ordinal1385+3p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	Ordinal1734
		and	dword ptr [esi+38h], 0
		and	word ptr [esi+3Ch], 0
		lea	ecx, [esi+40h]
		mov	dword ptr [esi], offset	off_6B1B4B28
		call	sub_6B181879
		lea	ecx, [esi+44h]
		call	sub_6B181879
		mov	dword ptr [esi+34h], 1
		mov	eax, esi
		pop	esi
		retn
Ordinal1162	endp

; Exported entry 1163.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1163
Ordinal1163	proc near		; CODE XREF: sub_6B198DB1+3p
					; Ordinal1386+6j
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1B4B28
		call	Ordinal1170
		lea	ecx, [esi+44h]
		call	sub_6B1899B5
		lea	ecx, [esi+40h]
		call	sub_6B1899B5
		mov	ecx, esi
		pop	esi
		jmp	Ordinal1735
Ordinal1163	endp

; Exported entry 1164.

; =============== S U B	R O U T	I N E =======================================


; int __thiscall Ordinal1164(LPVOID lpParameter, LPCSTR	Src, int)
		public Ordinal1164
Ordinal1164	proc near		; CODE XREF: Ordinal1387+135p
					; DATA XREF: .rdata:off_6B1BF428o

Src		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	ebp
		mov	ebp, [esp+8+Src]
		test	ebp, ebp
		push	esi
		push	edi
		mov	esi, ecx
		jz	short loc_6B198D9D
		mov	edi, ds:lstrlenA
		push	ebp		; lpString
		call	edi ; lstrlenA
		test	eax, eax
		jz	short loc_6B198D9D
		mov	ebx, [esp+10h+arg_4]
		test	ebx, ebx
		jz	short loc_6B198D9D
		push	ebx		; lpString
		call	edi ; lstrlenA
		test	eax, eax
		jz	short loc_6B198D9D
		mov	ecx, esi
		call	Ordinal1170
		lea	eax, [esi+40h]
		push	eax		; int
		push	ebp		; Src
		call	Ordinal1519
		test	al, al
		pop	ecx
		pop	ecx
		jz	short loc_6B198D96
		lea	eax, [esi+44h]
		push	eax		; int
		push	ebx		; Src
		call	Ordinal1519
		test	al, al
		pop	ecx
		pop	ecx
		jz	short loc_6B198D96
		xor	eax, eax
		push	eax		; int
		push	eax		; dwStackSize
		push	eax		; lpThreadAttributes
		mov	ecx, esi	; lpParameter
		call	Ordinal1736
		test	eax, eax
		jnz	short loc_6B198D91
		push	offset aChiddenwindowC ; "CHiddenWindow::Create() : CThread::Crea"...
		jmp	short loc_6B198DA2
; ---------------------------------------------------------------------------

loc_6B198D91:				; CODE XREF: Ordinal1164+5Fj
		xor	eax, eax
		inc	eax
		jmp	short loc_6B198DAA
; ---------------------------------------------------------------------------

loc_6B198D96:				; CODE XREF: Ordinal1164+3Fj
					; Ordinal1164+4Fj
		push	offset aChiddenwindo_5 ; "CHiddenWindow::Create() : CStringConver"...
		jmp	short loc_6B198DA2
; ---------------------------------------------------------------------------

loc_6B198D9D:				; CODE XREF: Ordinal1164+Cj
					; Ordinal1164+19j ...
		push	offset aChiddenwindo_6 ; "CHiddenWindow::Create() : szClassName	="...

loc_6B198DA2:				; CODE XREF: Ordinal1164+66j
					; Ordinal1164+72j
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax

loc_6B198DAA:				; CODE XREF: Ordinal1164+6Bj
		pop	edi
		pop	esi
		pop	ebp
		pop	ebx
		retn	8
Ordinal1164	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B198DB1(void *, char)
sub_6B198DB1	proc near		; DATA XREF: .rdata:off_6B1B4B28o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1163
		test	[esp+4+arg_0], 1
		jz	short loc_6B198DC7
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B198DC7:				; CODE XREF: sub_6B198DB1+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B198DB1	endp

; Exported entry 1172.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1172
Ordinal1172	proc near		; CODE XREF: Ordinal1166+5Bp
					; sub_6B198E2D+3p ...
		mov	dword ptr [ecx], offset	off_6B1B4BF4
		jmp	Ordinal1221
Ordinal1172	endp

; Exported entry 1176.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1176
Ordinal1176	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= byte ptr  4

		cmp	[esp+arg_0], 0
		push	esi
		mov	esi, ecx
		jz	short loc_6B198DEB
		call	Ordinal1230
		test	al, al
		jz	short loc_6B198E13

loc_6B198DEB:				; CODE XREF: Ordinal1176+8j
		cmp	[esp+4+arg_0], 0
		push	ebx
		mov	bl, 1
		jnz	short loc_6B198DFB
		and	dword ptr [esi+8], 0
		jmp	short loc_6B198E10
; ---------------------------------------------------------------------------

loc_6B198DFB:				; CODE XREF: Ordinal1176+1Bj
		push	offset aImmdisableime ;	"ImmDisableIME"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6B198E10
		xor	bl, bl

loc_6B198E10:				; CODE XREF: Ordinal1176+21j
					; Ordinal1176+34j
		mov	al, bl
		pop	ebx

loc_6B198E13:				; CODE XREF: Ordinal1176+11j
		pop	esi
		retn	4
Ordinal1176	endp

; Exported entry 1171.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1171
Ordinal1171	proc near		; CODE XREF: Ordinal1166+19p
					; Ordinal1391+A8p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		call	Ordinal1219
		and	dword ptr [esi+8], 0
		mov	dword ptr [esi], offset	off_6B1B4BF4
		mov	eax, esi
		pop	esi
		retn
Ordinal1171	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B198E2D(void *, char)
sub_6B198E2D	proc near		; DATA XREF: .rdata:off_6B1B4BF4o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1172
		test	[esp+4+arg_0], 1
		jz	short loc_6B198E43
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B198E43:				; CODE XREF: sub_6B198E2D+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B198E2D	endp

; Exported entry 1173.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1173(LPCSTR Args)
		public Ordinal1173
Ordinal1173	proc near		; CODE XREF: Ordinal1177+13p
					; DATA XREF: .rdata:off_6B1BF428o

Args		= dword	ptr  4

		push	esi
		push	[esp+4+Args]	; Args
		mov	esi, ecx
		call	Ordinal1226
		test	al, al
		jz	short loc_6B198E64
		mov	ecx, esi
		call	Ordinal1230
		test	al, al
		jnz	short loc_6B198E68

loc_6B198E64:				; CODE XREF: Ordinal1173+Ej
		xor	al, al
		jmp	short loc_6B198E83
; ---------------------------------------------------------------------------

loc_6B198E68:				; CODE XREF: Ordinal1173+19j
		push	ebx
		push	offset aImmdisableime ;	"ImmDisableIME"
		mov	ecx, esi
		mov	bl, 1
		call	Ordinal1229
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6B198E80
		xor	bl, bl

loc_6B198E80:				; CODE XREF: Ordinal1173+33j
		mov	al, bl
		pop	ebx

loc_6B198E83:				; CODE XREF: Ordinal1173+1Dj
		pop	esi
		retn	4
Ordinal1173	endp

; Exported entry 1174.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1174(LPCSTR Args, DWORD dwFlags)
		public Ordinal1174
Ordinal1174	proc near		; DATA XREF: .rdata:off_6B1BF428o

Args		= dword	ptr  4
dwFlags		= dword	ptr  8

		push	esi
		push	[esp+4+dwFlags]	; dwFlags
		mov	esi, ecx
		push	[esp+8+Args]	; Args
		call	Ordinal1227
		test	al, al
		jz	short loc_6B198EA6
		mov	ecx, esi
		call	Ordinal1230
		test	al, al
		jnz	short loc_6B198EAA

loc_6B198EA6:				; CODE XREF: Ordinal1174+12j
		xor	al, al
		jmp	short loc_6B198EC5
; ---------------------------------------------------------------------------

loc_6B198EAA:				; CODE XREF: Ordinal1174+1Dj
		push	ebx
		push	offset aImmdisableime ;	"ImmDisableIME"
		mov	ecx, esi
		mov	bl, 1
		call	Ordinal1229
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6B198EC2
		xor	bl, bl

loc_6B198EC2:				; CODE XREF: Ordinal1174+37j
		mov	al, bl
		pop	ebx

loc_6B198EC5:				; CODE XREF: Ordinal1174+21j
		pop	esi
		retn	8
Ordinal1174	endp

; Exported entry 976.
; Exported entry 979.
; Exported entry 1175.
; Exported entry 1178.
; Exported entry 1255.
; Exported entry 1258.
; Exported entry 1679.
; Exported entry 1684.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1679
Ordinal1679	proc near		; CODE XREF: Ordinal906+3Bp
					; DATA XREF: .rdata:off_6B1BF428o
		and	dword ptr [ecx+8], 0 ; ccL35_976
					; ccL35_979
					; ccL35_1175
					; ccL35_1178
					; ccL35_1255
					; ccL35_1258
					; ccL35_1679
		jmp	Ordinal1228
Ordinal1679	endp

; Exported entry 1177.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1177
Ordinal1177	proc near		; CODE XREF: Ordinal1166+21p
					; Ordinal1393+31p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+8], 0
		call	Ordinal1228
		push	offset aImm32_dll ; "IMM32.DLL"
		mov	ecx, esi
		call	Ordinal1173
		pop	esi
		retn
Ordinal1177	endp

; Exported entry 1180.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1180
Ordinal1180	proc near		; CODE XREF: Ordinal813+1Bp
					; sub_6B19900D+3p ...
		mov	dword ptr [ecx], offset	off_6B1B4C14
		jmp	Ordinal1221
Ordinal1180	endp

; Exported entry 1184.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1184
Ordinal1184	proc near		; CODE XREF: Ordinal1179+12p
					; Ordinal1183+5p
					; DATA XREF: ...

var_1		= byte ptr -1
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		xor	ebx, ebx
		cmp	[ebp+arg_0], bl
		push	esi
		mov	esi, ecx
		jz	short loc_6B198F13
		call	Ordinal1230
		test	al, al
		jz	loc_6B198FEC

loc_6B198F13:				; CODE XREF: Ordinal1184+Dj
		cmp	[ebp+arg_0], bl
		mov	[ebp+var_1], 1
		jnz	short loc_6B198F39
		mov	[esi+8], ebx
		mov	[esi+0Ch], ebx
		mov	[esi+10h], ebx
		mov	[esi+14h], ebx
		mov	[esi+18h], ebx
		mov	[esi+1Ch], ebx
		mov	[esi+20h], ebx
		mov	[esi+24h], ebx
		jmp	loc_6B198FE9
; ---------------------------------------------------------------------------

loc_6B198F39:				; CODE XREF: Ordinal1184+23j
		push	offset aSetprocesswork ; "SetProcessWorkingSetSize"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+8], eax
		jnz	short loc_6B198F4F
		mov	[ebp+var_1], bl

loc_6B198F4F:				; CODE XREF: Ordinal1184+53j
		push	offset aRegisterserv_1 ; "RegisterServiceProcess"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+0Ch], eax
		jnz	short loc_6B198F65
		mov	[ebp+var_1], bl

loc_6B198F65:				; CODE XREF: Ordinal1184+69j
		push	offset aAttachconsole ;	"AttachConsole"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+10h], eax
		jnz	short loc_6B198F7B
		mov	[ebp+var_1], bl

loc_6B198F7B:				; CODE XREF: Ordinal1184+7Fj
		push	offset aVersetconditio ; "VerSetConditionMask"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+14h], eax
		jnz	short loc_6B198F91
		mov	[ebp+var_1], bl

loc_6B198F91:				; CODE XREF: Ordinal1184+95j
		push	offset aVerifyversioni ; "VerifyVersionInfoA"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+18h], eax
		jnz	short loc_6B198FA7
		mov	[ebp+var_1], bl

loc_6B198FA7:				; CODE XREF: Ordinal1184+ABj
		push	offset aVerifyversio_0 ; "VerifyVersionInfoW"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+1Ch], eax
		jnz	short loc_6B198FBD
		mov	[ebp+var_1], bl

loc_6B198FBD:				; CODE XREF: Ordinal1184+C1j
		push	offset aIswow64process ; "IsWow64Process"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+20h], eax
		jnz	short loc_6B198FD3
		mov	[ebp+var_1], bl

loc_6B198FD3:				; CODE XREF: Ordinal1184+D7j
		push	offset aWow64enablewow ; "Wow64EnableWow64FsRedirection"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+24h], eax
		jnz	short loc_6B198FE9
		mov	[ebp+var_1], bl

loc_6B198FE9:				; CODE XREF: Ordinal1184+3Dj
					; Ordinal1184+EDj
		mov	al, [ebp+var_1]

loc_6B198FEC:				; CODE XREF: Ordinal1184+16j
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal1184	endp

; Exported entry 1179.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1179
Ordinal1179	proc near		; CODE XREF: Ordinal812+32p
					; Ordinal1283+58p ...
		push	esi
		mov	esi, ecx
		call	Ordinal1219
		push	0
		mov	ecx, esi
		mov	dword ptr [esi], offset	off_6B1B4C14
		call	Ordinal1184
		mov	eax, esi
		pop	esi
		retn
Ordinal1179	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B19900D(void *, char)
sub_6B19900D	proc near		; DATA XREF: .rdata:off_6B1B4C14o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1180
		test	[esp+4+arg_0], 1
		jz	short loc_6B199023
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B199023:				; CODE XREF: sub_6B19900D+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B19900D	endp

; Exported entry 1181.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1181(LPCSTR Args)
		public Ordinal1181
Ordinal1181	proc near		; CODE XREF: Ordinal1185+10p
					; DATA XREF: .rdata:off_6B1BF428o

Args		= dword	ptr  4

		push	esi
		push	[esp+4+Args]	; Args
		mov	esi, ecx
		call	Ordinal1226
		test	al, al
		jz	short loc_6B199044
		mov	ecx, esi
		call	Ordinal1230
		test	al, al
		jnz	short loc_6B19904B

loc_6B199044:				; CODE XREF: Ordinal1181+Ej
		xor	al, al
		jmp	loc_6B1990F9
; ---------------------------------------------------------------------------

loc_6B19904B:				; CODE XREF: Ordinal1181+19j
		push	ebx
		push	offset aSetprocesswork ; "SetProcessWorkingSetSize"
		mov	ecx, esi
		mov	bl, 1
		call	Ordinal1229
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6B199063
		xor	bl, bl

loc_6B199063:				; CODE XREF: Ordinal1181+36j
		push	offset aRegisterserv_1 ; "RegisterServiceProcess"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+0Ch], eax
		jnz	short loc_6B199078
		xor	bl, bl

loc_6B199078:				; CODE XREF: Ordinal1181+4Bj
		push	offset aAttachconsole ;	"AttachConsole"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+10h], eax
		jnz	short loc_6B19908D
		xor	bl, bl

loc_6B19908D:				; CODE XREF: Ordinal1181+60j
		push	offset aVersetconditio ; "VerSetConditionMask"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+14h], eax
		jnz	short loc_6B1990A2
		xor	bl, bl

loc_6B1990A2:				; CODE XREF: Ordinal1181+75j
		push	offset aVerifyversioni ; "VerifyVersionInfoA"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+18h], eax
		jnz	short loc_6B1990B7
		xor	bl, bl

loc_6B1990B7:				; CODE XREF: Ordinal1181+8Aj
		push	offset aVerifyversio_0 ; "VerifyVersionInfoW"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+1Ch], eax
		jnz	short loc_6B1990CC
		xor	bl, bl

loc_6B1990CC:				; CODE XREF: Ordinal1181+9Fj
		push	offset aIswow64process ; "IsWow64Process"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+20h], eax
		jnz	short loc_6B1990E1
		xor	bl, bl

loc_6B1990E1:				; CODE XREF: Ordinal1181+B4j
		push	offset aWow64enablewow ; "Wow64EnableWow64FsRedirection"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+24h], eax
		jnz	short loc_6B1990F6
		xor	bl, bl

loc_6B1990F6:				; CODE XREF: Ordinal1181+C9j
		mov	al, bl
		pop	ebx

loc_6B1990F9:				; CODE XREF: Ordinal1181+1Dj
		pop	esi
		retn	4
Ordinal1181	endp

; Exported entry 1182.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1182(LPCSTR Args, DWORD dwFlags)
		public Ordinal1182
Ordinal1182	proc near		; DATA XREF: .rdata:off_6B1BF428o

Args		= dword	ptr  4
dwFlags		= dword	ptr  8

		push	esi
		push	[esp+4+dwFlags]	; dwFlags
		mov	esi, ecx
		push	[esp+8+Args]	; Args
		call	Ordinal1227
		test	al, al
		jz	short loc_6B19911C
		mov	ecx, esi
		call	Ordinal1230
		test	al, al
		jnz	short loc_6B199123

loc_6B19911C:				; CODE XREF: Ordinal1182+12j
		xor	al, al
		jmp	loc_6B1991D1
; ---------------------------------------------------------------------------

loc_6B199123:				; CODE XREF: Ordinal1182+1Dj
		push	ebx
		push	offset aSetprocesswork ; "SetProcessWorkingSetSize"
		mov	ecx, esi
		mov	bl, 1
		call	Ordinal1229
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6B19913B
		xor	bl, bl

loc_6B19913B:				; CODE XREF: Ordinal1182+3Aj
		push	offset aRegisterserv_1 ; "RegisterServiceProcess"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+0Ch], eax
		jnz	short loc_6B199150
		xor	bl, bl

loc_6B199150:				; CODE XREF: Ordinal1182+4Fj
		push	offset aAttachconsole ;	"AttachConsole"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+10h], eax
		jnz	short loc_6B199165
		xor	bl, bl

loc_6B199165:				; CODE XREF: Ordinal1182+64j
		push	offset aVersetconditio ; "VerSetConditionMask"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+14h], eax
		jnz	short loc_6B19917A
		xor	bl, bl

loc_6B19917A:				; CODE XREF: Ordinal1182+79j
		push	offset aVerifyversioni ; "VerifyVersionInfoA"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+18h], eax
		jnz	short loc_6B19918F
		xor	bl, bl

loc_6B19918F:				; CODE XREF: Ordinal1182+8Ej
		push	offset aVerifyversio_0 ; "VerifyVersionInfoW"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+1Ch], eax
		jnz	short loc_6B1991A4
		xor	bl, bl

loc_6B1991A4:				; CODE XREF: Ordinal1182+A3j
		push	offset aIswow64process ; "IsWow64Process"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+20h], eax
		jnz	short loc_6B1991B9
		xor	bl, bl

loc_6B1991B9:				; CODE XREF: Ordinal1182+B8j
		push	offset aWow64enablewow ; "Wow64EnableWow64FsRedirection"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+24h], eax
		jnz	short loc_6B1991CE
		xor	bl, bl

loc_6B1991CE:				; CODE XREF: Ordinal1182+CDj
		mov	al, bl
		pop	ebx

loc_6B1991D1:				; CODE XREF: Ordinal1182+21j
		pop	esi
		retn	8
Ordinal1182	endp

; Exported entry 1183.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1183
Ordinal1183	proc near		; CODE XREF: Ordinal1186j
					; Ordinal1185+4p ...
		push	esi
		push	0
		mov	esi, ecx
		call	Ordinal1184
		mov	ecx, esi
		pop	esi
		jmp	Ordinal1228
Ordinal1183	endp

; Exported entry 1186.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1186
Ordinal1186	proc near		; DATA XREF: .rdata:off_6B1BF428o
		jmp	Ordinal1183
Ordinal1186	endp

; Exported entry 1185.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1185
Ordinal1185	proc near		; CODE XREF: Ordinal815+46p
					; Ordinal1283+60p ...
		push	esi
		push	edi
		mov	esi, ecx
		call	Ordinal1183
		push	offset aKernel32_dll_0 ; "KERNEL32.DLL"
		mov	ecx, esi
		call	Ordinal1181
		test	al, al
		jnz	short loc_6B19926A
		xor	edi, edi
		cmp	[esi+0Ch], edi
		jnz	short loc_6B199215
		call	Ordinal1261
		test	al, al
		jnz	short loc_6B199254

loc_6B199215:				; CODE XREF: Ordinal1185+1Ej
		cmp	[esi+8], edi
		jnz	short loc_6B199223
		call	Ordinal1269
		test	al, al
		jnz	short loc_6B199254

loc_6B199223:				; CODE XREF: Ordinal1185+2Cj
		cmp	[esi+14h], edi
		jz	short loc_6B199232
		cmp	[esi+18h], edi
		jz	short loc_6B199232
		cmp	[esi+1Ch], edi
		jnz	short loc_6B19923E

loc_6B199232:				; CODE XREF: Ordinal1185+3Aj
					; Ordinal1185+3Fj
		push	1
		call	Ordinal1272
		test	al, al
		pop	ecx
		jnz	short loc_6B199254

loc_6B19923E:				; CODE XREF: Ordinal1185+44j
		cmp	[esi+10h], edi
		jz	short loc_6B199248
		cmp	[esi+20h], edi
		jnz	short loc_6B19926A

loc_6B199248:				; CODE XREF: Ordinal1185+55j
		push	1
		call	Ordinal1273
		test	al, al
		pop	ecx
		jz	short loc_6B19926A

loc_6B199254:				; CODE XREF: Ordinal1185+27j
					; Ordinal1185+35j ...
		push	offset aCkernelCreateL ; "CKernel::Create() : Load() ==	FALSE\n"
		call	sub_6B18102E
		pop	ecx
		mov	ecx, esi
		call	Ordinal1183
		xor	al, al
		jmp	short loc_6B19926C
; ---------------------------------------------------------------------------

loc_6B19926A:				; CODE XREF: Ordinal1185+17j
					; Ordinal1185+5Aj ...
		mov	al, 1

loc_6B19926C:				; CODE XREF: Ordinal1185+7Cj
		pop	edi
		pop	esi
		retn
Ordinal1185	endp

; Exported entry 1187.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1187
Ordinal1187	proc near		; CODE XREF: Ordinal392+2Dp
					; Ordinal397+2Ep ...
		mov	eax, ecx
		xor	ecx, ecx
		mov	dword ptr [eax], offset	off_6B1B4D00
		mov	[eax+4], ecx
		mov	[eax+8], ecx
		mov	[eax+0Ch], ecx
		retn
Ordinal1187	endp

; Exported entry 1193.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1193
Ordinal1193	proc near		; CODE XREF: Ordinal1194+4p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	edx, [ecx+8]
		mov	eax, [esp+arg_0]
		cmp	edx, [eax+8]
		jnz	short loc_6B1992B0
		push	esi
		mov	esi, [ecx+4]
		cmp	esi, [eax+4]
		pop	esi
		jnz	short loc_6B1992B0
		push	edx		; Size
		push	dword ptr [eax+0Ch] ; Buf2
		push	dword ptr [ecx+0Ch] ; Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_6B1992B0
		mov	al, 1
		jmp	short locret_6B1992B2
; ---------------------------------------------------------------------------

loc_6B1992B0:				; CODE XREF: Ordinal1193+Aj
					; Ordinal1193+14j ...
		xor	al, al

locret_6B1992B2:			; CODE XREF: Ordinal1193+2Bj
		retn	4
Ordinal1193	endp

; Exported entry 1194.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1194
Ordinal1194	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		call	Ordinal1193
		neg	al
		sbb	eax, eax
		inc	eax
		retn	4
Ordinal1194	endp

; Exported entry 1200.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1200
Ordinal1200	proc near		; CODE XREF: Ordinal405+21p
					; Ordinal422+1Fp ...
		push	esi
		mov	esi, ecx
		mov	eax, [esi+0Ch]
		push	edi
		xor	edi, edi
		cmp	eax, edi
		jz	short loc_6B199307
		mov	ecx, [esi+4]
		dec	ecx
		dec	ecx
		jz	short loc_6B199300
		dec	ecx
		jz	short loc_6B1992EF
		dec	ecx
		jnz	short loc_6B199307
		push	8000h		; dwFreeType
		push	edi		; dwSize
		push	eax		; lpAddress
		call	ds:VirtualFree
		jmp	short loc_6B199307
; ---------------------------------------------------------------------------

loc_6B1992EF:				; CODE XREF: Ordinal1200+15j
		push	eax		; lpMem
		push	edi		; dwFlags
		call	ds:GetProcessHeap
		push	eax		; hHeap
		call	ds:HeapFree
		jmp	short loc_6B199307
; ---------------------------------------------------------------------------

loc_6B199300:				; CODE XREF: Ordinal1200+12j
		push	eax		; void *
		call	??_V@YAXPAX@Z	; operator delete[](void *)
		pop	ecx

loc_6B199307:				; CODE XREF: Ordinal1200+Bj
					; Ordinal1200+18j ...
		mov	[esi+4], edi
		mov	[esi+0Ch], edi
		mov	[esi+8], edi
		pop	edi
		pop	esi
		retn
Ordinal1200	endp

; Exported entry 1204.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1204
Ordinal1204	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, ecx
		call	Ordinal1200
		mov	eax, [esp+4+arg_0]
		mov	[esi+0Ch], eax
		mov	eax, [esp+4+arg_4]
		mov	[esi+8], eax
		xor	eax, eax
		inc	eax
		mov	[esi+4], eax
		pop	esi
		retn	8
Ordinal1204	endp

; Exported entry 1205.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1205
Ordinal1205	proc near		; DATA XREF: .rdata:off_6B1BF428o
		jmp	Ordinal1200
Ordinal1205	endp

; Exported entry 1206.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1206
Ordinal1206	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+0Ch]
		xor	edx, edx
		mov	[ecx+0Ch], edx
		mov	[ecx+8], edx
		mov	[ecx+4], edx
		retn
Ordinal1206	endp

; Exported entry 1189.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1189
Ordinal1189	proc near		; CODE XREF: Ordinal396+22p
					; Ordinal418+1Bp ...
		mov	dword ptr [ecx], offset	off_6B1B4D00
		jmp	Ordinal1200
Ordinal1189	endp

; Exported entry 1196.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1196
Ordinal1196	proc near		; CODE XREF: Ordinal403+24p
					; Ordinal424+30p ...

var_60		= dword	ptr -60h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_94 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 54h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_28], esi
		call	Ordinal1200
		push	offset aCmemoryNewallo ; "CMemory::NewAlloc()"
		lea	ecx, [ebp+var_4C]
		call	Ordinal1089
		mov	eax, [ebp+arg_0]
		and	[ebp+var_4], 0
		push	eax		; unsigned int
		mov	byte ptr [ebp+var_4], 1
		mov	dword ptr [esi+4], 2
		mov	[esi+8], eax
		call	j_??2@YAPAXI@Z	; operator new(uint)
		test	eax, eax
		pop	ecx
		mov	[esi+0Ch], eax
		jnz	loc_6B19946F
		lea	eax, [ebp+var_2C]
		push	eax
		lea	ecx, [ebp+var_60]
		mov	[ebp+var_2C], offset aBadAllocation ; "bad allocation"
		call	ds:??0exception@@QAE@ABQBD@Z ; exception::exception(char const * const &)
		push	offset dword_6B1BAC3C
		lea	eax, [ebp+var_60]
		push	eax
		mov	[ebp+var_60], offset off_6B1AABCC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B1993D4:				; DATA XREF: .rdata:6B1BC588o
		push	13h
		lea	ecx, [ebp+var_4C]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_4C]
		call	Ordinal1101
		mov	ecx, [ebp+var_54]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_4C]
		call	Ordinal1103
		lea	ecx, [ebp+var_4C]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B19946C
		retn
; ---------------------------------------------------------------------------

loc_6B199417:				; DATA XREF: .rdata:6B1BC598o
		push	15h
		lea	ecx, [ebp+var_4C]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_4C]
		call	Ordinal1101
		mov	eax, [ebp+var_50]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_4C]
		call	Ordinal1103
		lea	ecx, [ebp+var_4C]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B19946C
		retn
; ---------------------------------------------------------------------------

loc_6B19946C:				; DATA XREF: Ordinal1196+BFo
					; Ordinal1196+114o
		mov	esi, [ebp+var_28]

loc_6B19946F:				; CODE XREF: Ordinal1196+53j
		lea	ecx, [ebp+var_4C]
		call	Ordinal1635
		test	eax, eax
		jz	short loc_6B199490
		push	offset aCmemoryNewal_0 ; "CMemory::NewAlloc() :	new() == NULL\n"
		call	sub_6B18102E
		and	dword ptr [esi+8], 0
		and	dword ptr [esi+4], 0
		pop	ecx
		jmp	short loc_6B1994A0
; ---------------------------------------------------------------------------

loc_6B199490:				; CODE XREF: Ordinal1196+127j
		push	dword ptr [esi+8] ; Size
		push	0		; Val
		push	dword ptr [esi+0Ch] ; Dst
		call	memset
		add	esp, 0Ch

loc_6B1994A0:				; CODE XREF: Ordinal1196+13Cj
		mov	esi, [esi+0Ch]
		lea	ecx, [ebp+var_4C]
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal1196	endp ; sp-analysis failed

; Exported entry 1197.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1197(SIZE_T dwBytes)
		public Ordinal1197
Ordinal1197	proc near		; CODE XREF: Ordinal1195+1Fp
					; DATA XREF: .rdata:off_6B1BF428o

dwBytes		= dword	ptr  4

		push	esi
		push	edi
		mov	esi, ecx
		call	Ordinal1200
		mov	eax, [esp+8+dwBytes]
		mov	edi, ds:GetProcessHeap
		push	eax		; dwBytes
		push	8		; dwFlags
		mov	dword ptr [esi+4], 3
		mov	[esi+8], eax
		call	edi ; GetProcessHeap
		push	eax		; hHeap
		call	ds:HeapAlloc
		test	eax, eax
		mov	[esi+0Ch], eax
		jnz	short loc_6B19950B
		push	offset aCmemoryHeapall ; "CMemory::HeapAlloc() : HeapAlloc() ==	N"...
		call	sub_6B18102E
		and	dword ptr [esi+8], 0
		and	dword ptr [esi+4], 0
		pop	ecx
		jmp	short loc_6B19951A
; ---------------------------------------------------------------------------

loc_6B19950B:				; CODE XREF: Ordinal1197+2Ej
		push	eax		; lpMem
		push	0		; dwFlags
		call	edi ; GetProcessHeap
		push	eax		; hHeap
		call	ds:HeapSize
		mov	[esi+8], eax

loc_6B19951A:				; CODE XREF: Ordinal1197+43j
		mov	eax, [esi+0Ch]
		pop	edi
		pop	esi
		retn	4
Ordinal1197	endp

; Exported entry 1198.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1198
Ordinal1198	proc near		; CODE XREF: Ordinal1195+14p
					; DATA XREF: .rdata:off_6B1BF428o

Dst		= byte ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 24h
		push	esi
		mov	esi, ecx
		call	Ordinal1200
		push	24h		; Size
		lea	eax, [ebp+Dst]
		push	0		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		lea	eax, [ebp+Dst]
		push	eax		; lpSystemInfo
		call	ds:GetSystemInfo
		mov	eax, [ebp+arg_0]
		xor	edx, edx
		div	[ebp+var_20]
		xor	ecx, ecx
		push	4
		cmp	ecx, edx
		sbb	ecx, ecx
		imul	eax, [ebp+var_20]
		and	ecx, [ebp+var_20]
		add	eax, ecx
		pop	ecx
		push	ecx		; flProtect
		push	1000h		; flAllocationType
		push	eax		; dwSize
		push	0		; lpAddress
		mov	[esi+8], eax
		mov	[esi+4], ecx
		call	ds:VirtualAlloc
		test	eax, eax
		mov	[esi+0Ch], eax
		jnz	short loc_6B199593
		push	offset aCmemoryVirtual ; "CMemory::VirtualAlloc() : VirtualAlloc("...
		call	sub_6B18102E
		and	dword ptr [esi+8], 0
		and	dword ptr [esi+4], 0
		pop	ecx

loc_6B199593:				; CODE XREF: Ordinal1198+5Cj
		mov	eax, [esi+0Ch]
		pop	esi
		leave
		retn	4
Ordinal1198	endp

; Exported entry 1203.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1203
Ordinal1203	proc near		; CODE XREF: Ordinal1199+DAp
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1200
		mov	eax, [esp+4+arg_0]
		mov	ecx, [eax+0Ch]
		mov	[esi+0Ch], ecx
		mov	ecx, [eax+8]
		mov	[esi+8], ecx
		mov	ecx, [eax+4]
		mov	[esi+4], ecx
		xor	ecx, ecx
		mov	[eax+0Ch], ecx
		mov	[eax+8], ecx
		mov	[eax+4], ecx
		xor	eax, eax
		inc	eax
		pop	esi
		retn	4
Ordinal1203	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1995CB(void *, char)
sub_6B1995CB	proc near		; DATA XREF: .rdata:off_6B1B4D00o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1B4D00
		call	Ordinal1200
		test	[esp+4+arg_0], 1
		jz	short loc_6B1995E7
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1995E7:				; CODE XREF: sub_6B1995CB+13j
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1995CB	endp

; Exported entry 1195.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1195(int, SIZE_T	dwBytes)
		public Ordinal1195
Ordinal1195	proc near		; CODE XREF: Ordinal742+25p
					; Ordinal1199+68p ...

arg_0		= dword	ptr  4
dwBytes		= dword	ptr  8

		mov	edx, [esp+arg_0]
		xor	eax, eax
		dec	edx
		dec	edx
		jz	short loc_6B199613
		dec	edx
		jz	short loc_6B199608
		dec	edx
		jnz	short locret_6B19961C
		push	[esp+dwBytes]
		call	Ordinal1198
		jmp	short locret_6B19961C
; ---------------------------------------------------------------------------

loc_6B199608:				; CODE XREF: Ordinal1195+Bj
		push	[esp+dwBytes]	; dwBytes
		call	Ordinal1197
		jmp	short locret_6B19961C
; ---------------------------------------------------------------------------

loc_6B199613:				; CODE XREF: Ordinal1195+8j
		push	[esp+dwBytes]
		call	Ordinal1196

locret_6B19961C:			; CODE XREF: Ordinal1195+Ej
					; Ordinal1195+19j ...
		retn	8
Ordinal1195	endp ; sp-analysis failed

; Exported entry 1199.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1199
Ordinal1199	proc near		; CODE XREF: Ordinal404+24p
					; Ordinal424:loc_6B188430p ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
Dst		= dword	ptr -4
dwBytes		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		cmp	[esi+0Ch], ebx
		jnz	short loc_6B199642
		push	offset aCmemoryRealloc ; "CMemory::ReAlloc() : m_pData == NULL\n"
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6B19970F
; ---------------------------------------------------------------------------

loc_6B199642:				; CODE XREF: Ordinal1199+Fj
		mov	edx, [ebp+dwBytes]
		cmp	[esi+8], edx
		jnz	short loc_6B19965D
		push	offset aCmemoryReall_0 ; "CMemory::ReAlloc() : m_nSize == nSize\n"
		call	sub_6B18101A
		mov	eax, [esi+0Ch]
		pop	ecx
		jmp	loc_6B19970F
; ---------------------------------------------------------------------------

loc_6B19965D:				; CODE XREF: Ordinal1199+29j
		mov	eax, [esi+4]
		mov	ecx, eax
		dec	ecx
		dec	ecx
		push	edi		; Args
		jz	short loc_6B199671
		dec	ecx
		jz	short loc_6B19969D
		dec	ecx
		jnz	loc_6B19970C

loc_6B199671:				; CODE XREF: Ordinal1199+46j
		push	edx		; dwBytes
		mov	edi, offset off_6B1B4D00
		push	eax		; int
		lea	ecx, [ebp+var_10]
		mov	[ebp+var_10], edi
		mov	[ebp+var_C], ebx
		mov	[ebp+var_8], ebx
		mov	[ebp+Dst], ebx
		call	Ordinal1195
		test	eax, eax
		jnz	short loc_6B1996D9
		push	offset aCmemoryReall_1 ; "CMemory::ReAlloc() : mem.Alloc() == NUL"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B199701
; ---------------------------------------------------------------------------

loc_6B19969D:				; CODE XREF: Ordinal1199+49j
		mov	edi, ds:GetProcessHeap
		push	edx		; dwBytes
		push	dword ptr [esi+0Ch] ; lpMem
		push	8		; dwFlags
		call	edi ; GetProcessHeap
		push	eax		; hHeap
		call	ds:HeapReAlloc
		mov	ebx, eax
		test	ebx, ebx
		jnz	short loc_6B1996C5
		push	offset aCmemoryReall_2 ; "CMemory::ReAlloc() : mem.NewAlloc() == "...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B19970C
; ---------------------------------------------------------------------------

loc_6B1996C5:				; CODE XREF: Ordinal1199+97j
		push	ebx		; lpMem
		push	0		; dwFlags
		mov	[esi+0Ch], ebx
		call	edi ; GetProcessHeap
		push	eax		; hHeap
		call	ds:HeapSize
		mov	[esi+8], eax
		jmp	short loc_6B19970C
; ---------------------------------------------------------------------------

loc_6B1996D9:				; CODE XREF: Ordinal1199+6Fj
		mov	eax, [esi+8]
		cmp	[ebp+var_8], eax
		jnb	short loc_6B1996E4
		mov	eax, [ebp+var_8]

loc_6B1996E4:				; CODE XREF: Ordinal1199+C0j
		push	eax		; Size
		push	dword ptr [esi+0Ch] ; Src
		push	[ebp+Dst]	; Dst
		call	memcpy
		add	esp, 0Ch
		lea	eax, [ebp+var_10]
		push	eax
		mov	ecx, esi
		call	Ordinal1203
		mov	ebx, [esi+0Ch]

loc_6B199701:				; CODE XREF: Ordinal1199+7Cj
		lea	ecx, [ebp+var_10]
		mov	[ebp+var_10], edi
		call	Ordinal1200

loc_6B19970C:				; CODE XREF: Ordinal1199+4Cj
					; Ordinal1199+A4j ...
		mov	eax, ebx
		pop	edi

loc_6B19970F:				; CODE XREF: Ordinal1199+1Ej
					; Ordinal1199+39j
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal1199	endp

; Exported entry 1201.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1201
Ordinal1201	proc near		; CODE XREF: Ordinal197+43p
					; Ordinal400+36p ...

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, ecx
		call	Ordinal1200
		mov	esi, [esp+8+arg_0]
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6B199758
		push	dword ptr [esi+8] ; dwBytes
		mov	ecx, edi
		push	eax		; int
		call	Ordinal1195
		test	eax, eax
		jnz	short loc_6B199747
		push	offset aCmemoryCopyAll ; "CMemory::Copy() : Alloc() == NULL\n"
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B19975B
; ---------------------------------------------------------------------------

loc_6B199747:				; CODE XREF: Ordinal1201+21j
		push	dword ptr [esi+8] ; Size
		push	dword ptr [esi+0Ch] ; Src
		push	dword ptr [edi+0Ch] ; Dst
		call	memcpy
		add	esp, 0Ch

loc_6B199758:				; CODE XREF: Ordinal1201+12j
		xor	eax, eax
		inc	eax

loc_6B19975B:				; CODE XREF: Ordinal1201+30j
		pop	edi
		pop	esi
		retn	4
Ordinal1201	endp

; Exported entry 1202.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1202(int, void *Src, size_t dwBytes)
		public Ordinal1202
Ordinal1202	proc near		; CODE XREF: Ordinal188+6Bp
					; Ordinal408+3Cp ...

arg_0		= dword	ptr  8
Src		= dword	ptr  0Ch
dwBytes		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		cmp	[ebp+Src], 0
		push	esi
		mov	esi, ecx
		jz	short loc_6B1997A5
		cmp	[ebp+dwBytes], 0
		jz	short loc_6B1997A5
		call	Ordinal1200
		push	[ebp+dwBytes]	; dwBytes
		mov	ecx, esi
		push	[ebp+arg_0]	; int
		call	Ordinal1195
		test	eax, eax
		jnz	short loc_6B19978F
		push	offset aCmemoryCopyAll ; "CMemory::Copy() : Alloc() == NULL\n"
		jmp	short loc_6B1997AA
; ---------------------------------------------------------------------------

loc_6B19978F:				; CODE XREF: Ordinal1202+26j
		push	[ebp+dwBytes]	; Size
		push	[ebp+Src]	; Src
		push	dword ptr [esi+0Ch] ; Dst
		call	memcpy
		xor	eax, eax
		add	esp, 0Ch
		inc	eax
		jmp	short loc_6B1997B2
; ---------------------------------------------------------------------------

loc_6B1997A5:				; CODE XREF: Ordinal1202+Aj
					; Ordinal1202+10j
		push	offset aCmemoryCopyPda ; "CMemory::Copy() : pData == NULL\n"

loc_6B1997AA:				; CODE XREF: Ordinal1202+2Dj
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax

loc_6B1997B2:				; CODE XREF: Ordinal1202+43j
		pop	esi
		pop	ebp
		retn	0Ch
Ordinal1202	endp

; Exported entry 1190.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1190
Ordinal1190	proc near		; CODE XREF: Ordinal1188+18p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		cmp	esi, [esp+4+arg_0]
		jz	short loc_6B1997DF
		call	Ordinal1200
		push	[esp+4+arg_0]
		mov	ecx, esi
		call	Ordinal1201
		test	eax, eax
		jnz	short loc_6B1997DF
		push	offset aCmemoryOperato ; "CMemory::operator =()	: Copy() == FALSE"...
		call	sub_6B18102E
		pop	ecx

loc_6B1997DF:				; CODE XREF: Ordinal1190+7j
					; Ordinal1190+1Bj
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1190	endp

; Exported entry 1188.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1188
Ordinal1188	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		xor	eax, eax
		mov	dword ptr [esi], offset	off_6B1B4D00
		mov	[esi+4], eax
		mov	[esi+8], eax
		mov	[esi+0Ch], eax
		call	Ordinal1190
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1188	endp

; Exported entry 1210.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1210
Ordinal1210	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		call	Ordinal610
		and	dword ptr [esi+28h], 0
		lea	ecx, [esi+2Ch]
		mov	dword ptr [esi], offset	off_6B1B4EC0
		call	Ordinal1187
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1210	endp

; Exported entry 1211.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1211
Ordinal1211	proc near		; CODE XREF: sub_6B199981+3p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+2Ch]
		mov	dword ptr [esi], offset	off_6B1B4EC0
		call	Ordinal1189
		mov	ecx, esi
		pop	esi
		jmp	Ordinal611
Ordinal1211	endp

; Exported entry 1212.
; Exported entry 1797.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1212
Ordinal1212	proc near		; DATA XREF: .rdata:off_6B1BF428o
		and	dword ptr [ecx+28h], 0 ; ccL35_1212
		xor	eax, eax
		inc	eax
		retn
Ordinal1212	endp

; Exported entry 1213.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1213
Ordinal1213	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+2Ch]
		call	Ordinal1052
		mov	[esi+28h], eax
		xor	eax, eax
		inc	eax
		pop	esi
		retn
Ordinal1213	endp

; Exported entry 1214.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1214
Ordinal1214	proc near		; DATA XREF: .rdata:off_6B1BF428o
		lea	eax, [ecx+2Ch]
		retn
Ordinal1214	endp

; Exported entry 1215.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1215(void *Dst, size_t Size)
		public Ordinal1215
Ordinal1215	proc near		; DATA XREF: .rdata:6B1B4EC4o
					; .rdata:off_6B1BF428o

Dst		= dword	ptr  4
Size		= dword	ptr  8

		push	ebx
		push	esi
		mov	esi, ecx
		lea	ebx, [esi+2Ch]
		push	edi
		mov	ecx, ebx
		call	Ordinal1052
		sub	eax, [esi+28h]
		mov	edi, [esp+0Ch+Size]
		cmp	eax, edi
		jnb	short loc_6B19988D
		push	offset aCmemoryarchive ; "CMemoryArchive::ReadEx() : m_Memory.Get"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B1998AB
; ---------------------------------------------------------------------------

loc_6B19988D:				; CODE XREF: Ordinal1215+18j
		mov	ecx, ebx
		call	Ordinal1493
		add	eax, [esi+28h]
		push	edi		; Size
		push	eax		; Src
		push	[esp+14h+Dst]	; Dst
		call	memcpy
		add	[esi+28h], edi
		xor	eax, eax
		add	esp, 0Ch
		inc	eax

loc_6B1998AB:				; CODE XREF: Ordinal1215+27j
		pop	edi
		pop	esi
		pop	ebx
		retn	8
Ordinal1215	endp

; Exported entry 1216.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1216(void *Src, size_t Size)
		public Ordinal1216
Ordinal1216	proc near		; DATA XREF: .rdata:6B1B4EC8o
					; .rdata:off_6B1BF428o

Src		= dword	ptr  4
Size		= dword	ptr  8

		push	ebx
		push	esi
		mov	esi, ecx
		push	edi
		lea	edi, [esi+2Ch]
		mov	ecx, edi
		call	Ordinal1052
		mov	ebx, [esp+0Ch+Size]
		mov	ecx, eax
		sub	ecx, [esi+28h]
		cmp	ecx, ebx
		jnb	short loc_6B199903
		test	eax, eax
		jnz	short loc_6B1998E4
		push	ebx
		mov	ecx, edi
		call	Ordinal1196
		test	eax, eax
		jnz	short loc_6B199903
		push	offset aCmemoryarchi_0 ; "CMemoryArchive::WriteEx() : m_Memory.Ne"...
		jmp	short loc_6B1998F9
; ---------------------------------------------------------------------------

loc_6B1998E4:				; CODE XREF: Ordinal1216+1Ej
		sub	eax, ecx
		add	eax, ebx
		push	eax
		mov	ecx, edi
		call	Ordinal1199
		test	eax, eax
		jnz	short loc_6B199903
		push	offset aCmemoryarchi_1 ; "CMemoryArchive::WriteEx() : m_Memory.Re"...

loc_6B1998F9:				; CODE XREF: Ordinal1216+31j
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B199921
; ---------------------------------------------------------------------------

loc_6B199903:				; CODE XREF: Ordinal1216+1Aj
					; Ordinal1216+2Aj ...
		mov	ecx, edi
		call	Ordinal1493
		add	eax, [esi+28h]
		push	ebx		; Size
		push	[esp+10h+Src]	; Src
		push	eax		; Dst
		call	memcpy
		add	[esi+28h], ebx
		xor	eax, eax
		add	esp, 0Ch
		inc	eax

loc_6B199921:				; CODE XREF: Ordinal1216+50j
		pop	edi
		pop	esi
		pop	ebx
		retn	8
Ordinal1216	endp ; sp-analysis failed

; Exported entry 1217.
; Exported entry 1802.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1802
Ordinal1802	proc near		; DATA XREF: .rdata:6B1B4ECCo
					; .rdata:6B1B9658o ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0] ; ccL35_1217
		mov	ecx, [ecx+28h]
		and	dword ptr [eax+4], 0
		mov	[eax], ecx
		xor	eax, eax
		inc	eax
		retn	4
Ordinal1802	endp

; Exported entry 1218.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1218
Ordinal1218	proc near		; DATA XREF: .rdata:6B1B4ED0o
					; .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, ecx
		mov	eax, [esi+28h]
		push	edi
		mov	edi, [esp+8+arg_0]
		xor	ecx, ecx
		cmp	edi, eax
		jnz	short loc_6B199951
		cmp	[esp+8+arg_4], ecx
		jz	short loc_6B199979

loc_6B199951:				; CODE XREF: Ordinal1218+Fj
		lea	ecx, [esi+2Ch]
		call	Ordinal1052
		xor	ecx, ecx
		cmp	[esp+8+arg_4], ecx
		jb	short loc_6B199976
		ja	short loc_6B199967
		cmp	edi, eax
		jb	short loc_6B199976

loc_6B199967:				; CODE XREF: Ordinal1218+27j
		push	offset aCmemoryarchi_2 ; "CMemoryArchive::SetPosEx() : uPos >= m_"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B19997C
; ---------------------------------------------------------------------------

loc_6B199976:				; CODE XREF: Ordinal1218+25j
					; Ordinal1218+2Bj
		mov	[esi+28h], edi

loc_6B199979:				; CODE XREF: Ordinal1218+15j
		xor	eax, eax
		inc	eax

loc_6B19997C:				; CODE XREF: Ordinal1218+3Aj
		pop	edi
		pop	esi
		retn	8
Ordinal1218	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B199981(void *, char)
sub_6B199981	proc near		; DATA XREF: .rdata:off_6B1B4EC0o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1211
		test	[esp+4+arg_0], 1
		jz	short loc_6B199997
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B199997:				; CODE XREF: sub_6B199981+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B199981	endp

; Exported entry 1219.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1219
Ordinal1219	proc near		; CODE XREF: Ordinal972+3p
					; Ordinal1171+3p ...
		mov	eax, ecx
		and	dword ptr [eax+4], 0
		mov	dword ptr [eax], offset	off_6B1B4FD0
		retn
Ordinal1219	endp

; Exported entry 1228.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1228
Ordinal1228	proc near		; CODE XREF: Ordinal973+Dp
					; Ordinal978+7p ...
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6B1999BF
		push	eax		; hLibModule
		call	ds:FreeLibrary
		and	dword ptr [esi+4], 0

loc_6B1999BF:				; CODE XREF: Ordinal1228+8j
		pop	esi
		retn
Ordinal1228	endp

; Exported entry 1230.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1230
Ordinal1230	proc near		; CODE XREF: Ordinal815+3Bp
					; Ordinal977+Ap ...
		cmp	dword ptr [ecx+4], 0
		setnz	al
		retn
Ordinal1230	endp

; Exported entry 1221.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1221
Ordinal1221	proc near		; CODE XREF: Ordinal973+15j
					; Ordinal1172+6j ...
		mov	dword ptr [ecx], offset	off_6B1B4FD0
		jmp	Ordinal1228
Ordinal1221	endp

; Exported entry 1224.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1224
Ordinal1224	proc near		; CODE XREF: Ordinal1220+11p
					; Ordinal1222+7p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		test	edi, edi
		mov	esi, ecx
		jnz	short loc_6B1999EF
		push	offset aCmoduleAttachH ; "CModule::Attach() : hModule == NULL\n"
		call	sub_6B18102E
		pop	ecx
		xor	al, al
		jmp	short loc_6B1999FB
; ---------------------------------------------------------------------------

loc_6B1999EF:				; CODE XREF: Ordinal1224+Aj
		mov	ecx, esi
		call	Ordinal1228
		mov	[esi+4], edi
		mov	al, 1

loc_6B1999FB:				; CODE XREF: Ordinal1224+19j
		pop	edi
		pop	esi
		retn	4
Ordinal1224	endp

; Exported entry 1225.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1225
Ordinal1225	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, [ecx+4]
		and	dword ptr [ecx+4], 0
		call	Ordinal1228
		mov	eax, esi
		pop	esi
		retn
Ordinal1225	endp

; Exported entry 1226.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1226(LPCSTR Args)
		public Ordinal1226
Ordinal1226	proc near		; CODE XREF: Ordinal974+7p
					; Ordinal1173+7p ...

Args		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1228
		push	[esp+4+Args]	; lpLibFileName
		call	ds:LoadLibraryA
		test	eax, eax
		mov	[esi+4], eax
		pop	esi
		jnz	short loc_6B199A47
		call	ds:GetLastError
		push	eax
		push	[esp+4+Args]	; Args
		push	offset aCmoduleLoadLoa ; "CModule::Load() : LoadLibrary() == NULL"...
		call	sub_6B18102E
		add	esp, 0Ch
		xor	al, al
		jmp	short locret_6B199A49
; ---------------------------------------------------------------------------

loc_6B199A47:				; CODE XREF: Ordinal1226+18j
		mov	al, 1

locret_6B199A49:			; CODE XREF: Ordinal1226+34j
		retn	4
Ordinal1226	endp

; Exported entry 1227.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1227(LPCSTR Args, DWORD dwFlags)
		public Ordinal1227
Ordinal1227	proc near		; CODE XREF: Ordinal975+Bp
					; Ordinal1174+Bp ...

Args		= dword	ptr  4
dwFlags		= dword	ptr  8

		push	esi
		mov	esi, ecx
		call	Ordinal1228
		push	[esp+4+dwFlags]	; dwFlags
		push	0		; hFile
		push	[esp+0Ch+Args]	; lpLibFileName
		call	ds:LoadLibraryExA
		test	eax, eax
		mov	[esi+4], eax
		pop	esi
		jnz	short loc_6B199A88
		call	ds:GetLastError
		push	eax
		push	[esp+4+Args]	; Args
		push	offset aCmoduleLoadL_0 ; "CModule::Load() : LoadLibraryEx() == NU"...
		call	sub_6B18102E
		add	esp, 0Ch
		xor	al, al
		jmp	short locret_6B199A8A
; ---------------------------------------------------------------------------

loc_6B199A88:				; CODE XREF: Ordinal1227+1Ej
		mov	al, 1

locret_6B199A8A:			; CODE XREF: Ordinal1227+3Aj
		retn	8
Ordinal1227	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B199A8D(void *, char)
sub_6B199A8D	proc near		; DATA XREF: .rdata:off_6B1B4FD0o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1B4FD0
		call	Ordinal1228
		test	[esp+4+arg_0], 1
		jz	short loc_6B199AA9
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B199AA9:				; CODE XREF: sub_6B199A8D+13j
		mov	eax, esi
		pop	esi
		retn	4
sub_6B199A8D	endp

; Exported entry 1220.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1220
Ordinal1220	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		and	dword ptr [esi+4], 0
		mov	dword ptr [esi], offset	off_6B1B4FD0
		call	Ordinal1224
		test	al, al
		jnz	short loc_6B199AD4
		push	offset aCmoduleCmodule ; "CModule::CModule() : Attach()	== false\n"...
		call	sub_6B18102E
		pop	ecx

loc_6B199AD4:				; CODE XREF: Ordinal1220+18j
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1220	endp

; Exported entry 1222.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1222
Ordinal1222	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		call	Ordinal1224
		test	al, al
		jnz	short loc_6B199AF5
		push	offset aCmoduleOperato ; "CModule::operator =()	: Attach() == fal"...
		call	sub_6B18102E
		pop	ecx

loc_6B199AF5:				; CODE XREF: Ordinal1222+Ej
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1222	endp

; Exported entry 1229.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1229(char *Args)
		public Ordinal1229
Ordinal1229	proc near		; CODE XREF: Ordinal977+2Ap
					; Ordinal974+29p ...

lpProcName	= dword	ptr -4
Args		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		lea	ecx, [ebp+lpProcName]
		call	sub_6B181879
		lea	eax, [ebp+lpProcName]
		push	eax		; int
		push	[ebp+Args]	; Src
		call	Ordinal1519
		test	al, al
		pop	ecx
		pop	ecx
		jnz	short loc_6B199B2B
		push	offset aCmoduleGetproc ; "CModule::GetProc() : CStringConvert::Co"...
		call	sub_6B18102E
		pop	ecx
		xor	esi, esi
		jmp	short loc_6B199B54
; ---------------------------------------------------------------------------

loc_6B199B2B:				; CODE XREF: Ordinal1229+1Fj
		push	[ebp+lpProcName] ; lpProcName
		push	dword ptr [esi+4] ; hModule
		call	ds:GetProcAddress
		mov	esi, eax
		test	esi, esi
		jnz	short loc_6B199B54
		call	ds:GetLastError
		push	eax
		push	[ebp+Args]	; Args
		push	offset aCmoduleGetpr_0 ; "CModule::GetProc() : GetProcAddress()	="...
		call	sub_6B18102E
		add	esp, 0Ch

loc_6B199B54:				; CODE XREF: Ordinal1229+2Ej
					; Ordinal1229+40j
		lea	ecx, [ebp+lpProcName]
		call	sub_6B1899B5
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal1229	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B199B63	proc near		; CODE XREF: sub_6B182017+100p
					; sub_6B182017+116p ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, [edx]
		push	esi
		mov	esi, [eax+8]
		mov	[edx], esi
		mov	esi, [eax+8]
		cmp	byte ptr [esi+15h], 0
		jnz	short loc_6B199B7B
		mov	[esi+4], edx

loc_6B199B7B:				; CODE XREF: sub_6B199B63+13j
		mov	esi, [edx+4]
		mov	[eax+4], esi
		mov	ecx, [ecx+4]
		cmp	edx, [ecx+4]
		pop	esi
		jnz	short loc_6B199B8F
		mov	[ecx+4], eax
		jmp	short loc_6B199B9E
; ---------------------------------------------------------------------------

loc_6B199B8F:				; CODE XREF: sub_6B199B63+25j
		mov	ecx, [edx+4]
		cmp	edx, [ecx+8]
		jnz	short loc_6B199B9C
		mov	[ecx+8], eax
		jmp	short loc_6B199B9E
; ---------------------------------------------------------------------------

loc_6B199B9C:				; CODE XREF: sub_6B199B63+32j
		mov	[ecx], eax

loc_6B199B9E:				; CODE XREF: sub_6B199B63+2Aj
					; sub_6B199B63+37j
		mov	[eax+8], edx
		mov	[edx+4], eax
		retn	4
sub_6B199B63	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B199BA7	proc near		; CODE XREF: Ordinal145+365p
					; Ordinal147+D4p ...
		mov	eax, [ecx]
		push	ebx
		xor	bl, bl
		cmp	[eax+15h], bl
		jnz	short loc_6B199BDB
		mov	edx, [eax+8]
		cmp	[edx+15h], bl
		jnz	short loc_6B199BD1
		jmp	short loc_6B199BBD
; ---------------------------------------------------------------------------

loc_6B199BBB:				; CODE XREF: sub_6B199BA7+1Bj
		mov	edx, eax

loc_6B199BBD:				; CODE XREF: sub_6B199BA7+12j
		mov	eax, [edx]
		cmp	[eax+15h], bl
		jz	short loc_6B199BBB
		mov	[ecx], edx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6B199BC8:				; CODE XREF: sub_6B199BA7+30j
		mov	edx, [ecx]
		cmp	edx, [eax+8]
		jnz	short loc_6B199BD9
		mov	[ecx], eax

loc_6B199BD1:				; CODE XREF: sub_6B199BA7+10j
		mov	eax, [eax+4]
		cmp	[eax+15h], bl
		jz	short loc_6B199BC8

loc_6B199BD9:				; CODE XREF: sub_6B199BA7+26j
		mov	[ecx], eax

loc_6B199BDB:				; CODE XREF: sub_6B199BA7+8j
		pop	ebx
		retn
sub_6B199BA7	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B199BDD	proc near		; CODE XREF: sub_6B199CAC+23p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	eax, ecx
		mov	ecx, [ebp+arg_0]
		mov	[eax], ecx
		mov	ecx, [ebp+arg_4]
		mov	[eax+4], ecx
		mov	ecx, [ebp+arg_8]
		mov	[eax+8], ecx
		mov	ecx, [ebp+arg_C]
		mov	edx, [ecx]
		mov	[eax+0Ch], edx
		mov	ecx, [ecx+4]
		mov	[eax+10h], ecx
		mov	cl, [ebp+arg_10]
		mov	[eax+14h], cl
		mov	byte ptr [eax+15h], 0
		pop	ebp
		retn	14h
sub_6B199BDD	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B199C0F	proc near		; CODE XREF: sub_6B182017+E2p
					; sub_6B182017+134p ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, [edx+8]
		push	esi
		mov	esi, [eax]
		mov	[edx+8], esi
		mov	esi, [eax]
		cmp	byte ptr [esi+15h], 0
		jnz	short loc_6B199C27
		mov	[esi+4], edx

loc_6B199C27:				; CODE XREF: sub_6B199C0F+13j
		mov	esi, [edx+4]
		mov	[eax+4], esi
		mov	ecx, [ecx+4]
		cmp	edx, [ecx+4]
		pop	esi
		jnz	short loc_6B199C3B
		mov	[ecx+4], eax
		jmp	short loc_6B199C49
; ---------------------------------------------------------------------------

loc_6B199C3B:				; CODE XREF: sub_6B199C0F+25j
		mov	ecx, [edx+4]
		cmp	edx, [ecx]
		jnz	short loc_6B199C46
		mov	[ecx], eax
		jmp	short loc_6B199C49
; ---------------------------------------------------------------------------

loc_6B199C46:				; CODE XREF: sub_6B199C0F+31j
		mov	[ecx+8], eax

loc_6B199C49:				; CODE XREF: sub_6B199C0F+2Aj
					; sub_6B199C0F+35j
		mov	[eax], edx
		mov	[edx+4], eax
		retn	4
sub_6B199C0F	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B199C51	proc near		; CODE XREF: sub_6B199F87+Cp
					; sub_6B19A47D+Dp

arg_0		= dword	ptr  4

		mov	eax, [ecx+4]
		mov	ecx, [eax+4]
		cmp	byte ptr [ecx+15h], 0
		jnz	short locret_6B199C77
		mov	edx, [esp+arg_0]
		mov	edx, [edx]

loc_6B199C63:				; CODE XREF: sub_6B199C51+24j
		cmp	[ecx+0Ch], edx
		jnb	short loc_6B199C6D
		mov	ecx, [ecx+8]
		jmp	short loc_6B199C71
; ---------------------------------------------------------------------------

loc_6B199C6D:				; CODE XREF: sub_6B199C51+15j
		mov	eax, ecx
		mov	ecx, [ecx]

loc_6B199C71:				; CODE XREF: sub_6B199C51+1Aj
		cmp	byte ptr [ecx+15h], 0
		jz	short loc_6B199C63

locret_6B199C77:			; CODE XREF: sub_6B199C51+Aj
		retn	4
sub_6B199C51	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6B199C7A(void *)
sub_6B199C7A	proc near		; CODE XREF: sub_6B199C7A+16p
					; sub_6B199F61+Cp

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		cmp	byte ptr [edi+15h], 0
		mov	ebx, ecx
		mov	esi, edi
		jnz	short loc_6B199CA6

loc_6B199C8B:				; CODE XREF: sub_6B199C7A+2Aj
		push	dword ptr [esi+8] ; void *
		mov	ecx, ebx
		call	sub_6B199C7A
		mov	esi, [esi]
		push	edi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		cmp	byte ptr [esi+15h], 0
		pop	ecx
		mov	edi, esi
		jz	short loc_6B199C8B

loc_6B199CA6:				; CODE XREF: sub_6B199C7A+Fj
		pop	edi
		pop	esi
		pop	ebx
		retn	4
sub_6B199C7A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B199CAC	proc near		; CODE XREF: sub_6B19A039+5Ep

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	esi
		push	18h		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	esi, eax
		test	esi, esi
		pop	ecx
		jz	short loc_6B199CD4
		push	[ebp+arg_10]
		mov	ecx, esi
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6B199BDD

loc_6B199CD4:				; CODE XREF: sub_6B199CAC+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	14h
sub_6B199CAC	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6B199CDB(int, void *)
sub_6B199CDB	proc near		; CODE XREF: sub_6B199FC1+3Bp
					; Ordinal1234+53p

var_54		= dword	ptr -54h
var_2C		= byte ptr -2Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_95 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 48h
		push	ebx
		mov	ebx, [ebp+arg_4]
		cmp	byte ptr [ebx+15h], 0
		push	esi
		push	edi
		mov	[ebp+var_10], ecx
		jz	short loc_6B199D2A
		push	offset aInvalidMapSetT ; "invalid map/set<T> iterator"
		lea	ecx, [ebp+var_2C]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_2C]
		push	eax
		lea	ecx, [ebp+var_54]
		call	sub_6B181357
		push	offset dword_6B1BAA6C
		lea	eax, [ebp+var_54]
		push	eax
		mov	[ebp+var_54], offset off_6B1AA91C
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B199D2A:				; CODE XREF: sub_6B199CDB+1Aj
		lea	ecx, [ebp+arg_4]
		call	sub_6B199BA7
		mov	ecx, [ebx]
		cmp	byte ptr [ecx+15h], 0
		jz	short loc_6B199D3F
		mov	edi, [ebx+8]
		jmp	short loc_6B199D56
; ---------------------------------------------------------------------------

loc_6B199D3F:				; CODE XREF: sub_6B199CDB+5Dj
		mov	eax, [ebx+8]
		cmp	byte ptr [eax+15h], 0
		jz	short loc_6B199D4C
		mov	edi, ecx
		jmp	short loc_6B199D56
; ---------------------------------------------------------------------------

loc_6B199D4C:				; CODE XREF: sub_6B199CDB+6Bj
		mov	eax, [ebp+arg_4]
		cmp	eax, ebx
		mov	edi, [eax+8]
		jnz	short loc_6B199DCC

loc_6B199D56:				; CODE XREF: sub_6B199CDB+62j
					; sub_6B199CDB+6Fj
		cmp	byte ptr [edi+15h], 0
		mov	esi, [ebx+4]
		jnz	short loc_6B199D62
		mov	[edi+4], esi

loc_6B199D62:				; CODE XREF: sub_6B199CDB+82j
		mov	ecx, [ebp+var_10]
		mov	eax, [ecx+4]
		cmp	[eax+4], ebx
		jnz	short loc_6B199D72
		mov	[eax+4], edi
		jmp	short loc_6B199D7D
; ---------------------------------------------------------------------------

loc_6B199D72:				; CODE XREF: sub_6B199CDB+90j
		cmp	[esi], ebx
		jnz	short loc_6B199D7A
		mov	[esi], edi
		jmp	short loc_6B199D7D
; ---------------------------------------------------------------------------

loc_6B199D7A:				; CODE XREF: sub_6B199CDB+99j
		mov	[esi+8], edi

loc_6B199D7D:				; CODE XREF: sub_6B199CDB+95j
					; sub_6B199CDB+9Dj
		mov	ecx, [ecx+4]
		cmp	[ecx], ebx
		jnz	short loc_6B199DA0
		cmp	byte ptr [edi+15h], 0
		jz	short loc_6B199D8E
		mov	edx, esi
		jmp	short loc_6B199D9E
; ---------------------------------------------------------------------------

loc_6B199D8E:				; CODE XREF: sub_6B199CDB+ADj
		mov	eax, [edi]
		mov	edx, edi
		jmp	short loc_6B199D98
; ---------------------------------------------------------------------------

loc_6B199D94:				; CODE XREF: sub_6B199CDB+C1j
		mov	edx, eax
		mov	eax, [edx]

loc_6B199D98:				; CODE XREF: sub_6B199CDB+B7j
		cmp	byte ptr [eax+15h], 0
		jz	short loc_6B199D94

loc_6B199D9E:				; CODE XREF: sub_6B199CDB+B1j
		mov	[ecx], edx

loc_6B199DA0:				; CODE XREF: sub_6B199CDB+A7j
		mov	eax, [ebp+var_10]
		mov	ecx, [eax+4]
		cmp	[ecx+8], ebx
		jnz	short loc_6B199E26
		cmp	byte ptr [edi+15h], 0
		jz	short loc_6B199DB5
		mov	edx, esi
		jmp	short loc_6B199DC7
; ---------------------------------------------------------------------------

loc_6B199DB5:				; CODE XREF: sub_6B199CDB+D4j
		mov	eax, [edi+8]
		mov	edx, edi
		jmp	short loc_6B199DC1
; ---------------------------------------------------------------------------

loc_6B199DBC:				; CODE XREF: sub_6B199CDB+EAj
		mov	edx, eax
		mov	eax, [edx+8]

loc_6B199DC1:				; CODE XREF: sub_6B199CDB+DFj
		cmp	byte ptr [eax+15h], 0
		jz	short loc_6B199DBC

loc_6B199DC7:				; CODE XREF: sub_6B199CDB+D8j
		mov	[ecx+8], edx
		jmp	short loc_6B199E26
; ---------------------------------------------------------------------------

loc_6B199DCC:				; CODE XREF: sub_6B199CDB+79j
		mov	[ecx+4], eax
		mov	ecx, [ebx]
		mov	[eax], ecx
		cmp	eax, [ebx+8]
		jnz	short loc_6B199DDC
		mov	esi, eax
		jmp	short loc_6B199DF6
; ---------------------------------------------------------------------------

loc_6B199DDC:				; CODE XREF: sub_6B199CDB+FBj
		cmp	byte ptr [edi+15h], 0
		mov	esi, [eax+4]
		jnz	short loc_6B199DE8
		mov	[edi+4], esi

loc_6B199DE8:				; CODE XREF: sub_6B199CDB+108j
		mov	[esi], edi
		mov	ecx, [ebx+8]
		mov	[eax+8], ecx
		mov	ecx, [ebx+8]
		mov	[ecx+4], eax

loc_6B199DF6:				; CODE XREF: sub_6B199CDB+FFj
		mov	ecx, [ebp+var_10]
		mov	ecx, [ecx+4]
		cmp	[ecx+4], ebx
		jnz	short loc_6B199E06
		mov	[ecx+4], eax
		jmp	short loc_6B199E14
; ---------------------------------------------------------------------------

loc_6B199E06:				; CODE XREF: sub_6B199CDB+124j
		mov	ecx, [ebx+4]
		cmp	[ecx], ebx
		jnz	short loc_6B199E11
		mov	[ecx], eax
		jmp	short loc_6B199E14
; ---------------------------------------------------------------------------

loc_6B199E11:				; CODE XREF: sub_6B199CDB+130j
		mov	[ecx+8], eax

loc_6B199E14:				; CODE XREF: sub_6B199CDB+129j
					; sub_6B199CDB+134j
		mov	ecx, [ebx+4]
		mov	[eax+4], ecx
		mov	dl, [ebx+14h]
		mov	cl, [eax+14h]
		mov	[eax+14h], dl
		mov	[ebx+14h], cl

loc_6B199E26:				; CODE XREF: sub_6B199CDB+CEj
					; sub_6B199CDB+EFj
		cmp	byte ptr [ebx+14h], 1
		jnz	loc_6B199F33
		jmp	loc_6B199EE7
; ---------------------------------------------------------------------------

loc_6B199E35:				; CODE XREF: sub_6B199CDB+215j
		cmp	byte ptr [edi+14h], 1
		jnz	loc_6B199F2F
		mov	eax, [esi]
		cmp	edi, eax
		jnz	short loc_6B199EB1
		mov	eax, [esi+8]
		cmp	byte ptr [eax+14h], 0
		jnz	short loc_6B199E5F
		mov	byte ptr [eax+14h], 1
		push	esi
		mov	byte ptr [esi+14h], 0
		call	sub_6B199C0F
		mov	eax, [esi+8]

loc_6B199E5F:				; CODE XREF: sub_6B199CDB+171j
		cmp	byte ptr [eax+15h], 0
		jnz	short loc_6B199EE2
		mov	ecx, [eax]
		cmp	byte ptr [ecx+14h], 1
		jnz	short loc_6B199E76
		mov	ecx, [eax+8]
		cmp	byte ptr [ecx+14h], 1
		jz	short loc_6B199EDE

loc_6B199E76:				; CODE XREF: sub_6B199CDB+190j
		mov	ecx, [eax+8]
		cmp	byte ptr [ecx+14h], 1
		jnz	short loc_6B199E95
		mov	ecx, [eax]
		mov	byte ptr [ecx+14h], 1
		mov	ecx, [ebp+var_10]
		push	eax
		mov	byte ptr [eax+14h], 0
		call	sub_6B199B63
		mov	eax, [esi+8]

loc_6B199E95:				; CODE XREF: sub_6B199CDB+1A2j
		mov	cl, [esi+14h]
		mov	[eax+14h], cl
		mov	ecx, [ebp+var_10]
		mov	byte ptr [esi+14h], 1
		mov	eax, [eax+8]
		push	esi
		mov	byte ptr [eax+14h], 1
		call	sub_6B199C0F
		jmp	short loc_6B199F2F
; ---------------------------------------------------------------------------

loc_6B199EB1:				; CODE XREF: sub_6B199CDB+168j
		cmp	byte ptr [eax+14h], 0
		jnz	short loc_6B199EC7
		mov	byte ptr [eax+14h], 1
		push	esi
		mov	byte ptr [esi+14h], 0
		call	sub_6B199B63
		mov	eax, [esi]

loc_6B199EC7:				; CODE XREF: sub_6B199CDB+1DAj
		cmp	byte ptr [eax+15h], 0
		jnz	short loc_6B199EE2
		mov	ecx, [eax+8]
		cmp	byte ptr [ecx+14h], 1
		jnz	short loc_6B199EF8
		mov	ecx, [eax]
		cmp	byte ptr [ecx+14h], 1
		jnz	short loc_6B199EF8

loc_6B199EDE:				; CODE XREF: sub_6B199CDB+199j
		mov	byte ptr [eax+14h], 0

loc_6B199EE2:				; CODE XREF: sub_6B199CDB+188j
					; sub_6B199CDB+1F0j
		mov	edi, esi
		mov	esi, [esi+4]

loc_6B199EE7:				; CODE XREF: sub_6B199CDB+155j
		mov	ecx, [ebp+var_10]
		mov	eax, [ecx+4]
		cmp	edi, [eax+4]
		jnz	loc_6B199E35
		jmp	short loc_6B199F2F
; ---------------------------------------------------------------------------

loc_6B199EF8:				; CODE XREF: sub_6B199CDB+1F9j
					; sub_6B199CDB+201j
		mov	ecx, [eax]
		cmp	byte ptr [ecx+14h], 1
		jnz	short loc_6B199F16
		mov	ecx, [eax+8]
		mov	byte ptr [ecx+14h], 1
		mov	ecx, [ebp+var_10]
		push	eax
		mov	byte ptr [eax+14h], 0
		call	sub_6B199C0F
		mov	eax, [esi]

loc_6B199F16:				; CODE XREF: sub_6B199CDB+223j
		mov	cl, [esi+14h]
		mov	[eax+14h], cl
		mov	ecx, [ebp+var_10]
		mov	byte ptr [esi+14h], 1
		mov	eax, [eax]
		push	esi
		mov	byte ptr [eax+14h], 1
		call	sub_6B199B63

loc_6B199F2F:				; CODE XREF: sub_6B199CDB+15Ej
					; sub_6B199CDB+1D4j ...
		mov	byte ptr [edi+14h], 1

loc_6B199F33:				; CODE XREF: sub_6B199CDB+14Fj
		push	ebx		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx
		mov	ecx, [ebp+var_10]
		mov	eax, [ecx+8]
		test	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		jbe	short loc_6B199F4B
		dec	eax
		mov	[ecx+8], eax

loc_6B199F4B:				; CODE XREF: sub_6B199CDB+26Aj
		mov	ecx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		leave
		retn	8
sub_6B199CDB	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B199F61	proc near		; CODE XREF: sub_6B199FC1+18p
					; Ordinal1235+22p
		push	esi
		push	edi
		mov	edi, ecx
		lea	esi, [edi+4]
		mov	eax, [esi]
		push	dword ptr [eax+4] ; void *
		call	sub_6B199C7A
		mov	eax, [esi]
		mov	[eax+4], eax
		mov	eax, [esi]
		and	dword ptr [edi+8], 0
		mov	[eax], eax
		mov	esi, [esi]
		pop	edi
		mov	[esi+8], esi
		pop	esi
		retn
sub_6B199F61	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B199F87	proc near		; CODE XREF: Ordinal1234+2Dp
					; Ordinal1236+3Ep ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		push	edi
		mov	edi, [ebp+arg_4]
		push	edi
		mov	esi, ecx
		call	sub_6B199C51
		mov	esi, [esi+4]
		cmp	eax, esi
		mov	[ebp+arg_4], eax
		jz	short loc_6B199FAE
		mov	ecx, [edi]
		cmp	ecx, [eax+0Ch]
		jb	short loc_6B199FAE
		lea	eax, [ebp+arg_4]
		jmp	short loc_6B199FB4
; ---------------------------------------------------------------------------

loc_6B199FAE:				; CODE XREF: sub_6B199F87+19j
					; sub_6B199F87+20j
		mov	[ebp+var_4], esi
		lea	eax, [ebp+var_4]

loc_6B199FB4:				; CODE XREF: sub_6B199F87+25j
		mov	ecx, [eax]
		mov	eax, [ebp+arg_0]
		pop	edi
		mov	[eax], ecx
		pop	esi
		leave
		retn	8
sub_6B199F87	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6B199FC1(int, void *, int)
sub_6B199FC1	proc near		; CODE XREF: sub_6B19A2A9+12p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [eax]
		jnz	short loc_6B199FE5
		cmp	[ebp+arg_8], eax
		jnz	short loc_6B199FE5
		mov	ecx, esi
		call	sub_6B199F61
		mov	eax, [esi+4]
		mov	ecx, [eax]
		jmp	short loc_6B19A00A
; ---------------------------------------------------------------------------

loc_6B199FE5:				; CODE XREF: sub_6B199FC1+Fj
					; sub_6B199FC1+14j
		cmp	ecx, [ebp+arg_8]
		jz	short loc_6B19A00A
		push	edi

loc_6B199FEB:				; CODE XREF: sub_6B199FC1+46j
		mov	edi, ecx
		lea	ecx, [ebp+arg_4]
		call	sub_6B199BA7
		push	edi		; void *
		lea	eax, [ebp+var_4]
		push	eax		; int
		mov	ecx, esi
		call	sub_6B199CDB
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [ebp+arg_8]
		jnz	short loc_6B199FEB
		pop	edi

loc_6B19A00A:				; CODE XREF: sub_6B199FC1+22j
					; sub_6B199FC1+27j
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx
		pop	esi
		leave
		retn	0Ch
sub_6B199FC1	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19A014	proc near		; CODE XREF: Ordinal136+20p
					; sub_6B19A471+3p
		push	esi
		mov	esi, ecx
		call	sub_6B1817DD
		lea	ecx, [esi+4]
		mov	[ecx], eax
		mov	byte ptr [eax+15h], 1
		mov	eax, [ecx]
		mov	[eax+4], eax
		mov	eax, [ecx]
		mov	[eax], eax
		mov	ecx, [ecx]
		mov	[ecx+8], ecx
		and	dword ptr [esi+8], 0
		pop	esi
		retn
sub_6B19A014	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B19A039	proc near		; CODE XREF: sub_6B19A2D4+71p
					; sub_6B19A365+19p ...

var_50		= dword	ptr -50h
var_28		= byte ptr -28h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	eax, offset unknown_libname_96 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		cmp	dword ptr [edi+8], 1FFFFFFEh
		jb	short loc_6B19A087
		push	offset aMapSetTTooLong ; "map/set<T> too long"
		lea	ecx, [ebp+var_28]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_28]
		push	eax
		lea	ecx, [ebp+var_50]
		call	sub_6B181357
		push	offset dword_6B1BA9E8
		lea	eax, [ebp+var_50]
		push	eax
		mov	[ebp+var_50], offset off_6B1AA914
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B19A087:				; CODE XREF: sub_6B19A039+19j
		mov	eax, [edi+4]
		mov	esi, [ebp+arg_8]
		push	0
		push	[ebp+arg_C]
		mov	ecx, edi
		push	eax
		push	esi
		push	eax
		call	sub_6B199CAC
		inc	dword ptr [edi+8]
		mov	ebx, eax
		mov	eax, [edi+4]
		cmp	esi, eax
		jnz	short loc_6B19A0B5
		mov	[eax+4], ebx
		mov	eax, [edi+4]
		mov	[eax], ebx
		mov	eax, [edi+4]
		jmp	short loc_6B19A0D3
; ---------------------------------------------------------------------------

loc_6B19A0B5:				; CODE XREF: sub_6B19A039+6Dj
		cmp	[ebp+arg_4], 0
		jz	short loc_6B19A0C8
		mov	[esi], ebx
		mov	eax, [edi+4]
		cmp	esi, [eax]
		jnz	short loc_6B19A0D6
		mov	[eax], ebx
		jmp	short loc_6B19A0D6
; ---------------------------------------------------------------------------

loc_6B19A0C8:				; CODE XREF: sub_6B19A039+80j
		mov	[esi+8], ebx
		mov	eax, [edi+4]
		cmp	esi, [eax+8]
		jnz	short loc_6B19A0D6

loc_6B19A0D3:				; CODE XREF: sub_6B19A039+7Aj
		mov	[eax+8], ebx

loc_6B19A0D6:				; CODE XREF: sub_6B19A039+89j
					; sub_6B19A039+8Dj ...
		mov	esi, ebx
		lea	eax, [ebx+4]
		jmp	loc_6B19A175
; ---------------------------------------------------------------------------

loc_6B19A0E0:				; CODE XREF: sub_6B19A039+142j
		mov	ecx, [eax]
		mov	edx, [ecx+4]
		mov	edx, [edx]
		cmp	ecx, edx
		jnz	short loc_6B19A140
		mov	edx, [ecx+4]
		mov	edx, [edx+8]
		cmp	byte ptr [edx+14h], 0
		jnz	short loc_6B19A111

loc_6B19A0F7:				; CODE XREF: sub_6B19A039+10Bj
		mov	ecx, [eax]
		mov	byte ptr [ecx+14h], 1
		mov	byte ptr [edx+14h], 1
		mov	ecx, [eax]
		mov	ecx, [ecx+4]
		mov	byte ptr [ecx+14h], 0
		mov	eax, [eax]
		mov	esi, [eax+4]
		jmp	short loc_6B19A172
; ---------------------------------------------------------------------------

loc_6B19A111:				; CODE XREF: sub_6B19A039+BCj
		cmp	esi, [ecx+8]
		jnz	short loc_6B19A120
		mov	esi, ecx
		push	esi
		mov	ecx, edi
		call	sub_6B199C0F

loc_6B19A120:				; CODE XREF: sub_6B19A039+DBj
		mov	eax, [esi+4]
		mov	byte ptr [eax+14h], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+14h], 0
		mov	eax, [esi+4]
		push	dword ptr [eax+4]
		mov	ecx, edi
		call	sub_6B199B63
		jmp	short loc_6B19A172
; ---------------------------------------------------------------------------

loc_6B19A140:				; CODE XREF: sub_6B19A039+B0j
		cmp	byte ptr [edx+14h], 0
		jz	short loc_6B19A0F7
		cmp	esi, [ecx]
		jnz	short loc_6B19A154
		mov	esi, ecx
		push	esi
		mov	ecx, edi
		call	sub_6B199B63

loc_6B19A154:				; CODE XREF: sub_6B19A039+10Fj
		mov	eax, [esi+4]
		mov	byte ptr [eax+14h], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+14h], 0
		mov	eax, [esi+4]
		push	dword ptr [eax+4]
		mov	ecx, edi
		call	sub_6B199C0F

loc_6B19A172:				; CODE XREF: sub_6B19A039+D6j
					; sub_6B19A039+105j
		lea	eax, [esi+4]

loc_6B19A175:				; CODE XREF: sub_6B19A039+A2j
		mov	ecx, [eax]
		cmp	byte ptr [ecx+14h], 0
		jz	loc_6B19A0E0
		mov	eax, [edi+4]
		mov	eax, [eax+4]
		mov	ecx, [ebp+var_C]
		mov	byte ptr [eax+14h], 1
		mov	eax, [ebp+arg_0]
		pop	edi
		mov	[eax], ebx
		pop	esi
		pop	ebx
		mov	large fs:0, ecx
		leave
		retn	10h
sub_6B19A039	endp

; Exported entry 1234.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1234
Ordinal1234	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		push	edi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+0BCh]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		lea	eax, [ebp+arg_0]
		push	eax
		lea	eax, [ebp+var_4]
		lea	edi, [esi+0B0h]
		push	eax
		mov	ecx, edi
		call	sub_6B199F87
		mov	eax, [ebp+var_4]
		cmp	eax, [esi+0B4h]
		jnz	short loc_6B19A1ED
		push	offset aCmulticonsoleA ; "CMultiConsole::Add() : pos ==	m_Console"...
		call	sub_6B18102E
		pop	ecx
		xor	esi, esi
		jmp	short loc_6B19A1FC
; ---------------------------------------------------------------------------

loc_6B19A1ED:				; CODE XREF: Ordinal1234+3Bj
		push	eax		; void *
		lea	eax, [ebp+arg_0]
		push	eax		; int
		mov	ecx, edi
		call	sub_6B199CDB
		xor	esi, esi
		inc	esi

loc_6B19A1FC:				; CODE XREF: Ordinal1234+4Aj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	edi
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal1234	endp

; Exported entry 1235.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1235
Ordinal1235	proc near		; CODE XREF: Ordinal1232+9p
					; Ordinal1420+95p
					; DATA XREF: ...

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+0BCh]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	ecx, [esi+0B0h]
		call	sub_6B199F61
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	ecx, esi
		call	Ordinal817
		pop	esi
		leave
		retn
Ordinal1235	endp

; Exported entry 1236.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1236
Ordinal1236	proc near		; DATA XREF: .rdata:6B1B5188o
					; .rdata:6B1B60B0o ...

var_10		= byte ptr -10h
var_4		= byte ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		push	edi
		mov	esi, ecx
		call	Ordinal824
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+0BCh]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		movzx	eax, word ptr [edi+6]
		or	eax, [edi+0Ch]
		lea	ecx, [esi+0B0h]
		mov	[ebp+arg_0], eax
		lea	eax, [ebp+arg_0]
		push	eax
		lea	eax, [ebp+var_4]
		push	eax
		call	sub_6B199F87
		mov	eax, [eax]
		cmp	eax, [esi+0B4h]
		jz	short loc_6B19A29B
		mov	ecx, [eax+10h]
		push	esi
		call	Ordinal854

loc_6B19A29B:				; CODE XREF: Ordinal1236+4Bj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		pop	edi
		pop	esi
		leave
		retn	4
Ordinal1236	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19A2A9	proc near		; CODE XREF: sub_6B19A440j

var_4		= dword	ptr -4

		push	ecx
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		mov	ecx, [eax]
		push	eax		; int
		push	ecx		; void *
		lea	eax, [esp+10h+var_4]
		push	eax		; int
		mov	ecx, esi
		call	sub_6B199FC1
		push	dword ptr [esi+4] ; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		and	dword ptr [esi+4], 0
		and	dword ptr [esi+8], 0
		pop	ecx
		pop	esi
		pop	ecx
		retn
sub_6B19A2A9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B19A2D4	proc near		; CODE XREF: sub_6B19A365+C8p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		mov	ebx, [ebp+arg_4]
		push	esi
		mov	esi, ecx
		mov	ecx, [esi+4]
		mov	eax, [ecx+4]
		cmp	byte ptr [eax+15h], 0
		push	edi
		mov	edi, ecx
		mov	byte ptr [ebp+var_4], 1
		jnz	short loc_6B19A310
		mov	ecx, [ebx]

loc_6B19A2F4:				; CODE XREF: sub_6B19A2D4+3Aj
		cmp	ecx, [eax+0Ch]
		mov	edi, eax
		setb	byte ptr [ebp+var_4]
		cmp	byte ptr [ebp+var_4], 0
		jz	short loc_6B19A307
		mov	eax, [eax]
		jmp	short loc_6B19A30A
; ---------------------------------------------------------------------------

loc_6B19A307:				; CODE XREF: sub_6B19A2D4+2Dj
		mov	eax, [eax+8]

loc_6B19A30A:				; CODE XREF: sub_6B19A2D4+31j
		cmp	byte ptr [eax+15h], 0
		jz	short loc_6B19A2F4

loc_6B19A310:				; CODE XREF: sub_6B19A2D4+1Cj
		cmp	byte ptr [ebp+var_4], 0
		mov	ecx, edi
		mov	[ebp+arg_4], ecx
		jz	short loc_6B19A333
		mov	eax, [esi+4]
		cmp	edi, [eax]
		jnz	short loc_6B19A328
		push	ebx
		push	edi
		push	1
		jmp	short loc_6B19A33F
; ---------------------------------------------------------------------------

loc_6B19A328:				; CODE XREF: sub_6B19A2D4+4Cj
		lea	ecx, [ebp+arg_4]
		call	sub_6B1815FE
		mov	ecx, [ebp+arg_4]

loc_6B19A333:				; CODE XREF: sub_6B19A2D4+45j
		mov	eax, [ecx+0Ch]
		cmp	eax, [ebx]
		jnb	short loc_6B19A355
		push	ebx
		push	edi
		push	[ebp+var_4]

loc_6B19A33F:				; CODE XREF: sub_6B19A2D4+52j
		lea	eax, [ebp+arg_4]
		push	eax
		mov	ecx, esi
		call	sub_6B19A039
		mov	ecx, [eax]
		mov	eax, [ebp+arg_0]
		mov	byte ptr [eax+4], 1
		jmp	short loc_6B19A35C
; ---------------------------------------------------------------------------

loc_6B19A355:				; CODE XREF: sub_6B19A2D4+64j
		mov	eax, [ebp+arg_0]
		mov	byte ptr [eax+4], 0

loc_6B19A35C:				; CODE XREF: sub_6B19A2D4+7Fj
		pop	edi
		pop	esi
		mov	[eax], ecx
		pop	ebx
		leave
		retn	8
sub_6B19A2D4	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B19A365	proc near		; CODE XREF: sub_6B19A47D+32p

var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		mov	ebx, ecx
		cmp	dword ptr [ebx+8], 0
		jnz	short loc_6B19A38B
		push	[ebp+arg_8]
		push	dword ptr [ebx+4]
		push	1
		push	[ebp+arg_0]
		call	sub_6B19A039
		mov	eax, [ebp+arg_0]
		jmp	loc_6B19A43B
; ---------------------------------------------------------------------------

loc_6B19A38B:				; CODE XREF: sub_6B19A365+Cj
		mov	eax, [ebx+4]
		push	esi
		mov	esi, [ebp+arg_4]
		cmp	esi, [eax]
		push	edi
		mov	edi, [ebp+arg_8]
		jnz	short loc_6B19A3A9
		mov	eax, [edi]
		cmp	eax, [esi+0Ch]
		jnb	loc_6B19A426
		push	edi

loc_6B19A3A6:				; CODE XREF: sub_6B19A365+7Cj
		push	esi
		jmp	short loc_6B19A415
; ---------------------------------------------------------------------------

loc_6B19A3A9:				; CODE XREF: sub_6B19A365+33j
		cmp	esi, eax
		jnz	short loc_6B19A3BD
		mov	eax, [eax+8]
		mov	ecx, [eax+0Ch]
		cmp	ecx, [edi]
		jnb	short loc_6B19A426
		push	edi
		push	eax

loc_6B19A3B9:				; CODE XREF: sub_6B19A365+7Fj
					; sub_6B19A365+ADj
		push	0
		jmp	short loc_6B19A417
; ---------------------------------------------------------------------------

loc_6B19A3BD:				; CODE XREF: sub_6B19A365+46j
		mov	eax, [edi]
		cmp	eax, [esi+0Ch]
		jnb	short loc_6B19A3E6
		lea	ecx, [ebp+arg_8]
		mov	[ebp+arg_8], esi
		call	sub_6B1815FE
		mov	ecx, [ebp+arg_8]
		mov	eax, [edi]
		cmp	[ecx+0Ch], eax
		jnb	short loc_6B19A3E6
		mov	eax, [ecx+8]
		cmp	byte ptr [eax+15h], 0
		push	edi
		jz	short loc_6B19A3A6
		push	ecx
		jmp	short loc_6B19A3B9
; ---------------------------------------------------------------------------

loc_6B19A3E6:				; CODE XREF: sub_6B19A365+5Dj
					; sub_6B19A365+72j
		mov	eax, [edi]
		cmp	[esi+0Ch], eax
		jnb	short loc_6B19A426
		lea	ecx, [ebp+arg_8]
		mov	[ebp+arg_8], esi
		call	sub_6B199BA7
		mov	ecx, [ebp+arg_8]
		cmp	ecx, [ebx+4]
		jz	short loc_6B19A407
		mov	eax, [edi]
		cmp	eax, [ecx+0Ch]
		jnb	short loc_6B19A426

loc_6B19A407:				; CODE XREF: sub_6B19A365+99j
		mov	eax, [esi+8]
		cmp	byte ptr [eax+15h], 0
		push	edi
		jz	short loc_6B19A414
		push	esi
		jmp	short loc_6B19A3B9
; ---------------------------------------------------------------------------

loc_6B19A414:				; CODE XREF: sub_6B19A365+AAj
		push	ecx

loc_6B19A415:				; CODE XREF: sub_6B19A365+42j
		push	1

loc_6B19A417:				; CODE XREF: sub_6B19A365+56j
		push	[ebp+arg_0]
		mov	ecx, ebx
		call	sub_6B19A039
		mov	eax, [ebp+arg_0]
		jmp	short loc_6B19A439
; ---------------------------------------------------------------------------

loc_6B19A426:				; CODE XREF: sub_6B19A365+3Aj
					; sub_6B19A365+50j ...
		push	edi
		lea	eax, [ebp+var_8]
		push	eax
		mov	ecx, ebx
		call	sub_6B19A2D4
		mov	ecx, [eax]
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx

loc_6B19A439:				; CODE XREF: sub_6B19A365+BFj
		pop	edi
		pop	esi

loc_6B19A43B:				; CODE XREF: sub_6B19A365+21j
		pop	ebx
		leave
		retn	0Ch
sub_6B19A365	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

sub_6B19A440	proc near		; CODE XREF: Ordinal1232+1Fp
		jmp	sub_6B19A2A9
sub_6B19A440	endp

; Exported entry 1232.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1232
Ordinal1232	proc near		; CODE XREF: sub_6B19A4E7+3p
					; Ordinal1382+6j
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1B5170
		call	Ordinal1235
		lea	ecx, [esi+0BCh]
		call	Ordinal1616
		lea	ecx, [esi+0B0h]
		call	sub_6B19A440
		mov	ecx, esi
		pop	esi
		jmp	Ordinal813
Ordinal1232	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19A471	proc near		; CODE XREF: Ordinal1231+14p
		push	esi
		mov	esi, ecx
		call	sub_6B19A014
		mov	eax, esi
		pop	esi
		retn
sub_6B19A471	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B19A47D	proc near		; CODE XREF: Ordinal1233+7Ap

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		push	esi
		mov	edi, ecx
		call	sub_6B199C51
		cmp	eax, [edi+4]
		jz	short loc_6B19A49B
		mov	ecx, [esi]
		cmp	ecx, [eax+0Ch]
		jnb	short loc_6B19A4B6

loc_6B19A49B:				; CODE XREF: sub_6B19A47D+15j
		mov	ecx, [esi]
		and	[ebp+var_4], 0
		mov	[ebp+var_8], ecx
		lea	ecx, [ebp+var_8]
		push	ecx
		push	eax
		lea	eax, [ebp+arg_0]
		push	eax
		mov	ecx, edi
		call	sub_6B19A365
		mov	eax, [eax]

loc_6B19A4B6:				; CODE XREF: sub_6B19A47D+1Cj
		pop	edi
		add	eax, 10h
		pop	esi
		leave
		retn	4
sub_6B19A47D	endp

; Exported entry 1231.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1231
Ordinal1231	proc near		; CODE XREF: Ordinal1381+3p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	Ordinal812
		lea	ecx, [esi+0B0h]
		mov	dword ptr [esi], offset	off_6B1B5170
		call	sub_6B19A471
		lea	ecx, [esi+0BCh]
		call	Ordinal1615
		mov	eax, esi
		pop	esi
		retn
Ordinal1231	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B19A4E7(void *, char)
sub_6B19A4E7	proc near		; DATA XREF: .rdata:off_6B1B5170o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1232
		test	[esp+4+arg_0], 1
		jz	short loc_6B19A4FD
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B19A4FD:				; CODE XREF: sub_6B19A4E7+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B19A4E7	endp

; Exported entry 1233.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1233
Ordinal1233	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_58		= byte ptr -58h
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= byte ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_97 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 4Ch
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		mov	esi, ecx
		push	0
		mov	[ebp+var_14], eax
		push	0FFFFFFFFh
		lea	eax, [esi+0BCh]
		push	eax
		lea	ecx, [ebp+var_58]
		call	Ordinal1571
		and	[ebp+var_4], 0
		lea	eax, [ebp+arg_0]
		push	eax
		lea	eax, [ebp+var_28]
		lea	edi, [esi+0B0h]
		push	eax
		mov	ecx, edi
		call	sub_6B199F87
		mov	esi, [esi+0B4h]
		cmp	[ebp+var_28], esi
		jz	short loc_6B19A566
		push	offset aCmulticonsol_0 ; "CMultiConsole::Add() : pos !=	m_Console"...
		call	sub_6B18102E
		pop	ecx
		xor	esi, esi
		jmp	short loc_6B19A59E
; ---------------------------------------------------------------------------

loc_6B19A566:				; CODE XREF: Ordinal1233+52j
		push	offset aCmulticonsol_1 ; "CMultiConsole::Add()"
		lea	ecx, [ebp+var_48]
		call	Ordinal1089
		lea	eax, [ebp+arg_0]
		push	eax
		mov	ecx, edi
		mov	byte ptr [ebp+var_4], 2
		call	sub_6B19A47D
		mov	ecx, [ebp+arg_4]
		mov	[eax], ecx

loc_6B19A587:				; DATA XREF: sub_6B19A5C1+3Do
					; sub_6B19A604+4Fo
		lea	ecx, [ebp+var_48]
		call	Ordinal1635
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		lea	ecx, [ebp+var_48]
		inc	esi
		call	Ordinal1090

loc_6B19A59E:				; CODE XREF: Ordinal1233+61j
		lea	ecx, [ebp+var_58]
		call	Ordinal1573
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal1233	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19A5C1	proc near		; DATA XREF: .rdata:6B1BC640o
		push	13h
		lea	ecx, [ebp-48h]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-48h]
		call	Ordinal1101
		mov	ecx, [ebp-28h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-48h]
		call	Ordinal1103
		lea	ecx, [ebp-48h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B19A587
		retn
sub_6B19A5C1	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19A604	proc near		; DATA XREF: .rdata:6B1BC650o
		push	15h
		lea	ecx, [ebp-48h]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-48h]
		call	Ordinal1101
		mov	eax, [ebp-4Ch]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-48h]
		call	Ordinal1103
		lea	ecx, [ebp-48h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B19A587
		retn
sub_6B19A604	endp

; Exported entry 1237.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1237
Ordinal1237	proc near		; CODE XREF: Ordinal891+3p
					; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, ecx
		xor	ecx, ecx
		mov	dword ptr [eax], offset	off_6B1B5200
		mov	[eax+4], ecx
		mov	[eax+8], ecx
		mov	[eax+0Ch], ecx
		mov	[eax+10h], ecx
		mov	dword_6B1C1268,	eax
		retn
Ordinal1237	endp

; Exported entry 1240.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1240
Ordinal1240	proc near		; CODE XREF: Ordinal906+1Bp
					; Ordinal1238+6p ...
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+10h], 0
		jz	short loc_6B19A69A
		push	dword ptr [esi+4]
		call	ds:?_set_new_handler@@YAP6AHI@ZP6AHI@Z@Z ; _set_new_handler(int	(*)(uint))
		push	dword ptr [esi+8]
		and	dword ptr [esi+4], 0
		call	ds:?_set_new_mode@@YAHH@Z ; _set_new_mode(int)
		and	dword ptr [esi+8], 0
		pop	ecx
		pop	ecx

loc_6B19A69A:				; CODE XREF: Ordinal1240+7j
		and	dword ptr [esi+10h], 0
		pop	esi
		retn
Ordinal1240	endp

; Exported entry 1243.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1243
Ordinal1243	proc near		; CODE XREF: Ordinal913+1Ep
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+0Ch], eax
		retn	4
Ordinal1243	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19A6AA	proc near		; DATA XREF: Ordinal1239+8o

arg_0		= dword	ptr  4

		mov	ecx, dword_6B1C1268
		test	ecx, ecx
		jz	short loc_6B19A6BE
		push	[esp+arg_0]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		retn
; ---------------------------------------------------------------------------

loc_6B19A6BE:				; CODE XREF: sub_6B19A6AA+8j
		xor	eax, eax
		retn
sub_6B19A6AA	endp

; Exported entry 1238.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1238
Ordinal1238	proc near		; CODE XREF: Ordinal892+6j
					; sub_6B19A730+3p
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6B1B5200
		call	Ordinal1240
		and	dword_6B1C1268,	0
		retn
Ordinal1238	endp

; Exported entry 1239.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1239
Ordinal1239	proc near		; CODE XREF: Ordinal905+DAp
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	Ordinal1240
		push	offset sub_6B19A6AA
		call	ds:?_set_new_handler@@YAP6AHI@ZP6AHI@Z@Z ; _set_new_handler(int	(*)(uint))
		push	1
		mov	[esi+4], eax
		call	ds:?_set_new_mode@@YAHH@Z ; _set_new_mode(int)
		pop	ecx
		mov	[esi+8], eax
		pop	ecx
		xor	eax, eax
		mov	dword ptr [esi+10h], 1
		inc	eax
		pop	esi
		retn
Ordinal1239	endp

; Exported entry 1241.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1241
Ordinal1241	proc near		; CODE XREF: Ordinal893+25p
					; DATA XREF: .rdata:6B1B5204o ...

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		cmp	dword ptr [ecx+0Ch], 0
		jz	short loc_6B19A72A
		push	offset aBadAllocation ;	"bad allocation"
		lea	ecx, [ebp+var_C]
		call	sub_6B183341
		push	offset dword_6B1BAC3C
		lea	eax, [ebp+var_C]
		push	eax
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B19A72A:				; CODE XREF: Ordinal1241+Aj
		xor	eax, eax
		leave
		retn	4
Ordinal1241	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B19A730(void *, char)
sub_6B19A730	proc near		; DATA XREF: .rdata:off_6B1B5200o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1238
		test	[esp+4+arg_0], 1
		jz	short loc_6B19A746
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B19A746:				; CODE XREF: sub_6B19A730+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B19A730	endp

; Exported entry 1245.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1245
Ordinal1245	proc near		; CODE XREF: Ordinal1393+11Dp
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		push	edi
		mov	esi, ecx
		and	dword ptr [esi+10h], 0
		and	dword ptr [esi+28h], 0
		push	0Ch		; Size
		lea	edi, [esi+4]
		push	0		; Val
		push	edi		; Dst
		mov	dword ptr [esi], offset	off_6B1B5208
		call	memset
		push	14h		; Size
		lea	eax, [esi+14h]
		push	0		; Val
		push	eax		; Dst
		mov	dword ptr [edi], 0Ch
		call	memset
		add	esp, 18h
		pop	edi
		mov	eax, esi
		pop	esi
		retn
Ordinal1245	endp

; Exported entry 1249.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1249
Ordinal1249	proc near		; CODE XREF: Ordinal1393+12Cp
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+10h], 0
		and	dword ptr [esi+28h], 0
		call	Ordinal1261
		test	al, al
		jz	short loc_6B19A79F
		xor	eax, eax
		inc	eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6B19A79F:				; CODE XREF: Ordinal1249+12j
		push	ebx
		push	ebp
		push	edi
		xor	ebp, ebp
		inc	ebp
		lea	edi, [esi+14h]
		push	ebp		; dwRevision
		lea	ebx, [esi+4]
		push	edi		; pSecurityDescriptor
		mov	dword ptr [ebx], 0Ch
		mov	[esi+0Ch], ebp
		mov	[esi+8], edi
		call	InitializeSecurityDescriptor
		test	eax, eax
		jz	short loc_6B19A7DD
		push	0		; bDaclDefaulted
		push	0		; pDacl
		push	ebp		; bDaclPresent
		push	edi		; pSecurityDescriptor
		call	SetSecurityDescriptorDacl
		test	eax, eax
		jz	short loc_6B19A7DD
		mov	[esi+10h], ebx
		mov	[esi+28h], edi
		mov	eax, ebp
		jmp	short loc_6B19A7F2
; ---------------------------------------------------------------------------

loc_6B19A7DD:				; CODE XREF: Ordinal1249+3Bj
					; Ordinal1249+4Bj
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCnulldaclCreat ; "CNullDacl::Create() :	InitializeSecurit"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax

loc_6B19A7F2:				; CODE XREF: Ordinal1249+55j
		pop	edi
		pop	ebp
		pop	ebx
		pop	esi
		retn
Ordinal1249	endp

; Exported entry 1250.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1250
Ordinal1250	proc near		; CODE XREF: Ordinal1246+6j
					; sub_6B19A834+9p
					; DATA XREF: ...
		push	esi
		push	edi
		mov	esi, ecx
		and	dword ptr [esi+28h], 0
		and	dword ptr [esi+10h], 0
		push	0Ch		; Size
		lea	edi, [esi+4]
		push	0		; Val
		push	edi		; Dst
		call	memset
		push	14h		; Size
		push	0		; Val
		add	esi, 14h
		push	esi		; Dst
		mov	dword ptr [edi], 0Ch
		call	memset
		add	esp, 18h
		pop	edi
		pop	esi
		retn
Ordinal1250	endp

; Exported entry 1246.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1246
Ordinal1246	proc near		; CODE XREF: Ordinal1393+61Ep
					; sub_6B1A9781+6j
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6B1B5208
		jmp	Ordinal1250
Ordinal1246	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B19A834(void *, char)
sub_6B19A834	proc near		; DATA XREF: .rdata:off_6B1B5208o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1B5208
		call	Ordinal1250
		test	[esp+4+arg_0], 1
		jz	short loc_6B19A850
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B19A850:				; CODE XREF: sub_6B19A834+13j
		mov	eax, esi
		pop	esi
		retn	4
sub_6B19A834	endp

; Exported entry 1252.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1252
Ordinal1252	proc near		; CODE XREF: sub_6B19A8B6+3p
					; Ordinal1392+25p
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6B1B5258
		jmp	Ordinal1221
Ordinal1252	endp

; Exported entry 1256.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1256
Ordinal1256	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= byte ptr  4

		cmp	[esp+arg_0], 0
		push	esi
		mov	esi, ecx
		jz	short loc_6B19A874
		call	Ordinal1230
		test	al, al
		jz	short loc_6B19A89C

loc_6B19A874:				; CODE XREF: Ordinal1256+8j
		cmp	[esp+4+arg_0], 0
		push	ebx
		mov	bl, 1
		jnz	short loc_6B19A884
		and	dword ptr [esi+8], 0
		jmp	short loc_6B19A899
; ---------------------------------------------------------------------------

loc_6B19A884:				; CODE XREF: Ordinal1256+1Bj
		push	offset aCofreeunusedli ; "CoFreeUnusedLibrariesEx"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6B19A899
		xor	bl, bl

loc_6B19A899:				; CODE XREF: Ordinal1256+21j
					; Ordinal1256+34j
		mov	al, bl
		pop	ebx

loc_6B19A89C:				; CODE XREF: Ordinal1256+11j
		pop	esi
		retn	4
Ordinal1256	endp

; Exported entry 1251.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1251
Ordinal1251	proc near		; CODE XREF: Ordinal1391+92p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	Ordinal1219
		and	dword ptr [esi+8], 0
		mov	dword ptr [esi], offset	off_6B1B5258
		mov	eax, esi
		pop	esi
		retn
Ordinal1251	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B19A8B6(void *, char)
sub_6B19A8B6	proc near		; DATA XREF: .rdata:off_6B1B5258o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1252
		test	[esp+4+arg_0], 1
		jz	short loc_6B19A8CC
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B19A8CC:				; CODE XREF: sub_6B19A8B6+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B19A8B6	endp

; Exported entry 1253.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1253(LPCSTR Args)
		public Ordinal1253
Ordinal1253	proc near		; CODE XREF: Ordinal1257+13p
					; DATA XREF: .rdata:off_6B1BF428o

Args		= dword	ptr  4

		push	esi
		push	[esp+4+Args]	; Args
		mov	esi, ecx
		call	Ordinal1226
		test	al, al
		jz	short loc_6B19A8ED
		mov	ecx, esi
		call	Ordinal1230
		test	al, al
		jnz	short loc_6B19A8F1

loc_6B19A8ED:				; CODE XREF: Ordinal1253+Ej
		xor	al, al
		jmp	short loc_6B19A90C
; ---------------------------------------------------------------------------

loc_6B19A8F1:				; CODE XREF: Ordinal1253+19j
		push	ebx
		push	offset aCofreeunusedli ; "CoFreeUnusedLibrariesEx"
		mov	ecx, esi
		mov	bl, 1
		call	Ordinal1229
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6B19A909
		xor	bl, bl

loc_6B19A909:				; CODE XREF: Ordinal1253+33j
		mov	al, bl
		pop	ebx

loc_6B19A90C:				; CODE XREF: Ordinal1253+1Dj
		pop	esi
		retn	4
Ordinal1253	endp

; Exported entry 1254.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1254(LPCSTR Args, DWORD dwFlags)
		public Ordinal1254
Ordinal1254	proc near		; DATA XREF: .rdata:off_6B1BF428o

Args		= dword	ptr  4
dwFlags		= dword	ptr  8

		push	esi
		push	[esp+4+dwFlags]	; dwFlags
		mov	esi, ecx
		push	[esp+8+Args]	; Args
		call	Ordinal1227
		test	al, al
		jz	short loc_6B19A92F
		mov	ecx, esi
		call	Ordinal1230
		test	al, al
		jnz	short loc_6B19A933

loc_6B19A92F:				; CODE XREF: Ordinal1254+12j
		xor	al, al
		jmp	short loc_6B19A94E
; ---------------------------------------------------------------------------

loc_6B19A933:				; CODE XREF: Ordinal1254+1Dj
		push	ebx
		push	offset aCofreeunusedli ; "CoFreeUnusedLibrariesEx"
		mov	ecx, esi
		mov	bl, 1
		call	Ordinal1229
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6B19A94B
		xor	bl, bl

loc_6B19A94B:				; CODE XREF: Ordinal1254+37j
		mov	al, bl
		pop	ebx

loc_6B19A94E:				; CODE XREF: Ordinal1254+21j
		pop	esi
		retn	8
Ordinal1254	endp

; Exported entry 1257.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1257
Ordinal1257	proc near		; CODE XREF: Ordinal1393+65p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+8], 0
		call	Ordinal1228
		push	offset aOle32_dll_0 ; "OLE32.DLL"
		mov	ecx, esi
		call	Ordinal1253
		test	al, al
		jnz	short loc_6B19A99A
		cmp	dword ptr [esi+8], 0
		jnz	short loc_6B19A99A
		push	1
		call	Ordinal1273
		test	al, al
		pop	ecx
		jz	short loc_6B19A99A
		push	offset aColeCreateLoad ; "COLE::Create() : Load() == FALSE\n"
		call	sub_6B18102E
		and	dword ptr [esi+8], 0
		pop	ecx
		mov	ecx, esi
		call	Ordinal1228
		xor	al, al
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6B19A99A:				; CODE XREF: Ordinal1257+1Aj
					; Ordinal1257+20j ...
		mov	al, 1
		pop	esi
		retn
Ordinal1257	endp

; Exported entry 1259.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1259
Ordinal1259	proc near		; CODE XREF: Ordinal1359+1Dp
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+4], 0
		lea	ecx, [esi+8]
		mov	dword ptr [esi], offset	off_6B1B52A4
		call	Ordinal1899
		mov	eax, esi
		pop	esi
		retn
Ordinal1259	endp

; Exported entry 1260.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1260
Ordinal1260	proc near		; CODE XREF: sub_6B19AA42+3p
					; Ordinal1360+23p
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6B1B52A4
		add	ecx, 8
		jmp	Ordinal1900
Ordinal1260	endp

; Exported entry 1278.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1278
Ordinal1278	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	1000h		; nIndex
		call	ds:GetSystemMetrics
		neg	eax
		sbb	eax, eax
		neg	eax
		retn
Ordinal1278	endp

; Exported entry 1282.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1282
Ordinal1282	proc near		; CODE XREF: Ordinal1261p Ordinal1268p ...
		cmp	byte_6B1C132A, 0
		jnz	short loc_6B19AA3F
		push	esi
		push	94h		; Size
		push	0		; Val
		mov	esi, offset VersionInformation
		push	esi		; Dst
		call	memset
		add	esp, 0Ch
		push	esi		; lpVersionInformation
		mov	VersionInformation.dwOSVersionInfoSize,	94h
		call	ds:GetVersionExA
		test	eax, eax
		jnz	short loc_6B19AA1E
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCosinfoInitial ; "COSInfo::InitializeOSInfo() :	GetVersio"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx

loc_6B19AA1E:				; CODE XREF: Ordinal1282+32j
		push	24h		; Size
		push	0		; Val
		mov	esi, offset SystemInfo
		push	esi		; Dst
		call	memset
		add	esp, 0Ch
		push	esi		; lpSystemInfo
		call	ds:GetSystemInfo
		mov	byte_6B1C132A, 1
		pop	esi

loc_6B19AA3F:				; CODE XREF: Ordinal1282+7j
		mov	al, 1
		retn
Ordinal1282	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B19AA42(void *, char)
sub_6B19AA42	proc near		; DATA XREF: .rdata:off_6B1B52A4o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1260
		test	[esp+4+arg_0], 1
		jz	short loc_6B19AA58
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B19AA58:				; CODE XREF: sub_6B19AA42+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B19AA42	endp

; Exported entry 1261.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1261
Ordinal1261	proc near		; CODE XREF: Ordinal605+1Ap
					; Ordinal1185+20p ...
		call	Ordinal1282
		cmp	VersionInformation.dwPlatformId, 1
		setz	al
		retn
Ordinal1261	endp

; Exported entry 1268.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1268
Ordinal1268	proc near		; CODE XREF: Ordinal969+2Ep
					; Ordinal1267+3Ap
					; DATA XREF: ...

arg_0		= byte ptr  4

		call	Ordinal1282
		call	Ordinal1261
		test	al, al
		jz	short loc_6B19AAA4
		mov	eax, VersionInformation.dwMajorVersion
		cmp	eax, 4
		mov	ecx, VersionInformation.dwMinorVersion
		jnz	short loc_6B19AA91
		cmp	ecx, 5Ah
		jz	short loc_6B19AAA7

loc_6B19AA91:				; CODE XREF: Ordinal1268+1Cj
		cmp	[esp+arg_0], 0
		jz	short loc_6B19AAA4
		cmp	eax, 4
		ja	short loc_6B19AAA7
		jnz	short loc_6B19AAA4
		cmp	ecx, 5Ah
		ja	short loc_6B19AAA7

loc_6B19AAA4:				; CODE XREF: Ordinal1268+Cj
					; Ordinal1268+28j ...
		xor	al, al
		retn
; ---------------------------------------------------------------------------

loc_6B19AAA7:				; CODE XREF: Ordinal1268+21j
					; Ordinal1268+2Dj ...
		mov	al, 1
		retn
Ordinal1268	endp

; Exported entry 1269.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1269
Ordinal1269	proc near		; CODE XREF: Ordinal805+3p
					; Ordinal807+3p ...
		call	Ordinal1282
		cmp	VersionInformation.dwPlatformId, 2
		setz	al
		retn
Ordinal1269	endp

; Exported entry 1273.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1273
Ordinal1273	proc near		; CODE XREF: Ordinal816+13p
					; Ordinal1185+5Ep ...

arg_0		= byte ptr  4

		call	Ordinal1282
		call	Ordinal1269
		test	al, al
		jz	short loc_6B19AAF0
		mov	eax, VersionInformation.dwMajorVersion
		cmp	eax, 5
		mov	ecx, VersionInformation.dwMinorVersion
		jnz	short loc_6B19AADD
		cmp	ecx, 1
		jz	short loc_6B19AAF3

loc_6B19AADD:				; CODE XREF: Ordinal1273+1Cj
		cmp	[esp+arg_0], 0
		jz	short loc_6B19AAF0
		cmp	eax, 5
		ja	short loc_6B19AAF3
		jnz	short loc_6B19AAF0
		cmp	ecx, 1
		ja	short loc_6B19AAF3

loc_6B19AAF0:				; CODE XREF: Ordinal1273+Cj
					; Ordinal1273+28j ...
		xor	al, al
		retn
; ---------------------------------------------------------------------------

loc_6B19AAF3:				; CODE XREF: Ordinal1273+21j
					; Ordinal1273+2Dj ...
		mov	al, 1
		retn
Ordinal1273	endp

; Exported entry 1275.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1275
Ordinal1275	proc near		; DATA XREF: .rdata:off_6B1BF428o
		call	Ordinal1282
		mov	eax, offset VersionInformation
		retn
Ordinal1275	endp

; Exported entry 1276.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1276
Ordinal1276	proc near		; DATA XREF: .rdata:off_6B1BF428o
		call	Ordinal1282
		mov	eax, offset SystemInfo
		retn
Ordinal1276	endp

; Exported entry 1280.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1280
Ordinal1280	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_34		= byte ptr -34h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
Args		= dword	ptr -1Ch
pSid		= dword	ptr -18h
hObject		= dword	ptr -14h
var_D		= byte ptr -0Dh
pIdentifierAuthority= _SID_IDENTIFIER_AUTHORITY	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 34h
		mov	eax, ___security_cookie
		push	edi
		mov	edi, ecx
		mov	[ebp+var_4], eax
		mov	[ebp+var_20], edi
		call	Ordinal1269
		test	al, al
		jz	loc_6B19ACA9
		push	ebx
		xor	ebx, ebx
		or	[ebp+hObject], 0FFFFFFFFh
		lea	eax, [ebp+pSid]
		push	eax		; pSid
		push	ebx		; nSubAuthority7
		push	ebx		; nSubAuthority6
		push	ebx		; nSubAuthority5
		push	ebx		; nSubAuthority4
		push	ebx		; nSubAuthority3
		push	ebx		; nSubAuthority2
		push	ebx		; nSubAuthority1
		push	12h		; nSubAuthority0
		push	1		; nSubAuthorityCount
		lea	eax, [ebp+pIdentifierAuthority]
		push	eax		; pIdentifierAuthority
		mov	[ebp+var_D], bl
		mov	[ebp+pSid], ebx
		mov	[ebp+pIdentifierAuthority.Value], bl
		mov	[ebp+pIdentifierAuthority.Value+1], bl
		mov	[ebp+pIdentifierAuthority.Value+2], bl
		mov	[ebp+pIdentifierAuthority.Value+3], bl
		mov	[ebp+pIdentifierAuthority.Value+4], bl
		mov	[ebp+pIdentifierAuthority.Value+5], 5
		call	AllocateAndInitializeSid
		test	eax, eax
		jnz	short loc_6B19AB85
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCosinfoIssyste ; "COSInfo::IsSystem() :	AllocateAndInitia"...
		mov	[edi+4], eax
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		jmp	loc_6B19AC85
; ---------------------------------------------------------------------------

loc_6B19AB85:				; CODE XREF: Ordinal1280+5Cj
		push	esi
		lea	eax, [ebp+hObject]
		push	eax		; TokenHandle
		push	ebx		; OpenAsSelf
		push	8		; DesiredAccess
		call	ds:GetCurrentThread
		push	eax		; ThreadHandle
		call	OpenThreadToken
		test	eax, eax
		mov	esi, ds:GetLastError
		jnz	short loc_6B19ABDB
		call	esi ; GetLastError
		cmp	eax, 3F0h
		jnz	short loc_6B19ABC4
		lea	eax, [ebp+hObject]
		push	eax		; TokenHandle
		push	8		; DesiredAccess
		call	ds:GetCurrentProcess
		push	eax		; ProcessHandle
		call	OpenProcessToken
		test	eax, eax
		jnz	short loc_6B19ABDB

loc_6B19ABC4:				; CODE XREF: Ordinal1280+9Fj
		call	esi ; GetLastError
		push	eax		; Args
		mov	[edi+4], eax
		push	offset aCosinfoIssys_0 ; "COSInfo::IsSystem() :	OpenProcessToken("...

loc_6B19ABCF:				; CODE XREF: Ordinal1280+FEj
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		jmp	loc_6B19AC84
; ---------------------------------------------------------------------------

loc_6B19ABDB:				; CODE XREF: Ordinal1280+96j
					; Ordinal1280+B6j
		mov	edi, GetTokenInformation
		lea	eax, [ebp+Args]
		push	eax		; ReturnLength
		push	ebx		; TokenInformationLength
		push	ebx		; TokenInformation
		push	1		; TokenInformationClass
		push	[ebp+hObject]	; TokenHandle
		mov	[ebp+Args], ebx
		call	edi ; GetTokenInformation
		test	eax, eax
		jnz	short loc_6B19AC0C
		call	esi ; GetLastError
		cmp	eax, 7Ah
		jz	short loc_6B19AC0C
		call	esi ; GetLastError
		mov	ecx, [ebp+var_20]
		push	eax
		mov	[ecx+4], eax
		push	offset aCosinfoIssys_1 ; "COSInfo::IsSystem() :	GetTokenInformati"...
		jmp	short loc_6B19ABCF
; ---------------------------------------------------------------------------

loc_6B19AC0C:				; CODE XREF: Ordinal1280+E7j
					; Ordinal1280+EEj
		lea	ecx, [ebp+var_34]
		call	Ordinal1187
		push	[ebp+Args]	; Args
		lea	ecx, [ebp+var_34]
		call	Ordinal1196
		cmp	eax, ebx
		mov	[ebp+var_24], eax
		jnz	short loc_6B19AC3C
		mov	eax, [ebp+var_20]
		push	offset aCosinfoIssys_2 ; "COSInfo::IsSystem() :	GlobalAlloc() == "...
		mov	dword ptr [eax+4], 0Eh
		call	sub_6B18102E
		jmp	short loc_6B19AC63
; ---------------------------------------------------------------------------

loc_6B19AC3C:				; CODE XREF: Ordinal1280+118j
		lea	ecx, [ebp+Args]
		push	ecx		; ReturnLength
		push	[ebp+Args]	; TokenInformationLength
		push	eax		; TokenInformation
		push	1		; TokenInformationClass
		push	[ebp+hObject]	; TokenHandle
		call	edi ; GetTokenInformation
		test	eax, eax
		jnz	short loc_6B19AC66
		call	esi ; GetLastError
		mov	ecx, [ebp+var_20]
		push	eax		; Args
		push	offset aCosinfoIssys_1 ; "COSInfo::IsSystem() :	GetTokenInformati"...
		mov	[ecx+4], eax
		call	sub_6B18102E
		pop	ecx

loc_6B19AC63:				; CODE XREF: Ordinal1280+12Ej
		pop	ecx
		jmp	short loc_6B19AC7C
; ---------------------------------------------------------------------------

loc_6B19AC66:				; CODE XREF: Ordinal1280+141j
		push	[ebp+pSid]	; pSid2
		mov	eax, [ebp+var_24]
		push	dword ptr [eax]	; pSid1
		call	EqualSid
		test	eax, eax
		jz	short loc_6B19AC7C
		mov	[ebp+var_D], 1

loc_6B19AC7C:				; CODE XREF: Ordinal1280+158j
					; Ordinal1280+16Aj
		lea	ecx, [ebp+var_34]
		call	Ordinal1189

loc_6B19AC84:				; CODE XREF: Ordinal1280+CAj
		pop	esi

loc_6B19AC85:				; CODE XREF: Ordinal1280+74j
		cmp	[ebp+pSid], ebx
		jz	short loc_6B19AC96
		push	[ebp+pSid]	; pSid
		call	FreeSid
		mov	[ebp+pSid], ebx

loc_6B19AC96:				; CODE XREF: Ordinal1280+17Cj
		cmp	[ebp+hObject], 0FFFFFFFFh
		pop	ebx
		jz	short loc_6B19ACA6
		push	[ebp+hObject]	; hObject
		call	ds:CloseHandle

loc_6B19ACA6:				; CODE XREF: Ordinal1280+18Fj
		mov	al, [ebp+var_D]

loc_6B19ACA9:				; CODE XREF: Ordinal1280+1Bj
		mov	ecx, [ebp+var_4]
		pop	edi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn
Ordinal1280	endp ; sp-analysis failed

; Exported entry 1267.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1267
Ordinal1267	proc near		; CODE XREF: Ordinal1266+3Ap
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= byte ptr  4

		call	Ordinal1282
		call	Ordinal1261
		test	al, al
		jz	short loc_6B19ACE9
		cmp	VersionInformation.dwMajorVersion, 4
		jnz	short loc_6B19ACE2
		cmp	VersionInformation.dwMinorVersion, 0Ah
		jnz	short loc_6B19ACE2
		cmp	word ptr VersionInformation.dwBuildNumber, 7CEh
		jbe	short loc_6B19ACE2
		mov	al, 1
		retn
; ---------------------------------------------------------------------------

loc_6B19ACE2:				; CODE XREF: Ordinal1267+15j
					; Ordinal1267+1Ej ...
		cmp	[esp+arg_0], 0
		jnz	short loc_6B19ACEC

loc_6B19ACE9:				; CODE XREF: Ordinal1267+Cj
		xor	al, al
		retn
; ---------------------------------------------------------------------------

loc_6B19ACEC:				; CODE XREF: Ordinal1267+33j
		push	1
		call	Ordinal1268
		pop	ecx
		retn
Ordinal1267	endp

; Exported entry 1272.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1272
Ordinal1272	proc near		; CODE XREF: Ordinal1185+48p
					; Ordinal1279+82p ...

arg_0		= byte ptr  4

		call	Ordinal1282
		call	Ordinal1269
		test	al, al
		jz	short loc_6B19AD1F
		cmp	VersionInformation.dwMajorVersion, 5
		jnz	short loc_6B19AD18
		cmp	VersionInformation.dwMinorVersion, 0
		jnz	short loc_6B19AD18
		mov	al, 1
		retn
; ---------------------------------------------------------------------------

loc_6B19AD18:				; CODE XREF: Ordinal1272+15j
					; Ordinal1272+1Ej
		cmp	[esp+arg_0], 0
		jnz	short loc_6B19AD22

loc_6B19AD1F:				; CODE XREF: Ordinal1272+Cj
		xor	al, al
		retn
; ---------------------------------------------------------------------------

loc_6B19AD22:				; CODE XREF: Ordinal1272+28j
		push	1
		call	Ordinal1273
		pop	ecx
		retn
Ordinal1272	endp

; Exported entry 1279.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1279
Ordinal1279	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_30		= byte ptr -30h
Args		= dword	ptr -20h
pSid		= dword	ptr -1Ch
hObject		= dword	ptr -18h
IsMember	= dword	ptr -14h
var_D		= byte ptr -0Dh
pIdentifierAuthority= _SID_IDENTIFIER_AUTHORITY	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 30h
		mov	eax, ___security_cookie
		push	edi
		mov	edi, ecx
		mov	[ebp+var_4], eax
		mov	[ebp+IsMember],	edi
		call	Ordinal1269
		test	al, al
		jnz	short loc_6B19AD4F
		inc	al
		jmp	loc_6B19AF14
; ---------------------------------------------------------------------------

loc_6B19AD4F:				; CODE XREF: Ordinal1279+1Bj
		push	ebx
		xor	ebx, ebx
		or	[ebp+hObject], 0FFFFFFFFh
		lea	eax, [ebp+pSid]
		push	eax		; pSid
		push	ebx		; nSubAuthority7
		push	ebx		; nSubAuthority6
		push	ebx		; nSubAuthority5
		push	ebx		; nSubAuthority4
		push	ebx		; nSubAuthority3
		push	ebx		; nSubAuthority2
		push	220h		; nSubAuthority1
		push	20h		; nSubAuthority0
		push	2		; nSubAuthorityCount
		lea	eax, [ebp+pIdentifierAuthority]
		push	eax		; pIdentifierAuthority
		mov	[ebp+var_D], bl
		mov	[ebp+pSid], ebx
		mov	[ebp+pIdentifierAuthority.Value], bl
		mov	[ebp+pIdentifierAuthority.Value+1], bl
		mov	[ebp+pIdentifierAuthority.Value+2], bl
		mov	[ebp+pIdentifierAuthority.Value+3], bl
		mov	[ebp+pIdentifierAuthority.Value+4], bl
		mov	[ebp+pIdentifierAuthority.Value+5], 5
		call	AllocateAndInitializeSid
		test	eax, eax
		jnz	short loc_6B19ADAB
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCosinfoIsadmin ; "COSInfo::IsAdministrator() : AllocateAn"...
		mov	[edi+4], eax
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		jmp	loc_6B19AEF0
; ---------------------------------------------------------------------------

loc_6B19ADAB:				; CODE XREF: Ordinal1279+63j
		push	1
		call	Ordinal1272
		test	al, al
		pop	ecx
		jz	short loc_6B19ADDF
		lea	eax, [ebp+IsMember]
		push	eax		; IsMember
		push	[ebp+pSid]	; SidToCheck
		mov	[ebp+IsMember],	ebx
		push	ebx		; TokenHandle
		call	CheckTokenMembership
		test	eax, eax
		jnz	short loc_6B19ADD3
		mov	[ebp+var_D], bl
		jmp	loc_6B19AEF0
; ---------------------------------------------------------------------------

loc_6B19ADD3:				; CODE XREF: Ordinal1279+9Ej
		cmp	[ebp+IsMember],	ebx
		setnz	[ebp+var_D]
		jmp	loc_6B19AEF0
; ---------------------------------------------------------------------------

loc_6B19ADDF:				; CODE XREF: Ordinal1279+8Aj
		push	esi
		lea	eax, [ebp+hObject]
		push	eax		; TokenHandle
		push	ebx		; OpenAsSelf
		push	8		; DesiredAccess
		call	ds:GetCurrentThread
		push	eax		; ThreadHandle
		call	OpenThreadToken
		test	eax, eax
		mov	esi, ds:GetLastError
		jnz	short loc_6B19AE35
		call	esi ; GetLastError
		cmp	eax, 3F0h
		jnz	short loc_6B19AE1E
		lea	eax, [ebp+hObject]
		push	eax		; TokenHandle
		push	8		; DesiredAccess
		call	ds:GetCurrentProcess
		push	eax		; ProcessHandle
		call	OpenProcessToken
		test	eax, eax
		jnz	short loc_6B19AE35

loc_6B19AE1E:				; CODE XREF: Ordinal1279+DAj
		call	esi ; GetLastError
		push	eax		; Args
		push	offset aCosinfoIsadm_0 ; "COSInfo::IsAdministrator() : OpenProces"...

loc_6B19AE26:				; CODE XREF: Ordinal1279+131j
		mov	[edi+4], eax
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		jmp	loc_6B19AEEF
; ---------------------------------------------------------------------------

loc_6B19AE35:				; CODE XREF: Ordinal1279+D1j
					; Ordinal1279+F1j
		lea	eax, [ebp+Args]
		push	eax		; ReturnLength
		push	ebx		; TokenInformationLength
		push	ebx		; TokenInformation
		push	2		; TokenInformationClass
		push	[ebp+hObject]	; TokenHandle
		mov	[ebp+Args], ebx
		call	GetTokenInformation
		test	eax, eax
		jnz	short loc_6B19AE5E
		call	esi ; GetLastError
		cmp	eax, 7Ah
		jz	short loc_6B19AE5E
		call	esi ; GetLastError
		push	eax
		push	offset aCosinfoIsadm_1 ; "COSInfo::IsAdministrator() : GetTokenIn"...
		jmp	short loc_6B19AE26
; ---------------------------------------------------------------------------

loc_6B19AE5E:				; CODE XREF: Ordinal1279+120j
					; Ordinal1279+127j
		lea	ecx, [ebp+var_30]
		call	Ordinal1187
		push	[ebp+Args]	; Args
		lea	ecx, [ebp+var_30]
		call	Ordinal1196
		mov	edi, eax
		cmp	edi, ebx
		jnz	short loc_6B19AE8D
		mov	eax, [ebp+IsMember]
		push	offset aCosinfoIsadm_2 ; "COSInfo::IsAdministrator() : mem.NewAll"...
		mov	dword ptr [eax+4], 0Eh
		call	sub_6B18102E
		jmp	short loc_6B19AEB8
; ---------------------------------------------------------------------------

loc_6B19AE8D:				; CODE XREF: Ordinal1279+14Aj
		lea	eax, [ebp+Args]
		push	eax		; ReturnLength
		push	[ebp+Args]	; TokenInformationLength
		push	edi		; TokenInformation
		push	2		; TokenInformationClass
		push	[ebp+hObject]	; TokenHandle
		call	GetTokenInformation
		test	eax, eax
		jnz	short loc_6B19AEBB
		call	esi ; GetLastError
		mov	ecx, [ebp+IsMember]
		push	eax		; Args
		push	offset aCosinfoIsadm_1 ; "COSInfo::IsAdministrator() : GetTokenIn"...
		mov	[ecx+4], eax
		call	sub_6B18102E
		pop	ecx

loc_6B19AEB8:				; CODE XREF: Ordinal1279+160j
		pop	ecx
		jmp	short loc_6B19AEE7
; ---------------------------------------------------------------------------

loc_6B19AEBB:				; CODE XREF: Ordinal1279+177j
		cmp	[edi], ebx
		mov	[ebp+IsMember],	ebx
		jbe	short loc_6B19AEE7
		lea	esi, [edi+4]

loc_6B19AEC5:				; CODE XREF: Ordinal1279+1B4j
		push	dword ptr [esi]	; pSid2
		push	[ebp+pSid]	; pSid1
		call	EqualSid
		test	eax, eax
		jnz	short loc_6B19AEE3
		inc	[ebp+IsMember]
		mov	eax, [ebp+IsMember]
		add	esi, 8
		cmp	eax, [edi]
		jb	short loc_6B19AEC5
		jmp	short loc_6B19AEE7
; ---------------------------------------------------------------------------

loc_6B19AEE3:				; CODE XREF: Ordinal1279+1A7j
		mov	[ebp+var_D], 1

loc_6B19AEE7:				; CODE XREF: Ordinal1279+18Ej
					; Ordinal1279+195j ...
		lea	ecx, [ebp+var_30]
		call	Ordinal1189

loc_6B19AEEF:				; CODE XREF: Ordinal1279+105j
		pop	esi

loc_6B19AEF0:				; CODE XREF: Ordinal1279+7Bj
					; Ordinal1279+A3j ...
		cmp	[ebp+pSid], ebx
		jz	short loc_6B19AF01
		push	[ebp+pSid]	; pSid
		call	FreeSid
		mov	[ebp+pSid], ebx

loc_6B19AF01:				; CODE XREF: Ordinal1279+1C8j
		cmp	[ebp+hObject], 0FFFFFFFFh
		pop	ebx
		jz	short loc_6B19AF11
		push	[ebp+hObject]	; hObject
		call	ds:CloseHandle

loc_6B19AF11:				; CODE XREF: Ordinal1279+1DBj
		mov	al, [ebp+var_D]

loc_6B19AF14:				; CODE XREF: Ordinal1279+1Fj
		mov	ecx, [ebp+var_4]
		pop	edi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn
Ordinal1279	endp ; sp-analysis failed

; Exported entry 1266.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1266
Ordinal1266	proc near		; CODE XREF: Ordinal1264+66p
					; Ordinal1265+66p
					; DATA XREF: ...

arg_0		= byte ptr  4

		call	Ordinal1282
		call	Ordinal1261
		test	al, al
		jz	short loc_6B19AF54
		cmp	VersionInformation.dwMajorVersion, 4
		jnz	short loc_6B19AF4D
		cmp	VersionInformation.dwMinorVersion, 0Ah
		jnz	short loc_6B19AF4D
		cmp	word ptr VersionInformation.dwBuildNumber, 7CEh
		ja	short loc_6B19AF4D
		mov	al, 1
		retn
; ---------------------------------------------------------------------------

loc_6B19AF4D:				; CODE XREF: Ordinal1266+15j
					; Ordinal1266+1Ej ...
		cmp	[esp+arg_0], 0
		jnz	short loc_6B19AF57

loc_6B19AF54:				; CODE XREF: Ordinal1266+Cj
		xor	al, al
		retn
; ---------------------------------------------------------------------------

loc_6B19AF57:				; CODE XREF: Ordinal1266+33j
		push	1
		call	Ordinal1267
		pop	ecx
		retn
Ordinal1266	endp

; Exported entry 1271.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1271
Ordinal1271	proc near		; CODE XREF: Ordinal969+3Dp
					; Ordinal1283+CBp ...

arg_0		= byte ptr  4

		call	Ordinal1282
		call	Ordinal1269
		test	al, al
		jz	short loc_6B19AF8A
		cmp	VersionInformation.dwMajorVersion, 4
		jnz	short loc_6B19AF83
		cmp	VersionInformation.dwMinorVersion, 0
		jnz	short loc_6B19AF83
		mov	al, 1
		retn
; ---------------------------------------------------------------------------

loc_6B19AF83:				; CODE XREF: Ordinal1271+15j
					; Ordinal1271+1Ej
		cmp	[esp+arg_0], 0
		jnz	short loc_6B19AF8D

loc_6B19AF8A:				; CODE XREF: Ordinal1271+Cj
		xor	al, al
		retn
; ---------------------------------------------------------------------------

loc_6B19AF8D:				; CODE XREF: Ordinal1271+28j
		push	1
		call	Ordinal1272
		pop	ecx
		retn
Ordinal1271	endp

; Exported entry 1283.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame fpd=78h

		public Ordinal1283
Ordinal1283	proc near		; CODE XREF: Ordinal1274p
					; DATA XREF: .rdata:off_6B1BF428o

var_F0		= byte ptr -0F0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_C8		= byte ptr -0C8h
Type		= dword	ptr -0B4h
var_B0		= byte ptr -0B0h
Args		= dword	ptr -0A4h
Dst		= dword	ptr -0A0h
var_8		= word ptr -8
var_4		= dword	ptr -4

		push	ebp
		lea	ebp, [esp-78h]
		sub	esp, 0F0h
		mov	eax, ___security_cookie
		push	ebx
		xor	ebx, ebx
		cmp	byte_6B1C1329, bl
		mov	[ebp+78h+var_4], eax
		jnz	loc_6B19B15F
		call	Ordinal1282
		call	Ordinal1269
		test	al, al
		jz	loc_6B19B152
		push	1
		call	Ordinal1273
		test	al, al
		pop	ecx
		jz	short loc_6B19AFDD
		mov	bl, 1
		jmp	loc_6B19B152
; ---------------------------------------------------------------------------

loc_6B19AFDD:				; CODE XREF: Ordinal1283+3Ej
		push	esi
		push	edi		; Args
		push	1
		call	Ordinal1272
		test	al, al
		pop	ecx
		jz	short loc_6B19B05F
		lea	ecx, [ebp+78h+var_F0]
		call	Ordinal1179
		lea	ecx, [ebp+78h+var_F0]
		call	Ordinal1185
		test	al, al
		jz	short loc_6B19B047
		cmp	[ebp+78h+var_DC], ebx
		jz	short loc_6B19B047
		cmp	[ebp+78h+var_D8], ebx
		jz	short loc_6B19B047
		push	6
		push	40h
		push	ebx
		push	ebx
		call	[ebp+78h+var_DC]
		mov	esi, 9Ch
		push	esi		; Size
		mov	edi, eax
		lea	eax, [ebp+78h+Dst]
		push	ebx		; Val
		push	eax		; Dst
		mov	[ebp+78h+Type],	edx
		call	memset
		add	esp, 0Ch
		push	[ebp+78h+Type]
		lea	eax, [ebp+78h+Dst]
		push	edi
		push	40h
		push	eax
		mov	[ebp+78h+Dst], esi
		mov	[ebp+78h+var_8], 10h
		call	[ebp+78h+var_D8]
		test	eax, eax
		setnz	bl
		jmp	short loc_6B19B052
; ---------------------------------------------------------------------------

loc_6B19B047:				; CODE XREF: Ordinal1283+67j
					; Ordinal1283+6Cj ...
		push	offset aCosinfoIniti_0 ; "COSInfo::InitializeTerminalServerInfo()"...
		call	sub_6B18102E
		pop	ecx

loc_6B19B052:				; CODE XREF: Ordinal1283+AFj
		lea	ecx, [ebp+78h+var_F0]
		call	Ordinal1180
		jmp	loc_6B19B150
; ---------------------------------------------------------------------------

loc_6B19B05F:				; CODE XREF: Ordinal1283+53j
		push	1
		call	Ordinal1271
		test	al, al
		pop	ecx
		jz	loc_6B19B150
		lea	ecx, [ebp+78h+var_B0]
		call	Ordinal1316
		push	ebx		; int
		push	20019h		; samDesired
		push	offset aSystemCurren_0 ; "System\\CurrentControlSet\\Control\\Produc"...
		push	80000002h	; hKey
		lea	ecx, [ebp+78h+var_B0]
		call	Ordinal1321
		test	eax, eax
		jnz	short loc_6B19B09D
		push	offset aCosinfoIniti_1 ; "COSInfo::InitializeTerminalServerInfo()"...
		jmp	loc_6B19B142
; ---------------------------------------------------------------------------

loc_6B19B09D:				; CODE XREF: Ordinal1283+FBj
		lea	eax, [ebp+78h+Args]
		push	eax		; lpcbData
		push	ebx		; lpData
		lea	eax, [ebp+78h+Type]
		push	eax		; lpType
		push	ebx		; lpReserved
		mov	edi, offset aProductsuite ; "ProductSuite"
		push	edi		; lpValueName
		lea	ecx, [ebp+78h+var_B0]
		mov	[ebp+78h+Type],	ebx
		mov	[ebp+78h+Args],	ebx
		call	Ordinal1347
		test	eax, eax
		jz	short loc_6B19B13D
		cmp	[ebp+78h+Args],	ebx
		jz	short loc_6B19B13D
		lea	ecx, [ebp+78h+var_C8]
		call	Ordinal1187
		push	[ebp+78h+Args]	; Args
		lea	ecx, [ebp+78h+var_C8]
		call	Ordinal1196
		mov	esi, eax
		cmp	esi, ebx
		jnz	short loc_6B19B0E4
		push	offset aCosinfoIniti_2 ; "COSInfo::InitializeTerminalServerInfo()"...
		jmp	short loc_6B19B106
; ---------------------------------------------------------------------------

loc_6B19B0E4:				; CODE XREF: Ordinal1283+145j
		lea	eax, [ebp+78h+Args]
		push	eax		; lpcbData
		push	esi		; lpData
		lea	eax, [ebp+78h+Type]
		push	eax		; lpType
		push	ebx		; lpReserved
		push	edi		; lpValueName
		lea	ecx, [ebp+78h+var_B0]
		call	Ordinal1347
		test	eax, eax
		jz	short loc_6B19B101
		cmp	[ebp+78h+Type],	7
		jz	short loc_6B19B133

loc_6B19B101:				; CODE XREF: Ordinal1283+163j
		push	offset aCosinfoIniti_3 ; "COSInfo::InitializeTerminalServerInfo()"...

loc_6B19B106:				; CODE XREF: Ordinal1283+14Cj
		call	sub_6B18102E
		pop	ecx

loc_6B19B10C:				; CODE XREF: Ordinal1283+1A1j
					; Ordinal1283+1A5j
		lea	ecx, [ebp+78h+var_C8]
		call	Ordinal1189
		jmp	short loc_6B19B148
; ---------------------------------------------------------------------------

loc_6B19B116:				; CODE XREF: Ordinal1283+19Fj
		push	offset aTerminalServer ; "Terminal Server"
		push	esi		; unsigned __int8 *
		call	ds:_mbsicmp
		test	eax, eax
		pop	ecx
		pop	ecx
		jz	short loc_6B19B139
		push	esi		; lpString
		call	ds:lstrlenA
		lea	esi, [esi+eax+1]

loc_6B19B133:				; CODE XREF: Ordinal1283+169j
		cmp	[esi], bl
		jnz	short loc_6B19B116
		jmp	short loc_6B19B10C
; ---------------------------------------------------------------------------

loc_6B19B139:				; CODE XREF: Ordinal1283+190j
		mov	bl, 1
		jmp	short loc_6B19B10C
; ---------------------------------------------------------------------------

loc_6B19B13D:				; CODE XREF: Ordinal1283+127j
					; Ordinal1283+12Cj
		push	offset aCosinfoIniti_3 ; "COSInfo::InitializeTerminalServerInfo()"...

loc_6B19B142:				; CODE XREF: Ordinal1283+102j
		call	sub_6B18102E
		pop	ecx

loc_6B19B148:				; CODE XREF: Ordinal1283+17Ej
		lea	ecx, [ebp+78h+var_B0]
		call	Ordinal1318

loc_6B19B150:				; CODE XREF: Ordinal1283+C4j
					; Ordinal1283+D3j
		pop	edi
		pop	esi

loc_6B19B152:				; CODE XREF: Ordinal1283+2Ej
					; Ordinal1283+42j
		mov	byte_6B1C1328, bl
		mov	byte_6B1C1329, 1

loc_6B19B15F:				; CODE XREF: Ordinal1283+1Cj
		mov	ecx, [ebp+78h+var_4]
		mov	al, 1
		pop	ebx
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		add	ebp, 78h
		leave
		retn
Ordinal1283	endp ; sp-analysis failed

; Exported entry 1264.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1264
Ordinal1264	proc near		; CODE XREF: Ordinal1263+3Ap
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= byte ptr  4

		call	Ordinal1282
		call	Ordinal1261
		test	al, al
		jnz	short loc_6B19B17E
		retn
; ---------------------------------------------------------------------------

loc_6B19B17E:				; CODE XREF: Ordinal1264+Cj
		cmp	VersionInformation.dwMajorVersion, 4
		push	esi
		push	edi
		jnz	short loc_6B19B1C8
		cmp	VersionInformation.dwMinorVersion, 3
		jnz	short loc_6B19B1C8
		cmp	word ptr VersionInformation.dwBuildNumber, 4BEh
		ja	short loc_6B19B1C8
		mov	esi, ds:_mbsstr
		push	offset byte_6B1AA568 ; unsigned	__int8 *
		mov	edi, offset VersionInformation.szCSDVersion
		push	edi		; unsigned __int8 *
		call	esi ; _mbsstr
		test	eax, eax
		pop	ecx
		pop	ecx
		jnz	short loc_6B19B1C4
		push	offset aB	; "b"
		push	edi		; unsigned __int8 *
		call	esi ; _mbsstr
		test	eax, eax
		pop	ecx
		pop	ecx
		jz	short loc_6B19B1C8

loc_6B19B1C4:				; CODE XREF: Ordinal1264+45j
		mov	al, 1
		jmp	short loc_6B19B1DB
; ---------------------------------------------------------------------------

loc_6B19B1C8:				; CODE XREF: Ordinal1264+18j
					; Ordinal1264+21j ...
		cmp	[esp+8+arg_0], 0
		jnz	short loc_6B19B1D3
		xor	al, al
		jmp	short loc_6B19B1DB
; ---------------------------------------------------------------------------

loc_6B19B1D3:				; CODE XREF: Ordinal1264+5Ej
		push	1
		call	Ordinal1266
		pop	ecx

loc_6B19B1DB:				; CODE XREF: Ordinal1264+57j
					; Ordinal1264+62j
		pop	edi
		pop	esi
		retn
Ordinal1264	endp

; Exported entry 1265.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1265
Ordinal1265	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= byte ptr  4

		call	Ordinal1282
		call	Ordinal1261
		test	al, al
		jnz	short loc_6B19B1ED
		retn
; ---------------------------------------------------------------------------

loc_6B19B1ED:				; CODE XREF: Ordinal1265+Cj
		cmp	VersionInformation.dwMajorVersion, 4
		push	esi
		push	edi
		jnz	short loc_6B19B237
		cmp	VersionInformation.dwMinorVersion, 3
		jnz	short loc_6B19B237
		cmp	word ptr VersionInformation.dwBuildNumber, 4BEh
		jb	short loc_6B19B237
		mov	esi, ds:_mbsstr
		push	offset aC_1	; "C"
		mov	edi, offset VersionInformation.szCSDVersion
		push	edi		; unsigned __int8 *
		call	esi ; _mbsstr
		test	eax, eax
		pop	ecx
		pop	ecx
		jnz	short loc_6B19B233
		push	offset aC_0	; "c"
		push	edi		; unsigned __int8 *
		call	esi ; _mbsstr
		test	eax, eax
		pop	ecx
		pop	ecx
		jz	short loc_6B19B237

loc_6B19B233:				; CODE XREF: Ordinal1265+45j
		mov	al, 1
		jmp	short loc_6B19B24A
; ---------------------------------------------------------------------------

loc_6B19B237:				; CODE XREF: Ordinal1265+18j
					; Ordinal1265+21j ...
		cmp	[esp+8+arg_0], 0
		jnz	short loc_6B19B242
		xor	al, al
		jmp	short loc_6B19B24A
; ---------------------------------------------------------------------------

loc_6B19B242:				; CODE XREF: Ordinal1265+5Ej
		push	1
		call	Ordinal1266
		pop	ecx

loc_6B19B24A:				; CODE XREF: Ordinal1265+57j
					; Ordinal1265+62j
		pop	edi
		pop	esi
		retn
Ordinal1265	endp

; Exported entry 1270.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1270
Ordinal1270	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= byte ptr  4

		call	Ordinal1282
		call	Ordinal1269
		test	al, al
		jz	short loc_6B19B277
		cmp	VersionInformation.dwMajorVersion, 3
		jnz	short loc_6B19B270
		cmp	VersionInformation.dwMinorVersion, 33h
		jnz	short loc_6B19B270
		mov	al, 1
		retn
; ---------------------------------------------------------------------------

loc_6B19B270:				; CODE XREF: Ordinal1270+15j
					; Ordinal1270+1Ej
		cmp	[esp+arg_0], 0
		jnz	short loc_6B19B27A

loc_6B19B277:				; CODE XREF: Ordinal1270+Cj
		xor	al, al
		retn
; ---------------------------------------------------------------------------

loc_6B19B27A:				; CODE XREF: Ordinal1270+28j
		push	1
		call	Ordinal1271
		pop	ecx
		retn
Ordinal1270	endp

; Exported entry 1274.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1274
Ordinal1274	proc near		; CODE XREF: Ordinal1277+12p
					; Ordinal1614:loc_6B1A23ACp
					; DATA XREF: ...
		call	Ordinal1283
		mov	al, byte_6B1C1328
		retn
Ordinal1274	endp

; Exported entry 1277.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1277
Ordinal1277	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_1		= byte ptr -1

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		call	Ordinal1269
		test	al, al
		jz	short loc_6B19B2A9
		call	Ordinal1274
		test	al, al
		jnz	short loc_6B19B2B0

loc_6B19B2A9:				; CODE XREF: Ordinal1277+10j
		mov	al, 1
		jmp	loc_6B19B370
; ---------------------------------------------------------------------------

loc_6B19B2B0:				; CODE XREF: Ordinal1277+19j
		push	edi		; Args
		lea	edi, [esi+8]
		mov	ecx, edi
		call	Ordinal1230
		test	al, al
		jnz	short loc_6B19B2E3
		mov	ecx, edi
		call	Ordinal1905
		test	al, al
		jnz	short loc_6B19B2E3
		push	offset aCosinfoIsactiv ; "COSInfo::IsActiveSession() : m_WTSAPI.L"...
		call	sub_6B18101A
		pop	ecx
		mov	dword ptr [esi+4], 490h
		mov	al, 1
		jmp	loc_6B19B36F
; ---------------------------------------------------------------------------

loc_6B19B2E3:				; CODE XREF: Ordinal1277+2Fj
					; Ordinal1277+3Aj
		push	ebx
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [ebp+var_8]
		push	eax
		push	10h
		xor	ebx, ebx
		push	0FFFFFFFFh
		push	ebx
		mov	[ebp+var_1], 1
		mov	[ebp+var_8], ebx
		mov	[ebp+var_C], ebx
		call	dword ptr [esi+10h]
		test	eax, eax
		jz	short loc_6B19B332
		mov	eax, [ebp+var_8]
		mov	di, [eax]
		push	eax
		call	dword ptr [esi+18h]
		cmp	di, bx
		mov	[ebp+var_8], ebx
		jz	short loc_6B19B31E
		mov	[ebp+var_1], bl
		mov	[esi+4], ebx
		jmp	short loc_6B19B36B
; ---------------------------------------------------------------------------

loc_6B19B31E:				; CODE XREF: Ordinal1277+86j
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [ebp+var_8]
		push	eax
		push	8
		push	0FFFFFFFFh
		push	ebx
		call	dword ptr [esi+10h]
		test	eax, eax
		jnz	short loc_6B19B34A

loc_6B19B332:				; CODE XREF: Ordinal1277+74j
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCosinfoIsact_0 ; "COSInfo::IsActiveSession() : m_WTSAPI.W"...
		mov	[esi+4], eax
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		jmp	short loc_6B19B35D
; ---------------------------------------------------------------------------

loc_6B19B34A:				; CODE XREF: Ordinal1277+A2j
		mov	eax, [ebp+var_8]
		mov	edi, [eax]
		push	eax
		call	dword ptr [esi+18h]
		cmp	edi, ebx
		mov	[ebp+var_8], ebx
		jz	short loc_6B19B36B
		mov	[esi+4], ebx

loc_6B19B35D:				; CODE XREF: Ordinal1277+BAj
		cmp	[ebp+var_8], ebx
		mov	[ebp+var_1], bl
		jz	short loc_6B19B36B
		push	[ebp+var_8]
		call	dword ptr [esi+18h]

loc_6B19B36B:				; CODE XREF: Ordinal1277+8Ej
					; Ordinal1277+CAj ...
		mov	al, [ebp+var_1]
		pop	ebx

loc_6B19B36F:				; CODE XREF: Ordinal1277+50j
		pop	edi

loc_6B19B370:				; CODE XREF: Ordinal1277+1Dj
		pop	esi
		leave
		retn
Ordinal1277	endp

; Exported entry 1263.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1263
Ordinal1263	proc near		; CODE XREF: Ordinal1262+3Ap
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= byte ptr  4

		call	Ordinal1282
		call	Ordinal1261
		test	al, al
		jz	short loc_6B19B3A8
		cmp	VersionInformation.dwMajorVersion, 4
		jnz	short loc_6B19B3A1
		cmp	VersionInformation.dwMinorVersion, 0
		jnz	short loc_6B19B3A1
		cmp	word ptr VersionInformation.dwBuildNumber, 457h
		jb	short loc_6B19B3A1
		mov	al, 1
		retn
; ---------------------------------------------------------------------------

loc_6B19B3A1:				; CODE XREF: Ordinal1263+15j
					; Ordinal1263+1Ej ...
		cmp	[esp+arg_0], 0
		jnz	short loc_6B19B3AB

loc_6B19B3A8:				; CODE XREF: Ordinal1263+Cj
		xor	al, al
		retn
; ---------------------------------------------------------------------------

loc_6B19B3AB:				; CODE XREF: Ordinal1263+33j
		push	1
		call	Ordinal1264
		pop	ecx
		retn
Ordinal1263	endp

; Exported entry 1262.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1262
Ordinal1262	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= byte ptr  4

		call	Ordinal1282
		call	Ordinal1261
		test	al, al
		jz	short loc_6B19B3E9
		cmp	VersionInformation.dwMajorVersion, 4
		jnz	short loc_6B19B3E2
		cmp	VersionInformation.dwMinorVersion, 0
		jnz	short loc_6B19B3E2
		cmp	word ptr VersionInformation.dwBuildNumber, 457h
		jnb	short loc_6B19B3E2
		mov	al, 1
		retn
; ---------------------------------------------------------------------------

loc_6B19B3E2:				; CODE XREF: Ordinal1262+15j
					; Ordinal1262+1Ej ...
		cmp	[esp+arg_0], 0
		jnz	short loc_6B19B3EC

loc_6B19B3E9:				; CODE XREF: Ordinal1262+Cj
		xor	al, al
		retn
; ---------------------------------------------------------------------------

loc_6B19B3EC:				; CODE XREF: Ordinal1262+33j
		push	1
		call	Ordinal1263
		pop	ecx
		retn
Ordinal1262	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6B19B3F5(OLECHAR *psz)
sub_6B19B3F5	proc near		; CODE XREF: sub_6B19B902+2Bp

psz		= dword	ptr  4

		push	esi
		push	[esp+4+psz]	; psz
		mov	esi, ecx
		and	dword ptr [esi+4], 0
		mov	dword ptr [esi+8], 1
		call	ds:SysAllocString
		test	eax, eax
		mov	[esi], eax
		jnz	short loc_6B19B423
		cmp	[esp+4+psz], eax
		jz	short loc_6B19B423
		push	8007000Eh
		call	sub_6B1A8F50
; ---------------------------------------------------------------------------

loc_6B19B423:				; CODE XREF: sub_6B19B3F5+1Cj
					; sub_6B19B3F5+22j
		mov	eax, esi
		pop	esi
		retn	4
sub_6B19B3F5	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19B429	proc near		; CODE XREF: Ordinal1286+47p
		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_6B19B456
		push	eax		; bstr
		call	ds:SysStringByteLen
		push	eax		; len
		push	dword ptr [esi]	; psz
		call	ds:SysAllocStringByteLen
		mov	esi, eax
		test	esi, esi
		jnz	short loc_6B19B452
		push	8007000Eh
		call	sub_6B1A8F50
; ---------------------------------------------------------------------------

loc_6B19B452:				; CODE XREF: sub_6B19B429+1Dj
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6B19B456:				; CODE XREF: sub_6B19B429+7j
		xor	eax, eax
		pop	esi
		retn
sub_6B19B429	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19B45A	proc near		; CODE XREF: sub_6B19B8C2+18p
		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_6B19B46A
		push	eax		; bstrString
		call	ds:SysFreeString

loc_6B19B46A:				; CODE XREF: sub_6B19B45A+7j
		mov	esi, [esi+4]
		test	esi, esi
		jz	short loc_6B19B478
		push	esi		; void *
		call	??_V@YAXPAX@Z	; operator delete[](void *)
		pop	ecx

loc_6B19B478:				; CODE XREF: sub_6B19B45A+15j
		pop	esi
		retn
sub_6B19B45A	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19B47A	proc near		; CODE XREF: sub_6B19B5B3+6Dp

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 80040200h
		jl	short loc_6B19B495
		cmp	eax, 8004FFFFh
		jg	short loc_6B19B495
		add	eax, 0FFFFFE00h
		movzx	eax, ax
		retn
; ---------------------------------------------------------------------------

loc_6B19B495:				; CODE XREF: sub_6B19B47A+9j
					; sub_6B19B47A+10j
		xor	eax, eax
		retn
sub_6B19B47A	endp

; Exported entry 1284.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1284
Ordinal1284	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, ecx
		mov	dword ptr [eax], offset	off_6B1B56F4
		retn
Ordinal1284	endp

; Exported entry 1285.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1285
Ordinal1285	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	dword ptr [ecx], offset	off_6B1B56F4
		retn
Ordinal1285	endp

; Exported entry 1288.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1288
Ordinal1288	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_6B19B4B8
		mov	eax, 80004003h
		retn
; ---------------------------------------------------------------------------

loc_6B19B4B8:				; CODE XREF: Ordinal1288+8j
		mov	ecx, [esp+arg_0]
		mov	[eax], ecx
		xor	eax, eax
		retn
Ordinal1288	endp

; Exported entry 1289.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1289
Ordinal1289	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		mov	[ecx], eax
		xor	eax, eax
		retn
Ordinal1289	endp

; Exported entry 1290.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal1290(double, int)
		public Ordinal1290
Ordinal1290	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= qword	ptr  4
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_6B19B4DE
		mov	eax, 80004003h
		retn
; ---------------------------------------------------------------------------

loc_6B19B4DE:				; CODE XREF: Ordinal1290+8j
		fld	[esp+arg_0]
		fstp	qword ptr [eax]
		xor	eax, eax
		retn
Ordinal1290	endp

; Exported entry 1291.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal1291(int, double)
		public Ordinal1291
Ordinal1291	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= qword	ptr  8

		mov	eax, [esp+arg_0]
		fld	[esp+arg_4]
		fstp	qword ptr [eax]
		xor	eax, eax
		retn
Ordinal1291	endp

; Exported entry 1292.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1292
Ordinal1292	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_6B19B504
		mov	eax, 80004003h
		retn
; ---------------------------------------------------------------------------

loc_6B19B504:				; CODE XREF: Ordinal1292+8j
		mov	ecx, [esp+arg_0]
		mov	[eax], ecx
		mov	ecx, [esp+arg_4]
		mov	[eax+4], ecx
		xor	eax, eax
		retn
Ordinal1292	endp

; Exported entry 1293.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1293
Ordinal1293	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	[eax], ecx
		mov	ecx, [esp+arg_8]
		mov	[eax+4], ecx
		xor	eax, eax
		retn
Ordinal1293	endp

; Exported entry 1294.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1294
Ordinal1294	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_6B19B538
		mov	eax, 80004003h
		retn
; ---------------------------------------------------------------------------

loc_6B19B538:				; CODE XREF: Ordinal1294+8j
		mov	ecx, [esp+arg_0]
		neg	ecx
		sbb	ecx, ecx
		mov	[eax], cx
		xor	eax, eax
		retn
Ordinal1294	endp

; Exported entry 1295.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1295
Ordinal1295	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= word ptr  8

		mov	ecx, [esp+arg_0]
		xor	eax, eax
		cmp	[esp+arg_4], ax
		setnz	al
		mov	[ecx], eax
		xor	eax, eax
		retn
Ordinal1295	endp

; Exported entry 1296.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1296
Ordinal1296	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= word ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_6B19B569
		mov	eax, 80004003h
		retn
; ---------------------------------------------------------------------------

loc_6B19B569:				; CODE XREF: Ordinal1296+8j
		mov	cx, [esp+arg_0]
		mov	[eax], cx
		xor	eax, eax
		retn
Ordinal1296	endp

; Exported entry 1297.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1297
Ordinal1297	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= word ptr  8

		mov	ax, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		mov	[ecx], ax
		xor	eax, eax
		retn
Ordinal1297	endp

; Exported entry 1298.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1298
Ordinal1298	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= byte ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_6B19B593
		mov	eax, 80004003h
		retn
; ---------------------------------------------------------------------------

loc_6B19B593:				; CODE XREF: Ordinal1298+8j
		mov	cl, [esp+arg_0]
		neg	cl
		sbb	ecx, ecx
		mov	[eax], cx
		xor	eax, eax
		retn
Ordinal1298	endp

; Exported entry 1299.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1299
Ordinal1299	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= word ptr  8

		cmp	[esp+arg_4], 0
		mov	ecx, [esp+arg_0]
		setnz	al
		mov	[ecx], al
		xor	eax, eax
		retn
Ordinal1299	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19B5B3	proc near		; CODE XREF: Ordinal1286+68p
					; sub_6B19B7B4+1Ap ...
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		lea	esi, [edi+0Ch]
		xor	ebx, ebx
		cmp	[esi], ebx
		jnz	loc_6B19B647
		push	ebx		; Arguments
		push	ebx		; nSize
		push	esi		; lpBuffer
		push	400h		; dwLanguageId
		push	dword ptr [edi+4] ; dwMessageId
		push	ebx		; lpSource
		push	1100h		; dwFlags
		call	ds:FormatMessageA
		mov	eax, [esi]
		cmp	eax, ebx
		jz	short loc_6B19B60A
		push	eax		; lpString
		call	ds:lstrlenA
		cmp	eax, 1
		jle	short loc_6B19B647
		mov	ecx, [esi]
		lea	ecx, [eax+ecx-1]
		cmp	byte ptr [ecx],	0Ah
		jnz	short loc_6B19B647
		mov	[ecx], bl
		mov	ecx, [esi]
		lea	eax, [eax+ecx-2]
		cmp	byte ptr [eax],	0Dh
		jnz	short loc_6B19B647
		mov	[eax], bl
		jmp	short loc_6B19B647
; ---------------------------------------------------------------------------

loc_6B19B60A:				; CODE XREF: sub_6B19B5B3+2Dj
		push	ebp
		push	20h		; uBytes
		push	ebx		; uFlags
		call	ds:LocalAlloc
		mov	ebp, eax
		cmp	ebp, ebx
		mov	[esi], ebp
		jz	short loc_6B19B646
		mov	edi, [edi+4]
		push	edi
		call	sub_6B19B47A
		cmp	ax, bx
		pop	ecx
		jz	short loc_6B19B636
		movzx	eax, ax
		push	eax
		push	offset aIdispatchError ; "IDispatch error #%d"
		jmp	short loc_6B19B63C
; ---------------------------------------------------------------------------

loc_6B19B636:				; CODE XREF: sub_6B19B5B3+76j
		push	edi
		push	offset aUnknownError0x ; "Unknown error	0x%0lX"

loc_6B19B63C:				; CODE XREF: sub_6B19B5B3+81j
		push	ebp		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch

loc_6B19B646:				; CODE XREF: sub_6B19B5B3+67j
		pop	ebp

loc_6B19B647:				; CODE XREF: sub_6B19B5B3+Cj
					; sub_6B19B5B3+39j ...
		mov	eax, [esi]
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_6B19B5B3	endp

; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_6. PRESS KEYPAD "+" TO EXPAND]
; Exported entry 1286.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1286
Ordinal1286	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_30		= byte ptr -30h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_98 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 24h
		push	ebx
		push	esi
		mov	esi, [ebp+arg_4]
		mov	eax, [esi]
		test	eax, eax
		push	edi
		mov	[ebp+var_10], esp
		jnz	short loc_6B19B690
		mov	eax, 80004003h
		jmp	loc_6B19B71B
; ---------------------------------------------------------------------------

loc_6B19B690:				; CODE XREF: Ordinal1286+1Aj
		and	dword ptr [eax], 0
		push	offset aCpropertyhelpe ; "CPropertyHelper::GetString()"
		lea	ecx, [ebp+var_30]
		call	Ordinal1089
		mov	eax, [ebp+arg_0]
		and	[ebp+var_4], 0
		mov	ecx, [eax]
		test	ecx, ecx
		mov	byte ptr [ebp+var_4], 1
		jz	short loc_6B19B6FB
		call	sub_6B19B429
		jmp	short loc_6B19B6FD
; ---------------------------------------------------------------------------

loc_6B19B6B8:				; DATA XREF: .rdata:6B1BC6A8o
		push	14h
		lea	ecx, [ebp+var_30]
		call	Ordinal1095
		push	offset a_com_error ; "_com_error"
		lea	ecx, [ebp+var_30]
		call	Ordinal1101
		mov	ecx, [ebp+arg_4]
		call	sub_6B19B5B3
		push	eax		; Src
		lea	ecx, [ebp+var_30]
		call	Ordinal1103
		lea	ecx, [ebp+var_30]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B19B701
		retn
; ---------------------------------------------------------------------------

loc_6B19B6FB:				; CODE XREF: Ordinal1286+45j
		xor	eax, eax

loc_6B19B6FD:				; CODE XREF: Ordinal1286+4Cj
		mov	ecx, [esi]
		mov	[ecx], eax

loc_6B19B701:				; DATA XREF: Ordinal1286+8Bo
		lea	ecx, [ebp+var_30]
		call	Ordinal1635
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		lea	ecx, [ebp+var_30]
		neg	esi
		call	Ordinal1090
		mov	eax, esi

loc_6B19B71B:				; CODE XREF: Ordinal1286+21j
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn
Ordinal1286	endp ; sp-analysis failed

; Exported entry 1300.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1300(VARIANTARG *pvargSrc,	int)
		public Ordinal1300
Ordinal1300	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_30		= byte ptr -30h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
pvargSrc	= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_99 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 24h
		push	ebx
		push	esi
		mov	esi, [ebp+arg_4]
		mov	eax, [esi]
		test	eax, eax
		push	edi
		mov	[ebp+var_10], esp
		jnz	short loc_6B19B74D
		mov	eax, 80004003h
		jmp	short loc_6B19B7A5
; ---------------------------------------------------------------------------

loc_6B19B74D:				; CODE XREF: Ordinal1300+1Aj
		push	eax		; pvarg
		call	ds:VariantClear
		push	offset aCpropertyhel_0 ; "CPropertyHelper::GetVariant()"
		lea	ecx, [ebp+var_30]
		call	Ordinal1089
		push	[ebp+pvargSrc]	; pvargSrc
		and	[ebp+var_4], 0
		push	dword ptr [esi]	; pvarDest
		mov	byte ptr [ebp+var_4], 1
		call	ds:VariantCopyInd
		mov	esi, eax
		test	esi, esi
		jge	short loc_6B19B78B
		push	offset aCpropertyhel_1 ; "CPropertyHelper::GetVariant()	: Variant"...
		call	sub_6B18102E
		pop	ecx
		push	esi
		call	sub_6B1A8F50
; ---------------------------------------------------------------------------

loc_6B19B78B:				; CODE XREF: Ordinal1300+4Ej
					; DATA XREF: sub_6B19B7B4+3Do
		lea	ecx, [ebp+var_30]
		call	Ordinal1635
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		lea	ecx, [ebp+var_30]
		neg	esi
		call	Ordinal1090
		mov	eax, esi

loc_6B19B7A5:				; CODE XREF: Ordinal1300+21j
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn
Ordinal1300	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19B7B4	proc near		; DATA XREF: .rdata:6B1BC700o
		push	14h
		lea	ecx, [ebp-30h]
		call	Ordinal1095
		push	offset a_com_error ; "_com_error"
		lea	ecx, [ebp-30h]
		call	Ordinal1101
		mov	ecx, [ebp+0Ch]
		call	sub_6B19B5B3
		push	eax		; Src
		lea	ecx, [ebp-30h]
		call	Ordinal1103
		lea	ecx, [ebp-30h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B19B78B
		retn
sub_6B19B7B4	endp

; Exported entry 1301.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1301(VARIANTARG *pvarDest,	VARIANTARG pvargSrc)
		public Ordinal1301
Ordinal1301	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_34		= byte ptr -34h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
pvarDest	= dword	ptr  8
pvargSrc	= VARIANTARG ptr  0Ch

		mov	eax, offset unknown_libname_100	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 28h
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCpropertyhel_2 ; "CPropertyHelper::PutVariant()"
		lea	ecx, [ebp+var_34]
		call	Ordinal1089
		push	[ebp+pvarDest]	; pvarg
		and	[ebp+var_4], 0
		mov	byte ptr [ebp+var_4], 1
		call	ds:VariantClear
		test	eax, eax
		jge	short loc_6B19B832
		push	eax
		call	sub_6B1A8F50
; ---------------------------------------------------------------------------

loc_6B19B832:				; CODE XREF: Ordinal1301+33j
		lea	eax, [ebp+pvargSrc]
		push	eax		; pvargSrc
		push	[ebp+pvarDest]	; pvarDest
		call	ds:VariantCopyInd
		mov	esi, eax
		test	esi, esi
		jge	short loc_6B19B856
		push	offset aCpropertyhel_3 ; "CPropertyHelper::PutVariant()	: Variant"...
		call	sub_6B18102E
		pop	ecx
		push	esi
		call	sub_6B1A8F50
; ---------------------------------------------------------------------------

loc_6B19B856:				; CODE XREF: Ordinal1301+4Cj
					; DATA XREF: sub_6B19B87F+3Do
		lea	ecx, [ebp+var_34]
		call	Ordinal1635
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		lea	ecx, [ebp+var_34]
		neg	esi
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		pop	edi
		mov	eax, esi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn
Ordinal1301	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19B87F	proc near		; DATA XREF: .rdata:6B1BC758o
		push	14h
		lea	ecx, [ebp-34h]
		call	Ordinal1095
		push	offset a_com_error ; "_com_error"
		lea	ecx, [ebp-34h]
		call	Ordinal1101
		mov	ecx, [ebp-14h]
		call	sub_6B19B5B3
		push	eax		; Src
		lea	ecx, [ebp-34h]
		call	Ordinal1103
		lea	ecx, [ebp-34h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B19B856
		retn
sub_6B19B87F	endp


; =============== S U B	R O U T	I N E =======================================


; int __fastcall sub_6B19B8C2(void *)
sub_6B19B8C2	proc near		; CODE XREF: sub_6B19B8EF+9p
		push	esi
		push	edi
		mov	esi, ecx
		lea	edi, [esi+8]
		push	edi		; lpAddend
		call	ds:InterlockedDecrement
		test	eax, eax
		jnz	short loc_6B19B8EA
		test	esi, esi
		jz	short loc_6B19B8E6
		mov	ecx, esi
		call	sub_6B19B45A
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B19B8E6:				; CODE XREF: sub_6B19B8C2+14j
		xor	eax, eax
		jmp	short loc_6B19B8EC
; ---------------------------------------------------------------------------

loc_6B19B8EA:				; CODE XREF: sub_6B19B8C2+10j
		mov	eax, [edi]

loc_6B19B8EC:				; CODE XREF: sub_6B19B8C2+26j
		pop	edi
		pop	esi
		retn
sub_6B19B8C2	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19B8EF	proc near		; CODE XREF: sub_6B19B902+Ep
		push	esi
		mov	esi, ecx
		mov	ecx, [esi]	; void *
		test	ecx, ecx
		jz	short loc_6B19B900
		call	sub_6B19B8C2
		and	dword ptr [esi], 0

loc_6B19B900:				; CODE XREF: sub_6B19B8EF+7j
		pop	esi
		retn
sub_6B19B8EF	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6B19B902(OLECHAR *psz)
sub_6B19B902	proc near		; CODE XREF: Ordinal1287+30p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
psz		= dword	ptr  8

		mov	eax, offset unknown_libname_101	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	esi
		mov	esi, ecx
		call	sub_6B19B8EF
		push	0Ch		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		pop	ecx
		mov	ecx, eax
		mov	[ebp+var_10], ecx
		and	[ebp+var_4], 0
		test	ecx, ecx
		jz	short loc_6B19B934
		push	[ebp+psz]	; psz
		call	sub_6B19B3F5
		jmp	short loc_6B19B936
; ---------------------------------------------------------------------------

loc_6B19B934:				; CODE XREF: sub_6B19B902+26j
		xor	eax, eax

loc_6B19B936:				; CODE XREF: sub_6B19B902+30j
		or	[ebp+var_4], 0FFFFFFFFh
		test	eax, eax
		mov	[esi], eax
		jnz	short loc_6B19B94A
		push	8007000Eh
		call	sub_6B1A8F50
; ---------------------------------------------------------------------------

loc_6B19B94A:				; CODE XREF: sub_6B19B902+3Cj
		mov	ecx, [ebp+var_C]
		mov	eax, esi
		pop	esi
		mov	large fs:0, ecx
		leave
		retn	4
sub_6B19B902	endp

; Exported entry 1287.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1287
Ordinal1287	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_34		= byte ptr -34h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_102	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 28h
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCpropertyhel_4 ; "CPropertyHelper::PutString()"
		lea	ecx, [ebp+var_34]
		call	Ordinal1089
		mov	eax, [ebp+arg_4]
		and	[ebp+var_4], 0
		push	dword ptr [eax]	; psz
		mov	ecx, [ebp+arg_0]
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B19B902

loc_6B19B990:				; DATA XREF: sub_6B19B9B9+3Do
		lea	ecx, [ebp+var_34]
		call	Ordinal1635
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		lea	ecx, [ebp+var_34]
		neg	esi
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		pop	edi
		mov	eax, esi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn
Ordinal1287	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19B9B9	proc near		; DATA XREF: .rdata:6B1BC7D4o
		push	14h
		lea	ecx, [ebp-34h]
		call	Ordinal1095
		push	offset a_com_error ; "_com_error"
		lea	ecx, [ebp-34h]
		call	Ordinal1101
		mov	ecx, [ebp-14h]
		call	sub_6B19B5B3
		push	eax		; Src
		lea	ecx, [ebp-34h]
		call	Ordinal1103
		lea	ecx, [ebp-34h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B19B990
		retn
sub_6B19B9B9	endp

; Exported entry 1307.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1307
Ordinal1307	proc near		; CODE XREF: Ordinal1302+12p
					; Ordinal1306+5p
					; DATA XREF: ...

var_1		= byte ptr -1
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		xor	ebx, ebx
		cmp	[ebp+arg_0], bl
		push	esi
		mov	esi, ecx
		jz	short loc_6B19BA18
		call	Ordinal1230
		test	al, al
		jz	loc_6B19BC81

loc_6B19BA18:				; CODE XREF: Ordinal1307+Dj
		cmp	[ebp+arg_0], bl
		mov	[ebp+var_1], 1
		jnz	short loc_6B19BA6E
		mov	[esi+8], ebx
		mov	[esi+0Ch], ebx
		mov	[esi+10h], ebx
		mov	[esi+14h], ebx
		mov	[esi+18h], ebx
		mov	[esi+1Ch], ebx
		mov	[esi+20h], ebx
		mov	[esi+24h], ebx
		mov	[esi+28h], ebx
		mov	[esi+2Ch], ebx
		mov	[esi+30h], ebx
		mov	[esi+34h], ebx
		mov	[esi+38h], ebx
		mov	[esi+3Ch], ebx
		mov	[esi+40h], ebx
		mov	[esi+44h], ebx
		mov	[esi+48h], ebx
		mov	[esi+4Ch], ebx
		mov	[esi+50h], ebx
		mov	[esi+54h], ebx
		mov	[esi+58h], ebx
		mov	[esi+5Ch], ebx
		mov	[esi+60h], ebx
		mov	[esi+64h], ebx
		jmp	loc_6B19BC7E
; ---------------------------------------------------------------------------

loc_6B19BA6E:				; CODE XREF: Ordinal1307+23j
		push	offset aEmptyworkingse ; "EmptyWorkingSet"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+8], eax
		jnz	short loc_6B19BA84
		mov	[ebp+var_1], bl

loc_6B19BA84:				; CODE XREF: Ordinal1307+83j
		push	offset aEnumdevicedriv ; "EnumDeviceDrivers"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+0Ch], eax
		jnz	short loc_6B19BA9A
		mov	[ebp+var_1], bl

loc_6B19BA9A:				; CODE XREF: Ordinal1307+99j
		push	offset aEnumpagefilesa ; "EnumPageFilesA"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+10h], eax
		jnz	short loc_6B19BAB0
		mov	[ebp+var_1], bl

loc_6B19BAB0:				; CODE XREF: Ordinal1307+AFj
		push	offset aEnumpagefilesw ; "EnumPageFilesW"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+14h], eax
		jnz	short loc_6B19BAC6
		mov	[ebp+var_1], bl

loc_6B19BAC6:				; CODE XREF: Ordinal1307+C5j
		push	offset aEnumprocesses ;	"EnumProcesses"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+18h], eax
		jnz	short loc_6B19BADC
		mov	[ebp+var_1], bl

loc_6B19BADC:				; CODE XREF: Ordinal1307+DBj
		push	offset aEnumprocessmod ; "EnumProcessModules"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+1Ch], eax
		jnz	short loc_6B19BAF2
		mov	[ebp+var_1], bl

loc_6B19BAF2:				; CODE XREF: Ordinal1307+F1j
		push	offset aGetdevicedrive ; "GetDeviceDriverBaseNameA"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+20h], eax
		jnz	short loc_6B19BB08
		mov	[ebp+var_1], bl

loc_6B19BB08:				; CODE XREF: Ordinal1307+107j
		push	offset aGetdevicedri_0 ; "GetDeviceDriverBaseNameW"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+24h], eax
		jnz	short loc_6B19BB1E
		mov	[ebp+var_1], bl

loc_6B19BB1E:				; CODE XREF: Ordinal1307+11Dj
		push	offset aGetdevicedri_1 ; "GetDeviceDriverFileNameA"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+28h], eax
		jnz	short loc_6B19BB34
		mov	[ebp+var_1], bl

loc_6B19BB34:				; CODE XREF: Ordinal1307+133j
		push	offset aGetdevicedri_2 ; "GetDeviceDriverFileNameW"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+2Ch], eax
		jnz	short loc_6B19BB4A
		mov	[ebp+var_1], bl

loc_6B19BB4A:				; CODE XREF: Ordinal1307+149j
		push	offset aGetmappedfilen ; "GetMappedFileNameA"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+30h], eax
		jnz	short loc_6B19BB60
		mov	[ebp+var_1], bl

loc_6B19BB60:				; CODE XREF: Ordinal1307+15Fj
		push	offset aGetmappedfil_0 ; "GetMappedFileNameW"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+34h], eax
		jnz	short loc_6B19BB76
		mov	[ebp+var_1], bl

loc_6B19BB76:				; CODE XREF: Ordinal1307+175j
		push	offset aGetmodulebasen ; "GetModuleBaseNameA"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+38h], eax
		jnz	short loc_6B19BB8C
		mov	[ebp+var_1], bl

loc_6B19BB8C:				; CODE XREF: Ordinal1307+18Bj
		push	offset aGetmodulebas_0 ; "GetModuleBaseNameW"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+3Ch], eax
		jnz	short loc_6B19BBA2
		mov	[ebp+var_1], bl

loc_6B19BBA2:				; CODE XREF: Ordinal1307+1A1j
		push	offset aGetmodulefilen ; "GetModuleFileNameExA"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+40h], eax
		jnz	short loc_6B19BBB8
		mov	[ebp+var_1], bl

loc_6B19BBB8:				; CODE XREF: Ordinal1307+1B7j
		push	offset aGetmodulefil_0 ; "GetModuleFileNameExW"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+44h], eax
		jnz	short loc_6B19BBCE
		mov	[ebp+var_1], bl

loc_6B19BBCE:				; CODE XREF: Ordinal1307+1CDj
		push	offset aGetmoduleinfor ; "GetModuleInformation"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+48h], eax
		jnz	short loc_6B19BBE4
		mov	[ebp+var_1], bl

loc_6B19BBE4:				; CODE XREF: Ordinal1307+1E3j
		push	offset aGetperformance ; "GetPerformanceInfo"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+4Ch], eax
		jnz	short loc_6B19BBFA
		mov	[ebp+var_1], bl

loc_6B19BBFA:				; CODE XREF: Ordinal1307+1F9j
		push	offset aGetprocessimag ; "GetProcessImageFileNameA"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+50h], eax
		jnz	short loc_6B19BC10
		mov	[ebp+var_1], bl

loc_6B19BC10:				; CODE XREF: Ordinal1307+20Fj
		push	offset aGetprocessim_0 ; "GetProcessImageFileNameW"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+54h], eax
		jnz	short loc_6B19BC26
		mov	[ebp+var_1], bl

loc_6B19BC26:				; CODE XREF: Ordinal1307+225j
		push	offset aGetprocessmemo ; "GetProcessMemoryInfo"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+58h], eax
		jnz	short loc_6B19BC3C
		mov	[ebp+var_1], bl

loc_6B19BC3C:				; CODE XREF: Ordinal1307+23Bj
		push	offset aGetwschanges ; "GetWsChanges"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+5Ch], eax
		jnz	short loc_6B19BC52
		mov	[ebp+var_1], bl

loc_6B19BC52:				; CODE XREF: Ordinal1307+251j
		push	offset aInitializeproc ; "InitializeProcessForWsWatch"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+60h], eax
		jnz	short loc_6B19BC68
		mov	[ebp+var_1], bl

loc_6B19BC68:				; CODE XREF: Ordinal1307+267j
		push	offset aQueryworkingse ; "QueryWorkingSet"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+64h], eax
		jnz	short loc_6B19BC7E
		mov	[ebp+var_1], bl

loc_6B19BC7E:				; CODE XREF: Ordinal1307+6Dj
					; Ordinal1307+27Dj
		mov	al, [ebp+var_1]

loc_6B19BC81:				; CODE XREF: Ordinal1307+16j
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal1307	endp

; Exported entry 1302.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1302
Ordinal1302	proc near		; CODE XREF: Ordinal1686+Cp
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	Ordinal1219
		push	0
		mov	ecx, esi
		mov	dword ptr [esi], offset	off_6B1B5A38
		call	Ordinal1307
		mov	eax, esi
		pop	esi
		retn
Ordinal1302	endp

; Exported entry 1304.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1304(LPCSTR Args)
		public Ordinal1304
Ordinal1304	proc near		; CODE XREF: Ordinal1308+Fp
					; DATA XREF: .rdata:off_6B1BF428o

Args		= dword	ptr  4

		push	esi
		push	[esp+4+Args]	; Args
		mov	esi, ecx
		call	Ordinal1226
		test	al, al
		jz	short loc_6B19BCBD
		mov	ecx, esi
		call	Ordinal1230
		test	al, al
		jnz	short loc_6B19BCC4

loc_6B19BCBD:				; CODE XREF: Ordinal1304+Ej
		xor	al, al
		jmp	loc_6B19BEC2
; ---------------------------------------------------------------------------

loc_6B19BCC4:				; CODE XREF: Ordinal1304+19j
		push	ebx
		push	offset aEmptyworkingse ; "EmptyWorkingSet"
		mov	ecx, esi
		mov	bl, 1
		call	Ordinal1229
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6B19BCDC
		xor	bl, bl

loc_6B19BCDC:				; CODE XREF: Ordinal1304+36j
		push	offset aEnumdevicedriv ; "EnumDeviceDrivers"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+0Ch], eax
		jnz	short loc_6B19BCF1
		xor	bl, bl

loc_6B19BCF1:				; CODE XREF: Ordinal1304+4Bj
		push	offset aEnumpagefilesa ; "EnumPageFilesA"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+10h], eax
		jnz	short loc_6B19BD06
		xor	bl, bl

loc_6B19BD06:				; CODE XREF: Ordinal1304+60j
		push	offset aEnumpagefilesw ; "EnumPageFilesW"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+14h], eax
		jnz	short loc_6B19BD1B
		xor	bl, bl

loc_6B19BD1B:				; CODE XREF: Ordinal1304+75j
		push	offset aEnumprocesses ;	"EnumProcesses"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+18h], eax
		jnz	short loc_6B19BD30
		xor	bl, bl

loc_6B19BD30:				; CODE XREF: Ordinal1304+8Aj
		push	offset aEnumprocessmod ; "EnumProcessModules"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+1Ch], eax
		jnz	short loc_6B19BD45
		xor	bl, bl

loc_6B19BD45:				; CODE XREF: Ordinal1304+9Fj
		push	offset aGetdevicedrive ; "GetDeviceDriverBaseNameA"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+20h], eax
		jnz	short loc_6B19BD5A
		xor	bl, bl

loc_6B19BD5A:				; CODE XREF: Ordinal1304+B4j
		push	offset aGetdevicedri_0 ; "GetDeviceDriverBaseNameW"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+24h], eax
		jnz	short loc_6B19BD6F
		xor	bl, bl

loc_6B19BD6F:				; CODE XREF: Ordinal1304+C9j
		push	offset aGetdevicedri_1 ; "GetDeviceDriverFileNameA"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+28h], eax
		jnz	short loc_6B19BD84
		xor	bl, bl

loc_6B19BD84:				; CODE XREF: Ordinal1304+DEj
		push	offset aGetdevicedri_2 ; "GetDeviceDriverFileNameW"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+2Ch], eax
		jnz	short loc_6B19BD99
		xor	bl, bl

loc_6B19BD99:				; CODE XREF: Ordinal1304+F3j
		push	offset aGetmappedfilen ; "GetMappedFileNameA"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+30h], eax
		jnz	short loc_6B19BDAE
		xor	bl, bl

loc_6B19BDAE:				; CODE XREF: Ordinal1304+108j
		push	offset aGetmappedfil_0 ; "GetMappedFileNameW"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+34h], eax
		jnz	short loc_6B19BDC3
		xor	bl, bl

loc_6B19BDC3:				; CODE XREF: Ordinal1304+11Dj
		push	offset aGetmodulebasen ; "GetModuleBaseNameA"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+38h], eax
		jnz	short loc_6B19BDD8
		xor	bl, bl

loc_6B19BDD8:				; CODE XREF: Ordinal1304+132j
		push	offset aGetmodulebas_0 ; "GetModuleBaseNameW"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+3Ch], eax
		jnz	short loc_6B19BDED
		xor	bl, bl

loc_6B19BDED:				; CODE XREF: Ordinal1304+147j
		push	offset aGetmodulefilen ; "GetModuleFileNameExA"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+40h], eax
		jnz	short loc_6B19BE02
		xor	bl, bl

loc_6B19BE02:				; CODE XREF: Ordinal1304+15Cj
		push	offset aGetmodulefil_0 ; "GetModuleFileNameExW"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+44h], eax
		jnz	short loc_6B19BE17
		xor	bl, bl

loc_6B19BE17:				; CODE XREF: Ordinal1304+171j
		push	offset aGetmoduleinfor ; "GetModuleInformation"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+48h], eax
		jnz	short loc_6B19BE2C
		xor	bl, bl

loc_6B19BE2C:				; CODE XREF: Ordinal1304+186j
		push	offset aGetperformance ; "GetPerformanceInfo"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+4Ch], eax
		jnz	short loc_6B19BE41
		xor	bl, bl

loc_6B19BE41:				; CODE XREF: Ordinal1304+19Bj
		push	offset aGetprocessimag ; "GetProcessImageFileNameA"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+50h], eax
		jnz	short loc_6B19BE56
		xor	bl, bl

loc_6B19BE56:				; CODE XREF: Ordinal1304+1B0j
		push	offset aGetprocessim_0 ; "GetProcessImageFileNameW"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+54h], eax
		jnz	short loc_6B19BE6B
		xor	bl, bl

loc_6B19BE6B:				; CODE XREF: Ordinal1304+1C5j
		push	offset aGetprocessmemo ; "GetProcessMemoryInfo"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+58h], eax
		jnz	short loc_6B19BE80
		xor	bl, bl

loc_6B19BE80:				; CODE XREF: Ordinal1304+1DAj
		push	offset aGetwschanges ; "GetWsChanges"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+5Ch], eax
		jnz	short loc_6B19BE95
		xor	bl, bl

loc_6B19BE95:				; CODE XREF: Ordinal1304+1EFj
		push	offset aInitializeproc ; "InitializeProcessForWsWatch"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+60h], eax
		jnz	short loc_6B19BEAA
		xor	bl, bl

loc_6B19BEAA:				; CODE XREF: Ordinal1304+204j
		push	offset aQueryworkingse ; "QueryWorkingSet"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+64h], eax
		jnz	short loc_6B19BEBF
		xor	bl, bl

loc_6B19BEBF:				; CODE XREF: Ordinal1304+219j
		mov	al, bl
		pop	ebx

loc_6B19BEC2:				; CODE XREF: Ordinal1304+1Dj
		pop	esi
		retn	4
Ordinal1304	endp

; Exported entry 1305.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1305(LPCSTR Args, DWORD dwFlags)
		public Ordinal1305
Ordinal1305	proc near		; DATA XREF: .rdata:off_6B1BF428o

Args		= dword	ptr  4
dwFlags		= dword	ptr  8

		push	esi
		push	[esp+4+dwFlags]	; dwFlags
		mov	esi, ecx
		push	[esp+8+Args]	; Args
		call	Ordinal1227
		test	al, al
		jz	short loc_6B19BEE5
		mov	ecx, esi
		call	Ordinal1230
		test	al, al
		jnz	short loc_6B19BEEC

loc_6B19BEE5:				; CODE XREF: Ordinal1305+12j
		xor	al, al
		jmp	loc_6B19C0EA
; ---------------------------------------------------------------------------

loc_6B19BEEC:				; CODE XREF: Ordinal1305+1Dj
		push	ebx
		push	offset aEmptyworkingse ; "EmptyWorkingSet"
		mov	ecx, esi
		mov	bl, 1
		call	Ordinal1229
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6B19BF04
		xor	bl, bl

loc_6B19BF04:				; CODE XREF: Ordinal1305+3Aj
		push	offset aEnumdevicedriv ; "EnumDeviceDrivers"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+0Ch], eax
		jnz	short loc_6B19BF19
		xor	bl, bl

loc_6B19BF19:				; CODE XREF: Ordinal1305+4Fj
		push	offset aEnumpagefilesa ; "EnumPageFilesA"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+10h], eax
		jnz	short loc_6B19BF2E
		xor	bl, bl

loc_6B19BF2E:				; CODE XREF: Ordinal1305+64j
		push	offset aEnumpagefilesw ; "EnumPageFilesW"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+14h], eax
		jnz	short loc_6B19BF43
		xor	bl, bl

loc_6B19BF43:				; CODE XREF: Ordinal1305+79j
		push	offset aEnumprocesses ;	"EnumProcesses"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+18h], eax
		jnz	short loc_6B19BF58
		xor	bl, bl

loc_6B19BF58:				; CODE XREF: Ordinal1305+8Ej
		push	offset aEnumprocessmod ; "EnumProcessModules"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+1Ch], eax
		jnz	short loc_6B19BF6D
		xor	bl, bl

loc_6B19BF6D:				; CODE XREF: Ordinal1305+A3j
		push	offset aGetdevicedrive ; "GetDeviceDriverBaseNameA"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+20h], eax
		jnz	short loc_6B19BF82
		xor	bl, bl

loc_6B19BF82:				; CODE XREF: Ordinal1305+B8j
		push	offset aGetdevicedri_0 ; "GetDeviceDriverBaseNameW"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+24h], eax
		jnz	short loc_6B19BF97
		xor	bl, bl

loc_6B19BF97:				; CODE XREF: Ordinal1305+CDj
		push	offset aGetdevicedri_1 ; "GetDeviceDriverFileNameA"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+28h], eax
		jnz	short loc_6B19BFAC
		xor	bl, bl

loc_6B19BFAC:				; CODE XREF: Ordinal1305+E2j
		push	offset aGetdevicedri_2 ; "GetDeviceDriverFileNameW"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+2Ch], eax
		jnz	short loc_6B19BFC1
		xor	bl, bl

loc_6B19BFC1:				; CODE XREF: Ordinal1305+F7j
		push	offset aGetmappedfilen ; "GetMappedFileNameA"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+30h], eax
		jnz	short loc_6B19BFD6
		xor	bl, bl

loc_6B19BFD6:				; CODE XREF: Ordinal1305+10Cj
		push	offset aGetmappedfil_0 ; "GetMappedFileNameW"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+34h], eax
		jnz	short loc_6B19BFEB
		xor	bl, bl

loc_6B19BFEB:				; CODE XREF: Ordinal1305+121j
		push	offset aGetmodulebasen ; "GetModuleBaseNameA"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+38h], eax
		jnz	short loc_6B19C000
		xor	bl, bl

loc_6B19C000:				; CODE XREF: Ordinal1305+136j
		push	offset aGetmodulebas_0 ; "GetModuleBaseNameW"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+3Ch], eax
		jnz	short loc_6B19C015
		xor	bl, bl

loc_6B19C015:				; CODE XREF: Ordinal1305+14Bj
		push	offset aGetmodulefilen ; "GetModuleFileNameExA"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+40h], eax
		jnz	short loc_6B19C02A
		xor	bl, bl

loc_6B19C02A:				; CODE XREF: Ordinal1305+160j
		push	offset aGetmodulefil_0 ; "GetModuleFileNameExW"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+44h], eax
		jnz	short loc_6B19C03F
		xor	bl, bl

loc_6B19C03F:				; CODE XREF: Ordinal1305+175j
		push	offset aGetmoduleinfor ; "GetModuleInformation"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+48h], eax
		jnz	short loc_6B19C054
		xor	bl, bl

loc_6B19C054:				; CODE XREF: Ordinal1305+18Aj
		push	offset aGetperformance ; "GetPerformanceInfo"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+4Ch], eax
		jnz	short loc_6B19C069
		xor	bl, bl

loc_6B19C069:				; CODE XREF: Ordinal1305+19Fj
		push	offset aGetprocessimag ; "GetProcessImageFileNameA"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+50h], eax
		jnz	short loc_6B19C07E
		xor	bl, bl

loc_6B19C07E:				; CODE XREF: Ordinal1305+1B4j
		push	offset aGetprocessim_0 ; "GetProcessImageFileNameW"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+54h], eax
		jnz	short loc_6B19C093
		xor	bl, bl

loc_6B19C093:				; CODE XREF: Ordinal1305+1C9j
		push	offset aGetprocessmemo ; "GetProcessMemoryInfo"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+58h], eax
		jnz	short loc_6B19C0A8
		xor	bl, bl

loc_6B19C0A8:				; CODE XREF: Ordinal1305+1DEj
		push	offset aGetwschanges ; "GetWsChanges"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+5Ch], eax
		jnz	short loc_6B19C0BD
		xor	bl, bl

loc_6B19C0BD:				; CODE XREF: Ordinal1305+1F3j
		push	offset aInitializeproc ; "InitializeProcessForWsWatch"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+60h], eax
		jnz	short loc_6B19C0D2
		xor	bl, bl

loc_6B19C0D2:				; CODE XREF: Ordinal1305+208j
		push	offset aQueryworkingse ; "QueryWorkingSet"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+64h], eax
		jnz	short loc_6B19C0E7
		xor	bl, bl

loc_6B19C0E7:				; CODE XREF: Ordinal1305+21Dj
		mov	al, bl
		pop	ebx

loc_6B19C0EA:				; CODE XREF: Ordinal1305+21j
		pop	esi
		retn	8
Ordinal1305	endp

; Exported entry 1306.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1306
Ordinal1306	proc near		; CODE XREF: Ordinal1309j
					; Ordinal1303+9p ...
		push	esi
		push	0
		mov	esi, ecx
		call	Ordinal1307
		mov	ecx, esi
		pop	esi
		jmp	Ordinal1228
Ordinal1306	endp

; Exported entry 1309.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1309
Ordinal1309	proc near		; CODE XREF: Ordinal1689+6p
					; DATA XREF: .rdata:off_6B1BF428o
		jmp	Ordinal1306
Ordinal1309	endp

; Exported entry 1303.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1303
Ordinal1303	proc near		; CODE XREF: sub_6B19C1D7+3p
					; Ordinal1687+22j
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1B5A38
		call	Ordinal1306
		mov	ecx, esi
		pop	esi
		jmp	Ordinal1221
Ordinal1303	endp

; Exported entry 1308.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1308
Ordinal1308	proc near		; CODE XREF: Ordinal1688+Fp
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	Ordinal1306
		push	offset aPsapi_dll ; "PSAPI.DLL"
		mov	ecx, esi
		call	Ordinal1304
		test	al, al
		jnz	loc_6B19C1D3
		xor	eax, eax
		cmp	[esi+8], eax
		jz	short loc_6B19C1BD
		cmp	[esi+0Ch], eax
		jz	short loc_6B19C1BD
		cmp	[esi+18h], eax
		jz	short loc_6B19C1BD
		cmp	[esi+1Ch], eax
		jz	short loc_6B19C1BD
		cmp	[esi+20h], eax
		jz	short loc_6B19C1BD
		cmp	[esi+24h], eax
		jz	short loc_6B19C1BD
		cmp	[esi+28h], eax
		jz	short loc_6B19C1BD
		cmp	[esi+2Ch], eax
		jz	short loc_6B19C1BD
		cmp	[esi+30h], eax
		jz	short loc_6B19C1BD
		cmp	[esi+34h], eax
		jz	short loc_6B19C1BD
		cmp	[esi+38h], eax
		jz	short loc_6B19C1BD
		cmp	[esi+3Ch], eax
		jz	short loc_6B19C1BD
		cmp	[esi+40h], eax
		jz	short loc_6B19C1BD
		cmp	[esi+44h], eax
		jz	short loc_6B19C1BD
		cmp	[esi+48h], eax
		jz	short loc_6B19C1BD
		cmp	[esi+58h], eax
		jz	short loc_6B19C1BD
		cmp	[esi+5Ch], eax
		jz	short loc_6B19C1BD
		cmp	[esi+60h], eax
		jz	short loc_6B19C1BD
		cmp	[esi+64h], eax
		jz	short loc_6B19C1BD
		cmp	[esi+4Ch], eax
		jz	short loc_6B19C1B1
		cmp	[esi+10h], eax
		jz	short loc_6B19C1B1
		cmp	[esi+14h], eax
		jz	short loc_6B19C1B1
		cmp	[esi+50h], eax
		jz	short loc_6B19C1B1
		cmp	[esi+54h], eax
		jnz	short loc_6B19C1D3

loc_6B19C1B1:				; CODE XREF: Ordinal1308+80j
					; Ordinal1308+85j ...
		push	1
		call	Ordinal1273
		test	al, al
		pop	ecx
		jz	short loc_6B19C1D3

loc_6B19C1BD:				; CODE XREF: Ordinal1308+21j
					; Ordinal1308+26j ...
		push	offset aCpsapiCreateLo ; "CPSAPI::Create() : Load() == FALSE\n"
		call	sub_6B18102E
		pop	ecx
		mov	ecx, esi
		call	Ordinal1306
		xor	al, al
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6B19C1D3:				; CODE XREF: Ordinal1308+16j
					; Ordinal1308+94j ...
		mov	al, 1
		pop	esi
		retn
Ordinal1308	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B19C1D7(void *, char)
sub_6B19C1D7	proc near		; DATA XREF: .rdata:off_6B1B5A38o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1303
		test	[esp+4+arg_0], 1
		jz	short loc_6B19C1ED
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B19C1ED:				; CODE XREF: sub_6B19C1D7+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B19C1D7	endp

; Exported entry 1310.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1310
Ordinal1310	proc near		; CODE XREF: Ordinal897+3p
					; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, ecx
		and	dword ptr [eax+4], 0
		and	dword ptr [eax+8], 0
		mov	dword ptr [eax], offset	off_6B1B5A6C
		mov	dword_6B1C132C,	eax
		retn
Ordinal1310	endp

; Exported entry 1313.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1313
Ordinal1313	proc near		; CODE XREF: Ordinal906+23p
					; Ordinal1311+6p ...
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+8], 0
		jz	short loc_6B19C21C
		push	dword ptr [esi+4] ; Handler
		call	ds:_set_purecall_handler
		pop	ecx

loc_6B19C21C:				; CODE XREF: Ordinal1313+7j
		and	dword ptr [esi+8], 0
		pop	esi
		retn
Ordinal1313	endp


; =============== S U B	R O U T	I N E =======================================


; void __cdecl Handler()
Handler		proc near		; DATA XREF: Ordinal1312+8o
					; Ordinal1314+19o
		mov	ecx, dword_6B1C132C
		test	ecx, ecx
		jz	short locret_6B19C231
		mov	eax, [ecx]
		jmp	dword ptr [eax+4]
; ---------------------------------------------------------------------------

locret_6B19C231:			; CODE XREF: Handler+8j
		retn
Handler		endp

; Exported entry 1311.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1311
Ordinal1311	proc near		; CODE XREF: Ordinal898+6j
					; sub_6B19C289+3p
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6B1B5A6C
		call	Ordinal1313
		and	dword_6B1C132C,	0
		retn
Ordinal1311	endp

; Exported entry 1312.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1312
Ordinal1312	proc near		; CODE XREF: Ordinal905+112p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	Ordinal1313
		push	offset Handler	; Handler
		call	ds:_set_purecall_handler
		mov	[esi+4], eax
		xor	eax, eax
		inc	eax
		pop	ecx
		mov	[esi+8], eax
		pop	esi
		retn
Ordinal1312	endp

; Exported entry 1314.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1314
Ordinal1314	proc near		; CODE XREF: Ordinal899+1Dj
					; DATA XREF: .rdata:6B1B5A70o ...

var_8		= dword	ptr -8

		mov	eax, [ecx+4]
		test	eax, eax
		jz	short loc_6B19C26D
		jmp	eax
; ---------------------------------------------------------------------------

loc_6B19C26D:				; CODE XREF: Ordinal1314+5j
		push	esi
		mov	esi, ds:_set_purecall_handler
		push	0		; Handler
		call	esi ; _set_purecall_handler
		call	_purecall
		mov	[esp+8+var_8], offset Handler
		call	esi ; _set_purecall_handler
		pop	ecx
		pop	esi
		retn
Ordinal1314	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B19C289(void *, char)
sub_6B19C289	proc near		; DATA XREF: .rdata:off_6B1B5A6Co

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1311
		test	[esp+4+arg_0], 1
		jz	short loc_6B19C29F
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B19C29F:				; CODE XREF: sub_6B19C289+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B19C289	endp

; Exported entry 1316.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1316
Ordinal1316	proc near		; CODE XREF: Ordinal130+Ap
					; Ordinal145+46p ...
		mov	eax, ecx
		and	dword ptr [eax+4], 0
		and	dword ptr [eax+8], 0
		mov	dword ptr [eax], offset	off_6B1B5A74
		retn
Ordinal1316	endp

; Exported entry 1322.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1322
Ordinal1322	proc near		; CODE XREF: Ordinal1327+8p
					; Ordinal1318+6j ...
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6B19C2CE
		push	eax		; hKey
		call	RegCloseKey
		and	dword ptr [esi+4], 0
		mov	[esi+8], eax

loc_6B19C2CE:				; CODE XREF: Ordinal1322+8j
		xor	eax, eax
		cmp	[esi+8], eax
		pop	esi
		setz	al
		retn
Ordinal1322	endp

; Exported entry 1323.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1323(LPCSTR pszSubKey)
		public Ordinal1323
Ordinal1323	proc near		; CODE XREF: Ordinal145+302p
					; Ordinal1057+44p
					; DATA XREF: ...

pszSubKey	= dword	ptr  4

		mov	eax, [esp+pszSubKey]
		test	eax, eax
		push	esi
		mov	esi, ecx
		jnz	short loc_6B19C2E8
		mov	eax, offset ValueName

loc_6B19C2E8:				; CODE XREF: Ordinal1323+9j
		push	eax		; pszSubKey
		push	dword ptr [esi+4] ; hkey
		call	ds:SHDeleteKeyA
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		pop	esi
		mov	eax, ecx
		retn	4
Ordinal1323	endp

; Exported entry 1324.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1324(LPCSTR pszSubKey)
		public Ordinal1324
Ordinal1324	proc near		; DATA XREF: .rdata:off_6B1BF428o

pszSubKey	= dword	ptr  4

		mov	eax, [esp+pszSubKey]
		test	eax, eax
		push	esi
		mov	esi, ecx
		jnz	short loc_6B19C312
		mov	eax, offset ValueName

loc_6B19C312:				; CODE XREF: Ordinal1324+9j
		push	eax		; pszSubKey
		push	dword ptr [esi+4] ; hkey
		call	ds:SHDeleteEmptyKeyA
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		pop	esi
		mov	eax, ecx
		retn	4
Ordinal1324	endp

; Exported entry 1327.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1327
Ordinal1327	proc near		; CODE XREF: Ordinal1325+7p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, [ecx+4]
		and	dword ptr [ecx+4], 0
		call	Ordinal1322
		mov	eax, esi
		pop	esi
		retn
Ordinal1327	endp

; Exported entry 1328.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1328(LPCSTR lpValueName)
		public Ordinal1328
Ordinal1328	proc near		; CODE XREF: Ordinal1423+90p
					; DATA XREF: .rdata:off_6B1BF428o

lpValueName	= dword	ptr  4

		push	esi
		push	[esp+4+lpValueName] ; lpValueName
		mov	esi, ecx
		push	dword ptr [esi+4] ; hKey
		call	RegDeleteValueA
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		pop	esi
		mov	eax, ecx
		retn	4
Ordinal1328	endp

; Exported entry 1331.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1331(LPCSTR lpValueName,	LPBYTE lpData, LPDWORD lpcbData)
		public Ordinal1331
Ordinal1331	proc near		; CODE XREF: Ordinal969+A3p
					; DATA XREF: .rdata:off_6B1BF428o

Type		= dword	ptr -4
lpValueName	= dword	ptr  8
lpData		= dword	ptr  0Ch
lpcbData	= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		and	[ebp+Type], 0
		push	esi
		push	[ebp+lpcbData]	; lpcbData
		lea	eax, [ebp+Type]
		push	[ebp+lpData]	; lpData
		mov	esi, ecx
		push	eax		; lpType
		push	0		; lpReserved
		push	[ebp+lpValueName] ; lpValueName
		push	dword ptr [esi+4] ; hKey
		call	RegQueryValueExA
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		pop	esi
		mov	eax, ecx
		leave
		retn	0Ch
Ordinal1331	endp

; Exported entry 1334.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1334(LPCSTR lpValueName,	LPCSTR lpData, DWORD dwType)
		public Ordinal1334
Ordinal1334	proc near		; CODE XREF: Ordinal1056+196p
					; Ordinal1333+Ap ...

lpValueName	= dword	ptr  4
lpData		= dword	ptr  8
dwType		= dword	ptr  0Ch

		push	esi
		push	[esp+4+lpData]	; lpString
		mov	esi, ecx
		call	ds:lstrlenA
		inc	eax
		push	eax		; cbData
		push	[esp+8+lpData]	; lpData
		push	[esp+0Ch+dwType] ; dwType
		push	0		; Reserved
		push	[esp+14h+lpValueName] ;	lpValueName
		push	dword ptr [esi+4] ; hKey
		call	RegSetValueExA
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		pop	esi
		mov	eax, ecx
		retn	0Ch
Ordinal1334	endp

; Exported entry 1337.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1337(LPCSTR lpValueName,	LPBYTE lpData)
		public Ordinal1337
Ordinal1337	proc near		; CODE XREF: Ordinal142+185p
					; Ordinal142+1DEp ...

Type		= dword	ptr -8
cbData		= dword	ptr -4
lpValueName	= dword	ptr  8
lpData		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		and	[ebp+Type], 0
		push	esi
		lea	eax, [ebp+cbData]
		push	eax		; lpcbData
		push	[ebp+lpData]	; lpData
		lea	eax, [ebp+Type]
		push	eax		; lpType
		push	0		; lpReserved
		push	[ebp+lpValueName] ; lpValueName
		mov	esi, ecx
		push	dword ptr [esi+4] ; hKey
		mov	[ebp+cbData], 4
		call	RegQueryValueExA
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		pop	esi
		mov	eax, ecx
		leave
		retn	8
Ordinal1337	endp

; Exported entry 1338.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1338(LPCSTR lpValueName,	BYTE Data)
		public Ordinal1338
Ordinal1338	proc near		; CODE XREF: Ordinal1056+1AAp
					; Ordinal1342j
					; DATA XREF: ...

lpValueName	= dword	ptr  4
Data		= byte ptr  8

		push	esi
		push	4		; cbData
		lea	eax, [esp+8+Data]
		push	eax		; lpData
		push	4		; dwType
		push	0		; Reserved
		push	[esp+14h+lpValueName] ;	lpValueName
		mov	esi, ecx
		push	dword ptr [esi+4] ; hKey
		call	RegSetValueExA
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		pop	esi
		mov	eax, ecx
		retn	8
Ordinal1338	endp

; Exported entry 1339.
; Exported entry 1341.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1339(LPCSTR lpValueName,	int)
		public Ordinal1339
Ordinal1339	proc near		; CODE XREF: Ordinal142+BDp
					; Ordinal142+D1p ...

Data		= byte ptr -4
lpValueName	= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp		; ccL35_1339
		mov	ebp, esp
		push	ecx
		and	dword ptr [ebp+Data], 0
		lea	eax, [ebp+Data]
		push	eax		; lpData
		push	[ebp+lpValueName] ; lpValueName
		call	Ordinal1337
		test	eax, eax
		jz	short loc_6B19C454
		mov	eax, [ebp+arg_4]
		mov	ecx, dword ptr [ebp+Data]
		mov	[eax], ecx
		xor	eax, eax
		inc	eax
		jmp	short locret_6B19C456
; ---------------------------------------------------------------------------

loc_6B19C454:				; CODE XREF: Ordinal1339+16j
		xor	eax, eax

locret_6B19C456:			; CODE XREF: Ordinal1339+23j
		leave
		retn	8
Ordinal1339	endp

; Exported entry 1340.
; Exported entry 1342.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1342
Ordinal1342	proc near		; CODE XREF: Ordinal145+85p
					; Ordinal145+9Dp ...
		jmp	Ordinal1338	; ccL35_1340
Ordinal1342	endp

; Exported entry 1343.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1343(LPCSTR lpValueName,	LPBYTE lpData)
		public Ordinal1343
Ordinal1343	proc near		; DATA XREF: .rdata:off_6B1BF428o

Type		= dword	ptr -8
cbData		= dword	ptr -4
lpValueName	= dword	ptr  8
lpData		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		and	[ebp+Type], 0
		push	esi
		lea	eax, [ebp+cbData]
		push	eax		; lpcbData
		push	[ebp+lpData]	; lpData
		lea	eax, [ebp+Type]
		push	eax		; lpType
		push	0		; lpReserved
		push	[ebp+lpValueName] ; lpValueName
		mov	esi, ecx
		push	dword ptr [esi+4] ; hKey
		mov	[ebp+cbData], 8
		call	RegQueryValueExA
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		pop	esi
		mov	eax, ecx
		leave
		retn	8
Ordinal1343	endp

; Exported entry 1344.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1344(LPCSTR lpValueName,	BYTE Data, int)
		public Ordinal1344
Ordinal1344	proc near		; DATA XREF: .rdata:off_6B1BF428o

lpValueName	= dword	ptr  4
Data		= byte ptr  8

		push	esi
		push	8		; cbData
		lea	eax, [esp+8+Data]
		push	eax		; lpData
		push	0Bh		; dwType
		push	0		; Reserved
		push	[esp+14h+lpValueName] ;	lpValueName
		mov	esi, ecx
		push	dword ptr [esi+4] ; hKey
		call	RegSetValueExA
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		pop	esi
		mov	eax, ecx
		retn	0Ch
Ordinal1344	endp

; Exported entry 1345.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1345(DWORD dwIndex, LPSTR lpValueName, LPDWORD lpcchValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
		public Ordinal1345
Ordinal1345	proc near		; CODE XREF: Ordinal142+32Cp
					; DATA XREF: .rdata:off_6B1BF428o

dwIndex		= dword	ptr  8
lpValueName	= dword	ptr  0Ch
lpcchValueName	= dword	ptr  10h
lpReserved	= dword	ptr  14h
lpType		= dword	ptr  18h
lpData		= dword	ptr  1Ch
lpcbData	= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+lpcbData]	; lpcbData
		mov	esi, ecx
		push	[ebp+lpData]	; lpData
		push	[ebp+lpType]	; lpType
		push	[ebp+lpReserved] ; lpReserved
		push	[ebp+lpcchValueName] ; lpcchValueName
		push	[ebp+lpValueName] ; lpValueName
		push	[ebp+dwIndex]	; dwIndex
		push	dword ptr [esi+4] ; hKey
		call	RegEnumValueA
		mov	[esi+8], eax
		pop	esi
		pop	ebp
		retn	1Ch
Ordinal1345	endp

; Exported entry 1346.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1346(DWORD dwIndex, LPSTR lpName, LPDWORD lpcchName, LPDWORD lpReserved,	LPSTR lpClass, LPDWORD lpcchClass, PFILETIME lpftLastWriteTime)
		public Ordinal1346
Ordinal1346	proc near		; DATA XREF: .rdata:off_6B1BF428o

dwIndex		= dword	ptr  8
lpName		= dword	ptr  0Ch
lpcchName	= dword	ptr  10h
lpReserved	= dword	ptr  14h
lpClass		= dword	ptr  18h
lpcchClass	= dword	ptr  1Ch
lpftLastWriteTime= dword ptr  20h

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+lpftLastWriteTime]	; lpftLastWriteTime
		mov	esi, ecx
		push	[ebp+lpcchClass] ; lpcchClass
		push	[ebp+lpClass]	; lpClass
		push	[ebp+lpReserved] ; lpReserved
		push	[ebp+lpcchName]	; lpcchName
		push	[ebp+lpName]	; lpName
		push	[ebp+dwIndex]	; dwIndex
		push	dword ptr [esi+4] ; hKey
		call	RegEnumKeyExA
		mov	[esi+8], eax
		pop	esi
		pop	ebp
		retn	1Ch
Ordinal1346	endp

; Exported entry 1347.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1347(LPCSTR lpValueName,	LPDWORD	lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
		public Ordinal1347
Ordinal1347	proc near		; CODE XREF: Ordinal1283+120p
					; Ordinal1283+15Cp
					; DATA XREF: ...

lpValueName	= dword	ptr  8
lpReserved	= dword	ptr  0Ch
lpType		= dword	ptr  10h
lpData		= dword	ptr  14h
lpcbData	= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+lpcbData]	; lpcbData
		mov	esi, ecx
		push	[ebp+lpData]	; lpData
		push	[ebp+lpType]	; lpType
		push	[ebp+lpReserved] ; lpReserved
		push	[ebp+lpValueName] ; lpValueName
		push	dword ptr [esi+4] ; hKey
		call	RegQueryValueExA
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		pop	esi
		mov	eax, ecx
		pop	ebp
		retn	14h
Ordinal1347	endp

; Exported entry 1348.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1348(LPCSTR lpValueName,	DWORD Reserved,	DWORD dwType, BYTE *lpData, DWORD cbData)
		public Ordinal1348
Ordinal1348	proc near		; DATA XREF: .rdata:off_6B1BF428o

lpValueName	= dword	ptr  8
Reserved	= dword	ptr  0Ch
dwType		= dword	ptr  10h
lpData		= dword	ptr  14h
cbData		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+cbData]	; cbData
		mov	esi, ecx
		push	[ebp+lpData]	; lpData
		push	[ebp+dwType]	; dwType
		push	[ebp+Reserved]	; Reserved
		push	[ebp+lpValueName] ; lpValueName
		push	dword ptr [esi+4] ; hKey
		call	RegSetValueExA
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		pop	esi
		mov	eax, ecx
		pop	ebp
		retn	14h
Ordinal1348	endp

; Exported entry 1349.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1349(LPCSTR lpValueName,	LPBYTE lpData, LPDWORD lpcbData)
		public Ordinal1349
Ordinal1349	proc near		; CODE XREF: Ordinal1351+67p
					; DATA XREF: .rdata:off_6B1BF428o

lpValueName	= dword	ptr  4
lpData		= dword	ptr  8
lpcbData	= dword	ptr  0Ch

		push	esi
		push	[esp+4+lpcbData] ; lpcbData
		mov	esi, ecx
		push	[esp+8+lpData]	; lpData
		push	0		; lpType
		push	0		; lpReserved
		push	[esp+14h+lpValueName] ;	lpValueName
		push	dword ptr [esi+4] ; hKey
		call	RegQueryValueExA
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		pop	esi
		mov	eax, ecx
		retn	0Ch
Ordinal1349	endp

; Exported entry 1350.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1350(LPCSTR lpValueName,	BYTE *lpData, DWORD cbData)
		public Ordinal1350
Ordinal1350	proc near		; CODE XREF: Ordinal1352+1Dp
					; DATA XREF: .rdata:off_6B1BF428o

lpValueName	= dword	ptr  4
lpData		= dword	ptr  8
cbData		= dword	ptr  0Ch

		push	esi
		push	[esp+4+cbData]	; cbData
		mov	esi, ecx
		push	[esp+8+lpData]	; lpData
		push	3		; dwType
		push	0		; Reserved
		push	[esp+14h+lpValueName] ;	lpValueName
		push	dword ptr [esi+4] ; hKey
		call	RegSetValueExA
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		pop	esi
		mov	eax, ecx
		retn	0Ch
Ordinal1350	endp

; Exported entry 1351.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1351(LPCSTR lpValueName,	int)
		public Ordinal1351
Ordinal1351	proc near		; DATA XREF: .rdata:off_6B1BF428o

Type		= dword	ptr -8
Args		= dword	ptr -4
lpValueName	= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	esi
		mov	esi, ecx
		mov	ecx, [ebp+arg_4]
		call	Ordinal1200
		and	[ebp+Type], 0
		and	[ebp+Args], 0
		lea	eax, [ebp+Args]
		push	eax		; lpcbData
		push	0		; lpData
		lea	eax, [ebp+Type]
		push	eax		; lpType
		push	0		; lpReserved
		push	[ebp+lpValueName] ; lpValueName
		push	dword ptr [esi+4] ; hKey
		call	RegQueryValueExA
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6B19C626
		push	[ebp+Args]	; Args
		mov	ecx, [ebp+arg_4]
		call	Ordinal1196
		test	eax, eax
		jnz	short loc_6B19C62A
		push	offset aCregistryGetbi ; "CRegistry::GetBinary() : Memory.NewAllo"...
		call	sub_6B18102E
		pop	ecx

loc_6B19C626:				; CODE XREF: Ordinal1351+35j
		xor	eax, eax
		jmp	short loc_6B19C641
; ---------------------------------------------------------------------------

loc_6B19C62A:				; CODE XREF: Ordinal1351+44j
		mov	ecx, [ebp+arg_4]
		lea	eax, [ebp+Args]
		push	eax		; lpcbData
		call	Ordinal1493
		push	eax		; lpData
		push	[ebp+lpValueName] ; lpValueName
		mov	ecx, esi
		call	Ordinal1349

loc_6B19C641:				; CODE XREF: Ordinal1351+53j
		pop	esi
		leave
		retn	8
Ordinal1351	endp ; sp-analysis failed

; Exported entry 1352.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1352(LPCSTR lpValueName,	int)
		public Ordinal1352
Ordinal1352	proc near		; DATA XREF: .rdata:off_6B1BF428o

lpValueName	= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, ecx
		mov	ecx, [esp+4+arg_4]
		call	Ordinal1052
		mov	ecx, [esp+4+arg_4]
		push	eax		; cbData
		call	Ordinal1493
		push	eax		; lpData
		push	[esp+0Ch+lpValueName] ;	lpValueName
		mov	ecx, esi
		call	Ordinal1350
		pop	esi
		retn	8
Ordinal1352	endp

; Exported entry 1318.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1318
Ordinal1318	proc near		; CODE XREF: Ordinal130+53p
					; Ordinal145+33Ap ...
		mov	dword ptr [ecx], offset	off_6B1B5A74
		jmp	Ordinal1322
Ordinal1318	endp

; Exported entry 1321.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1321(HKEY hKey, LPCSTR Args, REGSAM samDesired, int)
		public Ordinal1321
Ordinal1321	proc near		; CODE XREF: Ordinal130+24p
					; Ordinal145+5Ep ...

hKey		= dword	ptr  8
Args		= dword	ptr  0Ch
samDesired	= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		call	Ordinal1322
		lea	ebx, [esi+4]
		push	ebx		; phkResult
		push	[ebp+samDesired] ; samDesired
		xor	edi, edi
		push	edi		; ulOptions
		push	[ebp+Args]	; lpSubKey
		push	[ebp+hKey]	; hKey
		call	RegOpenKeyExA
		cmp	eax, edi
		mov	[esi+8], eax
		jz	short loc_6B19C6F7
		cmp	[ebp+arg_C], edi
		jnz	short loc_6B19C6C6
		cmp	eax, 2
		jnz	short loc_6B19C6BB
		push	eax
		push	[ebp+Args]	; Args
		push	offset aCregistryOpenR ; "CRegistry::Open() : RegOpenKeyEx() !=	E"...
		call	sub_6B181006
		jmp	short loc_6B19C6F0
; ---------------------------------------------------------------------------

loc_6B19C6BB:				; CODE XREF: Ordinal1321+32j
		push	eax
		push	[ebp+Args]
		push	offset aCregistryOpenR ; "CRegistry::Open() : RegOpenKeyEx() !=	E"...
		jmp	short loc_6B19C6EB
; ---------------------------------------------------------------------------

loc_6B19C6C6:				; CODE XREF: Ordinal1321+2Dj
		push	edi		; lpdwDisposition
		push	ebx		; phkResult
		push	edi		; lpSecurityAttributes
		push	[ebp+samDesired] ; samDesired
		push	edi		; dwOptions
		push	edi		; lpClass
		push	edi		; Reserved
		push	[ebp+Args]	; lpSubKey
		push	[ebp+hKey]	; hKey
		call	RegCreateKeyExA
		cmp	eax, edi
		mov	[esi+8], eax
		jz	short loc_6B19C6F7
		push	eax
		push	[ebp+Args]	; Args
		push	offset aCregistryOpe_1 ; "CRegistry::Open() : RegCreateKeyEx() !="...

loc_6B19C6EB:				; CODE XREF: Ordinal1321+4Dj
		call	sub_6B18102E

loc_6B19C6F0:				; CODE XREF: Ordinal1321+42j
		add	esp, 0Ch
		xor	eax, eax
		jmp	short loc_6B19C6FE
; ---------------------------------------------------------------------------

loc_6B19C6F7:				; CODE XREF: Ordinal1321+28j
					; Ordinal1321+69j
		xor	eax, eax
		cmp	[ebx], edi
		setnz	al

loc_6B19C6FE:				; CODE XREF: Ordinal1321+7Ej
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn	10h
Ordinal1321	endp

; Exported entry 1326.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1326
Ordinal1326	proc near		; CODE XREF: Ordinal1319+Dp
					; Ordinal1325+Fp
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1322
		mov	eax, [esp+4+arg_0]
		xor	ecx, ecx
		test	eax, eax
		setnz	cl
		mov	[esi+4], eax
		pop	esi
		mov	eax, ecx
		retn	4
Ordinal1326	endp

; Exported entry 1333.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1333(LPCSTR lpValueName,	LPCSTR lpData)
		public Ordinal1333
Ordinal1333	proc near		; CODE XREF: Ordinal1422+C9p
					; DATA XREF: .rdata:off_6B1BF428o

lpValueName	= dword	ptr  4
lpData		= dword	ptr  8

		push	1		; dwType
		push	[esp+4+lpData]	; lpData
		push	[esp+8+lpValueName] ; lpValueName
		call	Ordinal1334
		retn	8
Ordinal1333	endp

; Exported entry 1336.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1336(LPCSTR lpValueName,	int, DWORD dwType)
		public Ordinal1336
Ordinal1336	proc near		; CODE XREF: Ordinal1335+Ap
					; DATA XREF: .rdata:off_6B1BF428o

lpValueName	= dword	ptr  4
arg_4		= dword	ptr  8
dwType		= dword	ptr  0Ch

		push	[esp+dwType]	; dwType
		mov	eax, [esp+4+arg_4]
		mov	eax, [eax]
		push	eax		; lpData
		push	[esp+8+lpValueName] ; lpValueName
		call	Ordinal1334
		retn	0Ch
Ordinal1336	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B19C74A(void *, char)
sub_6B19C74A	proc near		; DATA XREF: .rdata:off_6B1B5A74o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1B5A74
		call	Ordinal1322
		test	[esp+4+arg_0], 1
		jz	short loc_6B19C766
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B19C766:				; CODE XREF: sub_6B19C74A+13j
		mov	eax, esi
		pop	esi
		retn	4
sub_6B19C74A	endp

; Exported entry 1319.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1319
Ordinal1319	proc near		; CODE XREF: Ordinal1317+15p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, ecx
		cmp	eax, [esi+4]
		jz	short loc_6B19C78D
		push	eax
		call	Ordinal1326
		test	eax, eax
		jnz	short loc_6B19C78D
		push	offset aCregistryOpera ; "CRegistry::operator =() : Attach() ==	F"...
		call	sub_6B18102E
		pop	ecx

loc_6B19C78D:				; CODE XREF: Ordinal1319+Aj
					; Ordinal1319+14j
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1319	endp

; Exported entry 1325.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1325
Ordinal1325	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	ecx, [esp+4+arg_0]
		call	Ordinal1327
		push	eax
		mov	ecx, esi
		call	Ordinal1326
		pop	esi
		retn	4
Ordinal1325	endp

; Exported entry 1335.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1335(LPCSTR lpValueName,	int)
		public Ordinal1335
Ordinal1335	proc near		; CODE XREF: Ordinal145+15Fp
					; Ordinal145+1FCp
					; DATA XREF: ...

lpValueName	= dword	ptr  4
arg_4		= dword	ptr  8

		push	1		; dwType
		push	[esp+4+arg_4]	; int
		push	[esp+8+lpValueName] ; lpValueName
		call	Ordinal1336
		retn	8
Ordinal1335	endp

; Exported entry 1317.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1317
Ordinal1317	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		and	dword ptr [esi+4], 0
		and	dword ptr [esi+8], 0
		mov	dword ptr [esi], offset	off_6B1B5A74
		call	Ordinal1319
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1317	endp

; Exported entry 1332.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1332(LPCSTR lpValueName,	int)
		public Ordinal1332
Ordinal1332	proc near		; CODE XREF: Ordinal130+38p
					; Ordinal142+171p ...

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_30		= dword	ptr -30h
Type		= dword	ptr -2Ch
cbData		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
lpValueName	= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_103	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 4Ch
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	edi, RegQueryValueExA
		mov	[ebp+var_10], esp
		mov	[ebp+var_14], eax
		xor	ebx, ebx
		lea	eax, [ebp+cbData]
		push	eax		; lpcbData
		push	ebx		; lpData
		lea	eax, [ebp+Type]
		push	eax		; lpType
		push	ebx		; lpReserved
		push	[ebp+lpValueName] ; lpValueName
		mov	esi, ecx
		push	dword ptr [esi+4] ; hKey
		mov	[ebp+var_30], esi
		mov	[ebp+Type], ebx
		mov	[ebp+cbData], ebx
		call	edi ; RegQueryValueExA
		cmp	eax, ebx
		mov	[esi+8], eax
		jz	short loc_6B19C82B
		xor	eax, eax
		jmp	loc_6B19C932
; ---------------------------------------------------------------------------

loc_6B19C82B:				; CODE XREF: Ordinal1332+45j
		push	offset aCregistryGetst ; "CRegistry::GetString()"
		lea	ecx, [ebp+var_50]
		call	Ordinal1089
		push	[ebp+cbData]
		mov	ecx, [ebp+arg_4]
		mov	[ebp+var_4], ebx
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B1818C7
		lea	ecx, [ebp+cbData]
		push	ecx		; lpcbData
		push	eax		; lpData
		lea	eax, [ebp+Type]
		push	eax		; lpType
		push	ebx		; lpReserved
		push	[ebp+lpValueName] ; lpValueName
		push	dword ptr [esi+4] ; hKey
		call	edi ; RegQueryValueExA
		mov	ecx, [ebp+arg_4]
		push	0FFFFFFFFh
		mov	[esi+8], eax
		call	sub_6B185A33
		jmp	loc_6B19C90B
; ---------------------------------------------------------------------------

loc_6B19C86E:				; DATA XREF: .rdata:6B1BC82Co
		push	13h
		lea	ecx, [ebp+var_50]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_50]
		call	Ordinal1101
		mov	ecx, [ebp+var_54]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_50]
		call	Ordinal1103
		lea	ecx, [ebp+var_50]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B19C906
		retn
; ---------------------------------------------------------------------------

loc_6B19C8B1:				; DATA XREF: .rdata:6B1BC83Co
		push	15h
		lea	ecx, [ebp+var_50]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_50]
		call	Ordinal1101
		mov	eax, [ebp+var_58]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_50]
		call	Ordinal1103
		lea	ecx, [ebp+var_50]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B19C906
		retn
; ---------------------------------------------------------------------------

loc_6B19C906:				; DATA XREF: Ordinal1332+CEo
					; Ordinal1332+123o
		mov	esi, [ebp+var_30]
		xor	ebx, ebx

loc_6B19C90B:				; CODE XREF: Ordinal1332+8Cj
		lea	ecx, [ebp+var_50]
		call	Ordinal1635
		test	eax, eax
		jz	short loc_6B19C91E
		mov	dword ptr [esi+8], 0Eh

loc_6B19C91E:				; CODE XREF: Ordinal1332+138j
		xor	eax, eax
		cmp	[esi+8], ebx
		lea	ecx, [ebp+var_50]
		setz	al
		mov	esi, eax
		call	Ordinal1090
		mov	eax, esi

loc_6B19C932:				; CODE XREF: Ordinal1332+49j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal1332	endp ; sp-analysis failed

; Exported entry 1353.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1353
Ordinal1353	proc near		; CODE XREF: Ordinal900+3p
					; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, ecx
		and	dword ptr [eax+4], 0
		and	dword ptr [eax+8], 0
		mov	dword ptr [eax], offset	off_6B1B5B84
		mov	dword_6B1C1330,	eax
		retn
Ordinal1353	endp

; Exported entry 1356.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1356
Ordinal1356	proc near		; CODE XREF: Ordinal906+33p
					; Ordinal1354+6p ...
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+8], 0
		jz	short loc_6B19C978
		push	dword ptr [esi+4]
		call	ds:_set_security_error_handler
		and	dword ptr [esi+4], 0
		pop	ecx

loc_6B19C978:				; CODE XREF: Ordinal1356+7j
		and	dword ptr [esi+8], 0
		pop	esi
		retn
Ordinal1356	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19C97E	proc near		; DATA XREF: Ordinal1355+8o
					; Ordinal1357+2Do

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, dword_6B1C1330
		test	ecx, ecx
		jz	short locret_6B19C995
		push	[esp+arg_4]
		mov	eax, [ecx]
		push	[esp+4+arg_0]
		call	dword ptr [eax+4]

locret_6B19C995:			; CODE XREF: sub_6B19C97E+8j
		retn
sub_6B19C97E	endp

; Exported entry 1354.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1354
Ordinal1354	proc near		; CODE XREF: Ordinal901+6j
					; sub_6B19CA03+3p
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6B1B5B84
		call	Ordinal1356
		and	dword_6B1C1330,	0
		retn
Ordinal1354	endp

; Exported entry 1355.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1355
Ordinal1355	proc near		; CODE XREF: Ordinal905+138p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	Ordinal1356
		push	offset sub_6B19C97E
		call	ds:_set_security_error_handler
		mov	[esi+4], eax
		xor	eax, eax
		inc	eax
		pop	ecx
		mov	[esi+8], eax
		pop	esi
		retn
Ordinal1355	endp

; Exported entry 1357.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1357
Ordinal1357	proc near		; CODE XREF: Ordinal902+29p
					; DATA XREF: .rdata:6B1B5B88o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [ecx+4]
		test	eax, eax
		jz	short loc_6B19C9DD
		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	eax
		pop	ecx
		pop	ecx
		jmp	short locret_6B19CA00
; ---------------------------------------------------------------------------

loc_6B19C9DD:				; CODE XREF: Ordinal1357+5j
		push	esi
		mov	esi, ds:_set_security_error_handler
		push	0
		call	esi ; _set_security_error_handler
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	__security_error_handler
		push	offset sub_6B19C97E
		call	esi ; _set_security_error_handler
		add	esp, 10h
		pop	esi

locret_6B19CA00:			; CODE XREF: Ordinal1357+13j
		retn	8
Ordinal1357	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B19CA03(void *, char)
sub_6B19CA03	proc near		; DATA XREF: .rdata:off_6B1B5B84o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1354
		test	[esp+4+arg_0], 1
		jz	short loc_6B19CA19
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B19CA19:				; CODE XREF: sub_6B19CA03+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B19CA03	endp

; Exported entry 1362.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1362
Ordinal1362	proc near		; CODE XREF: Ordinal1422+41p
					; DATA XREF: .rdata:off_6B1BF428o

var_4C		= byte ptr -4Ch
var_8		= dword	ptr -8
hSCObject	= dword	ptr -4
lpServiceName	= dword	ptr  8
lpDisplayName	= dword	ptr  0Ch
arg_8		= dword	ptr  10h
dwStartType	= dword	ptr  14h
lpDependencies	= dword	ptr  18h
lpServiceStartName= dword ptr  1Ch
lpPassword	= dword	ptr  20h
Info		= dword	ptr  24h

		push	ebp
		mov	ebp, esp
		sub	esp, 4Ch
		call	Ordinal1269
		test	al, al
		jnz	short loc_6B19CA40
		push	offset aCserviceInstal ; "CService::Install() :	COSInfo::IsWinNT("...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	locret_6B19CB4E
; ---------------------------------------------------------------------------

loc_6B19CA40:				; CODE XREF: Ordinal1362+Dj
		push	edi
		push	2		; dwDesiredAccess
		xor	edi, edi
		push	offset DatabaseName ; "ServicesActive"
		push	edi		; lpMachineName
		mov	[ebp+var_8], edi
		call	OpenSCManagerA
		cmp	eax, edi
		mov	[ebp+hSCObject], eax
		jnz	short loc_6B19CA73
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCserviceInst_0 ; "CService::Install() :	OpenSCManager()	="...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		jmp	loc_6B19CB4A
; ---------------------------------------------------------------------------

loc_6B19CA73:				; CODE XREF: Ordinal1362+3Aj
		cmp	[ebp+Info], edi
		push	esi		; Args
		push	10h
		pop	esi
		jz	short loc_6B19CA81
		mov	esi, 110h

loc_6B19CA81:				; CODE XREF: Ordinal1362+5Bj
		lea	ecx, [ebp+var_4C]
		call	Ordinal1487
		push	edi		; Filename
		lea	ecx, [ebp+var_4C]
		call	Ordinal1489
		test	al, al
		jnz	short loc_6B19CAAE
		push	offset aCserviceInst_1 ; "CService::Install() :	path.SplitPath() "...
		call	sub_6B18102E
		pop	ecx
		lea	ecx, [ebp+var_4C]
		call	Ordinal1488
		jmp	loc_6B19CB40
; ---------------------------------------------------------------------------

loc_6B19CAAE:				; CODE XREF: Ordinal1362+75j
		push	ebx
		push	[ebp+lpPassword] ; lpPassword
		lea	ecx, [ebp+var_4C]
		push	[ebp+lpServiceStartName] ; lpServiceStartName
		push	[ebp+lpDependencies] ; lpDependencies
		push	edi		; lpdwTagId
		push	edi		; lpLoadOrderGroup
		call	Ordinal1649
		push	eax		; lpBinaryPathName
		xor	ebx, ebx
		inc	ebx
		push	ebx		; dwErrorControl
		push	[ebp+dwStartType] ; dwStartType
		push	esi		; dwServiceType
		push	0F01FFh		; dwDesiredAccess
		push	[ebp+lpDisplayName] ; lpDisplayName
		push	[ebp+lpServiceName] ; lpServiceName
		push	[ebp+hSCObject]	; hSCManager
		call	CreateServiceA
		mov	esi, eax
		cmp	esi, edi
		jnz	short loc_6B19CAF3
		call	ds:GetLastError
		push	eax
		push	offset aCserviceInst_2 ; "CService::Install() :	CreateService()	="...
		jmp	short loc_6B19CB20
; ---------------------------------------------------------------------------

loc_6B19CAF3:				; CODE XREF: Ordinal1362+C4j
		push	ebx
		call	Ordinal1272
		test	al, al
		pop	ecx
		jz	short loc_6B19CB29
		mov	eax, [ebp+arg_8]
		mov	[ebp+Info], eax
		lea	eax, [ebp+Info]
		push	eax		; lpInfo
		push	ebx		; dwInfoLevel
		push	esi		; hService
		call	ChangeServiceConfig2A
		test	eax, eax
		jnz	short loc_6B19CB29
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCserviceInst_3 ; "CService::Install() :	ChangeServiceConf"...

loc_6B19CB20:				; CODE XREF: Ordinal1362+D2j
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		jmp	short loc_6B19CB2C
; ---------------------------------------------------------------------------

loc_6B19CB29:				; CODE XREF: Ordinal1362+DDj
					; Ordinal1362+F3j
		mov	[ebp+var_8], ebx

loc_6B19CB2C:				; CODE XREF: Ordinal1362+108j
		lea	ecx, [ebp+var_4C]
		call	Ordinal1488
		cmp	esi, edi
		pop	ebx
		jz	short loc_6B19CB40
		push	esi		; hSCObject
		call	CloseServiceHandle

loc_6B19CB40:				; CODE XREF: Ordinal1362+8Aj
					; Ordinal1362+118j
		push	[ebp+hSCObject]	; hSCObject
		call	CloseServiceHandle
		pop	esi

loc_6B19CB4A:				; CODE XREF: Ordinal1362+4Fj
		mov	eax, [ebp+var_8]
		pop	edi

locret_6B19CB4E:			; CODE XREF: Ordinal1362+1Cj
		leave
		retn	20h
Ordinal1362	endp

; Exported entry 1363.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1363(LPCSTR lpServiceName)
		public Ordinal1363
Ordinal1363	proc near		; CODE XREF: Ordinal1422+1Dp
					; Ordinal1423+1Dp
					; DATA XREF: ...

lpServiceName	= dword	ptr  4

		call	Ordinal1269
		test	al, al
		jnz	short loc_6B19CB6D
		push	offset aCserviceRemove ; "CService::Remove() : COSInfo::IsWinNT()"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	locret_6B19CC12
; ---------------------------------------------------------------------------

loc_6B19CB6D:				; CODE XREF: Ordinal1363+7j
		push	ebx
		push	ebp
		push	0F003Fh		; dwDesiredAccess
		push	offset DatabaseName ; "ServicesActive"
		xor	ebp, ebp
		push	ebp		; lpMachineName
		call	OpenSCManagerA
		mov	ebx, eax
		cmp	ebx, ebp
		jnz	short loc_6B19CB9D
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCserviceRemo_0 ; "CService::Remove() : OpenSCManager() =="...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		jmp	short loc_6B19CC0E
; ---------------------------------------------------------------------------

loc_6B19CB9D:				; CODE XREF: Ordinal1363+34j
		push	esi
		push	edi
		push	0F01FFh		; dwDesiredAccess
		push	[esp+14h+lpServiceName]	; lpServiceName
		push	ebx		; hSCManager
		call	OpenServiceA
		mov	esi, eax
		cmp	esi, ebp
		jnz	short loc_6B19CBD9
		call	ds:GetLastError
		mov	edi, eax
		push	edi		; Args
		push	offset aCserviceRemo_1 ; "CService::Remove() : OpenService() ==	N"...
		call	sub_6B18102E
		xor	eax, eax
		cmp	edi, 424h
		setz	al
		pop	ecx
		pop	ecx
		mov	ebp, eax
		jmp	short loc_6B19CBFC
; ---------------------------------------------------------------------------

loc_6B19CBD9:				; CODE XREF: Ordinal1363+61j
		push	esi		; hService
		call	DeleteService
		test	eax, eax
		jnz	short loc_6B19CBF9
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCserviceRemo_2 ; "CService::Remove() : DeleteService() =="...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		jmp	short loc_6B19CBFC
; ---------------------------------------------------------------------------

loc_6B19CBF9:				; CODE XREF: Ordinal1363+90j
		xor	ebp, ebp
		inc	ebp

loc_6B19CBFC:				; CODE XREF: Ordinal1363+85j
					; Ordinal1363+A5j
		test	esi, esi
		mov	edi, CloseServiceHandle
		jz	short loc_6B19CC09
		push	esi		; hSCObject
		call	edi ; CloseServiceHandle

loc_6B19CC09:				; CODE XREF: Ordinal1363+B2j
		push	ebx		; hSCObject
		call	edi ; CloseServiceHandle
		pop	edi
		pop	esi

loc_6B19CC0E:				; CODE XREF: Ordinal1363+49j
		mov	eax, ebp
		pop	ebp
		pop	ebx

locret_6B19CC12:			; CODE XREF: Ordinal1363+16j
		retn	4
Ordinal1363	endp

; Exported entry 1368.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1368
Ordinal1368	proc near		; DATA XREF: .rdata:6B1B0EACo
					; .rdata:6B1B5E44o ...
		mov	eax, [ecx]
		jmp	dword ptr [eax+8]
Ordinal1368	endp

; Exported entry 1370.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1370
Ordinal1370	proc near		; DATA XREF: .rdata:6B1B0EB4o
					; .rdata:6B1B5E4Co ...
		mov	eax, [ecx]
		call	dword ptr [eax+18h]
		retn	4
Ordinal1370	endp

; Exported entry 1371.
; Exported entry 1372.
; Exported entry 1373.
; Exported entry 1374.
; Exported entry 1375.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1374
Ordinal1374	proc near		; DATA XREF: .rdata:6B1B0EB8o
					; .rdata:6B1B0EBCo ...
		mov	eax, [ecx]	; ccL35_1371
					; ccL35_1372
					; ccL35_1373
					; ccL35_1374
		jmp	dword ptr [eax+18h]
Ordinal1374	endp

; Exported entry 1376.
; Exported entry 1377.
; Exported entry 1378.
; Exported entry 1379.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1376
Ordinal1376	proc near		; DATA XREF: .rdata:6B1B0ECCo
					; .rdata:6B1B0ED0o ...
		mov	eax, [ecx]	; ccL35_1376
					; ccL35_1377
					; ccL35_1378
		call	dword ptr [eax+18h]
		retn	8
Ordinal1376	endp

; Exported entry 1380.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1380
Ordinal1380	proc near		; CODE XREF: Ordinal1364+6Ep
					; Ordinal1369j
					; DATA XREF: ...

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		call	Ordinal1269
		test	al, al
		jnz	short loc_6B19CC46
		xor	eax, eax
		inc	eax
		jmp	short loc_6B19CC6F
; ---------------------------------------------------------------------------

loc_6B19CC46:				; CODE XREF: Ordinal1380+10j
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	eax, [esi+18h]
		push	eax		; lpServiceStatus
		push	dword ptr [esi+14h] ; hServiceStatus
		call	SetServiceStatus
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1573
		mov	eax, esi

loc_6B19CC6F:				; CODE XREF: Ordinal1380+15j
		pop	esi
		leave
		retn
Ordinal1380	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19CC72	proc near		; CODE XREF: sub_6B19CD75+AAp
					; DATA XREF: .text:loc_6B19CE9Bo

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		dec	eax
		mov	ecx, dword_6B1C1334
		jz	short loc_6B19CCAA
		dec	eax
		jz	short loc_6B19CCA3
		dec	eax
		jz	short loc_6B19CC9C
		dec	eax
		jz	short loc_6B19CC95
		dec	eax
		mov	eax, [ecx]
		jz	short loc_6B19CC90
		jmp	dword ptr [eax+1Ch]
; ---------------------------------------------------------------------------

loc_6B19CC90:				; CODE XREF: sub_6B19CC72+19j
		call	dword ptr [eax+14h]
		jmp	short locret_6B19CCAF
; ---------------------------------------------------------------------------

loc_6B19CC95:				; CODE XREF: sub_6B19CC72+14j
		mov	eax, [ecx]
		call	dword ptr [eax+18h]
		jmp	short locret_6B19CCAF
; ---------------------------------------------------------------------------

loc_6B19CC9C:				; CODE XREF: sub_6B19CC72+11j
		mov	eax, [ecx]
		call	dword ptr [eax+10h]
		jmp	short locret_6B19CCAF
; ---------------------------------------------------------------------------

loc_6B19CCA3:				; CODE XREF: sub_6B19CC72+Ej
		mov	eax, [ecx]
		call	dword ptr [eax+0Ch]
		jmp	short locret_6B19CCAF
; ---------------------------------------------------------------------------

loc_6B19CCAA:				; CODE XREF: sub_6B19CC72+Bj
		mov	eax, [ecx]
		call	dword ptr [eax+8]

locret_6B19CCAF:			; CODE XREF: sub_6B19CC72+21j
					; sub_6B19CC72+28j ...
		retn	4
sub_6B19CC72	endp

; Exported entry 1364.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1364
Ordinal1364	proc near		; CODE XREF: Ordinal1365+Dp
					; Ordinal1366+Dp ...

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		mov	esi, ecx
		xor	edi, edi
		push	edi
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	ecx, [ebp+arg_8]
		mov	eax, [ebp+arg_0]
		cmp	eax, 1
		mov	[esi+2Ch], ecx
		mov	ecx, [ebp+arg_4]
		mov	[esi+30h], ecx
		mov	ecx, [ebp+arg_C]
		mov	[esi+24h], ecx
		mov	ecx, [ebp+arg_10]
		mov	[esi+1Ch], eax
		mov	[esi+28h], ecx
		mov	[esi+20h], edi
		jz	short loc_6B19CCF9
		mov	[esi+24h], edi
		mov	[esi+28h], edi

loc_6B19CCF9:				; CODE XREF: Ordinal1364+3Fj
		cmp	eax, 2
		jb	short loc_6B19CD12
		cmp	eax, 3
		jbe	short loc_6B19CD0D
		cmp	eax, 4
		jbe	short loc_6B19CD12
		cmp	eax, 6
		ja	short loc_6B19CD12

loc_6B19CD0D:				; CODE XREF: Ordinal1364+4Fj
		mov	[esi+20h], edi
		jmp	short loc_6B19CD1E
; ---------------------------------------------------------------------------

loc_6B19CD12:				; CODE XREF: Ordinal1364+4Aj
					; Ordinal1364+54j ...
		mov	eax, [esi+34h]
		mov	[esi+30h], edi
		mov	[esi+2Ch], edi
		mov	[esi+20h], eax

loc_6B19CD1E:				; CODE XREF: Ordinal1364+5Ej
		mov	ecx, esi
		call	Ordinal1380
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1573
		pop	edi
		mov	eax, esi
		pop	esi
		leave
		retn	14h
Ordinal1364	endp

; Exported entry 1365.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1365
Ordinal1365	proc near		; CODE XREF: Ordinal1424+3p
					; DATA XREF: .rdata:6B1B5E38o ...
		push	0
		push	0
		push	1
		push	7530h
		push	3
		call	Ordinal1364
		retn
Ordinal1365	endp

; Exported entry 1366.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1366
Ordinal1366	proc near		; DATA XREF: .rdata:6B1B0EA4o
					; .rdata:6B1B5E3Co ...
		push	0
		push	0
		push	1
		push	7530h
		push	6
		call	Ordinal1364
		retn
Ordinal1366	endp

; Exported entry 1367.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1367
Ordinal1367	proc near		; DATA XREF: .rdata:6B1B0EA8o
					; .rdata:6B1B5E40o ...
		push	0
		push	0
		push	1
		push	7530h
		push	5
		call	Ordinal1364
		retn
Ordinal1367	endp

; Exported entry 1369.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1369
Ordinal1369	proc near		; DATA XREF: .rdata:6B1B0EB0o
					; .rdata:6B1B5E48o ...
		jmp	Ordinal1380
Ordinal1369	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B19CD75	proc near		; DATA XREF: .text:6B19CE8Do

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		lea	eax, [ecx-6]	; switch 9 cases
		cmp	eax, 8
		ja	loc_6B19CE1E	; jumptable 6B19CD87 default case
		jmp	ds:off_6B19CE28[eax*4] ; switch	jump

loc_6B19CD8E:				; DATA XREF: .text:off_6B19CE28o
		mov	ecx, dword_6B1C1334 ; jumptable	6B19CD87 case 6
		mov	eax, [ecx]
		call	dword ptr [eax+20h]
		jmp	loc_6B19CE24
; ---------------------------------------------------------------------------

loc_6B19CD9E:				; CODE XREF: sub_6B19CD75+12j
					; DATA XREF: .text:off_6B19CE28o
		mov	ecx, dword_6B1C1334 ; jumptable	6B19CD87 case 7
		mov	eax, [ecx]
		call	dword ptr [eax+24h]
		jmp	short loc_6B19CE24
; ---------------------------------------------------------------------------

loc_6B19CDAB:				; CODE XREF: sub_6B19CD75+12j
					; DATA XREF: .text:off_6B19CE28o
		mov	ecx, dword_6B1C1334 ; jumptable	6B19CD87 case 8
		mov	eax, [ecx]
		call	dword ptr [eax+28h]
		jmp	short loc_6B19CE24
; ---------------------------------------------------------------------------

loc_6B19CDB8:				; CODE XREF: sub_6B19CD75+12j
					; DATA XREF: .text:off_6B19CE28o
		mov	ecx, dword_6B1C1334 ; jumptable	6B19CD87 case 9
		mov	eax, [ecx]
		call	dword ptr [eax+2Ch]
		jmp	short loc_6B19CE24
; ---------------------------------------------------------------------------

loc_6B19CDC5:				; CODE XREF: sub_6B19CD75+12j
					; DATA XREF: .text:off_6B19CE28o
		mov	ecx, dword_6B1C1334 ; jumptable	6B19CD87 case 10
		mov	eax, [ecx]
		call	dword ptr [eax+30h]
		jmp	short loc_6B19CE24
; ---------------------------------------------------------------------------

loc_6B19CDD2:				; CODE XREF: sub_6B19CD75+12j
					; DATA XREF: .text:off_6B19CE28o
		push	[ebp+arg_8]	; jumptable 6B19CD87 case 11
		mov	ecx, dword_6B1C1334
		push	[ebp+arg_4]
		mov	eax, [ecx]
		call	dword ptr [eax+34h]
		jmp	short loc_6B19CE24
; ---------------------------------------------------------------------------

loc_6B19CDE5:				; CODE XREF: sub_6B19CD75+12j
					; DATA XREF: .text:off_6B19CE28o
		push	[ebp+arg_8]	; jumptable 6B19CD87 case 12
		mov	ecx, dword_6B1C1334
		push	[ebp+arg_4]
		mov	eax, [ecx]
		call	dword ptr [eax+38h]
		jmp	short loc_6B19CE24
; ---------------------------------------------------------------------------

loc_6B19CDF8:				; CODE XREF: sub_6B19CD75+12j
					; DATA XREF: .text:off_6B19CE28o
		push	[ebp+arg_8]	; jumptable 6B19CD87 case 13
		mov	ecx, dword_6B1C1334
		push	[ebp+arg_4]
		mov	eax, [ecx]
		call	dword ptr [eax+3Ch]
		jmp	short loc_6B19CE24
; ---------------------------------------------------------------------------

loc_6B19CE0B:				; CODE XREF: sub_6B19CD75+12j
					; DATA XREF: .text:off_6B19CE28o
		push	[ebp+arg_8]	; jumptable 6B19CD87 case 14
		mov	ecx, dword_6B1C1334
		push	[ebp+arg_4]
		mov	eax, [ecx]
		call	dword ptr [eax+40h]
		jmp	short loc_6B19CE24
; ---------------------------------------------------------------------------

loc_6B19CE1E:				; CODE XREF: sub_6B19CD75+Cj
		push	ecx		; jumptable 6B19CD87 default case
		call	sub_6B19CC72

loc_6B19CE24:				; CODE XREF: sub_6B19CD75+24j
					; sub_6B19CD75+34j ...
		pop	ebp
		retn	10h
sub_6B19CD75	endp

; ---------------------------------------------------------------------------
off_6B19CE28	dd offset loc_6B19CD8E	; DATA XREF: sub_6B19CD75+12r
		dd offset loc_6B19CD9E	; jump table for switch	statement
		dd offset loc_6B19CDAB
		dd offset loc_6B19CDB8
		dd offset loc_6B19CDC5
		dd offset loc_6B19CDD2
		dd offset loc_6B19CDE5
		dd offset loc_6B19CDF8
		dd offset loc_6B19CE0B
; ---------------------------------------------------------------------------

loc_6B19CE4C:				; DATA XREF: Ordinal1361+59o
		call	ds:GetCurrentThread
		mov	ecx, dword_6B1C1334
		push	eax
		add	ecx, 78h
		call	Ordinal1158
		test	eax, eax
		jnz	short loc_6B19CE75
		push	offset aCserviceServic ; "CService::ServiceMain() : m_pService->m"...
		call	sub_6B18102E
		pop	ecx
		jmp	locret_6B19CF09
; ---------------------------------------------------------------------------

loc_6B19CE75:				; CODE XREF: .text:6B19CE63j
		push	esi
		push	1
		call	Ordinal1272
		xor	esi, esi
		test	al, al
		mov	eax, dword_6B1C1334
		mov	eax, [eax+38h]
		pop	ecx
		jz	short loc_6B19CE9B
		push	esi
		push	offset sub_6B19CD75
		push	eax
		call	RegisterServiceCtrlHandlerExA
		jmp	short loc_6B19CEA7
; ---------------------------------------------------------------------------

loc_6B19CE9B:				; CODE XREF: .text:6B19CE8Aj
		push	offset sub_6B19CC72
		push	eax
		call	RegisterServiceCtrlHandlerA

loc_6B19CEA7:				; CODE XREF: .text:6B19CE99j
		mov	ecx, dword_6B1C1334
		mov	[ecx+14h], eax
		mov	ecx, dword_6B1C1334
		cmp	[ecx+14h], esi
		jnz	short loc_6B19CED0
		call	ds:GetLastError
		push	eax
		push	offset aCserviceServ_0 ; "CService::ServiceMain() : m_pService->m"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		jmp	short loc_6B19CF08
; ---------------------------------------------------------------------------

loc_6B19CED0:				; CODE XREF: .text:6B19CEB9j
		push	esi
		push	esi
		push	1
		push	7530h
		push	2
		call	Ordinal1364
		mov	ecx, dword_6B1C1334
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		cmp	eax, esi
		mov	ecx, dword_6B1C1334
		jz	short loc_6B19CEFD
		push	eax
		push	42Ah
		jmp	short loc_6B19CEFF
; ---------------------------------------------------------------------------

loc_6B19CEFD:				; CODE XREF: .text:6B19CEF3j
		push	esi
		push	esi

loc_6B19CEFF:				; CODE XREF: .text:6B19CEFBj
		push	esi
		push	esi
		push	1
		call	Ordinal1364

loc_6B19CF08:				; CODE XREF: .text:6B19CECEj
		pop	esi

locret_6B19CF09:			; CODE XREF: .text:6B19CE70j
		retn	8
; Exported entry 1360.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1360
Ordinal1360	proc near		; CODE XREF: sub_6B19D070+3p
					; Ordinal1392+85j
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1B5E30
		and	dword_6B1C1334,	0
		lea	ecx, [esi+78h]
		call	Ordinal1152
		lea	ecx, [esi+58h]
		call	Ordinal1616
		lea	ecx, [esi+3Ch]
		call	Ordinal1260
		lea	ecx, [esi+38h]
		pop	esi
		jmp	sub_6B1899B5
Ordinal1360	endp

; Exported entry 1361.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1361
Ordinal1361	proc near		; CODE XREF: Ordinal1419+39p
					; DATA XREF: .rdata:off_6B1BF428o

Src		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, ecx
		call	Ordinal1269
		test	al, al
		jnz	short loc_6B19CF5B
		push	offset aCserviceRegist ; "CService::Register() : COSInfo::IsWinNT"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6B19D003
; ---------------------------------------------------------------------------

loc_6B19CF5B:				; CODE XREF: Ordinal1361+Aj
		push	ebx		; Args
		lea	ebx, [esi+38h]
		push	ebx		; int
		push	[esp+0Ch+Src]	; Src
		call	Ordinal1519
		test	al, al
		pop	ecx
		pop	ecx
		jnz	short loc_6B19CF81
		push	offset aCserviceRegi_0 ; "CService::Register() : CStringConvert::"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6B19D002
; ---------------------------------------------------------------------------

loc_6B19CF81:				; CODE XREF: Ordinal1361+30j
		mov	eax, [esp+8+arg_4]
		and	dword ptr [esi+0Ch], 0
		and	dword ptr [esi+10h], 0
		push	edi
		mov	[esi+34h], eax
		mov	eax, [ebx]
		lea	edi, [esi+4]
		mov	dword ptr [esi+8], offset loc_6B19CE4C
		add	esi, 78h
		xor	ebx, ebx
		mov	ecx, esi
		mov	[edi], eax
		inc	ebx
		call	Ordinal1160
		push	edi		; lpServiceStartTable
		call	StartServiceCtrlDispatcherA
		test	eax, eax
		pop	edi
		jnz	short loc_6B19CFCD
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCserviceRegi_1 ; "CService::Register() : StartServiceCtrl"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	ebx, ebx

loc_6B19CFCD:				; CODE XREF: Ordinal1361+79j
		mov	ecx, esi
		call	Ordinal1161
		test	eax, eax
		jz	short loc_6B19D000
		push	0FFFFFFFFh	; dwMilliseconds
		mov	ecx, esi
		call	Ordinal1649
		push	eax		; hHandle
		call	ds:WaitForSingleObject
		test	eax, eax
		jz	short loc_6B19CFF9
		push	offset aCserviceRegi_2 ; "CService::Register() : WaitForSingleObj"...
		call	sub_6B18102E
		pop	ecx
		xor	ebx, ebx

loc_6B19CFF9:				; CODE XREF: Ordinal1361+ADj
		mov	ecx, esi
		call	Ordinal1160

loc_6B19D000:				; CODE XREF: Ordinal1361+99j
		mov	eax, ebx

loc_6B19D002:				; CODE XREF: Ordinal1361+3Fj
		pop	ebx

loc_6B19D003:				; CODE XREF: Ordinal1361+19j
		pop	esi
		retn	8
Ordinal1361	endp

; Exported entry 1359.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1359
Ordinal1359	proc near		; CODE XREF: Ordinal1391+3p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		push	edi
		xor	edi, edi
		lea	ecx, [esi+38h]
		mov	dword ptr [esi], offset	off_6B1B5E30
		mov	[esi+14h], edi
		mov	[esi+34h], edi
		call	sub_6B181879
		lea	ecx, [esi+3Ch]
		call	Ordinal1259
		lea	ecx, [esi+58h]
		call	Ordinal1615
		lea	ecx, [esi+78h]
		call	Ordinal1149
		push	10h		; Size
		lea	eax, [esi+4]
		push	edi		; Val
		push	eax		; Dst
		mov	dword_6B1C1334,	esi
		call	memset
		add	esp, 0Ch
		mov	[esi+2Ch], edi
		mov	[esi+30h], edi
		mov	[esi+24h], edi
		mov	[esi+28h], edi
		mov	[esi+20h], edi
		pop	edi
		mov	dword ptr [esi+18h], 10h
		mov	dword ptr [esi+1Ch], 1
		mov	eax, esi
		pop	esi
		retn
Ordinal1359	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B19D070(void *, char)
sub_6B19D070	proc near		; DATA XREF: .rdata:off_6B1B5E30o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1360
		test	[esp+4+arg_0], 1
		jz	short loc_6B19D086
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B19D086:				; CODE XREF: sub_6B19D070+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B19D070	endp

; Exported entry 1381.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1381
Ordinal1381	proc near		; CODE XREF: Ordinal1391+3Fp
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	Ordinal1231
		and	dword ptr [esi+0DCh], 0
		mov	dword ptr [esi], offset	off_6B1B6098
		mov	eax, esi
		pop	esi
		retn
Ordinal1381	endp

; Exported entry 1382.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1382
Ordinal1382	proc near		; CODE XREF: sub_6B19D23E+3p
					; Ordinal1392+67p
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6B1B6098
		jmp	Ordinal1232
Ordinal1382	endp

; Exported entry 1383.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1383
Ordinal1383	proc near		; CODE XREF: Ordinal1420+Dp
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_6B19D0C7
		push	offset aCserviceconsol ; "CServiceConsole::Create() : pServiceApp"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short locret_6B19D0D4
; ---------------------------------------------------------------------------

loc_6B19D0C7:				; CODE XREF: Ordinal1383+6j
		push	1		; int
		mov	[ecx+0DCh], eax
		call	Ordinal815

locret_6B19D0D4:			; CODE XREF: Ordinal1383+15j
		retn	4
Ordinal1383	endp

; Exported entry 1384.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1384
Ordinal1384	proc near		; DATA XREF: .rdata:6B1B60C4o
					; .rdata:off_6B1BF428o
		mov	ecx, [ecx+0DCh]
		mov	eax, [ecx]
		call	dword ptr [eax+48h]
		xor	eax, eax
		inc	eax
		retn
Ordinal1384	endp

; Exported entry 1385.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1385
Ordinal1385	proc near		; CODE XREF: Ordinal1425+1Bp
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	Ordinal1162
		and	dword ptr [esi+48h], 0
		mov	dword ptr [esi], offset	off_6B1B610C
		mov	eax, esi
		pop	esi
		retn
Ordinal1385	endp

; Exported entry 1386.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1386
Ordinal1386	proc near		; CODE XREF: sub_6B19D25A+3p
					; Ordinal1425+BDp
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6B1B610C
		jmp	Ordinal1163
Ordinal1386	endp

; Exported entry 1388.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1388
Ordinal1388	proc near		; DATA XREF: .rdata:6B1B6124o
					; .rdata:off_6B1BF428o
		mov	ecx, [ecx+48h]
		mov	eax, [ecx]
		jmp	dword ptr [eax+48h]
Ordinal1388	endp

; Exported entry 1389.
; Exported entry 1664.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1664
Ordinal1664	proc near		; DATA XREF: .rdata:6B1B6128o
					; .rdata:6B1B7C1Co ...
		xor	eax, eax	; ccL35_1389
		inc	eax
		retn
Ordinal1664	endp

; Exported entry 1390.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1390
Ordinal1390	proc near		; DATA XREF: .rdata:6B1B612Co
					; .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_0], 0
		push	esi
		mov	esi, ecx
		jz	short loc_6B19D171
		cmp	[esp+4+arg_4], 0
		jz	short loc_6B19D171
		push	offset aCservicewindow ; "CServiceWindow::OnEndSession() : m_pSer"...
		call	sub_6B181006
		pop	ecx
		mov	ecx, [esi+48h]
		mov	eax, [ecx]
		call	dword ptr [eax+48h]
		push	offset aCservicewind_0 ; "CServiceWindow::OnEndSession() : WaitFo"...
		call	sub_6B181006
		pop	ecx
		push	0FFFFFFFFh
		mov	ecx, esi
		call	Ordinal1740
		push	offset aCservicewind_1 ; "CServiceWindow::OnEndSession() : ExitIn"...
		call	sub_6B181006
		mov	eax, [esi]
		pop	ecx
		mov	ecx, esi
		call	dword ptr [eax+14h]
		push	offset aCservicewind_2 ; "CServiceWindow::OnEndSession() : _endth"...
		call	sub_6B181006
		push	0
		call	ds:_endthreadex
		pop	ecx
		pop	ecx

loc_6B19D171:				; CODE XREF: Ordinal1390+8j
					; Ordinal1390+Fj
		pop	esi
		retn	8
Ordinal1390	endp

; Exported entry 1401.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1401
Ordinal1401	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		mov	eax, [esi+254h]
		test	eax, eax
		jz	short loc_6B19D18A
		push	0
		push	0
		call	eax
		jmp	short loc_6B19D190
; ---------------------------------------------------------------------------

loc_6B19D18A:				; CODE XREF: Ordinal1401+Bj
		call	ds:CoFreeUnusedLibraries

loc_6B19D190:				; CODE XREF: Ordinal1401+13j
		add	esi, 260h
		cmp	dword ptr [esi], 0
		jz	short loc_6B19D1A8
		push	0FFFFFFFFh
		push	0FFFFFFFFh
		call	ds:GetCurrentProcess
		push	eax
		call	dword ptr [esi]

loc_6B19D1A8:				; CODE XREF: Ordinal1401+24j
		pop	esi
		retn
Ordinal1401	endp

; Exported entry 1402.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1402
Ordinal1402	proc near		; DATA XREF: .rdata:6B1B0EDCo
					; .rdata:6B1B6504o ...

arg_0		= dword	ptr  4

		mov	eax, ecx
		push	dword ptr [eax+238h]
		lea	ecx, [eax+8Ch]
		push	[esp+4+arg_0]
		mov	edx, [ecx]
		call	dword ptr [edx+4]
		retn	4
Ordinal1402	endp

; Exported entry 1403.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1403
Ordinal1403	proc near		; DATA XREF: .rdata:6B1B0EE0o
					; .rdata:6B1B6508o ...
		add	ecx, 8Ch
		jmp	Ordinal1659
Ordinal1403	endp

; Exported entry 1404.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1404
Ordinal1404	proc near		; DATA XREF: .rdata:6B1B0EE4o
					; .rdata:6B1B650Co ...
		xor	eax, eax
		inc	eax
		retn	4
Ordinal1404	endp

; Exported entry 1405.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1405
Ordinal1405	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+80h]
		retn
Ordinal1405	endp

; Exported entry 1406.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1406
Ordinal1406	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+84h]
		retn
Ordinal1406	endp

; Exported entry 1407.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1407
Ordinal1407	proc near		; CODE XREF: Ordinal1393+2A4p
					; DATA XREF: .rdata:off_6B1BF428o
		add	ecx, 8Ch
		mov	eax, [ecx]
		push	0
		push	0
		call	dword ptr [eax+4]
		retn
Ordinal1407	endp

; Exported entry 1408.
; Exported entry 1889.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1408
Ordinal1408	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+88h]	; ccL35_1408
		retn
Ordinal1408	endp

; Exported entry 1409.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1409
Ordinal1409	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+238h], eax
		retn	4
Ordinal1409	endp

; Exported entry 1410.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1410
Ordinal1410	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+238h]
		retn
Ordinal1410	endp

; Exported entry 1411.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1411
Ordinal1411	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+248h], eax
		retn	4
Ordinal1411	endp

; Exported entry 1412.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1412
Ordinal1412	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+248h]
		retn
Ordinal1412	endp

; Exported entry 1413.
; Exported entry 1416.
; Exported entry 1417.
; Exported entry 1418.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1416
Ordinal1416	proc near		; DATA XREF: .rdata:6B1B0EE8o
					; .rdata:6B1B6510o ...
		or	eax, 0FFFFFFFFh	; ccL35_1413
					; ccL35_1416
					; ccL35_1417
		retn
Ordinal1416	endp

; Exported entry 1414.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1414
Ordinal1414	proc near		; DATA XREF: .rdata:6B1B0EECo
					; .rdata:6B1B6514o ...
		mov	eax, [ecx]
		call	dword ptr [eax+48h]
		xor	eax, eax
		retn
Ordinal1414	endp

; Exported entry 1424.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1424
Ordinal1424	proc near		; DATA XREF: .rdata:6B1B0EA0o
					; .rdata:6B1B64C8o ...
		push	esi
		mov	esi, ecx
		call	Ordinal1365
		mov	eax, [esi]
		mov	ecx, esi
		pop	esi
		jmp	dword ptr [eax+48h]
Ordinal1424	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B19D23E(void *, char)
sub_6B19D23E	proc near		; DATA XREF: .rdata:off_6B1B6098o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1382
		test	[esp+4+arg_0], 1
		jz	short loc_6B19D254
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B19D254:				; CODE XREF: sub_6B19D23E+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B19D23E	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B19D25A(void *, char)
sub_6B19D25A	proc near		; DATA XREF: .rdata:off_6B1B610Co

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1386
		test	[esp+4+arg_0], 1
		jz	short loc_6B19D270
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B19D270:				; CODE XREF: sub_6B19D25A+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B19D25A	endp

; Exported entry 1394.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1394
Ordinal1394	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		xor	eax, eax
		cmp	[ecx+84h], eax
		jz	short locret_6B19D291
		push	eax
		push	eax
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	2
		call	Ordinal1364

locret_6B19D291:			; CODE XREF: Ordinal1394+8j
		retn	8
Ordinal1394	endp

; Exported entry 1395.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1395
Ordinal1395	proc near		; DATA XREF: .rdata:off_6B1BF428o
		xor	eax, eax
		cmp	[ecx+84h], eax
		jz	short locret_6B19D2A9
		push	eax
		push	eax
		push	eax
		push	eax
		push	4
		call	Ordinal1364

locret_6B19D2A9:			; CODE XREF: Ordinal1395+8j
		retn
Ordinal1395	endp

; Exported entry 1396.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1396
Ordinal1396	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		xor	eax, eax
		cmp	[ecx+84h], eax
		jz	short locret_6B19D2C5
		push	eax
		push	eax
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	3
		call	Ordinal1364

locret_6B19D2C5:			; CODE XREF: Ordinal1396+8j
		retn	8
Ordinal1396	endp

; Exported entry 1397.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1397
Ordinal1397	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	dword ptr [ecx+240h]
		add	ecx, 1F4h
		call	Ordinal1071
		retn
Ordinal1397	endp

; Exported entry 1398.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1398
Ordinal1398	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	dword ptr [ecx+240h]
		add	ecx, 1F4h
		call	Ordinal1072
		retn
Ordinal1398	endp

; Exported entry 1399.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1399
Ordinal1399	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	dword ptr [ecx+240h]
		add	ecx, 1F4h
		call	Ordinal1073
		retn
Ordinal1399	endp

; Exported entry 1400.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1400
Ordinal1400	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	dword ptr [ecx+240h]
		add	ecx, 1F4h
		call	Ordinal1074
		retn
Ordinal1400	endp

; Exported entry 1420.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1420
Ordinal1420	proc near		; CODE XREF: Ordinal808+1Fj
					; DATA XREF: .rdata:6B1B6534o ...
		push	ebx
		push	esi
		mov	esi, ecx
		lea	ebx, [esi+9Ch]
		push	esi
		mov	ecx, ebx
		call	Ordinal1383
		test	eax, eax
		jnz	short loc_6B19D339
		push	offset aCserviceappOnr ; "CServiceApp::OnRunDebug() : m_Console.C"...
		call	sub_6B18102E
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	loc_6B19D3BD
; ---------------------------------------------------------------------------

loc_6B19D339:				; CODE XREF: Ordinal1420+14j
		push	edi		; Args
		push	0FFFFFFF5h	; nStdHandle
		lea	edi, [esi+17Ch]
		call	ds:GetStdHandle
		push	eax
		mov	ecx, edi
		call	Ordinal851
		test	eax, eax
		jz	short loc_6B19D3AE
		push	1
		mov	ecx, edi
		call	Ordinal855
		test	eax, eax
		jz	short loc_6B19D3AE
		push	dword ptr [esi+240h] ; Src
		mov	ecx, edi
		call	Ordinal869
		test	eax, eax
		jz	short loc_6B19D3AE
		push	ebx
		mov	ecx, edi
		call	Ordinal854
		test	eax, eax
		jz	short loc_6B19D3AE
		push	offset aCserviceappO_0 ; "CServiceApp::OnRunDebug() : Start()\n"
		mov	dword ptr [esi+80h], 1
		call	sub_6B181006
		mov	eax, [esi]
		pop	ecx
		mov	ecx, esi
		call	dword ptr [eax+4]
		mov	ecx, edi
		mov	esi, eax
		call	Ordinal853
		mov	ecx, ebx
		call	Ordinal1235
		mov	eax, esi
		jmp	short loc_6B19D3BC
; ---------------------------------------------------------------------------

loc_6B19D3AE:				; CODE XREF: Ordinal1420+42j
					; Ordinal1420+4Fj ...
		push	offset aCserviceappO_1 ; "CServiceApp::OnRunDebug() : m_DefaultWi"...
		call	sub_6B18102E
		pop	ecx
		or	eax, 0FFFFFFFFh

loc_6B19D3BC:				; CODE XREF: Ordinal1420+9Cj
		pop	edi

loc_6B19D3BD:				; CODE XREF: Ordinal1420+24j
		pop	esi
		pop	ebx
		retn
Ordinal1420	endp

; Exported entry 1422.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1422
Ordinal1422	proc near		; CODE XREF: Ordinal805+3Aj
					; DATA XREF: .rdata:6B1B652Co ...

var_50		= byte ptr -50h
var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 50h
		push	esi
		mov	esi, ecx
		call	Ordinal1269
		test	al, al
		jz	short loc_6B19D42E
		push	edi
		lea	edi, [esi+23Ch]
		push	dword ptr [edi]	; lpServiceName
		mov	ecx, esi
		call	Ordinal1363
		mov	eax, [esi+244h]
		mov	ecx, [esi+240h]
		mov	edi, [edi]
		xor	edx, edx
		push	edx
		push	edx
		push	edx
		push	offset aRpcss	; "RPCSS"
		push	2
		push	eax
		push	ecx
		push	edi
		mov	ecx, esi
		call	Ordinal1362
		test	eax, eax
		pop	edi
		jnz	short loc_6B19D41B
		push	offset aCserviceappOni ; "CServiceApp::OnInstallService() : Insta"...
		call	sub_6B18102E
		pop	ecx
		jmp	loc_6B19D4C1
; ---------------------------------------------------------------------------

loc_6B19D41B:				; CODE XREF: Ordinal1422+49j
		push	dword ptr [esi+240h]
		lea	ecx, [esi+1F4h]
		call	Ordinal1069
		jmp	short loc_6B19D4A2
; ---------------------------------------------------------------------------

loc_6B19D42E:				; CODE XREF: Ordinal1422+10j
		lea	ecx, [ebp+var_50]
		call	Ordinal1487
		push	0		; Filename
		lea	ecx, [ebp+var_50]
		call	Ordinal1489
		test	al, al
		jnz	short loc_6B19D451
		push	offset aCserviceappO_2 ; "CServiceApp::OnInstallService() : path."...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B19D4B9
; ---------------------------------------------------------------------------

loc_6B19D451:				; CODE XREF: Ordinal1422+82j
		lea	ecx, [ebp+var_C]
		call	Ordinal1316
		push	1		; int
		push	20006h		; samDesired
		push	offset aSoftwareMicr_1 ; "SOFTWARE\\Microsoft\\Windows\\CurrentVersi"...
		push	80000002h	; hKey
		lea	ecx, [ebp+var_C]
		call	Ordinal1321
		test	eax, eax
		jz	short loc_6B19D4A6
		mov	esi, [esi+23Ch]
		lea	ecx, [ebp+var_50]
		call	Ordinal1021
		push	eax		; lpData
		push	esi		; lpValueName
		lea	ecx, [ebp+var_C]
		call	Ordinal1333
		test	eax, eax
		jz	short loc_6B19D4A6
		lea	ecx, [ebp+var_C]
		call	Ordinal1318
		lea	ecx, [ebp+var_50]
		call	Ordinal1488

loc_6B19D4A2:				; CODE XREF: Ordinal1422+6Cj
		xor	eax, eax
		jmp	short loc_6B19D4C4
; ---------------------------------------------------------------------------

loc_6B19D4A6:				; CODE XREF: Ordinal1422+B4j
					; Ordinal1422+D0j
		push	offset aCserviceappO_3 ; "CServiceApp::OnInstallService() : reg.S"...
		call	sub_6B18102E
		pop	ecx
		lea	ecx, [ebp+var_C]
		call	Ordinal1318

loc_6B19D4B9:				; CODE XREF: Ordinal1422+8Fj
		lea	ecx, [ebp+var_50]
		call	Ordinal1488

loc_6B19D4C1:				; CODE XREF: Ordinal1422+56j
		or	eax, 0FFFFFFFFh

loc_6B19D4C4:				; CODE XREF: Ordinal1422+E4j
		pop	esi
		leave
		retn
Ordinal1422	endp

; Exported entry 1426.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1426
Ordinal1426	proc near		; CODE XREF: Ordinal1423+49p
					; Ordinal1393+4A9p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1269
		test	al, al
		jnz	short loc_6B19D4D8
		xor	eax, eax
		inc	eax
		jmp	short loc_6B19D523
; ---------------------------------------------------------------------------

loc_6B19D4D8:				; CODE XREF: Ordinal1426+Aj
		push	edi		; Args
		xor	edi, edi
		inc	edi
		cmp	[esp+8+arg_0], 0
		lea	ecx, [esi+1F4h]
		jz	short loc_6B19D504
		mov	eax, [esi+23Ch]
		push	1Fh		; Data
		push	0		; lpData
		push	eax		; pszSubKey
		call	Ordinal1056
		test	eax, eax
		jnz	short loc_6B19D520
		push	offset aCserviceappReg ; "CServiceApp::RegisterEventLog() : m_Eve"...
		jmp	short loc_6B19D518
; ---------------------------------------------------------------------------

loc_6B19D504:				; CODE XREF: Ordinal1426+20j
		push	dword ptr [esi+23Ch] ; pszSubKey
		call	Ordinal1057
		test	eax, eax
		jnz	short loc_6B19D520
		push	offset aCserviceappR_1 ; "CServiceApp::RegisterEventLog() : m_Eve"...

loc_6B19D518:				; CODE XREF: Ordinal1426+3Bj
		call	sub_6B18102E
		pop	ecx
		xor	edi, edi

loc_6B19D520:				; CODE XREF: Ordinal1426+34j
					; Ordinal1426+4Aj
		mov	eax, edi
		pop	edi

loc_6B19D523:				; CODE XREF: Ordinal1426+Fj
		pop	esi
		retn	4
Ordinal1426	endp

; Exported entry 1423.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1423
Ordinal1423	proc near		; CODE XREF: Ordinal806+1Aj
					; DATA XREF: .rdata:6B1B6530o ...

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		mov	esi, ecx
		xor	edi, edi
		call	Ordinal1269
		test	al, al
		jz	short loc_6B19D589
		push	dword ptr [esi+23Ch] ; lpServiceName
		mov	ecx, esi
		call	Ordinal1363
		test	eax, eax
		jnz	short loc_6B19D55B
		push	offset aCserviceappO_4 ; "CServiceApp::OnRemoveService() : Remove"...
		call	sub_6B18102E
		pop	ecx
		or	edi, 0FFFFFFFFh

loc_6B19D55B:				; CODE XREF: Ordinal1423+24j
		push	dword ptr [esi+240h]
		lea	ecx, [esi+1F4h]
		call	Ordinal1070
		push	0
		mov	ecx, esi
		call	Ordinal1426
		test	eax, eax
		jnz	short loc_6B19D5D6
		push	offset aCserviceappO_5 ; "CServiceApp::OnRemoveService() : Regist"...
		call	sub_6B18102E
		pop	ecx
		or	edi, 0FFFFFFFFh
		jmp	short loc_6B19D5D6
; ---------------------------------------------------------------------------

loc_6B19D589:				; CODE XREF: Ordinal1423+13j
		lea	ecx, [ebp+var_C]
		call	Ordinal1316
		push	1		; int
		push	20006h		; samDesired
		push	offset aSoftwareMicr_1 ; "SOFTWARE\\Microsoft\\Windows\\CurrentVersi"...
		push	80000002h	; hKey
		lea	ecx, [ebp+var_C]
		call	Ordinal1321
		test	eax, eax
		jz	short loc_6B19D5C0
		push	dword ptr [esi+23Ch] ; lpValueName
		lea	ecx, [ebp+var_C]
		call	Ordinal1328
		test	eax, eax
		jnz	short loc_6B19D5CE

loc_6B19D5C0:				; CODE XREF: Ordinal1423+85j
		push	offset aCserviceappO_6 ; "CServiceApp::OnRemoveService() : reg.De"...
		call	sub_6B18102E
		pop	ecx
		or	edi, 0FFFFFFFFh

loc_6B19D5CE:				; CODE XREF: Ordinal1423+97j
		lea	ecx, [ebp+var_C]
		call	Ordinal1318

loc_6B19D5D6:				; CODE XREF: Ordinal1423+50j
					; Ordinal1423+60j
		mov	eax, edi
		pop	edi
		pop	esi
		leave
		retn
Ordinal1423	endp

; Exported entry 1392.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1392
Ordinal1392	proc near		; CODE XREF: Ordinal799+6j
					; sub_6B19D717+3p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+280h]
		mov	dword ptr [esi], offset	off_6B1B64C0
		call	Ordinal1172
		lea	ecx, [esi+258h]
		call	Ordinal1180
		lea	ecx, [esi+24Ch]
		call	Ordinal1252
		lea	ecx, [esi+244h]
		call	sub_6B1899B5
		lea	ecx, [esi+240h]
		call	sub_6B1899B5
		lea	ecx, [esi+23Ch]
		call	sub_6B1899B5
		lea	ecx, [esi+1F4h]
		call	Ordinal1055
		lea	ecx, [esi+17Ch]
		call	Ordinal841
		lea	ecx, [esi+9Ch]
		call	Ordinal1382
		lea	ecx, [esi+94h]
		call	Ordinal1641
		lea	ecx, [esi+8Ch]
		call	Ordinal1652
		mov	ecx, esi
		pop	esi
		jmp	Ordinal1360
Ordinal1392	endp

; Exported entry 1391.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1391
Ordinal1391	proc near		; CODE XREF: Ordinal798+3p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	Ordinal1359
		and	dword ptr [esi+80h], 0
		and	dword ptr [esi+84h], 0
		and	dword ptr [esi+88h], 0
		lea	ecx, [esi+8Ch]
		mov	dword ptr [esi], offset	off_6B1B64C0
		call	Ordinal1650
		lea	ecx, [esi+94h]
		call	Ordinal1639
		lea	ecx, [esi+9Ch]
		call	Ordinal1381
		lea	ecx, [esi+17Ch]
		call	Ordinal839
		lea	ecx, [esi+1F4h]
		call	Ordinal1054
		and	dword ptr [esi+238h], 0
		lea	ecx, [esi+23Ch]
		call	sub_6B181879
		lea	ecx, [esi+240h]
		call	sub_6B181879
		lea	ecx, [esi+244h]
		call	sub_6B181879
		lea	ecx, [esi+24Ch]
		mov	dword ptr [esi+248h], 3
		call	Ordinal1251
		lea	ecx, [esi+258h]
		call	Ordinal1179
		lea	ecx, [esi+280h]
		call	Ordinal1171
		mov	eax, esi
		pop	esi
		retn
Ordinal1391	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B19D717(void *, char)
sub_6B19D717	proc near		; DATA XREF: .rdata:off_6B1B64C0o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1392
		test	[esp+4+arg_0], 1
		jz	short loc_6B19D72D
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B19D72D:				; CODE XREF: sub_6B19D717+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B19D717	endp

; Exported entry 1387.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1387
Ordinal1387	proc near		; CODE XREF: Ordinal1425+6Fp
					; DATA XREF: .rdata:off_6B1BF428o

var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_104	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		mov	[ebp+var_14], eax
		mov	eax, [ebp+arg_0]
		test	eax, eax
		push	edi
		mov	esi, ecx
		mov	[ebp+var_10], esp
		mov	[ebp+var_28], esi
		jnz	short loc_6B19D76C
		push	offset aCservicewind_3 ; "CServiceWindow::Create() : pServiceApp "...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6B19D884
; ---------------------------------------------------------------------------

loc_6B19D76C:				; CODE XREF: Ordinal1387+25j
		lea	ecx, [ebp+arg_0]
		mov	[esi+48h], eax
		call	sub_6B181879
		and	[ebp+var_4], 0
		push	offset aCservicewind_4 ; "CServiceWindow::Create()"
		lea	ecx, [ebp+var_48]
		call	Ordinal1089
		mov	eax, [esi+48h]
		add	eax, 23Ch
		push	eax
		lea	ecx, [ebp+arg_0]
		mov	byte ptr [ebp+var_4], 2
		call	sub_6B181F8B
		push	offset a_window_class ;	"_Window_Class"
		lea	ecx, [ebp+arg_0]
		call	sub_6B185AA4
		jmp	loc_6B19D84A
; ---------------------------------------------------------------------------

loc_6B19D7AF:				; DATA XREF: .rdata:6B1BC89Co
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B19D847
		retn
; ---------------------------------------------------------------------------

loc_6B19D7F2:				; DATA XREF: .rdata:6B1BC8ACo
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	eax, [ebp+var_4C]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B19D847
		retn
; ---------------------------------------------------------------------------

loc_6B19D847:				; DATA XREF: Ordinal1387+B9o
					; Ordinal1387+10Eo
		mov	esi, [ebp+var_28]

loc_6B19D84A:				; CODE XREF: Ordinal1387+77j
		lea	ecx, [ebp+var_48]
		call	Ordinal1635
		test	eax, eax
		jz	short loc_6B19D85A
		xor	esi, esi
		jmp	short loc_6B19D86F
; ---------------------------------------------------------------------------

loc_6B19D85A:				; CODE XREF: Ordinal1387+121j
		mov	eax, [esi+48h]
		push	dword ptr [eax+23Ch] ; int
		mov	ecx, esi	; lpParameter
		push	[ebp+arg_0]	; Src
		call	Ordinal1164
		mov	esi, eax

loc_6B19D86F:				; CODE XREF: Ordinal1387+125j
		lea	ecx, [ebp+var_48]
		call	Ordinal1090
		mov	ecx, [ebp+arg_0]
		add	ecx, 0FFFFFFF0h
		call	sub_6B18163D
		mov	eax, esi

loc_6B19D884:				; CODE XREF: Ordinal1387+34j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal1387	endp ; sp-analysis failed

; Exported entry 1393.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1393(LPCSTR lpString2, int, int,	int)
		public Ordinal1393
Ordinal1393	proc near		; CODE XREF: Ordinal801+18p
					; DATA XREF: .rdata:off_6B1BF428o

var_D4		= byte ptr -0D4h
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= byte ptr -90h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
Args		= byte ptr -3Ch
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
lpString2	= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	eax, offset __ehhandler$?_Getifld@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAHPADAAV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@1HABVlocale@2@@Z
		call	__EH_prolog
		sub	esp, 0C8h
		mov	eax, ___security_cookie
		or	[ebp+var_28], 0FFFFFFFFh
		and	[ebp+var_64], 0
		push	ebx
		push	esi
		mov	esi, ecx
		push	edi
		lea	ecx, [esi+280h]
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_60], esi
		call	Ordinal1177
		test	al, al
		jnz	short loc_6B19D8E2
		push	offset aCserviceappR_2 ; "CServiceApp::Run() : m_IMM.Create() == "...
		call	sub_6B18101A
		pop	ecx

loc_6B19D8E2:				; CODE XREF: Ordinal1393+38j
		lea	ecx, [esi+258h]
		call	Ordinal1185
		test	al, al
		jnz	short loc_6B19D8FC
		push	offset aCserviceappR_3 ; "CServiceApp::Run() : m_Kernel.Create() "...
		call	sub_6B18101A
		pop	ecx

loc_6B19D8FC:				; CODE XREF: Ordinal1393+52j
		lea	ecx, [esi+24Ch]
		call	Ordinal1257
		test	al, al
		jnz	short loc_6B19D916
		push	offset aCserviceappR_4 ; "CServiceApp::Run() : m_OLE.Create() == "...
		call	sub_6B18101A
		pop	ecx

loc_6B19D916:				; CODE XREF: Ordinal1393+6Cj
		mov	eax, [esi+288h]
		test	eax, eax
		jz	short loc_6B19D93B
		push	0FFFFFFFFh	; Args
		call	eax
		test	eax, eax
		jnz	short loc_6B19D93B
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCserviceappRun ; "CServiceApp::Run() : ImmDisableIME() =="...
		call	sub_6B18101A
		pop	ecx
		pop	ecx

loc_6B19D93B:				; CODE XREF: Ordinal1393+81j
					; Ordinal1393+89j
		lea	edi, [esi+23Ch]
		push	edi		; int
		push	[ebp+lpString2]	; Src
		call	Ordinal1519
		test	al, al
		pop	ecx
		pop	ecx
		jz	loc_6B19DEC2
		lea	eax, [esi+240h]
		push	eax		; int
		push	[ebp+arg_4]	; Src
		call	Ordinal1519
		test	al, al
		pop	ecx
		pop	ecx
		jz	loc_6B19DEC2
		lea	eax, [esi+244h]
		push	eax		; int
		push	[ebp+arg_8]	; Src
		call	Ordinal1519
		test	al, al
		pop	ecx
		pop	ecx
		jz	loc_6B19DEC2
		mov	eax, [esi+248h]
		cmp	eax, 3
		jz	short loc_6B19D9B4
		push	eax
		call	Ordinal778
		test	eax, eax
		pop	ecx
		jge	short loc_6B19D9AD
		push	eax		; Args
		push	offset aCserviceappR_5 ; "CServiceApp::Run() : CCoInitialize::CoI"...
		call	sub_6B18102E
		pop	ecx
		jmp	loc_6B19DECC
; ---------------------------------------------------------------------------

loc_6B19D9AD:				; CODE XREF: Ordinal1393+FDj
		mov	[ebp+var_64], 1

loc_6B19D9B4:				; CODE XREF: Ordinal1393+F2j
		lea	ecx, [ebp+var_90]
		call	Ordinal1245
		and	[ebp+var_4], 0
		lea	ecx, [ebp+var_90]
		call	Ordinal1249
		test	eax, eax
		jnz	short loc_6B19D9E2
		push	offset aCserviceappR_6 ; "CServiceApp::Run() : nullDacl.Create() "...
		call	sub_6B18102E
		pop	ecx
		jmp	loc_6B19DEB5
; ---------------------------------------------------------------------------

loc_6B19D9E2:				; CODE XREF: Ordinal1393+133j
		lea	ecx, [ebp+var_D4]
		call	Ordinal601
		lea	ecx, [ebp+var_D4]
		mov	byte ptr [ebp+var_4], 1
		call	Ordinal605
		test	eax, eax
		jnz	short loc_6B19DA10
		push	offset aCserviceappR_7 ; "CServiceApp::Run() : adminDacl.Create()"...
		call	sub_6B18102E
		pop	ecx
		jmp	loc_6B19DEAA
; ---------------------------------------------------------------------------

loc_6B19DA10:				; CODE XREF: Ordinal1393+161j
		lea	ecx, [ebp+lpString2]
		call	sub_6B181879
		push	offset aCserviceappR_8 ; "CServiceApp::Run()"
		lea	ecx, [ebp+var_5C]
		call	Ordinal1089
		push	edi
		lea	ecx, [ebp+lpString2]
		mov	byte ptr [ebp+var_4], 4
		call	sub_6B181F8B
		push	offset a_terminate_loc ; "_Terminate_Lock"
		lea	ecx, [ebp+lpString2]
		call	sub_6B185AA4
		jmp	loc_6B19DAE5
; ---------------------------------------------------------------------------

loc_6B19DA44:				; DATA XREF: .rdata:6B1BC934o
		push	13h
		lea	ecx, [ebp+var_5C]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_5C]
		call	Ordinal1101
		mov	ecx, [ebp+var_98]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_5C]
		call	Ordinal1103
		lea	ecx, [ebp+var_5C]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B19DAE2
		retn
; ---------------------------------------------------------------------------

loc_6B19DA8A:				; DATA XREF: .rdata:6B1BC944o
		push	15h
		lea	ecx, [ebp+var_5C]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_5C]
		call	Ordinal1101
		mov	eax, [ebp+var_94]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_5C]
		call	Ordinal1103
		lea	ecx, [ebp+var_5C]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B19DAE2
		retn
; ---------------------------------------------------------------------------

loc_6B19DAE2:				; DATA XREF: Ordinal1393+1E7o
					; Ordinal1393+23Fo
		mov	esi, [ebp+var_60]

loc_6B19DAE5:				; CODE XREF: Ordinal1393+1A2j
		push	3
		pop	ebx
		lea	ecx, [ebp+var_5C]
		mov	[ebp+var_4], ebx
		call	Ordinal1635
		test	eax, eax
		jz	short loc_6B19DB0A

loc_6B19DAF7:				; CODE XREF: Ordinal1393+442j
		lea	ecx, [ebp+var_5C]
		call	Ordinal1090
		mov	ecx, [ebp+lpString2]
		add	ecx, 0FFFFFFF0h
		jmp	loc_6B19DEA5
; ---------------------------------------------------------------------------

loc_6B19DB0A:				; CODE XREF: Ordinal1393+258j
		mov	edi, [ebp+lpString2]
		push	1		; int
		push	edi		; lpString2
		push	0		; bInitialState
		push	1		; bManualReset
		lea	ecx, [ebp+var_D4]
		call	Ordinal1105
		push	eax		; lpEventAttributes
		lea	ecx, [esi+8Ch]
		call	Ordinal1654
		test	eax, eax
		jnz	short loc_6B19DB3F
		push	offset aCserviceappR_9 ; "CServiceApp::Run() : m_TerminateEvent.C"...

loc_6B19DB34:				; CODE XREF: Ordinal1393+2B2j
		call	sub_6B18102E
		pop	ecx
		jmp	loc_6B19DE9A
; ---------------------------------------------------------------------------

loc_6B19DB3F:				; CODE XREF: Ordinal1393+290j
		mov	ecx, esi
		call	Ordinal1407
		test	eax, eax
		jz	short loc_6B19DB51
		push	offset aCserviceapp_10 ; "CServiceApp::Run() : IsTerminating() !="...
		jmp	short loc_6B19DB34
; ---------------------------------------------------------------------------

loc_6B19DB51:				; CODE XREF: Ordinal1393+2ABj
		lea	ecx, [ebp+Args]
		call	Ordinal780
		lea	ecx, [ebp+Args]
		mov	byte ptr [ebp+var_4], 6
		call	Ordinal783
		test	al, al
		jnz	short loc_6B19DB79
		push	offset aCserviceapp_11 ; "CServiceApp::Run() : commandLine.Parse("...

loc_6B19DB6E:				; CODE XREF: Ordinal1393+471j
					; Ordinal1393+4CCj ...
		call	sub_6B18102E
		pop	ecx
		jmp	loc_6B19DE92
; ---------------------------------------------------------------------------

loc_6B19DB79:				; CODE XREF: Ordinal1393+2CAj
		push	2
		push	offset off_6B1B5F88
		lea	ecx, [ebp+Args]
		call	Ordinal790
		test	al, al
		jz	short loc_6B19DBA3
		push	offset aCserviceapp_12 ; "CServiceApp::Run() : OnShowVersion()\n"
		call	sub_6B181006
		mov	eax, [esi]
		pop	ecx
		mov	ecx, esi
		call	dword ptr [eax+5Ch]
		jmp	loc_6B19DE8F
; ---------------------------------------------------------------------------

loc_6B19DBA3:				; CODE XREF: Ordinal1393+2EDj
		push	ebx
		push	offset off_6B1B5F90
		lea	ecx, [ebp+Args]
		call	Ordinal790
		test	al, al
		jz	short loc_6B19DBCC
		push	offset aCserviceapp_13 ; "CServiceApp::Run() : OnShowHelp()\n"
		call	sub_6B181006
		mov	eax, [esi]
		pop	ecx
		mov	ecx, esi
		call	dword ptr [eax+58h]
		jmp	loc_6B19DE8F
; ---------------------------------------------------------------------------

loc_6B19DBCC:				; CODE XREF: Ordinal1393+316j
		push	2
		push	offset off_6B1B5F9C
		lea	ecx, [ebp+Args]
		call	Ordinal790
		test	al, al
		jz	short loc_6B19DBF6
		push	offset aCserviceapp_14 ; "CServiceApp::Run() : OnTerminate()\n"
		call	sub_6B18102E
		mov	eax, [esi]
		pop	ecx
		mov	ecx, esi
		call	dword ptr [eax+54h]
		jmp	loc_6B19DE8F
; ---------------------------------------------------------------------------

loc_6B19DBF6:				; CODE XREF: Ordinal1393+340j
		lea	ecx, [ebp+var_5C]
		call	Ordinal1092
		lea	eax, [esi+23Ch]
		push	eax
		lea	ecx, [ebp+lpString2]
		mov	byte ptr [ebp+var_4], 7
		call	sub_6B181F8B
		push	offset a_single_instan ; "_Single_Instance_Lock"
		lea	ecx, [ebp+lpString2]
		call	sub_6B185AA4
		jmp	loc_6B19DCC4
; ---------------------------------------------------------------------------

loc_6B19DC23:				; DATA XREF: .rdata:6B1BC954o
		push	13h
		lea	ecx, [ebp+var_5C]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_5C]
		call	Ordinal1101
		mov	ecx, [ebp+var_94]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_5C]
		call	Ordinal1103
		lea	ecx, [ebp+var_5C]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B19DCC1
		retn
; ---------------------------------------------------------------------------

loc_6B19DC69:				; DATA XREF: .rdata:6B1BC964o
		push	15h
		lea	ecx, [ebp+var_5C]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_5C]
		call	Ordinal1101
		mov	eax, [ebp+var_98]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_5C]
		call	Ordinal1103
		lea	ecx, [ebp+var_5C]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B19DCC1
		retn
; ---------------------------------------------------------------------------

loc_6B19DCC1:				; DATA XREF: Ordinal1393+3C6o
					; Ordinal1393+41Eo
		mov	esi, [ebp+var_60]

loc_6B19DCC4:				; CODE XREF: Ordinal1393+381j
		lea	ecx, [ebp+var_5C]
		mov	[ebp+var_4], 6
		call	Ordinal1635
		test	eax, eax
		jz	short loc_6B19DCE4
		lea	ecx, [ebp+Args]
		call	Ordinal781
		jmp	loc_6B19DAF7
; ---------------------------------------------------------------------------

loc_6B19DCE4:				; CODE XREF: Ordinal1393+438j
		mov	edi, [ebp+lpString2]
		push	1		; int
		push	edi		; lpString2
		push	0		; bInitialOwner
		lea	ecx, [ebp+var_90]
		lea	ebx, [esi+94h]
		call	Ordinal1105
		push	eax		; lpMutexAttributes
		mov	ecx, ebx
		call	Ordinal1643
		test	eax, eax
		jnz	short loc_6B19DD13
		push	offset aCserviceapp_15 ; "CServiceApp::Run() : m_InstanceMutex.Cr"...
		jmp	loc_6B19DB6E
; ---------------------------------------------------------------------------

loc_6B19DD13:				; CODE XREF: Ordinal1393+46Aj
		mov	eax, [ebx]
		push	0
		push	0		; Args
		mov	ecx, ebx
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6B19DD39
		push	offset aCserviceapp_16 ; "CServiceApp::Run() : OnSingleInstance()"...
		call	sub_6B18102E
		mov	eax, [esi]
		pop	ecx
		mov	ecx, esi
		call	dword ptr [eax+50h]
		jmp	loc_6B19DE8F
; ---------------------------------------------------------------------------

loc_6B19DD39:				; CODE XREF: Ordinal1393+483j
		call	Ordinal1269
		test	al, al
		jz	short loc_6B19DD6E
		push	1
		mov	ecx, esi
		call	Ordinal1426
		test	eax, eax
		jz	short loc_6B19DD64
		push	dword ptr [esi+23Ch] ; lpSourceName
		lea	ecx, [esi+1F4h]
		call	Ordinal1058
		test	eax, eax
		jnz	short loc_6B19DD6E

loc_6B19DD64:				; CODE XREF: Ordinal1393+4B0j
		push	offset aCserviceapp_17 ; "CServiceApp::Run() : RegisterEventLog()"...
		jmp	loc_6B19DB6E
; ---------------------------------------------------------------------------

loc_6B19DD6E:				; CODE XREF: Ordinal1393+4A3j
					; Ordinal1393+4C5j
		mov	eax, [esi]
		lea	ecx, [ebp+Args]
		push	ecx		; Args
		mov	ecx, esi
		call	dword ptr [eax+4Ch]
		test	eax, eax
		jnz	short loc_6B19DD87
		push	offset aCserviceapp_18 ; "CServiceApp::Run() : ProcessCommandLine"...
		jmp	loc_6B19DB6E
; ---------------------------------------------------------------------------

loc_6B19DD87:				; CODE XREF: Ordinal1393+4DEj
		push	2
		push	offset off_6B1B5F78
		lea	ecx, [ebp+Args]
		call	Ordinal790
		test	al, al
		jz	short loc_6B19DDB1
		push	offset aCserviceapp_19 ; "CServiceApp::Run() : OnInstallService()"...
		call	sub_6B181006
		mov	eax, [esi]
		pop	ecx
		mov	ecx, esi
		call	dword ptr [eax+6Ch]
		jmp	loc_6B19DE8F
; ---------------------------------------------------------------------------

loc_6B19DDB1:				; CODE XREF: Ordinal1393+4FBj
		push	2
		push	offset off_6B1B5F80
		lea	ecx, [ebp+Args]
		call	Ordinal790
		test	al, al
		jz	short loc_6B19DDDB
		push	offset aCserviceapp_20 ; "CServiceApp::Run() : OnRemoveService()\n"...
		call	sub_6B181006
		mov	eax, [esi]
		pop	ecx
		mov	ecx, esi
		call	dword ptr [eax+70h]
		jmp	loc_6B19DE8F
; ---------------------------------------------------------------------------

loc_6B19DDDB:				; CODE XREF: Ordinal1393+525j
		push	1
		push	offset off_6B1B5FA8
		lea	ecx, [ebp+Args]
		call	Ordinal790
		test	al, al
		jz	short loc_6B19DE05
		push	offset aCserviceapp_21 ; "CServiceApp::Run() : OnRegServer()\n"
		call	sub_6B181006
		mov	eax, [esi]
		pop	ecx
		mov	ecx, esi
		call	dword ptr [eax+64h]
		jmp	loc_6B19DE8F
; ---------------------------------------------------------------------------

loc_6B19DE05:				; CODE XREF: Ordinal1393+54Fj
		push	1
		push	offset off_6B1B5FAC
		lea	ecx, [ebp+Args]
		call	Ordinal790
		test	al, al
		jz	short loc_6B19DE2C
		push	offset aCserviceapp_22 ; "CServiceApp::Run() : OnUnregServer()\n"
		call	sub_6B181006
		mov	eax, [esi]
		pop	ecx
		mov	ecx, esi
		call	dword ptr [eax+68h]
		jmp	short loc_6B19DE8F
; ---------------------------------------------------------------------------

loc_6B19DE2C:				; CODE XREF: Ordinal1393+579j
		push	2
		push	offset off_6B1B5F70
		lea	ecx, [ebp+Args]
		call	Ordinal790
		test	al, al
		jz	short loc_6B19DE53
		push	offset aCserviceapp_23 ; "CServiceApp::Run() : OnRunDebug()\n"
		call	sub_6B181006
		mov	eax, [esi]
		pop	ecx
		mov	ecx, esi
		call	dword ptr [eax+74h]
		jmp	short loc_6B19DE8F
; ---------------------------------------------------------------------------

loc_6B19DE53:				; CODE XREF: Ordinal1393+5A0j
		push	1
		push	offset off_6B1B5FA4
		lea	ecx, [ebp+Args]
		call	Ordinal790
		test	al, al
		jz	short loc_6B19DE7A
		push	offset aCserviceapp_24 ; "CServiceApp::Run() : OnRunEmbedded()\n"
		call	sub_6B181006
		mov	eax, [esi]
		pop	ecx
		mov	ecx, esi
		call	dword ptr [eax+60h]
		jmp	short loc_6B19DE8F
; ---------------------------------------------------------------------------

loc_6B19DE7A:				; CODE XREF: Ordinal1393+5C7j
		push	offset aCserviceapp_25 ; "CServiceApp::Run() : OnRunService()\n"
		call	sub_6B181006
		mov	eax, [esi]
		pop	ecx
		push	[ebp+arg_C]
		mov	ecx, esi
		call	dword ptr [eax+78h]

loc_6B19DE8F:				; CODE XREF: Ordinal1393+301j
					; Ordinal1393+32Aj ...
		mov	[ebp+var_28], eax

loc_6B19DE92:				; CODE XREF: Ordinal1393+2D7j
		lea	ecx, [ebp+Args]
		call	Ordinal781

loc_6B19DE9A:				; CODE XREF: Ordinal1393+29Dj
		lea	ecx, [ebp+var_5C]
		call	Ordinal1090
		lea	ecx, [edi-10h]

loc_6B19DEA5:				; CODE XREF: Ordinal1393+268j
		call	sub_6B18163D

loc_6B19DEAA:				; CODE XREF: Ordinal1393+16Ej
		lea	ecx, [ebp+var_D4]
		call	Ordinal602

loc_6B19DEB5:				; CODE XREF: Ordinal1393+140j
		lea	ecx, [ebp+var_90]
		call	Ordinal1246
		jmp	short loc_6B19DECD
; ---------------------------------------------------------------------------

loc_6B19DEC2:				; CODE XREF: Ordinal1393+B1j
					; Ordinal1393+CAj ...
		push	offset aCserviceapp_26 ; "CServiceApp::Run() : CStringConvert::Co"...
		call	sub_6B18102E

loc_6B19DECC:				; CODE XREF: Ordinal1393+10Bj
		pop	ecx

loc_6B19DECD:				; CODE XREF: Ordinal1393+623j
		call	Ordinal1269
		test	al, al
		jz	short loc_6B19DEE1
		lea	ecx, [esi+1F4h]
		call	Ordinal1059

loc_6B19DEE1:				; CODE XREF: Ordinal1393+637j
		cmp	[ebp+var_64], 0
		jz	short loc_6B19DEEC
		call	Ordinal779

loc_6B19DEEC:				; CODE XREF: Ordinal1393+648j
		mov	ecx, [ebp+var_C]
		mov	eax, [ebp+var_28]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	10h
Ordinal1393	endp ; sp-analysis failed

; Exported entry 1425.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1425
Ordinal1425	proc near		; CODE XREF: Ordinal802+1Fj
					; Ordinal1419+63p
					; DATA XREF: ...

var_50		= byte ptr -50h
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 50h
		or	[ebp+var_4], 0FFFFFFFFh
		push	esi
		mov	esi, ecx
		push	edi
		lea	ecx, [ebp+var_50]
		mov	dword ptr [esi+88h], 1
		call	Ordinal1385
		call	Ordinal1269
		test	al, al
		jnz	short loc_6B19DF68
		lea	ecx, [esi+258h]
		call	Ordinal1185
		test	al, al
		jz	short loc_6B19DF61
		lea	edi, [esi+264h]
		cmp	dword ptr [edi], 0
		jz	short loc_6B19DF61
		push	1
		call	ds:GetCurrentProcessId
		push	eax
		call	dword ptr [edi]
		test	eax, eax
		jnz	short loc_6B19DF68
		push	offset aCserviceapp_27 ; "CServiceApp::RunHiddenWindow() : m_Kern"...
		jmp	short loc_6B19DF85
; ---------------------------------------------------------------------------

loc_6B19DF61:				; CODE XREF: Ordinal1425+36j
					; Ordinal1425+41j
		push	offset aCserviceapp_28 ; "CServiceApp::RunHiddenWindow() : m_Kern"...
		jmp	short loc_6B19DF85
; ---------------------------------------------------------------------------

loc_6B19DF68:				; CODE XREF: Ordinal1425+27j
					; Ordinal1425+50j
		push	offset aCserviceapp_29 ; "CServiceApp::RunHiddenWindow() : servic"...
		call	sub_6B181006
		pop	ecx
		push	esi
		lea	ecx, [ebp+var_50]
		call	Ordinal1387
		test	eax, eax
		jnz	short loc_6B19DF8D
		push	offset aCserviceapp_30 ; "CServiceApp::RunHiddenWindow() : servic"...

loc_6B19DF85:				; CODE XREF: Ordinal1425+57j
					; Ordinal1425+5Ej
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B19DFAC
; ---------------------------------------------------------------------------

loc_6B19DF8D:				; CODE XREF: Ordinal1425+76j
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+4]
		push	offset aCserviceapp_31 ; "CServiceApp::RunHiddenWindow() : servic"...
		mov	[ebp+var_4], eax
		call	sub_6B181006
		pop	ecx
		push	0FFFFFFFFh	; dwMilliseconds
		lea	ecx, [ebp+var_50]
		call	Ordinal1741

loc_6B19DFAC:				; CODE XREF: Ordinal1425+83j
		add	esi, 264h
		cmp	dword ptr [esi], 0
		jz	short loc_6B19DFC2
		push	0
		call	ds:GetCurrentProcessId
		push	eax
		call	dword ptr [esi]

loc_6B19DFC2:				; CODE XREF: Ordinal1425+ADj
		lea	ecx, [ebp+var_50]
		call	Ordinal1386
		mov	eax, [ebp+var_4]
		pop	edi
		pop	esi
		leave
		retn
Ordinal1425	endp

; Exported entry 1419.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1419
Ordinal1419	proc near		; CODE XREF: Ordinal807+3Dp
					; DATA XREF: .rdata:6B1B6538o ...

arg_0		= dword	ptr  4

		push	esi
		push	8007h		; uMode
		mov	esi, ecx
		call	ds:SetErrorMode
		mov	dword ptr [esi+84h], 1
		call	Ordinal1269
		test	al, al
		jz	short loc_6B19E027
		push	offset aCserviceappO_7 ; "CServiceApp::OnRunService() :	Register("...
		call	sub_6B181006
		mov	eax, [esi+23Ch]
		pop	ecx
		push	[esp+4+arg_0]
		mov	ecx, esi
		push	eax
		call	Ordinal1361
		test	eax, eax
		jnz	short loc_6B19E023
		push	offset aCserviceappO_8 ; "CServiceApp::OnRunService() :	Register("...
		call	sub_6B18102E
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_6B19E039
; ---------------------------------------------------------------------------

loc_6B19E023:				; CODE XREF: Ordinal1419+40j
		xor	eax, eax
		jmp	short loc_6B19E039
; ---------------------------------------------------------------------------

loc_6B19E027:				; CODE XREF: Ordinal1419+1Fj
		push	offset aCserviceappO_9 ; "CServiceApp::OnRunService() :	RunHidden"...
		call	sub_6B181006
		pop	ecx
		mov	ecx, esi
		call	Ordinal1425

loc_6B19E039:				; CODE XREF: Ordinal1419+50j
					; Ordinal1419+54j
		pop	esi
		retn	4
Ordinal1419	endp

; Exported entry 1427.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1427
Ordinal1427	proc near		; CODE XREF: Ordinal1450+14p
					; Ordinal1452+27p ...
		push	esi
		mov	esi, ecx
		and	word ptr [esi+2], 0
		push	0		; hostlong
		mov	word ptr [esi],	2
		call	ds:htonl
		push	8		; Size
		mov	[esi+4], eax
		lea	eax, [esi+8]
		push	0		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		retn
Ordinal1427	endp

; Exported entry 1428.
; Exported entry 1429.
; Exported entry 1431.
; Exported entry 1432.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1428
Ordinal1428	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, ecx	; ccL35_1428
					; ccL35_1429
					; ccL35_1431
		retn	4
Ordinal1428	endp

; Exported entry 1433.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1433
Ordinal1433	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		push	2		; type
		lea	esi, [ecx+4]
		push	4		; len
		push	esi		; addr
		call	ds:gethostbyaddr
		test	eax, eax
		jnz	short loc_6B19E08B
		push	dword ptr [esi]	; in
		call	ds:inet_ntoa
		jmp	short loc_6B19E08D
; ---------------------------------------------------------------------------

loc_6B19E08B:				; CODE XREF: Ordinal1433+11j
		mov	eax, [eax]

loc_6B19E08D:				; CODE XREF: Ordinal1433+1Bj
		push	[esp+4+arg_0]	; int
		push	eax		; Src
		call	Ordinal1519
		test	al, al
		pop	ecx
		pop	ecx
		pop	esi
		jnz	short loc_6B19E0AD
		push	offset aCaddressGetadd ; "CAddress::GetAddress() : CStringConvert"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short locret_6B19E0B0
; ---------------------------------------------------------------------------

loc_6B19E0AD:				; CODE XREF: Ordinal1433+2Ej
		xor	eax, eax
		inc	eax

locret_6B19E0B0:			; CODE XREF: Ordinal1433+3Dj
		retn	4
Ordinal1433	endp

; Exported entry 1435.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1435
Ordinal1435	proc near		; DATA XREF: .rdata:off_6B1BF428o
		xor	eax, eax
		mov	ax, [ecx+2]
		push	eax		; netshort
		call	ds:ntohs
		movzx	eax, ax
		retn
Ordinal1435	endp

; Exported entry 1436.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1436(u_short hostshort)
		public Ordinal1436
Ordinal1436	proc near		; CODE XREF: Ordinal1450+50p
					; Ordinal1452+41p ...

hostshort	= word ptr  4

		push	esi
		push	dword ptr [esp+4+hostshort] ; hostshort
		mov	esi, ecx
		call	ds:htons
		mov	[esi+2], ax
		xor	eax, eax
		inc	eax
		pop	esi
		retn	4
Ordinal1436	endp

; Exported entry 1437.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1437
Ordinal1437	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, ecx
		or	dword ptr [eax+4], 0FFFFFFFFh
		and	dword ptr [eax+8], 0
		and	dword ptr [eax+0Ch], 0
		mov	dword ptr [eax], offset	off_6B1B6C24
		retn
Ordinal1437	endp

; Exported entry 1443.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1443
Ordinal1443	proc near		; DATA XREF: .rdata:off_6B1BF428o

WSAData		= WSAData ptr -194h
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 194h
		mov	eax, ___security_cookie
		mov	[ebp+var_4], eax
		lea	eax, [ebp+WSAData]
		push	eax		; lpWSAData
		push	202h		; wVersionRequested
		call	ds:WSAStartup
		test	eax, eax
		jz	short loc_6B19E131
		push	eax		; Args
		push	offset aCsocketStartup ; "CSocket::Startup() : WSAStartup() != 0,"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx

loc_6B19E125:				; CODE XREF: Ordinal1443+47j
					; Ordinal1443+50j
		xor	eax, eax

loc_6B19E127:				; CODE XREF: Ordinal1443+55j
		mov	ecx, [ebp+var_4]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn
; ---------------------------------------------------------------------------

loc_6B19E131:				; CODE XREF: Ordinal1443+25j
		cmp	byte ptr [ebp+WSAData.wVersion], 2
		jnz	short loc_6B19E125
		cmp	byte ptr [ebp+WSAData.wVersion+1], 2
		jnz	short loc_6B19E125
		xor	eax, eax
		inc	eax
		jmp	short loc_6B19E127
Ordinal1443	endp

; Exported entry 1444.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1444
Ordinal1444	proc near		; DATA XREF: .rdata:off_6B1BF428o
		call	ds:WSACleanup
		test	eax, eax
		jz	short loc_6B19E168
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketStart_0 ; "CSocket::Startup() : WSACleanup() != 0,"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6B19E168:				; CODE XREF: Ordinal1444+8j
		xor	eax, eax
		inc	eax
		retn
Ordinal1444	endp

; Exported entry 1449.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1449(struct sockaddr *name)
		public Ordinal1449
Ordinal1449	proc near		; CODE XREF: Ordinal1453+7p
					; Ordinal1450+5Bp
					; DATA XREF: ...

name		= dword	ptr  4

		push	esi
		push	10h		; namelen
		push	[esp+8+name]	; name
		mov	esi, ecx
		push	dword ptr [esi+4] ; s
		call	ds:bind
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6B19E19D
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketBindBin ; "CSocket::Bind() : bind() == SOCKET_ERRO"...
		mov	[esi+0Ch], eax
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B19E1A0
; ---------------------------------------------------------------------------

loc_6B19E19D:				; CODE XREF: Ordinal1449+15j
		xor	eax, eax
		inc	eax

loc_6B19E1A0:				; CODE XREF: Ordinal1449+2Fj
		pop	esi
		retn	4
Ordinal1449	endp

; Exported entry 1451.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1451(struct sockaddr *name)
		public Ordinal1451
Ordinal1451	proc near		; CODE XREF: Ordinal1452+50p
					; DATA XREF: .rdata:off_6B1BF428o

name		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		call	dword ptr [eax+8]
		xor	eax, eax
		push	eax		; lpGQOS
		push	eax		; lpSQOS
		push	eax		; lpCalleeData
		push	eax		; lpCallerData
		push	10h		; namelen
		push	[esp+18h+name]	; name
		push	dword ptr [esi+4] ; s
		call	ds:WSAConnect
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6B19E1E0
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketConnect ; "CSocket::Connect() : WSAConnect() == SO"...
		mov	[esi+0Ch], eax
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B19E1EA
; ---------------------------------------------------------------------------

loc_6B19E1E0:				; CODE XREF: Ordinal1451+20j
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+4]
		xor	eax, eax
		inc	eax

loc_6B19E1EA:				; CODE XREF: Ordinal1451+3Aj
		pop	esi
		retn	4
Ordinal1451	endp

; Exported entry 1453.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1453(struct sockaddr *name)
		public Ordinal1453
Ordinal1453	proc near		; CODE XREF: Ordinal1454+5Bp
					; DATA XREF: .rdata:off_6B1BF428o

name		= dword	ptr  4

		push	esi
		push	[esp+4+name]	; name
		mov	esi, ecx
		call	Ordinal1449
		test	eax, eax
		jnz	short loc_6B19E20A
		push	offset aCsocketListenB ; "CSocket::Listen() : Bind() ==	FALSE\n"
		call	sub_6B18102E
		jmp	short loc_6B19E239
; ---------------------------------------------------------------------------

loc_6B19E20A:				; CODE XREF: Ordinal1453+Ej
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+0Ch]
		push	7FFFFFFFh	; backlog
		push	dword ptr [esi+4] ; s
		call	ds:listen
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6B19E23E
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketListenL ; "CSocket::Listen() : listen() == SOCKET_"...
		mov	[esi+0Ch], eax
		call	sub_6B18102E
		pop	ecx

loc_6B19E239:				; CODE XREF: Ordinal1453+1Aj
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B19E248
; ---------------------------------------------------------------------------

loc_6B19E23E:				; CODE XREF: Ordinal1453+34j
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+4]
		xor	eax, eax
		inc	eax

loc_6B19E248:				; CODE XREF: Ordinal1453+4Ej
		pop	esi
		retn	4
Ordinal1453	endp

; Exported entry 1455.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1455
Ordinal1455	proc near		; DATA XREF: .rdata:off_6B1BF428o

addrlen		= dword	ptr -18h
Dst		= byte ptr -14h
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ___security_cookie
		push	esi
		push	edi
		push	10h
		pop	edi
		push	edi		; Size
		mov	[ebp+var_4], eax
		lea	eax, [ebp+Dst]
		push	0		; Val
		push	eax		; Dst
		mov	esi, ecx
		call	memset
		add	esp, 0Ch
		push	0		; dwCallbackData
		push	0		; lpfnCondition
		lea	eax, [ebp+addrlen]
		push	eax		; addrlen
		lea	eax, [ebp+Dst]
		push	eax		; addr
		push	dword ptr [esi+4] ; s
		mov	[ebp+addrlen], edi
		call	ds:WSAAccept
		mov	edi, eax
		cmp	edi, 0FFFFFFFFh
		jnz	short loc_6B19E2AC
		call	ds:WSAGetLastError
		cmp	eax, 2733h
		mov	[esi+0Ch], eax
		jz	short loc_6B19E2AC
		push	eax		; Args
		push	offset aCsocketAcceptW ; "CSocket::Accept() : WSAAccept() == INVA"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx

loc_6B19E2AC:				; CODE XREF: Ordinal1455+41j
					; Ordinal1455+51j
		mov	ecx, [ebp+var_4]
		mov	eax, edi
		pop	edi
		pop	esi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn
Ordinal1455	endp

; Exported entry 1456.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1456(int, int, LPDWORD Flags)
		public Ordinal1456
Ordinal1456	proc near		; DATA XREF: .rdata:off_6B1BF428o

Buffers		= _WSABUF ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
Flags		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		mov	edx, [ebp+arg_0]
		push	esi
		xor	eax, eax
		cmp	edx, eax
		push	edi
		mov	edi, [ebp+Flags]
		mov	esi, ecx
		mov	[edi], eax
		jz	short loc_6B19E31F
		mov	ecx, [ebp+arg_4]
		cmp	ecx, eax
		jz	short loc_6B19E31F
		push	eax		; lpCompletionRoutine
		push	eax		; lpOverlapped
		mov	[ebp+Flags], eax
		lea	eax, [ebp+Flags]
		push	eax		; lpFlags
		push	edi		; lpNumberOfBytesRecvd
		push	1		; dwBufferCount
		lea	eax, [ebp+Buffers]
		push	eax		; lpBuffers
		push	dword ptr [esi+4] ; s
		mov	[ebp+Buffers.buf], edx
		mov	[ebp+Buffers.len], ecx
		call	ds:WSARecv
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6B19E31A
		call	ds:WSAGetLastError
		cmp	eax, 2733h
		mov	[esi+0Ch], eax
		jz	short loc_6B19E31A
		push	eax		; Args
		push	offset aCsocketReadWsa ; "CSocket::Read() : WSARecv() == SOCKET_E"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B19E329
; ---------------------------------------------------------------------------

loc_6B19E31A:				; CODE XREF: Ordinal1456+40j
					; Ordinal1456+50j
		xor	eax, eax
		inc	eax
		jmp	short loc_6B19E32C
; ---------------------------------------------------------------------------

loc_6B19E31F:				; CODE XREF: Ordinal1456+15j
					; Ordinal1456+1Cj
		push	offset aCsocketReadPda ; "CSocket::Read() : pData == NULL\n"
		call	sub_6B18102E

loc_6B19E329:				; CODE XREF: Ordinal1456+5Ej
		pop	ecx
		xor	eax, eax

loc_6B19E32C:				; CODE XREF: Ordinal1456+63j
		pop	edi
		pop	esi
		leave
		retn	0Ch
Ordinal1456	endp

; Exported entry 1457.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1457(DWORD dwFlags, int,	LPDWORD	lpNumberOfBytesSent)
		public Ordinal1457
Ordinal1457	proc near		; DATA XREF: .rdata:off_6B1BF428o

Dst		= byte ptr -24h
var_14		= dword	ptr -14h
Buffers		= _WSABUF ptr -10h
var_8		= byte ptr -8
dwFlags		= dword	ptr  8
arg_4		= dword	ptr  0Ch
lpNumberOfBytesSent= dword ptr	10h

		push	ebp
		mov	ebp, esp
		sub	esp, 24h
		push	ebx
		mov	ebx, [ebp+lpNumberOfBytesSent]
		push	esi
		push	edi
		mov	esi, ecx
		mov	ecx, [ebp+dwFlags]
		xor	edi, edi
		cmp	ecx, edi
		mov	[ebx], edi
		jz	loc_6B19E453
		mov	eax, [ebp+arg_4]
		cmp	eax, edi
		jz	loc_6B19E453
		cmp	[esi+8], edi
		mov	[ebp+Buffers.buf], ecx
		mov	[ebp+Buffers.len], eax
		jz	loc_6B19E424
		push	14h		; Size
		lea	eax, [ebp+Dst]
		push	edi		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		lea	ecx, [ebp+var_8]
		call	Ordinal1650
		push	edi		; int
		push	edi		; lpString2
		push	edi		; bInitialState
		push	1		; bManualReset
		push	edi		; lpEventAttributes
		lea	ecx, [ebp+var_8]
		call	Ordinal1654
		test	eax, eax
		jnz	short loc_6B19E39E
		push	offset aCsocketWriteHe ; "CSocket::Write() : hEvent.Create() ==	F"...
		call	sub_6B18102E
		jmp	short loc_6B19E40C
; ---------------------------------------------------------------------------

loc_6B19E39E:				; CODE XREF: Ordinal1457+5Ej
		lea	ecx, [ebp+var_8]
		call	Ordinal1649
		push	edi		; lpCompletionRoutine
		mov	[ebp+var_14], eax
		lea	eax, [ebp+Dst]
		push	eax		; lpOverlapped
		push	edi		; dwFlags
		push	ebx		; lpNumberOfBytesSent
		push	1		; dwBufferCount
		lea	eax, [ebp+Buffers]
		push	eax		; lpBuffers
		push	dword ptr [esi+4] ; s
		call	ds:WSASend
		cmp	eax, 0FFFFFFFFh
		mov	ebx, ds:WSAGetLastError
		jnz	short loc_6B19E3DE
		call	ebx ; WSAGetLastError
		cmp	eax, 3E5h
		mov	[esi+0Ch], eax
		jz	short loc_6B19E3DE
		push	eax
		push	offset aCsocketWriteWs ; "CSocket::Write() : WSASend() == SOCKET_"...
		jmp	short loc_6B19E406
; ---------------------------------------------------------------------------

loc_6B19E3DE:				; CODE XREF: Ordinal1457+96j
					; Ordinal1457+A2j
		lea	eax, [ebp+dwFlags]
		push	eax		; lpdwFlags
		push	1		; fWait
		push	[ebp+lpNumberOfBytesSent] ; lpcbTransfer
		lea	eax, [ebp+Dst]
		push	eax		; lpOverlapped
		push	dword ptr [esi+4] ; s
		mov	[ebp+dwFlags], edi
		call	ds:WSAGetOverlappedResult
		test	eax, eax
		jnz	short loc_6B19E417
		call	ebx ; WSAGetLastError
		push	eax		; Args
		mov	[esi+0Ch], eax
		push	offset aCsocketWrite_0 ; "CSocket::Write() : WSAGetOverlappedResu"...

loc_6B19E406:				; CODE XREF: Ordinal1457+AAj
		call	sub_6B18102E
		pop	ecx

loc_6B19E40C:				; CODE XREF: Ordinal1457+6Aj
		pop	ecx
		lea	ecx, [ebp+var_8]
		call	Ordinal1652
		jmp	short loc_6B19E45E
; ---------------------------------------------------------------------------

loc_6B19E417:				; CODE XREF: Ordinal1457+C7j
		lea	ecx, [ebp+var_8]
		call	Ordinal1652

loc_6B19E41F:				; CODE XREF: Ordinal1457+108j
		xor	eax, eax
		inc	eax
		jmp	short loc_6B19E460
; ---------------------------------------------------------------------------

loc_6B19E424:				; CODE XREF: Ordinal1457+31j
		push	edi		; lpCompletionRoutine
		push	edi		; lpOverlapped
		push	edi		; dwFlags
		push	ebx		; lpNumberOfBytesSent
		push	1		; dwBufferCount
		lea	eax, [ebp+Buffers]
		push	eax		; lpBuffers
		push	dword ptr [esi+4] ; s
		call	ds:WSASend
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6B19E41F
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketWriteWs ; "CSocket::Write() : WSASend() == SOCKET_"...
		mov	[esi+0Ch], eax
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B19E45D
; ---------------------------------------------------------------------------

loc_6B19E453:				; CODE XREF: Ordinal1457+17j
					; Ordinal1457+22j
		push	offset aCsocketWritePd ; "CSocket::Write() : pData == NULL\n"
		call	sub_6B18102E

loc_6B19E45D:				; CODE XREF: Ordinal1457+11Fj
		pop	ecx

loc_6B19E45E:				; CODE XREF: Ordinal1457+E3j
		xor	eax, eax

loc_6B19E460:				; CODE XREF: Ordinal1457+F0j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	0Ch
Ordinal1457	endp

; Exported entry 1458.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1458
Ordinal1458	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_0], 0
		push	esi
		mov	esi, ecx
		jz	short loc_6B19E47E
		mov	eax, [esp+4+arg_4]
		neg	eax
		sbb	eax, eax
		and	eax, 2
		jmp	short loc_6B19E488
; ---------------------------------------------------------------------------

loc_6B19E47E:				; CODE XREF: Ordinal1458+8j
		xor	eax, eax
		inc	eax
		cmp	[esp+4+arg_4], 0
		jz	short loc_6B19E4B4

loc_6B19E488:				; CODE XREF: Ordinal1458+15j
		push	eax		; how
		push	dword ptr [esi+4] ; s
		call	ds:shutdown
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6B19E4B1
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketShutdow ; "CSocket::Shutdown() :	shutdown() == SOC"...
		mov	[esi+0Ch], eax
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B19E4B4
; ---------------------------------------------------------------------------

loc_6B19E4B1:				; CODE XREF: Ordinal1458+2Ej
		xor	eax, eax
		inc	eax

loc_6B19E4B4:				; CODE XREF: Ordinal1458+1Fj
					; Ordinal1458+48j
		pop	esi
		retn	8
Ordinal1458	endp

; Exported entry 1459.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1459
Ordinal1459	proc near		; CODE XREF: Ordinal1439+8p
					; Ordinal1445+5p ...

optval		= byte ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		xor	ebx, ebx
		inc	ebx
		cmp	eax, 0FFFFFFFFh
		jz	short loc_6B19E543
		push	edi
		push	eax		; hFile
		call	ds:CancelIo
		and	[ebp+var_2], 0
		xor	eax, eax
		cmp	[ebp+arg_0], eax
		push	4		; optlen
		setz	al
		mov	word ptr [ebp+optval], ax
		lea	eax, [ebp+optval]
		push	eax		; optval
		push	80h		; optname
		push	0FFFFh		; level
		push	dword ptr [esi+4] ; s
		call	ds:setsockopt
		cmp	eax, 0FFFFFFFFh
		mov	edi, ds:WSAGetLastError
		jnz	short loc_6B19E51C
		call	edi ; WSAGetLastError
		push	eax		; Args
		push	offset aCsocketCloseSe ; "CSocket::Close() : setsockopt() == SOCK"...
		mov	[esi+0Ch], eax
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	ebx, ebx

loc_6B19E51C:				; CODE XREF: Ordinal1459+4Ej
		push	dword ptr [esi+4] ; s
		call	ds:closesocket
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6B19E53E
		call	edi ; WSAGetLastError
		push	eax		; Args
		push	offset aCsocketCloseCl ; "CSocket::Close() : closesocket() == SOC"...
		mov	[esi+0Ch], eax
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	ebx, ebx

loc_6B19E53E:				; CODE XREF: Ordinal1459+70j
		or	dword ptr [esi+4], 0FFFFFFFFh
		pop	edi

loc_6B19E543:				; CODE XREF: Ordinal1459+11j
		pop	esi
		mov	eax, ebx
		pop	ebx
		leave
		retn	4
Ordinal1459	endp

; Exported entry 1125.
; Exported entry 1461.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1125
Ordinal1125	proc near		; CODE XREF: Ordinal724+1Cp
					; Ordinal949+1Fp ...
		xor	eax, eax	; ccL35_1125
		cmp	dword ptr [ecx+4], 0FFFFFFFFh
		setnz	al
		retn
Ordinal1125	endp

; Exported entry 1462.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1462
Ordinal1462	proc near		; DATA XREF: .rdata:off_6B1BF428o

optlen		= dword	ptr -8
optval		= byte ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		and	dword ptr [ebp+optval],	0
		push	esi
		lea	eax, [ebp+optlen]
		push	eax		; optlen
		lea	eax, [ebp+optval]
		push	eax		; optval
		push	2		; optname
		mov	esi, ecx
		push	0FFFFh		; level
		push	dword ptr [esi+4] ; s
		mov	[ebp+optlen], 4
		call	ds:getsockopt
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6B19E59F
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketIsliste ; "CSocket::IsListening() : getsockopt()	="...
		mov	[esi+0Ch], eax
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B19E5A2
; ---------------------------------------------------------------------------

loc_6B19E59F:				; CODE XREF: Ordinal1462+2Ej
		mov	eax, dword ptr [ebp+optval]

loc_6B19E5A2:				; CODE XREF: Ordinal1462+48j
		pop	esi
		leave
		retn
Ordinal1462	endp

; Exported entry 1463.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1463(u_long argp)
		public Ordinal1463
Ordinal1463	proc near		; DATA XREF: .rdata:off_6B1BF428o

argp		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		mov	edi, [ebp+argp]
		and	dword ptr [edi], 0
		and	[ebp+argp], 0
		lea	eax, [ebp+argp]
		push	eax		; argp
		mov	esi, ecx
		push	4004667Fh	; cmd
		push	dword ptr [esi+4] ; s
		call	ds:ioctlsocket
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6B19E5E7
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCeventsocketGe ; "CEventSocket::GetReadPending() : ioctls"...
		mov	[esi+0Ch], eax
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B19E5EF
; ---------------------------------------------------------------------------

loc_6B19E5E7:				; CODE XREF: Ordinal1463+26j
		mov	eax, [ebp+argp]
		mov	[edi], eax
		xor	eax, eax
		inc	eax

loc_6B19E5EF:				; CODE XREF: Ordinal1463+40j
		pop	edi
		pop	esi
		pop	ebp
		retn	4
Ordinal1463	endp

; Exported entry 1464.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1464(u_long argp)
		public Ordinal1464
Ordinal1464	proc near		; DATA XREF: .rdata:off_6B1BF428o

argp		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		xor	eax, eax
		cmp	[ebp+argp], eax
		push	esi
		setz	al
		mov	esi, ecx
		mov	[ebp+argp], eax
		lea	eax, [ebp+argp]
		push	eax		; argp
		push	8004667Eh	; cmd
		push	dword ptr [esi+4] ; s
		call	ds:ioctlsocket
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6B19E637
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCeventsocketSe ; "CEventSocket::SetBlocking() :	ioctlsock"...
		mov	[esi+0Ch], eax
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B19E63A
; ---------------------------------------------------------------------------

loc_6B19E637:				; CODE XREF: Ordinal1464+26j
		xor	eax, eax
		inc	eax

loc_6B19E63A:				; CODE XREF: Ordinal1464+40j
		pop	esi
		pop	ebp
		retn	4
Ordinal1464	endp

; Exported entry 1466.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1466(char optval)
		public Ordinal1466
Ordinal1466	proc near		; CODE XREF: Ordinal1465+7p
					; DATA XREF: .rdata:off_6B1BF428o

optval		= byte ptr  4

		push	esi
		push	4		; optlen
		lea	eax, [esp+8+optval]
		push	eax		; optval
		push	1001h		; optname
		mov	esi, ecx
		push	0FFFFh		; level
		push	dword ptr [esi+4] ; s
		call	ds:setsockopt
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6B19E67B
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketSetwrit ; "CSocket::SetWriteBufferSize()	: setsock"...
		mov	[esi+0Ch], eax
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B19E67E
; ---------------------------------------------------------------------------

loc_6B19E67B:				; CODE XREF: Ordinal1466+20j
		xor	eax, eax
		inc	eax

loc_6B19E67E:				; CODE XREF: Ordinal1466+3Aj
		pop	esi
		retn	4
Ordinal1466	endp

; Exported entry 1467.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1467(char optval)
		public Ordinal1467
Ordinal1467	proc near		; CODE XREF: Ordinal1465+16p
					; DATA XREF: .rdata:off_6B1BF428o

optval		= byte ptr  4

		push	esi
		push	4		; optlen
		lea	eax, [esp+8+optval]
		push	eax		; optval
		push	1002h		; optname
		mov	esi, ecx
		push	0FFFFh		; level
		push	dword ptr [esi+4] ; s
		call	ds:setsockopt
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6B19E6BE
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketSetread ; "CSocket::SetReadBufferSize() : setsocko"...
		mov	[esi+0Ch], eax
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B19E6C1
; ---------------------------------------------------------------------------

loc_6B19E6BE:				; CODE XREF: Ordinal1467+20j
		xor	eax, eax
		inc	eax

loc_6B19E6C1:				; CODE XREF: Ordinal1467+3Aj
		pop	esi
		retn	4
Ordinal1467	endp

; Exported entry 1469.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1469(char *optlen)
		public Ordinal1469
Ordinal1469	proc near		; CODE XREF: Ordinal1468+13p
					; DATA XREF: .rdata:off_6B1BF428o

optlen		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+optlen]
		and	dword ptr [eax], 0
		push	esi
		mov	esi, ecx
		lea	ecx, [ebp+optlen]
		push	ecx		; optlen
		push	eax		; optval
		push	1001h		; optname
		push	0FFFFh		; level
		push	dword ptr [esi+4] ; s
		mov	[ebp+optlen], 4
		call	ds:getsockopt
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6B19E70F
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketGetwrit ; "CSocket::GetWriteBufferSize()	: getsock"...
		mov	[esi+0Ch], eax
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B19E712
; ---------------------------------------------------------------------------

loc_6B19E70F:				; CODE XREF: Ordinal1469+2Ej
		xor	eax, eax
		inc	eax

loc_6B19E712:				; CODE XREF: Ordinal1469+48j
		pop	esi
		pop	ebp
		retn	4
Ordinal1469	endp

; Exported entry 1470.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1470(char *optlen)
		public Ordinal1470
Ordinal1470	proc near		; CODE XREF: Ordinal1468+1Fp
					; DATA XREF: .rdata:off_6B1BF428o

optlen		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+optlen]
		and	dword ptr [eax], 0
		push	esi
		mov	esi, ecx
		lea	ecx, [ebp+optlen]
		push	ecx		; optlen
		push	eax		; optval
		push	1002h		; optname
		push	0FFFFh		; level
		push	dword ptr [esi+4] ; s
		mov	[ebp+optlen], 4
		call	ds:getsockopt
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6B19E761
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketGetread ; "CSocket::GetReadBufferSize() : getsocko"...
		mov	[esi+0Ch], eax
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B19E764
; ---------------------------------------------------------------------------

loc_6B19E761:				; CODE XREF: Ordinal1470+2Ej
		xor	eax, eax
		inc	eax

loc_6B19E764:				; CODE XREF: Ordinal1470+48j
		pop	esi
		pop	ebp
		retn	4
Ordinal1470	endp

; Exported entry 1472.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1472(char optval)
		public Ordinal1472
Ordinal1472	proc near		; CODE XREF: Ordinal1471+16p
					; DATA XREF: .rdata:off_6B1BF428o

optval		= byte ptr  4

		push	esi
		push	4		; optlen
		lea	eax, [esp+8+optval]
		push	eax		; optval
		push	1006h		; optname
		mov	esi, ecx
		push	0FFFFh		; level
		push	dword ptr [esi+4] ; s
		call	ds:setsockopt
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6B19E7A5
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketSetre_0 ; "CSocket::SetReadTimeout() : setsockopt("...
		mov	[esi+0Ch], eax
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B19E7A8
; ---------------------------------------------------------------------------

loc_6B19E7A5:				; CODE XREF: Ordinal1472+20j
		xor	eax, eax
		inc	eax

loc_6B19E7A8:				; CODE XREF: Ordinal1472+3Aj
		pop	esi
		retn	4
Ordinal1472	endp

; Exported entry 1473.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1473(char optval)
		public Ordinal1473
Ordinal1473	proc near		; CODE XREF: Ordinal1471+7p
					; DATA XREF: .rdata:off_6B1BF428o

optval		= byte ptr  4

		push	esi
		push	4		; optlen
		lea	eax, [esp+8+optval]
		push	eax		; optval
		push	1005h		; optname
		mov	esi, ecx
		push	0FFFFh		; level
		push	dword ptr [esi+4] ; s
		call	ds:setsockopt
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6B19E7E8
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketSetwr_0 ; "CSocket::SetWriteTimeout() : setsockopt"...
		mov	[esi+0Ch], eax
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B19E7EB
; ---------------------------------------------------------------------------

loc_6B19E7E8:				; CODE XREF: Ordinal1473+20j
		xor	eax, eax
		inc	eax

loc_6B19E7EB:				; CODE XREF: Ordinal1473+3Aj
		pop	esi
		retn	4
Ordinal1473	endp

; Exported entry 1475.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1475(char *optlen)
		public Ordinal1475
Ordinal1475	proc near		; CODE XREF: Ordinal1474+1Fp
					; DATA XREF: .rdata:off_6B1BF428o

optlen		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+optlen]
		and	dword ptr [eax], 0
		push	esi
		mov	esi, ecx
		lea	ecx, [ebp+optlen]
		push	ecx		; optlen
		push	eax		; optval
		push	1006h		; optname
		push	0FFFFh		; level
		push	dword ptr [esi+4] ; s
		mov	[ebp+optlen], 4
		call	ds:getsockopt
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6B19E839
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketGetre_0 ; "CSocket::GetReadTimeout() : getsockopt("...
		mov	[esi+0Ch], eax
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B19E83C
; ---------------------------------------------------------------------------

loc_6B19E839:				; CODE XREF: Ordinal1475+2Ej
		xor	eax, eax
		inc	eax

loc_6B19E83C:				; CODE XREF: Ordinal1475+48j
		pop	esi
		pop	ebp
		retn	4
Ordinal1475	endp

; Exported entry 1476.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1476(char *optlen)
		public Ordinal1476
Ordinal1476	proc near		; CODE XREF: Ordinal1474+13p
					; DATA XREF: .rdata:off_6B1BF428o

optlen		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+optlen]
		and	dword ptr [eax], 0
		push	esi
		mov	esi, ecx
		lea	ecx, [ebp+optlen]
		push	ecx		; optlen
		push	eax		; optval
		push	1005h		; optname
		push	0FFFFh		; level
		push	dword ptr [esi+4] ; s
		mov	[ebp+optlen], 4
		call	ds:getsockopt
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6B19E88B
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketGetwr_0 ; "CSocket::GetWriteTimeout() : getsockopt"...
		mov	[esi+0Ch], eax
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B19E88E
; ---------------------------------------------------------------------------

loc_6B19E88B:				; CODE XREF: Ordinal1476+2Ej
		xor	eax, eax
		inc	eax

loc_6B19E88E:				; CODE XREF: Ordinal1476+48j
		pop	esi
		pop	ebp
		retn	4
Ordinal1476	endp

; Exported entry 1477.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1477(char optval)
		public Ordinal1477
Ordinal1477	proc near		; DATA XREF: .rdata:off_6B1BF428o

optlen		= dword	ptr -4
optval		= byte ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		and	dword ptr [ebp+optval],	0
		push	esi
		lea	eax, [ebp+optlen]
		push	eax		; optlen
		lea	eax, [ebp+optval]
		push	eax		; optval
		push	700Ch		; optname
		mov	esi, ecx
		push	0FFFFh		; level
		push	dword ptr [esi+4] ; s
		mov	[ebp+optlen], 4
		call	ds:getsockopt
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6B19E8DF
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketGetconn ; "CSocket::GetConnectedTime() :	getsockop"...
		mov	[esi+0Ch], eax
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B19E8E2
; ---------------------------------------------------------------------------

loc_6B19E8DF:				; CODE XREF: Ordinal1477+30j
		xor	eax, eax
		inc	eax

loc_6B19E8E2:				; CODE XREF: Ordinal1477+4Aj
		pop	esi
		leave
		retn	4
Ordinal1477	endp

; Exported entry 1478.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1478(struct sockaddr *name)
		public Ordinal1478
Ordinal1478	proc near		; DATA XREF: .rdata:off_6B1BF428o

namelen		= dword	ptr -4
name		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		lea	eax, [ebp+namelen]
		push	eax		; namelen
		push	[ebp+name]	; name
		mov	esi, ecx
		push	dword ptr [esi+4] ; s
		mov	[ebp+namelen], 10h
		call	ds:getsockname
		test	eax, eax
		jz	short loc_6B19E923
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketGetloca ; "CSocket::GetLocalAddress() : getsocknam"...
		mov	[esi+0Ch], eax
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B19E926
; ---------------------------------------------------------------------------

loc_6B19E923:				; CODE XREF: Ordinal1478+20j
		xor	eax, eax
		inc	eax

loc_6B19E926:				; CODE XREF: Ordinal1478+3Aj
		pop	esi
		leave
		retn	4
Ordinal1478	endp

; Exported entry 1479.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1479(struct sockaddr *name)
		public Ordinal1479
Ordinal1479	proc near		; DATA XREF: .rdata:off_6B1BF428o

namelen		= dword	ptr -4
name		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		lea	eax, [ebp+namelen]
		push	eax		; namelen
		push	[ebp+name]	; name
		mov	esi, ecx
		push	dword ptr [esi+4] ; s
		mov	[ebp+namelen], 10h
		call	ds:getpeername
		test	eax, eax
		jz	short loc_6B19E967
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketGetremo ; "CSocket::GetRemoteAddress() :	getpeerna"...
		mov	[esi+0Ch], eax
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B19E96A
; ---------------------------------------------------------------------------

loc_6B19E967:				; CODE XREF: Ordinal1479+20j
		xor	eax, eax
		inc	eax

loc_6B19E96A:				; CODE XREF: Ordinal1479+3Aj
		pop	esi
		leave
		retn	4
Ordinal1479	endp

; Exported entry 1480.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1480
Ordinal1480	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+8], eax
		xor	eax, eax
		inc	eax
		retn	4
Ordinal1480	endp

; Exported entry 1482.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1482
Ordinal1482	proc near		; DATA XREF: .rdata:off_6B1BF428o

readfds		= fd_set ptr -10Ch
timeout		= timeval ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10Ch
		mov	eax, [ecx+4]
		mov	[ebp+readfds.fd_array],	eax
		mov	eax, [ebp+arg_0]
		xor	edx, edx
		mov	ecx, 3E8h
		div	ecx
		lea	ecx, [ebp+readfds]
		mov	[ebp+readfds.fd_count],	1
		mov	[ebp+timeout.tv_sec], eax
		imul	edx, 3E8h
		lea	eax, [ebp+timeout]
		push	eax		; timeout
		xor	eax, eax
		push	eax		; exceptfds
		push	eax		; writefds
		push	ecx		; readfds
		push	eax		; nfds
		mov	[ebp+timeout.tv_usec], edx
		call	ds:select
		dec	eax
		neg	eax
		sbb	eax, eax
		inc	eax
		leave
		retn	4
Ordinal1482	endp

; Exported entry 1483.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1483
Ordinal1483	proc near		; DATA XREF: .rdata:off_6B1BF428o

writefds	= fd_set ptr -10Ch
timeout		= timeval ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10Ch
		mov	eax, [ecx+4]
		mov	[ebp+writefds.fd_array], eax
		mov	eax, [ebp+arg_0]
		xor	edx, edx
		mov	ecx, 3E8h
		div	ecx
		lea	ecx, [ebp+writefds]
		mov	[ebp+writefds.fd_count], 1
		mov	[ebp+timeout.tv_sec], eax
		imul	edx, 3E8h
		lea	eax, [ebp+timeout]
		push	eax		; timeout
		xor	eax, eax
		push	eax		; exceptfds
		push	ecx		; writefds
		push	eax		; readfds
		push	eax		; nfds
		mov	[ebp+timeout.tv_usec], edx
		call	ds:select
		dec	eax
		neg	eax
		sbb	eax, eax
		inc	eax
		leave
		retn	4
Ordinal1483	endp

; Exported entry 1484.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1484
Ordinal1484	proc near		; DATA XREF: .rdata:6B1B6C28o
					; .rdata:off_6B1BF428o

optval		= byte ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		push	4		; optlen
		lea	eax, [ebp+optval]
		push	eax		; optval
		push	8		; optname
		mov	esi, ecx
		push	0FFFFh		; level
		push	dword ptr [esi+4] ; s
		mov	dword ptr [ebp+optval],	1
		call	ds:setsockopt
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6B19EA63
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketSetdefa ; "CSocket::SetDefaultOptions() : setsocko"...
		mov	[esi+0Ch], eax
		call	sub_6B18102E
		pop	ecx
		pop	ecx

loc_6B19EA63:				; CODE XREF: Ordinal1484+27j
		pop	esi
		leave
		retn
Ordinal1484	endp

; Exported entry 1439.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1439
Ordinal1439	proc near		; CODE XREF: sub_6B19EBC8+3p
					; DATA XREF: .rdata:off_6B1BF428o
		push	0
		mov	dword ptr [ecx], offset	off_6B1B6C24
		call	Ordinal1459
		retn
Ordinal1439	endp

; Exported entry 1445.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1445(int	type)
		public Ordinal1445
Ordinal1445	proc near		; DATA XREF: .rdata:off_6B1BF428o

type		= dword	ptr  4

		push	esi
		push	0
		mov	esi, ecx
		call	Ordinal1459
		xor	eax, eax
		cmp	[esi+8], eax
		setnz	al
		push	eax		; dwFlags
		push	0		; g
		push	0		; lpProtocolInfo
		push	6		; protocol
		push	[esp+14h+type]	; type
		push	2		; af
		call	ds:WSASocketA
		cmp	eax, 0FFFFFFFFh
		mov	[esi+4], eax
		jnz	short loc_6B19EABB
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketCreateW ; "CSocket::Create() : WSASocket() == INVA"...
		mov	[esi+0Ch], eax
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B19EABE
; ---------------------------------------------------------------------------

loc_6B19EABB:				; CODE XREF: Ordinal1445+2Bj
		xor	eax, eax
		inc	eax

loc_6B19EABE:				; CODE XREF: Ordinal1445+45j
		pop	esi
		retn	4
Ordinal1445	endp

; Exported entry 1446.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1446
Ordinal1446	proc near		; CODE XREF: Ordinal1438+19p
					; Ordinal1440+7p ...

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		cmp	edi, 0FFFFFFFFh
		mov	esi, ecx
		jnz	short loc_6B19EADE
		push	offset aCsocketAttachH ; "CSocket::Attach() : hSocket == INVALID_"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B19EAF4
; ---------------------------------------------------------------------------

loc_6B19EADE:				; CODE XREF: Ordinal1446+Bj
		push	0
		mov	ecx, esi
		call	Ordinal1459
		mov	eax, [esi]
		mov	ecx, esi
		mov	[esi+4], edi
		call	dword ptr [eax+4]
		xor	eax, eax
		inc	eax

loc_6B19EAF4:				; CODE XREF: Ordinal1446+1Aj
		pop	edi
		pop	esi
		retn	4
Ordinal1446	endp

; Exported entry 1448.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1448
Ordinal1448	proc near		; CODE XREF: Ordinal1447+7p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, [ecx+4]
		or	dword ptr [ecx+4], 0FFFFFFFFh
		push	0
		call	Ordinal1459
		mov	eax, esi
		pop	esi
		retn
Ordinal1448	endp

; Exported entry 1465.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1465(int, char optval)
		public Ordinal1465
Ordinal1465	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
optval		= byte ptr  8

		push	esi
		push	dword ptr [esp+4+optval] ; optval
		mov	esi, ecx
		call	Ordinal1466
		test	eax, eax
		jz	short loc_6B19EB30
		push	[esp+4+arg_0]	; optval
		mov	ecx, esi
		call	Ordinal1467
		test	eax, eax
		jz	short loc_6B19EB30
		xor	eax, eax
		inc	eax
		jmp	short loc_6B19EB32
; ---------------------------------------------------------------------------

loc_6B19EB30:				; CODE XREF: Ordinal1465+Ej
					; Ordinal1465+1Dj
		xor	eax, eax

loc_6B19EB32:				; CODE XREF: Ordinal1465+22j
		pop	esi
		retn	8
Ordinal1465	endp

; Exported entry 1468.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1468(int, char *optlen)
		public Ordinal1468
Ordinal1468	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
optlen		= dword	ptr  8

		mov	eax, [esp+optlen]
		push	esi
		mov	esi, [esp+4+arg_0]
		and	dword ptr [esi], 0
		and	dword ptr [eax], 0
		push	edi
		push	eax		; optlen
		mov	edi, ecx
		call	Ordinal1469
		test	eax, eax
		jz	short loc_6B19EB63
		push	esi		; optlen
		mov	ecx, edi
		call	Ordinal1470
		test	eax, eax
		jz	short loc_6B19EB63
		xor	eax, eax
		inc	eax
		jmp	short loc_6B19EB65
; ---------------------------------------------------------------------------

loc_6B19EB63:				; CODE XREF: Ordinal1468+1Aj
					; Ordinal1468+26j
		xor	eax, eax

loc_6B19EB65:				; CODE XREF: Ordinal1468+2Bj
		pop	edi
		pop	esi
		retn	8
Ordinal1468	endp

; Exported entry 1471.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1471(char optval, int)
		public Ordinal1471
Ordinal1471	proc near		; DATA XREF: .rdata:off_6B1BF428o

optval		= byte ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	[esp+4+arg_4]	; optval
		mov	esi, ecx
		call	Ordinal1473
		test	eax, eax
		jz	short loc_6B19EB8E
		push	dword ptr [esp+4+optval] ; optval
		mov	ecx, esi
		call	Ordinal1472
		test	eax, eax
		jz	short loc_6B19EB8E
		xor	eax, eax
		inc	eax
		jmp	short loc_6B19EB90
; ---------------------------------------------------------------------------

loc_6B19EB8E:				; CODE XREF: Ordinal1471+Ej
					; Ordinal1471+1Dj
		xor	eax, eax

loc_6B19EB90:				; CODE XREF: Ordinal1471+22j
		pop	esi
		retn	8
Ordinal1471	endp

; Exported entry 1474.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1474(char *optlen, int)
		public Ordinal1474
Ordinal1474	proc near		; DATA XREF: .rdata:off_6B1BF428o

optlen		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		mov	esi, [esp+4+optlen]
		and	dword ptr [esi], 0
		and	dword ptr [eax], 0
		push	edi
		push	eax		; optlen
		mov	edi, ecx
		call	Ordinal1476
		test	eax, eax
		jz	short loc_6B19EBC1
		push	esi		; optlen
		mov	ecx, edi
		call	Ordinal1475
		test	eax, eax
		jz	short loc_6B19EBC1
		xor	eax, eax
		inc	eax
		jmp	short loc_6B19EBC3
; ---------------------------------------------------------------------------

loc_6B19EBC1:				; CODE XREF: Ordinal1474+1Aj
					; Ordinal1474+26j
		xor	eax, eax

loc_6B19EBC3:				; CODE XREF: Ordinal1474+2Bj
		pop	edi
		pop	esi
		retn	8
Ordinal1474	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B19EBC8(void *, char)
sub_6B19EBC8	proc near		; DATA XREF: .rdata:off_6B1B6C24o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1439
		test	[esp+4+arg_0], 1
		jz	short loc_6B19EBDE
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B19EBDE:				; CODE XREF: sub_6B19EBC8+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B19EBC8	endp

; Exported entry 1438.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1438
Ordinal1438	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		or	dword ptr [esi+4], 0FFFFFFFFh
		and	dword ptr [esi+8], 0
		and	dword ptr [esi+0Ch], 0
		mov	dword ptr [esi], offset	off_6B1B6C24
		call	Ordinal1446
		test	eax, eax
		jnz	short loc_6B19EC11
		push	offset aCsocketCsocket ; "CSocket::CSocket() : Attach()	== FALSE\n"...
		call	sub_6B18102E
		pop	ecx

loc_6B19EC11:				; CODE XREF: Ordinal1438+20j
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1438	endp

; Exported entry 1440.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1440
Ordinal1440	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		call	Ordinal1446
		test	eax, eax
		jnz	short loc_6B19EC32
		push	offset aCsocketOperato ; "CSocket::operator =()	: Attach() == FAL"...
		call	sub_6B18102E
		pop	ecx

loc_6B19EC32:				; CODE XREF: Ordinal1440+Ej
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1440	endp

; Exported entry 1447.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1447
Ordinal1447	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	ecx, [esp+4+arg_0]
		call	Ordinal1448
		push	eax
		mov	ecx, esi
		call	Ordinal1446
		pop	esi
		retn	4
Ordinal1447	endp

; Exported entry 1434.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1434(char *Src)
		public Ordinal1434
Ordinal1434	proc near		; CODE XREF: Ordinal1450+32p
					; Ordinal1452+32p ...

name		= dword	ptr -4
Src		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		lea	ecx, [ebp+name]
		call	sub_6B181879
		lea	eax, [ebp+name]
		push	eax		; int
		push	[ebp+Src]	; Src
		call	Ordinal1519
		test	al, al
		pop	ecx
		pop	ecx
		jnz	short loc_6B19EC80
		push	offset aCaddressSetadd ; "CAddress::SetAddress() : CStringConvert"...
		call	sub_6B18102E

loc_6B19EC7B:				; CODE XREF: Ordinal1434+94j
		pop	ecx
		xor	esi, esi
		jmp	short loc_6B19ECC3
; ---------------------------------------------------------------------------

loc_6B19EC80:				; CODE XREF: Ordinal1434+1Fj
		push	[ebp+name]	; cp
		call	ds:inet_addr
		add	esi, 4
		cmp	eax, 0FFFFFFFFh
		mov	[esi], eax
		jnz	short loc_6B19ECC0
		push	[ebp+name]	; name
		call	ds:gethostbyname
		test	eax, eax
		jz	short loc_6B19ECD2
		mov	ecx, [eax+0Ch]
		mov	ecx, [ecx]
		test	ecx, ecx
		jz	short loc_6B19ECD2
		mov	ax, [eax+0Ah]
		test	ax, ax
		jz	short loc_6B19ECD2
		movsx	eax, ax
		push	eax		; Size
		push	ecx		; Src
		push	esi		; Dst
		call	memcpy
		add	esp, 0Ch

loc_6B19ECC0:				; CODE XREF: Ordinal1434+41j
		xor	esi, esi
		inc	esi

loc_6B19ECC3:				; CODE XREF: Ordinal1434+2Ej
		lea	ecx, [ebp+name]
		call	sub_6B1899B5
		mov	eax, esi
		pop	esi
		leave
		retn	4
; ---------------------------------------------------------------------------

loc_6B19ECD2:				; CODE XREF: Ordinal1434+4Ej
					; Ordinal1434+57j ...
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCaddressSeta_0 ; "CAddress::SetAddress() : gethostbyname("...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B19EC7B
Ordinal1434	endp

; Exported entry 1450.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1450(LPCSTR Src,	u_short	hostshort)
		public Ordinal1450
Ordinal1450	proc near		; DATA XREF: .rdata:off_6B1BF428o

name		= sockaddr ptr -14h
var_4		= dword	ptr -4
Src		= dword	ptr  8
hostshort	= word ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, ___security_cookie
		push	esi
		mov	esi, ecx
		lea	ecx, [ebp+name]
		mov	[ebp+var_4], eax
		call	Ordinal1427
		cmp	[ebp+Src], 0
		jz	short loc_6B19ED30
		push	[ebp+Src]	; lpString
		call	ds:lstrlenA
		test	eax, eax
		jle	short loc_6B19ED30
		push	[ebp+Src]	; Src
		lea	ecx, [ebp+name]
		call	Ordinal1434
		test	eax, eax
		jnz	short loc_6B19ED30
		push	offset aCsocketBindSoc ; "CSocket::Bind() : sockAddr.SetAddress()"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B19ED46
; ---------------------------------------------------------------------------

loc_6B19ED30:				; CODE XREF: Ordinal1450+1Dj
					; Ordinal1450+2Aj ...
		push	dword ptr [ebp+hostshort] ; hostshort
		lea	ecx, [ebp+name]
		call	Ordinal1436
		lea	eax, [ebp+name]
		push	eax		; name
		mov	ecx, esi
		call	Ordinal1449

loc_6B19ED46:				; CODE XREF: Ordinal1450+48j
		mov	ecx, [ebp+var_4]
		pop	esi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn	8
Ordinal1450	endp

; Exported entry 1452.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1452(LPCSTR Src,	u_short	hostshort)
		public Ordinal1452
Ordinal1452	proc near		; DATA XREF: .rdata:off_6B1BF428o

name		= sockaddr ptr -14h
var_4		= dword	ptr -4
Src		= dword	ptr  8
hostshort	= word ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		cmp	[ebp+Src], 0
		mov	eax, ___security_cookie
		push	esi
		mov	[ebp+var_4], eax
		mov	esi, ecx
		jz	short loc_6B19EDB1
		push	[ebp+Src]	; lpString
		call	ds:lstrlenA
		test	eax, eax
		jz	short loc_6B19EDB1
		lea	ecx, [ebp+name]
		call	Ordinal1427
		push	[ebp+Src]	; Src
		lea	ecx, [ebp+name]
		call	Ordinal1434
		test	eax, eax
		jz	short loc_6B19EDAA
		push	dword ptr [ebp+hostshort] ; hostshort
		lea	ecx, [ebp+name]
		call	Ordinal1436
		test	eax, eax
		jz	short loc_6B19EDAA
		lea	eax, [ebp+name]
		push	eax		; name
		mov	ecx, esi
		call	Ordinal1451
		jmp	short loc_6B19EDBE
; ---------------------------------------------------------------------------

loc_6B19EDAA:				; CODE XREF: Ordinal1452+39j
					; Ordinal1452+48j
		push	offset aCsocketConne_0 ; "CSocket::Connect() : sockAddr.SetAddres"...
		jmp	short loc_6B19EDB6
; ---------------------------------------------------------------------------

loc_6B19EDB1:				; CODE XREF: Ordinal1452+15j
					; Ordinal1452+22j
		push	offset aCsocketConne_1 ; "CSocket::Connect() : szHost == NULL\n"

loc_6B19EDB6:				; CODE XREF: Ordinal1452+5Cj
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax

loc_6B19EDBE:				; CODE XREF: Ordinal1452+55j
		mov	ecx, [ebp+var_4]
		pop	esi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn	8
Ordinal1452	endp

; Exported entry 1454.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1454(LPCSTR Src,	u_short	hostshort)
		public Ordinal1454
Ordinal1454	proc near		; DATA XREF: .rdata:off_6B1BF428o

name		= sockaddr ptr -14h
var_4		= dword	ptr -4
Src		= dword	ptr  8
hostshort	= word ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, ___security_cookie
		push	esi
		mov	esi, ecx
		lea	ecx, [ebp+name]
		mov	[ebp+var_4], eax
		call	Ordinal1427
		cmp	[ebp+Src], 0
		jz	short loc_6B19EE15
		push	[ebp+Src]	; lpString
		call	ds:lstrlenA
		test	eax, eax
		jle	short loc_6B19EE15
		push	[ebp+Src]	; Src
		lea	ecx, [ebp+name]
		call	Ordinal1434
		test	eax, eax
		jnz	short loc_6B19EE15
		push	offset aCsocketListenS ; "CSocket::Listen() : sockAddr.SetAddress"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B19EE2B
; ---------------------------------------------------------------------------

loc_6B19EE15:				; CODE XREF: Ordinal1454+1Dj
					; Ordinal1454+2Aj ...
		push	dword ptr [ebp+hostshort] ; hostshort
		lea	ecx, [ebp+name]
		call	Ordinal1436
		lea	eax, [ebp+name]
		push	eax		; name
		mov	ecx, esi
		call	Ordinal1453

loc_6B19EE2B:				; CODE XREF: Ordinal1454+48j
		mov	ecx, [ebp+var_4]
		pop	esi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn	8
Ordinal1454	endp

; Exported entry 603.
; Exported entry 1008.
; Exported entry 1105.
; Exported entry 1242.
; Exported entry 1247.
; Exported entry 1494.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1105
Ordinal1105	proc near		; CODE XREF: Ordinal905+81p
					; Ordinal907+D2p ...
		mov	eax, [ecx+10h]	; ccL35_603
					; ccL35_1008
					; ccL35_1105
					; ccL35_1242
					; ccL35_1247
		retn
Ordinal1105	endp

; Exported entry 1000.
; Exported entry 1497.
; Exported entry 1623.
; Exported entry 1743.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1623
Ordinal1623	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+1Ch]	; ccL35_1000
					; ccL35_1497
					; ccL35_1623
		retn
Ordinal1623	endp

; Exported entry 694.
; Exported entry 1002.
; Exported entry 1498.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1498
Ordinal1498	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+20h]	; ccL35_694
					; ccL35_1002
		retn
Ordinal1498	endp

; Exported entry 1004.
; Exported entry 1499.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1499
Ordinal1499	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+24h]	; ccL35_1004
		retn
Ordinal1499	endp

; Exported entry 604.
; Exported entry 1006.
; Exported entry 1248.
; Exported entry 1500.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1500
Ordinal1500	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+28h]	; ccL35_604
					; ccL35_1006
					; ccL35_1248
		retn
Ordinal1500	endp

; Exported entry 876.
; Exported entry 998.
; Exported entry 1501.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal998
Ordinal998	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+2Ch]	; ccL35_876
					; ccL35_998
		retn
Ordinal998	endp

; Exported entry 1503.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1503
Ordinal1503	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+34h]
		retn
Ordinal1503	endp

; Exported entry 814.
; Exported entry 821.
; Exported entry 1504.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal821
Ordinal821	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+38h]	; ccL35_814
					; ccL35_821
		retn
Ordinal821	endp

; Exported entry 1505.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1505
Ordinal1505	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+3Ch]
		retn
Ordinal1505	endp

; Exported entry 1506.
; Exported entry 1883.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1883
Ordinal1883	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+40h]	; ccL35_1506
		retn
Ordinal1883	endp

; Exported entry 1488.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1488
Ordinal1488	proc near		; CODE XREF: Ordinal146+101p
					; Ordinal146+212p ...
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+40h]
		mov	dword ptr [esi], offset	off_6B1B7518
		call	sub_6B1899B5
		lea	ecx, [esi+3Ch]
		call	sub_6B1899B5
		lea	ecx, [esi+38h]
		call	sub_6B1899B5
		lea	ecx, [esi+34h]
		call	sub_6B1899B5
		lea	ecx, [esi+30h]
		call	sub_6B1899B5
		lea	ecx, [esi+2Ch]
		call	sub_6B1899B5
		lea	ecx, [esi+28h]
		call	sub_6B1899B5
		lea	ecx, [esi+24h]
		call	sub_6B1899B5
		lea	ecx, [esi+20h]
		call	sub_6B1899B5
		lea	ecx, [esi+1Ch]
		call	sub_6B1899B5
		lea	ecx, [esi+18h]
		call	sub_6B1899B5
		lea	ecx, [esi+14h]
		call	sub_6B1899B5
		lea	ecx, [esi+10h]
		call	sub_6B1899B5
		lea	ecx, [esi+0Ch]
		call	sub_6B1899B5
		lea	ecx, [esi+8]
		call	sub_6B1899B5
		lea	ecx, [esi+4]
		pop	esi
		jmp	sub_6B1899B5
Ordinal1488	endp

; Exported entry 1487.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1487
Ordinal1487	proc near		; CODE XREF: Ordinal146+D7p
					; Ordinal905+3Ep ...
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+4]
		mov	dword ptr [esi], offset	off_6B1B7518
		call	sub_6B181879
		lea	ecx, [esi+8]
		call	sub_6B181879
		lea	ecx, [esi+0Ch]
		call	sub_6B181879
		lea	ecx, [esi+10h]
		call	sub_6B181879
		lea	ecx, [esi+14h]
		call	sub_6B181879
		lea	ecx, [esi+18h]
		call	sub_6B181879
		lea	ecx, [esi+1Ch]
		call	sub_6B181879
		lea	ecx, [esi+20h]
		call	sub_6B181879
		lea	ecx, [esi+24h]
		call	sub_6B181879
		lea	ecx, [esi+28h]
		call	sub_6B181879
		lea	ecx, [esi+2Ch]
		call	sub_6B181879
		lea	ecx, [esi+30h]
		call	sub_6B181879
		lea	ecx, [esi+34h]
		call	sub_6B181879
		lea	ecx, [esi+38h]
		call	sub_6B181879
		lea	ecx, [esi+3Ch]
		call	sub_6B181879
		lea	ecx, [esi+40h]
		call	sub_6B181879
		mov	eax, esi
		pop	esi
		retn
Ordinal1487	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B19EF77(void *, char)
sub_6B19EF77	proc near		; DATA XREF: .rdata:off_6B1B7518o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1488
		test	[esp+4+arg_0], 1
		jz	short loc_6B19EF8D
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B19EF8D:				; CODE XREF: sub_6B19EF77+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B19EF77	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19EF93	proc near		; CODE XREF: Ordinal1490+48p
					; Ordinal1695+12Dp

arg_0		= dword	ptr  4

		push	esi
		push	edi
		push	[esp+8+arg_0]
		mov	esi, ecx
		call	sub_6B1818C7
		push	[esp+8+arg_0]
		mov	ecx, esi
		mov	edi, eax
		call	sub_6B181598
		mov	eax, edi
		pop	edi
		pop	esi
		retn	4
sub_6B19EF93	endp

; Exported entry 1507.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1507
Ordinal1507	proc near		; CODE XREF: Ordinal438+11p
					; DATA XREF: .rdata:off_6B1BF428o

var_48		= byte ptr -48h
var_25		= byte ptr -25h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_105	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCsplitpathGetw ; "CSplitPath::GetWindowsDirectory()"
		lea	ecx, [ebp+var_48]
		mov	[ebp+var_14], eax
		call	Ordinal1089
		and	[ebp+var_4], 0
		mov	ecx, [ebp+arg_0]
		mov	esi, 104h
		push	esi
		mov	[ebp+var_25], 1
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B1818C7
		push	esi		; uSize
		push	eax		; lpBuffer
		call	ds:GetWindowsDirectoryA
		mov	ecx, [ebp+arg_0]
		push	0FFFFFFFFh
		mov	edi, eax
		call	sub_6B185A33
		test	edi, edi
		jz	short loc_6B19F012
		cmp	edi, esi
		jbe	short loc_6B19F029

loc_6B19F012:				; CODE XREF: Ordinal1507+58j
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCsplitpathGe_0 ; "CSplitPath::GetWindowsDirectory() : nRe"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	[ebp+var_25], 0

loc_6B19F029:				; CODE XREF: Ordinal1507+5Cj
					; DATA XREF: sub_6B19F05B+3Do ...
		lea	ecx, [ebp+var_48]
		call	Ordinal1635
		test	eax, eax
		jz	short loc_6B19F039
		mov	[ebp+var_25], 0

loc_6B19F039:				; CODE XREF: Ordinal1507+7Fj
		lea	ecx, [ebp+var_48]
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	al, [ebp+var_25]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal1507	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19F05B	proc near		; DATA XREF: .rdata:6B1BC9D0o
		push	13h
		lea	ecx, [ebp-48h]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-48h]
		call	Ordinal1101
		mov	ecx, [ebp-50h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-48h]
		call	Ordinal1103
		lea	ecx, [ebp-48h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B19F029
		retn
sub_6B19F05B	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19F09E	proc near		; DATA XREF: .rdata:6B1BC9E0o
		push	15h
		lea	ecx, [ebp-48h]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-48h]
		call	Ordinal1101
		mov	eax, [ebp-4Ch]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-48h]
		call	Ordinal1103
		lea	ecx, [ebp-48h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B19F029
		retn
sub_6B19F09E	endp

; Exported entry 1508.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1508
Ordinal1508	proc near		; CODE XREF: Ordinal439+11p
					; DATA XREF: .rdata:off_6B1BF428o

var_48		= byte ptr -48h
var_25		= byte ptr -25h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_106	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCsplitpathGets ; "CSplitPath::GetSystemDirectory()"
		lea	ecx, [ebp+var_48]
		mov	[ebp+var_14], eax
		call	Ordinal1089
		and	[ebp+var_4], 0
		mov	ecx, [ebp+arg_0]
		mov	esi, 104h
		push	esi
		mov	[ebp+var_25], 1
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B1818C7
		push	esi		; uSize
		push	eax		; lpBuffer
		call	ds:GetSystemDirectoryA
		mov	ecx, [ebp+arg_0]
		push	0FFFFFFFFh
		mov	edi, eax
		call	sub_6B185A33
		test	edi, edi
		jz	short loc_6B19F151
		cmp	edi, esi
		jbe	short loc_6B19F168

loc_6B19F151:				; CODE XREF: Ordinal1508+58j
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCsplitpathGe_1 ; "CSplitPath::GetSystemDirectory() : nRet"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	[ebp+var_25], 0

loc_6B19F168:				; CODE XREF: Ordinal1508+5Cj
					; DATA XREF: sub_6B19F19A+3Do ...
		lea	ecx, [ebp+var_48]
		call	Ordinal1635
		test	eax, eax
		jz	short loc_6B19F178
		mov	[ebp+var_25], 0

loc_6B19F178:				; CODE XREF: Ordinal1508+7Fj
		lea	ecx, [ebp+var_48]
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	al, [ebp+var_25]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal1508	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19F19A	proc near		; DATA XREF: .rdata:6B1BCA38o
		push	13h
		lea	ecx, [ebp-48h]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-48h]
		call	Ordinal1101
		mov	ecx, [ebp-50h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-48h]
		call	Ordinal1103
		lea	ecx, [ebp-48h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B19F168
		retn
sub_6B19F19A	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19F1DD	proc near		; DATA XREF: .rdata:6B1BCA48o
		push	15h
		lea	ecx, [ebp-48h]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-48h]
		call	Ordinal1101
		mov	eax, [ebp-4Ch]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-48h]
		call	Ordinal1103
		lea	ecx, [ebp-48h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B19F168
		retn
sub_6B19F1DD	endp

; Exported entry 1489.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1489(LPCSTR Filename)
		public Ordinal1489
Ordinal1489	proc near		; CODE XREF: Ordinal146+E7p
					; Ordinal905+48p ...

var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= byte ptr -88h
Dir		= dword	ptr -68h
var_64		= dword	ptr -64h
Drive		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
Filename	= dword	ptr -30h
FullPath	= dword	ptr -2Ch
lpszLongPath	= dword	ptr -28h
var_24		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8

		mov	eax, offset unknown_libname_107	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 84h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		xor	edi, edi
		cmp	[ebp+Src], edi
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	esi, ecx
		jz	loc_6B19F692
		push	[ebp+Src]	; lpString
		call	ds:lstrlenA
		test	eax, eax
		jz	loc_6B19F692
		push	offset aCsplitpathSpli ; "CSplitPath::SplitPath()"
		lea	ecx, [ebp+var_88]
		call	Ordinal1089
		mov	[ebp+var_4], edi
		lea	edi, [esi+4]
		mov	ecx, edi
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B18175E
		lea	ebx, [esi+8]
		mov	ecx, ebx
		call	sub_6B18175E
		lea	ecx, [esi+0Ch]
		mov	[ebp+var_58], ecx
		call	sub_6B18175E
		lea	ecx, [esi+10h]
		mov	[ebp+lpszLongPath], ecx
		call	sub_6B18175E
		lea	ecx, [esi+14h]
		mov	[ebp+var_50], ecx
		call	sub_6B18175E
		lea	ecx, [esi+18h]
		mov	[ebp+var_40], ecx
		call	sub_6B18175E
		lea	ecx, [esi+1Ch]
		mov	[ebp+var_34], ecx
		call	sub_6B18175E
		lea	ecx, [esi+20h]
		mov	[ebp+var_5C], ecx
		call	sub_6B18175E
		lea	ecx, [esi+24h]
		mov	[ebp+var_64], ecx
		call	sub_6B18175E
		lea	ecx, [esi+28h]
		mov	[ebp+var_3C], ecx
		call	sub_6B18175E
		lea	ecx, [esi+2Ch]
		mov	[ebp+var_48], ecx
		call	sub_6B18175E
		lea	ecx, [esi+30h]
		mov	[ebp+Filename],	ecx
		call	sub_6B18175E
		lea	ecx, [esi+34h]
		mov	[ebp+var_44], ecx
		call	sub_6B18175E
		lea	ecx, [esi+38h]
		mov	[ebp+var_38], ecx
		call	sub_6B18175E
		lea	ecx, [esi+3Ch]
		mov	[ebp+var_4C], ecx
		call	sub_6B18175E
		lea	ecx, [esi+40h]
		mov	[ebp+var_54], ecx
		call	sub_6B18175E
		push	[ebp+Src]	; Src
		mov	ecx, edi
		call	sub_6B181EA9
		mov	eax, [edi]
		mov	esi, [eax-0Ch]
		mov	ecx, [ebp+var_50]
		push	esi
		call	sub_6B1818C7
		mov	ecx, [ebp+var_58]
		push	esi
		mov	[ebp+Src], eax
		call	sub_6B1818C7
		push	esi
		mov	ecx, ebx
		mov	[ebp+Dir], eax
		call	sub_6B1818C7
		mov	ecx, [ebp+var_40]
		mov	[ebp+Drive], eax
		mov	eax, [edi]
		push	esi
		mov	[ebp+FullPath],	eax
		call	sub_6B1818C7
		push	eax		; Ext
		push	[ebp+Src]	; Filename
		push	[ebp+Dir]	; Dir
		push	[ebp+Drive]	; Drive
		push	[ebp+FullPath]	; FullPath
		call	ds:_splitpath
		add	esp, 14h
		push	0FFFFFFFFh
		mov	ecx, ebx
		call	sub_6B185A33
		mov	esi, [ebp+var_58]
		push	0FFFFFFFFh
		mov	ecx, esi
		call	sub_6B185A33
		mov	ecx, [ebp+var_50]
		push	0FFFFFFFFh
		call	sub_6B185A33
		mov	ecx, [ebp+var_40]
		push	0FFFFFFFFh
		call	sub_6B185A33
		mov	eax, [esi]
		mov	ebx, [ebx]
		push	eax
		push	ebx		; Args
		push	offset aSS_0	; "%s%s"
		push	[ebp+lpszLongPath] ; int
		call	sub_6B18F0EE
		add	esp, 10h
		push	dword ptr [edi]	; lpFileName
		call	ds:GetFileAttributesA
		cmp	eax, 0FFFFFFFFh
		jz	loc_6B19F4F7
		mov	eax, [edi]
		mov	ebx, ds:GetShortPathNameA
		push	0		; cchBuffer
		push	0		; lpszShortPath
		push	eax		; lpszLongPath
		call	ebx ; GetShortPathNameA
		test	eax, eax
		mov	[ebp+Src], eax
		jnz	short loc_6B19F407

loc_6B19F3EF:				; CODE XREF: Ordinal1489+1FBj
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCsplitpathSp_0 ; "CSplitPath::SplitPath() : GetShortPathN"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		jmp	loc_6B19F4CE
; ---------------------------------------------------------------------------

loc_6B19F407:				; CODE XREF: Ordinal1489+1BBj
		mov	ecx, [edi]
		mov	esi, [ebp+Filename]
		mov	[ebp+lpszLongPath], ecx
		push	eax
		mov	ecx, esi
		call	sub_6B1818C7
		push	[ebp+Src]	; cchBuffer
		push	eax		; lpszShortPath
		push	[ebp+lpszLongPath] ; lpszLongPath
		call	ebx ; GetShortPathNameA
		push	0FFFFFFFFh
		mov	ecx, esi
		mov	ebx, eax
		call	sub_6B185A33
		test	ebx, ebx
		jz	short loc_6B19F3EF
		lea	ecx, [ebp+Src]
		call	sub_6B181879
		mov	eax, [esi]
		mov	ebx, [eax-0Ch]
		mov	ecx, [ebp+var_4C]
		push	ebx
		mov	byte ptr [ebp+var_4], 2
		call	sub_6B1818C7
		mov	ecx, [ebp+var_44]
		push	ebx
		mov	[ebp+Filename],	eax
		call	sub_6B1818C7
		push	ebx
		lea	ecx, [ebp+Src]
		mov	[ebp+lpszLongPath], eax
		call	sub_6B1818C7
		mov	ecx, [ebp+var_54]
		mov	esi, [esi]
		push	ebx
		mov	[ebp+FullPath],	eax
		call	sub_6B1818C7
		push	eax		; Ext
		push	[ebp+Filename]	; Filename
		push	[ebp+lpszLongPath] ; Dir
		push	[ebp+FullPath]	; Drive
		push	esi		; FullPath
		call	ds:_splitpath
		add	esp, 14h
		or	esi, 0FFFFFFFFh
		push	esi
		lea	ecx, [ebp+Src]
		call	sub_6B185A33
		mov	ebx, [ebp+var_44]
		push	esi
		mov	ecx, ebx
		call	sub_6B185A33
		mov	ecx, [ebp+var_4C]
		push	esi
		call	sub_6B185A33
		mov	ecx, [ebp+var_54]
		push	esi
		call	sub_6B185A33
		push	dword ptr [ebx]
		mov	esi, [ebp+Src]
		push	esi		; Args
		push	offset aSS_0	; "%s%s"
		push	[ebp+var_38]	; int
		call	sub_6B18F0EE
		add	esp, 10h
		lea	ecx, [esi-10h]
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B18163D

loc_6B19F4CE:				; CODE XREF: Ordinal1489+1D0j
		mov	eax, [edi]
		mov	ebx, ds:GetLongPathNameA
		push	0		; cchBuffer
		push	0		; lpszLongPath
		push	eax		; lpszShortPath
		call	ebx ; GetLongPathNameA
		test	eax, eax
		mov	[ebp+Src], eax
		jnz	short loc_6B19F51C

loc_6B19F4E4:				; CODE XREF: Ordinal1489+30Bj
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCsplitpathSp_1 ; "CSplitPath::SplitPath() : GetLongPathNa"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx

loc_6B19F4F7:				; CODE XREF: Ordinal1489+1A1j
					; Ordinal1489+3A5j
					; DATA XREF: ...
		lea	ecx, [ebp+var_88]
		call	Ordinal1635
		mov	ebx, eax
		neg	ebx
		sbb	bl, bl
		lea	ecx, [ebp+var_88]
		inc	bl
		call	Ordinal1090
		mov	al, bl
		jmp	loc_6B19F69A
; ---------------------------------------------------------------------------

loc_6B19F51C:				; CODE XREF: Ordinal1489+2B0j
		mov	esi, [edi]
		mov	edi, [ebp+var_34]
		push	eax
		mov	ecx, edi
		call	sub_6B1818C7
		push	[ebp+Src]	; cchBuffer
		push	eax		; lpszLongPath
		push	esi		; lpszShortPath
		call	ebx ; GetLongPathNameA
		push	0FFFFFFFFh
		mov	ecx, edi
		mov	ebx, eax
		call	sub_6B185A33
		test	ebx, ebx
		jz	short loc_6B19F4E4
		lea	ecx, [ebp+Src]
		call	sub_6B181879
		mov	eax, [edi]
		mov	ebx, [eax-0Ch]
		mov	ecx, [ebp+var_3C]
		push	ebx
		mov	byte ptr [ebp+var_4], 3
		call	sub_6B1818C7
		mov	ecx, [ebp+var_5C]
		push	ebx
		mov	[ebp+var_34], eax
		call	sub_6B1818C7
		push	ebx
		lea	ecx, [ebp+Src]
		mov	[ebp+var_38], eax
		call	sub_6B1818C7
		mov	ecx, [ebp+var_48]
		mov	edi, [edi]
		push	ebx
		mov	esi, eax
		call	sub_6B1818C7
		push	eax		; Ext
		push	[ebp+var_34]	; Filename
		push	[ebp+var_38]	; Dir
		push	esi		; Drive
		push	edi		; FullPath
		call	ds:_splitpath
		add	esp, 14h
		or	esi, 0FFFFFFFFh
		push	esi
		lea	ecx, [ebp+Src]
		call	sub_6B185A33
		mov	edi, [ebp+var_5C]
		push	esi
		mov	ecx, edi
		call	sub_6B185A33
		mov	ecx, [ebp+var_3C]
		push	esi
		call	sub_6B185A33
		mov	ecx, [ebp+var_48]
		push	esi
		call	sub_6B185A33
		push	dword ptr [edi]
		mov	esi, [ebp+Src]
		push	esi		; Args
		push	offset aSS_0	; "%s%s"
		push	[ebp+var_64]	; int
		call	sub_6B18F0EE
		add	esp, 10h
		lea	ecx, [esi-10h]
		call	sub_6B18163D
		jmp	loc_6B19F4F7
; ---------------------------------------------------------------------------

loc_6B19F5DC:				; DATA XREF: .rdata:6B1BCAB0o
		push	13h
		lea	ecx, [ebp+var_88]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_88]
		call	Ordinal1101
		mov	ecx, [ebp+var_90]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_88]
		call	Ordinal1103
		lea	ecx, [ebp+var_88]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B19F4F7
		retn
; ---------------------------------------------------------------------------

loc_6B19F62E:				; DATA XREF: .rdata:6B1BCAC0o
		push	15h
		lea	ecx, [ebp+var_88]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_88]
		call	Ordinal1101
		mov	eax, [ebp+var_8C]
		push	dword ptr [eax]
		lea	eax, [ebp+var_24]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+var_24]
		push	eax		; Src
		lea	ecx, [ebp+var_88]
		call	Ordinal1103
		lea	ecx, [ebp+var_88]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B19F4F7
		retn
; ---------------------------------------------------------------------------

loc_6B19F692:				; CODE XREF: Ordinal1489+25j
					; Ordinal1489+36j
		push	edi		; hModule
		mov	ecx, esi
		call	Ordinal1490

loc_6B19F69A:				; CODE XREF: Ordinal1489+2E5j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal1489	endp ; sp-analysis failed

; Exported entry 1490.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1490(HMODULE hModule)
		public Ordinal1490
Ordinal1490	proc near		; CODE XREF: Ordinal1489+463p
					; Ordinal1510+15p
					; DATA XREF: ...

var_50		= byte ptr -50h
var_30		= dword	ptr -30h
Filename	= dword	ptr -2Ch
var_25		= byte ptr -25h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
hModule		= dword	ptr  8

		mov	eax, offset unknown_libname_108	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 4Ch
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_30], ecx
		lea	ecx, [ebp+Filename]
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_25], 1
		call	sub_6B181879
		and	[ebp+var_4], 0
		push	offset aCsplitpathSp_2 ; "CSplitPath::SplitModule()"
		lea	ecx, [ebp+var_50]
		call	Ordinal1089
		mov	byte ptr [ebp+var_4], 2
		mov	esi, 104h

loc_6B19F6F7:				; CODE XREF: Ordinal1490+D7j
		push	esi
		lea	ecx, [ebp+Filename]
		call	sub_6B19EF93
		push	esi		; nSize
		push	eax		; lpFilename
		push	[ebp+hModule]	; hModule
		call	ds:GetModuleFileNameA
		push	0FFFFFFFFh
		lea	ecx, [ebp+Filename]
		mov	edi, eax
		call	sub_6B185A33
		test	edi, edi
		jnz	short loc_6B19F784
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCsplitpathSp_3 ; "CSplitPath::SplitModule() : GetModuleFi"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	[ebp+var_25], 0

loc_6B19F732:				; CODE XREF: Ordinal1490+D3j
					; DATA XREF: sub_6B19F78F+3Do ...
		lea	ecx, [ebp+var_50]
		call	Ordinal1635
		test	eax, eax
		jz	short loc_6B19F742
		mov	[ebp+var_25], 0

loc_6B19F742:				; CODE XREF: Ordinal1490+89j
		xor	bl, bl
		cmp	[ebp+var_25], bl
		jz	short loc_6B19F756
		push	[ebp+Filename]	; Filename
		mov	ecx, [ebp+var_30]
		call	Ordinal1489
		mov	bl, al

loc_6B19F756:				; CODE XREF: Ordinal1490+94j
		lea	ecx, [ebp+var_50]
		call	Ordinal1090
		mov	ecx, [ebp+Filename]
		add	ecx, 0FFFFFFF0h
		call	sub_6B18163D
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
; ---------------------------------------------------------------------------

loc_6B19F784:				; CODE XREF: Ordinal1490+66j
		cmp	edi, esi
		jnz	short loc_6B19F732
		add	esi, esi
		jmp	loc_6B19F6F7
Ordinal1490	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


sub_6B19F78F	proc near		; DATA XREF: .rdata:6B1BCB20o
		push	13h
		lea	ecx, [ebp-50h]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-50h]
		call	Ordinal1101
		mov	ecx, [ebp-54h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-50h]
		call	Ordinal1103
		lea	ecx, [ebp-50h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B19F732
		retn
sub_6B19F78F	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19F7D2	proc near		; DATA XREF: .rdata:6B1BCB30o
		push	15h
		lea	ecx, [ebp-50h]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-50h]
		call	Ordinal1101
		mov	eax, [ebp-58h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-50h]
		call	Ordinal1103
		lea	ecx, [ebp-50h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B19F732
		retn
sub_6B19F7D2	endp

; Exported entry 1510.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1510(HMODULE hModule, int)
		public Ordinal1510
Ordinal1510	proc near		; CODE XREF: Ordinal1509+6p
					; DATA XREF: .rdata:off_6B1BF428o

var_44		= byte ptr -44h
Src		= dword	ptr -34h
hModule		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 44h
		push	ebx
		lea	ecx, [ebp+var_44]
		call	Ordinal1487
		push	[ebp+hModule]	; hModule
		lea	ecx, [ebp+var_44]
		call	Ordinal1490
		test	al, al
		jnz	short loc_6B19F853
		push	offset aCsplitpathGetm ; "CSplitPath::GetModuleDirectory() : path"...
		call	sub_6B18102E
		xor	bl, bl
		jmp	short loc_6B19F861
; ---------------------------------------------------------------------------

loc_6B19F853:				; CODE XREF: Ordinal1510+1Cj
		push	[ebp+arg_4]	; int
		push	[ebp+Src]	; Src
		call	Ordinal1519
		pop	ecx
		mov	bl, al

loc_6B19F861:				; CODE XREF: Ordinal1510+2Aj
		pop	ecx
		lea	ecx, [ebp+var_44]
		call	Ordinal1488
		mov	al, bl
		pop	ebx
		leave
		retn
Ordinal1510	endp

; Exported entry 1509.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1509
Ordinal1509	proc near		; CODE XREF: Ordinal440+11p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	[esp+arg_0]	; int
		push	0		; hModule
		call	Ordinal1510
		pop	ecx
		pop	ecx
		retn
Ordinal1509	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19F87D	proc near		; CODE XREF: Ordinal1513+1Ep

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_6B19F88A
		xor	eax, eax
		jmp	short loc_6B19F8AA
; ---------------------------------------------------------------------------

loc_6B19F88A:				; CODE XREF: sub_6B19F87D+7j
		push	edi
		mov	edi, [esp+8+arg_4]
		test	edi, edi
		jz	short loc_6B19F899
		mov	eax, [edi]
		push	edi
		call	dword ptr [eax+4]

loc_6B19F899:				; CODE XREF: sub_6B19F87D+14j
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_6B19F8A5
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+8]

loc_6B19F8A5:				; CODE XREF: sub_6B19F87D+20j
		mov	[esi], edi
		mov	eax, edi
		pop	edi

loc_6B19F8AA:				; CODE XREF: sub_6B19F87D+Bj
		pop	esi
		retn	8
sub_6B19F87D	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19F8AE	proc near		; CODE XREF: Ordinal1512+11p
		mov	eax, [ecx]
		test	eax, eax
		jz	short locret_6B19F8BA
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+8]

locret_6B19F8BA:			; CODE XREF: sub_6B19F8AE+4j
		retn
sub_6B19F8AE	endp

; Exported entry 1514.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1514
Ordinal1514	proc near		; CODE XREF: Ordinal1512+9p
					; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+28h]
		test	eax, eax
		jz	short locret_6B19F8CC
		and	dword ptr [ecx+28h], 0
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+8]

locret_6B19F8CC:			; CODE XREF: Ordinal1514+5j
		retn
Ordinal1514	endp

; Exported entry 1515.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall Ordinal1515(char Args,	int, int)
		public Ordinal1515
Ordinal1515	proc near		; DATA XREF: .rdata:6B1B7804o
					; .rdata:off_6B1BF428o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx		; Args
		mov	eax, [ecx+28h]
		test	eax, eax
		jnz	short loc_6B19F8E7
		push	offset aCstreamarchive ; "CStreamArchive::ReadEx() : m_pStream =="...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short locret_6B19F91B
; ---------------------------------------------------------------------------

loc_6B19F8E7:				; CODE XREF: Ordinal1515+9j
		and	[ebp+var_4], 0
		mov	ecx, [eax]
		push	esi
		mov	esi, [ebp+arg_4]
		lea	edx, [ebp+var_4]
		push	edx
		push	esi
		push	[ebp+arg_0]
		push	eax
		call	dword ptr [ecx+0Ch]
		test	eax, eax
		jl	short loc_6B19F90B
		cmp	[ebp+var_4], esi
		jnz	short loc_6B19F90B
		xor	eax, eax
		inc	eax
		jmp	short loc_6B19F91A
; ---------------------------------------------------------------------------

loc_6B19F90B:				; CODE XREF: Ordinal1515+32j
					; Ordinal1515+37j
		push	eax		; Args
		push	offset aCstreamarchi_8 ; "CStreamArchive::ReadEx() : m_pStream->R"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax

loc_6B19F91A:				; CODE XREF: Ordinal1515+3Cj
		pop	esi

locret_6B19F91B:			; CODE XREF: Ordinal1515+18j
		leave
		retn	8
Ordinal1515	endp

; Exported entry 1516.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall Ordinal1516(char Args,	int, int)
		public Ordinal1516
Ordinal1516	proc near		; DATA XREF: .rdata:6B1B7808o
					; .rdata:off_6B1BF428o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx		; Args
		mov	eax, [ecx+28h]
		test	eax, eax
		jnz	short loc_6B19F939
		push	offset aCstreamarchi_1 ; "CStreamArchive::WriteEx() : m_pStream	="...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short locret_6B19F96D
; ---------------------------------------------------------------------------

loc_6B19F939:				; CODE XREF: Ordinal1516+9j
		and	[ebp+var_4], 0
		mov	ecx, [eax]
		push	esi
		mov	esi, [ebp+arg_4]
		lea	edx, [ebp+var_4]
		push	edx
		push	esi
		push	[ebp+arg_0]
		push	eax
		call	dword ptr [ecx+10h]
		test	eax, eax
		jl	short loc_6B19F95D
		cmp	[ebp+var_4], esi
		jnz	short loc_6B19F95D
		xor	eax, eax
		inc	eax
		jmp	short loc_6B19F96C
; ---------------------------------------------------------------------------

loc_6B19F95D:				; CODE XREF: Ordinal1516+32j
					; Ordinal1516+37j
		push	eax		; Args
		push	offset aCstreamarchi_9 ; "CStreamArchive::WriteEx() : m_pStream->"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax

loc_6B19F96C:				; CODE XREF: Ordinal1516+3Cj
		pop	esi

locret_6B19F96D:			; CODE XREF: Ordinal1516+18j
		leave
		retn	8
Ordinal1516	endp

; Exported entry 1517.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1517
Ordinal1517	proc near		; DATA XREF: .rdata:6B1B780Co
					; .rdata:off_6B1BF428o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		mov	eax, [ecx+28h]
		test	eax, eax
		jnz	short loc_6B19F989
		push	offset aCstreamarchi_3 ; "CStreamArchive::GetPosEx() : m_pStream "...
		call	sub_6B18102E
		jmp	short loc_6B19F9B5
; ---------------------------------------------------------------------------

loc_6B19F989:				; CODE XREF: Ordinal1517+Aj
		push	esi
		push	edi
		lea	edi, [ebp+var_8]
		push	edi
		xor	edx, edx
		and	[ebp+var_8], edx
		and	[ebp+var_4], edx
		mov	esi, [eax]
		push	1
		push	edx
		xor	ecx, ecx
		push	ecx
		push	eax
		call	dword ptr [esi+14h]
		test	eax, eax
		pop	edi
		pop	esi
		jge	short loc_6B19F9BA
		push	eax		; Args
		push	offset aCstreamarch_10 ; "CStreamArchive::GetPosEx() : m_pStream-"...
		call	sub_6B18102E
		pop	ecx

loc_6B19F9B5:				; CODE XREF: Ordinal1517+16j
		pop	ecx
		xor	eax, eax
		jmp	short locret_6B19F9CB
; ---------------------------------------------------------------------------

loc_6B19F9BA:				; CODE XREF: Ordinal1517+36j
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+var_8]
		mov	[eax], ecx
		mov	ecx, [ebp+var_4]
		mov	[eax+4], ecx
		xor	eax, eax
		inc	eax

locret_6B19F9CB:			; CODE XREF: Ordinal1517+47j
		leave
		retn	4
Ordinal1517	endp

; Exported entry 1518.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1518
Ordinal1518	proc near		; DATA XREF: .rdata:6B1B7810o
					; .rdata:off_6B1BF428o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		mov	eax, [ecx+28h]
		test	eax, eax
		jnz	short loc_6B19F9E7
		push	offset aCstreamarchi_5 ; "CStreamArchive::SetPosEx() : m_pStream "...
		call	sub_6B18102E
		jmp	short loc_6B19FA26
; ---------------------------------------------------------------------------

loc_6B19F9E7:				; CODE XREF: Ordinal1518+Aj
		and	[ebp+var_8], 0
		and	[ebp+var_4], 0
		mov	ecx, [eax]
		lea	edx, [ebp+var_8]
		push	edx
		push	0
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		push	eax
		call	dword ptr [ecx+14h]
		test	eax, eax
		jl	short loc_6B19FA1A
		mov	ecx, [ebp+var_8]
		cmp	ecx, [ebp+arg_0]
		jnz	short loc_6B19FA1A
		mov	ecx, [ebp+var_4]
		cmp	ecx, [ebp+arg_4]
		jnz	short loc_6B19FA1A
		xor	eax, eax
		inc	eax
		jmp	short locret_6B19FA29
; ---------------------------------------------------------------------------

loc_6B19FA1A:				; CODE XREF: Ordinal1518+34j
					; Ordinal1518+3Cj ...
		push	eax		; Args
		push	offset aCstreamarch_11 ; "CStreamArchive::SetPosEx() : m_pStream-"...
		call	sub_6B18102E
		pop	ecx

loc_6B19FA26:				; CODE XREF: Ordinal1518+16j
		pop	ecx
		xor	eax, eax

locret_6B19FA29:			; CODE XREF: Ordinal1518+49j
		leave
		retn	8
Ordinal1518	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19FA2D	proc near		; CODE XREF: Ordinal1511+15p
		mov	eax, ecx
		and	dword ptr [eax], 0
		retn
sub_6B19FA2D	endp

; Exported entry 1511.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1511
Ordinal1511	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		call	Ordinal610
		lea	ecx, [esi+28h]
		mov	dword ptr [esi], offset	off_6B1B7800
		call	sub_6B19FA2D
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1511	endp

; Exported entry 1512.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1512
Ordinal1512	proc near		; CODE XREF: sub_6B19FA9A+3p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1B7800
		call	Ordinal1514
		lea	ecx, [esi+28h]
		call	sub_6B19F8AE
		mov	ecx, esi
		pop	esi
		jmp	Ordinal611
Ordinal1512	endp

; Exported entry 1513.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1513
Ordinal1513	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		cmp	[esp+arg_0], 0
		jnz	short loc_6B19FA87
		push	offset aCstreamarchi_7 ; "CStreamArchive::Reference() :	pStream	="...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short locret_6B19FA97
; ---------------------------------------------------------------------------

loc_6B19FA87:				; CODE XREF: Ordinal1513+5j
		push	[esp+arg_0]
		add	ecx, 28h
		push	ecx
		call	sub_6B19F87D
		xor	eax, eax
		inc	eax

locret_6B19FA97:			; CODE XREF: Ordinal1513+14j
		retn	4
Ordinal1513	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B19FA9A(void *, char)
sub_6B19FA9A	proc near		; DATA XREF: .rdata:off_6B1B7800o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1512
		test	[esp+4+arg_0], 1
		jz	short loc_6B19FAB0
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B19FAB0:				; CODE XREF: sub_6B19FA9A+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B19FA9A	endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_6B1A9881

loc_6B19FAB6:				; CODE XREF: sub_6B1A9881+6j
					; sub_6B1A98B3+6j
		mov	eax, [ecx]
		add	ecx, 4
		cmp	eax, ecx
		jz	short locret_6B19FAC7
		push	eax		; Memory
		call	ds:__imp_free
		pop	ecx

locret_6B19FAC7:			; CODE XREF: sub_6B1A9881-9DC4j
		retn
; END OF FUNCTION CHUNK	FOR sub_6B1A9881

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6B19FAC8(LPCSTR lpMultiByteStr, UINT CodePage)
sub_6B19FAC8	proc near		; CODE XREF: Ordinal1520+4Dp

lpMultiByteStr	= dword	ptr  4
CodePage	= dword	ptr  8

		cmp	[esp+lpMultiByteStr], 0
		push	edi
		mov	edi, ecx
		jnz	short loc_6B19FAD7
		and	dword ptr [edi], 0
		jmp	short loc_6B19FB26
; ---------------------------------------------------------------------------

loc_6B19FAD7:				; CODE XREF: sub_6B19FAC8+8j
		push	esi
		push	[esp+8+lpMultiByteStr] ; lpString
		call	ds:lstrlenA
		mov	esi, eax
		inc	esi
		cmp	esi, 80h
		jle	short loc_6B19FB08
		lea	eax, [esi+esi]
		push	eax		; Size
		call	ds:__imp_malloc
		test	eax, eax
		pop	ecx
		mov	[edi], eax
		jnz	short loc_6B19FB08
		push	8007000Eh
		call	sub_6B181113
; ---------------------------------------------------------------------------

loc_6B19FB08:				; CODE XREF: sub_6B19FAC8+23j
					; sub_6B19FAC8+34j
		push	esi		; cchWideChar
		push	dword ptr [edi]	; lpWideCharStr
		push	esi		; cbMultiByte
		push	[esp+14h+lpMultiByteStr] ; lpMultiByteStr
		push	0		; dwFlags
		push	[esp+1Ch+CodePage] ; CodePage
		call	ds:MultiByteToWideChar
		test	eax, eax
		jnz	short loc_6B19FB25
		call	sub_6B18112B
; ---------------------------------------------------------------------------

loc_6B19FB25:				; CODE XREF: sub_6B19FAC8+56j
		pop	esi

loc_6B19FB26:				; CODE XREF: sub_6B19FAC8+Dj
		pop	edi
		retn	8
sub_6B19FAC8	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6B19FB2A(void	*Dst, void *Src, int)
sub_6B19FB2A	proc near		; CODE XREF: sub_6B19FC49+46p

Dst		= dword	ptr  4
Src		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		add	eax, eax
		push	eax		; Size
		push	[esp+4+Src]	; Src
		push	[esp+8+Dst]	; Dst
		call	ds:memmove
		add	esp, 0Ch
		retn
sub_6B19FB2A	endp

; Exported entry 1523.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal1523(int, void *Dst, int)
		public Ordinal1523
Ordinal1523	proc near		; CODE XREF: Ordinal431+29p
					; Ordinal432+29p ...

arg_0		= dword	ptr  4
Dst		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+Dst]
		test	esi, esi
		jnz	short loc_6B19FB5F
		push	offset aCstringconve_4 ; "CStringConvert::Copy(CStringA, LPSTR)	:"...
		call	sub_6B18102E
		mov	eax, [esp+8+arg_8]
		and	[eax], esi
		pop	ecx
		jmp	short loc_6B19FB73
; ---------------------------------------------------------------------------

loc_6B19FB5F:				; CODE XREF: Ordinal1523+7j
		mov	edx, [esp+4+arg_0]
		mov	eax, [edx]
		mov	eax, [eax-0Ch]
		mov	ecx, [esp+4+arg_8]
		inc	eax
		cmp	[ecx], eax
		mov	[ecx], eax
		jnb	short loc_6B19FB77

loc_6B19FB73:				; CODE XREF: Ordinal1523+1Aj
		xor	al, al
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6B19FB77:				; CODE XREF: Ordinal1523+2Ej
		mov	ecx, [edx]
		cmp	dword ptr [ecx-0Ch], 0
		jnz	short loc_6B19FB84
		mov	byte ptr [esi],	0
		jmp	short loc_6B19FB8F
; ---------------------------------------------------------------------------

loc_6B19FB84:				; CODE XREF: Ordinal1523+3Aj
		push	eax		; Size
		push	ecx		; Src
		push	esi		; Dst
		call	memcpy
		add	esp, 0Ch

loc_6B19FB8F:				; CODE XREF: Ordinal1523+3Fj
		mov	al, 1
		pop	esi
		retn
Ordinal1523	endp

; Exported entry 1524.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal1524(int, void *Dst, int)
		public Ordinal1524
Ordinal1524	proc near		; CODE XREF: Ordinal575+61p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
Dst		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		mov	edi, [esp+4+Dst]
		test	edi, edi
		jnz	short loc_6B19FBAF
		push	offset aCstringconve_5 ; "CStringConvert::Copy(CStringW, LPWSTR) "...
		call	sub_6B18102E
		mov	eax, [esp+8+arg_8]
		and	[eax], edi
		pop	ecx
		jmp	short loc_6B19FBC6
; ---------------------------------------------------------------------------

loc_6B19FBAF:				; CODE XREF: Ordinal1524+7j
		mov	edx, [esp+4+arg_0]
		mov	eax, [edx]
		mov	eax, [eax-0Ch]
		mov	ecx, [esp+4+arg_8]
		lea	eax, [eax+eax+2]
		cmp	[ecx], eax
		mov	[ecx], eax
		jnb	short loc_6B19FBCA

loc_6B19FBC6:				; CODE XREF: Ordinal1524+1Aj
		xor	al, al
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6B19FBCA:				; CODE XREF: Ordinal1524+31j
		mov	ecx, [edx]
		cmp	dword ptr [ecx-0Ch], 0
		jnz	short loc_6B19FBD8
		and	word ptr [edi],	0
		jmp	short loc_6B19FBE3
; ---------------------------------------------------------------------------

loc_6B19FBD8:				; CODE XREF: Ordinal1524+3Dj
		push	eax		; Size
		push	ecx		; Src
		push	edi		; Dst
		call	memcpy
		add	esp, 0Ch

loc_6B19FBE3:				; CODE XREF: Ordinal1524+43j
		mov	al, 1
		pop	edi
		retn
Ordinal1524	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19FBE7	proc near		; CODE XREF: sub_6B19FCB2+4Fp

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		call	sub_6B18C7AB
		push	[esp+4+arg_0]
		mov	ecx, esi
		call	sub_6B1892F0
		pop	esi
		retn	4
sub_6B19FBE7	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6B19FC02(HMODULE hModule, int)
sub_6B19FC02	proc near		; CODE XREF: sub_6B19FE61+1Bp

hModule		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	edi
		push	[esp+8+arg_4]	; int
		mov	ebx, ecx
		push	[esp+0Ch+hModule] ; hModule
		call	sub_6B1814A6
		mov	edi, eax
		test	edi, edi
		pop	ecx
		pop	ecx
		jz	short loc_6B19FC44
		push	esi
		movzx	esi, word ptr [edi]
		push	esi
		mov	ecx, ebx
		call	sub_6B18C7AB
		lea	ecx, [esi+esi]
		push	ecx		; Size
		add	edi, 2
		push	edi		; Src
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch
		push	esi
		mov	ecx, ebx
		call	sub_6B1892F0
		xor	eax, eax
		inc	eax
		pop	esi

loc_6B19FC44:				; CODE XREF: sub_6B19FC02+17j
		pop	edi
		pop	ebx
		retn	8
sub_6B19FC02	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6B19FC49(void *Src,	int)
sub_6B19FC49	proc near		; CODE XREF: sub_6B19FE85+1Cp

Src		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_4], 0
		push	ebx
		mov	ebx, ecx
		jnz	short loc_6B19FC5C
		call	sub_6B189317
		jmp	short loc_6B19FCAD
; ---------------------------------------------------------------------------

loc_6B19FC5C:				; CODE XREF: sub_6B19FC49+Aj
		push	esi
		mov	esi, [ebp+Src]
		test	esi, esi
		jnz	short loc_6B19FC6E
		push	80070057h
		call	sub_6B181113
; ---------------------------------------------------------------------------

loc_6B19FC6E:				; CODE XREF: sub_6B19FC49+19j
		mov	eax, [ebx]
		push	edi
		push	[ebp+arg_4]
		mov	edi, [eax-0Ch]
		sub	esi, eax
		mov	ecx, ebx
		sar	esi, 1
		call	sub_6B18C7AB
		cmp	esi, edi
		pop	edi
		push	[ebp+arg_4]	; int
		ja	short loc_6B19FC96
		lea	ecx, [eax+esi*2]
		push	ecx		; Src
		push	eax		; Dst
		call	sub_6B19FB2A
		jmp	short loc_6B19FC9F
; ---------------------------------------------------------------------------

loc_6B19FC96:				; CODE XREF: sub_6B19FC49+3Fj
		push	[ebp+Src]	; Src
		push	eax		; Dst
		call	sub_6B18C638

loc_6B19FC9F:				; CODE XREF: sub_6B19FC49+4Bj
		add	esp, 0Ch
		push	[ebp+arg_4]
		mov	ecx, ebx
		call	sub_6B1892F0
		pop	esi

loc_6B19FCAD:				; CODE XREF: sub_6B19FC49+11j
		pop	ebx
		pop	ebp
		retn	8
sub_6B19FC49	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6B19FCB2(wchar_t *Str)
sub_6B19FCB2	proc near		; CODE XREF: Ordinal1540+64p
					; Ordinal1536+51p

Str		= dword	ptr  4

		push	ebx
		push	ebp
		mov	ebp, [esp+8+Str]
		push	edi
		xor	edi, edi
		cmp	ebp, edi
		mov	ebx, ecx
		jz	short loc_6B19FD07
		cmp	[ebp+0], di
		jz	short loc_6B19FD07
		push	esi
		mov	esi, [ebx]
		xor	eax, eax
		mov	ax, [esi]
		cmp	ax, di
		jz	short loc_6B19FD06

loc_6B19FCD4:				; CODE XREF: sub_6B19FCB2+42j
		push	eax		; Ch
		push	ebp		; Str
		call	ds:wcschr
		test	eax, eax
		pop	ecx
		pop	ecx
		jz	short loc_6B19FCEA
		test	edi, edi
		jnz	short loc_6B19FCEC
		mov	edi, esi
		jmp	short loc_6B19FCEC
; ---------------------------------------------------------------------------

loc_6B19FCEA:				; CODE XREF: sub_6B19FCB2+2Ej
		xor	edi, edi

loc_6B19FCEC:				; CODE XREF: sub_6B19FCB2+32j
					; sub_6B19FCB2+36j
		inc	esi
		inc	esi
		mov	ax, [esi]
		test	ax, ax
		jnz	short loc_6B19FCD4
		test	edi, edi
		jz	short loc_6B19FD06
		sub	edi, [ebx]
		mov	ecx, ebx
		sar	edi, 1
		push	edi
		call	sub_6B19FBE7

loc_6B19FD06:				; CODE XREF: sub_6B19FCB2+20j
					; sub_6B19FCB2+46j
		pop	esi

loc_6B19FD07:				; CODE XREF: sub_6B19FCB2+Dj
					; sub_6B19FCB2+13j
		pop	edi
		pop	ebp
		mov	eax, ebx
		pop	ebx
		retn	4
sub_6B19FCB2	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6B19FD0F(wchar_t *Str)
sub_6B19FD0F	proc near		; CODE XREF: Ordinal1540+4Fp
					; Ordinal1536+48p

Str		= dword	ptr  4

		push	ebx
		push	edi
		mov	edi, [esp+8+Str]
		test	edi, edi
		mov	ebx, ecx
		jz	short loc_6B19FD77
		cmp	word ptr [edi],	0
		jz	short loc_6B19FD77
		push	esi
		mov	esi, [ebx]
		xor	eax, eax
		jmp	short loc_6B19FD38
; ---------------------------------------------------------------------------

loc_6B19FD28:				; CODE XREF: sub_6B19FD0F+2Fj
		push	eax		; Ch
		push	edi		; Str
		call	ds:wcschr
		test	eax, eax
		pop	ecx
		pop	ecx
		jz	short loc_6B19FD40
		inc	esi
		inc	esi

loc_6B19FD38:				; CODE XREF: sub_6B19FD0F+17j
		mov	ax, [esi]
		test	ax, ax
		jnz	short loc_6B19FD28

loc_6B19FD40:				; CODE XREF: sub_6B19FD0F+25j
		mov	eax, [ebx]
		cmp	esi, eax
		jz	short loc_6B19FD76
		push	dword ptr [eax-0Ch]
		sub	esi, eax
		mov	ecx, ebx
		sar	esi, 1
		call	sub_6B18C7AB
		mov	ecx, [ebx]
		mov	edi, [ecx-0Ch]
		sub	edi, esi
		lea	ecx, [edi+edi+2]
		push	ecx		; Size
		lea	ecx, [eax+esi*2]
		push	ecx		; Src
		push	eax		; Dst
		call	ds:memmove
		add	esp, 0Ch
		push	edi
		mov	ecx, ebx
		call	sub_6B1892F0

loc_6B19FD76:				; CODE XREF: sub_6B19FD0F+35j
		pop	esi

loc_6B19FD77:				; CODE XREF: sub_6B19FD0F+Aj
					; sub_6B19FD0F+10j
		pop	edi
		mov	eax, ebx
		pop	ebx
		retn	4
sub_6B19FD0F	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6B19FD7E(wchar_t *Count, va_list Format)
sub_6B19FD7E	proc near		; CODE XREF: Ordinal1532+39p

Count		= dword	ptr  4
Format		= dword	ptr  8

		push	ebx
		push	esi
		push	edi
		push	[esp+0Ch+Format] ; ArgList
		mov	edi, ecx
		mov	eax, [edi]
		push	[esp+10h+Count]	; Format
		mov	esi, [eax-0Ch]
		call	ds:_vscwprintf
		pop	ecx
		pop	ecx
		lea	ebx, [eax+esi]
		push	ebx
		mov	ecx, edi
		call	sub_6B18C7AB
		push	[esp+0Ch+Format] ; Format
		lea	eax, [eax+esi*2]
		push	[esp+10h+Count]	; Count
		push	eax		; String
		call	ds:vswprintf
		add	esp, 0Ch
		push	ebx
		mov	ecx, edi
		call	sub_6B1892F0
		pop	edi
		pop	esi
		pop	ebx
		retn	8
sub_6B19FD7E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6B19FDC6(wchar_t *Count, va_list Format)
sub_6B19FDC6	proc near		; CODE XREF: Ordinal1530+39p
					; Ordinal1540+41p

Count		= dword	ptr  8
Format		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		cmp	[ebp+Count], 0
		push	esi
		push	edi
		mov	edi, ecx
		jnz	short loc_6B19FDDD
		push	80070057h
		call	sub_6B181113
; ---------------------------------------------------------------------------

loc_6B19FDDD:				; CODE XREF: sub_6B19FDC6+Bj
		push	[ebp+Format]	; ArgList
		push	[ebp+Count]	; Format
		call	ds:_vscwprintf
		pop	ecx
		pop	ecx
		mov	esi, eax
		push	esi
		mov	ecx, edi
		call	sub_6B18C7AB
		push	[ebp+Format]	; Format
		push	[ebp+Count]	; Count
		push	eax		; String
		call	ds:vswprintf
		add	esp, 0Ch
		push	esi
		mov	ecx, edi
		call	sub_6B1892F0
		pop	edi
		pop	esi
		pop	ebp
		retn	8
sub_6B19FDC6	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B19FE13	proc near		; CODE XREF: sub_6B1A02C7+1Cp
					; Ordinal1540+7Ap ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		mov	ebx, ecx
		mov	eax, [ebx]
		push	edi
		mov	edi, [eax-0Ch]
		sub	esi, eax
		mov	eax, [ebp+arg_4]
		add	eax, edi
		push	eax
		sar	esi, 1
		mov	[ebp+var_4], eax
		call	sub_6B18C7AB
		cmp	esi, edi
		lea	esi, [eax+esi*2]
		jbe	short loc_6B19FE40
		mov	esi, [ebp+arg_0]

loc_6B19FE40:				; CODE XREF: sub_6B19FE13+28j
		push	[ebp+arg_4]	; int
		lea	eax, [eax+edi*2]
		push	esi		; Src
		push	eax		; Dst
		call	sub_6B18C638
		add	esp, 0Ch
		push	[ebp+var_4]
		mov	ecx, ebx
		call	sub_6B1892F0
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
sub_6B19FE13	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19FE61	proc near		; CODE XREF: sub_6B1A02ED+16p

arg_0		= dword	ptr  4

		push	esi
		push	0		; wLanguage
		push	[esp+8+arg_0]	; int
		mov	esi, ecx
		call	sub_6B181508
		test	eax, eax
		pop	ecx
		pop	ecx
		jz	short loc_6B19FE81
		push	[esp+4+arg_0]	; int
		mov	ecx, esi
		push	eax		; hModule
		call	sub_6B19FC02

loc_6B19FE81:				; CODE XREF: sub_6B19FE61+12j
		pop	esi
		retn	4
sub_6B19FE61	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6B19FE85(wchar_t *Src)
sub_6B19FE85	proc near		; CODE XREF: Ordinal1520+5Fp
					; Ordinal1521+36p ...

Src		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+Src]
		test	esi, esi
		push	edi
		mov	edi, ecx
		jnz	short loc_6B19FE95
		xor	eax, eax
		jmp	short loc_6B19FE9D
; ---------------------------------------------------------------------------

loc_6B19FE95:				; CODE XREF: sub_6B19FE85+Aj
		push	esi		; Str
		call	ds:wcslen
		pop	ecx

loc_6B19FE9D:				; CODE XREF: sub_6B19FE85+Ej
		push	eax		; int
		push	esi		; Src
		mov	ecx, edi
		call	sub_6B19FC49
		pop	edi
		pop	esi
		retn	4
sub_6B19FE85	endp

; Exported entry 1529.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1529(int, char *Format, va_list Args)
		public Ordinal1529
Ordinal1529	proc near		; CODE XREF: Ordinal859+42p
					; Ordinal1063+1Ap ...

var_44		= byte ptr -44h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Format		= dword	ptr  0Ch
Args		= dword	ptr  10h

		mov	eax, offset unknown_libname_109	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 40h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCstringconve_6 ; "CStringConvert::FormatV(CStringA, LPCST"...
		lea	ecx, [ebp+var_44]
		mov	[ebp+var_14], eax
		call	Ordinal1089
		push	[ebp+Args]	; Args
		and	[ebp+var_4], 0
		push	[ebp+Format]	; Format
		mov	ecx, [ebp+arg_0]
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B18F02F

loc_6B19FEE9:				; DATA XREF: sub_6B19FF1A+3Do
					; sub_6B19FF5D+4Fo
		lea	ecx, [ebp+var_44]
		call	Ordinal1635
		mov	ebx, eax
		neg	ebx
		sbb	bl, bl
		lea	ecx, [ebp+var_44]
		inc	bl
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal1529	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19FF1A	proc near		; DATA XREF: .rdata:6B1BCB88o
		push	13h
		lea	ecx, [ebp-44h]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-44h]
		call	Ordinal1101
		mov	ecx, [ebp-4Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal1103
		lea	ecx, [ebp-44h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B19FEE9
		retn
sub_6B19FF1A	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B19FF5D	proc near		; DATA XREF: .rdata:6B1BCB98o
		push	15h
		lea	ecx, [ebp-44h]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-44h]
		call	Ordinal1101
		mov	eax, [ebp-48h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal1103
		lea	ecx, [ebp-44h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B19FEE9
		retn
sub_6B19FF5D	endp

; Exported entry 1530.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1530(int, wchar_t *Count, va_list Format)
		public Ordinal1530
Ordinal1530	proc near		; CODE XREF: Ordinal1526+Dp
					; DATA XREF: .rdata:off_6B1BF428o

var_44		= byte ptr -44h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Count		= dword	ptr  0Ch
Format		= dword	ptr  10h

		mov	eax, offset unknown_libname_110	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 40h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCstringconve_7 ; "CStringConvert::FormatV(CStringW, LPCWS"...
		lea	ecx, [ebp+var_44]
		mov	[ebp+var_14], eax
		call	Ordinal1089
		push	[ebp+Format]	; Format
		and	[ebp+var_4], 0
		push	[ebp+Count]	; Count
		mov	ecx, [ebp+arg_0]
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B19FDC6

loc_6B19FFF0:				; DATA XREF: sub_6B1A0021+3Do
					; sub_6B1A0064+4Fo
		lea	ecx, [ebp+var_44]
		call	Ordinal1635
		mov	ebx, eax
		neg	ebx
		sbb	bl, bl
		lea	ecx, [ebp+var_44]
		inc	bl
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal1530	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A0021	proc near		; DATA XREF: .rdata:6B1BCBF0o
		push	13h
		lea	ecx, [ebp-44h]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-44h]
		call	Ordinal1101
		mov	ecx, [ebp-4Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal1103
		lea	ecx, [ebp-44h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B19FFF0
		retn
sub_6B1A0021	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A0064	proc near		; DATA XREF: .rdata:6B1BCC00o
		push	15h
		lea	ecx, [ebp-44h]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-44h]
		call	Ordinal1101
		mov	eax, [ebp-48h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal1103
		lea	ecx, [ebp-44h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B19FFF0
		retn
sub_6B1A0064	endp

; Exported entry 1531.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1531(int, char *Format, va_list Args)
		public Ordinal1531
Ordinal1531	proc near		; CODE XREF: Ordinal1527+Dp
					; DATA XREF: .rdata:off_6B1BF428o

var_44		= byte ptr -44h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Format		= dword	ptr  0Ch
Args		= dword	ptr  10h

		mov	eax, offset unknown_libname_111	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 40h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCstringconve_8 ; "CStringConvert::AppendFormatV(CStringA,"...
		lea	ecx, [ebp+var_44]
		mov	[ebp+var_14], eax
		call	Ordinal1089
		push	[ebp+Args]	; Args
		and	[ebp+var_4], 0
		push	[ebp+Format]	; Format
		mov	ecx, [ebp+arg_0]
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B181F44

loc_6B1A00F7:				; DATA XREF: sub_6B1A0128+3Do
					; sub_6B1A016B+4Fo
		lea	ecx, [ebp+var_44]
		call	Ordinal1635
		mov	ebx, eax
		neg	ebx
		sbb	bl, bl
		lea	ecx, [ebp+var_44]
		inc	bl
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal1531	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A0128	proc near		; DATA XREF: .rdata:6B1BCC58o
		push	13h
		lea	ecx, [ebp-44h]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-44h]
		call	Ordinal1101
		mov	ecx, [ebp-4Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal1103
		lea	ecx, [ebp-44h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A00F7
		retn
sub_6B1A0128	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A016B	proc near		; DATA XREF: .rdata:6B1BCC68o
		push	15h
		lea	ecx, [ebp-44h]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-44h]
		call	Ordinal1101
		mov	eax, [ebp-48h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal1103
		lea	ecx, [ebp-44h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A00F7
		retn
sub_6B1A016B	endp

; Exported entry 1532.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1532(int, wchar_t *Count, va_list Format)
		public Ordinal1532
Ordinal1532	proc near		; CODE XREF: Ordinal1528+Dp
					; DATA XREF: .rdata:off_6B1BF428o

var_44		= byte ptr -44h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Count		= dword	ptr  0Ch
Format		= dword	ptr  10h

		mov	eax, offset unknown_libname_112	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 40h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCstringconve_9 ; "CStringConvert::AppendFormatV(CStringW,"...
		lea	ecx, [ebp+var_44]
		mov	[ebp+var_14], eax
		call	Ordinal1089
		push	[ebp+Format]	; Format
		and	[ebp+var_4], 0
		push	[ebp+Count]	; Count
		mov	ecx, [ebp+arg_0]
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B19FD7E

loc_6B1A01FE:				; DATA XREF: sub_6B1A022F+3Do
					; sub_6B1A0272+4Fo
		lea	ecx, [ebp+var_44]
		call	Ordinal1635
		mov	ebx, eax
		neg	ebx
		sbb	bl, bl
		lea	ecx, [ebp+var_44]
		inc	bl
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal1532	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A022F	proc near		; DATA XREF: .rdata:6B1BCCC0o
		push	13h
		lea	ecx, [ebp-44h]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-44h]
		call	Ordinal1101
		mov	ecx, [ebp-4Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal1103
		lea	ecx, [ebp-44h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A01FE
		retn
sub_6B1A022F	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A0272	proc near		; DATA XREF: .rdata:6B1BCCD0o
		push	15h
		lea	ecx, [ebp-44h]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-44h]
		call	Ordinal1101
		mov	eax, [ebp-48h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal1103
		lea	ecx, [ebp-44h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A01FE
		retn
sub_6B1A0272	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6B1A02C7(wchar_t *Str)
sub_6B1A02C7	proc near		; CODE XREF: Ordinal1534+36p
					; Ordinal1540+6Cp ...

Str		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+Str]
		test	esi, esi
		push	edi
		mov	edi, ecx
		jnz	short loc_6B1A02D7
		xor	eax, eax
		jmp	short loc_6B1A02DF
; ---------------------------------------------------------------------------

loc_6B1A02D7:				; CODE XREF: sub_6B1A02C7+Aj
		push	esi		; Str
		call	ds:wcslen
		pop	ecx

loc_6B1A02DF:				; CODE XREF: sub_6B1A02C7+Ej
		push	eax
		push	esi
		mov	ecx, edi
		call	sub_6B19FE13
		pop	edi
		pop	esi
		retn	4
sub_6B1A02C7	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A02ED	proc near		; CODE XREF: sub_6B1A0CED+2Cp

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		xor	al, al
		test	edx, edx
		jz	short locret_6B1A030A
		test	edx, 0FFFF0000h
		jnz	short locret_6B1A030A
		movzx	eax, dx
		push	eax
		call	sub_6B19FE61
		mov	al, 1

locret_6B1A030A:			; CODE XREF: sub_6B1A02ED+8j
					; sub_6B1A02ED+10j
		retn	4
sub_6B1A02ED	endp

; Exported entry 1525.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal1525(int, char *Format, char Args)
		public Ordinal1525
Ordinal1525	proc near		; CODE XREF: Ordinal148+14p
					; Ordinal148+2Ep ...

arg_0		= dword	ptr  4
Format		= dword	ptr  8
Args		= byte ptr  0Ch

		lea	eax, [esp+Args]
		push	eax		; Args
		push	[esp+4+Format]	; Format
		push	[esp+8+arg_0]	; int
		call	Ordinal1529
		add	esp, 0Ch
		retn
Ordinal1525	endp

; Exported entry 1526.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal1526(int, wchar_t *Count, char Format)
		public Ordinal1526
Ordinal1526	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
Count		= dword	ptr  8
Format		= byte ptr  0Ch

		lea	eax, [esp+Format]
		push	eax		; Format
		push	[esp+4+Count]	; Count
		push	[esp+8+arg_0]	; int
		call	Ordinal1530
		add	esp, 0Ch
		retn
Ordinal1526	endp

; Exported entry 1527.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal1527(int, char *Format, char Args)
		public Ordinal1527
Ordinal1527	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
Format		= dword	ptr  8
Args		= byte ptr  0Ch

		lea	eax, [esp+Args]
		push	eax		; Args
		push	[esp+4+Format]	; Format
		push	[esp+8+arg_0]	; int
		call	Ordinal1531
		add	esp, 0Ch
		retn
Ordinal1527	endp

; Exported entry 1528.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal1528(int, wchar_t *Count, char Format)
		public Ordinal1528
Ordinal1528	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
Count		= dword	ptr  8
Format		= byte ptr  0Ch

		lea	eax, [esp+Format]
		push	eax		; Format
		push	[esp+4+Count]	; Count
		push	[esp+8+arg_0]	; int
		call	Ordinal1532
		add	esp, 0Ch
		retn
Ordinal1528	endp

; Exported entry 1519.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1519(char *Src, int)
		public Ordinal1519
Ordinal1519	proc near		; CODE XREF: Ordinal186+44p
					; Ordinal473+50p ...

var_44		= byte ptr -44h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_113	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 40h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCstringconv_10 ; "CStringConvert::Copy(LPCSTR, CStringA)"
		lea	ecx, [ebp+var_44]
		mov	[ebp+var_14], eax
		call	Ordinal1089
		and	[ebp+var_4], 0
		push	[ebp+Src]	; Src
		mov	ecx, [ebp+arg_4]
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B181EA9

loc_6B1A03A0:				; DATA XREF: sub_6B1A03D1+3Do
					; sub_6B1A0414+4Fo
		lea	ecx, [ebp+var_44]
		call	Ordinal1635
		mov	ebx, eax
		neg	ebx
		sbb	bl, bl
		lea	ecx, [ebp+var_44]
		inc	bl
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal1519	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A03D1	proc near		; DATA XREF: .rdata:6B1BCD28o
		push	13h
		lea	ecx, [ebp-44h]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-44h]
		call	Ordinal1101
		mov	ecx, [ebp-4Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal1103
		lea	ecx, [ebp-44h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A03A0
		retn
sub_6B1A03D1	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A0414	proc near		; DATA XREF: .rdata:6B1BCD38o
		push	15h
		lea	ecx, [ebp-44h]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-44h]
		call	Ordinal1101
		mov	eax, [ebp-48h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal1103
		lea	ecx, [ebp-44h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A03A0
		retn
sub_6B1A0414	endp

; Exported entry 1520.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1520(LPCSTR lpMultiByteStr, int)
		public Ordinal1520
Ordinal1520	proc near		; CODE XREF: Ordinal474+50p
					; Ordinal502+36p ...

var_148		= byte ptr -148h
Memory		= dword	ptr -128h
var_124		= byte ptr -124h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
lpMultiByteStr	= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_114	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 144h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCstringconv_11 ; "CStringConvert::Copy(LPCSTR, CStringW)"
		lea	ecx, [ebp+var_148]
		mov	[ebp+var_14], eax
		call	Ordinal1089
		and	[ebp+var_4], 0
		push	0		; CodePage
		push	[ebp+lpMultiByteStr] ; lpMultiByteStr
		lea	eax, [ebp+var_124]
		lea	ecx, [ebp+Memory]
		mov	byte ptr [ebp+var_4], 1
		mov	[ebp+Memory], eax
		call	sub_6B19FAC8
		push	[ebp+Memory]	; Src
		mov	ecx, [ebp+arg_4]
		mov	byte ptr [ebp+var_4], 2
		call	sub_6B19FE85
		lea	eax, [ebp+var_124]
		cmp	[ebp+Memory], eax
		jz	short loc_6B1A04E8
		push	[ebp+Memory]	; Memory
		call	ds:__imp_free
		pop	ecx

loc_6B1A04E8:				; CODE XREF: Ordinal1520+70j
					; DATA XREF: sub_6B1A051F+4Co ...
		lea	ecx, [ebp+var_148]
		call	Ordinal1635
		mov	ebx, eax
		neg	ebx
		sbb	bl, bl
		lea	ecx, [ebp+var_148]
		inc	bl
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal1520	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A051F	proc near		; DATA XREF: .rdata:6B1BCD98o
		push	13h
		lea	ecx, [ebp-148h]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-148h]
		call	Ordinal1101
		mov	ecx, [ebp-14Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-148h]
		call	Ordinal1103
		lea	ecx, [ebp-148h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A04E8
		retn
sub_6B1A051F	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A0571	proc near		; DATA XREF: .rdata:6B1BCDA8o
		push	15h
		lea	ecx, [ebp-148h]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-148h]
		call	Ordinal1101
		mov	eax, [ebp-150h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-148h]
		call	Ordinal1103
		lea	ecx, [ebp-148h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A04E8
		retn
sub_6B1A0571	endp

; Exported entry 1521.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1521(wchar_t *Src,	int)
		public Ordinal1521
Ordinal1521	proc near		; CODE XREF: Ordinal187+44p
					; Ordinal474+3Dp ...

var_44		= byte ptr -44h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_115	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 40h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCstringconv_12 ; "CStringConvert::Copy(LPCWSTR,	CStringW)"...
		lea	ecx, [ebp+var_44]
		mov	[ebp+var_14], eax
		call	Ordinal1089
		and	[ebp+var_4], 0
		push	[ebp+Src]	; Src
		mov	ecx, [ebp+arg_4]
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B19FE85

loc_6B1A0610:				; DATA XREF: sub_6B1A0641+3Do
					; sub_6B1A0684+4Fo
		lea	ecx, [ebp+var_44]
		call	Ordinal1635
		mov	ebx, eax
		neg	ebx
		sbb	bl, bl
		lea	ecx, [ebp+var_44]
		inc	bl
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal1521	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A0641	proc near		; DATA XREF: .rdata:6B1BCE00o
		push	13h
		lea	ecx, [ebp-44h]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-44h]
		call	Ordinal1101
		mov	ecx, [ebp-4Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal1103
		lea	ecx, [ebp-44h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A0610
		retn
sub_6B1A0641	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A0684	proc near		; DATA XREF: .rdata:6B1BCE10o
		push	15h
		lea	ecx, [ebp-44h]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-44h]
		call	Ordinal1101
		mov	eax, [ebp-48h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal1103
		lea	ecx, [ebp-44h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A0610
		retn
sub_6B1A0684	endp

; Exported entry 1522.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1522(LPCWSTR lpWideCharStr, int)
		public Ordinal1522
Ordinal1522	proc near		; CODE XREF: Ordinal473+3Dp
					; Ordinal499+36p ...

var_C8		= byte ptr -0C8h
Memory		= dword	ptr -0A8h
var_A4		= byte ptr -0A4h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
lpWideCharStr	= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_116	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 0C4h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCstringconv_13 ; "CStringConvert::Copy(LPCWSTR,	CStringA)"...
		lea	ecx, [ebp+var_C8]
		mov	[ebp+var_14], eax
		call	Ordinal1089
		and	[ebp+var_4], 0
		push	0		; CodePage
		push	[ebp+lpWideCharStr] ; lpWideCharStr
		lea	eax, [ebp+var_A4]
		lea	ecx, [ebp+Memory]
		mov	byte ptr [ebp+var_4], 1
		mov	[ebp+Memory], eax
		call	sub_6B1811AA
		push	[ebp+Memory]	; Src
		mov	ecx, [ebp+arg_4]
		mov	byte ptr [ebp+var_4], 2
		call	sub_6B181EA9
		lea	eax, [ebp+var_A4]
		cmp	[ebp+Memory], eax
		jz	short loc_6B1A0758
		push	[ebp+Memory]	; Memory
		call	ds:__imp_free
		pop	ecx

loc_6B1A0758:				; CODE XREF: Ordinal1522+70j
					; DATA XREF: sub_6B1A078F+4Co ...
		lea	ecx, [ebp+var_C8]
		call	Ordinal1635
		mov	ebx, eax
		neg	ebx
		sbb	bl, bl
		lea	ecx, [ebp+var_C8]
		inc	bl
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal1522	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A078F	proc near		; DATA XREF: .rdata:6B1BCE70o
		push	13h
		lea	ecx, [ebp-0C8h]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-0C8h]
		call	Ordinal1101
		mov	ecx, [ebp-0CCh]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-0C8h]
		call	Ordinal1103
		lea	ecx, [ebp-0C8h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A0758
		retn
sub_6B1A078F	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A07E1	proc near		; DATA XREF: .rdata:6B1BCE80o
		push	15h
		lea	ecx, [ebp-0C8h]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-0C8h]
		call	Ordinal1101
		mov	eax, [ebp-0D0h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-0C8h]
		call	Ordinal1103
		lea	ecx, [ebp-0C8h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A0758
		retn
sub_6B1A07E1	endp

; Exported entry 1533.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1533(int, char *Str)
		public Ordinal1533
Ordinal1533	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_44		= byte ptr -44h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Str		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_117	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 40h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCstringconv_14 ; "CStringConvert::Append(CStringA, LPCAST"...
		lea	ecx, [ebp+var_44]
		mov	[ebp+var_14], eax
		call	Ordinal1089
		and	[ebp+var_4], 0
		push	[ebp+Str]	; Str
		mov	ecx, [ebp+arg_0]
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B185AA4

loc_6B1A0880:				; DATA XREF: sub_6B1A08B1+3Do
					; sub_6B1A08F4+4Fo
		lea	ecx, [ebp+var_44]
		call	Ordinal1635
		mov	ebx, eax
		neg	ebx
		sbb	bl, bl
		lea	ecx, [ebp+var_44]
		inc	bl
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal1533	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A08B1	proc near		; DATA XREF: .rdata:6B1BCED8o
		push	13h
		lea	ecx, [ebp-44h]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-44h]
		call	Ordinal1101
		mov	ecx, [ebp-4Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal1103
		lea	ecx, [ebp-44h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A0880
		retn
sub_6B1A08B1	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A08F4	proc near		; DATA XREF: .rdata:6B1BCEE8o
		push	15h
		lea	ecx, [ebp-44h]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-44h]
		call	Ordinal1101
		mov	eax, [ebp-48h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal1103
		lea	ecx, [ebp-44h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A0880
		retn
sub_6B1A08F4	endp

; Exported entry 1534.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1534(int, wchar_t *Str)
		public Ordinal1534
Ordinal1534	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_44		= byte ptr -44h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Str		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_118	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 40h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCstringconv_15 ; "CStringConvert::Append(CStringW, LPCWST"...
		lea	ecx, [ebp+var_44]
		mov	[ebp+var_14], eax
		call	Ordinal1089
		and	[ebp+var_4], 0
		push	[ebp+Str]	; Str
		mov	ecx, [ebp+arg_0]
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B1A02C7

loc_6B1A0984:				; DATA XREF: sub_6B1A09B5+3Do
					; sub_6B1A09F8+4Fo
		lea	ecx, [ebp+var_44]
		call	Ordinal1635
		mov	ebx, eax
		neg	ebx
		sbb	bl, bl
		lea	ecx, [ebp+var_44]
		inc	bl
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal1534	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A09B5	proc near		; DATA XREF: .rdata:6B1BCF40o
		push	13h
		lea	ecx, [ebp-44h]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-44h]
		call	Ordinal1101
		mov	ecx, [ebp-4Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal1103
		lea	ecx, [ebp-44h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A0984
		retn
sub_6B1A09B5	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A09F8	proc near		; DATA XREF: .rdata:6B1BCF50o
		push	15h
		lea	ecx, [ebp-44h]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-44h]
		call	Ordinal1101
		mov	eax, [ebp-48h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal1103
		lea	ecx, [ebp-44h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A0984
		retn
sub_6B1A09F8	endp

; Exported entry 1539.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1539(int, char *Src, char *Format,	va_list	Args)
		public Ordinal1539
Ordinal1539	proc near		; CODE XREF: Ordinal1537+11p
					; DATA XREF: .rdata:off_6B1BF428o

var_48		= byte ptr -48h
var_28		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Src		= dword	ptr  0Ch
Format		= dword	ptr  10h
Args		= dword	ptr  14h

		mov	eax, offset unknown_libname_119	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCstringconv_16 ; "CStringConvert::FormatPathV(CStringA,	L"...
		lea	ecx, [ebp+var_48]
		mov	[ebp+var_14], eax
		call	Ordinal1089
		and	[ebp+var_4], 0
		lea	ecx, [ebp+var_28]
		call	sub_6B181879
		push	[ebp+Args]	; Args
		lea	ecx, [ebp+var_28]
		push	[ebp+Format]	; Format
		mov	byte ptr [ebp+var_4], 2
		call	sub_6B18F02F
		mov	esi, offset SubBlock ; "\\"
		push	esi		; unsigned __int8 *
		lea	ecx, [ebp+var_28]
		call	sub_6B18F07C
		mov	edi, [ebp+arg_0]
		push	[ebp+Src]	; Src
		mov	ecx, edi
		call	sub_6B181EA9
		push	esi		; unsigned __int8 *
		mov	ecx, edi
		call	sub_6B18EFCF
		push	esi		; Str
		mov	ecx, edi
		call	sub_6B185AA4
		mov	esi, [ebp+var_28]
		push	dword ptr [esi-0Ch] ; Size
		mov	ecx, edi
		push	esi		; int
		call	sub_6B185A58
		lea	ecx, [esi-10h]
		call	sub_6B18163D

loc_6B1A0AD4:				; DATA XREF: sub_6B1A0B05+3Do
					; sub_6B1A0B48+4Fo
		lea	ecx, [ebp+var_48]
		call	Ordinal1635
		mov	ebx, eax
		neg	ebx
		sbb	bl, bl
		lea	ecx, [ebp+var_48]
		inc	bl
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal1539	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A0B05	proc near		; DATA XREF: .rdata:6B1BCFB0o
		push	13h
		lea	ecx, [ebp-48h]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-48h]
		call	Ordinal1101
		mov	ecx, [ebp-50h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-48h]
		call	Ordinal1103
		lea	ecx, [ebp-48h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A0AD4
		retn
sub_6B1A0B05	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A0B48	proc near		; DATA XREF: .rdata:6B1BCFC0o
		push	15h
		lea	ecx, [ebp-48h]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-48h]
		call	Ordinal1101
		mov	eax, [ebp-4Ch]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-48h]
		call	Ordinal1103
		lea	ecx, [ebp-48h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A0AD4
		retn
sub_6B1A0B48	endp

; Exported entry 1540.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1540(int, wchar_t *Src, wchar_t *Count, va_list Format)
		public Ordinal1540
Ordinal1540	proc near		; CODE XREF: Ordinal1538+11p
					; DATA XREF: .rdata:off_6B1BF428o

var_48		= byte ptr -48h
var_28		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Src		= dword	ptr  0Ch
Count		= dword	ptr  10h
Format		= dword	ptr  14h

		mov	eax, offset unknown_libname_120	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCstringconv_17 ; "CStringConvert::FormatPathV(CStringW,	L"...
		lea	ecx, [ebp+var_48]
		mov	[ebp+var_14], eax
		call	Ordinal1089
		and	[ebp+var_4], 0
		lea	ecx, [ebp+var_28]
		call	sub_6B181879
		push	[ebp+Format]	; Format
		lea	ecx, [ebp+var_28]
		push	[ebp+Count]	; Count
		mov	byte ptr [ebp+var_4], 2
		call	sub_6B19FDC6
		mov	esi, offset Str	; "\\"
		push	esi		; Str
		lea	ecx, [ebp+var_28]
		call	sub_6B19FD0F
		mov	edi, [ebp+arg_0]
		push	[ebp+Src]	; Src
		mov	ecx, edi
		call	sub_6B19FE85
		push	esi		; Str
		mov	ecx, edi
		call	sub_6B19FCB2
		push	esi		; Str
		mov	ecx, edi
		call	sub_6B1A02C7
		mov	esi, [ebp+var_28]
		push	dword ptr [esi-0Ch]
		mov	ecx, edi
		push	esi
		call	sub_6B19FE13
		lea	ecx, [esi-10h]
		call	sub_6B18163D

loc_6B1A0C24:				; DATA XREF: sub_6B1A0C55+3Do
					; sub_6B1A0C98+4Fo
		lea	ecx, [ebp+var_48]
		call	Ordinal1635
		mov	ebx, eax
		neg	ebx
		sbb	bl, bl
		lea	ecx, [ebp+var_48]
		inc	bl
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal1540	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A0C55	proc near		; DATA XREF: .rdata:6B1BD020o
		push	13h
		lea	ecx, [ebp-48h]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-48h]
		call	Ordinal1101
		mov	ecx, [ebp-50h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-48h]
		call	Ordinal1103
		lea	ecx, [ebp-48h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A0C24
		retn
sub_6B1A0C55	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A0C98	proc near		; DATA XREF: .rdata:6B1BD030o
		push	15h
		lea	ecx, [ebp-48h]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-48h]
		call	Ordinal1101
		mov	eax, [ebp-4Ch]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-48h]
		call	Ordinal1103
		lea	ecx, [ebp-48h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A0C24
		retn
sub_6B1A0C98	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6B1A0CED(wchar_t *Src)
sub_6B1A0CED	proc near		; CODE XREF: Ordinal1536+36p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8

		mov	eax, offset unknown_libname_121	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		mov	eax, dword_6B1C1390
		push	esi
		mov	esi, ecx
		mov	ecx, offset dword_6B1C1390
		mov	[ebp+var_10], esi
		call	dword ptr [eax+0Ch]
		add	eax, 10h
		mov	[esi], eax
		push	[ebp+Src]
		and	[ebp+var_4], 0
		mov	ecx, esi
		call	sub_6B1A02ED
		test	al, al
		jnz	short loc_6B1A0D2C
		push	[ebp+Src]	; Src
		mov	ecx, esi
		call	sub_6B19FE85

loc_6B1A0D2C:				; CODE XREF: sub_6B1A0CED+33j
		mov	ecx, [ebp+var_C]
		mov	eax, esi
		pop	esi
		mov	large fs:0, ecx
		leave
		retn	4
sub_6B1A0CED	endp

; Exported entry 1535.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1535(int, char *Src)
		public Ordinal1535
Ordinal1535	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_48		= byte ptr -48h
var_28		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Src		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_122	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCstringconv_18 ; "CStringConvert::AppendPath(CStringA, LP"...
		lea	ecx, [ebp+var_48]
		mov	[ebp+var_14], eax
		call	Ordinal1089
		and	[ebp+var_4], 0
		push	[ebp+Src]	; Src
		lea	ecx, [ebp+var_28]
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B18281C
		mov	esi, offset SubBlock ; "\\"
		push	esi		; unsigned __int8 *
		lea	ecx, [ebp+var_28]
		mov	byte ptr [ebp+var_4], 2
		call	sub_6B18F07C
		mov	ecx, [ebp+arg_0]
		push	esi		; unsigned __int8 *
		call	sub_6B18EFCF
		mov	ecx, [ebp+arg_0]
		push	esi		; Str
		call	sub_6B185AA4
		mov	eax, [ebp+var_28]
		push	dword ptr [eax-0Ch] ; Size
		mov	ecx, [ebp+arg_0]
		push	eax		; int
		call	sub_6B185A58
		mov	ecx, [ebp+var_28]
		add	ecx, 0FFFFFFF0h
		call	sub_6B18163D

loc_6B1A0DB6:				; DATA XREF: sub_6B1A0DE7+3Do
					; sub_6B1A0E2A+4Fo
		lea	ecx, [ebp+var_48]
		call	Ordinal1635
		mov	ebx, eax
		neg	ebx
		sbb	bl, bl
		lea	ecx, [ebp+var_48]
		inc	bl
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal1535	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A0DE7	proc near		; DATA XREF: .rdata:6B1BD0B4o
		push	13h
		lea	ecx, [ebp-48h]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-48h]
		call	Ordinal1101
		mov	ecx, [ebp-50h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-48h]
		call	Ordinal1103
		lea	ecx, [ebp-48h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A0DB6
		retn
sub_6B1A0DE7	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A0E2A	proc near		; DATA XREF: .rdata:6B1BD0C4o
		push	15h
		lea	ecx, [ebp-48h]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-48h]
		call	Ordinal1101
		mov	eax, [ebp-4Ch]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-48h]
		call	Ordinal1103
		lea	ecx, [ebp-48h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A0DB6
		retn
sub_6B1A0E2A	endp

; Exported entry 1536.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1536(int, wchar_t *Src)
		public Ordinal1536
Ordinal1536	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_48		= byte ptr -48h
var_28		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Src		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_123	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCstringconv_19 ; "CStringConvert::AppendPath(CStringW, LP"...
		lea	ecx, [ebp+var_48]
		mov	[ebp+var_14], eax
		call	Ordinal1089
		and	[ebp+var_4], 0
		push	[ebp+Src]	; Src
		lea	ecx, [ebp+var_28]
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B1A0CED
		mov	esi, offset Str	; "\\"
		push	esi		; Str
		lea	ecx, [ebp+var_28]
		mov	byte ptr [ebp+var_4], 2
		call	sub_6B19FD0F
		mov	ecx, [ebp+arg_0]
		push	esi		; Str
		call	sub_6B19FCB2
		mov	ecx, [ebp+arg_0]
		push	esi		; Str
		call	sub_6B1A02C7
		mov	eax, [ebp+var_28]
		push	dword ptr [eax-0Ch]
		mov	ecx, [ebp+arg_0]
		push	eax
		call	sub_6B19FE13
		mov	ecx, [ebp+var_28]
		add	ecx, 0FFFFFFF0h
		call	sub_6B18163D

loc_6B1A0EF8:				; DATA XREF: sub_6B1A0F29+3Do
					; sub_6B1A0F6C+4Fo
		lea	ecx, [ebp+var_48]
		call	Ordinal1635
		mov	ebx, eax
		neg	ebx
		sbb	bl, bl
		lea	ecx, [ebp+var_48]
		inc	bl
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal1536	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A0F29	proc near		; DATA XREF: .rdata:6B1BD124o
		push	13h
		lea	ecx, [ebp-48h]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-48h]
		call	Ordinal1101
		mov	ecx, [ebp-50h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-48h]
		call	Ordinal1103
		lea	ecx, [ebp-48h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A0EF8
		retn
sub_6B1A0F29	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A0F6C	proc near		; DATA XREF: .rdata:6B1BD134o
		push	15h
		lea	ecx, [ebp-48h]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-48h]
		call	Ordinal1101
		mov	eax, [ebp-4Ch]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-48h]
		call	Ordinal1103
		lea	ecx, [ebp-48h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A0EF8
		retn
sub_6B1A0F6C	endp

; Exported entry 1537.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal1537(int, char *Src, char *Format,	char Args)
		public Ordinal1537
Ordinal1537	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
Src		= dword	ptr  8
Format		= dword	ptr  0Ch
Args		= byte ptr  10h

		lea	eax, [esp+Args]
		push	eax		; Args
		push	[esp+4+Format]	; Format
		push	[esp+8+Src]	; Src
		push	[esp+0Ch+arg_0]	; int
		call	Ordinal1539
		add	esp, 10h
		retn
Ordinal1537	endp

; Exported entry 1538.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal1538(int, wchar_t *Src, wchar_t *Count, char Format)
		public Ordinal1538
Ordinal1538	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
Src		= dword	ptr  8
Count		= dword	ptr  0Ch
Format		= byte ptr  10h

		lea	eax, [esp+Format]
		push	eax		; Format
		push	[esp+4+Count]	; Count
		push	[esp+8+Src]	; Src
		push	[esp+0Ch+arg_0]	; int
		call	Ordinal1540
		add	esp, 10h
		retn
Ordinal1538	endp

; Exported entry 1542.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1542
Ordinal1542	proc near		; CODE XREF: sub_6B1A1016+3p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+74h]
		mov	dword ptr [esi], offset	off_6B1B7B4C
		call	sub_6B1899B5
		lea	ecx, [esi+70h]
		call	sub_6B1899B5
		mov	ecx, esi
		pop	esi
		jmp	Ordinal712
Ordinal1542	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A1016(void *, char)
sub_6B1A1016	proc near		; DATA XREF: .rdata:off_6B1B7B4Co

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1542
		test	[esp+4+arg_0], 1
		jz	short loc_6B1A102C
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A102C:				; CODE XREF: sub_6B1A1016+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A1016	endp

; Exported entry 1545.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1545(int, int, int, char	*Format, va_list Args)
		public Ordinal1545
Ordinal1545	proc near		; CODE XREF: Ordinal1546+38p
					; Ordinal1547+15p ...

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= byte ptr -64h
SystemTime	= _SYSTEMTIME ptr -44h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Format		= dword	ptr  14h
Args		= dword	ptr  18h

		mov	eax, offset unknown_libname_124	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 60h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		mov	esi, ecx
		push	edi
		lea	ecx, [ebp+var_30]
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_34], esi
		call	sub_6B181879
		and	[ebp+var_4], 0
		push	offset aCstructuredlog ; "CStructuredLogFile::LogV"
		lea	ecx, [ebp+var_64]
		call	Ordinal1089
		lea	ecx, [ebp+var_2C]
		call	sub_6B181879
		push	[ebp+Args]	; Args
		lea	ecx, [ebp+var_2C]
		push	[ebp+Format]	; Format
		mov	byte ptr [ebp+var_4], 3
		call	sub_6B18F02F
		mov	eax, [esi]
		lea	ecx, [ebp+var_2C]
		push	ecx		; Args
		mov	ecx, esi
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6B1A10B1
		push	offset aCstructuredl_0 ; "CStructuredLogFile::LogV() : Filter()	="...
		call	sub_6B18102E
		pop	ecx
		mov	ecx, [ebp+var_2C]
		add	ecx, 0FFFFFFF0h
		call	sub_6B18163D

loc_6B1A10AA:				; CODE XREF: Ordinal1545+22Bj
		xor	esi, esi
		jmp	loc_6B1A1270
; ---------------------------------------------------------------------------

loc_6B1A10B1:				; CODE XREF: Ordinal1545+60j
		mov	eax, [ebp+arg_0]
		dec	eax
		jz	short loc_6B1A10FC
		dec	eax
		jz	short loc_6B1A10F3
		dec	eax
		jz	short loc_6B1A10EA
		dec	eax
		jz	short loc_6B1A10E1
		dec	eax
		jz	short loc_6B1A10D8
		dec	eax
		jz	short loc_6B1A10CF
		mov	[ebp+var_28], offset aUnknown ;	"Unknown"
		jmp	short loc_6B1A1103
; ---------------------------------------------------------------------------

loc_6B1A10CF:				; CODE XREF: Ordinal1545+92j
		mov	[ebp+var_28], offset aDebug ; "Debug"
		jmp	short loc_6B1A1103
; ---------------------------------------------------------------------------

loc_6B1A10D8:				; CODE XREF: Ordinal1545+8Fj
		mov	[ebp+var_28], offset aAuditfailure ; "AuditFailure"
		jmp	short loc_6B1A1103
; ---------------------------------------------------------------------------

loc_6B1A10E1:				; CODE XREF: Ordinal1545+8Cj
		mov	[ebp+var_28], offset aAuditsuccess ; "AuditSuccess"
		jmp	short loc_6B1A1103
; ---------------------------------------------------------------------------

loc_6B1A10EA:				; CODE XREF: Ordinal1545+89j
		mov	[ebp+var_28], offset aError ; "Error"
		jmp	short loc_6B1A1103
; ---------------------------------------------------------------------------

loc_6B1A10F3:				; CODE XREF: Ordinal1545+86j
		mov	[ebp+var_28], offset aWarning ;	"Warning"
		jmp	short loc_6B1A1103
; ---------------------------------------------------------------------------

loc_6B1A10FC:				; CODE XREF: Ordinal1545+83j
		mov	[ebp+var_28], offset aInformation ; "Information"

loc_6B1A1103:				; CODE XREF: Ordinal1545+9Bj
					; Ordinal1545+A4j ...
		lea	ecx, [ebp+Format]
		call	sub_6B181879
		lea	ecx, [ebp+Args]
		call	sub_6B181879
		lea	eax, [ebp+SystemTime]
		push	eax		; lpSystemTime
		mov	byte ptr [ebp+var_4], 5
		call	ds:GetLocalTime
		movzx	eax, [ebp+SystemTime.wDay]
		push	eax
		movzx	eax, [ebp+SystemTime.wMonth]
		push	eax
		movzx	eax, [ebp+SystemTime.wYear]
		push	eax		; Args
		lea	eax, [ebp+Format]
		push	offset a04d02d02d ; "%04d-%02d-%02d"
		push	eax		; int
		call	sub_6B18F0EE
		movzx	eax, [ebp+SystemTime.wMilliseconds]
		add	esp, 14h
		push	eax
		movzx	eax, [ebp+SystemTime.wSecond]
		push	eax
		movzx	eax, [ebp+SystemTime.wMinute]
		push	eax
		movzx	eax, [ebp+SystemTime.wHour]
		push	eax		; Args
		lea	eax, [ebp+Args]
		push	offset a02d02d02d03d ; "%02d:%02d:%02d:%03d"
		push	eax		; int
		call	sub_6B18F0EE
		mov	ecx, [esi+74h]
		mov	eax, [esi+70h]
		add	esp, 18h
		mov	edi, [ebp+Args]
		push	ecx
		push	[ebp+var_2C]
		mov	ebx, [ebp+Format]
		push	ecx
		push	eax
		push	[ebp+arg_8]
		push	eax
		push	[ebp+arg_4]
		push	eax
		push	edi
		push	eax
		push	ebx
		push	eax
		push	[ebp+var_28]	; Args
		lea	eax, [ebp+var_30]
		push	offset aSSSSSSSSSSSSS ;	"%s%s%s%s%s%s%s%s%s%s%s%s%s\r\n"
		push	eax		; int
		call	sub_6B18F0EE
		add	esp, 3Ch
		lea	ecx, [edi-10h]
		call	sub_6B18163D
		lea	ecx, [ebx-10h]
		call	sub_6B18163D
		mov	ecx, [ebp+var_2C]
		add	ecx, 0FFFFFFF0h
		call	sub_6B18163D
		jmp	loc_6B1A1253
; ---------------------------------------------------------------------------

loc_6B1A11B8:				; DATA XREF: .rdata:6B1BD1ACo
		push	13h
		lea	ecx, [ebp+var_64]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_64]
		call	Ordinal1101
		mov	ecx, [ebp+var_68]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_64]
		call	Ordinal1103
		lea	ecx, [ebp+var_64]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A1250
		retn
; ---------------------------------------------------------------------------

loc_6B1A11FB:				; DATA XREF: .rdata:6B1BD1BCo
		push	15h
		lea	ecx, [ebp+var_64]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_64]
		call	Ordinal1101
		mov	eax, [ebp+var_6C]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_64]
		call	Ordinal1103
		lea	ecx, [ebp+var_64]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A1250
		retn
; ---------------------------------------------------------------------------

loc_6B1A1250:				; DATA XREF: Ordinal1545+1C3o
					; Ordinal1545+218o
		mov	esi, [ebp+var_34]

loc_6B1A1253:				; CODE XREF: Ordinal1545+181j
		lea	ecx, [ebp+var_64]
		call	Ordinal1635
		test	eax, eax
		jnz	loc_6B1A10AA
		lea	eax, [ebp+var_30]
		push	eax
		mov	ecx, esi
		call	Ordinal736
		mov	esi, eax

loc_6B1A1270:				; CODE XREF: Ordinal1545+7Aj
		lea	ecx, [ebp+var_64]
		call	Ordinal1090
		mov	ecx, [ebp+var_30]
		add	ecx, 0FFFFFFF0h
		call	sub_6B18163D
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	14h
Ordinal1545	endp ; sp-analysis failed

; Exported entry 1546.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1546(int, int, int, char	*Format, va_list Args)
		public Ordinal1546
Ordinal1546	proc near		; CODE XREF: Ordinal1548+15p
					; Ordinal1550+15p ...

var_14		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Format		= dword	ptr  14h
Args		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, ___security_cookie
		push	esi
		push	[ebp+arg_8]
		mov	[ebp+var_4], eax
		lea	eax, [ebp+var_14]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		mov	esi, ecx
		call	ds:wsprintfA
		add	esp, 0Ch
		push	[ebp+Args]	; Args
		lea	eax, [ebp+var_14]
		push	[ebp+Format]	; Format
		mov	ecx, esi
		push	eax		; int
		push	[ebp+arg_4]	; int
		push	[ebp+arg_0]	; int
		call	Ordinal1545
		mov	ecx, [ebp+var_4]
		pop	esi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn	14h
Ordinal1546	endp

; Exported entry 1547.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1547(int, int, int, char *Format, char Args)
		public Ordinal1547
Ordinal1547	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Format		= dword	ptr  14h
Args		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+Args]
		push	eax		; Args
		push	[ebp+Format]	; Format
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		push	1		; int
		call	Ordinal1545
		pop	ebp
		retn
Ordinal1547	endp

; Exported entry 1548.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1548(int, int, int, char *Format, char Args)
		public Ordinal1548
Ordinal1548	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Format		= dword	ptr  14h
Args		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+Args]
		push	eax		; Args
		push	[ebp+Format]	; Format
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		push	1		; int
		call	Ordinal1546
		pop	ebp
		retn
Ordinal1548	endp

; Exported entry 1549.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1549(int, int, int, char *Format, char Args)
		public Ordinal1549
Ordinal1549	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Format		= dword	ptr  14h
Args		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+Args]
		push	eax		; Args
		push	[ebp+Format]	; Format
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		push	2		; int
		call	Ordinal1545
		pop	ebp
		retn
Ordinal1549	endp

; Exported entry 1550.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1550(int, int, int, char *Format, char Args)
		public Ordinal1550
Ordinal1550	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Format		= dword	ptr  14h
Args		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+Args]
		push	eax		; Args
		push	[ebp+Format]	; Format
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		push	2		; int
		call	Ordinal1546
		pop	ebp
		retn
Ordinal1550	endp

; Exported entry 1551.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1551(int, int, int, char *Format, char Args)
		public Ordinal1551
Ordinal1551	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Format		= dword	ptr  14h
Args		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+Args]
		push	eax		; Args
		push	[ebp+Format]	; Format
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		push	3		; int
		call	Ordinal1545
		pop	ebp
		retn
Ordinal1551	endp

; Exported entry 1552.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1552(int, int, int, char *Format, char Args)
		public Ordinal1552
Ordinal1552	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Format		= dword	ptr  14h
Args		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+Args]
		push	eax		; Args
		push	[ebp+Format]	; Format
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		push	3		; int
		call	Ordinal1546
		pop	ebp
		retn
Ordinal1552	endp

; Exported entry 1553.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1553(int, int, int, char *Format, char Args)
		public Ordinal1553
Ordinal1553	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Format		= dword	ptr  14h
Args		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+Args]
		push	eax		; Args
		push	[ebp+Format]	; Format
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		push	4		; int
		call	Ordinal1545
		pop	ebp
		retn
Ordinal1553	endp

; Exported entry 1554.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1554(int, int, int, char *Format, char Args)
		public Ordinal1554
Ordinal1554	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Format		= dword	ptr  14h
Args		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+Args]
		push	eax		; Args
		push	[ebp+Format]	; Format
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		push	4		; int
		call	Ordinal1546
		pop	ebp
		retn
Ordinal1554	endp

; Exported entry 1555.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1555(int, int, int, char *Format, char Args)
		public Ordinal1555
Ordinal1555	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Format		= dword	ptr  14h
Args		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+Args]
		push	eax		; Args
		push	[ebp+Format]	; Format
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		push	5		; int
		call	Ordinal1545
		pop	ebp
		retn
Ordinal1555	endp

; Exported entry 1556.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1556(int, int, int, char *Format, char Args)
		public Ordinal1556
Ordinal1556	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Format		= dword	ptr  14h
Args		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+Args]
		push	eax		; Args
		push	[ebp+Format]	; Format
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		push	5		; int
		call	Ordinal1546
		pop	ebp
		retn
Ordinal1556	endp

; Exported entry 1557.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1557(int, int, int, char *Format, char Args)
		public Ordinal1557
Ordinal1557	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Format		= dword	ptr  14h
Args		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+Args]
		push	eax		; Args
		push	[ebp+Format]	; Format
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		push	6		; int
		call	Ordinal1545
		pop	ebp
		retn
Ordinal1557	endp

; Exported entry 1558.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1558(int, int, int, char *Format, char Args)
		public Ordinal1558
Ordinal1558	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Format		= dword	ptr  14h
Args		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+Args]
		push	eax		; Args
		push	[ebp+Format]	; Format
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		push	6		; int
		call	Ordinal1546
		pop	ebp
		retn
Ordinal1558	endp

; Exported entry 1543.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1543(int, int, int, int, char *Format, char Args)
		public Ordinal1543
Ordinal1543	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
Format		= dword	ptr  18h
Args		= byte ptr  1Ch

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+Args]
		push	eax		; Args
		push	[ebp+Format]	; Format
		push	[ebp+arg_C]	; int
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		call	Ordinal1545
		pop	ebp
		retn
Ordinal1543	endp

; Exported entry 1544.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1544(int, int, int, int, char *Format, char Args)
		public Ordinal1544
Ordinal1544	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
Format		= dword	ptr  18h
Args		= byte ptr  1Ch

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+Args]
		push	eax		; Args
		push	[ebp+Format]	; Format
		push	[ebp+arg_C]	; int
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		call	Ordinal1546
		pop	ebp
		retn
Ordinal1544	endp

; Exported entry 1541.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1541
Ordinal1541	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	Ordinal711
		push	offset asc_6B1B7C10 ; ", "
		lea	ecx, [esi+70h]
		mov	dword ptr [esi], offset	off_6B1B7B4C
		call	sub_6B18281C
		push	offset asc_6B1B7C0C ; "\""
		lea	ecx, [esi+74h]
		call	sub_6B18281C
		mov	eax, esi
		pop	esi
		retn
Ordinal1541	endp

; Exported entry 1561.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1561
Ordinal1561	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		xor	eax, eax
		push	eax		; int
		push	eax		; lpString2
		push	eax		; bInitialState
		push	1		; bManualReset
		push	eax		; lpEventAttributes
		mov	esi, ecx
		call	Ordinal1651
		mov	dword ptr [esi], offset	off_6B1B7C14
		mov	eax, esi
		pop	esi
		retn
Ordinal1561	endp

; Exported entry 1564.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1564
Ordinal1564	proc near		; CODE XREF: sub_6B1A14CD+3p
					; Ordinal1735+3Bj ...
		mov	dword ptr [ecx], offset	off_6B1B7C14
		jmp	Ordinal1652
Ordinal1564	endp

; Exported entry 1568.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1568
Ordinal1568	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx]
		jmp	dword ptr [eax+0Ch]
Ordinal1568	endp

; Exported entry 1569.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1569
Ordinal1569	proc near		; DATA XREF: .rdata:off_6B1BF428o
		jmp	Ordinal1657
Ordinal1569	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A14CD(void *, char)
sub_6B1A14CD	proc near		; DATA XREF: .rdata:off_6B1B7C14o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1564
		test	[esp+4+arg_0], 1
		jz	short loc_6B1A14E3
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A14E3:				; CODE XREF: sub_6B1A14CD+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A14CD	endp

; Exported entry 1566.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1566
Ordinal1566	proc near		; CODE XREF: Ordinal1559+12p
					; Ordinal1560+Bp ...

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		call	Ordinal1657
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1566	endp

; Exported entry 1567.
; Exported entry 1570.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1567
Ordinal1567	proc near		; CODE XREF: Ordinal1748+3j
					; DATA XREF: .rdata:off_6B1BF428o
		jmp	Ordinal1658	; ccL35_1567
Ordinal1567	endp

; Exported entry 1559.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1559
Ordinal1559	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	ecx, [esp+4+arg_0]
		push	1
		mov	dword ptr [esi], offset	off_6B1B7C24
		mov	[esi+4], ecx
		call	Ordinal1566
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1559	endp

; Exported entry 1560.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1560
Ordinal1560	proc near		; CODE XREF: sub_6B1A1573+3p
					; DATA XREF: .rdata:off_6B1BF428o
		mov	dword ptr [ecx], offset	off_6B1B7C24
		mov	ecx, [ecx+4]
		push	0
		call	Ordinal1566
		retn
Ordinal1560	endp

; Exported entry 1563.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1563
Ordinal1563	proc near		; CODE XREF: Ordinal1734+Ep
					; Ordinal1761+26p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	esi
		xor	eax, eax
		push	eax		; int
		push	eax		; lpString2
		push	eax		; bInitialState
		push	1		; bManualReset
		push	eax		; lpEventAttributes
		mov	esi, ecx
		call	Ordinal1651
		push	[esp+4+arg_0]
		mov	ecx, esi
		mov	dword ptr [esi], offset	off_6B1B7C14
		call	Ordinal1566
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1563	endp

; Exported entry 1565.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1565
Ordinal1565	proc near		; CODE XREF: Ordinal1562+1Cp
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	ecx, [esp+4+arg_0]
		cmp	esi, ecx
		jz	short loc_6B1A156D
		call	Ordinal1658
		push	eax
		mov	ecx, esi
		call	Ordinal1657

loc_6B1A156D:				; CODE XREF: Ordinal1565+9j
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1565	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A1573(void *, char)
sub_6B1A1573	proc near		; DATA XREF: .rdata:off_6B1B7C24o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1560
		test	[esp+4+arg_0], 1
		jz	short loc_6B1A1589
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A1589:				; CODE XREF: sub_6B1A1573+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A1573	endp

; Exported entry 1562.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1562
Ordinal1562	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		xor	eax, eax
		push	eax		; int
		push	eax		; lpString2
		push	eax		; bInitialState
		push	1		; bManualReset
		push	eax		; lpEventAttributes
		mov	esi, ecx
		call	Ordinal1651
		push	[esp+4+arg_0]
		mov	ecx, esi
		mov	dword ptr [esi], offset	off_6B1B7C14
		call	Ordinal1565
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1562	endp

; Exported entry 1572.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1572
Ordinal1572	proc near		; CODE XREF: Ordinal134+13p
					; Ordinal133+16p ...

arg_0		= dword	ptr  4

		mov	eax, ecx
		mov	ecx, [esp+arg_0]
		and	dword ptr [eax+8], 0
		mov	dword ptr [eax], offset	off_6B1B7C2C
		mov	[eax+4], ecx
		retn	4
Ordinal1572	endp

; Exported entry 1574.
; Exported entry 1595.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1595
Ordinal1595	proc near		; CODE XREF: Ordinal1571+1Cp
					; Ordinal1592+1Cp
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi		; ccL35_1574
		push	[esp+4+arg_4]
		mov	esi, ecx
		mov	ecx, [esi+4]
		push	[esp+8+arg_0]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		mov	[esi+8], eax
		pop	esi
		retn	8
Ordinal1595	endp

; Exported entry 1580.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1580
Ordinal1580	proc near		; CODE XREF: Ordinal1578+11p
					; Ordinal1577+12p
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	esi
		push	edi
		mov	esi, ecx
		mov	edi, 100h
		push	edi		; Size
		mov	[esi+8], eax
		lea	eax, [esi+10Ch]
		push	0		; Val
		push	eax		; Dst
		mov	[esi+4], ebx
		call	memset
		push	edi		; Size
		xor	edi, edi
		add	esi, 0Ch
		push	edi		; Val
		push	esi		; Dst
		call	memset
		add	esp, 18h
		cmp	[esp+0Ch+arg_0], edi
		jbe	short loc_6B1A1637

loc_6B1A1623:				; CODE XREF: Ordinal1580+4Fj
		mov	ecx, [ebx+edi*4]
		mov	eax, [ecx]
		call	dword ptr [eax+0Ch]
		mov	[esi], eax
		inc	edi
		add	esi, 4
		cmp	edi, [esp+0Ch+arg_0]
		jb	short loc_6B1A1623

loc_6B1A1637:				; CODE XREF: Ordinal1580+3Bj
		pop	edi
		pop	esi
		pop	ebx
		retn	8
Ordinal1580	endp

; Exported entry 1582.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1582
Ordinal1582	proc near		; CODE XREF: Ordinal1579+6j
					; sub_6B1A1A69+9p
					; DATA XREF: ...
		push	ebp
		push	esi
		xor	ebp, ebp
		push	edi
		mov	esi, ecx
		xor	edi, edi
		inc	ebp
		cmp	[esi+8], edi
		jbe	short loc_6B1A1678
		push	ebx
		lea	ebx, [esi+10Ch]

loc_6B1A1653:				; CODE XREF: Ordinal1582+38j
		cmp	dword ptr [ebx], 0
		jz	short loc_6B1A166E
		mov	eax, [esi+4]
		mov	ecx, [eax+edi*4]
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		neg	eax
		sbb	eax, eax
		inc	eax
		mov	[ebx], eax
		jz	short loc_6B1A166E
		xor	ebp, ebp

loc_6B1A166E:				; CODE XREF: Ordinal1582+19j
					; Ordinal1582+2Dj
		inc	edi
		add	ebx, 4
		cmp	edi, [esi+8]
		jb	short loc_6B1A1653
		pop	ebx

loc_6B1A1678:				; CODE XREF: Ordinal1582+Dj
		pop	edi
		pop	esi
		mov	eax, ebp
		pop	ebp
		retn
Ordinal1582	endp

; Exported entry 1583.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1583
Ordinal1583	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [ecx+eax*4+10Ch]
		retn	4
Ordinal1583	endp

; Exported entry 1584.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1584
Ordinal1584	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, ecx
		mov	dword ptr [eax], offset	off_6B1B7C30
		retn
Ordinal1584	endp

; Exported entry 1585.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1585
Ordinal1585	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	dword ptr [ecx], offset	off_6B1B7C30
		retn
Ordinal1585	endp

; Exported entry 1586.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1586
Ordinal1586	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		push	edi
		xor	edi, edi
		push	edi		; int
		push	edi		; lpString2
		push	1		; lMaximumCount
		mov	esi, ecx
		push	1		; lInitialCount
		push	edi		; lpSemaphoreAttributes
		lea	ecx, [esi+4]
		mov	dword ptr [esi], offset	off_6B1B7C44
		call	Ordinal1628
		push	edi		; int
		push	edi		; lpString2
		push	edi		; bInitialOwner
		push	edi		; lpMutexAttributes
		lea	ecx, [esi+0Ch]
		call	Ordinal1640
		mov	[esi+14h], edi
		pop	edi
		mov	eax, esi
		pop	esi
		retn
Ordinal1586	endp

; Exported entry 1587.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1587
Ordinal1587	proc near		; CODE XREF: sub_6B1A18D7+3p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+0Ch]
		mov	dword ptr [esi], offset	off_6B1B7C44
		call	Ordinal1641
		lea	ecx, [esi+4]
		call	Ordinal1629
		mov	dword ptr [esi], offset	off_6B1B7C30
		pop	esi
		retn
Ordinal1587	endp

; Exported entry 1590.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1590
Ordinal1590	proc near		; DATA XREF: .rdata:6B1B7C50o
					; .rdata:off_6B1BF428o
		add	ecx, 4
		mov	eax, [ecx]
		jmp	dword ptr [eax+4]
Ordinal1590	endp

; Exported entry 1591.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1591
Ordinal1591	proc near		; DATA XREF: .rdata:6B1B7C54o
					; .rdata:off_6B1BF428o
		add	ecx, 4
		mov	eax, [ecx]
		jmp	dword ptr [eax+8]
Ordinal1591	endp

; Exported entry 1593.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1593
Ordinal1593	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, ecx
		mov	ecx, [esp+arg_0]
		and	dword ptr [eax+8], 0
		mov	dword ptr [eax], offset	off_6B1B7C58
		mov	[eax+4], ecx
		retn	4
Ordinal1593	endp

; Exported entry 1575.
; Exported entry 1596.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1596
Ordinal1596	proc near		; CODE XREF: Ordinal1573+6j
					; Ordinal1588+4Bp ...
		push	esi		; ccL35_1575
		mov	esi, ecx
		cmp	dword ptr [esi+8], 0
		jz	short loc_6B1A172B
		mov	ecx, [esi+4]
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		neg	eax
		sbb	eax, eax
		inc	eax
		mov	[esi+8], eax

loc_6B1A172B:				; CODE XREF: Ordinal1596+7j
		xor	eax, eax
		cmp	[esi+8], eax
		pop	esi
		setz	al
		retn
Ordinal1596	endp

; Exported entry 1599.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1599
Ordinal1599	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, ecx
		mov	ecx, [esp+arg_0]
		and	dword ptr [eax+8], 0
		mov	dword ptr [eax], offset	off_6B1B7C5C
		mov	[eax+4], ecx
		retn	4
Ordinal1599	endp

; Exported entry 1601.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1601
Ordinal1601	proc near		; CODE XREF: Ordinal1598+1Cp
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	[esp+4+arg_4]
		mov	esi, ecx
		mov	ecx, [esi+4]
		push	[esp+8+arg_0]
		mov	eax, [ecx]
		call	dword ptr [eax+0Ch]
		mov	[esi+8], eax
		pop	esi
		retn	8
Ordinal1601	endp

; Exported entry 1602.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1602
Ordinal1602	proc near		; CODE XREF: Ordinal1600+6j
					; sub_6B1A1AAD+9p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+8], 0
		jz	short loc_6B1A177E
		mov	ecx, [esi+4]
		mov	eax, [ecx]
		call	dword ptr [eax+10h]
		neg	eax
		sbb	eax, eax
		inc	eax
		mov	[esi+8], eax

loc_6B1A177E:				; CODE XREF: Ordinal1602+7j
		xor	eax, eax
		cmp	[esi+8], eax
		pop	esi
		setz	al
		retn
Ordinal1602	endp

; Exported entry 1604.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1604
Ordinal1604	proc near		; CODE XREF: Ordinal836+2Dp
					; Ordinal1636+26p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, ecx
		mov	ecx, [esp+arg_0]
		mov	[eax+4], ecx
		mov	ecx, [esp+arg_4]
		mov	dword ptr [eax], offset	off_6B1B7C60
		mov	[eax+8], ecx
		retn	8
Ordinal1604	endp

; Exported entry 1605.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1605
Ordinal1605	proc near		; CODE XREF: Ordinal836+61p
					; Ordinal1636+43p ...
		mov	dword ptr [ecx], offset	off_6B1B7C60
		retn
Ordinal1605	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A17A8	proc near		; CODE XREF: sub_6B191214+3Dp
					; sub_6B191214:loc_6B191268p ...
		mov	edx, [ecx+4]
		test	edx, edx
		jnz	short loc_6B1A17B2
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6B1A17B2:				; CODE XREF: sub_6B1A17A8+5j
		mov	eax, [ecx+8]
		sub	eax, edx
		sar	eax, 2
		retn
sub_6B1A17A8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_6B1A17BB	proc near		; CODE XREF: sub_6B1A1B61+36p
					; sub_6B1A1D35+1Ep

var_50		= dword	ptr -50h
var_28		= byte ptr -28h
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_125	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		push	offset aVectorTTooLong ; "vector<T> too	long"
		lea	ecx, [ebp+var_28]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_28]
		push	eax
		lea	ecx, [ebp+var_50]
		call	sub_6B181357
		push	offset dword_6B1BA9E8
		lea	eax, [ebp+var_50]
		push	eax
		mov	[ebp+var_50], offset off_6B1AA914
		call	_CxxThrowException
sub_6B1A17BB	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_6B1A17FC	proc near		; CODE XREF: sub_6B1A1ACF+12p

var_50		= dword	ptr -50h
var_28		= byte ptr -28h
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_125	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		push	offset aInvalidVectorT ; "invalid vector<T> subscript"
		lea	ecx, [ebp+var_28]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_28]
		push	eax
		lea	ecx, [ebp+var_50]
		call	sub_6B181357
		push	offset dword_6B1BAA6C
		lea	eax, [ebp+var_50]
		push	eax
		mov	[ebp+var_50], offset off_6B1AA91C
		call	_CxxThrowException
sub_6B1A17FC	endp

; ---------------------------------------------------------------------------
		db 0CCh

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6B1A183D(void	*Src, int, int)
sub_6B1A183D	proc near		; CODE XREF: sub_6B1A1A2D+10p

Src		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_4]
		sub	eax, [esp+Src]
		mov	ecx, [esp+arg_8]
		sar	eax, 2
		shl	eax, 2
		push	eax		; Size
		push	[esp+4+Src]	; Src
		sub	ecx, eax
		push	ecx		; Dst
		call	ds:memmove
		add	esp, 0Ch
		retn
sub_6B1A183D	endp

; Exported entry 1571.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1571
Ordinal1571	proc near		; CODE XREF: Ordinal159+15p
					; Ordinal160+15p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		push	esi
		push	[esp+4+arg_8]
		mov	esi, ecx
		push	[esp+8+arg_4]
		and	dword ptr [esi+8], 0
		mov	dword ptr [esi], offset	off_6B1B7C2C
		mov	[esi+4], eax
		call	Ordinal1595
		mov	eax, esi
		pop	esi
		retn	0Ch
Ordinal1571	endp

; Exported entry 1573.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1573
Ordinal1573	proc near		; CODE XREF: Ordinal134+26p
					; Ordinal133+74p ...
		mov	dword ptr [ecx], offset	off_6B1B7C2C
		jmp	Ordinal1596
Ordinal1573	endp

; Exported entry 1578.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1578
Ordinal1578	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	[esp+4+arg_4]
		mov	esi, ecx
		push	[esp+8+arg_0]
		mov	dword ptr [esi], offset	off_6B1B7C80
		call	Ordinal1580
		mov	eax, esi
		pop	esi
		retn	8
Ordinal1578	endp

; Exported entry 1579.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1579
Ordinal1579	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	dword ptr [ecx], offset	off_6B1B7C80
		jmp	Ordinal1582
Ordinal1579	endp

; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_7. PRESS KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A18D7(void *, char)
sub_6B1A18D7	proc near		; DATA XREF: .rdata:off_6B1B7C44o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1587
		test	[esp+4+arg_0], 1
		jz	short loc_6B1A18ED
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A18ED:				; CODE XREF: sub_6B1A18D7+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A18D7	endp

; Exported entry 1588.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1588
Ordinal1588	proc near		; DATA XREF: .rdata:6B1B7C48o
					; .rdata:off_6B1BF428o

var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	[ebp+arg_4]
		mov	esi, ecx
		push	0FFFFFFFFh
		lea	eax, [esi+0Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		inc	dword ptr [esi+14h]
		mov	eax, [esi+14h]
		cmp	eax, 1
		jnz	short loc_6B1A1931
		push	[ebp+arg_4]
		lea	ecx, [esi+4]
		push	[ebp+arg_0]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6B1A1931
		dec	dword ptr [esi+14h]
		xor	esi, esi
		jmp	short loc_6B1A1934
; ---------------------------------------------------------------------------

loc_6B1A1931:				; CODE XREF: Ordinal1588+23j
					; Ordinal1588+35j
		xor	esi, esi
		inc	esi

loc_6B1A1934:				; CODE XREF: Ordinal1588+3Cj
		lea	ecx, [ebp+var_C]
		mov	[ebp+var_C], offset off_6B1B7C2C
		call	Ordinal1596
		mov	eax, esi
		pop	esi
		leave
		retn	8
Ordinal1588	endp

; Exported entry 1589.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1589
Ordinal1589	proc near		; DATA XREF: .rdata:6B1B7C4Co
					; .rdata:off_6B1BF428o

var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+0Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		dec	dword ptr [esi+14h]
		jnz	short loc_6B1A197B
		lea	ecx, [esi+4]
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		test	eax, eax
		jnz	short loc_6B1A197B
		inc	dword ptr [esi+14h]
		xor	esi, esi
		jmp	short loc_6B1A197E
; ---------------------------------------------------------------------------

loc_6B1A197B:				; CODE XREF: Ordinal1589+1Cj
					; Ordinal1589+28j
		xor	esi, esi
		inc	esi

loc_6B1A197E:				; CODE XREF: Ordinal1589+2Fj
		lea	ecx, [ebp+var_C]
		mov	[ebp+var_C], offset off_6B1B7C2C
		call	Ordinal1596
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal1589	endp

; Exported entry 1592.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1592
Ordinal1592	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		push	esi
		push	[esp+4+arg_8]
		mov	esi, ecx
		push	[esp+8+arg_4]
		and	dword ptr [esi+8], 0
		mov	dword ptr [esi], offset	off_6B1B7C58
		mov	[esi+4], eax
		call	Ordinal1595
		mov	eax, esi
		pop	esi
		retn	0Ch
Ordinal1592	endp

; Exported entry 1594.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1594
Ordinal1594	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	dword ptr [ecx], offset	off_6B1B7C58
		jmp	Ordinal1596
Ordinal1594	endp

; Exported entry 1598.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1598
Ordinal1598	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		push	esi
		push	[esp+4+arg_8]
		mov	esi, ecx
		push	[esp+8+arg_4]
		and	dword ptr [esi+8], 0
		mov	dword ptr [esi], offset	off_6B1B7C5C
		mov	[esi+4], eax
		call	Ordinal1601
		mov	eax, esi
		pop	esi
		retn	0Ch
Ordinal1598	endp

; Exported entry 1600.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1600
Ordinal1600	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	dword ptr [ecx], offset	off_6B1B7C5C
		jmp	Ordinal1602
Ordinal1600	endp

; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_8. PRESS KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_6B1A1A13(void	*Src, int, void	*Dst)
sub_6B1A1A13	proc near		; CODE XREF: sub_6B1A1B3A+10p

var_4		= dword	ptr -4
Src		= dword	ptr  8
arg_4		= dword	ptr  0Ch
Dst		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+var_4]
		push	[ebp+Dst]	; Dst
		push	[ebp+arg_4]	; int
		push	[ebp+Src]	; Src
		call	sub_6B18371F
		add	esp, 10h
		leave
		retn
sub_6B1A1A13	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_6B1A1A2D(void	*Src, int, int)
sub_6B1A1A2D	proc near		; CODE XREF: sub_6B1A1B61+15Bp
					; sub_6B1A6467+15Bp

var_4		= dword	ptr -4
Src		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+var_4]
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		push	[ebp+Src]	; Src
		call	sub_6B1A183D
		add	esp, 10h
		leave
		retn
sub_6B1A1A2D	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A1A47(void *, char)
sub_6B1A1A47	proc near		; DATA XREF: .rdata:off_6B1B7C2Co

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1B7C2C
		call	Ordinal1596
		test	[esp+4+arg_0], 1
		jz	short loc_6B1A1A63
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A1A63:				; CODE XREF: sub_6B1A1A47+13j
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A1A47	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A1A69(void *, char)
sub_6B1A1A69	proc near		; DATA XREF: .rdata:off_6B1B7C80o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1B7C80
		call	Ordinal1582
		test	[esp+4+arg_0], 1
		jz	short loc_6B1A1A85
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A1A85:				; CODE XREF: sub_6B1A1A69+13j
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A1A69	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A1A8B(void *, char)
sub_6B1A1A8B	proc near		; DATA XREF: .rdata:off_6B1B7C58o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1B7C58
		call	Ordinal1596
		test	[esp+4+arg_0], 1
		jz	short loc_6B1A1AA7
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A1AA7:				; CODE XREF: sub_6B1A1A8B+13j
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A1A8B	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A1AAD(void *, char)
sub_6B1A1AAD	proc near		; DATA XREF: .rdata:off_6B1B7C5Co

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1B7C5C
		call	Ordinal1602
		test	[esp+4+arg_0], 1
		jz	short loc_6B1A1AC9
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A1AC9:				; CODE XREF: sub_6B1A1AAD+13j
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A1AAD	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A1ACF	proc near		; CODE XREF: Ordinal1609+13Bp
					; Ordinal1609+36Ep

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	sub_6B1A17A8
		mov	ecx, [esp+4+arg_0]
		cmp	eax, ecx
		ja	short loc_6B1A1AE6
		mov	ecx, esi
		call	sub_6B1A17FC
; ---------------------------------------------------------------------------

loc_6B1A1AE6:				; CODE XREF: sub_6B1A1ACF+Ej
		mov	eax, [esi+4]
		lea	eax, [eax+ecx*4]
		pop	esi
		retn	4
sub_6B1A1ACF	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A1AF0	proc near		; CODE XREF: Ordinal1136+F3p
					; Ordinal1136+11Ep ...
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6B1A1B01
		push	eax		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A1B01:				; CODE XREF: sub_6B1A1AF0+8j
		and	dword ptr [esi+4], 0
		and	dword ptr [esi+8], 0
		and	dword ptr [esi+0Ch], 0
		pop	esi
		retn
sub_6B1A1AF0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1A1B0F	proc near		; CODE XREF: sub_6B1A1CDB+13p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		jmp	short loc_6B1A1B2B
; ---------------------------------------------------------------------------

loc_6B1A1B17:				; CODE XREF: sub_6B1A1B0F+1Fj
		cmp	[ebp+arg_8], 0
		jz	short loc_6B1A1B24
		mov	ecx, [eax]
		mov	edx, [ebp+arg_8]
		mov	[edx], ecx

loc_6B1A1B24:				; CODE XREF: sub_6B1A1B0F+Cj
		add	[ebp+arg_8], 4
		add	eax, 4

loc_6B1A1B2B:				; CODE XREF: sub_6B1A1B0F+6j
		cmp	eax, [ebp+arg_4]
		jnz	short loc_6B1A1B17
		mov	eax, [ebp+arg_8]
		pop	ebp
		retn
sub_6B1A1B0F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

sub_6B1A1B35	proc near		; CODE XREF: sub_6B1A99B5+3j
		jmp	sub_6B1A1AF0
sub_6B1A1B35	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6B1A1B3A(int, void *Dst)
sub_6B1A1B3A	proc near		; CODE XREF: Ordinal1609+355p

arg_0		= dword	ptr  4
Dst		= dword	ptr  8

		push	esi
		push	edi
		mov	edi, [esp+8+Dst]
		mov	esi, ecx
		push	edi		; Dst
		push	dword ptr [esi+8] ; int
		lea	eax, [edi+4]
		push	eax		; Src
		call	sub_6B1A1A13
		add	dword ptr [esi+8], 0FFFFFFFCh
		mov	eax, [esp+14h+arg_0]
		add	esp, 0Ch
		mov	[eax], edi
		pop	edi
		pop	esi
		retn	8
sub_6B1A1B3A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall sub_6B1A1B61(int, int Src, int, int)
sub_6B1A1B61	proc near		; CODE XREF: sub_6B1A1CF8+27p

Src		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		mov	[ebp+arg_8], eax
		call	sub_6B1A62F1
		mov	edi, [ebp+arg_4]
		test	edi, edi
		mov	ebx, eax
		jz	loc_6B1A1CD4
		mov	ecx, esi
		call	sub_6B1A17A8
		mov	ecx, 3FFFFFFFh
		sub	ecx, eax
		cmp	ecx, edi
		mov	ecx, esi
		jnb	short loc_6B1A1B9C
		call	sub_6B1A17BB
; ---------------------------------------------------------------------------

loc_6B1A1B9C:				; CODE XREF: sub_6B1A1B61+34j
		call	sub_6B1A17A8
		add	eax, edi
		cmp	ebx, eax
		jnb	loc_6B1A1C41
		mov	eax, ebx
		shr	eax, 1
		mov	ecx, 3FFFFFFFh
		sub	ecx, eax
		cmp	ecx, ebx
		jnb	short loc_6B1A1BBE
		xor	ebx, ebx
		jmp	short loc_6B1A1BC0
; ---------------------------------------------------------------------------

loc_6B1A1BBE:				; CODE XREF: sub_6B1A1B61+57j
		add	ebx, eax

loc_6B1A1BC0:				; CODE XREF: sub_6B1A1B61+5Bj
		mov	ecx, esi
		call	sub_6B1A17A8
		add	eax, edi
		cmp	ebx, eax
		jnb	short loc_6B1A1BD8
		mov	ecx, esi
		call	sub_6B1A17A8
		mov	ebx, eax
		add	ebx, edi

loc_6B1A1BD8:				; CODE XREF: sub_6B1A1B61+6Aj
		shl	ebx, 2
		push	ebx		; Size
		mov	[ebp+arg_4], ebx
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	ebx, eax
		mov	eax, [esi+4]
		push	esi		; int
		push	ebx		; Dst
		push	[ebp+Src]	; int
		push	eax		; Src
		call	sub_6B183791
		add	esp, 14h
		lea	ecx, [ebp+arg_8]
		push	ecx
		push	edi
		push	eax
		mov	ecx, esi
		call	sub_6B1A6447
		push	esi		; int
		push	eax		; Dst
		push	dword ptr [esi+8] ; int
		push	[ebp+Src]	; Src
		call	sub_6B183791
		add	esp, 10h
		mov	ecx, esi
		call	sub_6B1A17A8
		add	edi, eax
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6B1A1C2B
		push	eax		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A1C2B:				; CODE XREF: sub_6B1A1B61+C1j
		mov	eax, [ebp+arg_4]
		add	eax, ebx
		mov	[esi+0Ch], eax
		lea	eax, [ebx+edi*4]
		mov	[esi+8], eax
		mov	[esi+4], ebx
		jmp	loc_6B1A1CD4
; ---------------------------------------------------------------------------

loc_6B1A1C41:				; CODE XREF: sub_6B1A1B61+44j
		mov	ecx, [esi+8]
		mov	ebx, [ebp+Src]
		mov	eax, ecx
		sub	eax, ebx
		sar	eax, 2
		cmp	eax, edi
		mov	[ebp+arg_4], ecx
		push	esi		; int
		jnb	short loc_6B1A1C9F
		mov	eax, edi
		shl	eax, 2
		mov	[ebp+Src], eax
		add	eax, ebx
		push	eax		; Dst
		push	ecx		; int
		push	ebx		; Src
		call	sub_6B183791
		mov	eax, [esi+8]
		add	esp, 10h
		lea	ecx, [ebp+arg_8]
		push	ecx
		mov	ecx, eax
		sub	ecx, ebx
		sar	ecx, 2
		sub	edi, ecx
		push	edi
		push	eax
		mov	ecx, esi
		call	sub_6B1A6447
		mov	eax, [ebp+Src]
		add	[esi+8], eax
		mov	esi, [esi+8]
		sub	esi, eax
		jmp	short loc_6B1A1C99
; ---------------------------------------------------------------------------

loc_6B1A1C91:				; CODE XREF: sub_6B1A1B61+13Aj
		mov	eax, [ebp+arg_8]
		mov	[ebx], eax
		add	ebx, 4

loc_6B1A1C99:				; CODE XREF: sub_6B1A1B61+12Ej
		cmp	ebx, esi
		jnz	short loc_6B1A1C91
		jmp	short loc_6B1A1CD4
; ---------------------------------------------------------------------------

loc_6B1A1C9F:				; CODE XREF: sub_6B1A1B61+F3j
		push	ecx		; Dst
		mov	[ebp+Src], ecx
		shl	edi, 2
		sub	[ebp+Src], edi
		push	ecx		; int
		push	[ebp+Src]	; Src
		call	sub_6B183791
		push	[ebp+arg_4]	; int
		mov	[esi+8], eax
		push	[ebp+Src]	; int
		push	ebx		; Src
		call	sub_6B1A1A2D
		add	esp, 1Ch
		add	edi, ebx
		jmp	short loc_6B1A1CD0
; ---------------------------------------------------------------------------

loc_6B1A1CC8:				; CODE XREF: sub_6B1A1B61+171j
		mov	eax, [ebp+arg_8]
		mov	[ebx], eax
		add	ebx, 4

loc_6B1A1CD0:				; CODE XREF: sub_6B1A1B61+165j
		cmp	ebx, edi
		jnz	short loc_6B1A1CC8

loc_6B1A1CD4:				; CODE XREF: sub_6B1A1B61+1Cj
					; sub_6B1A1B61+DBj ...
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn	0Ch
sub_6B1A1B61	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1A1CDB	proc near		; CODE XREF: sub_6B1A1D35+4Ap

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+var_4]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6B1A1B0F
		add	esp, 14h
		leave
		retn
sub_6B1A1CDB	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A1CF8(int, int,	int Src, int)
sub_6B1A1CF8	proc near		; CODE XREF: sub_6B1A1DD4+35p

arg_0		= dword	ptr  4
Src		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		mov	edi, ecx
		call	sub_6B1A17A8
		test	eax, eax
		jnz	short loc_6B1A1D09
		xor	esi, esi
		jmp	short loc_6B1A1D13
; ---------------------------------------------------------------------------

loc_6B1A1D09:				; CODE XREF: sub_6B1A1CF8+Bj
		mov	esi, [esp+8+Src]
		sub	esi, [edi+4]
		sar	esi, 2

loc_6B1A1D13:				; CODE XREF: sub_6B1A1CF8+Fj
		push	[esp+8+arg_8]	; int
		mov	ecx, edi	; int
		push	1		; int
		push	[esp+10h+Src]	; Src
		call	sub_6B1A1B61
		mov	eax, [edi+4]
		lea	ecx, [eax+esi*4]
		mov	eax, [esp+8+arg_0]
		pop	edi
		mov	[eax], ecx
		pop	esi
		retn	0Ch
sub_6B1A1CF8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1A1D35	proc near		; CODE XREF: Ordinal1609+5Bp

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_126	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		cmp	edi, 3FFFFFFFh
		mov	[ebp+var_10], esp
		mov	esi, ecx
		jbe	short loc_6B1A1D58
		call	sub_6B1A17BB
; ---------------------------------------------------------------------------

loc_6B1A1D58:				; CODE XREF: sub_6B1A1D35+1Cj
		call	sub_6B1A62F1
		cmp	eax, edi
		jnb	short loc_6B1A1DB0
		mov	ebx, edi
		shl	ebx, 2
		push	ebx		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	ecx, [esi+4]
		and	[ebp+var_4], 0
		mov	edi, eax
		mov	eax, [esi+8]
		push	esi
		push	edi
		push	eax
		push	ecx
		mov	[ebp+arg_0], edi
		call	sub_6B1A1CDB
		add	esp, 14h
		mov	ecx, esi
		call	sub_6B1A17A8
		mov	[ebp+arg_0], eax
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6B1A1D9F
		push	eax		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A1D9F:				; CODE XREF: sub_6B1A1D35+61j
		mov	eax, [ebp+arg_0]
		add	ebx, edi
		lea	eax, [edi+eax*4]
		mov	[esi+0Ch], ebx
		mov	[esi+8], eax
		mov	[esi+4], edi

loc_6B1A1DB0:				; CODE XREF: sub_6B1A1D35+2Aj
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn	4
sub_6B1A1D35	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B1A1DC1	proc near		; DATA XREF: .rdata:stru_6B1BD224o
		push	dword ptr [ebp+8] ; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx
		push	0
		push	0
		call	_CxxThrowException
sub_6B1A1DC1	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1A1DD4	proc near		; CODE XREF: Ordinal1609+72p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		mov	esi, ecx
		call	sub_6B1A17A8
		mov	ecx, esi
		mov	edi, eax
		call	sub_6B1A62F1
		cmp	edi, eax
		push	[ebp+arg_0]
		mov	ecx, esi
		jnb	short loc_6B1A1E01
		push	1
		push	dword ptr [esi+8]
		call	sub_6B1A6447
		mov	[esi+8], eax
		jmp	short loc_6B1A1E0E
; ---------------------------------------------------------------------------

loc_6B1A1E01:				; CODE XREF: sub_6B1A1DD4+1Cj
		mov	eax, [esi+8]
		push	eax		; Src
		lea	eax, [ebp+arg_0]
		push	eax		; int
		call	sub_6B1A1CF8

loc_6B1A1E0E:				; CODE XREF: sub_6B1A1DD4+2Bj
		pop	edi
		pop	esi
		pop	ebp
		retn	4
sub_6B1A1DD4	endp

; Exported entry 1609.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1609(DWORD nCount, int, int, int, int)
		public Ordinal1609
Ordinal1609	proc near		; CODE XREF: Ordinal1606+11j
					; Ordinal1607+45p ...

var_78		= byte ptr -78h
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
dwMilliseconds	= dword	ptr -3Ch
lpHandles	= dword	ptr -38h
var_34		= dword	ptr -34h
Msg		= tagMSG ptr -30h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
nCount		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		mov	eax, offset unknown_libname_127	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 6Ch
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_58], ecx
		call	ds:GetTickCount
		mov	edi, [ebp+arg_4]
		xor	ebx, ebx
		mov	[ebp+var_40], eax
		mov	[ebp+lpHandles], edi
		mov	[ebp+var_4C], ebx
		mov	[ebp+var_48], ebx
		mov	[ebp+var_44], ebx
		cmp	[ebp+arg_8], ebx
		mov	[ebp+var_4], ebx
		jz	loc_6B1A1F62
		push	offset aCmessagelockLo ; "CMessageLock::LockWithMessagePump()"
		lea	ecx, [ebp+var_78]
		call	Ordinal1089
		push	[ebp+nCount]
		lea	ecx, [ebp+var_50]
		mov	byte ptr [ebp+var_4], 2
		call	sub_6B1A1D35
		xor	esi, esi

loc_6B1A1E76:				; CODE XREF: Ordinal1609+78j
		cmp	esi, [ebp+nCount]
		jnb	loc_6B1A1F28
		lea	eax, [edi+esi*4]
		push	eax
		lea	ecx, [ebp+var_50]
		call	sub_6B1A1DD4
		inc	esi
		jmp	short loc_6B1A1E76
; ---------------------------------------------------------------------------

loc_6B1A1E8E:				; DATA XREF: .rdata:6B1BD290o
		push	13h
		lea	ecx, [ebp+var_78]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_78]
		call	Ordinal1101
		mov	ecx, [ebp+var_54]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_78]
		call	Ordinal1103
		lea	ecx, [ebp+var_78]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A1F26
		retn
; ---------------------------------------------------------------------------

loc_6B1A1ED1:				; DATA XREF: .rdata:6B1BD2A0o
		push	15h
		lea	ecx, [ebp+var_78]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_78]
		call	Ordinal1101
		mov	eax, [ebp+var_34]
		push	dword ptr [eax]
		lea	eax, [ebp+Msg.lParam]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Msg.lParam]
		push	eax		; Src
		lea	ecx, [ebp+var_78]
		call	Ordinal1103
		lea	ecx, [ebp+var_78]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A1F26
		retn
; ---------------------------------------------------------------------------

loc_6B1A1F26:				; DATA XREF: Ordinal1609+B7o
					; Ordinal1609+10Co
		xor	ebx, ebx

loc_6B1A1F28:				; CODE XREF: Ordinal1609+65j
		lea	ecx, [ebp+var_78]
		mov	[ebp+var_4], 1
		call	Ordinal1635
		test	eax, eax
		jz	short loc_6B1A1F4B
		lea	ecx, [ebp+var_78]
		call	Ordinal1090
		or	esi, 0FFFFFFFFh
		jmp	loc_6B1A21CD
; ---------------------------------------------------------------------------

loc_6B1A1F4B:				; CODE XREF: Ordinal1609+125j
		push	ebx
		lea	ecx, [ebp+var_50]
		call	sub_6B1A1ACF
		lea	ecx, [ebp+var_78]
		mov	[ebp+lpHandles], eax
		mov	byte ptr [ebp+var_4], bl
		call	Ordinal1090

loc_6B1A1F62:				; CODE XREF: Ordinal1609+3Ej
		mov	eax, [ebp+arg_C]
		lea	ecx, [ebp+dwMilliseconds]
		push	ecx
		push	eax
		mov	[ebp+dwMilliseconds], eax
		call	ds:GetTickCount
		push	eax
		push	[ebp+var_40]
		call	Ordinal1786
		add	esp, 10h
		test	al, al
		jz	loc_6B1A21AE
		mov	eax, [ebp+arg_10]
		neg	eax
		sbb	eax, eax
		and	eax, 2
		mov	[ebp+var_54], eax
		jmp	short loc_6B1A1F99
; ---------------------------------------------------------------------------

loc_6B1A1F96:				; CODE XREF: Ordinal1609+394j
		mov	eax, [ebp+var_54]

loc_6B1A1F99:				; CODE XREF: Ordinal1609+180j
		push	eax		; dwFlags
		push	4FFh		; dwWakeMask
		push	[ebp+dwMilliseconds] ; dwMilliseconds
		push	[ebp+lpHandles]	; pHandles
		push	[ebp+nCount]	; nCount
		call	ds:MsgWaitForMultipleObjectsEx
		cmp	eax, 102h
		mov	[ebp+arg_4], eax
		jz	loc_6B1A21CA
		cmp	eax, 0FFFFFFFFh
		jz	loc_6B1A21B7
		cmp	eax, 0C0h
		jz	loc_6B1A21CA
		cmp	eax, [ebp+nCount]
		jnz	loc_6B1A2140
		mov	esi, ds:PeekMessageA
		push	6
		pop	ecx
		push	ebx		; wRemoveMsg
		push	ebx		; wMsgFilterMax
		xor	eax, eax
		push	ebx		; wMsgFilterMin
		mov	[ebp+Msg.hwnd],	ebx
		lea	edi, [ebp+Msg.message]
		rep stosd
		push	ebx		; hWnd
		lea	eax, [ebp+Msg]
		push	eax		; lpMsg
		mov	[ebp+var_34], ebx
		mov	[ebp+arg_10], ebx
		call	esi ; PeekMessageA
		test	eax, eax
		jz	loc_6B1A211C

loc_6B1A2004:				; CODE XREF: Ordinal1609+2DBj
		inc	[ebp+arg_10]
		cmp	[ebp+Msg.message], 12h
		jnz	short loc_6B1A2024
		push	offset aCmessagelock_0 ; "CMessageLock::LockWithMessagePump() :	m"...
		call	sub_6B181006
		mov	eax, [ebp+var_58]
		cmp	[eax+8], ebx
		pop	ecx
		jnz	loc_6B1A20F7

loc_6B1A2024:				; CODE XREF: Ordinal1609+1F7j
		cmp	[ebp+Msg.hwnd],	ebx
		jnz	short loc_6B1A202D
		xor	edi, edi
		jmp	short loc_6B1A203C
; ---------------------------------------------------------------------------

loc_6B1A202D:				; CODE XREF: Ordinal1609+213j
		push	[ebp+Msg.hwnd]	; hWnd
		call	ds:IsWindowUnicode
		mov	edi, eax
		cmp	edi, ebx
		jnz	short loc_6B1A2061

loc_6B1A203C:				; CODE XREF: Ordinal1609+217j
		push	ebx		; wMsgFilterMax
		push	ebx		; wMsgFilterMin
		push	ebx		; hWnd
		lea	eax, [ebp+Msg]
		push	eax		; lpMsg
		call	ds:GetMessageA
		test	eax, eax
		jnz	short loc_6B1A208B
		cmp	[ebp+Msg.message], 12h
		jz	short loc_6B1A208B
		call	ds:GetLastError
		push	eax
		push	offset aCmessagelock_1 ; "CMessageLock::LockWithMessagePump() :	G"...
		jmp	short loc_6B1A2084
; ---------------------------------------------------------------------------

loc_6B1A2061:				; CODE XREF: Ordinal1609+226j
		push	ebx		; wMsgFilterMax
		push	ebx		; wMsgFilterMin
		push	ebx		; hWnd
		lea	eax, [ebp+Msg]
		push	eax		; lpMsg
		call	ds:GetMessageW
		test	eax, eax
		jnz	short loc_6B1A208B
		cmp	[ebp+Msg.message], 12h
		jz	short loc_6B1A208B
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCmessagelock_2 ; "CMessageLock::LockWithMessagePump() :	G"...

loc_6B1A2084:				; CODE XREF: Ordinal1609+24Bj
		call	sub_6B18102E
		pop	ecx
		pop	ecx

loc_6B1A208B:				; CODE XREF: Ordinal1609+237j
					; Ordinal1609+23Dj ...
		lea	eax, [ebp+Msg]
		push	eax		; lpMsg
		call	ds:TranslateMessage
		cmp	edi, ebx
		lea	eax, [ebp+Msg]
		push	eax		; lpMsg
		jnz	short loc_6B1A20A5
		call	ds:DispatchMessageA
		jmp	short loc_6B1A20AB
; ---------------------------------------------------------------------------

loc_6B1A20A5:				; CODE XREF: Ordinal1609+287j
		call	ds:DispatchMessageW

loc_6B1A20AB:				; CODE XREF: Ordinal1609+28Fj
		push	ebx		; dwMilliseconds
		push	ebx		; bWaitAll
		push	[ebp+lpHandles]	; lpHandles
		push	[ebp+nCount]	; nCount
		call	ds:WaitForMultipleObjects
		mov	edi, eax
		push	edi
		call	Ordinal1612
		test	eax, eax
		pop	ecx
		jnz	short loc_6B1A2104
		lea	eax, [ebp+dwMilliseconds]
		push	eax
		push	[ebp+arg_C]
		call	ds:GetTickCount
		push	eax
		push	[ebp+var_40]
		call	Ordinal1786
		add	esp, 10h
		test	al, al
		jz	short loc_6B1A2109
		push	ebx		; wRemoveMsg
		push	ebx		; wMsgFilterMax
		push	ebx		; wMsgFilterMin
		push	ebx		; hWnd
		lea	eax, [ebp+Msg]
		push	eax		; lpMsg
		call	esi ; PeekMessageA
		test	eax, eax
		jnz	loc_6B1A2004
		jmp	short loc_6B1A2117
; ---------------------------------------------------------------------------

loc_6B1A20F7:				; CODE XREF: Ordinal1609+20Aj
		push	offset aCmessagelock_3 ; "CMessageLock::LockWithMessagePump() :	m"...
		call	sub_6B181006
		pop	ecx
		jmp	short loc_6B1A2110
; ---------------------------------------------------------------------------

loc_6B1A2104:				; CODE XREF: Ordinal1609+2B0j
		mov	[ebp+arg_4], edi
		jmp	short loc_6B1A2117
; ---------------------------------------------------------------------------

loc_6B1A2109:				; CODE XREF: Ordinal1609+2CDj
		mov	[ebp+arg_4], 102h

loc_6B1A2110:				; CODE XREF: Ordinal1609+2EEj
		mov	[ebp+var_34], 1

loc_6B1A2117:				; CODE XREF: Ordinal1609+2E1j
					; Ordinal1609+2F3j
		cmp	[ebp+arg_10], ebx
		jnz	short loc_6B1A212F

loc_6B1A211C:				; CODE XREF: Ordinal1609+1EAj
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCmessagelock_4 ; "CMessageLock::LockWithMessagePump() :	n"...
		call	sub_6B181006
		pop	ecx
		pop	ecx

loc_6B1A212F:				; CODE XREF: Ordinal1609+306j
		cmp	[ebp+var_34], ebx
		jnz	loc_6B1A21CA
		mov	eax, [ebp+nCount]
		cmp	[ebp+arg_4], eax
		jz	short loc_6B1A218D

loc_6B1A2140:				; CODE XREF: Ordinal1609+1BFj
		push	[ebp+arg_4]
		call	Ordinal1612
		test	eax, eax
		pop	ecx
		jz	short loc_6B1A21CA
		cmp	[ebp+arg_8], ebx
		jz	short loc_6B1A21CA
		push	[ebp+arg_4]
		call	Ordinal1613
		pop	ecx
		mov	ecx, [ebp+var_4C]
		lea	eax, [ecx+eax*4]
		push	eax		; Dst
		lea	eax, [ebp+nCount]
		push	eax		; int
		lea	ecx, [ebp+var_50]
		call	sub_6B1A1B3A
		cmp	[ebp+var_4C], ebx
		jz	short loc_6B1A21CA
		mov	esi, [ebp+var_48]
		sub	esi, [ebp+var_4C]
		sar	esi, 2
		jz	short loc_6B1A21CA
		push	ebx
		lea	ecx, [ebp+var_50]
		call	sub_6B1A1ACF
		mov	[ebp+lpHandles], eax
		mov	[ebp+nCount], esi

loc_6B1A218D:				; CODE XREF: Ordinal1609+32Aj
		lea	eax, [ebp+dwMilliseconds]
		push	eax
		push	[ebp+arg_C]
		call	ds:GetTickCount
		push	eax
		push	[ebp+var_40]
		call	Ordinal1786
		add	esp, 10h
		test	al, al
		jnz	loc_6B1A1F96

loc_6B1A21AE:				; CODE XREF: Ordinal1609+16Dj
		mov	[ebp+arg_4], 102h
		jmp	short loc_6B1A21CA
; ---------------------------------------------------------------------------

loc_6B1A21B7:				; CODE XREF: Ordinal1609+1ABj
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCmessagelock_5 ; "CMessageLock::LockWithMessagePump() :	M"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx

loc_6B1A21CA:				; CODE XREF: Ordinal1609+1A2j
					; Ordinal1609+1B6j ...
		mov	esi, [ebp+arg_4]

loc_6B1A21CD:				; CODE XREF: Ordinal1609+132j
		lea	ecx, [ebp+var_50]
		call	sub_6B1A1AF0
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	14h
Ordinal1609	endp ; sp-analysis failed

; Exported entry 1606.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1606
Ordinal1606	proc near		; CODE XREF: Ordinal836+4Ap
					; Ordinal1726+56p ...
		push	ebp
		mov	ebp, esp
		cmp	dword ptr [ecx+4], 0
		jnz	short loc_6B1A2200
		pop	ebp
		jmp	ds:WaitForMultipleObjectsEx
; ---------------------------------------------------------------------------

loc_6B1A2200:				; CODE XREF: Ordinal1606+7j
		pop	ebp
		jmp	Ordinal1609
Ordinal1606	endp

; Exported entry 1607.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1607(HANDLE Handles, DWORD dwMilliseconds, BOOL bAlertable)
		public Ordinal1607
Ordinal1607	proc near		; DATA XREF: .rdata:off_6B1BF428o

Handles		= dword	ptr  8
dwMilliseconds	= dword	ptr  0Ch
bAlertable	= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, [ecx+4]
		xor	edx, edx
		cmp	eax, edx
		jnz	short loc_6B1A223E
		cmp	[ebp+bAlertable], edx
		jnz	short loc_6B1A2225
		push	[ebp+dwMilliseconds] ; dwMilliseconds
		push	[ebp+Handles]	; hHandle
		call	ds:WaitForSingleObject
		jmp	short loc_6B1A2250
; ---------------------------------------------------------------------------

loc_6B1A2225:				; CODE XREF: Ordinal1607+Fj
		cmp	eax, edx
		jnz	short loc_6B1A223E
		push	[ebp+bAlertable] ; bAlertable
		lea	eax, [ebp+Handles]
		push	[ebp+dwMilliseconds] ; dwMilliseconds
		push	edx		; bWaitAll
		push	eax		; lpHandles
		push	1		; nCount
		call	ds:WaitForMultipleObjectsEx
		jmp	short loc_6B1A2250
; ---------------------------------------------------------------------------

loc_6B1A223E:				; CODE XREF: Ordinal1607+Aj
					; Ordinal1607+21j
		push	[ebp+bAlertable] ; int
		lea	eax, [ebp+Handles]
		push	[ebp+dwMilliseconds] ; int
		push	edx		; int
		push	eax		; int
		push	1		; nCount
		call	Ordinal1609

loc_6B1A2250:				; CODE XREF: Ordinal1607+1Dj
					; Ordinal1607+36j
		pop	ebp
		retn	0Ch
Ordinal1607	endp

; Exported entry 1608.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1608(HANDLE hHandle, DWORD dwMilliseconds)
		public Ordinal1608
Ordinal1608	proc near		; CODE XREF: Ordinal1636+34p
					; Ordinal1647+34p ...

hHandle		= dword	ptr  4
dwMilliseconds	= dword	ptr  8

		xor	eax, eax
		cmp	[ecx+4], eax
		jnz	short loc_6B1A226B
		push	[esp+dwMilliseconds] ; dwMilliseconds
		push	[esp+4+hHandle]	; hHandle
		call	ds:WaitForSingleObject
		jmp	short locret_6B1A227D
; ---------------------------------------------------------------------------

loc_6B1A226B:				; CODE XREF: Ordinal1608+5j
		push	eax		; int
		push	[esp+4+dwMilliseconds] ; int
		push	eax		; int
		lea	eax, [esp+0Ch+hHandle]
		push	eax		; int
		push	1		; nCount
		call	Ordinal1609

locret_6B1A227D:			; CODE XREF: Ordinal1608+15j
		retn	8
Ordinal1608	endp

; Exported entry 1581.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1581(DWORD dwMilliseconds, BOOL bWaitAll, int)
		public Ordinal1581
Ordinal1581	proc near		; CODE XREF: Ordinal1577+22p
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
dwMilliseconds	= dword	ptr  8
bWaitAll	= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	edx, [ebp+arg_8]
		push	ebx
		push	esi
		push	edi
		xor	edi, edi
		cmp	edx, edi
		push	edi		; bAlertable
		push	[ebp+dwMilliseconds] ; dwMilliseconds
		mov	esi, ecx
		push	[ebp+bWaitAll]	; bWaitAll
		mov	ecx, [esi+8]
		lea	eax, [esi+0Ch]
		push	eax		; lpHandles
		mov	[ebp+var_C], offset off_6B1B7C60
		mov	[ebp+var_8], edx
		mov	[ebp+var_4], edi
		push	ecx		; nCount
		jnz	short loc_6B1A22B8
		call	ds:WaitForMultipleObjectsEx
		jmp	short loc_6B1A22C0
; ---------------------------------------------------------------------------

loc_6B1A22B8:				; CODE XREF: Ordinal1581+2Ej
		lea	ecx, [ebp+var_C]
		call	Ordinal1609

loc_6B1A22C0:				; CODE XREF: Ordinal1581+36j
		mov	ebx, eax
		push	ebx
		call	Ordinal1612
		test	eax, eax
		pop	ecx
		jz	short loc_6B1A2302
		cmp	[ebp+bWaitAll],	edi
		jz	short loc_6B1A22F0
		xor	ecx, ecx
		cmp	[esi+8], edi
		jbe	short loc_6B1A2302
		lea	eax, [esi+10Ch]

loc_6B1A22DF:				; CODE XREF: Ordinal1581+6Cj
		mov	dword ptr [eax], 1
		inc	ecx
		add	eax, 4
		cmp	ecx, [esi+8]
		jb	short loc_6B1A22DF
		jmp	short loc_6B1A2302
; ---------------------------------------------------------------------------

loc_6B1A22F0:				; CODE XREF: Ordinal1581+50j
		push	ebx
		call	Ordinal1613
		pop	ecx
		mov	dword ptr [esi+eax*4+10Ch], 1

loc_6B1A2302:				; CODE XREF: Ordinal1581+4Bj
					; Ordinal1581+57j ...
		pop	edi
		pop	esi
		mov	eax, ebx
		pop	ebx
		leave
		retn	0Ch
Ordinal1581	endp

; Exported entry 1577.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1577(int, int, DWORD dwMilliseconds, BOOL bWaitAll, int)
		public Ordinal1577
Ordinal1577	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
dwMilliseconds	= dword	ptr  10h
bWaitAll	= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_4]
		mov	esi, ecx
		push	[ebp+arg_0]
		mov	dword ptr [esi], offset	off_6B1B7C80
		call	Ordinal1580
		push	[ebp+arg_10]	; int
		mov	ecx, esi
		push	[ebp+bWaitAll]	; bWaitAll
		push	[ebp+dwMilliseconds] ; dwMilliseconds
		call	Ordinal1581
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	14h
Ordinal1577	endp

; Exported entry 1610.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1610
Ordinal1610	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, ecx
		mov	dword ptr [eax], offset	off_6B1B7E60
		retn
Ordinal1610	endp

; Exported entry 1611.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1611
Ordinal1611	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	dword ptr [ecx], offset	off_6B1B7E60
		retn
Ordinal1611	endp

; Exported entry 1612.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1612
Ordinal1612	proc near		; CODE XREF: Ordinal1609+2A8p
					; Ordinal1609+32Fp ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 3Fh
		jbe	short loc_6B1A2360
		cmp	eax, 80h
		jb	short loc_6B1A2364
		cmp	eax, 0BFh
		ja	short loc_6B1A2364

loc_6B1A2360:				; CODE XREF: Ordinal1612+7j
		xor	eax, eax
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_6B1A2364:				; CODE XREF: Ordinal1612+Ej
					; Ordinal1612+15j
		xor	eax, eax
		retn
Ordinal1612	endp

; Exported entry 1613.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1613
Ordinal1613	proc near		; CODE XREF: Ordinal1609+341p
					; Ordinal1581+71p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		xor	eax, eax
		cmp	ecx, 3Fh
		ja	short loc_6B1A2375
		mov	eax, ecx
		retn
; ---------------------------------------------------------------------------

loc_6B1A2375:				; CODE XREF: Ordinal1613+9j
		cmp	ecx, 80h
		jb	short locret_6B1A2388
		cmp	ecx, 0BFh
		ja	short locret_6B1A2388
		lea	eax, [ecx-80h]

locret_6B1A2388:			; CODE XREF: Ordinal1613+14j
					; Ordinal1613+1Cj
		retn
Ordinal1613	endp

; Exported entry 1614.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1614(LPCSTR lpString2, LPSTR lpString1, int)
		public Ordinal1614
Ordinal1614	proc near		; CODE XREF: Ordinal1631+2Fp
					; Ordinal1632+30p ...

lpString2	= dword	ptr  8
lpString1	= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	[ebp+lpString2]	; lpString
		call	ds:lstrlenA
		add	eax, 8
		cmp	eax, [ebp+arg_8]
		jbe	short loc_6B1A23AC
		push	offset aCsyncobjectCre ; "CSyncObject::CreateGlobalName() : lstrl"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6B1A23AC:				; CODE XREF: Ordinal1614+12j
		call	Ordinal1274
		test	al, al
		jz	short loc_6B1A23D1
		push	offset aGlobal	; "Global\\"
		push	[ebp+lpString1]	; lpString1
		call	ds:lstrcpyA
		push	[ebp+lpString2]	; lpString2
		push	[ebp+lpString1]	; lpString1
		call	ds:lstrcatA
		jmp	short loc_6B1A23DD
; ---------------------------------------------------------------------------

loc_6B1A23D1:				; CODE XREF: Ordinal1614+2Aj
		push	[ebp+lpString2]	; lpString2
		push	[ebp+lpString1]	; lpString1
		call	ds:lstrcpyA

loc_6B1A23DD:				; CODE XREF: Ordinal1614+46j
		xor	eax, eax
		inc	eax
		pop	ebp
		retn
Ordinal1614	endp

; Exported entry 1618.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1618
Ordinal1618	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		push	edi
		push	6
		lea	esi, [ecx+4]
		pop	ecx
		mov	edi, eax
		rep movsd
		pop	edi
		pop	esi
		retn	4
Ordinal1618	endp

; Exported entry 1620.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1620
Ordinal1620	proc near		; CODE XREF: Ordinal1616+9p
					; Ordinal1619+11p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+1Ch], 0
		jz	short loc_6B1A240E
		lea	eax, [esi+4]
		push	eax		; lpCriticalSection
		call	ds:DeleteCriticalSection
		and	dword ptr [esi+1Ch], 0

loc_6B1A240E:				; CODE XREF: Ordinal1620+7j
		pop	esi
		retn
Ordinal1620	endp

; Exported entry 1621.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1621
Ordinal1621	proc near		; CODE XREF: Ordinal1624p
					; DATA XREF: .rdata:off_6B1BF428o

Args		= byte ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h

		push	0Ch
		push	offset stru_6B1B7F20
		call	__SEH_prolog
		cmp	dword ptr [ecx+1Ch], 0
		jnz	short loc_6B1A242F
		push	offset aCcriticalsecti ; "CCriticalSection::Lock() : m_bCreated	="...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B1A246A
; ---------------------------------------------------------------------------

loc_6B1A242F:				; CODE XREF: Ordinal1621+10j
		and	[ebp+ms_exc.disabled], 0
		add	ecx, 4
		push	ecx		; lpCriticalSection
		call	ds:EnterCriticalSection
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		xor	eax, eax
		inc	eax
		jmp	short loc_6B1A246C
; ---------------------------------------------------------------------------

loc_6B1A2446:				; DATA XREF: .rdata:stru_6B1B7F20o
		mov	eax, [ebp+ms_exc.exc_ptr] ; Exception filter 0 for function 6B1A2410
		mov	eax, [eax]
		mov	eax, [eax]
		mov	dword ptr [ebp+Args], eax
		xor	eax, eax
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_6B1A2454:				; DATA XREF: .rdata:stru_6B1B7F20o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 6B1A2410
		push	dword ptr [ebp+Args] ; Args
		push	offset aCcriticalsec_3 ; "CCriticalSection::Lock() : __except(), "...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh

loc_6B1A246A:				; CODE XREF: Ordinal1621+1Dj
		xor	eax, eax

loc_6B1A246C:				; CODE XREF: Ordinal1621+34j
		call	__SEH_epilog
		retn
Ordinal1621	endp

; Exported entry 1622.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1622
Ordinal1622	proc near		; DATA XREF: .rdata:off_6B1BF428o
		cmp	dword ptr [ecx+1Ch], 0
		jnz	short loc_6B1A2486
		push	offset aCcriticalsec_0 ; "CCriticalSection::TryLock() :	m_bCreate"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6B1A2486:				; CODE XREF: Ordinal1622+4j
		add	ecx, 4
		push	ecx		; lpCriticalSection
		call	ds:TryEnterCriticalSection
		retn
Ordinal1622	endp

; Exported entry 1624.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1624
Ordinal1624	proc near		; DATA XREF: .rdata:6B1B80ECo
					; .rdata:off_6B1BF428o
		call	Ordinal1621
		retn	8
Ordinal1624	endp

; Exported entry 1625.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1625
Ordinal1625	proc near		; DATA XREF: .rdata:6B1B80F0o
					; .rdata:off_6B1BF428o
		cmp	dword ptr [ecx+1Ch], 0
		jnz	short loc_6B1A24AD
		push	offset aCcriticalsec_1 ; "CCriticalSection::UnLock() : m_bCreated"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6B1A24AD:				; CODE XREF: Ordinal1625+4j
		add	ecx, 4
		push	ecx		; lpCriticalSection
		call	ds:LeaveCriticalSection
		xor	eax, eax
		inc	eax
		retn
Ordinal1625	endp

; Exported entry 1627.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1627
Ordinal1627	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, ecx
		and	dword ptr [eax+4], 0
		mov	dword ptr [eax], offset	off_6B1B7F94
		retn
Ordinal1627	endp

; Exported entry 1634.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1634(LONG lReleaseCount,	LPLONG lpPreviousCount)
		public Ordinal1634
Ordinal1634	proc near		; CODE XREF: Ordinal1637+4p
					; DATA XREF: .rdata:off_6B1BF428o

lReleaseCount	= dword	ptr  4
lpPreviousCount	= dword	ptr  8

		mov	eax, [ecx+4]
		test	eax, eax
		jnz	short loc_6B1A24DE
		push	offset aCsemaphoreUnlo ; "CSemaphore::Unlock() : m_hSemaphore == "...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short locret_6B1A24F3
; ---------------------------------------------------------------------------

loc_6B1A24DE:				; CODE XREF: Ordinal1634+5j
		push	[esp+lpPreviousCount] ;	lpPreviousCount
		push	[esp+4+lReleaseCount] ;	lReleaseCount
		push	eax		; hSemaphore
		call	ds:ReleaseSemaphore
		neg	eax
		sbb	eax, eax
		neg	eax

locret_6B1A24F3:			; CODE XREF: Ordinal1634+14j
		retn	8
Ordinal1634	endp

; Exported entry 1636.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1636(DWORD dwMilliseconds, int)
		public Ordinal1636
Ordinal1636	proc near		; DATA XREF: .rdata:6B1B7F98o
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
dwMilliseconds	= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+4], 0
		jnz	short loc_6B1A2514
		push	offset aCsemaphoreLock ; "CSemaphore::Lock() : m_hSemaphore == NU"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B1A2540
; ---------------------------------------------------------------------------

loc_6B1A2514:				; CODE XREF: Ordinal1636+Dj
		push	0
		push	[ebp+arg_4]
		lea	ecx, [ebp+var_C]
		call	Ordinal1604
		push	[ebp+dwMilliseconds] ; dwMilliseconds
		lea	ecx, [ebp+var_C]
		push	dword ptr [esi+4] ; hHandle
		call	Ordinal1608
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		lea	ecx, [ebp+var_C]
		inc	esi
		call	Ordinal1605
		mov	eax, esi

loc_6B1A2540:				; CODE XREF: Ordinal1636+1Cj
		pop	esi
		leave
		retn	8
Ordinal1636	endp

; Exported entry 1637.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1637
Ordinal1637	proc near		; DATA XREF: .rdata:6B1B7F9Co
					; .rdata:off_6B1BF428o
		push	0		; lpPreviousCount
		push	1		; lReleaseCount
		call	Ordinal1634
		retn
Ordinal1637	endp

; Exported entry 1639.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1639
Ordinal1639	proc near		; CODE XREF: Ordinal1391+34p
					; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, ecx
		and	dword ptr [eax+4], 0
		mov	dword ptr [eax], offset	off_6B1B8000
		retn
Ordinal1639	endp

; Exported entry 1647.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1647(DWORD dwMilliseconds, int)
		public Ordinal1647
Ordinal1647	proc near		; DATA XREF: .rdata:6B1B8004o
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
dwMilliseconds	= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+4], 0
		jnz	short loc_6B1A257A
		push	offset aCmutexLockM_hm ; "CMutex::Lock() : m_hMutex == NULL\n"
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B1A25B1
; ---------------------------------------------------------------------------

loc_6B1A257A:				; CODE XREF: Ordinal1647+Dj
		push	0
		push	[ebp+arg_4]
		lea	ecx, [ebp+var_C]
		call	Ordinal1604
		push	[ebp+dwMilliseconds] ; dwMilliseconds
		lea	ecx, [ebp+var_C]
		push	dword ptr [esi+4] ; hHandle
		call	Ordinal1608
		test	eax, eax
		jz	short loc_6B1A25A4
		cmp	eax, 80h
		jz	short loc_6B1A25A4
		xor	esi, esi
		jmp	short loc_6B1A25A7
; ---------------------------------------------------------------------------

loc_6B1A25A4:				; CODE XREF: Ordinal1647+3Bj
					; Ordinal1647+42j
		xor	esi, esi
		inc	esi

loc_6B1A25A7:				; CODE XREF: Ordinal1647+46j
		lea	ecx, [ebp+var_C]
		call	Ordinal1605
		mov	eax, esi

loc_6B1A25B1:				; CODE XREF: Ordinal1647+1Cj
		pop	esi
		leave
		retn	8
Ordinal1647	endp

; Exported entry 1648.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1648
Ordinal1648	proc near		; DATA XREF: .rdata:6B1B8008o
					; .rdata:off_6B1BF428o
		mov	eax, [ecx+4]
		test	eax, eax
		jnz	short loc_6B1A25CB
		push	offset aCmutexLockM_hm ; "CMutex::Lock() : m_hMutex == NULL\n"
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6B1A25CB:				; CODE XREF: Ordinal1648+5j
		push	eax		; hMutex
		call	ds:ReleaseMutex
		retn
Ordinal1648	endp

; Exported entry 1650.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1650
Ordinal1650	proc near		; CODE XREF: Ordinal1391+29p
					; Ordinal1457+49p ...
		mov	eax, ecx
		and	dword ptr [eax+4], 0
		mov	dword ptr [eax], offset	off_6B1B8034
		retn
Ordinal1650	endp

; Exported entry 1633.
; Exported entry 1645.
; Exported entry 1656.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1633
Ordinal1633	proc near		; CODE XREF: Ordinal1629+9p
					; Ordinal1631+14p ...
		push	esi		; ccL35_1633
					; ccL35_1645
		mov	esi, ecx
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6B1A25F5
		push	eax		; hObject
		call	ds:CloseHandle
		and	dword ptr [esi+4], 0

loc_6B1A25F5:				; CODE XREF: Ordinal1633+8j
		pop	esi
		retn
Ordinal1633	endp

; Exported entry 1658.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1658
Ordinal1658	proc near		; CODE XREF: Ordinal1567j
					; Ordinal1565+Bp
					; DATA XREF: ...
		mov	eax, [ecx]
		push	0
		push	0
		call	dword ptr [eax+4]
		retn
Ordinal1658	endp

; Exported entry 1659.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1659
Ordinal1659	proc near		; CODE XREF: Ordinal1403+6j
					; Ordinal1657+7p ...
		mov	eax, [ecx+4]
		test	eax, eax
		jnz	short loc_6B1A2616
		push	offset aCeventSetevent ; "CEvent::SetEvent() : m_hEvent	== NULL\n"
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6B1A2616:				; CODE XREF: Ordinal1659+5j
		push	eax		; hEvent
		call	ds:SetEvent
		retn
Ordinal1659	endp

; Exported entry 1660.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1660
Ordinal1660	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+4]
		test	eax, eax
		jnz	short loc_6B1A2633
		push	offset aCeventPulseeve ; "CEvent::PulseEvent() : m_hEvent == NULL"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6B1A2633:				; CODE XREF: Ordinal1660+5j
		push	eax		; hEvent
		call	ds:PulseEvent
		retn
Ordinal1660	endp

; Exported entry 1661.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1661
Ordinal1661	proc near		; CODE XREF: Ordinal1657:loc_6B1A2AE2p
					; Ordinal1723+33p ...
		mov	eax, [ecx+4]
		test	eax, eax
		jnz	short loc_6B1A2650
		push	offset aCeventReseteve ; "CEvent::ResetEvent() : m_hEvent == NULL"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6B1A2650:				; CODE XREF: Ordinal1661+5j
		push	eax		; hEvent
		call	ds:ResetEvent
		retn
Ordinal1661	endp

; Exported entry 1663.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1663(DWORD dwMilliseconds, int)
		public Ordinal1663
Ordinal1663	proc near		; DATA XREF: .rdata:6B1B7C18o
					; .rdata:6B1B8038o ...

var_C		= byte ptr -0Ch
dwMilliseconds	= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+4], 0
		jnz	short loc_6B1A2676
		push	offset aCeventLockM_he ; "CEvent::Lock() : m_hEvent == NULL\n"
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B1A26A2
; ---------------------------------------------------------------------------

loc_6B1A2676:				; CODE XREF: Ordinal1663+Dj
		push	0
		push	[ebp+arg_4]
		lea	ecx, [ebp+var_C]
		call	Ordinal1604
		push	[ebp+dwMilliseconds] ; dwMilliseconds
		lea	ecx, [ebp+var_C]
		push	dword ptr [esi+4] ; hHandle
		call	Ordinal1608
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		lea	ecx, [ebp+var_C]
		inc	esi
		call	Ordinal1605
		mov	eax, esi

loc_6B1A26A2:				; CODE XREF: Ordinal1663+1Cj
		pop	esi
		leave
		retn	8
Ordinal1663	endp

; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_9. PRESS KEYPAD "+" TO EXPAND]
; Exported entry 1616.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1616
Ordinal1616	proc near		; CODE XREF: Ordinal158+13p
					; Ordinal418+13p ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1B80E8
		call	Ordinal1620
		mov	dword ptr [esi], offset	off_6B1B7E60
		pop	esi
		retn
Ordinal1616	endp

; Exported entry 1619.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1619
Ordinal1619	proc near		; CODE XREF: Ordinal1615+1Fp
					; DATA XREF: .rdata:off_6B1BF428o

var_20		= dword	ptr -20h
Args		= byte ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h

		push	10h
		push	offset stru_6B1B8130
		call	__SEH_prolog
		mov	esi, ecx
		mov	[ebp+var_20], esi
		call	Ordinal1620
		and	[ebp+ms_exc.disabled], 0
		lea	eax, [esi+4]
		push	eax		; lpCriticalSection
		call	ds:InitializeCriticalSection
		mov	dword ptr [esi+1Ch], 1
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		jmp	short loc_6B1A2732
; ---------------------------------------------------------------------------

loc_6B1A270B:				; DATA XREF: .rdata:stru_6B1B8130o
		mov	eax, [ebp+ms_exc.exc_ptr] ; Exception filter 0 for function 6B1A26DA
		mov	eax, [eax]
		mov	eax, [eax]
		mov	dword ptr [ebp+Args], eax
		xor	eax, eax
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_6B1A2719:				; DATA XREF: .rdata:stru_6B1B8130o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 6B1A26DA
		push	dword ptr [ebp+Args] ; Args
		push	offset aCcriticalsec_4 ; "CCriticalSection::Create() : __except()"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		mov	esi, [ebp+var_20]

loc_6B1A2732:				; CODE XREF: Ordinal1619+2Fj
		mov	eax, [esi+1Ch]
		call	__SEH_epilog
		retn
Ordinal1619	endp

; Exported entry 1629.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1629
Ordinal1629	proc near		; CODE XREF: Ordinal1587+14p
					; sub_6B1A2B3D+3p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1B7F94
		call	Ordinal1633
		mov	dword ptr [esi], offset	off_6B1B7E60
		pop	esi
		retn
Ordinal1629	endp

; Exported entry 1631.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1631(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCSTR	lpString2, int)
		public Ordinal1631
Ordinal1631	proc near		; CODE XREF: Ordinal1628+1Fp
					; DATA XREF: .rdata:off_6B1BF428o

String1		= byte ptr -108h
var_4		= dword	ptr -4
lpSemaphoreAttributes= dword ptr  8
lInitialCount	= dword	ptr  0Ch
lMaximumCount	= dword	ptr  10h
lpString2	= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 108h
		mov	eax, ___security_cookie
		push	esi
		mov	[ebp+var_4], eax
		mov	esi, ecx
		call	Ordinal1633
		cmp	[ebp+arg_10], 0
		mov	eax, [ebp+lpString2]
		jz	short loc_6B1A279E
		push	104h		; int
		lea	ecx, [ebp+String1]
		push	ecx		; lpString1
		push	eax		; lpString2
		call	Ordinal1614
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_6B1A2798
		push	offset aCsemaphore ; "CSemaphore"
		push	offset aSCreateCreateg ; "%s::Create() : CreateGlobalName() == FA"...
		jmp	short loc_6B1A27C1
; ---------------------------------------------------------------------------

loc_6B1A2798:				; CODE XREF: Ordinal1631+39j
		lea	eax, [ebp+String1]

loc_6B1A279E:				; CODE XREF: Ordinal1631+20j
		push	eax		; lpName
		push	[ebp+lMaximumCount] ; lMaximumCount
		push	[ebp+lInitialCount] ; lInitialCount
		push	[ebp+lpSemaphoreAttributes] ; lpSemaphoreAttributes
		call	ds:CreateSemaphoreA
		test	eax, eax
		mov	[esi+4], eax
		jnz	short loc_6B1A27CC
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCsemaphoreCrea ; "CSemaphore::Create() : CreateSemaphore("...

loc_6B1A27C1:				; CODE XREF: Ordinal1631+45j
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B1A27CF
; ---------------------------------------------------------------------------

loc_6B1A27CC:				; CODE XREF: Ordinal1631+62j
		xor	eax, eax
		inc	eax

loc_6B1A27CF:				; CODE XREF: Ordinal1631+79j
		mov	ecx, [ebp+var_4]
		pop	esi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn	14h
Ordinal1631	endp

; Exported entry 1632.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1632(DWORD dwDesiredAccess, BOOL	bInheritHandle,	LPCSTR Args, int)
		public Ordinal1632
Ordinal1632	proc near		; DATA XREF: .rdata:off_6B1BF428o

String1		= byte ptr -108h
var_4		= dword	ptr -4
dwDesiredAccess	= dword	ptr  8
bInheritHandle	= dword	ptr  0Ch
Args		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 108h
		mov	eax, ___security_cookie
		push	esi
		push	edi
		mov	[ebp+var_4], eax
		mov	esi, ecx
		call	Ordinal1633
		cmp	[ebp+arg_C], 0
		mov	edi, [ebp+Args]
		jz	short loc_6B1A2831
		push	104h		; int
		lea	eax, [ebp+String1]
		push	eax		; lpString1
		push	edi		; lpString2
		call	Ordinal1614
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_6B1A282B
		push	offset aCsemaphore ; "CSemaphore"
		push	offset aSCreateCreateg ; "%s::Create() : CreateGlobalName() == FA"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		jmp	short loc_6B1A285A
; ---------------------------------------------------------------------------

loc_6B1A282B:				; CODE XREF: Ordinal1632+3Aj
		lea	edi, [ebp+String1]

loc_6B1A2831:				; CODE XREF: Ordinal1632+21j
		push	edi		; lpName
		push	[ebp+bInheritHandle] ; bInheritHandle
		push	[ebp+dwDesiredAccess] ;	dwDesiredAccess
		call	ds:OpenSemaphoreA
		test	eax, eax
		mov	[esi+4], eax
		jnz	short loc_6B1A285E
		call	ds:GetLastError
		push	eax
		push	edi		; Args
		push	offset aCsemaphoreOpen ; "CSemaphore::Open() : OpenSemaphore() =="...
		call	sub_6B18102E
		add	esp, 0Ch

loc_6B1A285A:				; CODE XREF: Ordinal1632+4Dj
		xor	eax, eax
		jmp	short loc_6B1A2861
; ---------------------------------------------------------------------------

loc_6B1A285E:				; CODE XREF: Ordinal1632+67j
		xor	eax, eax
		inc	eax

loc_6B1A2861:				; CODE XREF: Ordinal1632+80j
		mov	ecx, [ebp+var_4]
		pop	edi
		pop	esi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn	10h
Ordinal1632	endp

; Exported entry 1641.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1641
Ordinal1641	proc near		; CODE XREF: Ordinal1392+72p
					; Ordinal1587+Cp ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1B8000
		call	Ordinal1633
		mov	dword ptr [esi], offset	off_6B1B7E60
		pop	esi
		retn
Ordinal1641	endp

; Exported entry 1643.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1643(LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCSTR	lpString2, int)
		public Ordinal1643
Ordinal1643	proc near		; CODE XREF: Ordinal1393+463p
					; Ordinal1640+1Dp
					; DATA XREF: ...

String1		= byte ptr -108h
var_4		= dword	ptr -4
lpMutexAttributes= dword ptr  8
bInitialOwner	= dword	ptr  0Ch
lpString2	= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 108h
		mov	eax, ___security_cookie
		push	esi
		mov	[ebp+var_4], eax
		mov	esi, ecx
		call	Ordinal1633
		cmp	[ebp+arg_C], 0
		mov	eax, [ebp+lpString2]
		jz	short loc_6B1A28D2
		push	104h		; int
		lea	ecx, [ebp+String1]
		push	ecx		; lpString1
		push	eax		; lpString2
		call	Ordinal1614
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_6B1A28CC
		push	offset aCmutex	; "CMutex"
		push	offset aSCreateCreateg ; "%s::Create() : CreateGlobalName() == FA"...
		jmp	short loc_6B1A28F2
; ---------------------------------------------------------------------------

loc_6B1A28CC:				; CODE XREF: Ordinal1643+39j
		lea	eax, [ebp+String1]

loc_6B1A28D2:				; CODE XREF: Ordinal1643+20j
		push	eax		; lpName
		push	[ebp+bInitialOwner] ; bInitialOwner
		push	[ebp+lpMutexAttributes]	; lpMutexAttributes
		call	ds:CreateMutexA
		test	eax, eax
		mov	[esi+4], eax
		jnz	short loc_6B1A28FD
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCmutexCreateCr ; "CMutex::Create() : CreateMutex() == NUL"...

loc_6B1A28F2:				; CODE XREF: Ordinal1643+45j
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B1A2900
; ---------------------------------------------------------------------------

loc_6B1A28FD:				; CODE XREF: Ordinal1643+5Fj
		xor	eax, eax
		inc	eax

loc_6B1A2900:				; CODE XREF: Ordinal1643+76j
		mov	ecx, [ebp+var_4]
		pop	esi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn	10h
Ordinal1643	endp

; Exported entry 1644.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1644(DWORD dwDesiredAccess, BOOL	bInheritHandle,	LPCSTR Args, int)
		public Ordinal1644
Ordinal1644	proc near		; DATA XREF: .rdata:off_6B1BF428o

String1		= byte ptr -108h
var_4		= dword	ptr -4
dwDesiredAccess	= dword	ptr  8
bInheritHandle	= dword	ptr  0Ch
Args		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 108h
		mov	eax, ___security_cookie
		push	esi
		push	edi
		mov	[ebp+var_4], eax
		mov	esi, ecx
		call	Ordinal1633
		cmp	[ebp+arg_C], 0
		mov	edi, [ebp+Args]
		jz	short loc_6B1A2962
		push	104h		; int
		lea	eax, [ebp+String1]
		push	eax		; lpString1
		push	edi		; lpString2
		call	Ordinal1614
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_6B1A295C
		push	offset aCmutex	; "CMutex"
		push	offset aSCreateCreateg ; "%s::Create() : CreateGlobalName() == FA"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		jmp	short loc_6B1A298B
; ---------------------------------------------------------------------------

loc_6B1A295C:				; CODE XREF: Ordinal1644+3Aj
		lea	edi, [ebp+String1]

loc_6B1A2962:				; CODE XREF: Ordinal1644+21j
		push	edi		; lpName
		push	[ebp+bInheritHandle] ; bInheritHandle
		push	[ebp+dwDesiredAccess] ;	dwDesiredAccess
		call	ds:OpenMutexA
		test	eax, eax
		mov	[esi+4], eax
		jnz	short loc_6B1A298F
		call	ds:GetLastError
		push	eax
		push	edi		; Args
		push	offset aCmutexOpenOpen ; "CMutex::Open() : OpenMutex() == NULL,	%"...
		call	sub_6B18102E
		add	esp, 0Ch

loc_6B1A298B:				; CODE XREF: Ordinal1644+4Dj
		xor	eax, eax
		jmp	short loc_6B1A2992
; ---------------------------------------------------------------------------

loc_6B1A298F:				; CODE XREF: Ordinal1644+67j
		xor	eax, eax
		inc	eax

loc_6B1A2992:				; CODE XREF: Ordinal1644+80j
		mov	ecx, [ebp+var_4]
		pop	edi
		pop	esi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn	10h
Ordinal1644	endp

; Exported entry 1652.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1652
Ordinal1652	proc near		; CODE XREF: Ordinal1392+7Dp
					; Ordinal1457+DEp ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1B8034
		call	Ordinal1633
		mov	dword ptr [esi], offset	off_6B1B7E60
		pop	esi
		retn
Ordinal1652	endp

; Exported entry 1654.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1654(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset,	BOOL bInitialState, LPCSTR lpString2, int)
		public Ordinal1654
Ordinal1654	proc near		; CODE XREF: Ordinal1393+289p
					; Ordinal1457+57p ...

String1		= byte ptr -108h
var_4		= dword	ptr -4
lpEventAttributes= dword ptr  8
bManualReset	= dword	ptr  0Ch
bInitialState	= dword	ptr  10h
lpString2	= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 108h
		mov	eax, ___security_cookie
		push	esi
		mov	[ebp+var_4], eax
		mov	esi, ecx
		call	Ordinal1633
		cmp	[ebp+arg_10], 0
		mov	eax, [ebp+lpString2]
		jz	short loc_6B1A2A03
		push	104h		; int
		lea	ecx, [ebp+String1]
		push	ecx		; lpString1
		push	eax		; lpString2
		call	Ordinal1614
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_6B1A29FD
		push	offset aCevent	; "CEvent"
		push	offset aSCreateCreateg ; "%s::Create() : CreateGlobalName() == FA"...
		jmp	short loc_6B1A2A26
; ---------------------------------------------------------------------------

loc_6B1A29FD:				; CODE XREF: Ordinal1654+39j
		lea	eax, [ebp+String1]

loc_6B1A2A03:				; CODE XREF: Ordinal1654+20j
		push	eax		; lpName
		push	[ebp+bInitialState] ; bInitialState
		push	[ebp+bManualReset] ; bManualReset
		push	[ebp+lpEventAttributes]	; lpEventAttributes
		call	ds:CreateEventA
		test	eax, eax
		mov	[esi+4], eax
		jnz	short loc_6B1A2A31
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCeventCreateCr ; "CEvent::Create() : CreateEvent() == NUL"...

loc_6B1A2A26:				; CODE XREF: Ordinal1654+45j
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B1A2A34
; ---------------------------------------------------------------------------

loc_6B1A2A31:				; CODE XREF: Ordinal1654+62j
		xor	eax, eax
		inc	eax

loc_6B1A2A34:				; CODE XREF: Ordinal1654+79j
		mov	ecx, [ebp+var_4]
		pop	esi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn	14h
Ordinal1654	endp

; Exported entry 1655.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1655(DWORD dwDesiredAccess, BOOL	bInheritHandle,	LPCSTR Args, int)
		public Ordinal1655
Ordinal1655	proc near		; DATA XREF: .rdata:off_6B1BF428o

String1		= byte ptr -108h
var_4		= dword	ptr -4
dwDesiredAccess	= dword	ptr  8
bInheritHandle	= dword	ptr  0Ch
Args		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 108h
		mov	eax, ___security_cookie
		push	esi
		push	edi
		mov	[ebp+var_4], eax
		mov	esi, ecx
		call	Ordinal1633
		cmp	[ebp+arg_C], 0
		mov	edi, [ebp+Args]
		jz	short loc_6B1A2A96
		push	104h		; int
		lea	eax, [ebp+String1]
		push	eax		; lpString1
		push	edi		; lpString2
		call	Ordinal1614
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_6B1A2A90
		push	offset aCevent	; "CEvent"
		push	offset aSCreateCreateg ; "%s::Create() : CreateGlobalName() == FA"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		jmp	short loc_6B1A2ABF
; ---------------------------------------------------------------------------

loc_6B1A2A90:				; CODE XREF: Ordinal1655+3Aj
		lea	edi, [ebp+String1]

loc_6B1A2A96:				; CODE XREF: Ordinal1655+21j
		push	edi		; lpName
		push	[ebp+bInheritHandle] ; bInheritHandle
		push	[ebp+dwDesiredAccess] ;	dwDesiredAccess
		call	ds:OpenEventA
		test	eax, eax
		mov	[esi+4], eax
		jnz	short loc_6B1A2AC3
		call	ds:GetLastError
		push	eax
		push	edi		; Args
		push	offset aCeventOpenOpen ; "CEvent::Open() : OpenEvent() == NULL,	%"...
		call	sub_6B18102E
		add	esp, 0Ch

loc_6B1A2ABF:				; CODE XREF: Ordinal1655+4Dj
		xor	eax, eax
		jmp	short loc_6B1A2AC6
; ---------------------------------------------------------------------------

loc_6B1A2AC3:				; CODE XREF: Ordinal1655+67j
		xor	eax, eax
		inc	eax

loc_6B1A2AC6:				; CODE XREF: Ordinal1655+80j
		mov	ecx, [ebp+var_4]
		pop	edi
		pop	esi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn	10h
Ordinal1655	endp

; Exported entry 1657.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1657
Ordinal1657	proc near		; CODE XREF: Ordinal1569j
					; Ordinal1566+7p ...

arg_0		= dword	ptr  4

		cmp	[esp+arg_0], 0
		jz	short loc_6B1A2AE2
		call	Ordinal1659
		jmp	short locret_6B1A2AE7
; ---------------------------------------------------------------------------

loc_6B1A2AE2:				; CODE XREF: Ordinal1657+5j
		call	Ordinal1661

locret_6B1A2AE7:			; CODE XREF: Ordinal1657+Cj
		retn	4
Ordinal1657	endp

; Exported entry 1615.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1615
Ordinal1615	proc near		; CODE XREF: Ordinal154+27p
					; Ordinal420+2Bp ...
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+1Ch], 0
		push	18h		; Size
		lea	eax, [esi+4]
		push	0		; Val
		push	eax		; Dst
		mov	dword ptr [esi], offset	off_6B1B80E8
		call	memset
		add	esp, 0Ch
		mov	ecx, esi
		call	Ordinal1619
		test	eax, eax
		jnz	short loc_6B1A2B1D
		push	offset aCcriticalsec_2 ; "CCriticalSection::CCriticalSection() : "...
		call	sub_6B18102E
		pop	ecx

loc_6B1A2B1D:				; CODE XREF: Ordinal1615+26j
		mov	eax, esi
		pop	esi
		retn
Ordinal1615	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A2B21(void *, char)
sub_6B1A2B21	proc near		; DATA XREF: .rdata:off_6B1B80E8o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1616
		test	[esp+4+arg_0], 1
		jz	short loc_6B1A2B37
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A2B37:				; CODE XREF: sub_6B1A2B21+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A2B21	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A2B3D(void *, char)
sub_6B1A2B3D	proc near		; DATA XREF: .rdata:off_6B1B7F94o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1629
		test	[esp+4+arg_0], 1
		jz	short loc_6B1A2B53
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A2B53:				; CODE XREF: sub_6B1A2B3D+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A2B3D	endp

; Exported entry 1628.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1628(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCSTR	lpString2, int)
		public Ordinal1628
Ordinal1628	proc near		; CODE XREF: Ordinal1586+16p
					; DATA XREF: .rdata:off_6B1BF428o

lpSemaphoreAttributes= dword ptr  8
lInitialCount	= dword	ptr  0Ch
lMaximumCount	= dword	ptr  10h
lpString2	= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_10]	; int
		mov	esi, ecx
		push	[ebp+lpString2]	; lpString2
		and	dword ptr [esi+4], 0
		push	[ebp+lMaximumCount] ; lMaximumCount
		mov	dword ptr [esi], offset	off_6B1B7F94
		push	[ebp+lInitialCount] ; lInitialCount
		push	[ebp+lpSemaphoreAttributes] ; lpSemaphoreAttributes
		call	Ordinal1631
		test	eax, eax
		jnz	short loc_6B1A2B8C
		push	offset aCsemaphoreCsem ; "CSemaphore::CSemaphore() : Create() == "...
		call	sub_6B18102E
		pop	ecx

loc_6B1A2B8C:				; CODE XREF: Ordinal1628+26j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	14h
Ordinal1628	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A2B93(void *, char)
sub_6B1A2B93	proc near		; DATA XREF: .rdata:off_6B1B8000o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1641
		test	[esp+4+arg_0], 1
		jz	short loc_6B1A2BA9
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A2BA9:				; CODE XREF: sub_6B1A2B93+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A2B93	endp

; Exported entry 1640.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1640(LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCSTR	lpString2, int)
		public Ordinal1640
Ordinal1640	proc near		; CODE XREF: Ordinal1586+22p
					; DATA XREF: .rdata:off_6B1BF428o

lpMutexAttributes= dword ptr  4
bInitialOwner	= dword	ptr  8
lpString2	= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	[esp+4+arg_C]	; int
		mov	esi, ecx
		push	[esp+8+lpString2] ; lpString2
		and	dword ptr [esi+4], 0
		push	[esp+0Ch+bInitialOwner]	; bInitialOwner
		mov	dword ptr [esi], offset	off_6B1B8000
		push	[esp+10h+lpMutexAttributes] ; lpMutexAttributes
		call	Ordinal1643
		test	eax, eax
		jnz	short loc_6B1A2BE0
		push	offset aCmutexCmutexCr ; "CMutex::CMutex() : Create() == FALSE\n"
		call	sub_6B18102E
		pop	ecx

loc_6B1A2BE0:				; CODE XREF: Ordinal1640+24j
		mov	eax, esi
		pop	esi
		retn	10h
Ordinal1640	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A2BE6(void *, char)
sub_6B1A2BE6	proc near		; DATA XREF: .rdata:off_6B1B8034o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1652
		test	[esp+4+arg_0], 1
		jz	short loc_6B1A2BFC
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A2BFC:				; CODE XREF: sub_6B1A2BE6+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A2BE6	endp

; Exported entry 1651.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1651(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset,	BOOL bInitialState, LPCSTR lpString2, int)
		public Ordinal1651
Ordinal1651	proc near		; CODE XREF: Ordinal1561+Bp
					; Ordinal1563+Bp ...

lpEventAttributes= dword ptr  8
bManualReset	= dword	ptr  0Ch
bInitialState	= dword	ptr  10h
lpString2	= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_10]	; int
		mov	esi, ecx
		push	[ebp+lpString2]	; lpString2
		and	dword ptr [esi+4], 0
		push	[ebp+bInitialState] ; bInitialState
		mov	dword ptr [esi], offset	off_6B1B8034
		push	[ebp+bManualReset] ; bManualReset
		push	[ebp+lpEventAttributes]	; lpEventAttributes
		call	Ordinal1654
		test	eax, eax
		jnz	short loc_6B1A2C35
		push	offset aCeventCeventCr ; "CEvent::CEvent() : Create() == FALSE\n"
		call	sub_6B18102E
		pop	ecx

loc_6B1A2C35:				; CODE XREF: Ordinal1651+26j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	14h
Ordinal1651	endp

; Exported entry 1681.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1681(char Args, int)
		public Ordinal1681
Ordinal1681	proc near		; CODE XREF: Ordinal1680+5Bp
					; Ordinal1694+66p
					; DATA XREF: ...

Dst		= byte ptr -18h
var_4		= dword	ptr -4
Args		= byte ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	ebx
		mov	ebx, [ebp+arg_4]
		push	esi
		push	edi
		xor	edi, edi
		mov	esi, ecx
		mov	[ebx], edi
		call	Ordinal1230
		test	al, al
		jz	short loc_6B1A2C9A
		cmp	[esi+8], edi
		jz	short loc_6B1A2C9A
		push	18h		; Size
		lea	eax, [ebp+Dst]
		push	edi		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		push	edi
		push	18h
		lea	eax, [ebp+Dst]
		push	eax
		push	edi
		push	dword ptr [ebp+Args]
		call	dword ptr [esi+8]
		cmp	eax, edi
		jz	short loc_6B1A2C90
		push	eax
		push	dword ptr [ebp+Args] ; Args
		push	offset aCntqueryinform ; "CNtQueryInformationProcess::GetParentPr"...
		call	sub_6B18102E
		add	esp, 0Ch
		jmp	short loc_6B1A2CA5
; ---------------------------------------------------------------------------

loc_6B1A2C90:				; CODE XREF: Ordinal1681+3Fj
		mov	eax, [ebp+var_4]
		mov	[ebx], eax
		xor	eax, eax
		inc	eax
		jmp	short loc_6B1A2CA7
; ---------------------------------------------------------------------------

loc_6B1A2C9A:				; CODE XREF: Ordinal1681+19j
					; Ordinal1681+1Ej
		push	offset aCntqueryinfo_0 ; "CNtQueryInformationProcess::GetParentPr"...
		call	sub_6B18102E
		pop	ecx

loc_6B1A2CA5:				; CODE XREF: Ordinal1681+52j
		xor	eax, eax

loc_6B1A2CA7:				; CODE XREF: Ordinal1681+5Cj
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal1681	endp

; Exported entry 1685.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1685
Ordinal1685	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= byte ptr  4

		cmp	[esp+arg_0], 0
		push	esi
		mov	esi, ecx
		jz	short loc_6B1A2CC1
		call	Ordinal1230
		test	al, al
		jz	short loc_6B1A2CE9

loc_6B1A2CC1:				; CODE XREF: Ordinal1685+8j
		cmp	[esp+4+arg_0], 0
		push	ebx
		mov	bl, 1
		jnz	short loc_6B1A2CD1
		and	dword ptr [esi+8], 0
		jmp	short loc_6B1A2CE6
; ---------------------------------------------------------------------------

loc_6B1A2CD1:				; CODE XREF: Ordinal1685+1Bj
		push	offset aNtqueryinforma ; "NtQueryInformationProcess"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6B1A2CE6
		xor	bl, bl

loc_6B1A2CE6:				; CODE XREF: Ordinal1685+21j
					; Ordinal1685+34j
		mov	al, bl
		pop	ebx

loc_6B1A2CE9:				; CODE XREF: Ordinal1685+11j
		pop	esi
		retn	4
Ordinal1685	endp

; Exported entry 1693.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1693
Ordinal1693	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+0B8h], eax
		retn	4
Ordinal1693	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1A2CFA	proc near		; CODE XREF: Ordinal1695+7Ap
					; Ordinal1696+82p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_128	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	ecx
		mov	eax, [ebp+arg_0]
		and	[ebp+var_4], 0
		push	ebx
		push	esi
		push	edi
		shl	eax, 2
		mov	[ebp+var_10], esp
		mov	esi, ecx
		push	eax		; unsigned int
		mov	[ebp+var_14], esi
		call	j_??2@YAPAXI@Z	; operator new(uint)
		pop	ecx
		mov	[esi], eax
		jmp	short loc_6B1A2D2F
; ---------------------------------------------------------------------------

loc_6B1A2D26:				; DATA XREF: .rdata:stru_6B1BD2E4o
		mov	eax, offset loc_6B1A2D2C
		retn
; ---------------------------------------------------------------------------

loc_6B1A2D2C:				; DATA XREF: sub_6B1A2CFA:loc_6B1A2D26o
		mov	esi, [ebp+var_14]

loc_6B1A2D2F:				; CODE XREF: sub_6B1A2CFA+2Aj
		cmp	dword ptr [esi], 0
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		setnz	al
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn	4
sub_6B1A2CFA	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A2D46	proc near		; CODE XREF: sub_6B1A3B28+57p
					; sub_6B1A3BE8+65p
		mov	eax, [ecx]
		push	ebx
		xor	bl, bl
		cmp	[eax+1Dh], bl
		jz	short loc_6B1A2D55
		mov	eax, [eax+8]
		jmp	short loc_6B1A2D81
; ---------------------------------------------------------------------------

loc_6B1A2D55:				; CODE XREF: sub_6B1A2D46+8j
		mov	edx, [eax]
		cmp	[edx+1Dh], bl
		jnz	short loc_6B1A2D74
		jmp	short loc_6B1A2D60
; ---------------------------------------------------------------------------

loc_6B1A2D5E:				; CODE XREF: sub_6B1A2D46+20j
		mov	edx, eax

loc_6B1A2D60:				; CODE XREF: sub_6B1A2D46+16j
		mov	eax, [edx+8]
		cmp	[eax+1Dh], bl
		jz	short loc_6B1A2D5E
		mov	[ecx], edx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6B1A2D6C:				; CODE XREF: sub_6B1A2D46+34j
		mov	edx, [ecx]
		cmp	edx, [eax]
		jnz	short loc_6B1A2D7C
		mov	[ecx], eax

loc_6B1A2D74:				; CODE XREF: sub_6B1A2D46+14j
		mov	eax, [eax+4]
		cmp	[eax+1Dh], bl
		jz	short loc_6B1A2D6C

loc_6B1A2D7C:				; CODE XREF: sub_6B1A2D46+2Aj
		cmp	[eax+1Dh], bl
		jnz	short loc_6B1A2D83

loc_6B1A2D81:				; CODE XREF: sub_6B1A2D46+Dj
		mov	[ecx], eax

loc_6B1A2D83:				; CODE XREF: sub_6B1A2D46+39j
		pop	ebx
		retn
sub_6B1A2D46	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A2D85	proc near		; CODE XREF: sub_6B1A343E+52p
					; sub_6B1A3718+2Fp ...
		mov	eax, [ecx]
		push	ebx
		xor	bl, bl
		cmp	[eax+1Dh], bl
		jnz	short loc_6B1A2DB9
		mov	edx, [eax+8]
		cmp	[edx+1Dh], bl
		jnz	short loc_6B1A2DAF
		jmp	short loc_6B1A2D9B
; ---------------------------------------------------------------------------

loc_6B1A2D99:				; CODE XREF: sub_6B1A2D85+1Bj
		mov	edx, eax

loc_6B1A2D9B:				; CODE XREF: sub_6B1A2D85+12j
		mov	eax, [edx]
		cmp	[eax+1Dh], bl
		jz	short loc_6B1A2D99
		mov	[ecx], edx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6B1A2DA6:				; CODE XREF: sub_6B1A2D85+30j
		mov	edx, [ecx]
		cmp	edx, [eax+8]
		jnz	short loc_6B1A2DB7
		mov	[ecx], eax

loc_6B1A2DAF:				; CODE XREF: sub_6B1A2D85+10j
		mov	eax, [eax+4]
		cmp	[eax+1Dh], bl
		jz	short loc_6B1A2DA6

loc_6B1A2DB7:				; CODE XREF: sub_6B1A2D85+26j
		mov	[ecx], eax

loc_6B1A2DB9:				; CODE XREF: sub_6B1A2D85+8j
		pop	ebx
		retn
sub_6B1A2D85	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A2DBB	proc near		; CODE XREF: sub_6B1A4A85+57p
					; sub_6B1A4B16+65p
		mov	eax, [ecx]
		push	ebx
		xor	bl, bl
		cmp	[eax+31h], bl
		jz	short loc_6B1A2DCA
		mov	eax, [eax+8]
		jmp	short loc_6B1A2DF6
; ---------------------------------------------------------------------------

loc_6B1A2DCA:				; CODE XREF: sub_6B1A2DBB+8j
		mov	edx, [eax]
		cmp	[edx+31h], bl
		jnz	short loc_6B1A2DE9
		jmp	short loc_6B1A2DD5
; ---------------------------------------------------------------------------

loc_6B1A2DD3:				; CODE XREF: sub_6B1A2DBB+20j
		mov	edx, eax

loc_6B1A2DD5:				; CODE XREF: sub_6B1A2DBB+16j
		mov	eax, [edx+8]
		cmp	[eax+31h], bl
		jz	short loc_6B1A2DD3
		mov	[ecx], edx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6B1A2DE1:				; CODE XREF: sub_6B1A2DBB+34j
		mov	edx, [ecx]
		cmp	edx, [eax]
		jnz	short loc_6B1A2DF1
		mov	[ecx], eax

loc_6B1A2DE9:				; CODE XREF: sub_6B1A2DBB+14j
		mov	eax, [eax+4]
		cmp	[eax+31h], bl
		jz	short loc_6B1A2DE1

loc_6B1A2DF1:				; CODE XREF: sub_6B1A2DBB+2Aj
		cmp	[eax+31h], bl
		jnz	short loc_6B1A2DF8

loc_6B1A2DF6:				; CODE XREF: sub_6B1A2DBB+Dj
		mov	[ecx], eax

loc_6B1A2DF8:				; CODE XREF: sub_6B1A2DBB+39j
		pop	ebx
		retn
sub_6B1A2DBB	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A2DFA	proc near		; CODE XREF: sub_6B1A3CC3+52p
					; sub_6B1A470E+2Fp ...
		mov	eax, [ecx]
		push	ebx
		xor	bl, bl
		cmp	[eax+31h], bl
		jnz	short loc_6B1A2E2E
		mov	edx, [eax+8]
		cmp	[edx+31h], bl
		jnz	short loc_6B1A2E24
		jmp	short loc_6B1A2E10
; ---------------------------------------------------------------------------

loc_6B1A2E0E:				; CODE XREF: sub_6B1A2DFA+1Bj
		mov	edx, eax

loc_6B1A2E10:				; CODE XREF: sub_6B1A2DFA+12j
		mov	eax, [edx]
		cmp	[eax+31h], bl
		jz	short loc_6B1A2E0E
		mov	[ecx], edx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6B1A2E1B:				; CODE XREF: sub_6B1A2DFA+30j
		mov	edx, [ecx]
		cmp	edx, [eax+8]
		jnz	short loc_6B1A2E2C
		mov	[ecx], eax

loc_6B1A2E24:				; CODE XREF: sub_6B1A2DFA+10j
		mov	eax, [eax+4]
		cmp	[eax+31h], bl
		jz	short loc_6B1A2E1B

loc_6B1A2E2C:				; CODE XREF: sub_6B1A2DFA+26j
		mov	[ecx], eax

loc_6B1A2E2E:				; CODE XREF: sub_6B1A2DFA+8j
		pop	ebx
		retn
sub_6B1A2DFA	endp

; Exported entry 1676.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1676
Ordinal1676	proc near		; CODE XREF: Ordinal1686+14p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	Ordinal1219
		and	dword ptr [esi+8], 0
		mov	dword ptr [esi], offset	off_6B1B845C
		mov	eax, esi
		pop	esi
		retn
Ordinal1676	endp

; Exported entry 1680.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1680(DWORD Args,	int)
		public Ordinal1680
Ordinal1680	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_8		= byte ptr -8
Args		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	esi
		mov	esi, [ebp+arg_4]
		and	dword ptr [esi], 0
		push	edi
		push	[ebp+Args]	; dwProcessId
		mov	edi, ecx
		push	0		; bInheritHandle
		push	410h		; dwDesiredAccess
		call	ds:OpenProcess
		push	eax
		lea	ecx, [ebp+var_8]
		call	Ordinal1151
		lea	ecx, [ebp+var_8]
		call	Ordinal1649
		test	eax, eax
		jnz	short loc_6B1A2E95
		call	ds:GetLastError
		push	eax
		push	[ebp+Args]	; Args
		push	offset aCntqueryinfo_1 ; "CNtQueryInformationProcess::GetParentPr"...
		call	sub_6B18102E
		add	esp, 0Ch
		xor	esi, esi
		jmp	short loc_6B1A2EA8
; ---------------------------------------------------------------------------

loc_6B1A2E95:				; CODE XREF: Ordinal1680+32j
		push	esi		; int
		lea	ecx, [ebp+var_8]
		call	Ordinal1649
		push	eax		; Args
		mov	ecx, edi
		call	Ordinal1681
		mov	esi, eax

loc_6B1A2EA8:				; CODE XREF: Ordinal1680+4Dj
		lea	ecx, [ebp+var_8]
		call	Ordinal1152
		pop	edi
		mov	eax, esi
		pop	esi
		leave
		retn	8
Ordinal1680	endp

; Exported entry 1682.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1682(LPCSTR Args)
		public Ordinal1682
Ordinal1682	proc near		; CODE XREF: Ordinal1678+13p
					; DATA XREF: .rdata:off_6B1BF428o

Args		= dword	ptr  4

		push	esi
		push	[esp+4+Args]	; Args
		mov	esi, ecx
		call	Ordinal1226
		test	al, al
		jz	short loc_6B1A2ED3
		mov	ecx, esi
		call	Ordinal1230
		test	al, al
		jnz	short loc_6B1A2ED7

loc_6B1A2ED3:				; CODE XREF: Ordinal1682+Ej
		xor	al, al
		jmp	short loc_6B1A2EF2
; ---------------------------------------------------------------------------

loc_6B1A2ED7:				; CODE XREF: Ordinal1682+19j
		push	ebx
		push	offset aNtqueryinforma ; "NtQueryInformationProcess"
		mov	ecx, esi
		mov	bl, 1
		call	Ordinal1229
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6B1A2EEF
		xor	bl, bl

loc_6B1A2EEF:				; CODE XREF: Ordinal1682+33j
		mov	al, bl
		pop	ebx

loc_6B1A2EF2:				; CODE XREF: Ordinal1682+1Dj
		pop	esi
		retn	4
Ordinal1682	endp

; Exported entry 1683.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1683(LPCSTR Args, DWORD dwFlags)
		public Ordinal1683
Ordinal1683	proc near		; DATA XREF: .rdata:off_6B1BF428o

Args		= dword	ptr  4
dwFlags		= dword	ptr  8

		push	esi
		push	[esp+4+dwFlags]	; dwFlags
		mov	esi, ecx
		push	[esp+8+Args]	; Args
		call	Ordinal1227
		test	al, al
		jz	short loc_6B1A2F15
		mov	ecx, esi
		call	Ordinal1230
		test	al, al
		jnz	short loc_6B1A2F19

loc_6B1A2F15:				; CODE XREF: Ordinal1683+12j
		xor	al, al
		jmp	short loc_6B1A2F34
; ---------------------------------------------------------------------------

loc_6B1A2F19:				; CODE XREF: Ordinal1683+1Dj
		push	ebx
		push	offset aNtqueryinforma ; "NtQueryInformationProcess"
		mov	ecx, esi
		mov	bl, 1
		call	Ordinal1229
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6B1A2F31
		xor	bl, bl

loc_6B1A2F31:				; CODE XREF: Ordinal1683+37j
		mov	al, bl
		pop	ebx

loc_6B1A2F34:				; CODE XREF: Ordinal1683+21j
		pop	esi
		retn	8
Ordinal1683	endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_6B1A9A4F

loc_6B1A2F38:				; CODE XREF: sub_6B1A9A4F+3j
					; sub_6B1A9AB3+3j
		push	esi
		mov	esi, ecx
		push	dword ptr [esi]	; void *
		call	??_V@YAXPAX@Z	; operator delete[](void *)
		and	dword ptr [esi], 0
		pop	ecx
		pop	esi
		retn
; END OF FUNCTION CHUNK	FOR sub_6B1A9A4F

; =============== S U B	R O U T	I N E =======================================


sub_6B1A2F48	proc near		; CODE XREF: sub_6B1A3F51+16p

arg_0		= dword	ptr  4

		mov	eax, [ecx+4]
		mov	ecx, [eax+4]
		cmp	byte ptr [ecx+1Dh], 0
		jnz	short locret_6B1A2F6E
		mov	edx, [esp+arg_0]
		mov	edx, [edx]

loc_6B1A2F5A:				; CODE XREF: sub_6B1A2F48+24j
		cmp	[ecx+0Ch], edx
		jnb	short loc_6B1A2F64
		mov	ecx, [ecx+8]
		jmp	short loc_6B1A2F68
; ---------------------------------------------------------------------------

loc_6B1A2F64:				; CODE XREF: sub_6B1A2F48+15j
		mov	eax, ecx
		mov	ecx, [ecx]

loc_6B1A2F68:				; CODE XREF: sub_6B1A2F48+1Aj
		cmp	byte ptr [ecx+1Dh], 0
		jz	short loc_6B1A2F5A

locret_6B1A2F6E:			; CODE XREF: sub_6B1A2F48+Aj
		retn	4
sub_6B1A2F48	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A2F71	proc near		; CODE XREF: sub_6B1A4BF1+16p

arg_0		= dword	ptr  4

		mov	eax, [ecx+4]
		mov	ecx, [eax+4]
		cmp	byte ptr [ecx+31h], 0
		jnz	short locret_6B1A2F97
		mov	edx, [esp+arg_0]
		mov	edx, [edx]

loc_6B1A2F83:				; CODE XREF: sub_6B1A2F71+24j
		cmp	[ecx+0Ch], edx
		jnb	short loc_6B1A2F8D
		mov	ecx, [ecx+8]
		jmp	short loc_6B1A2F91
; ---------------------------------------------------------------------------

loc_6B1A2F8D:				; CODE XREF: sub_6B1A2F71+15j
		mov	eax, ecx
		mov	ecx, [ecx]

loc_6B1A2F91:				; CODE XREF: sub_6B1A2F71+1Aj
		cmp	byte ptr [ecx+31h], 0
		jz	short loc_6B1A2F83

locret_6B1A2F97:			; CODE XREF: sub_6B1A2F71+Aj
		retn	4
sub_6B1A2F71	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A2F9A	proc near		; CODE XREF: sub_6B1A343E+17Cp
					; sub_6B1A343E+1CFp ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, [edx+8]
		push	esi
		mov	esi, [eax]
		mov	[edx+8], esi
		mov	esi, [eax]
		cmp	byte ptr [esi+1Dh], 0
		jnz	short loc_6B1A2FB2
		mov	[esi+4], edx

loc_6B1A2FB2:				; CODE XREF: sub_6B1A2F9A+13j
		mov	esi, [edx+4]
		mov	[eax+4], esi
		mov	ecx, [ecx+4]
		cmp	edx, [ecx+4]
		pop	esi
		jnz	short loc_6B1A2FC6
		mov	[ecx+4], eax
		jmp	short loc_6B1A2FD4
; ---------------------------------------------------------------------------

loc_6B1A2FC6:				; CODE XREF: sub_6B1A2F9A+25j
		mov	ecx, [edx+4]
		cmp	edx, [ecx]
		jnz	short loc_6B1A2FD1
		mov	[ecx], eax
		jmp	short loc_6B1A2FD4
; ---------------------------------------------------------------------------

loc_6B1A2FD1:				; CODE XREF: sub_6B1A2F9A+31j
		mov	[ecx+8], eax

loc_6B1A2FD4:				; CODE XREF: sub_6B1A2F9A+2Aj
					; sub_6B1A2F9A+35j
		mov	[eax], edx
		mov	[edx+4], eax
		retn	4
sub_6B1A2F9A	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A2FDC	proc near		; CODE XREF: sub_6B1A343E+1B2p
					; sub_6B1A343E+1E5p ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, [edx]
		push	esi
		mov	esi, [eax+8]
		mov	[edx], esi
		mov	esi, [eax+8]
		cmp	byte ptr [esi+1Dh], 0
		jnz	short loc_6B1A2FF4
		mov	[esi+4], edx

loc_6B1A2FF4:				; CODE XREF: sub_6B1A2FDC+13j
		mov	esi, [edx+4]
		mov	[eax+4], esi
		mov	ecx, [ecx+4]
		cmp	edx, [ecx+4]
		pop	esi
		jnz	short loc_6B1A3008
		mov	[ecx+4], eax
		jmp	short loc_6B1A3017
; ---------------------------------------------------------------------------

loc_6B1A3008:				; CODE XREF: sub_6B1A2FDC+25j
		mov	ecx, [edx+4]
		cmp	edx, [ecx+8]
		jnz	short loc_6B1A3015
		mov	[ecx+8], eax
		jmp	short loc_6B1A3017
; ---------------------------------------------------------------------------

loc_6B1A3015:				; CODE XREF: sub_6B1A2FDC+32j
		mov	[ecx], eax

loc_6B1A3017:				; CODE XREF: sub_6B1A2FDC+2Aj
					; sub_6B1A2FDC+37j
		mov	[eax+8], edx
		mov	[edx+4], eax
		retn	4
sub_6B1A2FDC	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A3020	proc near		; CODE XREF: sub_6B1A3CC3+17Cp
					; sub_6B1A3CC3+1CFp ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, [edx+8]
		push	esi
		mov	esi, [eax]
		mov	[edx+8], esi
		mov	esi, [eax]
		cmp	byte ptr [esi+31h], 0
		jnz	short loc_6B1A3038
		mov	[esi+4], edx

loc_6B1A3038:				; CODE XREF: sub_6B1A3020+13j
		mov	esi, [edx+4]
		mov	[eax+4], esi
		mov	ecx, [ecx+4]
		cmp	edx, [ecx+4]
		pop	esi
		jnz	short loc_6B1A304C
		mov	[ecx+4], eax
		jmp	short loc_6B1A305A
; ---------------------------------------------------------------------------

loc_6B1A304C:				; CODE XREF: sub_6B1A3020+25j
		mov	ecx, [edx+4]
		cmp	edx, [ecx]
		jnz	short loc_6B1A3057
		mov	[ecx], eax
		jmp	short loc_6B1A305A
; ---------------------------------------------------------------------------

loc_6B1A3057:				; CODE XREF: sub_6B1A3020+31j
		mov	[ecx+8], eax

loc_6B1A305A:				; CODE XREF: sub_6B1A3020+2Aj
					; sub_6B1A3020+35j
		mov	[eax], edx
		mov	[edx+4], eax
		retn	4
sub_6B1A3020	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A3062	proc near		; CODE XREF: sub_6B1A3CC3+1B2p
					; sub_6B1A3CC3+1E5p ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, [edx]
		push	esi
		mov	esi, [eax+8]
		mov	[edx], esi
		mov	esi, [eax+8]
		cmp	byte ptr [esi+31h], 0
		jnz	short loc_6B1A307A
		mov	[esi+4], edx

loc_6B1A307A:				; CODE XREF: sub_6B1A3062+13j
		mov	esi, [edx+4]
		mov	[eax+4], esi
		mov	ecx, [ecx+4]
		cmp	edx, [ecx+4]
		pop	esi
		jnz	short loc_6B1A308E
		mov	[ecx+4], eax
		jmp	short loc_6B1A309D
; ---------------------------------------------------------------------------

loc_6B1A308E:				; CODE XREF: sub_6B1A3062+25j
		mov	ecx, [edx+4]
		cmp	edx, [ecx+8]
		jnz	short loc_6B1A309B
		mov	[ecx+8], eax
		jmp	short loc_6B1A309D
; ---------------------------------------------------------------------------

loc_6B1A309B:				; CODE XREF: sub_6B1A3062+32j
		mov	[ecx], eax

loc_6B1A309D:				; CODE XREF: sub_6B1A3062+2Aj
					; sub_6B1A3062+37j
		mov	[eax+8], edx
		mov	[edx+4], eax
		retn	4
sub_6B1A3062	endp

; Exported entry 1689.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1689
Ordinal1689	proc near		; CODE XREF: Ordinal1687+9p
					; Ordinal1688+3p ...
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+4]
		call	Ordinal1309
		lea	ecx, [esi+7Ch]
		call	Ordinal1794
		lea	ecx, [esi+6Ch]
		and	dword ptr [ecx+8], 0
		pop	esi
		jmp	Ordinal1228
Ordinal1689	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A30C6	proc near		; CODE XREF: sub_6B1A3231+3p
		push	20h		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		xor	edx, edx
		cmp	eax, edx
		pop	ecx
		jz	short loc_6B1A30D6
		mov	[eax], edx

loc_6B1A30D6:				; CODE XREF: sub_6B1A30C6+Cj
		lea	ecx, [eax+4]
		cmp	ecx, edx
		jz	short loc_6B1A30DF
		mov	[ecx], edx

loc_6B1A30DF:				; CODE XREF: sub_6B1A30C6+15j
		lea	ecx, [eax+8]
		cmp	ecx, edx
		jz	short loc_6B1A30E8
		mov	[ecx], edx

loc_6B1A30E8:				; CODE XREF: sub_6B1A30C6+1Ej
		mov	byte ptr [eax+1Ch], 1
		mov	[eax+1Dh], dl
		retn
sub_6B1A30C6	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A30F0	proc near		; CODE XREF: sub_6B1A3256+3p
		push	34h		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		xor	edx, edx
		cmp	eax, edx
		pop	ecx
		jz	short loc_6B1A3100
		mov	[eax], edx

loc_6B1A3100:				; CODE XREF: sub_6B1A30F0+Cj
		lea	ecx, [eax+4]
		cmp	ecx, edx
		jz	short loc_6B1A3109
		mov	[ecx], edx

loc_6B1A3109:				; CODE XREF: sub_6B1A30F0+15j
		lea	ecx, [eax+8]
		cmp	ecx, edx
		jz	short loc_6B1A3112
		mov	[ecx], edx

loc_6B1A3112:				; CODE XREF: sub_6B1A30F0+1Ej
		mov	byte ptr [eax+30h], 1
		mov	[eax+31h], dl
		retn
sub_6B1A30F0	endp

; Exported entry 1667.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1667
Ordinal1667	proc near		; CODE XREF: sub_6B1A327B-4Fj
					; sub_6B1A329C+3p ...
		mov	dword ptr [ecx], offset	off_6B1B84B8
		add	ecx, 8
		jmp	sub_6B1899B5
Ordinal1667	endp

; Exported entry 1670.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1670
Ordinal1670	proc near		; DATA XREF: .rdata:off_6B1BF428o
		and	dword ptr [ecx+4], 0
		add	ecx, 8
		jmp	sub_6B18175E
Ordinal1670	endp

; Exported entry 1677.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1677
Ordinal1677	proc near		; CODE XREF: Ordinal1687+19p
					; sub_6B1A32B8+3p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+8], 0
		mov	dword ptr [esi], offset	off_6B1B845C
		call	Ordinal1228
		mov	ecx, esi
		pop	esi
		jmp	Ordinal1221
Ordinal1677	endp

; Exported entry 1678.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1678
Ordinal1678	proc near		; CODE XREF: Ordinal1688+1Bp
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+8], 0
		call	Ordinal1228
		push	offset aNtdll_dll ; "NTDLL.DLL"
		mov	ecx, esi
		call	Ordinal1682
		movzx	eax, al
		pop	esi
		retn
Ordinal1678	endp

; Exported entry 1686.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1686
Ordinal1686	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+4]
		mov	dword ptr [esi], offset	off_6B1B84C8
		call	Ordinal1302
		lea	ecx, [esi+6Ch]
		call	Ordinal1676
		and	dword ptr [esi+78h], 0
		lea	ecx, [esi+7Ch]
		call	Ordinal1787
		and	dword ptr [esi+0B4h], 0
		and	dword ptr [esi+0B8h], 0
		mov	eax, esi
		pop	esi
		retn
Ordinal1686	endp

; Exported entry 1687.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1687
Ordinal1687	proc near		; CODE XREF: sub_6B1A32D4+3p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1B84C8
		call	Ordinal1689
		lea	ecx, [esi+7Ch]
		call	Ordinal1788
		lea	ecx, [esi+6Ch]
		call	Ordinal1677
		lea	ecx, [esi+4]
		pop	esi
		jmp	Ordinal1303
Ordinal1687	endp

; Exported entry 1688.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1688
Ordinal1688	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	Ordinal1689
		and	dword ptr [esi+78h], 0
		lea	ecx, [esi+4]
		call	Ordinal1308
		test	al, al
		jz	short loc_6B1A31F4
		lea	ecx, [esi+6Ch]
		call	Ordinal1678
		test	eax, eax
		jz	short loc_6B1A31F4
		mov	dword ptr [esi+78h], 1

loc_6B1A31F4:				; CODE XREF: Ordinal1688+16j
					; Ordinal1688+22j
		lea	ecx, [esi+7Ch]
		call	Ordinal1793
		movzx	eax, al
		test	eax, eax
		mov	[esi+0B4h], eax
		jnz	short loc_6B1A3224
		cmp	[esi+78h], eax
		jnz	short loc_6B1A3224
		push	offset aCsysteminfoCre ; "CSystemInfo::Create()	: m_bToolHelpOk	="...
		call	sub_6B18102E
		pop	ecx
		mov	ecx, esi
		call	Ordinal1689
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6B1A3224:				; CODE XREF: Ordinal1688+3Ej
					; Ordinal1688+43j
		xor	eax, eax
		inc	eax
		pop	esi
		retn
Ordinal1688	endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_6B1A327B

loc_6B1A3229:				; CODE XREF: sub_6B1A327B+3j
					; sub_6B1A9A23+3j
		add	ecx, 4
		jmp	Ordinal1667
; END OF FUNCTION CHUNK	FOR sub_6B1A327B

; =============== S U B	R O U T	I N E =======================================


sub_6B1A3231	proc near		; CODE XREF: sub_6B1A3841+3p
		push	esi
		mov	esi, ecx
		call	sub_6B1A30C6
		lea	ecx, [esi+4]
		mov	[ecx], eax
		mov	byte ptr [eax+1Dh], 1
		mov	eax, [ecx]
		mov	[eax+4], eax
		mov	eax, [ecx]
		mov	[eax], eax
		mov	ecx, [ecx]
		mov	[ecx+8], ecx
		and	dword ptr [esi+8], 0
		pop	esi
		retn
sub_6B1A3231	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A3256	proc near		; CODE XREF: sub_6B1A48E2+3p
		push	esi
		mov	esi, ecx
		call	sub_6B1A30F0
		lea	ecx, [esi+4]
		mov	[ecx], eax
		mov	byte ptr [eax+31h], 1
		mov	eax, [ecx]
		mov	[eax+4], eax
		mov	eax, [ecx]
		mov	[eax], eax
		mov	ecx, [ecx]
		mov	[ecx+8], ecx
		and	dword ptr [esi+8], 0
		pop	esi
		retn
sub_6B1A3256	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A327B	proc near		; CODE XREF: sub_6B1A3405+1Fp

; FUNCTION CHUNK AT 6B1A3229 SIZE 00000008 BYTES

		add	ecx, 0Ch
		jmp	loc_6B1A3229
sub_6B1A327B	endp

; Exported entry 1666.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1666
Ordinal1666	proc near		; CODE XREF: sub_6B1A3F51+2Cp
					; Ordinal1695+F3p ...
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+4], 0
		lea	ecx, [esi+8]
		mov	dword ptr [esi], offset	off_6B1B84B8
		call	sub_6B181879
		mov	eax, esi
		pop	esi
		retn
Ordinal1666	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A329C(void *, char)
sub_6B1A329C	proc near		; DATA XREF: .rdata:off_6B1B84B8o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1667
		test	[esp+4+arg_0], 1
		jz	short loc_6B1A32B2
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A32B2:				; CODE XREF: sub_6B1A329C+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A329C	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A32B8(void *, char)
sub_6B1A32B8	proc near		; DATA XREF: .rdata:off_6B1B845Co

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1677
		test	[esp+4+arg_0], 1
		jz	short loc_6B1A32CE
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A32CE:				; CODE XREF: sub_6B1A32B8+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A32B8	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A32D4(void *, char)
sub_6B1A32D4	proc near		; DATA XREF: .rdata:off_6B1B84C8o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1687
		test	[esp+4+arg_0], 1
		jz	short loc_6B1A32EA
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A32EA:				; CODE XREF: sub_6B1A32D4+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A32D4	endp

; Exported entry 1669.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1669
Ordinal1669	proc near		; CODE XREF: Ordinal1668+1Bp
					; Ordinal1695+1A3p ...

var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_129	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		mov	esi, ecx
		cmp	esi, edi
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_28], esi
		jz	loc_6B1A33EA
		mov	eax, [edi+4]
		push	offset aCmoduleinfoOpe ; "CModuleInfo::operator	=()"
		lea	ecx, [ebp+var_48]
		mov	[esi+4], eax
		call	Ordinal1089
		and	[ebp+var_4], 0
		add	edi, 8
		lea	ecx, [esi+8]
		push	edi
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B181F8B
		jmp	loc_6B1A33E2
; ---------------------------------------------------------------------------

loc_6B1A3347:				; DATA XREF: .rdata:6B1BD348o
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A33DF
		retn
; ---------------------------------------------------------------------------

loc_6B1A338A:				; DATA XREF: .rdata:6B1BD358o
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	eax, [ebp+var_4C]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A33DF
		retn
; ---------------------------------------------------------------------------

loc_6B1A33DF:				; DATA XREF: Ordinal1669+94o
					; Ordinal1669+E9o
		mov	esi, [ebp+var_28]

loc_6B1A33E2:				; CODE XREF: Ordinal1669+52j
		lea	ecx, [ebp+var_48]
		call	Ordinal1090

loc_6B1A33EA:				; CODE XREF: Ordinal1669+25j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal1669	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6B1A3405(void *)
sub_6B1A3405	proc near		; CODE XREF: sub_6B1A3405+16p
					; sub_6B1A36F2+Cp ...

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		cmp	byte ptr [edi+1Dh], 0
		mov	ebx, ecx
		mov	esi, edi
		jnz	short loc_6B1A3438

loc_6B1A3416:				; CODE XREF: sub_6B1A3405+31j
		push	dword ptr [esi+8] ; void *
		mov	ecx, ebx
		call	sub_6B1A3405
		mov	esi, [esi]
		mov	ecx, edi
		call	sub_6B1A327B
		push	edi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		cmp	byte ptr [esi+1Dh], 0
		pop	ecx
		mov	edi, esi
		jz	short loc_6B1A3416

loc_6B1A3438:				; CODE XREF: sub_6B1A3405+Fj
		pop	edi
		pop	esi
		pop	ebx
		retn	4
sub_6B1A3405	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6B1A343E(int, void *)
sub_6B1A343E	proc near		; CODE XREF: sub_6B1A3718+3Bp

var_54		= dword	ptr -54h
var_2C		= byte ptr -2Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_130	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 48h
		push	ebx
		mov	ebx, [ebp+arg_4]
		cmp	byte ptr [ebx+1Dh], 0
		push	esi
		push	edi
		mov	[ebp+var_10], ecx
		jz	short loc_6B1A348D
		push	offset aInvalidMapSetT ; "invalid map/set<T> iterator"
		lea	ecx, [ebp+var_2C]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_2C]
		push	eax
		lea	ecx, [ebp+var_54]
		call	sub_6B181357
		push	offset dword_6B1BAA6C
		lea	eax, [ebp+var_54]
		push	eax
		mov	[ebp+var_54], offset off_6B1AA91C
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B1A348D:				; CODE XREF: sub_6B1A343E+1Aj
		lea	ecx, [ebp+arg_4]
		call	sub_6B1A2D85
		mov	ecx, [ebx]
		cmp	byte ptr [ecx+1Dh], 0
		jz	short loc_6B1A34A2
		mov	edi, [ebx+8]
		jmp	short loc_6B1A34B9
; ---------------------------------------------------------------------------

loc_6B1A34A2:				; CODE XREF: sub_6B1A343E+5Dj
		mov	eax, [ebx+8]
		cmp	byte ptr [eax+1Dh], 0
		jz	short loc_6B1A34AF
		mov	edi, ecx
		jmp	short loc_6B1A34B9
; ---------------------------------------------------------------------------

loc_6B1A34AF:				; CODE XREF: sub_6B1A343E+6Bj
		mov	eax, [ebp+arg_4]
		cmp	eax, ebx
		mov	edi, [eax+8]
		jnz	short loc_6B1A352F

loc_6B1A34B9:				; CODE XREF: sub_6B1A343E+62j
					; sub_6B1A343E+6Fj
		cmp	byte ptr [edi+1Dh], 0
		mov	esi, [ebx+4]
		jnz	short loc_6B1A34C5
		mov	[edi+4], esi

loc_6B1A34C5:				; CODE XREF: sub_6B1A343E+82j
		mov	ecx, [ebp+var_10]
		mov	eax, [ecx+4]
		cmp	[eax+4], ebx
		jnz	short loc_6B1A34D5
		mov	[eax+4], edi
		jmp	short loc_6B1A34E0
; ---------------------------------------------------------------------------

loc_6B1A34D5:				; CODE XREF: sub_6B1A343E+90j
		cmp	[esi], ebx
		jnz	short loc_6B1A34DD
		mov	[esi], edi
		jmp	short loc_6B1A34E0
; ---------------------------------------------------------------------------

loc_6B1A34DD:				; CODE XREF: sub_6B1A343E+99j
		mov	[esi+8], edi

loc_6B1A34E0:				; CODE XREF: sub_6B1A343E+95j
					; sub_6B1A343E+9Dj
		mov	ecx, [ecx+4]
		cmp	[ecx], ebx
		jnz	short loc_6B1A3503
		cmp	byte ptr [edi+1Dh], 0
		jz	short loc_6B1A34F1
		mov	edx, esi
		jmp	short loc_6B1A3501
; ---------------------------------------------------------------------------

loc_6B1A34F1:				; CODE XREF: sub_6B1A343E+ADj
		mov	eax, [edi]
		mov	edx, edi
		jmp	short loc_6B1A34FB
; ---------------------------------------------------------------------------

loc_6B1A34F7:				; CODE XREF: sub_6B1A343E+C1j
		mov	edx, eax
		mov	eax, [edx]

loc_6B1A34FB:				; CODE XREF: sub_6B1A343E+B7j
		cmp	byte ptr [eax+1Dh], 0
		jz	short loc_6B1A34F7

loc_6B1A3501:				; CODE XREF: sub_6B1A343E+B1j
		mov	[ecx], edx

loc_6B1A3503:				; CODE XREF: sub_6B1A343E+A7j
		mov	eax, [ebp+var_10]
		mov	ecx, [eax+4]
		cmp	[ecx+8], ebx
		jnz	short loc_6B1A3589
		cmp	byte ptr [edi+1Dh], 0
		jz	short loc_6B1A3518
		mov	edx, esi
		jmp	short loc_6B1A352A
; ---------------------------------------------------------------------------

loc_6B1A3518:				; CODE XREF: sub_6B1A343E+D4j
		mov	eax, [edi+8]
		mov	edx, edi
		jmp	short loc_6B1A3524
; ---------------------------------------------------------------------------

loc_6B1A351F:				; CODE XREF: sub_6B1A343E+EAj
		mov	edx, eax
		mov	eax, [edx+8]

loc_6B1A3524:				; CODE XREF: sub_6B1A343E+DFj
		cmp	byte ptr [eax+1Dh], 0
		jz	short loc_6B1A351F

loc_6B1A352A:				; CODE XREF: sub_6B1A343E+D8j
		mov	[ecx+8], edx
		jmp	short loc_6B1A3589
; ---------------------------------------------------------------------------

loc_6B1A352F:				; CODE XREF: sub_6B1A343E+79j
		mov	[ecx+4], eax
		mov	ecx, [ebx]
		mov	[eax], ecx
		cmp	eax, [ebx+8]
		jnz	short loc_6B1A353F
		mov	esi, eax
		jmp	short loc_6B1A3559
; ---------------------------------------------------------------------------

loc_6B1A353F:				; CODE XREF: sub_6B1A343E+FBj
		cmp	byte ptr [edi+1Dh], 0
		mov	esi, [eax+4]
		jnz	short loc_6B1A354B
		mov	[edi+4], esi

loc_6B1A354B:				; CODE XREF: sub_6B1A343E+108j
		mov	[esi], edi
		mov	ecx, [ebx+8]
		mov	[eax+8], ecx
		mov	ecx, [ebx+8]
		mov	[ecx+4], eax

loc_6B1A3559:				; CODE XREF: sub_6B1A343E+FFj
		mov	ecx, [ebp+var_10]
		mov	ecx, [ecx+4]
		cmp	[ecx+4], ebx
		jnz	short loc_6B1A3569
		mov	[ecx+4], eax
		jmp	short loc_6B1A3577
; ---------------------------------------------------------------------------

loc_6B1A3569:				; CODE XREF: sub_6B1A343E+124j
		mov	ecx, [ebx+4]
		cmp	[ecx], ebx
		jnz	short loc_6B1A3574
		mov	[ecx], eax
		jmp	short loc_6B1A3577
; ---------------------------------------------------------------------------

loc_6B1A3574:				; CODE XREF: sub_6B1A343E+130j
		mov	[ecx+8], eax

loc_6B1A3577:				; CODE XREF: sub_6B1A343E+129j
					; sub_6B1A343E+134j
		mov	ecx, [ebx+4]
		mov	[eax+4], ecx
		mov	dl, [ebx+1Ch]
		mov	cl, [eax+1Ch]
		mov	[eax+1Ch], dl
		mov	[ebx+1Ch], cl

loc_6B1A3589:				; CODE XREF: sub_6B1A343E+CEj
					; sub_6B1A343E+EFj
		cmp	byte ptr [ebx+1Ch], 1
		jnz	loc_6B1A3696
		jmp	loc_6B1A364A
; ---------------------------------------------------------------------------

loc_6B1A3598:				; CODE XREF: sub_6B1A343E+215j
		cmp	byte ptr [edi+1Ch], 1
		jnz	loc_6B1A3692
		mov	eax, [esi]
		cmp	edi, eax
		jnz	short loc_6B1A3614
		mov	eax, [esi+8]
		cmp	byte ptr [eax+1Ch], 0
		jnz	short loc_6B1A35C2
		mov	byte ptr [eax+1Ch], 1
		push	esi
		mov	byte ptr [esi+1Ch], 0
		call	sub_6B1A2F9A
		mov	eax, [esi+8]

loc_6B1A35C2:				; CODE XREF: sub_6B1A343E+171j
		cmp	byte ptr [eax+1Dh], 0
		jnz	short loc_6B1A3645
		mov	ecx, [eax]
		cmp	byte ptr [ecx+1Ch], 1
		jnz	short loc_6B1A35D9
		mov	ecx, [eax+8]
		cmp	byte ptr [ecx+1Ch], 1
		jz	short loc_6B1A3641

loc_6B1A35D9:				; CODE XREF: sub_6B1A343E+190j
		mov	ecx, [eax+8]
		cmp	byte ptr [ecx+1Ch], 1
		jnz	short loc_6B1A35F8
		mov	ecx, [eax]
		mov	byte ptr [ecx+1Ch], 1
		mov	ecx, [ebp+var_10]
		push	eax
		mov	byte ptr [eax+1Ch], 0
		call	sub_6B1A2FDC
		mov	eax, [esi+8]

loc_6B1A35F8:				; CODE XREF: sub_6B1A343E+1A2j
		mov	cl, [esi+1Ch]
		mov	[eax+1Ch], cl
		mov	ecx, [ebp+var_10]
		mov	byte ptr [esi+1Ch], 1
		mov	eax, [eax+8]
		push	esi
		mov	byte ptr [eax+1Ch], 1
		call	sub_6B1A2F9A
		jmp	short loc_6B1A3692
; ---------------------------------------------------------------------------

loc_6B1A3614:				; CODE XREF: sub_6B1A343E+168j
		cmp	byte ptr [eax+1Ch], 0
		jnz	short loc_6B1A362A
		mov	byte ptr [eax+1Ch], 1
		push	esi
		mov	byte ptr [esi+1Ch], 0
		call	sub_6B1A2FDC
		mov	eax, [esi]

loc_6B1A362A:				; CODE XREF: sub_6B1A343E+1DAj
		cmp	byte ptr [eax+1Dh], 0
		jnz	short loc_6B1A3645
		mov	ecx, [eax+8]
		cmp	byte ptr [ecx+1Ch], 1
		jnz	short loc_6B1A365B
		mov	ecx, [eax]
		cmp	byte ptr [ecx+1Ch], 1
		jnz	short loc_6B1A365B

loc_6B1A3641:				; CODE XREF: sub_6B1A343E+199j
		mov	byte ptr [eax+1Ch], 0

loc_6B1A3645:				; CODE XREF: sub_6B1A343E+188j
					; sub_6B1A343E+1F0j
		mov	edi, esi
		mov	esi, [esi+4]

loc_6B1A364A:				; CODE XREF: sub_6B1A343E+155j
		mov	ecx, [ebp+var_10]
		mov	eax, [ecx+4]
		cmp	edi, [eax+4]
		jnz	loc_6B1A3598
		jmp	short loc_6B1A3692
; ---------------------------------------------------------------------------

loc_6B1A365B:				; CODE XREF: sub_6B1A343E+1F9j
					; sub_6B1A343E+201j
		mov	ecx, [eax]
		cmp	byte ptr [ecx+1Ch], 1
		jnz	short loc_6B1A3679
		mov	ecx, [eax+8]
		mov	byte ptr [ecx+1Ch], 1
		mov	ecx, [ebp+var_10]
		push	eax
		mov	byte ptr [eax+1Ch], 0
		call	sub_6B1A2F9A
		mov	eax, [esi]

loc_6B1A3679:				; CODE XREF: sub_6B1A343E+223j
		mov	cl, [esi+1Ch]
		mov	[eax+1Ch], cl
		mov	ecx, [ebp+var_10]
		mov	byte ptr [esi+1Ch], 1
		mov	eax, [eax]
		push	esi
		mov	byte ptr [eax+1Ch], 1
		call	sub_6B1A2FDC

loc_6B1A3692:				; CODE XREF: sub_6B1A343E+15Ej
					; sub_6B1A343E+1D4j ...
		mov	byte ptr [edi+1Ch], 1

loc_6B1A3696:				; CODE XREF: sub_6B1A343E+14Fj
		lea	ecx, [ebx+10h]
		call	Ordinal1667
		push	ebx		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx
		mov	ecx, [ebp+var_10]
		mov	eax, [ecx+8]
		test	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		jbe	short loc_6B1A36B6
		dec	eax
		mov	[ecx+8], eax

loc_6B1A36B6:				; CODE XREF: sub_6B1A343E+272j
		mov	ecx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		leave
		retn	8
sub_6B1A343E	endp

; Exported entry 1668.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1668
Ordinal1668	proc near		; CODE XREF: sub_6B1A3796+12p
					; sub_6B1A37B3+12p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		and	dword ptr [esi+4], 0
		lea	ecx, [esi+8]
		mov	dword ptr [esi], offset	off_6B1B84B8
		call	sub_6B181879
		push	[esp+4+arg_0]
		mov	ecx, esi
		call	Ordinal1669
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1668	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A36F2	proc near		; CODE XREF: sub_6B1A3718+18p
					; Ordinal1675+1Aj
		push	esi
		push	edi
		mov	edi, ecx
		lea	esi, [edi+4]
		mov	eax, [esi]
		push	dword ptr [eax+4] ; void *
		call	sub_6B1A3405
		mov	eax, [esi]
		mov	[eax+4], eax
		mov	eax, [esi]
		and	dword ptr [edi+8], 0
		mov	[eax], eax
		mov	esi, [esi]
		pop	edi
		mov	[esi+8], esi
		pop	esi
		retn
sub_6B1A36F2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6B1A3718(int, void *, int)
sub_6B1A3718	proc near		; CODE XREF: sub_6B1A376B+12p
					; sub_6B1A3BB9+19p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [eax]
		jnz	short loc_6B1A373C
		cmp	[ebp+arg_8], eax
		jnz	short loc_6B1A373C
		mov	ecx, esi
		call	sub_6B1A36F2
		mov	eax, [esi+4]
		mov	ecx, [eax]
		jmp	short loc_6B1A3761
; ---------------------------------------------------------------------------

loc_6B1A373C:				; CODE XREF: sub_6B1A3718+Fj
					; sub_6B1A3718+14j
		cmp	ecx, [ebp+arg_8]
		jz	short loc_6B1A3761
		push	edi

loc_6B1A3742:				; CODE XREF: sub_6B1A3718+46j
		mov	edi, ecx
		lea	ecx, [ebp+arg_4]
		call	sub_6B1A2D85
		push	edi		; void *
		lea	eax, [ebp+var_4]
		push	eax		; int
		mov	ecx, esi
		call	sub_6B1A343E
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [ebp+arg_8]
		jnz	short loc_6B1A3742
		pop	edi

loc_6B1A3761:				; CODE XREF: sub_6B1A3718+22j
					; sub_6B1A3718+27j
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx
		pop	esi
		leave
		retn	0Ch
sub_6B1A3718	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A376B	proc near		; CODE XREF: sub_6B1A3822j

var_4		= dword	ptr -4

		push	ecx
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		mov	ecx, [eax]
		push	eax		; int
		push	ecx		; void *
		lea	eax, [esp+10h+var_4]
		push	eax		; int
		mov	ecx, esi
		call	sub_6B1A3718
		push	dword ptr [esi+4] ; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		and	dword ptr [esi+4], 0
		and	dword ptr [esi+8], 0
		pop	ecx
		pop	esi
		pop	ecx
		retn
sub_6B1A376B	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A3796	proc near		; CODE XREF: sub_6B1A3F51+3Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		push	esi
		push	[esp+4+arg_4]
		mov	esi, ecx
		lea	ecx, [esi+4]
		mov	[esi], eax
		call	Ordinal1668
		mov	eax, esi
		pop	esi
		retn	8
sub_6B1A3796	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A37B3	proc near		; CODE XREF: sub_6B1A37EF+1Dp

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, ecx
		mov	ecx, [eax]
		add	eax, 4
		mov	[esi], ecx
		push	eax
		lea	ecx, [esi+4]
		call	Ordinal1668
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A37B3	endp

; Exported entry 1675.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1675
Ordinal1675	proc near		; CODE XREF: Ordinal1694+Fp
					; Ordinal1699+124p ...
		push	esi
		mov	esi, ecx
		xor	eax, eax
		lea	ecx, [esi+10h]
		mov	[esi+4], eax
		mov	[esi+8], eax
		mov	[esi+0Ch], eax
		call	sub_6B18175E
		lea	ecx, [esi+14h]
		pop	esi
		jmp	sub_6B1A36F2
Ordinal1675	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1A37EF	proc near		; CODE XREF: sub_6B1A3855+23p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		push	esi
		push	[ebp+arg_C]
		mov	esi, ecx
		mov	[esi], eax
		mov	eax, [ebp+arg_4]
		mov	[esi+4], eax
		mov	eax, [ebp+arg_8]
		lea	ecx, [esi+0Ch]
		mov	[esi+8], eax
		call	sub_6B1A37B3
		mov	al, [ebp+arg_10]
		mov	[esi+1Ch], al
		mov	byte ptr [esi+1Dh], 0
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	14h
sub_6B1A37EF	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

sub_6B1A3822	proc near		; CODE XREF: Ordinal1672+Cp
		jmp	sub_6B1A376B
sub_6B1A3822	endp

; Exported entry 1672.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1672
Ordinal1672	proc near		; CODE XREF: sub_6B1A3884-34j
					; sub_6B1A38B4+3p ...
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+14h]
		mov	dword ptr [esi], offset	off_6B1B8534
		call	sub_6B1A3822
		lea	ecx, [esi+10h]
		pop	esi
		jmp	sub_6B1899B5
Ordinal1672	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A3841	proc near		; CODE XREF: Ordinal1671+1Fp
					; Ordinal1673+1Fp
		push	esi
		mov	esi, ecx
		call	sub_6B1A3231
		mov	eax, esi
		pop	esi
		retn
sub_6B1A3841	endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_6B1A3884

loc_6B1A384D:				; CODE XREF: sub_6B1A3884+3j
					; sub_6B1A9A99+3j
		add	ecx, 4
		jmp	Ordinal1672
; END OF FUNCTION CHUNK	FOR sub_6B1A3884

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1A3855	proc near		; CODE XREF: sub_6B1A38D0+38p
					; sub_6B1A3962+5Ep

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	esi
		push	20h		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	esi, eax
		test	esi, esi
		pop	ecx
		jz	short loc_6B1A387D
		push	[ebp+arg_10]
		mov	ecx, esi
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6B1A37EF

loc_6B1A387D:				; CODE XREF: sub_6B1A3855+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	14h
sub_6B1A3855	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A3884	proc near		; CODE XREF: sub_6B1A3FD1+1Fp

; FUNCTION CHUNK AT 6B1A384D SIZE 00000008 BYTES

		add	ecx, 0Ch
		jmp	loc_6B1A384D
sub_6B1A3884	endp

; Exported entry 1671.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1671
Ordinal1671	proc near		; CODE XREF: sub_6B1A4BF1+2Cp
					; Ordinal1696+EEp ...
		push	esi
		mov	esi, ecx
		xor	eax, eax
		lea	ecx, [esi+10h]
		mov	dword ptr [esi], offset	off_6B1B8534
		mov	[esi+4], eax
		mov	[esi+8], eax
		mov	[esi+0Ch], eax
		call	sub_6B181879
		lea	ecx, [esi+14h]
		call	sub_6B1A3841
		mov	eax, esi
		pop	esi
		retn
Ordinal1671	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A38B4(void *, char)
sub_6B1A38B4	proc near		; DATA XREF: .rdata:off_6B1B8534o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1672
		test	[esp+4+arg_0], 1
		jz	short loc_6B1A38CA
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A38CA:				; CODE XREF: sub_6B1A38B4+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A38B4	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1A38D0	proc near		; CODE XREF: sub_6B1A38D0+54p
					; sub_6B1A38D0+61p ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_131	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		cmp	byte ptr [esi+1Dh], 0
		push	edi
		mov	edi, ecx
		mov	eax, [edi+4]
		mov	[ebp+var_10], esp
		mov	[ebp+var_18], edi
		mov	[ebp+var_14], eax
		jnz	short loc_6B1A3939
		xor	ecx, ecx
		mov	cl, [esi+1Ch]
		push	ecx
		lea	ecx, [esi+0Ch]
		push	ecx
		push	eax
		push	[ebp+arg_4]
		mov	ecx, edi
		push	eax
		call	sub_6B1A3855
		mov	ebx, eax
		mov	eax, [ebp+var_14]
		cmp	byte ptr [eax+1Dh], 0
		jz	short loc_6B1A391B
		mov	[ebp+var_14], ebx

loc_6B1A391B:				; CODE XREF: sub_6B1A38D0+46j
		and	[ebp+var_4], 0
		push	ebx
		push	dword ptr [esi]
		mov	ecx, edi
		call	sub_6B1A38D0
		push	ebx
		mov	[ebx], eax
		push	dword ptr [esi+8]
		mov	ecx, edi
		call	sub_6B1A38D0
		mov	[ebx+8], eax

loc_6B1A3939:				; CODE XREF: sub_6B1A38D0+25j
		mov	ecx, [ebp+var_C]
		mov	eax, [ebp+var_14]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn	8
sub_6B1A38D0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B1A394D	proc near		; DATA XREF: .rdata:stru_6B1BD39Co
		push	dword ptr [ebp-14h] ; void *
		mov	ecx, [ebp-18h]
		call	sub_6B1A3405
		push	0
		push	0
		call	_CxxThrowException
sub_6B1A394D	endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1A3962	proc near		; CODE XREF: sub_6B1A3B28+71p
					; sub_6B1A3BE8+19p ...

var_50		= dword	ptr -50h
var_28		= byte ptr -28h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	eax, offset unknown_libname_132	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		cmp	dword ptr [edi+8], 0FFFFFFEh
		jb	short loc_6B1A39B0
		push	offset aMapSetTTooLong ; "map/set<T> too long"
		lea	ecx, [ebp+var_28]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_28]
		push	eax
		lea	ecx, [ebp+var_50]
		call	sub_6B181357
		push	offset dword_6B1BA9E8
		lea	eax, [ebp+var_50]
		push	eax
		mov	[ebp+var_50], offset off_6B1AA914
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B1A39B0:				; CODE XREF: sub_6B1A3962+19j
		mov	eax, [edi+4]
		mov	esi, [ebp+arg_8]
		push	0
		push	[ebp+arg_C]
		mov	ecx, edi
		push	eax
		push	esi
		push	eax
		call	sub_6B1A3855
		inc	dword ptr [edi+8]
		mov	ebx, eax
		mov	eax, [edi+4]
		cmp	esi, eax
		jnz	short loc_6B1A39DE
		mov	[eax+4], ebx
		mov	eax, [edi+4]
		mov	[eax], ebx
		mov	eax, [edi+4]
		jmp	short loc_6B1A39FC
; ---------------------------------------------------------------------------

loc_6B1A39DE:				; CODE XREF: sub_6B1A3962+6Dj
		cmp	[ebp+arg_4], 0
		jz	short loc_6B1A39F1
		mov	[esi], ebx
		mov	eax, [edi+4]
		cmp	esi, [eax]
		jnz	short loc_6B1A39FF
		mov	[eax], ebx
		jmp	short loc_6B1A39FF
; ---------------------------------------------------------------------------

loc_6B1A39F1:				; CODE XREF: sub_6B1A3962+80j
		mov	[esi+8], ebx
		mov	eax, [edi+4]
		cmp	esi, [eax+8]
		jnz	short loc_6B1A39FF

loc_6B1A39FC:				; CODE XREF: sub_6B1A3962+7Aj
		mov	[eax+8], ebx

loc_6B1A39FF:				; CODE XREF: sub_6B1A3962+89j
					; sub_6B1A3962+8Dj ...
		mov	esi, ebx
		lea	eax, [ebx+4]
		jmp	loc_6B1A3A9E
; ---------------------------------------------------------------------------

loc_6B1A3A09:				; CODE XREF: sub_6B1A3962+142j
		mov	ecx, [eax]
		mov	edx, [ecx+4]
		mov	edx, [edx]
		cmp	ecx, edx
		jnz	short loc_6B1A3A69
		mov	edx, [ecx+4]
		mov	edx, [edx+8]
		cmp	byte ptr [edx+1Ch], 0
		jnz	short loc_6B1A3A3A

loc_6B1A3A20:				; CODE XREF: sub_6B1A3962+10Bj
		mov	ecx, [eax]
		mov	byte ptr [ecx+1Ch], 1
		mov	byte ptr [edx+1Ch], 1
		mov	ecx, [eax]
		mov	ecx, [ecx+4]
		mov	byte ptr [ecx+1Ch], 0
		mov	eax, [eax]
		mov	esi, [eax+4]
		jmp	short loc_6B1A3A9B
; ---------------------------------------------------------------------------

loc_6B1A3A3A:				; CODE XREF: sub_6B1A3962+BCj
		cmp	esi, [ecx+8]
		jnz	short loc_6B1A3A49
		mov	esi, ecx
		push	esi
		mov	ecx, edi
		call	sub_6B1A2F9A

loc_6B1A3A49:				; CODE XREF: sub_6B1A3962+DBj
		mov	eax, [esi+4]
		mov	byte ptr [eax+1Ch], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+1Ch], 0
		mov	eax, [esi+4]
		push	dword ptr [eax+4]
		mov	ecx, edi
		call	sub_6B1A2FDC
		jmp	short loc_6B1A3A9B
; ---------------------------------------------------------------------------

loc_6B1A3A69:				; CODE XREF: sub_6B1A3962+B0j
		cmp	byte ptr [edx+1Ch], 0
		jz	short loc_6B1A3A20
		cmp	esi, [ecx]
		jnz	short loc_6B1A3A7D
		mov	esi, ecx
		push	esi
		mov	ecx, edi
		call	sub_6B1A2FDC

loc_6B1A3A7D:				; CODE XREF: sub_6B1A3962+10Fj
		mov	eax, [esi+4]
		mov	byte ptr [eax+1Ch], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+1Ch], 0
		mov	eax, [esi+4]
		push	dword ptr [eax+4]
		mov	ecx, edi
		call	sub_6B1A2F9A

loc_6B1A3A9B:				; CODE XREF: sub_6B1A3962+D6j
					; sub_6B1A3962+105j
		lea	eax, [esi+4]

loc_6B1A3A9E:				; CODE XREF: sub_6B1A3962+A2j
		mov	ecx, [eax]
		cmp	byte ptr [ecx+1Ch], 0
		jz	loc_6B1A3A09
		mov	eax, [edi+4]
		mov	eax, [eax+4]
		mov	ecx, [ebp+var_C]
		mov	byte ptr [eax+1Ch], 1
		mov	eax, [ebp+arg_0]
		pop	edi
		mov	[eax], ebx
		pop	esi
		pop	ebx
		mov	large fs:0, ecx
		leave
		retn	10h
sub_6B1A3962	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A3ACA	proc near		; CODE XREF: sub_6B1A3BB9+23p

arg_0		= dword	ptr  4

		push	ebx
		mov	ebx, [esp+4+arg_0]
		mov	eax, [ebx+4]
		push	esi
		push	edi
		mov	esi, ecx
		mov	edi, [esi+4]
		push	edi
		push	dword ptr [eax+4]
		call	sub_6B1A38D0
		mov	[edi+4], eax
		mov	eax, [ebx+8]
		mov	[esi+8], eax
		mov	eax, [esi+4]
		mov	ecx, [eax+4]
		xor	bl, bl
		cmp	[ecx+1Dh], bl
		jz	short loc_6B1A3B08
		mov	[eax], eax
		mov	esi, [esi+4]
		mov	[esi+8], esi

loc_6B1A3B00:				; CODE XREF: sub_6B1A3ACA+5Cj
		pop	edi
		pop	esi
		pop	ebx
		retn	4
; ---------------------------------------------------------------------------

loc_6B1A3B06:				; CODE XREF: sub_6B1A3ACA+43j
		mov	ecx, edx

loc_6B1A3B08:				; CODE XREF: sub_6B1A3ACA+2Cj
		mov	edx, [ecx]
		cmp	[edx+1Dh], bl
		jz	short loc_6B1A3B06
		mov	[eax], ecx
		mov	esi, [esi+4]
		mov	ecx, [esi+4]
		jmp	short loc_6B1A3B1B
; ---------------------------------------------------------------------------

loc_6B1A3B19:				; CODE XREF: sub_6B1A3ACA+57j
		mov	ecx, eax

loc_6B1A3B1B:				; CODE XREF: sub_6B1A3ACA+4Dj
		mov	eax, [ecx+8]
		cmp	[eax+1Dh], bl
		jz	short loc_6B1A3B19
		mov	[esi+8], ecx
		jmp	short loc_6B1A3B00
sub_6B1A3ACA	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1A3B28	proc near		; CODE XREF: sub_6B1A3BE8+C8p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		mov	ebx, [ebp+arg_4]
		push	esi
		mov	esi, ecx
		mov	ecx, [esi+4]
		mov	eax, [ecx+4]
		cmp	byte ptr [eax+1Dh], 0
		push	edi
		mov	edi, ecx
		mov	byte ptr [ebp+var_4], 1
		jnz	short loc_6B1A3B64
		mov	ecx, [ebx]

loc_6B1A3B48:				; CODE XREF: sub_6B1A3B28+3Aj
		cmp	ecx, [eax+0Ch]
		mov	edi, eax
		setb	byte ptr [ebp+var_4]
		cmp	byte ptr [ebp+var_4], 0
		jz	short loc_6B1A3B5B
		mov	eax, [eax]
		jmp	short loc_6B1A3B5E
; ---------------------------------------------------------------------------

loc_6B1A3B5B:				; CODE XREF: sub_6B1A3B28+2Dj
		mov	eax, [eax+8]

loc_6B1A3B5E:				; CODE XREF: sub_6B1A3B28+31j
		cmp	byte ptr [eax+1Dh], 0
		jz	short loc_6B1A3B48

loc_6B1A3B64:				; CODE XREF: sub_6B1A3B28+1Cj
		cmp	byte ptr [ebp+var_4], 0
		mov	ecx, edi
		mov	[ebp+arg_4], ecx
		jz	short loc_6B1A3B87
		mov	eax, [esi+4]
		cmp	edi, [eax]
		jnz	short loc_6B1A3B7C
		push	ebx
		push	edi
		push	1
		jmp	short loc_6B1A3B93
; ---------------------------------------------------------------------------

loc_6B1A3B7C:				; CODE XREF: sub_6B1A3B28+4Cj
		lea	ecx, [ebp+arg_4]
		call	sub_6B1A2D46
		mov	ecx, [ebp+arg_4]

loc_6B1A3B87:				; CODE XREF: sub_6B1A3B28+45j
		mov	eax, [ecx+0Ch]
		cmp	eax, [ebx]
		jnb	short loc_6B1A3BA9
		push	ebx
		push	edi
		push	[ebp+var_4]

loc_6B1A3B93:				; CODE XREF: sub_6B1A3B28+52j
		lea	eax, [ebp+arg_4]
		push	eax
		mov	ecx, esi
		call	sub_6B1A3962
		mov	ecx, [eax]
		mov	eax, [ebp+arg_0]
		mov	byte ptr [eax+4], 1
		jmp	short loc_6B1A3BB0
; ---------------------------------------------------------------------------

loc_6B1A3BA9:				; CODE XREF: sub_6B1A3B28+64j
		mov	eax, [ebp+arg_0]
		mov	byte ptr [eax+4], 0

loc_6B1A3BB0:				; CODE XREF: sub_6B1A3B28+7Fj
		pop	edi
		pop	esi
		mov	[eax], ecx
		pop	ebx
		leave
		retn	8
sub_6B1A3B28	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1A3BB9	proc near		; CODE XREF: Ordinal1674+65p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		cmp	esi, [ebp+arg_0]
		jz	short loc_6B1A3BE1
		mov	eax, [esi+4]
		mov	ecx, [eax]
		push	eax		; int
		push	ecx		; void *
		lea	eax, [ebp+var_4]
		push	eax		; int
		mov	ecx, esi
		call	sub_6B1A3718
		push	[ebp+arg_0]
		mov	ecx, esi
		call	sub_6B1A3ACA

loc_6B1A3BE1:				; CODE XREF: sub_6B1A3BB9+Aj
		mov	eax, esi
		pop	esi
		leave
		retn	4
sub_6B1A3BB9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1A3BE8	proc near		; CODE XREF: sub_6B1A3F51+4Bp

var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		mov	ebx, ecx
		cmp	dword ptr [ebx+8], 0
		jnz	short loc_6B1A3C0E
		push	[ebp+arg_8]
		push	dword ptr [ebx+4]
		push	1
		push	[ebp+arg_0]
		call	sub_6B1A3962
		mov	eax, [ebp+arg_0]
		jmp	loc_6B1A3CBE
; ---------------------------------------------------------------------------

loc_6B1A3C0E:				; CODE XREF: sub_6B1A3BE8+Cj
		mov	eax, [ebx+4]
		push	esi
		mov	esi, [ebp+arg_4]
		cmp	esi, [eax]
		push	edi
		mov	edi, [ebp+arg_8]
		jnz	short loc_6B1A3C2C
		mov	eax, [edi]
		cmp	eax, [esi+0Ch]
		jnb	loc_6B1A3CA9
		push	edi

loc_6B1A3C29:				; CODE XREF: sub_6B1A3BE8+7Cj
		push	esi
		jmp	short loc_6B1A3C98
; ---------------------------------------------------------------------------

loc_6B1A3C2C:				; CODE XREF: sub_6B1A3BE8+33j
		cmp	esi, eax
		jnz	short loc_6B1A3C40
		mov	eax, [eax+8]
		mov	ecx, [eax+0Ch]
		cmp	ecx, [edi]
		jnb	short loc_6B1A3CA9
		push	edi
		push	eax

loc_6B1A3C3C:				; CODE XREF: sub_6B1A3BE8+7Fj
					; sub_6B1A3BE8+ADj
		push	0
		jmp	short loc_6B1A3C9A
; ---------------------------------------------------------------------------

loc_6B1A3C40:				; CODE XREF: sub_6B1A3BE8+46j
		mov	eax, [edi]
		cmp	eax, [esi+0Ch]
		jnb	short loc_6B1A3C69
		lea	ecx, [ebp+arg_8]
		mov	[ebp+arg_8], esi
		call	sub_6B1A2D46
		mov	ecx, [ebp+arg_8]
		mov	eax, [edi]
		cmp	[ecx+0Ch], eax
		jnb	short loc_6B1A3C69
		mov	eax, [ecx+8]
		cmp	byte ptr [eax+1Dh], 0
		push	edi
		jz	short loc_6B1A3C29
		push	ecx
		jmp	short loc_6B1A3C3C
; ---------------------------------------------------------------------------

loc_6B1A3C69:				; CODE XREF: sub_6B1A3BE8+5Dj
					; sub_6B1A3BE8+72j
		mov	eax, [edi]
		cmp	[esi+0Ch], eax
		jnb	short loc_6B1A3CA9
		lea	ecx, [ebp+arg_8]
		mov	[ebp+arg_8], esi
		call	sub_6B1A2D85
		mov	ecx, [ebp+arg_8]
		cmp	ecx, [ebx+4]
		jz	short loc_6B1A3C8A
		mov	eax, [edi]
		cmp	eax, [ecx+0Ch]
		jnb	short loc_6B1A3CA9

loc_6B1A3C8A:				; CODE XREF: sub_6B1A3BE8+99j
		mov	eax, [esi+8]
		cmp	byte ptr [eax+1Dh], 0
		push	edi
		jz	short loc_6B1A3C97
		push	esi
		jmp	short loc_6B1A3C3C
; ---------------------------------------------------------------------------

loc_6B1A3C97:				; CODE XREF: sub_6B1A3BE8+AAj
		push	ecx

loc_6B1A3C98:				; CODE XREF: sub_6B1A3BE8+42j
		push	1

loc_6B1A3C9A:				; CODE XREF: sub_6B1A3BE8+56j
		push	[ebp+arg_0]
		mov	ecx, ebx
		call	sub_6B1A3962
		mov	eax, [ebp+arg_0]
		jmp	short loc_6B1A3CBC
; ---------------------------------------------------------------------------

loc_6B1A3CA9:				; CODE XREF: sub_6B1A3BE8+3Aj
					; sub_6B1A3BE8+50j ...
		push	edi
		lea	eax, [ebp+var_8]
		push	eax
		mov	ecx, ebx
		call	sub_6B1A3B28
		mov	ecx, [eax]
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx

loc_6B1A3CBC:				; CODE XREF: sub_6B1A3BE8+BFj
		pop	edi
		pop	esi

loc_6B1A3CBE:				; CODE XREF: sub_6B1A3BE8+21j
		pop	ebx
		leave
		retn	0Ch
sub_6B1A3BE8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6B1A3CC3(int, void *)
sub_6B1A3CC3	proc near		; CODE XREF: sub_6B1A470E+3Bp

var_54		= dword	ptr -54h
var_2C		= byte ptr -2Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_130	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 48h
		push	ebx
		mov	ebx, [ebp+arg_4]
		cmp	byte ptr [ebx+31h], 0
		push	esi
		push	edi
		mov	[ebp+var_10], ecx
		jz	short loc_6B1A3D12
		push	offset aInvalidMapSetT ; "invalid map/set<T> iterator"
		lea	ecx, [ebp+var_2C]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_2C]
		push	eax
		lea	ecx, [ebp+var_54]
		call	sub_6B181357
		push	offset dword_6B1BAA6C
		lea	eax, [ebp+var_54]
		push	eax
		mov	[ebp+var_54], offset off_6B1AA91C
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B1A3D12:				; CODE XREF: sub_6B1A3CC3+1Aj
		lea	ecx, [ebp+arg_4]
		call	sub_6B1A2DFA
		mov	ecx, [ebx]
		cmp	byte ptr [ecx+31h], 0
		jz	short loc_6B1A3D27
		mov	edi, [ebx+8]
		jmp	short loc_6B1A3D3E
; ---------------------------------------------------------------------------

loc_6B1A3D27:				; CODE XREF: sub_6B1A3CC3+5Dj
		mov	eax, [ebx+8]
		cmp	byte ptr [eax+31h], 0
		jz	short loc_6B1A3D34
		mov	edi, ecx
		jmp	short loc_6B1A3D3E
; ---------------------------------------------------------------------------

loc_6B1A3D34:				; CODE XREF: sub_6B1A3CC3+6Bj
		mov	eax, [ebp+arg_4]
		cmp	eax, ebx
		mov	edi, [eax+8]
		jnz	short loc_6B1A3DB4

loc_6B1A3D3E:				; CODE XREF: sub_6B1A3CC3+62j
					; sub_6B1A3CC3+6Fj
		cmp	byte ptr [edi+31h], 0
		mov	esi, [ebx+4]
		jnz	short loc_6B1A3D4A
		mov	[edi+4], esi

loc_6B1A3D4A:				; CODE XREF: sub_6B1A3CC3+82j
		mov	ecx, [ebp+var_10]
		mov	eax, [ecx+4]
		cmp	[eax+4], ebx
		jnz	short loc_6B1A3D5A
		mov	[eax+4], edi
		jmp	short loc_6B1A3D65
; ---------------------------------------------------------------------------

loc_6B1A3D5A:				; CODE XREF: sub_6B1A3CC3+90j
		cmp	[esi], ebx
		jnz	short loc_6B1A3D62
		mov	[esi], edi
		jmp	short loc_6B1A3D65
; ---------------------------------------------------------------------------

loc_6B1A3D62:				; CODE XREF: sub_6B1A3CC3+99j
		mov	[esi+8], edi

loc_6B1A3D65:				; CODE XREF: sub_6B1A3CC3+95j
					; sub_6B1A3CC3+9Dj
		mov	ecx, [ecx+4]
		cmp	[ecx], ebx
		jnz	short loc_6B1A3D88
		cmp	byte ptr [edi+31h], 0
		jz	short loc_6B1A3D76
		mov	edx, esi
		jmp	short loc_6B1A3D86
; ---------------------------------------------------------------------------

loc_6B1A3D76:				; CODE XREF: sub_6B1A3CC3+ADj
		mov	eax, [edi]
		mov	edx, edi
		jmp	short loc_6B1A3D80
; ---------------------------------------------------------------------------

loc_6B1A3D7C:				; CODE XREF: sub_6B1A3CC3+C1j
		mov	edx, eax
		mov	eax, [edx]

loc_6B1A3D80:				; CODE XREF: sub_6B1A3CC3+B7j
		cmp	byte ptr [eax+31h], 0
		jz	short loc_6B1A3D7C

loc_6B1A3D86:				; CODE XREF: sub_6B1A3CC3+B1j
		mov	[ecx], edx

loc_6B1A3D88:				; CODE XREF: sub_6B1A3CC3+A7j
		mov	eax, [ebp+var_10]
		mov	ecx, [eax+4]
		cmp	[ecx+8], ebx
		jnz	short loc_6B1A3E0E
		cmp	byte ptr [edi+31h], 0
		jz	short loc_6B1A3D9D
		mov	edx, esi
		jmp	short loc_6B1A3DAF
; ---------------------------------------------------------------------------

loc_6B1A3D9D:				; CODE XREF: sub_6B1A3CC3+D4j
		mov	eax, [edi+8]
		mov	edx, edi
		jmp	short loc_6B1A3DA9
; ---------------------------------------------------------------------------

loc_6B1A3DA4:				; CODE XREF: sub_6B1A3CC3+EAj
		mov	edx, eax
		mov	eax, [edx+8]

loc_6B1A3DA9:				; CODE XREF: sub_6B1A3CC3+DFj
		cmp	byte ptr [eax+31h], 0
		jz	short loc_6B1A3DA4

loc_6B1A3DAF:				; CODE XREF: sub_6B1A3CC3+D8j
		mov	[ecx+8], edx
		jmp	short loc_6B1A3E0E
; ---------------------------------------------------------------------------

loc_6B1A3DB4:				; CODE XREF: sub_6B1A3CC3+79j
		mov	[ecx+4], eax
		mov	ecx, [ebx]
		mov	[eax], ecx
		cmp	eax, [ebx+8]
		jnz	short loc_6B1A3DC4
		mov	esi, eax
		jmp	short loc_6B1A3DDE
; ---------------------------------------------------------------------------

loc_6B1A3DC4:				; CODE XREF: sub_6B1A3CC3+FBj
		cmp	byte ptr [edi+31h], 0
		mov	esi, [eax+4]
		jnz	short loc_6B1A3DD0
		mov	[edi+4], esi

loc_6B1A3DD0:				; CODE XREF: sub_6B1A3CC3+108j
		mov	[esi], edi
		mov	ecx, [ebx+8]
		mov	[eax+8], ecx
		mov	ecx, [ebx+8]
		mov	[ecx+4], eax

loc_6B1A3DDE:				; CODE XREF: sub_6B1A3CC3+FFj
		mov	ecx, [ebp+var_10]
		mov	ecx, [ecx+4]
		cmp	[ecx+4], ebx
		jnz	short loc_6B1A3DEE
		mov	[ecx+4], eax
		jmp	short loc_6B1A3DFC
; ---------------------------------------------------------------------------

loc_6B1A3DEE:				; CODE XREF: sub_6B1A3CC3+124j
		mov	ecx, [ebx+4]
		cmp	[ecx], ebx
		jnz	short loc_6B1A3DF9
		mov	[ecx], eax
		jmp	short loc_6B1A3DFC
; ---------------------------------------------------------------------------

loc_6B1A3DF9:				; CODE XREF: sub_6B1A3CC3+130j
		mov	[ecx+8], eax

loc_6B1A3DFC:				; CODE XREF: sub_6B1A3CC3+129j
					; sub_6B1A3CC3+134j
		mov	ecx, [ebx+4]
		mov	[eax+4], ecx
		mov	dl, [ebx+30h]
		mov	cl, [eax+30h]
		mov	[eax+30h], dl
		mov	[ebx+30h], cl

loc_6B1A3E0E:				; CODE XREF: sub_6B1A3CC3+CEj
					; sub_6B1A3CC3+EFj
		cmp	byte ptr [ebx+30h], 1
		jnz	loc_6B1A3F1B
		jmp	loc_6B1A3ECF
; ---------------------------------------------------------------------------

loc_6B1A3E1D:				; CODE XREF: sub_6B1A3CC3+215j
		cmp	byte ptr [edi+30h], 1
		jnz	loc_6B1A3F17
		mov	eax, [esi]
		cmp	edi, eax
		jnz	short loc_6B1A3E99
		mov	eax, [esi+8]
		cmp	byte ptr [eax+30h], 0
		jnz	short loc_6B1A3E47
		mov	byte ptr [eax+30h], 1
		push	esi
		mov	byte ptr [esi+30h], 0
		call	sub_6B1A3020
		mov	eax, [esi+8]

loc_6B1A3E47:				; CODE XREF: sub_6B1A3CC3+171j
		cmp	byte ptr [eax+31h], 0
		jnz	short loc_6B1A3ECA
		mov	ecx, [eax]
		cmp	byte ptr [ecx+30h], 1
		jnz	short loc_6B1A3E5E
		mov	ecx, [eax+8]
		cmp	byte ptr [ecx+30h], 1
		jz	short loc_6B1A3EC6

loc_6B1A3E5E:				; CODE XREF: sub_6B1A3CC3+190j
		mov	ecx, [eax+8]
		cmp	byte ptr [ecx+30h], 1
		jnz	short loc_6B1A3E7D
		mov	ecx, [eax]
		mov	byte ptr [ecx+30h], 1
		mov	ecx, [ebp+var_10]
		push	eax
		mov	byte ptr [eax+30h], 0
		call	sub_6B1A3062
		mov	eax, [esi+8]

loc_6B1A3E7D:				; CODE XREF: sub_6B1A3CC3+1A2j
		mov	cl, [esi+30h]
		mov	[eax+30h], cl
		mov	ecx, [ebp+var_10]
		mov	byte ptr [esi+30h], 1
		mov	eax, [eax+8]
		push	esi
		mov	byte ptr [eax+30h], 1
		call	sub_6B1A3020
		jmp	short loc_6B1A3F17
; ---------------------------------------------------------------------------

loc_6B1A3E99:				; CODE XREF: sub_6B1A3CC3+168j
		cmp	byte ptr [eax+30h], 0
		jnz	short loc_6B1A3EAF
		mov	byte ptr [eax+30h], 1
		push	esi
		mov	byte ptr [esi+30h], 0
		call	sub_6B1A3062
		mov	eax, [esi]

loc_6B1A3EAF:				; CODE XREF: sub_6B1A3CC3+1DAj
		cmp	byte ptr [eax+31h], 0
		jnz	short loc_6B1A3ECA
		mov	ecx, [eax+8]
		cmp	byte ptr [ecx+30h], 1
		jnz	short loc_6B1A3EE0
		mov	ecx, [eax]
		cmp	byte ptr [ecx+30h], 1
		jnz	short loc_6B1A3EE0

loc_6B1A3EC6:				; CODE XREF: sub_6B1A3CC3+199j
		mov	byte ptr [eax+30h], 0

loc_6B1A3ECA:				; CODE XREF: sub_6B1A3CC3+188j
					; sub_6B1A3CC3+1F0j
		mov	edi, esi
		mov	esi, [esi+4]

loc_6B1A3ECF:				; CODE XREF: sub_6B1A3CC3+155j
		mov	ecx, [ebp+var_10]
		mov	eax, [ecx+4]
		cmp	edi, [eax+4]
		jnz	loc_6B1A3E1D
		jmp	short loc_6B1A3F17
; ---------------------------------------------------------------------------

loc_6B1A3EE0:				; CODE XREF: sub_6B1A3CC3+1F9j
					; sub_6B1A3CC3+201j
		mov	ecx, [eax]
		cmp	byte ptr [ecx+30h], 1
		jnz	short loc_6B1A3EFE
		mov	ecx, [eax+8]
		mov	byte ptr [ecx+30h], 1
		mov	ecx, [ebp+var_10]
		push	eax
		mov	byte ptr [eax+30h], 0
		call	sub_6B1A3020
		mov	eax, [esi]

loc_6B1A3EFE:				; CODE XREF: sub_6B1A3CC3+223j
		mov	cl, [esi+30h]
		mov	[eax+30h], cl
		mov	ecx, [ebp+var_10]
		mov	byte ptr [esi+30h], 1
		mov	eax, [eax]
		push	esi
		mov	byte ptr [eax+30h], 1
		call	sub_6B1A3062

loc_6B1A3F17:				; CODE XREF: sub_6B1A3CC3+15Ej
					; sub_6B1A3CC3+1D4j ...
		mov	byte ptr [edi+30h], 1

loc_6B1A3F1B:				; CODE XREF: sub_6B1A3CC3+14Fj
		lea	ecx, [ebx+10h]
		call	Ordinal1672
		push	ebx		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx
		mov	ecx, [ebp+var_10]
		mov	eax, [ecx+8]
		test	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		jbe	short loc_6B1A3F3B
		dec	eax
		mov	[ecx+8], eax

loc_6B1A3F3B:				; CODE XREF: sub_6B1A3CC3+272j
		mov	ecx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		leave
		retn	8
sub_6B1A3CC3	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1A3F51	proc near		; CODE XREF: Ordinal1695+198p
					; Ordinal1698+1A2p

var_28		= byte ptr -28h
var_24		= byte ptr -24h
var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_133	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 1Ch
		push	ebx
		mov	ebx, [ebp+arg_0]
		push	esi
		push	edi
		push	ebx
		mov	edi, ecx
		call	sub_6B1A2F48
		mov	esi, eax
		cmp	esi, [edi+4]
		jz	short loc_6B1A3F7A
		mov	eax, [ebx]
		cmp	eax, [esi+0Ch]
		jnb	short loc_6B1A3FBD

loc_6B1A3F7A:				; CODE XREF: sub_6B1A3F51+20j
		lea	ecx, [ebp+var_18]
		call	Ordinal1666
		and	[ebp+var_4], 0
		push	eax
		push	ebx
		lea	ecx, [ebp+var_28]
		call	sub_6B1A3796
		push	eax
		push	esi
		lea	eax, [ebp+arg_0]
		push	eax
		mov	ecx, edi
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B1A3BE8
		mov	esi, [eax]
		lea	ecx, [ebp+var_24]
		call	Ordinal1667
		mov	ecx, [ebp+var_10]
		add	ecx, 0FFFFFFF0h
		mov	[ebp+var_18], offset off_6B1B84B8
		call	sub_6B18163D

loc_6B1A3FBD:				; CODE XREF: sub_6B1A3F51+27j
		mov	ecx, [ebp+var_C]
		pop	edi
		lea	eax, [esi+10h]
		pop	esi
		pop	ebx
		mov	large fs:0, ecx
		leave
		retn	4
sub_6B1A3F51	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6B1A3FD1(void *)
sub_6B1A3FD1	proc near		; CODE XREF: sub_6B1A3FD1+16p
					; sub_6B1A46E8+Cp

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		cmp	byte ptr [edi+31h], 0
		mov	ebx, ecx
		mov	esi, edi
		jnz	short loc_6B1A4004

loc_6B1A3FE2:				; CODE XREF: sub_6B1A3FD1+31j
		push	dword ptr [esi+8] ; void *
		mov	ecx, ebx
		call	sub_6B1A3FD1
		mov	esi, [esi]
		mov	ecx, edi
		call	sub_6B1A3884
		push	edi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		cmp	byte ptr [esi+31h], 0
		pop	ecx
		mov	edi, esi
		jz	short loc_6B1A3FE2

loc_6B1A4004:				; CODE XREF: sub_6B1A3FD1+Fj
		pop	edi
		pop	esi
		pop	ebx
		retn	4
sub_6B1A3FD1	endp

; Exported entry 1674.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1674
Ordinal1674	proc near		; CODE XREF: Ordinal1673+2Ap
					; Ordinal1696+145p ...

var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_134	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		mov	esi, ecx
		cmp	esi, edi
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_28], esi
		jz	loc_6B1A411C
		mov	eax, [edi+4]
		mov	[esi+4], eax
		mov	eax, [edi+8]
		mov	[esi+8], eax
		mov	eax, [edi+0Ch]
		push	offset aCprocessinfoOp ; "CProcessInfo::operator =()"
		lea	ecx, [ebp+var_48]
		mov	[esi+0Ch], eax
		call	Ordinal1089
		and	[ebp+var_4], 0
		lea	eax, [edi+10h]
		lea	ecx, [esi+10h]
		push	eax
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B181F8B
		add	edi, 14h
		lea	ecx, [esi+14h]
		push	edi
		call	sub_6B1A3BB9
		jmp	loc_6B1A4114
; ---------------------------------------------------------------------------

loc_6B1A4079:				; DATA XREF: .rdata:6B1BD450o
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A4111
		retn
; ---------------------------------------------------------------------------

loc_6B1A40BC:				; DATA XREF: .rdata:6B1BD460o
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal1101
		mov	eax, [ebp+var_4C]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal1103
		lea	ecx, [ebp+var_48]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A4111
		retn
; ---------------------------------------------------------------------------

loc_6B1A4111:				; DATA XREF: Ordinal1674+ACo
					; Ordinal1674+101o
		mov	esi, [ebp+var_28]

loc_6B1A4114:				; CODE XREF: Ordinal1674+6Aj
		lea	ecx, [ebp+var_48]
		call	Ordinal1090

loc_6B1A411C:				; CODE XREF: Ordinal1674+25j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal1674	endp ; sp-analysis failed

; Exported entry 1695.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1695
Ordinal1695	proc near		; CODE XREF: Ordinal1694+83p
					; DATA XREF: .rdata:off_6B1BF428o

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= byte ptr -60h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
Dst		= dword	ptr -28h
Src		= byte ptr -24h
var_20		= byte ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_135	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 5Ch
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		xor	ebx, ebx
		cmp	[ecx+20h], ebx
		push	edi
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_3C], ecx
		jz	loc_6B1A43B5
		cmp	[ecx+44h], ebx
		jz	loc_6B1A43B5
		push	offset aCsysteminfoGet ; "CSystemInfo::GetProcessInfoPSAPI()"
		lea	ecx, [ebp+var_60]
		mov	[ebp+var_34], 1
		call	Ordinal1089
		mov	[ebp+var_4], ebx
		xor	esi, esi
		mov	[ebp+var_38], 80h
		mov	[ebp+var_30], ebx
		mov	[ebp+Dst], ebx
		mov	byte ptr [ebp+var_4], 2

loc_6B1A4193:				; CODE XREF: Ordinal1695+EBj
		mov	eax, [ebp+var_38]
		cmp	esi, eax
		jnb	loc_6B1A4227
		push	[ebp+Dst]	; void *
		lea	esi, [eax+eax]
		call	??_V@YAXPAX@Z	; operator delete[](void *)
		pop	ecx
		push	esi
		lea	ecx, [ebp+Dst]
		mov	[ebp+Dst], ebx
		call	sub_6B1A2CFA
		test	al, al
		jnz	short loc_6B1A41C8
		push	[ebp+Dst]	; void *
		call	??_V@YAXPAX@Z	; operator delete[](void *)
		pop	ecx
		jmp	loc_6B1A43A9
; ---------------------------------------------------------------------------

loc_6B1A41C8:				; CODE XREF: Ordinal1695+81j
		mov	edi, esi
		shl	edi, 2
		push	edi		; Size
		push	ebx		; Val
		push	[ebp+Dst]	; Dst
		call	memset
		add	esp, 0Ch
		lea	eax, [ebp+var_30]
		push	eax
		mov	eax, [ebp+var_3C]
		push	edi
		push	[ebp+Dst]
		mov	[ebp+var_30], ebx
		push	[ebp+arg_0]
		call	dword ptr [eax+20h]
		cmp	eax, ebx
		jnz	short loc_6B1A4219
		call	ds:GetLastError
		push	eax
		mov	eax, [ebp+arg_4]
		push	dword ptr [eax+4] ; Args
		push	offset aCsysteminfoG_0 ; "CSystemInfo::GetModuleListPSAPI() : Enu"...
		call	sub_6B18102E
		push	[ebp+Dst]	; void *
		call	??_V@YAXPAX@Z	; operator delete[](void *)
		add	esp, 10h
		jmp	loc_6B1A43A9
; ---------------------------------------------------------------------------

loc_6B1A4219:				; CODE XREF: Ordinal1695+B9j
		mov	eax, [ebp+var_30]
		shr	eax, 2
		mov	[ebp+var_38], eax
		jmp	loc_6B1A4193
; ---------------------------------------------------------------------------

loc_6B1A4227:				; CODE XREF: Ordinal1695+61j
		lea	ecx, [ebp+var_20]
		call	Ordinal1666
		mov	byte ptr [ebp+var_4], 3
		mov	[ebp+var_2C], ebx

loc_6B1A4236:				; CODE XREF: Ordinal1695+1ABj
		mov	esi, [ebp+var_2C]
		cmp	esi, [ebp+var_38]
		jnb	loc_6B1A437F
		lea	ecx, [ebp+var_18]
		mov	[ebp+var_1C], ebx
		call	sub_6B18175E
		mov	eax, [ebp+Dst]
		lea	edi, [eax+esi*4]
		mov	eax, [edi]
		mov	[ebp+var_40], edi
		mov	[ebp+var_1C], eax
		mov	esi, 104h

loc_6B1A4260:				; CODE XREF: Ordinal1695+154j
		push	esi
		lea	ecx, [ebp+var_18]
		call	sub_6B19EF93
		push	esi
		push	eax
		push	dword ptr [edi]
		mov	eax, [ebp+var_3C]
		push	[ebp+arg_0]
		call	dword ptr [eax+44h]
		push	0FFFFFFFFh
		lea	ecx, [ebp+var_18]
		mov	edi, eax
		call	sub_6B185A33
		cmp	edi, esi
		jnz	short loc_6B1A428D
		mov	edi, [ebp+var_40]
		add	esi, esi
		jmp	short loc_6B1A4260
; ---------------------------------------------------------------------------

loc_6B1A428D:				; CODE XREF: Ordinal1695+14Dj
		cmp	edi, ebx
		jnz	short loc_6B1A42A9
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCsysteminfoG_1 ; "CSystemInfo::GetModuleListPSAPI() : m_P"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	[ebp+var_34], ebx
		jmp	short loc_6B1A42DF
; ---------------------------------------------------------------------------

loc_6B1A42A9:				; CODE XREF: Ordinal1695+158j
		cmp	[ebp+var_2C], ebx
		jnz	short loc_6B1A42C5
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_1C]
		mov	[eax+0Ch], ecx
		lea	ecx, [eax+10h]
		lea	eax, [ebp+var_18]
		push	eax
		call	sub_6B181F8B
		jmp	short loc_6B1A42DF
; ---------------------------------------------------------------------------

loc_6B1A42C5:				; CODE XREF: Ordinal1695+175j
		mov	ecx, [ebp+arg_4]
		lea	eax, [ebp+var_1C]
		push	eax
		add	ecx, 14h
		call	sub_6B1A3F51
		lea	ecx, [ebp+var_20]
		push	ecx
		mov	ecx, eax
		call	Ordinal1669

loc_6B1A42DF:				; CODE XREF: Ordinal1695+170j
					; Ordinal1695+18Cj
		inc	[ebp+var_2C]
		jmp	loc_6B1A4236
; ---------------------------------------------------------------------------

loc_6B1A42E7:				; DATA XREF: .rdata:6B1BD4C8o
		push	13h
		lea	ecx, [ebp+var_60]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_60]
		call	Ordinal1101
		mov	ecx, [ebp+var_68]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_60]
		call	Ordinal1103
		lea	ecx, [ebp+var_60]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A4395
		retn
; ---------------------------------------------------------------------------

loc_6B1A432A:				; DATA XREF: .rdata:6B1BD4D8o
		push	15h
		lea	ecx, [ebp+var_60]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_60]
		call	Ordinal1101
		mov	eax, [ebp+var_64]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_60]
		call	Ordinal1103
		lea	ecx, [ebp+var_60]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A4395
		retn
; ---------------------------------------------------------------------------

loc_6B1A437F:				; CODE XREF: Ordinal1695+105j
		mov	ecx, [ebp+var_18]
		add	ecx, 0FFFFFFF0h
		call	sub_6B18163D
		push	[ebp+Dst]	; void *
		call	??_V@YAXPAX@Z	; operator delete[](void *)
		pop	ecx
		jmp	short loc_6B1A4397
; ---------------------------------------------------------------------------

loc_6B1A4395:				; DATA XREF: Ordinal1695+1EDo
					; Ordinal1695+242o
		xor	ebx, ebx

loc_6B1A4397:				; CODE XREF: Ordinal1695+25Cj
		lea	ecx, [ebp+var_60]
		call	Ordinal1635
		test	eax, eax
		jz	short loc_6B1A43A6
		mov	[ebp+var_34], ebx

loc_6B1A43A6:				; CODE XREF: Ordinal1695+26Aj
		mov	ebx, [ebp+var_34]

loc_6B1A43A9:				; CODE XREF: Ordinal1695+8Cj
					; Ordinal1695+DDj
		lea	ecx, [ebp+var_60]
		call	Ordinal1090
		mov	eax, ebx
		jmp	short loc_6B1A43C2
; ---------------------------------------------------------------------------

loc_6B1A43B5:				; CODE XREF: Ordinal1695+23j
					; Ordinal1695+2Cj
		push	offset aCsysteminfoG_2 ; "CSystemInfo::GetModuleListPSAPI() : m_P"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax

loc_6B1A43C2:				; CODE XREF: Ordinal1695+27Cj
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal1695	endp ; sp-analysis failed

; Exported entry 1698.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1698
Ordinal1698	proc near		; CODE XREF: Ordinal1699+150p
					; DATA XREF: .rdata:off_6B1BF428o

var_280		= dword	ptr -280h
var_27C		= dword	ptr -27Ch
var_278		= byte ptr -278h
var_258		= byte ptr -258h
var_250		= dword	ptr -250h
var_24C		= dword	ptr -24Ch
Dst		= dword	ptr -248h
var_22C		= dword	ptr -22Ch
var_228		= byte ptr -228h
Src		= byte ptr -128h
var_24		= byte ptr -24h
var_20		= byte ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_136	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 274h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		mov	[ebp+var_14], eax
		mov	eax, [edi+84h]
		xor	ebx, ebx
		cmp	eax, ebx
		mov	[ebp+var_10], esp
		mov	[ebp+var_250], edi
		jz	loc_6B1A46C2
		cmp	[edi+0A4h], ebx
		jz	loc_6B1A46C2
		cmp	[edi+0A8h], ebx
		jz	loc_6B1A46C2
		mov	esi, [ebp+arg_0]
		push	dword ptr [esi+4]
		push	8
		call	eax
		push	eax
		lea	ecx, [ebp+var_258]
		call	Ordinal1151
		lea	ecx, [ebp+var_258]
		mov	[ebp+var_4], ebx
		call	Ordinal1649
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6B1A4470
		call	ds:GetLastError
		push	eax
		push	dword ptr [esi+4] ; Args
		push	offset aCsysteminfoG_3 ; "CSystemInfo::GetModuleListToolHelp() : "...

loc_6B1A4461:				; CODE XREF: Ordinal1698+DEj
		call	sub_6B18102E
		add	esp, 0Ch
		xor	esi, esi
		jmp	loc_6B1A45FA
; ---------------------------------------------------------------------------

loc_6B1A4470:				; CODE XREF: Ordinal1698+75j
		mov	ebx, 224h
		push	ebx		; Size
		lea	eax, [ebp+Dst]
		push	0		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		lea	eax, [ebp+Dst]
		push	eax
		lea	ecx, [ebp+var_258]
		mov	[ebp+Dst], ebx
		call	Ordinal1649
		push	eax
		call	dword ptr [edi+0A4h]
		test	eax, eax
		jnz	short loc_6B1A44BB
		call	ds:GetLastError
		push	eax
		push	dword ptr [esi+4]
		push	offset aCsysteminfoG_4 ; "CSystemInfo::GetModuleListToolHelp() : "...
		jmp	short loc_6B1A4461
; ---------------------------------------------------------------------------

loc_6B1A44BB:				; CODE XREF: Ordinal1698+CDj
		push	offset aCsysteminfoG_5 ; "CSystemInfo::GetModuleListToolHelp()"
		lea	ecx, [ebp+var_278]
		mov	[ebp+arg_0], 1
		call	Ordinal1089
		and	[ebp+var_24C], 0
		lea	ecx, [ebp+var_20]
		call	Ordinal1666
		mov	ebx, ds:_mbsnbicmp
		mov	byte ptr [ebp+var_4], 3

loc_6B1A44EB:				; CODE XREF: Ordinal1698+1CDj
		cmp	[ebp+var_24C], 0
		jnz	short loc_6B1A4552
		lea	edi, [esi+10h]
		mov	eax, [edi]
		push	dword ptr [eax-0Ch] ; size_t
		push	eax		; unsigned __int8 *
		lea	eax, [ebp+var_228]
		push	eax		; unsigned __int8 *
		call	ebx ; _mbsnbicmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_6B1A4523
		mov	eax, [edi]
		push	dword ptr [eax-0Ch] ; size_t
		push	eax		; unsigned __int8 *
		lea	eax, [ebp+Src]
		push	eax		; unsigned __int8 *
		call	ebx ; _mbsnbicmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_6B1A454C

loc_6B1A4523:				; CODE XREF: Ordinal1698+130j
		lea	eax, [ebp+Src]
		push	eax		; Src
		mov	ecx, edi
		call	sub_6B181EA9
		mov	eax, [ebp+var_22C]
		mov	edi, [ebp+var_250]
		mov	[esi+0Ch], eax
		mov	[ebp+var_24C], 1
		jmp	short loc_6B1A458D
; ---------------------------------------------------------------------------

loc_6B1A454C:				; CODE XREF: Ordinal1698+146j
		mov	edi, [ebp+var_250]

loc_6B1A4552:				; CODE XREF: Ordinal1698+117j
		and	[ebp+var_1C], 0
		lea	ecx, [ebp+var_18]
		call	sub_6B18175E
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_18]
		call	sub_6B181EA9
		mov	eax, [ebp+var_22C]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+var_1C]
		push	eax
		lea	ecx, [esi+14h]
		call	sub_6B1A3F51
		lea	ecx, [ebp+var_20]
		push	ecx
		mov	ecx, eax
		call	Ordinal1669

loc_6B1A458D:				; CODE XREF: Ordinal1698+16Fj
		lea	eax, [ebp+Dst]
		push	eax
		lea	ecx, [ebp+var_258]
		call	Ordinal1649
		push	eax
		call	dword ptr [edi+0A8h]
		test	eax, eax
		jnz	loc_6B1A44EB
		call	ds:GetLastError
		cmp	eax, 12h
		jz	short loc_6B1A45CE
		push	eax
		push	dword ptr [esi+4] ; Args
		push	offset aCsysteminfoG_6 ; "CSystemInfo::GetModuleListToolHelp() : "...
		call	sub_6B18102E
		add	esp, 0Ch
		and	[ebp+arg_0], 0

loc_6B1A45CE:				; CODE XREF: Ordinal1698+1DCj
		mov	ecx, [ebp+var_18]
		add	ecx, 0FFFFFFF0h
		call	sub_6B18163D

loc_6B1A45D9:				; DATA XREF: Ordinal1698+27Do
					; Ordinal1698+2E1o
		lea	ecx, [ebp+var_278]
		call	Ordinal1635
		test	eax, eax
		jz	short loc_6B1A45EC
		and	[ebp+arg_0], 0

loc_6B1A45EC:				; CODE XREF: Ordinal1698+20Bj
		lea	ecx, [ebp+var_278]
		call	Ordinal1090
		mov	esi, [ebp+arg_0]

loc_6B1A45FA:				; CODE XREF: Ordinal1698+90j
		lea	ecx, [ebp+var_258]
		call	Ordinal1152
		mov	eax, esi
		jmp	loc_6B1A46CF
; ---------------------------------------------------------------------------

loc_6B1A460C:				; DATA XREF: .rdata:6B1BD540o
		push	13h
		lea	ecx, [ebp+var_278]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_278]
		call	Ordinal1101
		mov	ecx, [ebp+var_280]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_278]
		call	Ordinal1103
		lea	ecx, [ebp+var_278]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A45D9
		retn
; ---------------------------------------------------------------------------

loc_6B1A465E:				; DATA XREF: .rdata:6B1BD550o
		push	15h
		lea	ecx, [ebp+var_278]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_278]
		call	Ordinal1101
		mov	eax, [ebp+var_27C]
		push	dword ptr [eax]
		lea	eax, [ebp+var_24]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+var_24]
		push	eax		; Src
		lea	ecx, [ebp+var_278]
		call	Ordinal1103
		lea	ecx, [ebp+var_278]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A45D9
		retn
; ---------------------------------------------------------------------------

loc_6B1A46C2:				; CODE XREF: Ordinal1698+30j
					; Ordinal1698+3Cj ...
		push	offset aCsysteminfoG_7 ; "CSystemInfo::GetModuleListToolHelp() : "...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax

loc_6B1A46CF:				; CODE XREF: Ordinal1698+22Cj
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal1698	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


sub_6B1A46E8	proc near		; CODE XREF: sub_6B1A470E+18p
					; Ordinal1696+23p ...
		push	esi
		push	edi
		mov	edi, ecx
		lea	esi, [edi+4]
		mov	eax, [esi]
		push	dword ptr [eax+4] ; void *
		call	sub_6B1A3FD1
		mov	eax, [esi]
		mov	[eax+4], eax
		mov	eax, [esi]
		and	dword ptr [edi+8], 0
		mov	[eax], eax
		mov	esi, [esi]
		pop	edi
		mov	[esi+8], esi
		pop	esi
		retn
sub_6B1A46E8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6B1A470E(int, void *, int)
sub_6B1A470E	proc near		; CODE XREF: sub_6B1A4845+12p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [eax]
		jnz	short loc_6B1A4732
		cmp	[ebp+arg_8], eax
		jnz	short loc_6B1A4732
		mov	ecx, esi
		call	sub_6B1A46E8
		mov	eax, [esi+4]
		mov	ecx, [eax]
		jmp	short loc_6B1A4757
; ---------------------------------------------------------------------------

loc_6B1A4732:				; CODE XREF: sub_6B1A470E+Fj
					; sub_6B1A470E+14j
		cmp	ecx, [ebp+arg_8]
		jz	short loc_6B1A4757
		push	edi

loc_6B1A4738:				; CODE XREF: sub_6B1A470E+46j
		mov	edi, ecx
		lea	ecx, [ebp+arg_4]
		call	sub_6B1A2DFA
		push	edi		; void *
		lea	eax, [ebp+var_4]
		push	eax		; int
		mov	ecx, esi
		call	sub_6B1A3CC3
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [ebp+arg_8]
		jnz	short loc_6B1A4738
		pop	edi

loc_6B1A4757:				; CODE XREF: sub_6B1A470E+22j
					; sub_6B1A470E+27j
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx
		pop	esi
		leave
		retn	0Ch
sub_6B1A470E	endp

; Exported entry 1673.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1673
Ordinal1673	proc near		; CODE XREF: sub_6B1A4870+12p
					; sub_6B1A488D+12p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		xor	eax, eax
		lea	ecx, [esi+10h]
		mov	dword ptr [esi], offset	off_6B1B8534
		mov	[esi+4], eax
		mov	[esi+8], eax
		mov	[esi+0Ch], eax
		call	sub_6B181879
		lea	ecx, [esi+14h]
		call	sub_6B1A3841
		push	[esp+4+arg_0]
		mov	ecx, esi
		call	Ordinal1674
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1673	endp

; Exported entry 1694.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1694(DWORD Args,	int)
		public Ordinal1694
Ordinal1694	proc near		; CODE XREF: Ordinal1696+115p
					; Ordinal1690+2Dp ...

var_8		= byte ptr -8
Args		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		push	esi
		mov	esi, [ebp+arg_4]
		mov	ebx, ecx
		push	edi
		mov	ecx, esi
		call	Ordinal1675
		mov	edi, [ebp+Args]
		push	edi		; dwProcessId
		push	0		; bInheritHandle
		push	410h		; dwDesiredAccess
		mov	[esi+4], edi
		call	ds:OpenProcess
		push	eax
		lea	ecx, [ebp+var_8]
		call	Ordinal1151
		lea	ecx, [ebp+var_8]
		call	Ordinal1649
		test	eax, eax
		jnz	short loc_6B1A47EC
		call	ds:GetLastError
		push	eax
		push	edi		; Args
		push	offset aCsysteminfoG_8 ; "CSystemInfo::GetProcessInfoPSAPI() : Op"...
		call	sub_6B18102E
		add	esp, 0Ch

loc_6B1A47E8:				; CODE XREF: Ordinal1694+99j
		xor	esi, esi
		jmp	short loc_6B1A4834
; ---------------------------------------------------------------------------

loc_6B1A47EC:				; CODE XREF: Ordinal1694+3Bj
		lea	eax, [esi+8]
		push	eax		; int
		lea	ecx, [ebp+var_8]
		call	Ordinal1649
		push	eax		; Args
		lea	ecx, [ebx+6Ch]
		call	Ordinal1681
		test	eax, eax
		jnz	short loc_6B1A480D
		push	edi
		push	offset aCsysteminfoG_9 ; "CSystemInfo::GetProcessInfoPSAPI() : m_"...
		jmp	short loc_6B1A4828
; ---------------------------------------------------------------------------

loc_6B1A480D:				; CODE XREF: Ordinal1694+6Dj
		push	esi
		lea	ecx, [ebp+var_8]
		call	Ordinal1649
		push	eax
		mov	ecx, ebx
		call	Ordinal1695
		test	eax, eax
		jnz	short loc_6B1A4831
		push	edi		; Args
		push	offset aCsysteminfo_10 ; "CSystemInfo::GetProcessInfoPSAPI() : Ge"...

loc_6B1A4828:				; CODE XREF: Ordinal1694+75j
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		jmp	short loc_6B1A47E8
; ---------------------------------------------------------------------------

loc_6B1A4831:				; CODE XREF: Ordinal1694+8Aj
		xor	esi, esi
		inc	esi

loc_6B1A4834:				; CODE XREF: Ordinal1694+54j
		lea	ecx, [ebp+var_8]
		call	Ordinal1152
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal1694	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A4845	proc near		; CODE XREF: sub_6B1A48DDj

var_4		= dword	ptr -4

		push	ecx
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		mov	ecx, [eax]
		push	eax		; int
		push	ecx		; void *
		lea	eax, [esp+10h+var_4]
		push	eax		; int
		mov	ecx, esi
		call	sub_6B1A470E
		push	dword ptr [esi+4] ; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		and	dword ptr [esi+4], 0
		and	dword ptr [esi+8], 0
		pop	ecx
		pop	esi
		pop	ecx
		retn
sub_6B1A4845	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A4870	proc near		; CODE XREF: sub_6B1A4BF1+3Ap

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		push	esi
		push	[esp+4+arg_4]
		mov	esi, ecx
		lea	ecx, [esi+4]
		mov	[esi], eax
		call	Ordinal1673
		mov	eax, esi
		pop	esi
		retn	8
sub_6B1A4870	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A488D	proc near		; CODE XREF: sub_6B1A48AA+1Dp

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, ecx
		mov	ecx, [eax]
		add	eax, 4
		mov	[esi], ecx
		push	eax
		lea	ecx, [esi+4]
		call	Ordinal1673
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A488D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1A48AA	proc near		; CODE XREF: sub_6B1A48EE+23p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		push	esi
		push	[ebp+arg_C]
		mov	esi, ecx
		mov	[esi], eax
		mov	eax, [ebp+arg_4]
		mov	[esi+4], eax
		mov	eax, [ebp+arg_8]
		lea	ecx, [esi+0Ch]
		mov	[esi+8], eax
		call	sub_6B1A488D
		mov	al, [ebp+arg_10]
		mov	[esi+30h], al
		mov	byte ptr [esi+31h], 0
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	14h
sub_6B1A48AA	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

sub_6B1A48DD	proc near		; CODE XREF: Ordinal1697+59p
		jmp	sub_6B1A4845
sub_6B1A48DD	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A48E2	proc near		; CODE XREF: Ordinal1697+14p
		push	esi
		mov	esi, ecx
		call	sub_6B1A3256
		mov	eax, esi
		pop	esi
		retn
sub_6B1A48E2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1A48EE	proc near		; CODE XREF: sub_6B1A491D+5Ep

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	esi
		push	34h		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	esi, eax
		test	esi, esi
		pop	ecx
		jz	short loc_6B1A4916
		push	[ebp+arg_10]
		mov	ecx, esi
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6B1A48AA

loc_6B1A4916:				; CODE XREF: sub_6B1A48EE+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	14h
sub_6B1A48EE	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1A491D	proc near		; CODE XREF: sub_6B1A4A85+71p
					; sub_6B1A4B16+19p ...

var_50		= dword	ptr -50h
var_28		= byte ptr -28h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	eax, offset unknown_libname_132	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		cmp	dword ptr [edi+8], 71C71C6h
		jb	short loc_6B1A496B
		push	offset aMapSetTTooLong ; "map/set<T> too long"
		lea	ecx, [ebp+var_28]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_28]
		push	eax
		lea	ecx, [ebp+var_50]
		call	sub_6B181357
		push	offset dword_6B1BA9E8
		lea	eax, [ebp+var_50]
		push	eax
		mov	[ebp+var_50], offset off_6B1AA914
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B1A496B:				; CODE XREF: sub_6B1A491D+19j
		mov	eax, [edi+4]
		mov	esi, [ebp+arg_8]
		push	0
		push	[ebp+arg_C]
		mov	ecx, edi
		push	eax
		push	esi
		push	eax
		call	sub_6B1A48EE
		inc	dword ptr [edi+8]
		mov	ebx, eax
		mov	eax, [edi+4]
		cmp	esi, eax
		jnz	short loc_6B1A4999
		mov	[eax+4], ebx
		mov	eax, [edi+4]
		mov	[eax], ebx
		mov	eax, [edi+4]
		jmp	short loc_6B1A49B7
; ---------------------------------------------------------------------------

loc_6B1A4999:				; CODE XREF: sub_6B1A491D+6Dj
		cmp	[ebp+arg_4], 0
		jz	short loc_6B1A49AC
		mov	[esi], ebx
		mov	eax, [edi+4]
		cmp	esi, [eax]
		jnz	short loc_6B1A49BA
		mov	[eax], ebx
		jmp	short loc_6B1A49BA
; ---------------------------------------------------------------------------

loc_6B1A49AC:				; CODE XREF: sub_6B1A491D+80j
		mov	[esi+8], ebx
		mov	eax, [edi+4]
		cmp	esi, [eax+8]
		jnz	short loc_6B1A49BA

loc_6B1A49B7:				; CODE XREF: sub_6B1A491D+7Aj
		mov	[eax+8], ebx

loc_6B1A49BA:				; CODE XREF: sub_6B1A491D+89j
					; sub_6B1A491D+8Dj ...
		mov	esi, ebx
		lea	eax, [ebx+4]
		jmp	loc_6B1A4A59
; ---------------------------------------------------------------------------

loc_6B1A49C4:				; CODE XREF: sub_6B1A491D+142j
		mov	ecx, [eax]
		mov	edx, [ecx+4]
		mov	edx, [edx]
		cmp	ecx, edx
		jnz	short loc_6B1A4A24
		mov	edx, [ecx+4]
		mov	edx, [edx+8]
		cmp	byte ptr [edx+30h], 0
		jnz	short loc_6B1A49F5

loc_6B1A49DB:				; CODE XREF: sub_6B1A491D+10Bj
		mov	ecx, [eax]
		mov	byte ptr [ecx+30h], 1
		mov	byte ptr [edx+30h], 1
		mov	ecx, [eax]
		mov	ecx, [ecx+4]
		mov	byte ptr [ecx+30h], 0
		mov	eax, [eax]
		mov	esi, [eax+4]
		jmp	short loc_6B1A4A56
; ---------------------------------------------------------------------------

loc_6B1A49F5:				; CODE XREF: sub_6B1A491D+BCj
		cmp	esi, [ecx+8]
		jnz	short loc_6B1A4A04
		mov	esi, ecx
		push	esi
		mov	ecx, edi
		call	sub_6B1A3020

loc_6B1A4A04:				; CODE XREF: sub_6B1A491D+DBj
		mov	eax, [esi+4]
		mov	byte ptr [eax+30h], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+30h], 0
		mov	eax, [esi+4]
		push	dword ptr [eax+4]
		mov	ecx, edi
		call	sub_6B1A3062
		jmp	short loc_6B1A4A56
; ---------------------------------------------------------------------------

loc_6B1A4A24:				; CODE XREF: sub_6B1A491D+B0j
		cmp	byte ptr [edx+30h], 0
		jz	short loc_6B1A49DB
		cmp	esi, [ecx]
		jnz	short loc_6B1A4A38
		mov	esi, ecx
		push	esi
		mov	ecx, edi
		call	sub_6B1A3062

loc_6B1A4A38:				; CODE XREF: sub_6B1A491D+10Fj
		mov	eax, [esi+4]
		mov	byte ptr [eax+30h], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+30h], 0
		mov	eax, [esi+4]
		push	dword ptr [eax+4]
		mov	ecx, edi
		call	sub_6B1A3020

loc_6B1A4A56:				; CODE XREF: sub_6B1A491D+D6j
					; sub_6B1A491D+105j
		lea	eax, [esi+4]

loc_6B1A4A59:				; CODE XREF: sub_6B1A491D+A2j
		mov	ecx, [eax]
		cmp	byte ptr [ecx+30h], 0
		jz	loc_6B1A49C4
		mov	eax, [edi+4]
		mov	eax, [eax+4]
		mov	ecx, [ebp+var_C]
		mov	byte ptr [eax+30h], 1
		mov	eax, [ebp+arg_0]
		pop	edi
		mov	[eax], ebx
		pop	esi
		pop	ebx
		mov	large fs:0, ecx
		leave
		retn	10h
sub_6B1A491D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1A4A85	proc near		; CODE XREF: sub_6B1A4B16+C8p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		mov	ebx, [ebp+arg_4]
		push	esi
		mov	esi, ecx
		mov	ecx, [esi+4]
		mov	eax, [ecx+4]
		cmp	byte ptr [eax+31h], 0
		push	edi
		mov	edi, ecx
		mov	byte ptr [ebp+var_4], 1
		jnz	short loc_6B1A4AC1
		mov	ecx, [ebx]

loc_6B1A4AA5:				; CODE XREF: sub_6B1A4A85+3Aj
		cmp	ecx, [eax+0Ch]
		mov	edi, eax
		setb	byte ptr [ebp+var_4]
		cmp	byte ptr [ebp+var_4], 0
		jz	short loc_6B1A4AB8
		mov	eax, [eax]
		jmp	short loc_6B1A4ABB
; ---------------------------------------------------------------------------

loc_6B1A4AB8:				; CODE XREF: sub_6B1A4A85+2Dj
		mov	eax, [eax+8]

loc_6B1A4ABB:				; CODE XREF: sub_6B1A4A85+31j
		cmp	byte ptr [eax+31h], 0
		jz	short loc_6B1A4AA5

loc_6B1A4AC1:				; CODE XREF: sub_6B1A4A85+1Cj
		cmp	byte ptr [ebp+var_4], 0
		mov	ecx, edi
		mov	[ebp+arg_4], ecx
		jz	short loc_6B1A4AE4
		mov	eax, [esi+4]
		cmp	edi, [eax]
		jnz	short loc_6B1A4AD9
		push	ebx
		push	edi
		push	1
		jmp	short loc_6B1A4AF0
; ---------------------------------------------------------------------------

loc_6B1A4AD9:				; CODE XREF: sub_6B1A4A85+4Cj
		lea	ecx, [ebp+arg_4]
		call	sub_6B1A2DBB
		mov	ecx, [ebp+arg_4]

loc_6B1A4AE4:				; CODE XREF: sub_6B1A4A85+45j
		mov	eax, [ecx+0Ch]
		cmp	eax, [ebx]
		jnb	short loc_6B1A4B06
		push	ebx
		push	edi
		push	[ebp+var_4]

loc_6B1A4AF0:				; CODE XREF: sub_6B1A4A85+52j
		lea	eax, [ebp+arg_4]
		push	eax
		mov	ecx, esi
		call	sub_6B1A491D
		mov	ecx, [eax]
		mov	eax, [ebp+arg_0]
		mov	byte ptr [eax+4], 1
		jmp	short loc_6B1A4B0D
; ---------------------------------------------------------------------------

loc_6B1A4B06:				; CODE XREF: sub_6B1A4A85+64j
		mov	eax, [ebp+arg_0]
		mov	byte ptr [eax+4], 0

loc_6B1A4B0D:				; CODE XREF: sub_6B1A4A85+7Fj
		pop	edi
		pop	esi
		mov	[eax], ecx
		pop	ebx
		leave
		retn	8
sub_6B1A4A85	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1A4B16	proc near		; CODE XREF: sub_6B1A4BF1+4Bp

var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		mov	ebx, ecx
		cmp	dword ptr [ebx+8], 0
		jnz	short loc_6B1A4B3C
		push	[ebp+arg_8]
		push	dword ptr [ebx+4]
		push	1
		push	[ebp+arg_0]
		call	sub_6B1A491D
		mov	eax, [ebp+arg_0]
		jmp	loc_6B1A4BEC
; ---------------------------------------------------------------------------

loc_6B1A4B3C:				; CODE XREF: sub_6B1A4B16+Cj
		mov	eax, [ebx+4]
		push	esi
		mov	esi, [ebp+arg_4]
		cmp	esi, [eax]
		push	edi
		mov	edi, [ebp+arg_8]
		jnz	short loc_6B1A4B5A
		mov	eax, [edi]
		cmp	eax, [esi+0Ch]
		jnb	loc_6B1A4BD7
		push	edi

loc_6B1A4B57:				; CODE XREF: sub_6B1A4B16+7Cj
		push	esi
		jmp	short loc_6B1A4BC6
; ---------------------------------------------------------------------------

loc_6B1A4B5A:				; CODE XREF: sub_6B1A4B16+33j
		cmp	esi, eax
		jnz	short loc_6B1A4B6E
		mov	eax, [eax+8]
		mov	ecx, [eax+0Ch]
		cmp	ecx, [edi]
		jnb	short loc_6B1A4BD7
		push	edi
		push	eax

loc_6B1A4B6A:				; CODE XREF: sub_6B1A4B16+7Fj
					; sub_6B1A4B16+ADj
		push	0
		jmp	short loc_6B1A4BC8
; ---------------------------------------------------------------------------

loc_6B1A4B6E:				; CODE XREF: sub_6B1A4B16+46j
		mov	eax, [edi]
		cmp	eax, [esi+0Ch]
		jnb	short loc_6B1A4B97
		lea	ecx, [ebp+arg_8]
		mov	[ebp+arg_8], esi
		call	sub_6B1A2DBB
		mov	ecx, [ebp+arg_8]
		mov	eax, [edi]
		cmp	[ecx+0Ch], eax
		jnb	short loc_6B1A4B97
		mov	eax, [ecx+8]
		cmp	byte ptr [eax+31h], 0
		push	edi
		jz	short loc_6B1A4B57
		push	ecx
		jmp	short loc_6B1A4B6A
; ---------------------------------------------------------------------------

loc_6B1A4B97:				; CODE XREF: sub_6B1A4B16+5Dj
					; sub_6B1A4B16+72j
		mov	eax, [edi]
		cmp	[esi+0Ch], eax
		jnb	short loc_6B1A4BD7
		lea	ecx, [ebp+arg_8]
		mov	[ebp+arg_8], esi
		call	sub_6B1A2DFA
		mov	ecx, [ebp+arg_8]
		cmp	ecx, [ebx+4]
		jz	short loc_6B1A4BB8
		mov	eax, [edi]
		cmp	eax, [ecx+0Ch]
		jnb	short loc_6B1A4BD7

loc_6B1A4BB8:				; CODE XREF: sub_6B1A4B16+99j
		mov	eax, [esi+8]
		cmp	byte ptr [eax+31h], 0
		push	edi
		jz	short loc_6B1A4BC5
		push	esi
		jmp	short loc_6B1A4B6A
; ---------------------------------------------------------------------------

loc_6B1A4BC5:				; CODE XREF: sub_6B1A4B16+AAj
		push	ecx

loc_6B1A4BC6:				; CODE XREF: sub_6B1A4B16+42j
		push	1

loc_6B1A4BC8:				; CODE XREF: sub_6B1A4B16+56j
		push	[ebp+arg_0]
		mov	ecx, ebx
		call	sub_6B1A491D
		mov	eax, [ebp+arg_0]
		jmp	short loc_6B1A4BEA
; ---------------------------------------------------------------------------

loc_6B1A4BD7:				; CODE XREF: sub_6B1A4B16+3Aj
					; sub_6B1A4B16+50j ...
		push	edi
		lea	eax, [ebp+var_8]
		push	eax
		mov	ecx, ebx
		call	sub_6B1A4A85
		mov	ecx, [eax]
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx

loc_6B1A4BEA:				; CODE XREF: sub_6B1A4B16+BFj
		pop	edi
		pop	esi

loc_6B1A4BEC:				; CODE XREF: sub_6B1A4B16+21j
		pop	ebx
		leave
		retn	0Ch
sub_6B1A4B16	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1A4BF1	proc near		; CODE XREF: Ordinal1696+13Ap
					; Ordinal1699+17Cp ...

var_50		= byte ptr -50h
var_4C		= byte ptr -4Ch
var_2C		= byte ptr -2Ch
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_137	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		push	ebx
		mov	ebx, [ebp+arg_0]
		push	esi
		push	edi
		push	ebx
		mov	edi, ecx
		call	sub_6B1A2F71
		mov	esi, eax
		cmp	esi, [edi+4]
		jz	short loc_6B1A4C1A
		mov	eax, [ebx]
		cmp	eax, [esi+0Ch]
		jnb	short loc_6B1A4C53

loc_6B1A4C1A:				; CODE XREF: sub_6B1A4BF1+20j
		lea	ecx, [ebp+var_2C]
		call	Ordinal1671
		and	[ebp+var_4], 0
		push	eax
		push	ebx
		lea	ecx, [ebp+var_50]
		call	sub_6B1A4870
		push	eax
		push	esi
		lea	eax, [ebp+arg_0]
		push	eax
		mov	ecx, edi
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B1A4B16
		mov	esi, [eax]
		lea	ecx, [ebp+var_4C]
		call	Ordinal1672
		lea	ecx, [ebp+var_2C]
		call	Ordinal1672

loc_6B1A4C53:				; CODE XREF: sub_6B1A4BF1+27j
		mov	ecx, [ebp+var_C]
		pop	edi
		lea	eax, [esi+10h]
		pop	esi
		pop	ebx
		mov	large fs:0, ecx
		leave
		retn	4
sub_6B1A4BF1	endp

; Exported entry 1696.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1696
Ordinal1696	proc near		; CODE XREF: Ordinal1691+2Dp
					; Ordinal1691+51p
					; DATA XREF: ...

var_80		= dword	ptr -80h
var_7C		= byte ptr -7Ch
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= byte ptr -58h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
Dst		= dword	ptr -2Ch
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_138	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 74h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		mov	esi, ecx
		mov	ecx, [ebp+arg_0]
		push	edi
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_38], esi
		call	sub_6B1A46E8
		xor	ebx, ebx
		cmp	[esi+1Ch], ebx
		jnz	short loc_6B1A4CA8
		push	offset aCsysteminfo_11 ; "CSystemInfo::GetProcessListPSAPI() : m_"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6B1A4E7D
; ---------------------------------------------------------------------------

loc_6B1A4CA8:				; CODE XREF: Ordinal1696+2Dj
		push	offset aCsysteminfo_12 ; "CSystemInfo::GetProcessListPSAPI()"
		lea	ecx, [ebp+var_58]
		mov	[ebp+var_34], 1
		call	Ordinal1089
		xor	edi, edi
		mov	[ebp+var_4], ebx
		mov	[ebp+var_28], ebx
		mov	esi, 80h
		mov	[ebp+var_30], ebx
		mov	[ebp+Dst], edi
		mov	byte ptr [ebp+var_4], 2

loc_6B1A4CD3:				; CODE XREF: Ordinal1696+E9j
		cmp	[ebp+var_28], esi

loc_6B1A4CD6:				; CODE XREF: Ordinal1696+E5j
		jnb	short loc_6B1A4D52
		push	edi		; void *
		mov	[ebp+var_28], esi
		call	??_V@YAXPAX@Z	; operator delete[](void *)
		pop	ecx
		push	esi
		lea	ecx, [ebp+Dst]
		mov	[ebp+Dst], ebx
		call	sub_6B1A2CFA
		test	al, al
		jnz	short loc_6B1A4D00
		push	[ebp+Dst]	; void *
		call	??_V@YAXPAX@Z	; operator delete[](void *)
		pop	ecx
		jmp	loc_6B1A4E73
; ---------------------------------------------------------------------------

loc_6B1A4D00:				; CODE XREF: Ordinal1696+89j
		mov	edi, [ebp+Dst]
		shl	esi, 2
		push	esi		; Size
		push	ebx		; Val
		push	edi		; Dst
		call	memset
		add	esp, 0Ch
		lea	eax, [ebp+var_30]
		push	eax
		mov	eax, [ebp+var_38]
		push	esi
		push	edi
		mov	[ebp+var_30], ebx
		call	dword ptr [eax+1Ch]
		cmp	eax, ebx
		jnz	short loc_6B1A4D43
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCsysteminfo_13 ; "CSystemInfo::GetProcessListPSAPI() : m_"...
		call	sub_6B18102E
		push	edi		; void *
		call	??_V@YAXPAX@Z	; operator delete[](void *)
		add	esp, 0Ch
		jmp	loc_6B1A4E73
; ---------------------------------------------------------------------------

loc_6B1A4D43:				; CODE XREF: Ordinal1696+BBj
		mov	esi, [ebp+var_30]
		shr	esi, 2
		cmp	[ebp+var_28], esi
		jnz	short loc_6B1A4CD6
		add	esi, esi
		jmp	short loc_6B1A4CD3
; ---------------------------------------------------------------------------

loc_6B1A4D52:				; CODE XREF: Ordinal1696:loc_6B1A4CD6j
		lea	ecx, [ebp+var_80]
		call	Ordinal1671
		mov	byte ptr [ebp+var_4], 3
		mov	[ebp+var_28], ebx

loc_6B1A4D61:				; CODE XREF: Ordinal1696+14Dj
		cmp	[ebp+var_28], esi
		jnb	loc_6B1A4E4E
		mov	eax, [ebp+var_28]
		mov	eax, [edi+eax*4]
		cmp	eax, ebx
		jz	short loc_6B1A4DB1
		lea	ecx, [ebp+var_80]
		push	ecx		; int
		mov	ecx, [ebp+var_38]
		push	eax		; Args
		call	Ordinal1694
		test	eax, eax
		jnz	short loc_6B1A4D9A
		cmp	[ebp+var_64], ebx
		jnz	short loc_6B1A4D9A
		push	offset aCsysteminfo_14 ; "CSystemInfo::GetProcessListPSAPI() : Ge"...
		call	sub_6B18102E
		pop	ecx
		mov	[ebp+var_34], ebx
		jmp	short loc_6B1A4DB1
; ---------------------------------------------------------------------------

loc_6B1A4D9A:				; CODE XREF: Ordinal1696+11Cj
					; Ordinal1696+121j
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+var_7C]
		push	eax
		call	sub_6B1A4BF1
		lea	ecx, [ebp+var_80]
		push	ecx
		mov	ecx, eax
		call	Ordinal1674

loc_6B1A4DB1:				; CODE XREF: Ordinal1696+10Bj
					; Ordinal1696+131j
		inc	[ebp+var_28]
		jmp	short loc_6B1A4D61
; ---------------------------------------------------------------------------

loc_6B1A4DB6:				; DATA XREF: .rdata:6B1BD608o
		push	13h
		lea	ecx, [ebp+var_58]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_58]
		call	Ordinal1101
		mov	ecx, [ebp+var_5C]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_58]
		call	Ordinal1103
		lea	ecx, [ebp+var_58]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A4E5F
		retn
; ---------------------------------------------------------------------------

loc_6B1A4DF9:				; DATA XREF: .rdata:6B1BD618o
		push	15h
		lea	ecx, [ebp+var_58]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_58]
		call	Ordinal1101
		mov	eax, [ebp+var_60]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_58]
		call	Ordinal1103
		lea	ecx, [ebp+var_58]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A4E5F
		retn
; ---------------------------------------------------------------------------

loc_6B1A4E4E:				; CODE XREF: Ordinal1696+FDj
		lea	ecx, [ebp+var_80]
		call	Ordinal1672
		push	edi		; void *
		call	??_V@YAXPAX@Z	; operator delete[](void *)
		pop	ecx
		jmp	short loc_6B1A4E61
; ---------------------------------------------------------------------------

loc_6B1A4E5F:				; DATA XREF: Ordinal1696+18Co
					; Ordinal1696+1E1o
		xor	ebx, ebx

loc_6B1A4E61:				; CODE XREF: Ordinal1696+1F6j
		lea	ecx, [ebp+var_58]
		call	Ordinal1635
		test	eax, eax
		jz	short loc_6B1A4E70
		mov	[ebp+var_34], ebx

loc_6B1A4E70:				; CODE XREF: Ordinal1696+204j
		mov	ebx, [ebp+var_34]

loc_6B1A4E73:				; CODE XREF: Ordinal1696+94j
					; Ordinal1696+D7j
		lea	ecx, [ebp+var_58]
		call	Ordinal1090
		mov	eax, ebx

loc_6B1A4E7D:				; CODE XREF: Ordinal1696+3Cj
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal1696	endp ; sp-analysis failed

; Exported entry 1699.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1699(char Args, int)
		public Ordinal1699
Ordinal1699	proc near		; CODE XREF: Ordinal1691+7Fp
					; Ordinal1697+22p
					; DATA XREF: ...

var_194		= dword	ptr -194h
var_190		= dword	ptr -190h
var_18C		= byte ptr -18Ch
var_16C		= byte ptr -16Ch
var_164		= dword	ptr -164h
var_160		= dword	ptr -160h
Dst		= dword	ptr -15Ch
var_154		= dword	ptr -154h
var_144		= dword	ptr -144h
Src		= byte ptr -138h
var_34		= byte ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_24		= byte ptr -24h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Args		= byte ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_139	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 188h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		mov	ecx, [ebp+arg_4]
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		call	sub_6B1A46E8
		mov	eax, [esi+84h]
		xor	ebx, ebx
		cmp	eax, ebx
		jz	loc_6B1A517C
		cmp	[esi+0ACh], ebx
		jz	loc_6B1A517C
		cmp	[esi+0B0h], ebx
		jz	loc_6B1A517C
		push	ebx
		push	2
		call	eax
		push	eax
		lea	ecx, [ebp+var_16C]
		call	Ordinal1151
		lea	ecx, [ebp+var_16C]
		mov	[ebp+var_4], ebx
		call	Ordinal1649
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6B1A4F28
		call	ds:GetLastError
		push	eax
		push	dword ptr [ebp+Args] ; Args
		push	offset aCsysteminfo_15 ; "CSystemInfo::GetProcessListToolHelp()	:"...

loc_6B1A4F19:				; CODE XREF: Ordinal1699+DAj
		call	sub_6B18102E
		add	esp, 0Ch
		xor	esi, esi
		jmp	loc_6B1A516D
; ---------------------------------------------------------------------------

loc_6B1A4F28:				; CODE XREF: Ordinal1699+72j
		mov	edi, 128h
		push	edi		; Size
		lea	eax, [ebp+Dst]
		push	ebx		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		lea	eax, [ebp+Dst]
		push	eax
		lea	ecx, [ebp+var_16C]
		mov	[ebp+Dst], edi
		call	Ordinal1649
		push	eax
		call	dword ptr [esi+0ACh]
		test	eax, eax
		jnz	short loc_6B1A4F72
		call	ds:GetLastError
		push	eax
		push	dword ptr [ebp+Args]
		push	offset aCsysteminfo_16 ; "CSystemInfo::GetProcessListToolHelp()	:"...
		jmp	short loc_6B1A4F19
; ---------------------------------------------------------------------------

loc_6B1A4F72:				; CODE XREF: Ordinal1699+C9j
		xor	edi, edi
		inc	edi
		push	offset aCsysteminfo_17 ; "CSystemInfo::GetProcessListToolHelp()"
		lea	ecx, [ebp+var_18C]
		mov	[ebp+var_160], edi
		mov	[ebp+var_164], ebx
		call	Ordinal1089
		lea	ecx, [ebp+var_34]
		call	Ordinal1671
		mov	byte ptr [ebp+var_4], 3

loc_6B1A4F9D:				; CODE XREF: Ordinal1699+1A7j
		mov	eax, [ebp+var_154]
		cmp	eax, ebx
		jz	short loc_6B1A5022
		cmp	eax, dword ptr [ebp+Args]
		jz	short loc_6B1A4FB1
		cmp	dword ptr [ebp+Args], ebx
		jnz	short loc_6B1A5022

loc_6B1A4FB1:				; CODE XREF: Ordinal1699+114j
		lea	ecx, [ebp+var_34]
		mov	[ebp+var_164], edi
		call	Ordinal1675
		mov	eax, [ebp+var_154]
		mov	[ebp+var_30], eax
		mov	eax, [ebp+var_144]
		mov	[ebp+var_2C], eax
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_24]
		call	sub_6B181EA9
		lea	eax, [ebp+var_34]
		push	eax
		mov	ecx, esi
		call	Ordinal1698
		test	eax, eax
		jnz	short loc_6B1A500B
		cmp	[ebp+var_18], ebx
		jnz	short loc_6B1A500B
		push	[ebp+var_30]	; Args
		push	offset aCsysteminfo_18 ; "CSystemInfo::GetProcessListToolHelp()	:"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	[ebp+var_160], ebx
		jmp	short loc_6B1A5022
; ---------------------------------------------------------------------------

loc_6B1A500B:				; CODE XREF: Ordinal1699+157j
					; Ordinal1699+15Cj
		mov	ecx, [ebp+arg_4]
		lea	eax, [ebp+var_30]
		push	eax
		call	sub_6B1A4BF1
		lea	ecx, [ebp+var_34]
		push	ecx
		mov	ecx, eax
		call	Ordinal1674

loc_6B1A5022:				; CODE XREF: Ordinal1699+10Fj
					; Ordinal1699+119j ...
		lea	eax, [ebp+Dst]
		push	eax
		lea	ecx, [ebp+var_16C]
		call	Ordinal1649
		push	eax
		call	dword ptr [esi+0B0h]
		cmp	eax, ebx
		jnz	loc_6B1A4F9D
		call	ds:GetLastError
		cmp	eax, 12h
		jz	short loc_6B1A5065
		push	eax
		push	dword ptr [ebp+Args] ; Args
		push	offset aCsysteminfo_19 ; "CSystemInfo::GetProcessListToolHelp()	:"...
		call	sub_6B18102E
		add	esp, 0Ch
		mov	[ebp+var_160], ebx

loc_6B1A5065:				; CODE XREF: Ordinal1699+1B6j
		lea	ecx, [ebp+var_34]
		call	Ordinal1672
		jmp	loc_6B1A512A
; ---------------------------------------------------------------------------

loc_6B1A5072:				; DATA XREF: .rdata:6B1BD680o
		push	13h
		lea	ecx, [ebp+var_18C]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_18C]
		call	Ordinal1101
		mov	ecx, [ebp+var_194]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_18C]
		call	Ordinal1103
		lea	ecx, [ebp+var_18C]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A5128
		retn
; ---------------------------------------------------------------------------

loc_6B1A50C4:				; DATA XREF: .rdata:6B1BD690o
		push	15h
		lea	ecx, [ebp+var_18C]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_18C]
		call	Ordinal1101
		mov	eax, [ebp+var_190]
		push	dword ptr [eax]
		lea	eax, [ebp+var_24]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+var_24]
		push	eax		; Src
		lea	ecx, [ebp+var_18C]
		call	Ordinal1103
		lea	ecx, [ebp+var_18C]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A5128
		retn
; ---------------------------------------------------------------------------

loc_6B1A5128:				; DATA XREF: Ordinal1699+228o
					; Ordinal1699+28Co
		xor	ebx, ebx

loc_6B1A512A:				; CODE XREF: Ordinal1699+1D7j
		lea	ecx, [ebp+var_18C]
		call	Ordinal1635
		test	eax, eax
		jz	short loc_6B1A513F
		mov	[ebp+var_160], ebx

loc_6B1A513F:				; CODE XREF: Ordinal1699+2A1j
		cmp	[ebp+var_164], ebx
		jnz	short loc_6B1A515C
		push	dword ptr [ebp+Args] ; Args
		push	offset aCsysteminfo_20 ; "CSystemInfo::GetProcessListToolHelp()	:"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	[ebp+var_160], ebx

loc_6B1A515C:				; CODE XREF: Ordinal1699+2AFj
		lea	ecx, [ebp+var_18C]
		call	Ordinal1090
		mov	esi, [ebp+var_160]

loc_6B1A516D:				; CODE XREF: Ordinal1699+8Dj
		lea	ecx, [ebp+var_16C]
		call	Ordinal1152
		mov	eax, esi
		jmp	short loc_6B1A5189
; ---------------------------------------------------------------------------

loc_6B1A517C:				; CODE XREF: Ordinal1699+32j
					; Ordinal1699+3Ej ...
		push	offset aCsysteminfo_21 ; "CSystemInfo::GetProcessListToolHelp()	:"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax

loc_6B1A5189:				; CODE XREF: Ordinal1699+2E4j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal1699	endp ; sp-analysis failed

; Exported entry 1691.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1691
Ordinal1691	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		mov	esi, ecx
		mov	eax, [esi+0B8h]
		push	edi
		xor	ebx, ebx
		xor	edi, edi
		sub	eax, ebx
		jz	short loc_6B1A51E9
		dec	eax
		jz	short loc_6B1A521B
		dec	eax
		jz	short loc_6B1A51CA
		push	offset aCsysteminfo_22 ; "CSystemInfo::GetProcessList()	: switch("...
		call	sub_6B18102E
		jmp	short loc_6B1A5245
; ---------------------------------------------------------------------------

loc_6B1A51CA:				; CODE XREF: Ordinal1691+1Aj
		push	[ebp+arg_0]
		mov	ecx, esi
		call	Ordinal1696
		mov	edi, eax
		cmp	edi, ebx
		jnz	short loc_6B1A5246
		mov	eax, [ebp+arg_0]
		cmp	[eax+8], ebx
		jnz	short loc_6B1A5246
		push	offset aCsysteminfo_23 ; "CSystemInfo::GetProcessList()	: GetProc"...
		jmp	short loc_6B1A5240
; ---------------------------------------------------------------------------

loc_6B1A51E9:				; CODE XREF: Ordinal1691+14j
		cmp	[esi+78h], ebx
		jz	short loc_6B1A5213
		push	[ebp+arg_0]
		mov	ecx, esi
		call	Ordinal1696
		mov	edi, eax
		cmp	edi, ebx
		jnz	short loc_6B1A5246
		mov	eax, [ebp+arg_0]
		cmp	[eax+8], ebx
		jnz	short loc_6B1A5246
		push	offset aCsysteminfo_23 ; "CSystemInfo::GetProcessList()	: GetProc"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B1A521B
; ---------------------------------------------------------------------------

loc_6B1A5213:				; CODE XREF: Ordinal1691+4Aj
		cmp	[esi+0B4h], ebx
		jz	short loc_6B1A523B

loc_6B1A521B:				; CODE XREF: Ordinal1691+17j
					; Ordinal1691+6Fj
		push	[ebp+arg_0]	; int
		mov	ecx, esi
		push	ebx		; Args
		call	Ordinal1699
		mov	edi, eax
		cmp	edi, ebx
		jnz	short loc_6B1A5246
		mov	eax, [ebp+arg_0]
		cmp	[eax+8], ebx
		jnz	short loc_6B1A5246
		push	offset aCsysteminfo_24 ; "CSystemInfo::GetProcessList()	: GetProc"...
		jmp	short loc_6B1A5240
; ---------------------------------------------------------------------------

loc_6B1A523B:				; CODE XREF: Ordinal1691+77j
		push	offset aCsysteminfo_25 ; "CSystemInfo::GetProcessList()	: m_bTool"...

loc_6B1A5240:				; CODE XREF: Ordinal1691+45j
					; Ordinal1691+97j
		call	sub_6B18102E

loc_6B1A5245:				; CODE XREF: Ordinal1691+26j
		pop	ecx

loc_6B1A5246:				; CODE XREF: Ordinal1691+36j
					; Ordinal1691+3Ej ...
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn	4
Ordinal1691	endp

; Exported entry 1697.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1697(char Args, int)
		public Ordinal1697
Ordinal1697	proc near		; CODE XREF: Ordinal1690+76p
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= dword	ptr -0Ch
Args		= byte ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		mov	ecx, [ebp+arg_4]
		call	Ordinal1675
		lea	ecx, [ebp+var_C]
		call	sub_6B1A48E2
		lea	eax, [ebp+var_C]
		push	eax		; int
		push	dword ptr [ebp+Args] ; Args
		mov	ecx, esi
		call	Ordinal1699
		test	eax, eax
		jnz	short loc_6B1A528D
		push	dword ptr [ebp+Args] ; Args
		push	offset aCsysteminfo_26 ; "CSystemInfo::GetProcessInfoToolHelp()	:"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	esi, esi
		jmp	short loc_6B1A52A5
; ---------------------------------------------------------------------------

loc_6B1A528D:				; CODE XREF: Ordinal1697+29j
		lea	eax, [ebp+Args]
		push	eax
		lea	ecx, [ebp+var_C]
		call	sub_6B1A4BF1
		mov	ecx, [ebp+arg_4]
		push	eax
		call	Ordinal1674
		xor	esi, esi
		inc	esi

loc_6B1A52A5:				; CODE XREF: Ordinal1697+3Cj
		lea	ecx, [ebp+var_C]
		call	sub_6B1A48DD
		mov	eax, esi
		pop	esi
		leave
		retn	8
Ordinal1697	endp ; sp-analysis failed

; Exported entry 1690.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1690(DWORD Args,	int)
		public Ordinal1690
Ordinal1690	proc near		; DATA XREF: .rdata:off_6B1BF428o

Args		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, ecx
		mov	eax, [esi+0B8h]
		push	edi
		xor	edi, edi
		sub	eax, edi
		jz	short loc_6B1A52F3
		dec	eax
		jz	short loc_6B1A5322
		dec	eax
		jz	short loc_6B1A52D9
		push	offset aCsysteminfo_27 ; "CSystemInfo::GetProcessInfo()	: switch("...
		call	sub_6B18102E
		jmp	short loc_6B1A5346
; ---------------------------------------------------------------------------

loc_6B1A52D9:				; CODE XREF: Ordinal1690+17j
		push	[ebp+arg_4]	; int
		mov	ecx, esi
		push	[ebp+Args]	; Args
		call	Ordinal1694
		mov	edi, eax
		test	edi, edi
		jnz	short loc_6B1A5347
		push	offset aCsysteminfo_28 ; "CSystemInfo::GetProcessInfo()	: GetProc"...
		jmp	short loc_6B1A5341
; ---------------------------------------------------------------------------

loc_6B1A52F3:				; CODE XREF: Ordinal1690+11j
		cmp	dword ptr [esi+78h], 0
		jz	short loc_6B1A5319
		push	[ebp+arg_4]	; int
		mov	ecx, esi
		push	[ebp+Args]	; Args
		call	Ordinal1694
		mov	edi, eax
		test	edi, edi
		jnz	short loc_6B1A5347
		push	offset aCsysteminfo_28 ; "CSystemInfo::GetProcessInfo()	: GetProc"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B1A5322
; ---------------------------------------------------------------------------

loc_6B1A5319:				; CODE XREF: Ordinal1690+43j
		cmp	dword ptr [esi+0B4h], 0
		jz	short loc_6B1A533C

loc_6B1A5322:				; CODE XREF: Ordinal1690+14j
					; Ordinal1690+63j
		push	[ebp+arg_4]	; int
		mov	ecx, esi
		push	[ebp+Args]	; Args
		call	Ordinal1697
		mov	edi, eax
		test	edi, edi
		jnz	short loc_6B1A5347
		push	offset aCsysteminfo_29 ; "CSystemInfo::GetProcessInfo()	: GetProc"...
		jmp	short loc_6B1A5341
; ---------------------------------------------------------------------------

loc_6B1A533C:				; CODE XREF: Ordinal1690+6Cj
		push	offset aCsysteminfo_30 ; "CSystemInfo::GetProcessInfo()	: m_bTool"...

loc_6B1A5341:				; CODE XREF: Ordinal1690+3Dj
					; Ordinal1690+86j
		call	sub_6B18102E

loc_6B1A5346:				; CODE XREF: Ordinal1690+23j
		pop	ecx

loc_6B1A5347:				; CODE XREF: Ordinal1690+36j
					; Ordinal1690+56j ...
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		retn	8
Ordinal1690	endp

; Exported entry 1700.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1700
Ordinal1700	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+28h]
		mov	dword ptr [esi], offset	off_6B1B8EE4
		mov	byte ptr [esi+24h], 0
		call	Ordinal1776
		push	10h		; Size
		lea	eax, [esi+4]
		push	0		; Val
		push	eax		; Dst
		call	memset
		push	10h		; Size
		lea	eax, [esi+14h]
		push	0		; Val
		push	eax		; Dst
		call	memset
		add	esp, 18h
		mov	eax, esi
		pop	esi
		retn
Ordinal1700	endp

; Exported entry 1702.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1702
Ordinal1702	proc near		; CODE XREF: sub_6B1A543A+3p
					; DATA XREF: .rdata:off_6B1BF428o
		mov	dword ptr [ecx], offset	off_6B1B8EE4
		add	ecx, 28h
		jmp	Ordinal1778
Ordinal1702	endp

; Exported entry 1703.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1703
Ordinal1703	proc near		; CODE XREF: Ordinal1701+38p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	ebx
		push	esi
		push	edi
		mov	ebx, ecx
		lea	esi, [eax+4]
		lea	edi, [ebx+4]
		movsd
		movsd
		movsd
		movsd
		lea	esi, [eax+14h]
		lea	edi, [ebx+14h]
		movsd
		movsd
		movsd
		movsd
		mov	cl, [eax+24h]
		add	eax, 28h
		mov	[ebx+24h], cl
		push	eax
		lea	ecx, [ebx+28h]
		call	Ordinal1779
		pop	edi
		pop	esi
		mov	eax, ebx
		pop	ebx
		retn	4
Ordinal1703	endp

; Exported entry 1704.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1704
Ordinal1704	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+28h]
		call	Ordinal1780
		cmp	byte ptr [esi+24h], 0
		jz	short loc_6B1A53E7
		add	esi, 4
		push	esi		; lpSystemTime
		call	ds:GetLocalTime
		jmp	short loc_6B1A53F1
; ---------------------------------------------------------------------------

loc_6B1A53E7:				; CODE XREF: Ordinal1704+Fj
		add	esi, 4
		push	esi		; lpSystemTime
		call	ds:GetSystemTime

loc_6B1A53F1:				; CODE XREF: Ordinal1704+1Bj
		mov	eax, esi
		pop	esi
		retn
Ordinal1704	endp

; Exported entry 1705.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1705
Ordinal1705	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+28h]
		call	Ordinal1781
		cmp	byte ptr [esi+24h], 0
		jz	short loc_6B1A5412
		add	esi, 14h
		push	esi		; lpSystemTime
		call	ds:GetLocalTime
		jmp	short loc_6B1A541C
; ---------------------------------------------------------------------------

loc_6B1A5412:				; CODE XREF: Ordinal1705+Fj
		add	esi, 14h
		push	esi		; lpSystemTime
		call	ds:GetSystemTime

loc_6B1A541C:				; CODE XREF: Ordinal1705+1Bj
		mov	eax, esi
		pop	esi
		retn
Ordinal1705	endp

; Exported entry 1707.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1707
Ordinal1707	proc near		; DATA XREF: .rdata:off_6B1BF428o
		lea	eax, [ecx+14h]
		retn
Ordinal1707	endp

; Exported entry 1708.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1708
Ordinal1708	proc near		; DATA XREF: .rdata:off_6B1BF428o
		add	ecx, 28h
		jmp	Ordinal1784
Ordinal1708	endp

; Exported entry 1709.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1709
Ordinal1709	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	al, [ecx+24h]
		retn
Ordinal1709	endp

; Exported entry 1710.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1710
Ordinal1710	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= byte ptr  4

		mov	al, [esp+arg_0]
		mov	[ecx+24h], al
		retn	4
Ordinal1710	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A543A(void *, char)
sub_6B1A543A	proc near		; DATA XREF: .rdata:off_6B1B8EE4o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1702
		test	[esp+4+arg_0], 1
		jz	short loc_6B1A5450
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A5450:				; CODE XREF: sub_6B1A543A+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A543A	endp

; Exported entry 1701.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1701
Ordinal1701	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		lea	ecx, [esi+28h]
		mov	dword ptr [esi], offset	off_6B1B8EE4
		mov	byte ptr [esi+24h], 0
		call	Ordinal1776
		push	10h		; Size
		lea	eax, [esi+4]
		push	0		; Val
		push	eax		; Dst
		call	memset
		push	10h		; Size
		lea	eax, [esi+14h]
		push	0		; Val
		push	eax		; Dst
		call	memset
		add	esp, 18h
		push	[esp+4+arg_0]
		mov	ecx, esi
		call	Ordinal1703
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1701	endp

; Exported entry 1711.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1711
Ordinal1711	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, ecx
		mov	dword ptr [eax], offset	off_6B1B8EE8
		retn
Ordinal1711	endp

; Exported entry 1712.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1712
Ordinal1712	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	dword ptr [ecx], offset	off_6B1B8EE8
		retn
Ordinal1712	endp

; Exported entry 1717.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1717
Ordinal1717	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+14h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	esi, [esi+4]
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal1717	endp

; Exported entry 1718.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1718
Ordinal1718	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+14h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	eax, [ebp+arg_0]
		lea	ecx, [ebp+var_C]
		mov	[esi+4], eax
		call	Ordinal1573
		pop	esi
		leave
		retn	4
Ordinal1718	endp

; Exported entry 1720.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1720
Ordinal1720	proc near		; DATA XREF: .rdata:6B1B8F14o
					; .rdata:6B1B8F84o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		mov	ecx, [esi]
		push	[esp+4+arg_0]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6B1A551C
		push	eax		; hEvent
		call	ds:SetEvent

loc_6B1A551C:				; CODE XREF: Ordinal1720+15j
		cmp	dword ptr [esi+8], 0
		jz	short loc_6B1A5531
		mov	ecx, [esi]
		test	ecx, ecx
		jz	short loc_6B1A552E
		mov	eax, [ecx]
		push	1
		call	dword ptr [eax]

loc_6B1A552E:				; CODE XREF: Ordinal1720+28j
		and	dword ptr [esi], 0

loc_6B1A5531:				; CODE XREF: Ordinal1720+22j
		pop	esi
		retn	8
Ordinal1720	endp

; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_10. PRESS	KEYPAD "+" TO EXPAND]
; Exported entry 1716.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1716
Ordinal1716	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+14h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	esi, [esi+10h]
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal1716	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A557B	proc near		; CODE XREF: sub_6B1A56C9+3p
		push	14h		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		test	eax, eax
		pop	ecx
		jz	short loc_6B1A5589
		mov	[eax], eax

loc_6B1A5589:				; CODE XREF: sub_6B1A557B+Aj
		lea	ecx, [eax+4]
		test	ecx, ecx
		jz	short locret_6B1A5592
		mov	[ecx], eax

locret_6B1A5592:			; CODE XREF: sub_6B1A557B+13j
		retn
sub_6B1A557B	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A5593	proc near		; CODE XREF: Ordinal1714-48p
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		mov	ecx, [eax]
		mov	[eax], eax
		mov	eax, [esi+4]
		mov	[eax+4], eax
		and	dword ptr [esi+8], 0
		cmp	ecx, [esi+4]
		jz	short loc_6B1A55BE
		push	edi

loc_6B1A55AD:				; CODE XREF: sub_6B1A5593+28j
		mov	edi, [ecx]
		push	ecx		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		cmp	edi, [esi+4]
		pop	ecx
		mov	ecx, edi
		jnz	short loc_6B1A55AD
		pop	edi

loc_6B1A55BE:				; CODE XREF: sub_6B1A5593+17j
		pop	esi
		retn
sub_6B1A5593	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A55C0	proc near		; CODE XREF: sub_6B1A5650+11p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	14h		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		test	eax, eax
		pop	ecx
		jz	short locret_6B1A55E7
		mov	ecx, [esp+arg_0]
		push	esi
		mov	esi, [esp+4+arg_8]
		push	edi
		mov	[eax], ecx
		mov	ecx, [esp+8+arg_4]
		mov	[eax+4], ecx
		lea	edi, [eax+8]
		movsd
		movsd
		movsd
		pop	edi
		pop	esi

locret_6B1A55E7:			; CODE XREF: sub_6B1A55C0+Aj
		retn	0Ch
sub_6B1A55C0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1A55EA	proc near		; CODE XREF: sub_6B1A5650+1Cp

var_50		= dword	ptr -50h
var_28		= byte ptr -28h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_140	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		mov	eax, [ecx+8]
		mov	edx, [ebp+arg_0]
		push	esi
		mov	esi, 15555555h
		sub	esi, eax
		cmp	esi, edx
		pop	esi
		jnb	short loc_6B1A563D
		push	offset aListTTooLong ; "list<T>	too long"
		lea	ecx, [ebp+var_28]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_28]
		push	eax
		lea	ecx, [ebp+var_50]
		call	sub_6B181357
		push	offset dword_6B1BA9E8
		lea	eax, [ebp+var_50]
		push	eax
		mov	[ebp+var_50], offset off_6B1AA914
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B1A563D:				; CODE XREF: sub_6B1A55EA+1Ej
		add	eax, edx
		mov	[ecx+8], eax
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		leave
		retn	4
sub_6B1A55EA	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A5650	proc near		; CODE XREF: Ordinal1715+8Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	esi
		push	edi
		push	[esp+0Ch+arg_4]
		mov	edi, [esp+10h+arg_0]
		push	dword ptr [edi+4]
		mov	ebx, ecx
		push	edi
		call	sub_6B1A55C0
		push	1
		mov	ecx, ebx
		mov	esi, eax
		call	sub_6B1A55EA
		mov	[edi+4], esi
		mov	eax, [esi+4]
		pop	edi
		mov	[eax], esi
		pop	esi
		pop	ebx
		retn	8
sub_6B1A5650	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6B1A567F(int, void *)
sub_6B1A567F	proc near		; CODE XREF: Ordinal1719+3Bp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		mov	esi, ecx
		cmp	eax, [esi+4]
		push	edi
		mov	edi, [eax]
		jz	short loc_6B1A56A7
		mov	ecx, [eax+4]
		mov	edx, [eax]
		mov	[ecx], edx
		mov	ecx, [eax]
		mov	edx, [eax+4]
		push	eax		; void *
		mov	[ecx+4], edx
		call	??3@YAXPAX@Z	; operator delete(void *)
		dec	dword ptr [esi+8]
		pop	ecx

loc_6B1A56A7:				; CODE XREF: sub_6B1A567F+Dj
		mov	eax, [esp+8+arg_0]
		mov	[eax], edi
		pop	edi
		pop	esi
		retn	8
sub_6B1A567F	endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR Ordinal1714

loc_6B1A56B2:				; CODE XREF: Ordinal1714+15j
		push	esi
		mov	esi, ecx
		call	sub_6B1A5593
		push	dword ptr [esi+4] ; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		and	dword ptr [esi+4], 0
		pop	ecx
		pop	esi
		retn
; END OF FUNCTION CHUNK	FOR Ordinal1714

; =============== S U B	R O U T	I N E =======================================


sub_6B1A56C9	proc near		; CODE XREF: Ordinal1713+Cp
		push	esi
		mov	esi, ecx
		call	sub_6B1A557B
		and	dword ptr [esi+8], 0
		mov	[esi+4], eax
		mov	eax, esi
		pop	esi
		retn
sub_6B1A56C9	endp

; Exported entry 1713.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1713
Ordinal1713	proc near		; CODE XREF: Ordinal1721+Ep
					; Ordinal1761+4p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+8]
		mov	dword ptr [esi], offset	off_6B1B8F04
		call	sub_6B1A56C9
		lea	ecx, [esi+14h]
		call	Ordinal1615
		and	dword ptr [esi+4], 0
		mov	eax, esi
		pop	esi
		retn
Ordinal1713	endp

; Exported entry 1714.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1714
Ordinal1714	proc near		; CODE XREF: sub_6B1A58F6+3p
					; Ordinal1722+1Dp ...

; FUNCTION CHUNK AT 6B1A56B2 SIZE 00000017 BYTES

		push	esi
		mov	esi, ecx
		lea	ecx, [esi+14h]
		mov	dword ptr [esi], offset	off_6B1B8F04
		call	Ordinal1616
		lea	ecx, [esi+8]
		pop	esi
		jmp	loc_6B1A56B2
Ordinal1714	endp

; Exported entry 1715.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1715
Ordinal1715	proc near		; CODE XREF: Ordinal1724+2Bp
					; Ordinal1772+29p
					; DATA XREF: ...

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= byte ptr -60h
var_54		= byte ptr -54h
Dst		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	eax, offset unknown_libname_141	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 5Ch
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	0Ch		; Size
		mov	[ebp+var_14], eax
		xor	edi, edi
		lea	eax, [ebp+Dst]
		mov	esi, ecx
		push	edi		; Val
		push	eax		; Dst
		mov	[ebp+var_28], esi
		call	memset
		mov	eax, [ebp+arg_0]
		mov	[ebp+Dst], eax
		mov	eax, [ebp+arg_8]
		add	esp, 0Ch
		mov	[ebp+var_2C], eax
		mov	eax, [ebp+arg_4]
		push	edi
		mov	[ebp+var_30], eax
		push	0FFFFFFFFh
		lea	eax, [esi+14h]
		push	eax
		lea	ecx, [ebp+var_60]
		call	Ordinal1571
		mov	eax, [esi+4]
		cmp	eax, edi
		mov	[ebp+var_4], edi
		jz	short loc_6B1A5788
		cmp	[esi+10h], eax
		jb	short loc_6B1A5788
		push	offset aCtaskscheduler ; "CTaskScheduler::Add()	: m_TaskInfoList."...
		call	sub_6B181006
		pop	ecx
		jmp	loc_6B1A5863
; ---------------------------------------------------------------------------

loc_6B1A5788:				; CODE XREF: Ordinal1715+5Aj
					; Ordinal1715+5Fj
		push	offset aCtaskschedul_0 ; "CTaskScheduler::Add()"
		lea	ecx, [ebp+var_54]
		call	Ordinal1089
		lea	ecx, [esi+8]
		mov	eax, [ecx+4]
		lea	edx, [ebp+Dst]
		push	edx
		push	eax
		mov	byte ptr [ebp+var_4], 2
		call	sub_6B1A5650
		jmp	loc_6B1A5849
; ---------------------------------------------------------------------------

loc_6B1A57AE:				; DATA XREF: .rdata:6B1BD714o
		push	13h
		lea	ecx, [ebp+var_54]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_54]
		call	Ordinal1101
		mov	ecx, [ebp+var_68]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_54]
		call	Ordinal1103
		lea	ecx, [ebp+var_54]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A5846
		retn
; ---------------------------------------------------------------------------

loc_6B1A57F1:				; DATA XREF: .rdata:6B1BD724o
		push	15h
		lea	ecx, [ebp+var_54]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_54]
		call	Ordinal1101
		mov	eax, [ebp+var_64]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_54]
		call	Ordinal1103
		lea	ecx, [ebp+var_54]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A5846
		retn
; ---------------------------------------------------------------------------

loc_6B1A5846:				; DATA XREF: Ordinal1715+D4o
					; Ordinal1715+129o
		mov	esi, [ebp+var_28]

loc_6B1A5849:				; CODE XREF: Ordinal1715+92j
		xor	edi, edi
		inc	edi
		lea	ecx, [ebp+var_54]
		mov	[ebp+var_4], edi
		call	Ordinal1635
		test	eax, eax
		lea	ecx, [ebp+var_54]
		jz	short loc_6B1A586F
		call	Ordinal1090

loc_6B1A5863:				; CODE XREF: Ordinal1715+6Cj
		lea	ecx, [ebp+var_60]
		call	Ordinal1573
		xor	eax, eax
		jmp	short loc_6B1A5889
; ---------------------------------------------------------------------------

loc_6B1A586F:				; CODE XREF: Ordinal1715+145j
		call	Ordinal1090
		or	[ebp+var_4], 0FFFFFFFFh
		lea	ecx, [ebp+var_60]
		call	Ordinal1573
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+8]
		mov	eax, edi

loc_6B1A5889:				; CODE XREF: Ordinal1715+156j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	0Ch
Ordinal1715	endp ; sp-analysis failed

; Exported entry 1719.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1719
Ordinal1719	proc near		; DATA XREF: .rdata:6B1B8F10o
					; .rdata:6B1B8F80o ...

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	ebx, ecx
		xor	esi, esi
		push	esi
		push	0FFFFFFFFh
		lea	eax, [ebx+14h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		cmp	[ebx+10h], esi
		jz	short loc_6B1A58E6
		mov	eax, [ebx+0Ch]
		mov	eax, [eax]
		push	edi
		mov	edi, [ebp+arg_0]
		lea	esi, [eax+8]
		movsd
		movsd
		movsd
		lea	ecx, [ebx+8]
		mov	eax, [ecx+4]
		push	dword ptr [eax]	; void *
		lea	eax, [ebp+arg_0]
		push	eax		; int
		call	sub_6B1A567F
		xor	esi, esi
		inc	esi
		pop	edi

loc_6B1A58E6:				; CODE XREF: Ordinal1719+1Ej
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		mov	eax, esi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal1719	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A58F6(void *, char)
sub_6B1A58F6	proc near		; DATA XREF: .rdata:off_6B1B8F04o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1714
		test	[esp+4+arg_0], 1
		jz	short loc_6B1A590C
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A590C:				; CODE XREF: sub_6B1A58F6+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A58F6	endp

; Exported entry 1721.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1721
Ordinal1721	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		push	edi
		mov	esi, ecx
		call	Ordinal1734
		lea	edi, [esi+38h]
		mov	ecx, edi
		call	Ordinal1713
		lea	ecx, [esi+6Ch]
		mov	dword ptr [esi], offset	off_6B1B8F88
		mov	dword ptr [edi], offset	off_6B1B8F74
		call	Ordinal1650
		pop	edi
		mov	eax, esi
		pop	esi
		retn
Ordinal1721	endp

; Exported entry 1722.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1722
Ordinal1722	proc near		; CODE XREF: sub_6B1A5A4D+Bp
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		push	edi
		lea	edi, [esi+38h]
		lea	ecx, [esi+6Ch]
		mov	dword ptr [esi], offset	off_6B1B8F88
		mov	dword ptr [edi], offset	off_6B1B8F74
		call	Ordinal1652
		mov	ecx, edi
		call	Ordinal1714
		pop	edi
		mov	ecx, esi
		pop	esi
		jmp	Ordinal1735
Ordinal1722	endp

; Exported entry 1723.

; =============== S U B	R O U T	I N E =======================================


; int __thiscall Ordinal1723(LPVOID lpParameter, LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, int)
		public Ordinal1723
Ordinal1723	proc near		; DATA XREF: .rdata:off_6B1BF428o

lpThreadAttributes= dword ptr  4
dwStackSize	= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		mov	edi, ecx
		lea	esi, [edi+6Ch]
		mov	ecx, esi
		call	Ordinal1635
		test	eax, eax
		jnz	short loc_6B1A599A
		push	eax		; int
		push	eax		; lpString2
		push	eax		; bInitialState
		push	eax		; bManualReset
		push	eax		; lpEventAttributes
		mov	ecx, esi
		call	Ordinal1654
		test	eax, eax
		jnz	short loc_6B1A599A
		push	offset aCtaskthreadCre ; "CTaskThread::Create()	: m_AddEvent.Crea"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B1A59B4
; ---------------------------------------------------------------------------

loc_6B1A599A:				; CODE XREF: Ordinal1723+10j
					; Ordinal1723+20j
		mov	ecx, esi
		call	Ordinal1661
		push	[esp+8+arg_8]	; int
		mov	ecx, edi	; lpParameter
		push	[esp+0Ch+dwStackSize] ;	dwStackSize
		push	[esp+10h+lpThreadAttributes] ; lpThreadAttributes
		call	Ordinal1736

loc_6B1A59B4:				; CODE XREF: Ordinal1723+2Fj
		pop	edi
		pop	esi
		retn	0Ch
Ordinal1723	endp

; Exported entry 1724.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1724
Ordinal1724	proc near		; DATA XREF: .rdata:6B1B8F78o
					; .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		mov	edi, ecx
		lea	esi, [edi-38h]
		mov	ecx, esi
		call	Ordinal1747
		test	eax, eax
		jz	short loc_6B1A59EB
		mov	ecx, esi
		call	Ordinal1748
		test	eax, eax
		jnz	short loc_6B1A59EB
		push	[esp+8+arg_8]
		mov	ecx, edi
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		call	Ordinal1715
		jmp	short loc_6B1A59ED
; ---------------------------------------------------------------------------

loc_6B1A59EB:				; CODE XREF: Ordinal1724+10j
					; Ordinal1724+1Bj
		xor	eax, eax

loc_6B1A59ED:				; CODE XREF: Ordinal1724+30j
		pop	edi
		pop	esi
		retn	0Ch
Ordinal1724	endp

; Exported entry 1725.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1725
Ordinal1725	proc near		; DATA XREF: .rdata:6B1B8F7Co
					; .rdata:off_6B1BF428o
		add	ecx, 34h
		jmp	Ordinal1659
Ordinal1725	endp

; Exported entry 1728.
; Exported entry 1759.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1759
Ordinal1759	proc near		; DATA XREF: .rdata:6B1B8F9Co
					; .rdata:6B1B92A8o ...
		push	offset aCworkerthreadE ; ccL35_1728
		call	sub_6B181006
		pop	ecx
		retn
Ordinal1759	endp

; Exported entry 1729.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1729
Ordinal1729	proc near		; CODE XREF: Ordinal1726+16p
					; Ordinal1726+65p ...

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		mov	edi, ecx
		lea	ecx, [ebp+var_C]
		lea	esi, [edi+38h]
		mov	eax, [esi]
		push	ecx
		mov	ecx, esi
		call	dword ptr [eax+0Ch]
		test	eax, eax
		jz	short loc_6B1A5A49
		add	edi, 4
		push	ebx

loc_6B1A5A26:				; CODE XREF: Ordinal1729+40j
		mov	ebx, [esi]
		lea	eax, [ebp+var_C]
		push	eax
		mov	eax, [edi]
		mov	ecx, edi
		call	dword ptr [eax+0Ch]
		push	eax
		mov	ecx, esi
		call	dword ptr [ebx+10h]
		mov	eax, [esi]
		lea	ecx, [ebp+var_C]
		push	ecx
		mov	ecx, esi
		call	dword ptr [eax+0Ch]
		test	eax, eax
		jnz	short loc_6B1A5A26
		pop	ebx

loc_6B1A5A49:				; CODE XREF: Ordinal1729+1Aj
		pop	edi
		pop	esi
		leave
		retn
Ordinal1729	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A5A4D	proc near		; DATA XREF: .rdata:off_6B1B8F74o

arg_0		= byte ptr  4

		sub	ecx, 38h
		jmp	$+5

loc_6B1A5A55:				; DATA XREF: .rdata:off_6B1B8F88o
		push	esi
		mov	esi, ecx
		call	Ordinal1722
		test	[esp+4+arg_0], 1
		jz	short loc_6B1A5A6B
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A5A6B:				; CODE XREF: sub_6B1A5A4D+15j
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A5A4D	endp

; Exported entry 1726.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1726
Ordinal1726	proc near		; DATA XREF: .rdata:6B1B8F94o
					; .rdata:off_6B1BF428o

var_14		= byte ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	esi
		push	offset aCtaskthreadRun ; "CTaskThread::Run()\n"
		mov	esi, ecx
		call	sub_6B181006
		pop	ecx
		mov	ecx, esi
		call	Ordinal1729
		lea	ecx, [esi+4]
		mov	eax, [ecx]
		call	dword ptr [eax+0Ch]
		lea	ecx, [esi+6Ch]
		mov	[ebp+var_8], eax
		mov	eax, [ecx]
		call	dword ptr [eax+0Ch]
		push	0
		push	dword ptr [esi+2Ch]
		lea	ecx, [ebp+var_14]
		mov	[ebp+var_4], eax
		call	Ordinal1604

loc_6B1A5AAF:				; CODE XREF: Ordinal1726+6Aj
		mov	ecx, esi
		call	Ordinal1748
		test	eax, eax
		jnz	short loc_6B1A5ADD
		push	eax
		push	0FFFFFFFFh
		push	eax
		lea	eax, [ebp+var_8]
		push	eax
		push	2
		lea	ecx, [ebp+var_14]
		call	Ordinal1606
		sub	eax, 0
		jz	short loc_6B1A5ADD
		dec	eax
		jnz	short loc_6B1A5ADD
		mov	ecx, esi
		call	Ordinal1729
		jmp	short loc_6B1A5AAF
; ---------------------------------------------------------------------------

loc_6B1A5ADD:				; CODE XREF: Ordinal1726+47j
					; Ordinal1726+5Ej ...
		mov	ecx, esi
		call	Ordinal1729
		lea	ecx, [ebp+var_14]
		call	Ordinal1605
		xor	eax, eax
		pop	esi
		leave
		retn
Ordinal1726	endp

; Exported entry 1730.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1730
Ordinal1730	proc near		; CODE XREF: Ordinal1734+2Ap
					; Ordinal1761+34p
					; DATA XREF: ...
		mov	eax, ecx
		xor	ecx, ecx
		mov	dword ptr [eax], offset	off_6B1B902C
		mov	[eax+4], ecx
		mov	[eax+8], ecx
		mov	[eax+0Ch], ecx
		mov	dword ptr [eax+10h], 3
		mov	[eax+14h], ecx
		retn
Ordinal1730	endp

; Exported entry 1732.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1732
Ordinal1732	proc near		; CODE XREF: Ordinal1762+1Bp
					; DATA XREF: .rdata:off_6B1BF428o
		mov	dword ptr [ecx], offset	off_6B1B902C
		retn
Ordinal1732	endp

; Exported entry 1733.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1733
Ordinal1733	proc near		; CODE XREF: Ordinal1731+22p
					; Ordinal1771+145p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		mov	eax, ecx
		mov	ecx, [esp+arg_0]
		cmp	eax, ecx
		jz	short locret_6B1A5B3E
		mov	edx, [ecx+4]
		mov	[eax+4], edx
		mov	edx, [ecx+8]
		mov	[eax+8], edx
		mov	edx, [ecx+0Ch]
		mov	[eax+0Ch], edx
		mov	edx, [ecx+10h]
		mov	[eax+10h], edx
		mov	ecx, [ecx+14h]
		mov	[eax+14h], ecx

locret_6B1A5B3E:			; CODE XREF: Ordinal1733+8j
		retn	4
Ordinal1733	endp

; Exported entry 1734.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1734
Ordinal1734	proc near		; CODE XREF: Ordinal812+4p
					; Ordinal1162+3p ...
		push	esi
		mov	esi, ecx
		push	0
		lea	ecx, [esi+4]
		mov	dword ptr [esi], offset	off_6B1B9030
		call	Ordinal1563
		lea	ecx, [esi+0Ch]
		call	Ordinal1650
		and	dword ptr [esi+14h], 0
		and	dword ptr [esi+18h], 0
		and	dword ptr [esi+1Ch], 0
		lea	ecx, [esi+20h]
		call	Ordinal1730
		mov	eax, esi
		pop	esi
		retn
Ordinal1734	endp

; Exported entry 1737.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1737
Ordinal1737	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	dword ptr [ecx+18h] ; hThread
		call	ds:SuspendThread
		retn
Ordinal1737	endp

; Exported entry 1738.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1738
Ordinal1738	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	dword ptr [ecx+18h] ; hThread
		call	ds:ResumeThread
		retn
Ordinal1738	endp

; Exported entry 1740.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1740
Ordinal1740	proc near		; CODE XREF: Ordinal1390+33p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, ecx
		push	dword ptr [eax+2Ch]
		lea	ecx, [eax+4]
		push	[esp+4+arg_0]
		mov	edx, [ecx]
		call	dword ptr [edx+4]
		retn	4
Ordinal1740	endp

; Exported entry 1742.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1742
Ordinal1742	proc near		; CODE XREF: Ordinal1165+2Ej
					; DATA XREF: .rdata:6B1B16A8o ...
		push	esi
		push	edi
		mov	edi, ds:ResumeThread
		mov	esi, ecx
		jmp	short loc_6B1A5BB1
; ---------------------------------------------------------------------------

loc_6B1A5BA8:				; CODE XREF: Ordinal1742+1Dj
		test	eax, eax
		jz	short loc_6B1A5BBB
		cmp	eax, 1
		jz	short loc_6B1A5BBB

loc_6B1A5BB1:				; CODE XREF: Ordinal1742+Aj
		push	dword ptr [esi+18h] ; hThread
		call	edi ; ResumeThread
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6B1A5BA8

loc_6B1A5BBB:				; CODE XREF: Ordinal1742+Ej
					; Ordinal1742+13j
		push	1
		lea	ecx, [esi+4]
		call	Ordinal1566
		pop	edi
		pop	esi
		retn
Ordinal1742	endp

; Exported entry 1745.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1745(int	nPriority)
		public Ordinal1745
Ordinal1745	proc near		; DATA XREF: .rdata:off_6B1BF428o

nPriority	= dword	ptr  4

		push	[esp+nPriority]	; nPriority
		push	dword ptr [ecx+18h] ; hThread
		call	ds:SetThreadPriority
		retn	4
Ordinal1745	endp

; Exported entry 1746.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1746
Ordinal1746	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	dword ptr [ecx+18h] ; hThread
		call	ds:GetThreadPriority
		retn
Ordinal1746	endp

; Exported entry 1747.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1747
Ordinal1747	proc near		; CODE XREF: Ordinal1724+9p
					; Ordinal1736+7p ...
		mov	eax, [ecx+18h]
		test	eax, eax
		jnz	short loc_6B1A5BEA
		retn
; ---------------------------------------------------------------------------

loc_6B1A5BEA:				; CODE XREF: Ordinal1747+5j
		push	0		; dwMilliseconds
		push	eax		; hHandle
		call	ds:WaitForSingleObject
		sub	eax, 102h
		neg	eax
		sbb	eax, eax
		inc	eax
		retn
Ordinal1747	endp

; Exported entry 1748.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1748
Ordinal1748	proc near		; CODE XREF: Ordinal836+34p
					; Ordinal1724+14p ...
		add	ecx, 4
		jmp	Ordinal1567
Ordinal1748	endp

; Exported entry 1749.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1749
Ordinal1749	proc near		; CODE XREF: Ordinal1771+13Ep
					; DATA XREF: .rdata:off_6B1BF428o
		lea	eax, [ecx+20h]
		retn
Ordinal1749	endp

; Exported entry 1750.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1750
Ordinal1750	proc near		; DATA XREF: .rdata:6B1B9040o
					; .rdata:off_6B1BF428o
		push	offset aCthreadInitins ; "CThread::InitInstance()\n"
		call	sub_6B181006
		xor	eax, eax
		pop	ecx
		inc	eax
		retn
Ordinal1750	endp

; Exported entry 1751.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1751
Ordinal1751	proc near		; DATA XREF: .rdata:6B1B9044o
					; .rdata:off_6B1BF428o
		push	offset aCthreadExitins ; "CThread::ExitInstance()\n"
		call	sub_6B181006
		pop	ecx
		retn
Ordinal1751	endp

; Exported entry 1752.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1752
Ordinal1752	proc near		; CODE XREF: sub_6B1A5CC3+8p
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, ecx
		lea	ecx, [ebp+var_C]
		call	Ordinal773
		mov	eax, [esi+30h]
		cmp	eax, 3
		jz	short loc_6B1A5C70
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal776
		test	eax, eax
		jge	short loc_6B1A5C70
		push	eax		; Args
		push	offset aCthreadStartCo ; "CThread::Start() : coInit.Initialize() "...
		call	sub_6B18102E
		and	dword ptr [esi+14h], 0
		cmp	dword ptr [esi+34h], 0
		pop	ecx
		pop	ecx
		jz	short loc_6B1A5C6B
		lea	ecx, [esi+0Ch]
		call	Ordinal1659

loc_6B1A5C6B:				; CODE XREF: Ordinal1752+3Cj
		or	ebx, 0FFFFFFFFh
		jmp	short loc_6B1A5CB5
; ---------------------------------------------------------------------------

loc_6B1A5C70:				; CODE XREF: Ordinal1752+18j
					; Ordinal1752+25j
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+10h]
		cmp	dword ptr [esi+34h], 0
		mov	[esi+14h], eax
		jz	short loc_6B1A5C88
		lea	ecx, [esi+0Ch]
		call	Ordinal1659

loc_6B1A5C88:				; CODE XREF: Ordinal1752+59j
		or	ebx, 0FFFFFFFFh
		cmp	dword ptr [esi+14h], 0
		jnz	short loc_6B1A5CA5
		push	offset aCthreadStartIn ; "CThread::Start() : InitInstance() == FA"...
		call	sub_6B18101A
		mov	eax, [esi]
		pop	ecx
		mov	ecx, esi
		call	dword ptr [eax+8]
		jmp	short loc_6B1A5CAE
; ---------------------------------------------------------------------------

loc_6B1A5CA5:				; CODE XREF: Ordinal1752+6Aj
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+0Ch]
		mov	ebx, eax

loc_6B1A5CAE:				; CODE XREF: Ordinal1752+7Ej
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+14h]

loc_6B1A5CB5:				; CODE XREF: Ordinal1752+49j
		lea	ecx, [ebp+var_C]
		call	Ordinal775
		pop	esi
		mov	eax, ebx
		pop	ebx
		leave
		retn
Ordinal1752	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A5CC3	proc near		; CODE XREF: .text:6B1A5CF9p
					; StartAddress+4p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	ecx, esi
		call	Ordinal1752
		cmp	dword ptr [esi+24h], 0
		mov	edi, eax
		jz	short loc_6B1A5CEF
		push	dword ptr [esi+1Ch] ; Args
		push	offset aCthreadThreadp ; "CThread::ThreadProc()	: delete pThread,"...
		call	sub_6B181006
		mov	eax, [esi]
		pop	ecx
		pop	ecx
		push	1
		mov	ecx, esi
		call	dword ptr [eax]

loc_6B1A5CEF:				; CODE XREF: sub_6B1A5CC3+13j
		mov	eax, edi
		pop	edi
		pop	esi
		retn
sub_6B1A5CC3	endp

; ---------------------------------------------------------------------------

loc_6B1A5CF4:				; DATA XREF: Ordinal1736+C3o
		push	esi
		push	dword ptr [esp+8]
		call	sub_6B1A5CC3
		mov	esi, eax
		push	esi
		call	ds:_endthreadex
		pop	ecx
		pop	ecx
		mov	eax, esi
		pop	esi
		retn	4

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; DWORD	__stdcall StartAddress(LPVOID)
StartAddress	proc near		; DATA XREF: Ordinal1736+91o

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		call	sub_6B1A5CC3
		pop	ecx
		push	eax		; dwExitCode
		call	ds:ExitThread
StartAddress	endp

; ---------------------------------------------------------------------------
		db 0CCh
; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_11. PRESS	KEYPAD "+" TO EXPAND]
; Exported entry 1731.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1731
Ordinal1731	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		xor	eax, eax
		mov	dword ptr [esi], offset	off_6B1B902C
		mov	[esi+4], eax
		mov	[esi+8], eax
		mov	[esi+0Ch], eax
		mov	dword ptr [esi+10h], 3
		mov	[esi+14h], eax
		call	Ordinal1733
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1731	endp

; Exported entry 1736.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall Ordinal1736(LPVOID lpParameter, LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, int)
		public Ordinal1736
Ordinal1736	proc near		; CODE XREF: Ordinal837+121p
					; Ordinal1164+58p ...

var_4		= dword	ptr -4
lpThreadAttributes= dword ptr  8
dwStackSize	= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		call	Ordinal1747
		test	eax, eax
		jz	short loc_6B1A5D8D
		push	offset aCthreadCreateI ; "CThread::Create() : IsThread() != FALSE"...
		call	sub_6B18101A
		pop	ecx
		xor	eax, eax
		jmp	loc_6B1A5EB0
; ---------------------------------------------------------------------------

loc_6B1A5D8D:				; CODE XREF: Ordinal1736+Ej
		mov	eax, [esi+18h]
		push	edi
		xor	edi, edi
		cmp	eax, edi
		jz	short loc_6B1A5DA1
		push	eax		; hObject
		call	ds:CloseHandle
		mov	[esi+18h], edi

loc_6B1A5DA1:				; CODE XREF: Ordinal1736+2Aj
		push	ebx		; Args
		push	edi
		lea	ecx, [esi+4]
		call	Ordinal1566
		cmp	[esi+34h], edi
		mov	[esi+14h], edi
		jz	short loc_6B1A5DEB
		lea	ebx, [esi+0Ch]
		mov	ecx, ebx
		call	Ordinal1635
		test	eax, eax
		jnz	short loc_6B1A5DE4
		push	edi		; int
		push	edi		; lpString2
		push	edi		; bInitialState
		push	1		; bManualReset
		push	edi		; lpEventAttributes
		mov	ecx, ebx
		call	Ordinal1654
		test	eax, eax
		jnz	short loc_6B1A5DE4
		push	offset aCthreadCreateM ; "CThread::Create() : m_InitInstanceEvent"...
		call	sub_6B18102E
		pop	ecx

loc_6B1A5DDD:				; CODE XREF: Ordinal1736+FFj
		xor	eax, eax
		jmp	loc_6B1A5EAE
; ---------------------------------------------------------------------------

loc_6B1A5DE4:				; CODE XREF: Ordinal1736+54j
					; Ordinal1736+65j
		mov	ecx, ebx
		call	Ordinal1661

loc_6B1A5DEB:				; CODE XREF: Ordinal1736+46j
		cmp	[esi+28h], edi
		jz	short loc_6B1A5E22
		lea	eax, [esi+1Ch]
		push	eax		; lpThreadId
		mov	eax, [ebp+arg_8]
		or	eax, 4
		push	eax		; dwCreationFlags
		push	esi		; lpParameter
		push	offset StartAddress ; lpStartAddress
		push	[ebp+dwStackSize] ; dwStackSize
		push	[ebp+lpThreadAttributes] ; lpThreadAttributes
		call	ds:CreateThread
		cmp	eax, edi
		mov	[esi+18h], eax
		jnz	short loc_6B1A5E65
		call	ds:GetLastError
		push	eax
		push	offset aCthreadCreateC ; "CThread::Create() : CreateThread() ==	N"...
		jmp	short loc_6B1A5E5E
; ---------------------------------------------------------------------------

loc_6B1A5E22:				; CODE XREF: Ordinal1736+83j
		lea	eax, [ebp+var_4]
		push	eax
		mov	eax, [ebp+arg_8]
		or	eax, 4
		push	eax
		push	esi
		push	offset loc_6B1A5CF4
		push	[ebp+dwStackSize]
		mov	[ebp+var_4], edi
		push	[ebp+lpThreadAttributes]
		call	ds:_beginthreadex
		mov	ecx, [ebp+var_4]
		add	esp, 18h
		cmp	eax, edi
		mov	[esi+18h], eax
		mov	[esi+1Ch], ecx
		jnz	short loc_6B1A5E65
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCthreadCreate_ ; "CThread::Create() : _beginthreadex() =="...

loc_6B1A5E5E:				; CODE XREF: Ordinal1736+B5j
		call	sub_6B18102E
		pop	ecx
		pop	ecx

loc_6B1A5E65:				; CODE XREF: Ordinal1736+A7j
					; Ordinal1736+E5j
		mov	eax, [esi+18h]
		cmp	eax, edi
		jz	loc_6B1A5DDD
		xor	ebx, ebx
		inc	ebx
		test	byte ptr [ebp+arg_8], 4
		jnz	short loc_6B1A5EA4
		push	eax		; hThread
		call	ds:ResumeThread
		cmp	[esi+34h], edi
		jz	short loc_6B1A5EA4
		push	dword ptr [esi+2Ch]
		lea	ecx, [esi+0Ch]
		mov	eax, [ecx]
		push	0FFFFFFFFh
		call	dword ptr [eax+4]
		mov	ebx, [esi+14h]
		cmp	ebx, edi
		jnz	short loc_6B1A5EA4
		push	offset aCthreadCreat_0 ; "CThread::Create() : m_bInitInstanceResu"...
		call	sub_6B18102E
		pop	ecx

loc_6B1A5EA4:				; CODE XREF: Ordinal1736+10Cj
					; Ordinal1736+118j ...
		lea	ecx, [esi+0Ch]
		call	Ordinal1633
		mov	eax, ebx

loc_6B1A5EAE:				; CODE XREF: Ordinal1736+74j
		pop	ebx
		pop	edi

loc_6B1A5EB0:				; CODE XREF: Ordinal1736+1Dj
		pop	esi
		leave
		retn	0Ch
Ordinal1736	endp

; Exported entry 1739.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1739(DWORD dwMilliseconds)
		public Ordinal1739
Ordinal1739	proc near		; CODE XREF: Ordinal1741+34p
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch
dwMilliseconds	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		call	Ordinal1747
		test	eax, eax
		jnz	short loc_6B1A5ECA
		inc	eax
		jmp	short loc_6B1A5EFB
; ---------------------------------------------------------------------------

loc_6B1A5ECA:				; CODE XREF: Ordinal1739+10j
		push	0
		push	dword ptr [esi+2Ch]
		lea	ecx, [ebp+var_C]
		call	Ordinal1604
		push	[ebp+dwMilliseconds] ; dwMilliseconds
		lea	ecx, [ebp+var_C]
		push	dword ptr [esi+18h] ; hHandle
		call	Ordinal1608
		xor	ecx, ecx
		cmp	eax, 102h
		setnz	cl
		mov	esi, ecx
		lea	ecx, [ebp+var_C]
		call	Ordinal1605
		mov	eax, esi

loc_6B1A5EFB:				; CODE XREF: Ordinal1739+13j
		pop	esi
		leave
		retn	4
Ordinal1739	endp

; Exported entry 1741.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1741(char dwMilliseconds)
		public Ordinal1741
Ordinal1741	proc near		; CODE XREF: Ordinal1425+9Fp
					; Ordinal1735+11p
					; DATA XREF: ...

dwMilliseconds	= byte ptr  4

		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+24h], 0
		jz	short loc_6B1A5F18
		push	offset aCthreadTermina ; "CThread::Terminate() : m_Options.m_bAut"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B1A5F73
; ---------------------------------------------------------------------------

loc_6B1A5F18:				; CODE XREF: Ordinal1741+7j
		push	edi
		xor	edi, edi
		mov	ecx, esi
		inc	edi
		call	Ordinal1747
		test	eax, eax
		jz	short loc_6B1A5F5E
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+8]
		push	dword ptr [esp+8+dwMilliseconds] ; dwMilliseconds
		mov	ecx, esi
		call	Ordinal1739
		test	eax, eax
		jnz	short loc_6B1A5F5E
		push	dword ptr [esi+1Ch]
		push	dword ptr [esp+0Ch+dwMilliseconds] ; Args
		push	offset aCthreadTermi_0 ; "CThread::Terminate() : WaitForExit(%lu)"...
		call	sub_6B18101A
		add	esp, 0Ch
		push	0FFFFFFFFh	; dwExitCode
		push	dword ptr [esi+18h] ; hThread
		call	ds:TerminateThread
		xor	edi, edi

loc_6B1A5F5E:				; CODE XREF: Ordinal1741+25j
					; Ordinal1741+3Bj
		mov	eax, [esi+18h]
		test	eax, eax
		jz	short loc_6B1A5F70
		push	eax		; hObject
		call	ds:CloseHandle
		and	dword ptr [esi+18h], 0

loc_6B1A5F70:				; CODE XREF: Ordinal1741+63j
		mov	eax, edi
		pop	edi

loc_6B1A5F73:				; CODE XREF: Ordinal1741+16j
		pop	esi
		retn	4
Ordinal1741	endp

; Exported entry 1735.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1735
Ordinal1735	proc near		; CODE XREF: Ordinal813+2Ej
					; Ordinal1163+21j ...
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+24h], 0
		mov	dword ptr [esi], offset	off_6B1B9030
		jnz	short loc_6B1A5F8D
		push	0		; dwMilliseconds
		call	Ordinal1741

loc_6B1A5F8D:				; CODE XREF: Ordinal1735+Dj
		mov	eax, [esi+18h]
		test	eax, eax
		jz	short loc_6B1A5F9F
		push	eax		; hObject
		call	ds:CloseHandle
		and	dword ptr [esi+18h], 0

loc_6B1A5F9F:				; CODE XREF: Ordinal1735+1Bj
		lea	ecx, [esi+0Ch]
		mov	dword ptr [esi+20h], offset off_6B1B902C
		call	Ordinal1652
		lea	ecx, [esi+4]
		pop	esi
		jmp	Ordinal1564
Ordinal1735	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A5FB7(void *, char)
sub_6B1A5FB7	proc near		; DATA XREF: .rdata:off_6B1B9030o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1735
		test	[esp+4+arg_0], 1
		jz	short loc_6B1A5FCD
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A5FCD:				; CODE XREF: sub_6B1A5FB7+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A5FB7	endp

; Exported entry 1753.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1753
Ordinal1753	proc near		; CODE XREF: Ordinal1771+45p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	Ordinal1734
		xor	eax, eax
		mov	[esi+38h], eax
		mov	[esi+3Ch], eax
		mov	[esi+40h], eax
		mov	dword ptr [esi], offset	off_6B1B9294
		mov	eax, esi
		pop	esi
		retn
Ordinal1753	endp

; Exported entry 1754.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1754
Ordinal1754	proc near		; CODE XREF: sub_6B1A6360+3p
					; DATA XREF: .rdata:off_6B1BF428o
		mov	dword ptr [ecx], offset	off_6B1B9294
		jmp	Ordinal1735
Ordinal1754	endp

; Exported entry 1755.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1755(int, int, LPSECURITY_ATTRIBUTES lpThreadAttributes,	SIZE_T dwStackSize, int)
		public Ordinal1755
Ordinal1755	proc near		; DATA XREF: .rdata:6B1B92ACo
					; .rdata:off_6B1BF428o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
lpThreadAttributes= dword ptr  10h
dwStackSize	= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_10]	; int
		mov	eax, [ebp+arg_0]
		push	[ebp+dwStackSize] ; dwStackSize
		mov	[ecx+38h], eax
		mov	eax, [ebp+arg_4]
		push	[ebp+lpThreadAttributes] ; lpThreadAttributes
		mov	[ecx+3Ch], eax
		call	Ordinal1736
		pop	ebp
		retn	14h
Ordinal1755	endp

; Exported entry 1756.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1756
Ordinal1756	proc near		; CODE XREF: Ordinal1769+B7p
					; DATA XREF: .rdata:off_6B1BF428o
		push	0		; Value
		add	ecx, 40h
		push	ecx		; Addend
		call	ds:InterlockedExchangeAdd
		xor	ecx, ecx
		test	eax, eax
		setnle	cl
		mov	eax, ecx
		retn
Ordinal1756	endp

; Exported entry 1727.
; Exported entry 1758.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1758
Ordinal1758	proc near		; DATA XREF: .rdata:6B1B8F98o
					; .rdata:6B1B92A4o ...
		push	offset aCworkerthreadI ; ccL35_1727
		call	sub_6B181006
		xor	eax, eax
		pop	ecx
		inc	eax
		retn
Ordinal1758	endp

; Exported entry 1760.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1760
Ordinal1760	proc near		; CODE XREF: Ordinal1757+16p
					; Ordinal1757+60p ...
		push	esi
		push	edi
		mov	esi, ecx
		lea	edi, [esi+40h]
		push	edi		; lpAddend
		call	ds:InterlockedIncrement
		mov	ecx, [esi+38h]
		mov	eax, [ecx]
		call	dword ptr [eax+18h]
		push	edi		; lpAddend
		call	ds:InterlockedDecrement
		pop	edi
		pop	esi
		retn
Ordinal1760	endp

; Exported entry 1766.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1766
Ordinal1766	proc near		; CODE XREF: Ordinal1772+3p
					; Ordinal1763+34p
					; DATA XREF: ...
		push	0		; Value
		add	ecx, 58h
		push	ecx		; Addend
		call	ds:InterlockedExchangeAdd
		xor	ecx, ecx
		test	eax, eax
		setnle	cl
		mov	eax, ecx
		retn
Ordinal1766	endp

; Exported entry 1767.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1767
Ordinal1767	proc near		; DATA XREF: .rdata:off_6B1BF428o
		lea	eax, [ecx+5Ch]
		retn
Ordinal1767	endp

; Exported entry 1768.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1768
Ordinal1768	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	0		; Value
		add	ecx, 58h
		push	ecx		; Addend
		call	ds:InterlockedExchangeAdd
		retn
Ordinal1768	endp

; Exported entry 1770.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1770
Ordinal1770	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	0		; Value
		add	ecx, 54h
		push	ecx		; Addend
		call	ds:InterlockedExchangeAdd
		retn
Ordinal1770	endp

; Exported entry 1771.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1771
Ordinal1771	proc near		; DATA XREF: .rdata:6B1B932Co
					; .rdata:off_6B1BF428o

var_64		= dword	ptr -64h
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_142	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 58h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		mov	[ebp+var_2C], ecx
		xor	esi, esi
		push	offset aCthreadpoolAll ; "CThreadPool::AllocateThread()"
		lea	ecx, [ebp+var_50]
		mov	[ebp+var_14], eax
		mov	[ebp+var_28], esi
		call	Ordinal1089
		mov	[ebp+var_4], esi
		push	44h		; Size
		mov	byte ptr [ebp+var_4], 1
		call	??2@YAPAXI@Z	; operator new(uint)
		cmp	eax, esi
		pop	ecx
		jz	short loc_6B1A60E4
		mov	ecx, eax
		call	Ordinal1753
		mov	[ebp+var_28], eax
		jmp	short loc_6B1A60E7
; ---------------------------------------------------------------------------

loc_6B1A60E4:				; CODE XREF: Ordinal1771+41j
		mov	[ebp+var_28], esi

loc_6B1A60E7:				; CODE XREF: Ordinal1771+4Dj
		cmp	[ebp+var_28], esi
		jnz	loc_6B1A61B1
		lea	eax, [ebp+var_30]
		push	eax
		lea	ecx, [ebp+var_64]
		mov	[ebp+var_30], offset aBadAllocation ; "bad allocation"
		call	ds:??0exception@@QAE@ABQBD@Z ; exception::exception(char const * const &)
		push	offset dword_6B1BAC3C
		lea	eax, [ebp+var_64]
		push	eax
		mov	[ebp+var_64], offset off_6B1AABCC
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6B1A6119:				; DATA XREF: .rdata:6B1BD77Co
		push	13h
		lea	ecx, [ebp+var_50]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_50]
		call	Ordinal1101
		mov	ecx, [ebp+var_54]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_50]
		call	Ordinal1103
		lea	ecx, [ebp+var_50]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A61B1
		retn
; ---------------------------------------------------------------------------

loc_6B1A615C:				; DATA XREF: .rdata:6B1BD78Co
		push	15h
		lea	ecx, [ebp+var_50]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_50]
		call	Ordinal1101
		mov	eax, [ebp+var_58]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_50]
		call	Ordinal1103
		lea	ecx, [ebp+var_50]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A61B1
		retn
; ---------------------------------------------------------------------------

loc_6B1A61B1:				; CODE XREF: Ordinal1771+55j
					; DATA XREF: Ordinal1771+C1o ...
		lea	ecx, [ebp+var_50]
		call	Ordinal1635
		test	eax, eax
		jz	short loc_6B1A61C9
		lea	ecx, [ebp+var_50]
		call	Ordinal1090
		xor	eax, eax
		jmp	short loc_6B1A61EA
; ---------------------------------------------------------------------------

loc_6B1A61C9:				; CODE XREF: Ordinal1771+126j
		mov	eax, [ebp+var_2C]
		mov	ecx, [ebp+var_28]
		add	eax, 5Ch
		push	eax
		call	Ordinal1749
		mov	ecx, eax
		call	Ordinal1733
		lea	ecx, [ebp+var_50]
		call	Ordinal1090
		mov	eax, [ebp+var_28]

loc_6B1A61EA:				; CODE XREF: Ordinal1771+132j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal1771	endp ; sp-analysis failed

; Exported entry 1772.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1772
Ordinal1772	proc near		; DATA XREF: .rdata:6B1B931Co
					; .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, ecx
		call	Ordinal1766
		test	eax, eax
		jnz	short loc_6B1A621C
		push	offset aCthreadpoolAdd ; "CThreadPool::Add() : IsThreadPool() == "...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B1A622F
; ---------------------------------------------------------------------------

loc_6B1A621C:				; CODE XREF: Ordinal1772+Aj
		push	[esp+4+arg_8]
		mov	ecx, esi
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	Ordinal1715

loc_6B1A622F:				; CODE XREF: Ordinal1772+19j
		pop	esi
		retn	0Ch
Ordinal1772	endp

; Exported entry 1773.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1773
Ordinal1773	proc near		; DATA XREF: .rdata:6B1B9320o
					; .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+14h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		lea	ecx, [esi+44h]
		call	Ordinal1659
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		pop	esi
		leave
		retn
Ordinal1773	endp

; Exported entry 1774.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1774
Ordinal1774	proc near		; DATA XREF: .rdata:6B1B9330o
					; .rdata:off_6B1BF428o

var_1C		= byte ptr -1Ch
var_10		= byte ptr -10h
lpAddend	= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		push	esi
		mov	esi, ecx
		lea	eax, [esi+54h]
		push	eax		; lpAddend
		mov	[ebp+lpAddend],	eax
		call	ds:InterlockedIncrement
		push	0
		lea	eax, [esi+14h]
		push	0FFFFFFFFh
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		mov	eax, [esi]
		lea	ecx, [ebp+var_1C]
		push	ecx
		mov	ecx, esi
		call	dword ptr [eax+0Ch]
		test	eax, eax
		jz	short loc_6B1A62D5
		push	ebx
		push	edi
		lea	edi, [esi+4Ch]

loc_6B1A6299:				; CODE XREF: Ordinal1774+72j
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		mov	ebx, [esi]
		lea	eax, [ebp+var_1C]
		push	eax
		mov	eax, [edi]
		mov	ecx, edi
		call	dword ptr [eax+0Ch]
		push	eax
		mov	ecx, esi
		call	dword ptr [ebx+10h]
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+14h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		mov	eax, [esi]
		lea	ecx, [ebp+var_1C]
		push	ecx
		mov	ecx, esi
		call	dword ptr [eax+0Ch]
		test	eax, eax
		jnz	short loc_6B1A6299
		pop	edi
		pop	ebx

loc_6B1A62D5:				; CODE XREF: Ordinal1774+33j
		lea	ecx, [esi+44h]
		call	Ordinal1661
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		push	[ebp+lpAddend]	; lpAddend
		call	ds:InterlockedDecrement
		pop	esi
		leave
		retn
Ordinal1774	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A62F1	proc near		; CODE XREF: sub_6B191214+29p
					; sub_6B191516+10p ...
		mov	edx, [ecx+4]
		test	edx, edx
		jnz	short loc_6B1A62FB
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6B1A62FB:				; CODE XREF: sub_6B1A62F1+5j
		mov	eax, [ecx+0Ch]
		sub	eax, edx
		sar	eax, 2
		retn
sub_6B1A62F1	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_6B1A6304	proc near		; CODE XREF: sub_6B1A6467+36p

var_50		= dword	ptr -50h
var_28		= byte ptr -28h
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_143	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		push	offset aVectorTTooLong ; "vector<T> too	long"
		lea	ecx, [ebp+var_28]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_28]
		push	eax
		lea	ecx, [ebp+var_50]
		call	sub_6B181357
		push	offset dword_6B1BA9E8
		lea	eax, [ebp+var_50]
		push	eax
		mov	[ebp+var_50], offset off_6B1AA914
		call	_CxxThrowException
sub_6B1A6304	endp

; ---------------------------------------------------------------------------
		db 0CCh

; =============== S U B	R O U T	I N E =======================================


sub_6B1A6345	proc near		; CODE XREF: sub_6B183B56+92p
					; sub_6B183B56+A5p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_4]
		test	ecx, ecx
		jbe	short locret_6B1A635F
		mov	eax, [esp+arg_0]

loc_6B1A6351:				; CODE XREF: sub_6B1A6345+18j
		mov	edx, [esp+arg_8]
		mov	edx, [edx]
		mov	[eax], edx
		add	eax, 4
		dec	ecx
		jnz	short loc_6B1A6351

locret_6B1A635F:			; CODE XREF: sub_6B1A6345+6j
		retn
sub_6B1A6345	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A6360(void *, char)
sub_6B1A6360	proc near		; DATA XREF: .rdata:off_6B1B9294o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1754
		test	[esp+4+arg_0], 1
		jz	short loc_6B1A6376
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A6376:				; CODE XREF: sub_6B1A6360+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A6360	endp

; Exported entry 1757.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1757
Ordinal1757	proc near		; DATA XREF: .rdata:6B1B92A0o
					; .rdata:off_6B1BF428o

var_14		= byte ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	esi
		push	offset aCworkerthreadR ; "CWorkerThread::Run()\n"
		mov	esi, ecx
		call	sub_6B181006
		pop	ecx
		mov	ecx, esi
		call	Ordinal1760
		lea	ecx, [esi+4]
		mov	eax, [ecx]
		call	dword ptr [eax+0Ch]
		push	0
		push	dword ptr [esi+2Ch]
		mov	[ebp+var_8], eax
		mov	eax, [esi+3Ch]
		lea	ecx, [ebp+var_14]
		mov	[ebp+var_4], eax
		call	Ordinal1604

loc_6B1A63B5:				; CODE XREF: Ordinal1757+65j
		mov	ecx, esi
		call	Ordinal1748
		test	eax, eax
		jnz	short loc_6B1A63E3
		push	eax
		push	0FFFFFFFFh
		push	eax
		lea	eax, [ebp+var_8]
		push	eax
		push	2
		lea	ecx, [ebp+var_14]
		call	Ordinal1606
		sub	eax, 0
		jz	short loc_6B1A63E3
		dec	eax
		jnz	short loc_6B1A63E3
		mov	ecx, esi
		call	Ordinal1760
		jmp	short loc_6B1A63B5
; ---------------------------------------------------------------------------

loc_6B1A63E3:				; CODE XREF: Ordinal1757+42j
					; Ordinal1757+59j ...
		mov	ecx, esi
		call	Ordinal1760
		lea	ecx, [ebp+var_14]
		call	Ordinal1605
		xor	eax, eax
		pop	esi
		leave
		retn
Ordinal1757	endp

; Exported entry 1764.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1764
Ordinal1764	proc near		; CODE XREF: Ordinal1765+Bp
					; DATA XREF: .rdata:off_6B1BF428o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		mov	esi, ecx
		push	1
		lea	ecx, [esi+4Ch]
		call	Ordinal1566
		push	0		; Value
		lea	eax, [esi+58h]
		push	eax		; Target
		call	ds:InterlockedExchange
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+74h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	edi, [esi+38h]
		jmp	short loc_6B1A6436
; ---------------------------------------------------------------------------

loc_6B1A642C:				; CODE XREF: Ordinal1764+42j
		mov	ecx, [edi]
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		add	edi, 4

loc_6B1A6436:				; CODE XREF: Ordinal1764+33j
		cmp	edi, [esi+3Ch]
		jnz	short loc_6B1A642C
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		pop	edi
		pop	esi
		leave
		retn
Ordinal1764	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A6447	proc near		; CODE XREF: sub_6B1A1B61+9Ep
					; sub_6B1A1B61+11Ep ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		push	[esp+8+arg_8]
		mov	edi, [esp+0Ch+arg_0]
		push	esi
		push	edi
		call	sub_6B1A6345
		add	esp, 0Ch
		lea	eax, [edi+esi*4]
		pop	edi
		pop	esi
		retn	0Ch
sub_6B1A6447	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall sub_6B1A6467(int, int Src, int, int)
sub_6B1A6467	proc near		; CODE XREF: sub_6B1A65E1+27p

Src		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		mov	[ebp+arg_8], eax
		call	sub_6B1A62F1
		mov	edi, [ebp+arg_4]
		test	edi, edi
		mov	ebx, eax
		jz	loc_6B1A65DA
		mov	ecx, esi
		call	sub_6B1A17A8
		mov	ecx, 3FFFFFFFh
		sub	ecx, eax
		cmp	ecx, edi
		mov	ecx, esi
		jnb	short loc_6B1A64A2
		call	sub_6B1A6304
; ---------------------------------------------------------------------------

loc_6B1A64A2:				; CODE XREF: sub_6B1A6467+34j
		call	sub_6B1A17A8
		add	eax, edi
		cmp	ebx, eax
		jnb	loc_6B1A6547
		mov	eax, ebx
		shr	eax, 1
		mov	ecx, 3FFFFFFFh
		sub	ecx, eax
		cmp	ecx, ebx
		jnb	short loc_6B1A64C4
		xor	ebx, ebx
		jmp	short loc_6B1A64C6
; ---------------------------------------------------------------------------

loc_6B1A64C4:				; CODE XREF: sub_6B1A6467+57j
		add	ebx, eax

loc_6B1A64C6:				; CODE XREF: sub_6B1A6467+5Bj
		mov	ecx, esi
		call	sub_6B1A17A8
		add	eax, edi
		cmp	ebx, eax
		jnb	short loc_6B1A64DE
		mov	ecx, esi
		call	sub_6B1A17A8
		mov	ebx, eax
		add	ebx, edi

loc_6B1A64DE:				; CODE XREF: sub_6B1A6467+6Aj
		shl	ebx, 2
		push	ebx		; Size
		mov	[ebp+arg_4], ebx
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	ebx, eax
		mov	eax, [esi+4]
		push	esi		; int
		push	ebx		; Dst
		push	[ebp+Src]	; int
		push	eax		; Src
		call	sub_6B183791
		add	esp, 14h
		lea	ecx, [ebp+arg_8]
		push	ecx
		push	edi
		push	eax
		mov	ecx, esi
		call	sub_6B1A6447
		push	esi		; int
		push	eax		; Dst
		push	dword ptr [esi+8] ; int
		push	[ebp+Src]	; Src
		call	sub_6B183791
		add	esp, 10h
		mov	ecx, esi
		call	sub_6B1A17A8
		add	edi, eax
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6B1A6531
		push	eax		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A6531:				; CODE XREF: sub_6B1A6467+C1j
		mov	eax, [ebp+arg_4]
		add	eax, ebx
		mov	[esi+0Ch], eax
		lea	eax, [ebx+edi*4]
		mov	[esi+8], eax
		mov	[esi+4], ebx
		jmp	loc_6B1A65DA
; ---------------------------------------------------------------------------

loc_6B1A6547:				; CODE XREF: sub_6B1A6467+44j
		mov	ecx, [esi+8]
		mov	ebx, [ebp+Src]
		mov	eax, ecx
		sub	eax, ebx
		sar	eax, 2
		cmp	eax, edi
		mov	[ebp+arg_4], ecx
		push	esi		; int
		jnb	short loc_6B1A65A5
		mov	eax, edi
		shl	eax, 2
		mov	[ebp+Src], eax
		add	eax, ebx
		push	eax		; Dst
		push	ecx		; int
		push	ebx		; Src
		call	sub_6B183791
		mov	eax, [esi+8]
		add	esp, 10h
		lea	ecx, [ebp+arg_8]
		push	ecx
		mov	ecx, eax
		sub	ecx, ebx
		sar	ecx, 2
		sub	edi, ecx
		push	edi
		push	eax
		mov	ecx, esi
		call	sub_6B1A6447
		mov	eax, [ebp+Src]
		add	[esi+8], eax
		mov	esi, [esi+8]
		sub	esi, eax
		jmp	short loc_6B1A659F
; ---------------------------------------------------------------------------

loc_6B1A6597:				; CODE XREF: sub_6B1A6467+13Aj
		mov	eax, [ebp+arg_8]
		mov	[ebx], eax
		add	ebx, 4

loc_6B1A659F:				; CODE XREF: sub_6B1A6467+12Ej
		cmp	ebx, esi
		jnz	short loc_6B1A6597
		jmp	short loc_6B1A65DA
; ---------------------------------------------------------------------------

loc_6B1A65A5:				; CODE XREF: sub_6B1A6467+F3j
		push	ecx		; Dst
		mov	[ebp+Src], ecx
		shl	edi, 2
		sub	[ebp+Src], edi
		push	ecx		; int
		push	[ebp+Src]	; Src
		call	sub_6B183791
		push	[ebp+arg_4]	; int
		mov	[esi+8], eax
		push	[ebp+Src]	; int
		push	ebx		; Src
		call	sub_6B1A1A2D
		add	esp, 1Ch
		add	edi, ebx
		jmp	short loc_6B1A65D6
; ---------------------------------------------------------------------------

loc_6B1A65CE:				; CODE XREF: sub_6B1A6467+171j
		mov	eax, [ebp+arg_8]
		mov	[ebx], eax
		add	ebx, 4

loc_6B1A65D6:				; CODE XREF: sub_6B1A6467+165j
		cmp	ebx, edi
		jnz	short loc_6B1A65CE

loc_6B1A65DA:				; CODE XREF: sub_6B1A6467+1Cj
					; sub_6B1A6467+DBj ...
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn	0Ch
sub_6B1A6467	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A65E1(int, int,	int Src, int)
sub_6B1A65E1	proc near		; CODE XREF: sub_6B1A66D7+35p

arg_0		= dword	ptr  4
Src		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		mov	edi, ecx
		call	sub_6B1A17A8
		test	eax, eax
		jnz	short loc_6B1A65F2
		xor	esi, esi
		jmp	short loc_6B1A65FC
; ---------------------------------------------------------------------------

loc_6B1A65F2:				; CODE XREF: sub_6B1A65E1+Bj
		mov	esi, [esp+8+Src]
		sub	esi, [edi+4]
		sar	esi, 2

loc_6B1A65FC:				; CODE XREF: sub_6B1A65E1+Fj
		push	[esp+8+arg_8]	; int
		mov	ecx, edi	; int
		push	1		; int
		push	[esp+10h+Src]	; Src
		call	sub_6B1A6467
		mov	eax, [edi+4]
		lea	ecx, [eax+esi*4]
		mov	eax, [esp+8+arg_0]
		pop	edi
		mov	[eax], ecx
		pop	esi
		retn	0Ch
sub_6B1A65E1	endp

; Exported entry 1761.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1761
Ordinal1761	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		push	edi
		mov	esi, ecx
		call	Ordinal1713
		mov	dword ptr [esi], offset	off_6B1B9318
		xor	edi, edi
		lea	ecx, [esi+44h]
		mov	[esi+38h], edi
		mov	[esi+3Ch], edi
		mov	[esi+40h], edi
		call	Ordinal1650
		push	edi
		lea	ecx, [esi+4Ch]
		call	Ordinal1563
		lea	ecx, [esi+5Ch]
		mov	[esi+54h], edi
		mov	[esi+58h], edi
		call	Ordinal1730
		lea	ecx, [esi+74h]
		call	Ordinal1615
		pop	edi
		mov	eax, esi
		pop	esi
		retn
Ordinal1761	endp

; Exported entry 1765.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1765
Ordinal1765	proc near		; CODE XREF: Ordinal1762+Bp
					; Ordinal1763+D9p
					; DATA XREF: ...

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		call	Ordinal1764
		push	0
		push	0FFFFFFFFh
		lea	eax, [edi+74h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1571
		mov	esi, [edi+38h]
		xor	ebx, ebx
		inc	ebx
		jmp	short loc_6B1A66B9
; ---------------------------------------------------------------------------

loc_6B1A668C:				; CODE XREF: Ordinal1765+58j
		mov	ecx, [esi]
		push	[ebp+arg_0]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6B1A66A7
		push	offset aCthreadpoolDes ; "CThreadPool::Destroy() : (*pos)->Termin"...
		call	sub_6B18102E
		pop	ecx
		xor	ebx, ebx

loc_6B1A66A7:				; CODE XREF: Ordinal1765+34j
		mov	ecx, [esi]
		test	ecx, ecx
		jz	short loc_6B1A66B3
		mov	eax, [ecx]
		push	1
		call	dword ptr [eax]

loc_6B1A66B3:				; CODE XREF: Ordinal1765+47j
		and	dword ptr [esi], 0
		add	esi, 4

loc_6B1A66B9:				; CODE XREF: Ordinal1765+26j
		cmp	esi, [edi+3Ch]
		jnz	short loc_6B1A668C
		lea	ecx, [edi+34h]
		call	sub_6B1A1AF0
		lea	ecx, [ebp+var_C]
		call	Ordinal1573
		pop	edi
		pop	esi
		mov	eax, ebx
		pop	ebx
		leave
		retn	4
Ordinal1765	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1A66D7	proc near		; CODE XREF: Ordinal1775+C3p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		mov	esi, ecx
		call	sub_6B1A17A8
		mov	ecx, esi
		mov	edi, eax
		call	sub_6B1A62F1
		cmp	edi, eax
		push	[ebp+arg_0]
		mov	ecx, esi
		jnb	short loc_6B1A6704
		push	1
		push	dword ptr [esi+8]
		call	sub_6B1A6447
		mov	[esi+8], eax
		jmp	short loc_6B1A6711
; ---------------------------------------------------------------------------

loc_6B1A6704:				; CODE XREF: sub_6B1A66D7+1Cj
		mov	eax, [esi+8]
		push	eax		; Src
		lea	eax, [ebp+arg_0]
		push	eax		; int
		call	sub_6B1A65E1

loc_6B1A6711:				; CODE XREF: sub_6B1A66D7+2Bj
		pop	edi
		pop	esi
		pop	ebp
		retn	4
sub_6B1A66D7	endp

; Exported entry 1762.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1762
Ordinal1762	proc near		; CODE XREF: sub_6B1A68FD+3p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		push	0
		mov	dword ptr [esi], offset	off_6B1B9318
		call	Ordinal1765
		lea	ecx, [esi+74h]
		call	Ordinal1616
		lea	ecx, [esi+5Ch]
		call	Ordinal1732
		lea	ecx, [esi+4Ch]
		call	Ordinal1564
		lea	ecx, [esi+44h]
		call	Ordinal1652
		lea	ecx, [esi+34h]
		call	sub_6B1A1AF0
		mov	ecx, esi
		pop	esi
		jmp	Ordinal1714
Ordinal1762	endp

; Exported entry 1775.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1775
Ordinal1775	proc near		; CODE XREF: Ordinal1763+97p
					; Ordinal1769+5Fp
					; DATA XREF: ...

var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_144	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 48h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		xor	ebx, ebx
		push	edi
		mov	esi, ecx
		mov	edi, [esi+38h]
		inc	ebx
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_28], ebx
		jmp	short loc_6B1A678D
; ---------------------------------------------------------------------------

loc_6B1A677F:				; CODE XREF: Ordinal1775+39j
		mov	ecx, [edi]
		call	Ordinal1747
		test	eax, eax
		jz	short loc_6B1A6794
		add	edi, 4

loc_6B1A678D:				; CODE XREF: Ordinal1775+26j
		cmp	edi, [esi+3Ch]
		jnz	short loc_6B1A677F
		jmp	short loc_6B1A67AC
; ---------------------------------------------------------------------------

loc_6B1A6794:				; CODE XREF: Ordinal1775+31j
		push	offset aCthreadpoolCre ; "CThreadPool::CreateThread() :	(*pos)->I"...
		call	sub_6B181006
		mov	edi, [edi]
		and	[ebp+var_2C], 0
		test	edi, edi
		pop	ecx
		mov	[ebp+var_30], edi
		jnz	short loc_6B1A67C6

loc_6B1A67AC:				; CODE XREF: Ordinal1775+3Bj
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+14h]
		mov	edi, eax
		test	edi, edi
		mov	[ebp+var_30], edi
		jnz	short loc_6B1A67C3
		push	offset aCthreadpoolC_0 ; "CThreadPool::CreateThread() :	AllocateT"...
		jmp	short loc_6B1A67E5
; ---------------------------------------------------------------------------

loc_6B1A67C3:				; CODE XREF: Ordinal1775+63j
		mov	[ebp+var_2C], ebx

loc_6B1A67C6:				; CODE XREF: Ordinal1775+53j
		mov	ebx, [edi]
		xor	eax, eax
		push	eax
		push	eax
		lea	ecx, [esi+44h]
		push	eax
		mov	eax, [ecx]
		call	dword ptr [eax+0Ch]
		push	eax
		push	esi		; Args
		mov	ecx, edi
		call	dword ptr [ebx+18h]
		test	eax, eax
		jnz	short loc_6B1A67F4
		push	offset aCthreadpoolC_1 ; "CThreadPool::CreateThread() :	pThread->"...

loc_6B1A67E5:				; CODE XREF: Ordinal1775+6Aj
		call	sub_6B18102E
		and	[ebp+var_28], 0
		pop	ecx
		jmp	loc_6B1A68E3
; ---------------------------------------------------------------------------

loc_6B1A67F4:				; CODE XREF: Ordinal1775+87j
		cmp	[ebp+var_2C], 0
		jz	loc_6B1A68E3
		push	offset aCthreadpoolC_2 ; "CThreadPool::CreateThread()"
		lea	ecx, [ebp+var_50]
		call	Ordinal1089
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_30]
		push	eax
		lea	ecx, [esi+34h]
		mov	byte ptr [ebp+var_4], 1
		call	sub_6B1A66D7
		jmp	loc_6B1A68BF
; ---------------------------------------------------------------------------

loc_6B1A6824:				; DATA XREF: .rdata:6B1BD808o
		push	13h
		lea	ecx, [ebp+var_50]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_50]
		call	Ordinal1101
		mov	ecx, [ebp+var_2C]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_50]
		call	Ordinal1103
		lea	ecx, [ebp+var_50]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A68BC
		retn
; ---------------------------------------------------------------------------

loc_6B1A6867:				; DATA XREF: .rdata:6B1BD818o
		push	15h
		lea	ecx, [ebp+var_50]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_50]
		call	Ordinal1101
		mov	eax, [ebp+var_54]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_50]
		call	Ordinal1103
		lea	ecx, [ebp+var_50]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A68BC
		retn
; ---------------------------------------------------------------------------

loc_6B1A68BC:				; DATA XREF: Ordinal1775+10Ao
					; Ordinal1775+15Fo
		mov	edi, [ebp+var_30]

loc_6B1A68BF:				; CODE XREF: Ordinal1775+C8j
		and	[ebp+var_4], 0
		lea	ecx, [ebp+var_50]
		call	Ordinal1635
		test	eax, eax
		jz	short loc_6B1A68DB
		mov	eax, [edi]
		push	1
		mov	ecx, edi
		call	dword ptr [eax]
		and	[ebp+var_28], 0

loc_6B1A68DB:				; CODE XREF: Ordinal1775+176j
		lea	ecx, [ebp+var_50]
		call	Ordinal1090

loc_6B1A68E3:				; CODE XREF: Ordinal1775+98j
					; Ordinal1775+A1j
		mov	ecx, [ebp+var_C]
		mov	eax, [ebp+var_28]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal1775	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A68FD(void *, char)
sub_6B1A68FD	proc near		; DATA XREF: .rdata:off_6B1B9318o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1762
		test	[esp+4+arg_0], 1
		jz	short loc_6B1A6913
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A6913:				; CODE XREF: sub_6B1A68FD+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A68FD	endp

; Exported entry 1763.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1763
Ordinal1763	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
Value		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		xor	ebx, ebx
		cmp	[ebp+Value], ebx
		push	esi
		mov	esi, ecx
		jnz	short loc_6B1A693C
		push	offset aCthreadpoolC_3 ; "CThreadPool::Create()	: dwThreadCount	="...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6B1A69DA
; ---------------------------------------------------------------------------

loc_6B1A693C:				; CODE XREF: Ordinal1763+Fj
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+74h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		mov	ecx, esi
		call	Ordinal1766
		test	eax, eax
		jz	short loc_6B1A6963
		push	offset aCthreadpoolC_4 ; "CThreadPool::Create()	: IsThreadPool() "...
		call	sub_6B18101A
		pop	ecx
		jmp	short loc_6B1A69D0
; ---------------------------------------------------------------------------

loc_6B1A6963:				; CODE XREF: Ordinal1763+3Bj
		push	edi		; Args
		lea	edi, [esi+44h]
		mov	ecx, edi
		call	Ordinal1635
		test	eax, eax
		jnz	short loc_6B1A6990
		push	ebx		; int
		push	ebx		; lpString2
		push	ebx		; bInitialState
		push	1		; bManualReset
		push	ebx		; lpEventAttributes
		mov	ecx, edi
		call	Ordinal1654
		test	eax, eax
		jnz	short loc_6B1A6990
		push	offset aCthreadpoolC_5 ; "CThreadPool::Create()	: m_AddEvent.Crea"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B1A69CF
; ---------------------------------------------------------------------------

loc_6B1A6990:				; CODE XREF: Ordinal1763+57j
					; Ordinal1763+68j
		mov	ecx, edi
		call	Ordinal1661
		push	ebx
		lea	ecx, [esi+4Ch]
		call	Ordinal1566
		xor	edi, edi
		cmp	[ebp+Value], ebx
		mov	[ebp+var_4], 1
		jbe	short loc_6B1A69BF

loc_6B1A69AE:				; CODE XREF: Ordinal1763+A4j
		mov	ecx, esi
		call	Ordinal1775
		test	eax, eax
		jz	short loc_6B1A69E0
		inc	edi
		cmp	edi, [ebp+Value]
		jb	short loc_6B1A69AE

loc_6B1A69BF:				; CODE XREF: Ordinal1763+93j
		push	[ebp+Value]	; Value
		add	esi, 58h
		push	esi		; Target
		call	ds:InterlockedExchange

loc_6B1A69CC:				; CODE XREF: Ordinal1763+DEj
		mov	ebx, [ebp+var_4]

loc_6B1A69CF:				; CODE XREF: Ordinal1763+75j
		pop	edi

loc_6B1A69D0:				; CODE XREF: Ordinal1763+48j
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		mov	eax, ebx

loc_6B1A69DA:				; CODE XREF: Ordinal1763+1Ej
		pop	esi
		pop	ebx
		leave
		retn	4
; ---------------------------------------------------------------------------

loc_6B1A69E0:				; CODE XREF: Ordinal1763+9Ej
		push	offset aCthreadpoolC_6 ; "CThreadPool::Create()	: CreateThread() "...
		call	sub_6B18102E
		pop	ecx
		push	0FFFFFFFFh
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal1765
		jmp	short loc_6B1A69CC
Ordinal1763	endp

; Exported entry 1769.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1769
Ordinal1769	proc near		; DATA XREF: .rdata:off_6B1BF428o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	esi, [ebp+arg_0]
		test	esi, esi
		push	edi
		mov	edi, ecx
		jnz	short loc_6B1A6A1C
		push	offset aCthreadpoolSet ; "CThreadPool::SetThreadCount()	: dwThrea"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6B1A6B18
; ---------------------------------------------------------------------------

loc_6B1A6A1C:				; CODE XREF: Ordinal1769+Fj
		push	ebx		; Args
		push	0
		push	0FFFFFFFFh
		lea	eax, [edi+74h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1571
		push	0		; Value
		lea	ebx, [edi+58h]
		push	ebx		; Addend
		call	ds:InterlockedExchangeAdd
		sub	esi, eax
		mov	[ebp+arg_0], esi
		jnz	short loc_6B1A6A48
		xor	esi, esi
		inc	esi
		jmp	loc_6B1A6B0D
; ---------------------------------------------------------------------------

loc_6B1A6A48:				; CODE XREF: Ordinal1769+45j
		xor	esi, esi
		cmp	[ebp+arg_0], esi
		mov	[ebp+var_4], 1
		jle	short loc_6B1A6A87

loc_6B1A6A56:				; CODE XREF: Ordinal1769+73j
		mov	ecx, edi
		call	Ordinal1775
		test	eax, eax
		jz	short loc_6B1A6A73
		push	ebx		; lpAddend
		call	ds:InterlockedIncrement
		inc	esi
		cmp	esi, [ebp+arg_0]
		jl	short loc_6B1A6A56
		jmp	loc_6B1A6B0A
; ---------------------------------------------------------------------------

loc_6B1A6A73:				; CODE XREF: Ordinal1769+66j
		push	offset aCthreadpoolS_0 ; "CThreadPool::SetThreadCount()	: CreateT"...
		call	sub_6B18102E
		and	[ebp+var_4], 0
		pop	ecx
		jmp	loc_6B1A6B0A
; ---------------------------------------------------------------------------

loc_6B1A6A87:				; CODE XREF: Ordinal1769+5Bj
		mov	esi, [edi+38h]
		mov	ebx, ds:InterlockedDecrement
		jmp	short loc_6B1A6ACC
; ---------------------------------------------------------------------------

loc_6B1A6A92:				; CODE XREF: Ordinal1769+D6j
		cmp	[ebp+arg_0], 0
		jz	short loc_6B1A6AD1
		mov	ecx, [esi]
		call	Ordinal1747
		test	eax, eax
		jz	short loc_6B1A6AC9
		mov	ecx, [esi]
		call	Ordinal1748
		test	eax, eax
		jnz	short loc_6B1A6AC9
		mov	ecx, [esi]
		call	Ordinal1756
		test	eax, eax
		jnz	short loc_6B1A6AC9
		mov	ecx, [esi]
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		inc	[ebp+arg_0]
		lea	eax, [edi+58h]
		push	eax		; lpAddend
		call	ebx ; InterlockedDecrement

loc_6B1A6AC9:				; CODE XREF: Ordinal1769+A8j
					; Ordinal1769+B3j ...
		add	esi, 4

loc_6B1A6ACC:				; CODE XREF: Ordinal1769+97j
		cmp	esi, [edi+3Ch]
		jnz	short loc_6B1A6A92

loc_6B1A6AD1:				; CODE XREF: Ordinal1769+9Dj
		mov	esi, [edi+38h]
		jmp	short loc_6B1A6B05
; ---------------------------------------------------------------------------

loc_6B1A6AD6:				; CODE XREF: Ordinal1769+10Fj
		cmp	[ebp+arg_0], 0
		jz	short loc_6B1A6B0A
		mov	ecx, [esi]
		call	Ordinal1747
		test	eax, eax
		jz	short loc_6B1A6B02
		mov	ecx, [esi]
		call	Ordinal1748
		test	eax, eax
		jnz	short loc_6B1A6B02
		mov	ecx, [esi]
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		inc	[ebp+arg_0]
		lea	eax, [edi+58h]
		push	eax		; lpAddend
		call	ebx ; InterlockedDecrement

loc_6B1A6B02:				; CODE XREF: Ordinal1769+ECj
					; Ordinal1769+F7j
		add	esi, 4

loc_6B1A6B05:				; CODE XREF: Ordinal1769+DBj
		cmp	esi, [edi+3Ch]
		jnz	short loc_6B1A6AD6

loc_6B1A6B0A:				; CODE XREF: Ordinal1769+75j
					; Ordinal1769+89j ...
		mov	esi, [ebp+var_4]

loc_6B1A6B0D:				; CODE XREF: Ordinal1769+4Aj
		lea	ecx, [ebp+var_10]
		call	Ordinal1573
		mov	eax, esi
		pop	ebx

loc_6B1A6B18:				; CODE XREF: Ordinal1769+1Ej
		pop	edi
		pop	esi
		leave
		retn	4
Ordinal1769	endp

; Exported entry 1776.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1776
Ordinal1776	proc near		; CODE XREF: Ordinal1700+10p
					; Ordinal1701+10p
					; DATA XREF: ...
		mov	eax, ecx
		and	dword ptr [eax+4], 0
		and	dword ptr [eax+8], 0
		mov	dword ptr [eax], offset	off_6B1B9574
		retn
Ordinal1776	endp

; Exported entry 1778.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1778
Ordinal1778	proc near		; CODE XREF: Ordinal1702+9j
					; DATA XREF: .rdata:off_6B1BF428o
		mov	dword ptr [ecx], offset	off_6B1B9574
		retn
Ordinal1778	endp

; Exported entry 1779.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1779
Ordinal1779	proc near		; CODE XREF: Ordinal1703+2Ap
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, ecx
		mov	ecx, [esp+arg_0]
		mov	edx, [ecx+4]
		mov	[eax+4], edx
		mov	ecx, [ecx+8]
		mov	[eax+8], ecx
		retn	4
Ordinal1779	endp

; Exported entry 1780.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1780
Ordinal1780	proc near		; CODE XREF: Ordinal1704+6p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	ds:GetTickCount
		mov	[esi+4], eax
		pop	esi
		retn
Ordinal1780	endp

; Exported entry 1781.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1781
Ordinal1781	proc near		; CODE XREF: Ordinal1705+6p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	ds:GetTickCount
		mov	[esi+8], eax
		pop	esi
		retn
Ordinal1781	endp

; Exported entry 443.
; Exported entry 971.
; Exported entry 996.
; Exported entry 1051.
; Exported entry 1096.
; Exported entry 1111.
; Exported entry 1155.
; Exported entry 1209.
; Exported entry 1223.
; Exported entry 1281.
; Exported entry 1320.
; Exported entry 1441.
; Exported entry 1442.
; Exported entry 1491.
; Exported entry 1630.
; Exported entry 1638.
; Exported entry 1642.
; Exported entry 1649.
; Exported entry 1653.
; Exported entry 1665.
; Exported entry 1782.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1649
Ordinal1649	proc near		; CODE XREF: Ordinal145+31Ap
					; Ordinal142+2DDp ...
		mov	eax, [ecx+4]	; ccL35_443
					; ccL35_971
					; ccL35_996
					; ccL35_1051
					; ccL35_1096
					; ccL35_1111
					; ccL35_1155
					; ccL35_1209
					; ccL35_1223
					; ccL35_1281
					; ccL35_1320
					; ccL35_1441
					; ccL35_1442
					; ccL35_1491
					; ccL35_1630
					; ccL35_1638
					; ccL35_1642
					; ccL35_1649
					; ccL35_1653
					; ccL35_1665
		retn
Ordinal1649	endp

; Exported entry 1785.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1785
Ordinal1785	proc near		; CODE XREF: Ordinal1786+15p
					; Ordinal1784+6p
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		cmp	eax, [esp+arg_0]
		jnb	short loc_6B1A6B7B
		sub	eax, [esp+arg_0]
		dec	eax
		retn
; ---------------------------------------------------------------------------

loc_6B1A6B7B:				; CODE XREF: Ordinal1785+8j
		sub	eax, [esp+arg_0]
		retn
Ordinal1785	endp

; Exported entry 1786.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1786
Ordinal1786	proc near		; CODE XREF: Ordinal1609+163p
					; Ordinal1609+2C3p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_8]
		cmp	ecx, 0FFFFFFFFh
		jz	short loc_6B1A6BAD
		test	ecx, ecx
		jz	short loc_6B1A6BAD
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	Ordinal1785
		add	esp, 8
		cmp	eax, ecx
		jb	short loc_6B1A6BAB
		mov	eax, [ebp+arg_C]
		and	dword ptr [eax], 0
		xor	al, al
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6B1A6BAB:				; CODE XREF: Ordinal1786+1Fj
		sub	ecx, eax

loc_6B1A6BAD:				; CODE XREF: Ordinal1786+9j
					; Ordinal1786+Dj
		mov	eax, [ebp+arg_C]
		mov	[eax], ecx
		mov	al, 1
		pop	ebp
		retn
Ordinal1786	endp

; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_12. PRESS	KEYPAD "+" TO EXPAND]
; Exported entry 1777.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1777
Ordinal1777	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, ecx
		and	dword ptr [eax+4], 0
		and	dword ptr [eax+8], 0
		mov	ecx, [esp+arg_0]
		mov	dword ptr [eax], offset	off_6B1B9574
		mov	edx, [ecx+4]
		mov	[eax+4], edx
		mov	ecx, [ecx+8]
		mov	[eax+8], ecx
		retn	4
Ordinal1777	endp

; Exported entry 1784.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1784
Ordinal1784	proc near		; CODE XREF: Ordinal1708+3j
					; DATA XREF: .rdata:off_6B1BF428o
		push	dword ptr [ecx+8]
		push	dword ptr [ecx+4]
		call	Ordinal1785
		add	esp, 8
		retn
Ordinal1784	endp

; Exported entry 1792.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1792
Ordinal1792	proc near		; CODE XREF: Ordinal1787+12p
					; Ordinal1791+5p
					; DATA XREF: ...

var_1		= byte ptr -1
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		xor	ebx, ebx
		cmp	[ebp+arg_0], bl
		push	esi
		mov	esi, ecx
		jz	short loc_6B1A6C21
		call	Ordinal1230
		test	al, al
		jz	loc_6B1A6D5E

loc_6B1A6C21:				; CODE XREF: Ordinal1792+Dj
		cmp	[ebp+arg_0], bl
		mov	[ebp+var_1], 1
		jnz	short loc_6B1A6C53
		mov	[esi+8], ebx
		mov	[esi+0Ch], ebx
		mov	[esi+10h], ebx
		mov	[esi+14h], ebx
		mov	[esi+18h], ebx
		mov	[esi+1Ch], ebx
		mov	[esi+20h], ebx
		mov	[esi+24h], ebx
		mov	[esi+28h], ebx
		mov	[esi+2Ch], ebx
		mov	[esi+30h], ebx
		mov	[esi+34h], ebx
		jmp	loc_6B1A6D5B
; ---------------------------------------------------------------------------

loc_6B1A6C53:				; CODE XREF: Ordinal1792+23j
		push	offset aCreatetoolhelp ; "CreateToolhelp32Snapshot"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+8], eax
		jnz	short loc_6B1A6C69
		mov	[ebp+var_1], bl

loc_6B1A6C69:				; CODE XREF: Ordinal1792+5Fj
		push	offset aHeap32first ; "Heap32First"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+0Ch], eax
		jnz	short loc_6B1A6C7F
		mov	[ebp+var_1], bl

loc_6B1A6C7F:				; CODE XREF: Ordinal1792+75j
		push	offset aHeap32listfirs ; "Heap32ListFirst"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+10h], eax
		jnz	short loc_6B1A6C95
		mov	[ebp+var_1], bl

loc_6B1A6C95:				; CODE XREF: Ordinal1792+8Bj
		push	offset aHeap32listnext ; "Heap32ListNext"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+14h], eax
		jnz	short loc_6B1A6CAB
		mov	[ebp+var_1], bl

loc_6B1A6CAB:				; CODE XREF: Ordinal1792+A1j
		push	offset aHeap32next ; "Heap32Next"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+18h], eax
		jnz	short loc_6B1A6CC1
		mov	[ebp+var_1], bl

loc_6B1A6CC1:				; CODE XREF: Ordinal1792+B7j
		push	offset aThread32first ;	"Thread32First"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+1Ch], eax
		jnz	short loc_6B1A6CD7
		mov	[ebp+var_1], bl

loc_6B1A6CD7:				; CODE XREF: Ordinal1792+CDj
		push	offset aThread32next ; "Thread32Next"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+20h], eax
		jnz	short loc_6B1A6CED
		mov	[ebp+var_1], bl

loc_6B1A6CED:				; CODE XREF: Ordinal1792+E3j
		push	offset aToolhelp32read ; "Toolhelp32ReadProcessMemory"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+24h], eax
		jnz	short loc_6B1A6D03
		mov	[ebp+var_1], bl

loc_6B1A6D03:				; CODE XREF: Ordinal1792+F9j
		push	offset aModule32first ;	"Module32First"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+28h], eax
		jnz	short loc_6B1A6D19
		mov	[ebp+var_1], bl

loc_6B1A6D19:				; CODE XREF: Ordinal1792+10Fj
		push	offset aModule32next ; "Module32Next"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+2Ch], eax
		jnz	short loc_6B1A6D2F
		mov	[ebp+var_1], bl

loc_6B1A6D2F:				; CODE XREF: Ordinal1792+125j
		push	offset aProcess32first ; "Process32First"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+30h], eax
		jnz	short loc_6B1A6D45
		mov	[ebp+var_1], bl

loc_6B1A6D45:				; CODE XREF: Ordinal1792+13Bj
		push	offset aProcess32next ;	"Process32Next"
		mov	ecx, esi
		call	Ordinal1229
		cmp	eax, ebx
		mov	[esi+34h], eax
		jnz	short loc_6B1A6D5B
		mov	[ebp+var_1], bl

loc_6B1A6D5B:				; CODE XREF: Ordinal1792+49j
					; Ordinal1792+151j
		mov	al, [ebp+var_1]

loc_6B1A6D5E:				; CODE XREF: Ordinal1792+16j
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal1792	endp

; Exported entry 1787.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1787
Ordinal1787	proc near		; CODE XREF: Ordinal1686+20p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	Ordinal1219
		push	0
		mov	ecx, esi
		mov	dword ptr [esi], offset	off_6B1B9648
		call	Ordinal1792
		mov	eax, esi
		pop	esi
		retn
Ordinal1787	endp

; Exported entry 1789.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1789(LPCSTR Args)
		public Ordinal1789
Ordinal1789	proc near		; CODE XREF: Ordinal1793+Fp
					; DATA XREF: .rdata:off_6B1BF428o

Args		= dword	ptr  4

		push	esi
		push	[esp+4+Args]	; Args
		mov	esi, ecx
		call	Ordinal1226
		test	al, al
		jz	short loc_6B1A6D9A
		mov	ecx, esi
		call	Ordinal1230
		test	al, al
		jnz	short loc_6B1A6DA1

loc_6B1A6D9A:				; CODE XREF: Ordinal1789+Ej
		xor	al, al
		jmp	loc_6B1A6EA3
; ---------------------------------------------------------------------------

loc_6B1A6DA1:				; CODE XREF: Ordinal1789+19j
		push	ebx
		push	offset aCreatetoolhelp ; "CreateToolhelp32Snapshot"
		mov	ecx, esi
		mov	bl, 1
		call	Ordinal1229
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6B1A6DB9
		xor	bl, bl

loc_6B1A6DB9:				; CODE XREF: Ordinal1789+36j
		push	offset aHeap32first ; "Heap32First"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+0Ch], eax
		jnz	short loc_6B1A6DCE
		xor	bl, bl

loc_6B1A6DCE:				; CODE XREF: Ordinal1789+4Bj
		push	offset aHeap32listfirs ; "Heap32ListFirst"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+10h], eax
		jnz	short loc_6B1A6DE3
		xor	bl, bl

loc_6B1A6DE3:				; CODE XREF: Ordinal1789+60j
		push	offset aHeap32listnext ; "Heap32ListNext"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+14h], eax
		jnz	short loc_6B1A6DF8
		xor	bl, bl

loc_6B1A6DF8:				; CODE XREF: Ordinal1789+75j
		push	offset aHeap32next ; "Heap32Next"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+18h], eax
		jnz	short loc_6B1A6E0D
		xor	bl, bl

loc_6B1A6E0D:				; CODE XREF: Ordinal1789+8Aj
		push	offset aThread32first ;	"Thread32First"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+1Ch], eax
		jnz	short loc_6B1A6E22
		xor	bl, bl

loc_6B1A6E22:				; CODE XREF: Ordinal1789+9Fj
		push	offset aThread32next ; "Thread32Next"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+20h], eax
		jnz	short loc_6B1A6E37
		xor	bl, bl

loc_6B1A6E37:				; CODE XREF: Ordinal1789+B4j
		push	offset aToolhelp32read ; "Toolhelp32ReadProcessMemory"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+24h], eax
		jnz	short loc_6B1A6E4C
		xor	bl, bl

loc_6B1A6E4C:				; CODE XREF: Ordinal1789+C9j
		push	offset aModule32first ;	"Module32First"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+28h], eax
		jnz	short loc_6B1A6E61
		xor	bl, bl

loc_6B1A6E61:				; CODE XREF: Ordinal1789+DEj
		push	offset aModule32next ; "Module32Next"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+2Ch], eax
		jnz	short loc_6B1A6E76
		xor	bl, bl

loc_6B1A6E76:				; CODE XREF: Ordinal1789+F3j
		push	offset aProcess32first ; "Process32First"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+30h], eax
		jnz	short loc_6B1A6E8B
		xor	bl, bl

loc_6B1A6E8B:				; CODE XREF: Ordinal1789+108j
		push	offset aProcess32next ;	"Process32Next"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+34h], eax
		jnz	short loc_6B1A6EA0
		xor	bl, bl

loc_6B1A6EA0:				; CODE XREF: Ordinal1789+11Dj
		mov	al, bl
		pop	ebx

loc_6B1A6EA3:				; CODE XREF: Ordinal1789+1Dj
		pop	esi
		retn	4
Ordinal1789	endp

; Exported entry 1790.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1790(LPCSTR Args, DWORD dwFlags)
		public Ordinal1790
Ordinal1790	proc near		; DATA XREF: .rdata:off_6B1BF428o

Args		= dword	ptr  4
dwFlags		= dword	ptr  8

		push	esi
		push	[esp+4+dwFlags]	; dwFlags
		mov	esi, ecx
		push	[esp+8+Args]	; Args
		call	Ordinal1227
		test	al, al
		jz	short loc_6B1A6EC6
		mov	ecx, esi
		call	Ordinal1230
		test	al, al
		jnz	short loc_6B1A6ECD

loc_6B1A6EC6:				; CODE XREF: Ordinal1790+12j
		xor	al, al
		jmp	loc_6B1A6FCF
; ---------------------------------------------------------------------------

loc_6B1A6ECD:				; CODE XREF: Ordinal1790+1Dj
		push	ebx
		push	offset aCreatetoolhelp ; "CreateToolhelp32Snapshot"
		mov	ecx, esi
		mov	bl, 1
		call	Ordinal1229
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6B1A6EE5
		xor	bl, bl

loc_6B1A6EE5:				; CODE XREF: Ordinal1790+3Aj
		push	offset aHeap32first ; "Heap32First"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+0Ch], eax
		jnz	short loc_6B1A6EFA
		xor	bl, bl

loc_6B1A6EFA:				; CODE XREF: Ordinal1790+4Fj
		push	offset aHeap32listfirs ; "Heap32ListFirst"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+10h], eax
		jnz	short loc_6B1A6F0F
		xor	bl, bl

loc_6B1A6F0F:				; CODE XREF: Ordinal1790+64j
		push	offset aHeap32listnext ; "Heap32ListNext"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+14h], eax
		jnz	short loc_6B1A6F24
		xor	bl, bl

loc_6B1A6F24:				; CODE XREF: Ordinal1790+79j
		push	offset aHeap32next ; "Heap32Next"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+18h], eax
		jnz	short loc_6B1A6F39
		xor	bl, bl

loc_6B1A6F39:				; CODE XREF: Ordinal1790+8Ej
		push	offset aThread32first ;	"Thread32First"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+1Ch], eax
		jnz	short loc_6B1A6F4E
		xor	bl, bl

loc_6B1A6F4E:				; CODE XREF: Ordinal1790+A3j
		push	offset aThread32next ; "Thread32Next"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+20h], eax
		jnz	short loc_6B1A6F63
		xor	bl, bl

loc_6B1A6F63:				; CODE XREF: Ordinal1790+B8j
		push	offset aToolhelp32read ; "Toolhelp32ReadProcessMemory"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+24h], eax
		jnz	short loc_6B1A6F78
		xor	bl, bl

loc_6B1A6F78:				; CODE XREF: Ordinal1790+CDj
		push	offset aModule32first ;	"Module32First"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+28h], eax
		jnz	short loc_6B1A6F8D
		xor	bl, bl

loc_6B1A6F8D:				; CODE XREF: Ordinal1790+E2j
		push	offset aModule32next ; "Module32Next"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+2Ch], eax
		jnz	short loc_6B1A6FA2
		xor	bl, bl

loc_6B1A6FA2:				; CODE XREF: Ordinal1790+F7j
		push	offset aProcess32first ; "Process32First"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+30h], eax
		jnz	short loc_6B1A6FB7
		xor	bl, bl

loc_6B1A6FB7:				; CODE XREF: Ordinal1790+10Cj
		push	offset aProcess32next ;	"Process32Next"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+34h], eax
		jnz	short loc_6B1A6FCC
		xor	bl, bl

loc_6B1A6FCC:				; CODE XREF: Ordinal1790+121j
		mov	al, bl
		pop	ebx

loc_6B1A6FCF:				; CODE XREF: Ordinal1790+21j
		pop	esi
		retn	8
Ordinal1790	endp

; Exported entry 1791.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1791
Ordinal1791	proc near		; CODE XREF: Ordinal1794j
					; Ordinal1788+9p ...
		push	esi
		push	0
		mov	esi, ecx
		call	Ordinal1792
		mov	ecx, esi
		pop	esi
		jmp	Ordinal1228
Ordinal1791	endp

; Exported entry 1794.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1794
Ordinal1794	proc near		; CODE XREF: Ordinal1689+Ep
					; DATA XREF: .rdata:off_6B1BF428o
		jmp	Ordinal1791
Ordinal1794	endp

; Exported entry 1788.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1788
Ordinal1788	proc near		; CODE XREF: Ordinal1687+11p
					; sub_6B1A7016+3p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1B9648
		call	Ordinal1791
		mov	ecx, esi
		pop	esi
		jmp	Ordinal1221
Ordinal1788	endp

; Exported entry 1793.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1793
Ordinal1793	proc near		; CODE XREF: Ordinal1688+2Ep
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	Ordinal1791
		push	offset aKernel32_dll_0 ; "KERNEL32.DLL"
		mov	ecx, esi
		call	Ordinal1789
		pop	esi
		retn
Ordinal1793	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A7016(void *, char)
sub_6B1A7016	proc near		; DATA XREF: .rdata:off_6B1B9648o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1788
		test	[esp+4+arg_0], 1
		jz	short loc_6B1A702C
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A702C:				; CODE XREF: sub_6B1A7016+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A7016	endp

; Exported entry 1795.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1795
Ordinal1795	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		call	Ordinal610
		and	dword ptr [esi+28h], 0
		lea	ecx, [esi+30h]
		mov	dword ptr [esi], offset	off_6B1B964C
		call	Ordinal1846
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1795	endp

; Exported entry 1796.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1796
Ordinal1796	proc near		; CODE XREF: sub_6B1A71C9+3p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+30h]
		mov	dword ptr [esi], offset	off_6B1B964C
		call	Ordinal1850
		mov	ecx, esi
		pop	esi
		jmp	Ordinal611
Ordinal1796	endp

; Exported entry 1798.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1798
Ordinal1798	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+30h]
		call	Ordinal1874
		mov	[esi+28h], eax
		xor	eax, eax
		inc	eax
		pop	esi
		retn
Ordinal1798	endp

; Exported entry 877.
; Exported entry 1799.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1799
Ordinal1799	proc near		; DATA XREF: .rdata:off_6B1BF428o
		lea	eax, [ecx+30h]	; ccL35_877
		retn
Ordinal1799	endp

; Exported entry 1800.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1800(void *Dst, size_t Size)
		public Ordinal1800
Ordinal1800	proc near		; DATA XREF: .rdata:6B1B9650o
					; .rdata:off_6B1BF428o

Dst		= dword	ptr  4
Size		= dword	ptr  8

		push	ebx
		push	esi
		mov	esi, ecx
		push	edi
		lea	edi, [esi+30h]
		mov	ecx, edi
		call	Ordinal1874
		sub	eax, [esi+28h]
		mov	ebx, [esp+0Ch+Size]
		cmp	eax, ebx
		jnb	short loc_6B1A70AF
		push	offset aCvariantarchiv ; "CVariantArchive::ReadEx() : m_Variant.G"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B1A70D4
; ---------------------------------------------------------------------------

loc_6B1A70AF:				; CODE XREF: Ordinal1800+18j
		mov	ecx, edi
		call	Ordinal1875
		add	eax, [esi+28h]
		push	ebx		; Size
		push	eax		; Src
		push	[esp+14h+Dst]	; Dst
		call	memcpy
		add	[esi+28h], ebx
		add	esp, 0Ch
		mov	ecx, edi
		call	Ordinal1876
		xor	eax, eax
		inc	eax

loc_6B1A70D4:				; CODE XREF: Ordinal1800+27j
		pop	edi
		pop	esi
		pop	ebx
		retn	8
Ordinal1800	endp

; Exported entry 1803.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1803
Ordinal1803	proc near		; DATA XREF: .rdata:6B1B965Co
					; .rdata:off_6B1BF428o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, ecx
		mov	eax, [esi+28h]
		push	edi
		mov	edi, [esp+8+arg_0]
		xor	ecx, ecx
		cmp	edi, eax
		jnz	short loc_6B1A70F1
		cmp	[esp+8+arg_4], ecx
		jz	short loc_6B1A7119

loc_6B1A70F1:				; CODE XREF: Ordinal1803+Fj
		lea	ecx, [esi+30h]
		call	Ordinal1874
		xor	ecx, ecx
		cmp	[esp+8+arg_4], ecx
		jb	short loc_6B1A7116
		ja	short loc_6B1A7107
		cmp	edi, eax
		jb	short loc_6B1A7116

loc_6B1A7107:				; CODE XREF: Ordinal1803+27j
		push	offset aCvariantarch_0 ; "CVariantArchive::SetPosEx() :	uPos >=	m"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B1A711C
; ---------------------------------------------------------------------------

loc_6B1A7116:				; CODE XREF: Ordinal1803+25j
					; Ordinal1803+2Bj
		mov	[esi+28h], edi

loc_6B1A7119:				; CODE XREF: Ordinal1803+15j
		xor	eax, eax
		inc	eax

loc_6B1A711C:				; CODE XREF: Ordinal1803+3Aj
		pop	edi
		pop	esi
		retn	8
Ordinal1803	endp

; Exported entry 1804.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1804(ULONG cElements)
		public Ordinal1804
Ordinal1804	proc near		; CODE XREF: Ordinal1801+3Ap
					; DATA XREF: .rdata:off_6B1BF428o

var_20		= byte ptr -20h
cElements	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 20h
		push	esi
		lea	esi, [ecx+30h]
		push	edi
		mov	ecx, esi
		call	Ordinal1874
		mov	edi, eax
		test	edi, edi
		jnz	short loc_6B1A7148
		push	offset aCvariantarch_1 ; "CVariantArchive::ReAlloc() : dwCurrentS"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B1A71C3
; ---------------------------------------------------------------------------

loc_6B1A7148:				; CODE XREF: Ordinal1804+16j
		cmp	edi, [ebp+cElements]
		jnz	short loc_6B1A715D
		push	offset aCvariantarch_2 ; "CVariantArchive::ReAlloc() : dwCurrentS"...
		call	sub_6B18101A
		xor	eax, eax
		pop	ecx
		inc	eax
		jmp	short loc_6B1A71C3
; ---------------------------------------------------------------------------

loc_6B1A715D:				; CODE XREF: Ordinal1804+2Aj
		lea	ecx, [ebp+var_20]
		call	Ordinal1846
		push	[ebp+cElements]	; cElements
		lea	ecx, [ebp+var_20]
		call	Ordinal1856
		test	eax, eax
		jnz	short loc_6B1A7183
		push	offset aCvariantarch_3 ; "CVariantArchive::ReAlloc() : nCurrentSi"...
		call	sub_6B18101A
		pop	ecx
		xor	esi, esi
		jmp	short loc_6B1A71B9
; ---------------------------------------------------------------------------

loc_6B1A7183:				; CODE XREF: Ordinal1804+51j
		push	edi		; Size
		mov	ecx, esi
		call	Ordinal1875
		push	eax		; Src
		lea	ecx, [ebp+var_20]
		call	Ordinal1875
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch
		lea	ecx, [ebp+var_20]
		call	Ordinal1876
		mov	ecx, esi
		call	Ordinal1876
		lea	eax, [ebp+var_20]
		push	eax
		mov	ecx, esi
		call	Ordinal1861
		mov	esi, eax

loc_6B1A71B9:				; CODE XREF: Ordinal1804+60j
		lea	ecx, [ebp+var_20]
		call	Ordinal1850
		mov	eax, esi

loc_6B1A71C3:				; CODE XREF: Ordinal1804+25j
					; Ordinal1804+3Aj
		pop	edi
		pop	esi
		leave
		retn	4
Ordinal1804	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A71C9(void *, char)
sub_6B1A71C9	proc near		; DATA XREF: .rdata:off_6B1B964Co

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1796
		test	[esp+4+arg_0], 1
		jz	short loc_6B1A71DF
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A71DF:				; CODE XREF: sub_6B1A71C9+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A71C9	endp

; Exported entry 1801.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1801(void *Src, size_t cElements)
		public Ordinal1801
Ordinal1801	proc near		; DATA XREF: .rdata:6B1B9654o
					; .rdata:off_6B1BF428o

Src		= dword	ptr  4
cElements	= dword	ptr  8

		push	ebx
		push	esi
		mov	esi, ecx
		lea	ebx, [esi+30h]
		push	edi
		mov	ecx, ebx
		call	Ordinal1874
		mov	edi, [esp+0Ch+cElements]
		mov	ecx, eax
		sub	ecx, [esi+28h]
		cmp	ecx, edi
		jnb	short loc_6B1A7237
		test	eax, eax
		jnz	short loc_6B1A7218
		push	edi		; cElements
		mov	ecx, ebx
		call	Ordinal1856
		test	eax, eax
		jnz	short loc_6B1A7237
		push	offset aCvariantarch_4 ; "CVariantArchive::WriteEx() : m_Variant."...
		jmp	short loc_6B1A722D
; ---------------------------------------------------------------------------

loc_6B1A7218:				; CODE XREF: Ordinal1801+1Ej
		sub	eax, ecx
		add	eax, edi
		push	eax		; cElements
		mov	ecx, esi
		call	Ordinal1804
		test	eax, eax
		jnz	short loc_6B1A7237
		push	offset aCvariantarch_5 ; "CVariantArchive::WriteEx() : ReAlloc() "...

loc_6B1A722D:				; CODE XREF: Ordinal1801+31j
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B1A725C
; ---------------------------------------------------------------------------

loc_6B1A7237:				; CODE XREF: Ordinal1801+1Aj
					; Ordinal1801+2Aj ...
		mov	ecx, ebx
		call	Ordinal1875
		add	eax, [esi+28h]
		push	edi		; Size
		push	[esp+10h+Src]	; Src
		push	eax		; Dst
		call	memcpy
		add	[esi+28h], edi
		add	esp, 0Ch
		mov	ecx, ebx
		call	Ordinal1876
		xor	eax, eax
		inc	eax

loc_6B1A725C:				; CODE XREF: Ordinal1801+50j
		pop	edi
		pop	esi
		pop	ebx
		retn	8
Ordinal1801	endp

; Exported entry 1805.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1805
Ordinal1805	proc near		; CODE XREF: Ordinal704+Dp
					; Ordinal700+5Dp ...
		push	esi
		mov	esi, ecx
		lea	eax, [esi+8]
		push	eax		; pvarg
		mov	dword ptr [esi], offset	off_6B1B97F4
		mov	[esi+18h], eax
		call	ds:VariantInit
		mov	eax, esi
		pop	esi
		retn
Ordinal1805	endp

; Exported entry 1838.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1838
Ordinal1838	proc near		; CODE XREF: Ordinal1840+18p
					; Ordinal1842+19p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		jmp	short loc_6B1A728C
; ---------------------------------------------------------------------------

loc_6B1A7282:				; CODE XREF: Ordinal1838+12j
		cmp	word ptr [eax],	400Ch
		jnz	short locret_6B1A729D
		mov	eax, [eax+8]

loc_6B1A728C:				; CODE XREF: Ordinal1838+4j
		test	eax, eax
		jnz	short loc_6B1A7282
		push	offset aCvariantarrayG ; "CVariantArray::GetVariant() :	pVariant "...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax

locret_6B1A729D:			; CODE XREF: Ordinal1838+Bj
		retn
Ordinal1838	endp

; Exported entry 1840.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1840
Ordinal1840	proc near		; CODE XREF: Ordinal1842+2Ep
					; Ordinal1844+3p ...

arg_0		= dword	ptr  4

		cmp	[esp+arg_0], 0
		jnz	short loc_6B1A72B2
		push	offset aCvariantarra_0 ; "CVariantArray::GetSafeArray()	: pVarian"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B1A72C4
; ---------------------------------------------------------------------------

loc_6B1A72B2:				; CODE XREF: Ordinal1840+5j
		push	[esp+arg_0]
		call	Ordinal1838
		pop	ecx
		mov	cx, [eax]
		test	ch, 20h
		jnz	short loc_6B1A72C7

loc_6B1A72C4:				; CODE XREF: Ordinal1840+12j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6B1A72C7:				; CODE XREF: Ordinal1840+24j
		test	ch, 40h
		mov	eax, [eax+8]
		jz	short locret_6B1A72D1
		mov	eax, [eax]

locret_6B1A72D1:			; CODE XREF: Ordinal1840+2Fj
		retn
Ordinal1840	endp

; Exported entry 1842.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1842
Ordinal1842	proc near		; CODE XREF: Ordinal1843+Dp
					; Ordinal1819+Dp ...

arg_0		= dword	ptr  4

		cmp	[esp+arg_0], 0
		jnz	short loc_6B1A72E7
		push	offset aCvariantarrayI ; "CVariantArray::IsVariantArray() : pVari"...
		call	sub_6B18102E
		pop	ecx

loc_6B1A72E4:				; CODE XREF: Ordinal1842+21j
					; Ordinal1842+2Bj ...
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6B1A72E7:				; CODE XREF: Ordinal1842+5j
		push	[esp+arg_0]
		call	Ordinal1838
		test	eax, eax
		pop	ecx
		jz	short loc_6B1A72E4
		mov	cl, [eax]
		and	cl, 0Ch
		cmp	cl, 0Ch
		jnz	short loc_6B1A72E4
		push	eax
		call	Ordinal1840
		test	eax, eax
		pop	ecx
		jz	short loc_6B1A72E4
		cmp	word ptr [eax],	1
		jnz	short loc_6B1A72E4
		cmp	dword ptr [eax+14h], 0
		jnz	short loc_6B1A72E4
		xor	eax, eax
		inc	eax
		retn
Ordinal1842	endp

; Exported entry 1843.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1843
Ordinal1843	proc near		; CODE XREF: Ordinal700+72p
					; Ordinal703+2Ep ...
		mov	eax, [ecx+18h]
		cmp	word ptr [eax],	0
		jnz	short loc_6B1A7326
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6B1A7326:				; CODE XREF: Ordinal1843+7j
		push	eax
		call	Ordinal1842
		pop	ecx
		retn
Ordinal1843	endp

; Exported entry 1844.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1844
Ordinal1844	proc near		; CODE XREF: Ordinal700+8Ap
					; Ordinal703+3Ep ...
		push	dword ptr [ecx+18h]
		call	Ordinal1840
		test	eax, eax
		pop	ecx
		jnz	short loc_6B1A7349
		push	offset aCvariantarra_1 ; "CVariantArray::GetSize() : pSa == NULL\n"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6B1A7349:				; CODE XREF: Ordinal1844+Bj
		mov	eax, [eax+10h]
		retn
Ordinal1844	endp

; Exported entry 1845.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1845
Ordinal1845	proc near		; CODE XREF: Ordinal1833+2Dp
					; DATA XREF: .rdata:off_6B1BF428o

psaboundNew	= SAFEARRAYBOUND ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	esi
		push	edi
		mov	esi, ecx
		call	Ordinal1843
		test	eax, eax
		jz	short loc_6B1A73A9
		mov	edi, [ebp+arg_0]
		test	edi, edi
		jl	short loc_6B1A73A9
		push	dword ptr [esi+18h]
		call	Ordinal1840
		pop	ecx
		mov	ecx, [eax+10h]
		mov	[ebp+psaboundNew.cElements], ecx
		mov	eax, [eax+14h]
		mov	[ebp+psaboundNew.lLbound], eax
		lea	eax, [ebp+psaboundNew]
		push	eax		; psaboundNew
		push	dword ptr [esi+18h]
		mov	[ebp+psaboundNew.cElements], edi
		call	Ordinal1840
		pop	ecx
		push	eax		; psa
		call	ds:SafeArrayRedim
		test	eax, eax
		jge	short loc_6B1A73A4
		push	eax		; Args
		push	offset aCvariantarrayS ; "CVariantArray::SetSize() : SafeArrayRed"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B1A73B3
; ---------------------------------------------------------------------------

loc_6B1A73A4:				; CODE XREF: Ordinal1845+47j
		xor	eax, eax
		inc	eax
		jmp	short loc_6B1A73B6
; ---------------------------------------------------------------------------

loc_6B1A73A9:				; CODE XREF: Ordinal1845+10j
					; Ordinal1845+17j
		push	offset aCvariantarra_2 ; "CVariantArray::SetSize() : IsArray() =="...
		call	sub_6B18102E

loc_6B1A73B3:				; CODE XREF: Ordinal1845+55j
		pop	ecx
		xor	eax, eax

loc_6B1A73B6:				; CODE XREF: Ordinal1845+5Aj
		pop	edi
		pop	esi
		leave
		retn	4
Ordinal1845	endp

; Exported entry 1816.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1816
Ordinal1816	proc near		; CODE XREF: Ordinal1819+19p
					; Ordinal1822+1Ap ...
		push	esi
		mov	esi, ecx
		mov	eax, [esi+18h]
		cmp	word ptr [eax],	0
		jz	short loc_6B1A73E2
		push	edi
		push	eax
		call	Ordinal1840
		mov	edi, eax
		test	edi, edi
		pop	ecx
		jz	short loc_6B1A73E1

loc_6B1A73D6:				; CODE XREF: Ordinal1816+23j
		push	edi		; psa
		call	ds:SafeArrayUnlock
		test	eax, eax
		jge	short loc_6B1A73D6

loc_6B1A73E1:				; CODE XREF: Ordinal1816+18j
		pop	edi

loc_6B1A73E2:				; CODE XREF: Ordinal1816+Aj
		push	dword ptr [esi+18h] ; pvarg
		call	ds:VariantClear
		pop	esi
		retn
Ordinal1816	endp

; Exported entry 1819.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1819(VARIANTARG *pvargSrc)
		public Ordinal1819
Ordinal1819	proc near		; CODE XREF: Ordinal1812+Dp
					; Ordinal1817+7p ...

pvargSrc	= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+pvargSrc]
		test	edi, edi
		mov	esi, ecx
		jz	short loc_6B1A742C
		push	edi
		call	Ordinal1842
		test	eax, eax
		pop	ecx
		jz	short loc_6B1A742C
		mov	ecx, esi
		call	Ordinal1816
		push	edi		; pvargSrc
		push	dword ptr [esi+18h] ; pvarDest
		call	ds:VariantCopyInd
		test	eax, eax
		jge	short loc_6B1A7427
		push	eax		; Args
		push	offset aCvariantarrayC ; "CVariantArray::Copy()	: VariantCopyInd("...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B1A7436
; ---------------------------------------------------------------------------

loc_6B1A7427:				; CODE XREF: Ordinal1819+2Aj
		xor	eax, eax
		inc	eax
		jmp	short loc_6B1A7439
; ---------------------------------------------------------------------------

loc_6B1A742C:				; CODE XREF: Ordinal1819+Aj
					; Ordinal1819+15j
		push	offset aCvariantarra_3 ; "CVariantArray::Copy()	: pVariant == NUL"...
		call	sub_6B18102E

loc_6B1A7436:				; CODE XREF: Ordinal1819+38j
		pop	ecx
		xor	eax, eax

loc_6B1A7439:				; CODE XREF: Ordinal1819+3Dj
		pop	edi
		pop	esi
		retn	4
Ordinal1819	endp

; Exported entry 1822.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1822(VARIANTARG *pvarg)
		public Ordinal1822
Ordinal1822	proc near		; CODE XREF: Ordinal1820+7p
					; Ordinal1821j
					; DATA XREF: ...

pvarg		= dword	ptr  4

		push	ebx
		mov	ebx, [esp+4+pvarg]
		test	ebx, ebx
		push	edi
		mov	edi, ecx
		jz	short loc_6B1A7473
		push	ebx
		call	Ordinal1842
		test	eax, eax
		pop	ecx
		jz	short loc_6B1A7473
		push	esi
		mov	ecx, edi
		call	Ordinal1816
		mov	edi, [edi+18h]
		mov	esi, ebx
		movsd
		movsd
		movsd
		push	ebx		; pvarg
		movsd
		call	ds:VariantInit
		xor	eax, eax
		inc	eax
		pop	esi
		jmp	short loc_6B1A7480
; ---------------------------------------------------------------------------

loc_6B1A7473:				; CODE XREF: Ordinal1822+Aj
					; Ordinal1822+15j
		push	offset aCvariantarrayA ; "CVariantArray::Attach() : pVariant ==	N"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax

loc_6B1A7480:				; CODE XREF: Ordinal1822+33j
		pop	edi
		pop	ebx
		retn	4
Ordinal1822	endp

; Exported entry 1824.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1824(VARIANTARG *pvarg)
		public Ordinal1824
Ordinal1824	proc near		; CODE XREF: Ordinal704+BEp
					; Ordinal1823j
					; DATA XREF: ...

pvarg		= dword	ptr  4

		push	ebx
		push	edi
		mov	edi, [esp+8+pvarg]
		test	edi, edi
		mov	ebx, ecx
		jnz	short loc_6B1A74A0
		push	offset aCvariantarrayD ; "CVariantArray::Detach() : pVariant ==	N"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B1A74C3
; ---------------------------------------------------------------------------

loc_6B1A74A0:				; CODE XREF: Ordinal1824+Aj
		push	esi
		push	edi		; pvarg
		call	ds:VariantClear
		mov	esi, [ebx+18h]
		movsd
		movsd
		movsd
		movsd
		push	dword ptr [ebx+18h] ; pvarg
		call	ds:VariantInit
		mov	ecx, ebx
		call	Ordinal1816
		xor	eax, eax
		inc	eax
		pop	esi

loc_6B1A74C3:				; CODE XREF: Ordinal1824+19j
		pop	edi
		pop	ebx
		retn	4
Ordinal1824	endp

; Exported entry 1826.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1826
Ordinal1826	proc near		; CODE XREF: Ordinal700+66p
					; Ordinal703+1Ep ...

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		test	edi, edi
		mov	esi, ecx
		jnz	short loc_6B1A74E3
		push	offset aCvariantarrayR ; "CVariantArray::Reference() : pVariant	="...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B1A74F0
; ---------------------------------------------------------------------------

loc_6B1A74E3:				; CODE XREF: Ordinal1826+Aj
		mov	ecx, esi
		call	Ordinal1816
		xor	eax, eax
		mov	[esi+18h], edi
		inc	eax

loc_6B1A74F0:				; CODE XREF: Ordinal1826+19j
		pop	edi
		pop	esi
		retn	4
Ordinal1826	endp

; Exported entry 1831.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1831(LONG rgIndices, VARIANTARG *pv)
		public Ordinal1831
Ordinal1831	proc near		; CODE XREF: Ordinal1830j
					; DATA XREF: .rdata:off_6B1BF428o

rgIndices	= dword	ptr  8
pv		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		cmp	[ebp+pv], 0
		push	esi
		mov	esi, ecx
		jz	short loc_6B1A7553
		call	Ordinal1843
		test	eax, eax
		jz	short loc_6B1A7553
		cmp	[ebp+rgIndices], 0
		jl	short loc_6B1A7553
		mov	ecx, esi
		call	Ordinal1844
		cmp	[ebp+rgIndices], eax
		jge	short loc_6B1A7553
		push	[ebp+pv]	; pvarg
		call	ds:VariantClear
		push	[ebp+pv]	; pv
		lea	eax, [ebp+rgIndices]
		push	eax		; rgIndices
		push	dword ptr [esi+18h]
		call	Ordinal1840
		pop	ecx
		push	eax		; psa
		call	ds:SafeArrayGetElement
		test	eax, eax
		jge	short loc_6B1A754E
		push	eax		; Args
		push	offset aCvariantarra_4 ; "CVariantArray::GetAt() : SafeArrayGetEl"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B1A755D
; ---------------------------------------------------------------------------

loc_6B1A754E:				; CODE XREF: Ordinal1831+49j
		xor	eax, eax
		inc	eax
		jmp	short loc_6B1A7560
; ---------------------------------------------------------------------------

loc_6B1A7553:				; CODE XREF: Ordinal1831+Aj
					; Ordinal1831+13j ...
		push	offset aCvariantarra_5 ; "CVariantArray::GetAt() : pValue == NULL"...
		call	sub_6B18102E

loc_6B1A755D:				; CODE XREF: Ordinal1831+57j
		pop	ecx
		xor	eax, eax

loc_6B1A7560:				; CODE XREF: Ordinal1831+5Cj
		pop	esi
		pop	ebp
		retn	8
Ordinal1831	endp

; Exported entry 1833.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1833(LONG rgIndices, void *pv)
		public Ordinal1833
Ordinal1833	proc near		; CODE XREF: Ordinal1829+Fp
					; Ordinal1832j
					; DATA XREF: ...

rgIndices	= dword	ptr  8
pv		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		cmp	[ebp+pv], 0
		push	esi
		mov	esi, ecx
		jz	short loc_6B1A75D0
		call	Ordinal1843
		test	eax, eax
		jz	short loc_6B1A75D0
		cmp	[ebp+rgIndices], 0
		jl	short loc_6B1A75D0
		mov	ecx, esi
		call	Ordinal1844
		mov	ecx, [ebp+rgIndices]
		cmp	ecx, eax
		jl	short loc_6B1A75A2
		inc	ecx
		push	ecx
		mov	ecx, esi
		call	Ordinal1845
		test	eax, eax
		jnz	short loc_6B1A75A2
		push	offset aCvariantarra_6 ; "CVariantArray::SetAt() : SetSize() ==	F"...
		jmp	short loc_6B1A75D5
; ---------------------------------------------------------------------------

loc_6B1A75A2:				; CODE XREF: Ordinal1833+27j
					; Ordinal1833+34j
		push	[ebp+pv]	; pv
		lea	eax, [ebp+rgIndices]
		push	eax		; rgIndices
		push	dword ptr [esi+18h]
		call	Ordinal1840
		pop	ecx
		push	eax		; psa
		call	ds:SafeArrayPutElement
		test	eax, eax
		jge	short loc_6B1A75CB
		push	eax		; Args
		push	offset aCvariantarra_7 ; "CVariantArray::SetAt() : SafeArrayPutEl"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B1A75DA
; ---------------------------------------------------------------------------

loc_6B1A75CB:				; CODE XREF: Ordinal1833+56j
		xor	eax, eax
		inc	eax
		jmp	short loc_6B1A75DD
; ---------------------------------------------------------------------------

loc_6B1A75D0:				; CODE XREF: Ordinal1833+Aj
					; Ordinal1833+13j ...
		push	offset aCvariantarra_8 ; "CVariantArray::SetAt() : pVariant == NU"...

loc_6B1A75D5:				; CODE XREF: Ordinal1833+3Bj
		call	sub_6B18102E

loc_6B1A75DA:				; CODE XREF: Ordinal1833+64j
		pop	ecx
		xor	eax, eax

loc_6B1A75DD:				; CODE XREF: Ordinal1833+69j
		pop	esi
		pop	ebp
		retn	8
Ordinal1833	endp

; Exported entry 1834.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1834(LONG rgIndices)
		public Ordinal1834
Ordinal1834	proc near		; CODE XREF: Ordinal704+81p
					; Ordinal700+99p ...

ppvData		= dword	ptr -4
rgIndices	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		call	Ordinal1843
		test	eax, eax
		jz	short loc_6B1A7637
		cmp	[ebp+rgIndices], 0
		jl	short loc_6B1A7637
		mov	ecx, esi
		call	Ordinal1844
		cmp	[ebp+rgIndices], eax
		jge	short loc_6B1A7637
		and	[ebp+ppvData], 0
		lea	eax, [ebp+ppvData]
		push	eax		; ppvData
		lea	eax, [ebp+rgIndices]
		push	eax		; rgIndices
		push	dword ptr [esi+18h]
		call	Ordinal1840
		pop	ecx
		push	eax		; psa
		call	ds:SafeArrayPtrOfIndex
		test	eax, eax
		jge	short loc_6B1A7632
		push	eax		; Args
		push	offset aCvariantarra_9 ; "CVariantArray::GetAt() : SafeArrayPtrOf"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B1A7641
; ---------------------------------------------------------------------------

loc_6B1A7632:				; CODE XREF: Ordinal1834+40j
		mov	eax, [ebp+ppvData]
		jmp	short loc_6B1A7644
; ---------------------------------------------------------------------------

loc_6B1A7637:				; CODE XREF: Ordinal1834+Ej
					; Ordinal1834+14j ...
		push	offset aCvariantarr_10 ; "CVariantArray::GetAt() : IsArray() ==	F"...
		call	sub_6B18102E

loc_6B1A7641:				; CODE XREF: Ordinal1834+4Ej
		pop	ecx
		xor	eax, eax

loc_6B1A7644:				; CODE XREF: Ordinal1834+53j
		pop	esi
		leave
		retn	4
Ordinal1834	endp

; Exported entry 1835.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1835
Ordinal1835	proc near		; CODE XREF: Ordinal704+5Bp
					; Ordinal700+7Ep ...
		push	dword ptr [ecx+18h]
		call	Ordinal1840
		pop	ecx
		push	eax		; psa
		call	ds:SafeArrayLock
		test	eax, eax
		jge	short loc_6B1A766D
		push	eax		; Args
		push	offset aCvariantarrayL ; "CVariantArray::Lock()	: SafeArrayLock()"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6B1A766D:				; CODE XREF: Ordinal1835+12j
		xor	eax, eax
		inc	eax
		retn
Ordinal1835	endp

; Exported entry 1836.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1836
Ordinal1836	proc near		; CODE XREF: Ordinal704+ADp
					; Ordinal700+B2p ...
		push	dword ptr [ecx+18h]
		call	Ordinal1840
		pop	ecx
		push	eax		; psa
		call	ds:SafeArrayUnlock
		test	eax, eax
		jge	short loc_6B1A7695
		push	eax		; Args
		push	offset aCvariantarrayU ; "CVariantArray::Unlock() : SafeArrayUnlo"...
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6B1A7695:				; CODE XREF: Ordinal1836+12j
		xor	eax, eax
		inc	eax
		retn
Ordinal1836	endp

; Exported entry 1837.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1837
Ordinal1837	proc near		; DATA XREF: .rdata:off_6B1BF428o
		jmp	Ordinal1838
Ordinal1837	endp

; Exported entry 1839.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1839
Ordinal1839	proc near		; DATA XREF: .rdata:off_6B1BF428o
		jmp	Ordinal1840
Ordinal1839	endp

; Exported entry 1841.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1841
Ordinal1841	proc near		; DATA XREF: .rdata:off_6B1BF428o
		jmp	Ordinal1842
Ordinal1841	endp

; Exported entry 1809.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1809
Ordinal1809	proc near		; CODE XREF: Ordinal704+DAp
					; Ordinal700:loc_6B18E272p ...
		lea	eax, [ecx+8]
		mov	dword ptr [ecx], offset	off_6B1B97F4
		mov	[ecx+18h], eax
		jmp	Ordinal1816
Ordinal1809	endp

; Exported entry 1811.
; Exported entry 1812.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1812(VARIANTARG *pvargSrc)
		public Ordinal1812
Ordinal1812	proc near		; CODE XREF: Ordinal1807+1Cp
					; DATA XREF: .rdata:off_6B1BF428o

pvargSrc	= dword	ptr  4

		mov	eax, [esp+pvargSrc] ; ccL35_1811
		push	esi
		mov	esi, ecx
		cmp	eax, [esi+18h]
		jz	short loc_6B1A76DA
		push	eax		; pvargSrc
		call	Ordinal1819
		test	eax, eax
		jnz	short loc_6B1A76DA
		push	offset aCvariantarrayO ; "CVariantArray::operator =() :	Copy() =="...
		call	sub_6B18102E
		pop	ecx

loc_6B1A76DA:				; CODE XREF: Ordinal1812+Aj
					; Ordinal1812+14j
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1812	endp

; Exported entry 1815.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1815
Ordinal1815	proc near		; CODE XREF: Ordinal704+48p
					; DATA XREF: .rdata:off_6B1BF428o

rgsabound	= SAFEARRAYBOUND ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		test	edi, edi
		mov	esi, ecx
		jge	short loc_6B1A76F7
		push	offset aCvariantarr_11 ; "CVariantArray::Create() : nSize < 0\n"
		jmp	short loc_6B1A771C
; ---------------------------------------------------------------------------

loc_6B1A76F7:				; CODE XREF: Ordinal1815+Ej
		mov	ecx, esi
		call	Ordinal1816
		and	[ebp+rgsabound.lLbound], 0
		lea	eax, [ebp+rgsabound]
		push	eax		; rgsabound
		push	1		; cDims
		push	0Ch		; vt
		mov	[ebp+rgsabound.cElements], edi
		call	ds:SafeArrayCreate
		test	eax, eax
		jnz	short loc_6B1A7726
		push	offset aCvariantarr_12 ; "CVariantArray::Create() : SafeArrayCrea"...

loc_6B1A771C:				; CODE XREF: Ordinal1815+15j
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B1A7737
; ---------------------------------------------------------------------------

loc_6B1A7726:				; CODE XREF: Ordinal1815+35j
		mov	ecx, [esi+18h]
		mov	word ptr [ecx],	200Ch
		mov	ecx, [esi+18h]
		mov	[ecx+8], eax
		xor	eax, eax
		inc	eax

loc_6B1A7737:				; CODE XREF: Ordinal1815+44j
		pop	edi
		pop	esi
		leave
		retn	4
Ordinal1815	endp

; Exported entry 1817.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1817
Ordinal1817	proc near		; CODE XREF: Ordinal1810+Dp
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+18h] ; pvargSrc
		call	Ordinal1819
		retn	4
Ordinal1817	endp

; Exported entry 1818.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1818
Ordinal1818	proc near		; DATA XREF: .rdata:off_6B1BF428o
		jmp	Ordinal1819
Ordinal1818	endp

; Exported entry 1820.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1820
Ordinal1820	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+18h] ; pvarg
		call	Ordinal1822
		retn	4
Ordinal1820	endp

; Exported entry 1821.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1821
Ordinal1821	proc near		; DATA XREF: .rdata:off_6B1BF428o
		jmp	Ordinal1822
Ordinal1821	endp

; Exported entry 1823.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1823
Ordinal1823	proc near		; DATA XREF: .rdata:off_6B1BF428o
		jmp	Ordinal1824
Ordinal1823	endp

; Exported entry 1825.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1825
Ordinal1825	proc near		; DATA XREF: .rdata:off_6B1BF428o
		jmp	Ordinal1826
Ordinal1825	endp

; Exported entry 1829.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1829(void *pv)
		public Ordinal1829
Ordinal1829	proc near		; CODE XREF: Ordinal1828j
					; DATA XREF: .rdata:off_6B1BF428o

pv		= dword	ptr  4

		push	esi
		push	[esp+4+pv]	; pv
		mov	esi, ecx
		call	Ordinal1844
		push	eax		; rgIndices
		mov	ecx, esi
		call	Ordinal1833
		pop	esi
		retn	4
Ordinal1829	endp

; Exported entry 1830.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1830
Ordinal1830	proc near		; DATA XREF: .rdata:off_6B1BF428o
		jmp	Ordinal1831
Ordinal1830	endp

; Exported entry 1832.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1832
Ordinal1832	proc near		; DATA XREF: .rdata:off_6B1BF428o
		jmp	Ordinal1833
Ordinal1832	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A7791(void *, char)
sub_6B1A7791	proc near		; DATA XREF: .rdata:off_6B1B97F4o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1809
		test	[esp+4+arg_0], 1
		jz	short loc_6B1A77A7
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A77A7:				; CODE XREF: sub_6B1A7791+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A7791	endp

; Exported entry 1807.
; Exported entry 1808.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1807(VARIANTARG *pvargSrc)
		public Ordinal1807
Ordinal1807	proc near		; DATA XREF: .rdata:off_6B1BF428o

pvargSrc	= dword	ptr  4

		push	esi		; ccL35_1807
		mov	esi, ecx
		lea	eax, [esi+8]
		push	eax		; pvarg
		mov	dword ptr [esi], offset	off_6B1B97F4
		mov	[esi+18h], eax
		call	ds:VariantInit
		push	[esp+4+pvargSrc] ; pvargSrc
		mov	ecx, esi
		call	Ordinal1812
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1807	endp

; Exported entry 1810.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1810
Ordinal1810	proc near		; CODE XREF: Ordinal1806+1Cp
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		cmp	[esp+4+arg_0], esi
		jz	short loc_6B1A77F5
		push	[esp+4+arg_0]
		call	Ordinal1817
		test	eax, eax
		jnz	short loc_6B1A77F5
		push	offset aCvariantarrayO ; "CVariantArray::operator =() :	Copy() =="...
		call	sub_6B18102E
		pop	ecx

loc_6B1A77F5:				; CODE XREF: Ordinal1810+7j
					; Ordinal1810+14j
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1810	endp

; Exported entry 1828.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1828
Ordinal1828	proc near		; DATA XREF: .rdata:off_6B1BF428o
		jmp	Ordinal1829
Ordinal1828	endp

; Exported entry 1806.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1806
Ordinal1806	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		lea	eax, [esi+8]
		push	eax		; pvarg
		mov	dword ptr [esi], offset	off_6B1B97F4
		mov	[esi+18h], eax
		call	ds:VariantInit
		push	[esp+4+arg_0]
		mov	ecx, esi
		call	Ordinal1810
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1806	endp

; Exported entry 1846.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1846
Ordinal1846	proc near		; CODE XREF: Ordinal705+10p
					; Ordinal706+Dp ...
		push	esi
		mov	esi, ecx
		lea	eax, [esi+8]
		push	eax		; pvarg
		mov	dword ptr [esi], offset	off_6B1B9CA4
		mov	[esi+18h], eax
		call	ds:VariantInit
		mov	eax, esi
		pop	esi
		retn
Ordinal1846	endp

; Exported entry 1814.
; Exported entry 1855.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1814
Ordinal1814	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0] ; ccL35_1814
		push	esi
		mov	esi, [ecx+18h]
		push	edi
		mov	edi, eax
		movsd
		movsd
		movsd
		movsd
		pop	edi
		pop	esi
		retn	4
Ordinal1814	endp

; Exported entry 1857.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1857
Ordinal1857	proc near		; CODE XREF: Ordinal1865+35p
					; Ordinal1867+1Dp ...
		push	esi
		mov	esi, ecx
		mov	eax, [esi+18h]
		cmp	word ptr [eax],	0
		jz	short loc_6B1A787B
		push	edi
		push	eax
		call	Ordinal1840
		mov	edi, eax
		test	edi, edi
		pop	ecx
		jz	short loc_6B1A787A

loc_6B1A786F:				; CODE XREF: Ordinal1857+23j
		push	edi		; psa
		call	ds:SafeArrayUnaccessData
		test	eax, eax
		jge	short loc_6B1A786F

loc_6B1A787A:				; CODE XREF: Ordinal1857+18j
		pop	edi

loc_6B1A787B:				; CODE XREF: Ordinal1857+Aj
		push	dword ptr [esi+18h] ; pvarg
		call	ds:VariantClear
		pop	esi
		retn
Ordinal1857	endp

; Exported entry 1865.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1865(VARIANTARG *pvarg)
		public Ordinal1865
Ordinal1865	proc near		; CODE XREF: Ordinal706+A3p
					; Ordinal1864j
					; DATA XREF: ...

pvarg		= dword	ptr  4

		push	ebx
		push	edi
		mov	edi, [esp+8+pvarg]
		test	edi, edi
		mov	ebx, ecx
		jnz	short loc_6B1A78A1
		push	offset aCvariantbuffer ; "CVariantBuffer::Detach() : pVariant == "...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B1A78C4
; ---------------------------------------------------------------------------

loc_6B1A78A1:				; CODE XREF: Ordinal1865+Aj
		push	esi
		push	edi		; pvarg
		call	ds:VariantClear
		mov	esi, [ebx+18h]
		movsd
		movsd
		movsd
		movsd
		push	dword ptr [ebx+18h] ; pvarg
		call	ds:VariantInit
		mov	ecx, ebx
		call	Ordinal1857
		xor	eax, eax
		inc	eax
		pop	esi

loc_6B1A78C4:				; CODE XREF: Ordinal1865+19j
		pop	edi
		pop	ebx
		retn	4
Ordinal1865	endp

; Exported entry 1867.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1867
Ordinal1867	proc near		; CODE XREF: Ordinal705+1Bp
					; Ordinal1866j
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		test	edi, edi
		mov	esi, ecx
		jnz	short loc_6B1A78E4
		push	offset aCvariantbuff_0 ; "CVariantBuffer::Reference() :	pVariant "...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B1A78F1
; ---------------------------------------------------------------------------

loc_6B1A78E4:				; CODE XREF: Ordinal1867+Aj
		mov	ecx, esi
		call	Ordinal1857
		xor	eax, eax
		mov	[esi+18h], edi
		inc	eax

loc_6B1A78F1:				; CODE XREF: Ordinal1867+19j
		pop	edi
		pop	esi
		retn	4
Ordinal1867	endp

; Exported entry 1827.
; Exported entry 1868.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1827
Ordinal1827	proc near		; DATA XREF: .rdata:off_6B1BF428o
		lea	eax, [ecx+8]	; ccL35_1827
		mov	[ecx+18h], eax
		retn
Ordinal1827	endp

; Exported entry 1872.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1872
Ordinal1872	proc near		; CODE XREF: Ordinal1873+Dp
					; Ordinal1860+Dp ...

arg_0		= dword	ptr  4

		cmp	[esp+arg_0], 0
		jnz	short loc_6B1A7912
		push	offset aCvariantbuff_1 ; "CVariantBuffer::IsVariantBuffer() : pVa"...
		call	sub_6B18102E
		pop	ecx

loc_6B1A790F:				; CODE XREF: Ordinal1872+21j
					; Ordinal1872+2Bj ...
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6B1A7912:				; CODE XREF: Ordinal1872+5j
		push	[esp+arg_0]
		call	Ordinal1838
		test	eax, eax
		pop	ecx
		jz	short loc_6B1A790F
		mov	cl, [eax]
		and	cl, 11h
		cmp	cl, 11h
		jnz	short loc_6B1A790F
		push	eax
		call	Ordinal1840
		test	eax, eax
		pop	ecx
		jz	short loc_6B1A790F
		cmp	word ptr [eax],	1
		jnz	short loc_6B1A790F
		cmp	dword ptr [eax+14h], 0
		jnz	short loc_6B1A790F
		xor	eax, eax
		inc	eax
		retn
Ordinal1872	endp

; Exported entry 1873.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1873
Ordinal1873	proc near		; CODE XREF: Ordinal705+27p
					; Ordinal1875+7p ...
		mov	eax, [ecx+18h]
		cmp	word ptr [eax],	0
		jnz	short loc_6B1A7951
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6B1A7951:				; CODE XREF: Ordinal1873+7j
		push	eax
		call	Ordinal1872
		pop	ecx
		retn
Ordinal1873	endp

; Exported entry 1874.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1874
Ordinal1874	proc near		; CODE XREF: Ordinal705+33p
					; Ordinal1798+6p ...
		push	dword ptr [ecx+18h]
		call	Ordinal1840
		test	eax, eax
		pop	ecx
		jnz	short loc_6B1A7974
		push	offset aCvariantbuff_2 ; "CVariantBuffer::GetSize() : pSa == NULL"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6B1A7974:				; CODE XREF: Ordinal1874+Bj
		mov	eax, [eax+10h]
		retn
Ordinal1874	endp

; Exported entry 1875.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1875
Ordinal1875	proc near		; CODE XREF: Ordinal705+5Cp
					; Ordinal706+58p ...

ppvData		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		call	Ordinal1873
		test	eax, eax
		jnz	short loc_6B1A7994
		push	offset aCvariantbuff_3 ; "CVariantBuffer::GetBuffer() :	IsBuffer("...
		call	sub_6B18102E
		jmp	short loc_6B1A79BC
; ---------------------------------------------------------------------------

loc_6B1A7994:				; CODE XREF: Ordinal1875+Ej
		and	[ebp+ppvData], 0
		lea	eax, [ebp+ppvData]
		push	eax		; ppvData
		push	dword ptr [esi+18h]
		call	Ordinal1840
		pop	ecx
		push	eax		; psa
		call	ds:SafeArrayAccessData
		test	eax, eax
		jge	short loc_6B1A79C1
		push	eax		; Args
		push	offset aCvariantbuff_4 ; "CVariantBuffer::GetBuffer() :	SafeArray"...
		call	sub_6B18102E
		pop	ecx

loc_6B1A79BC:				; CODE XREF: Ordinal1875+1Aj
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B1A79C4
; ---------------------------------------------------------------------------

loc_6B1A79C1:				; CODE XREF: Ordinal1875+36j
		mov	eax, [ebp+ppvData]

loc_6B1A79C4:				; CODE XREF: Ordinal1875+47j
		pop	esi
		leave
		retn
Ordinal1875	endp

; Exported entry 1876.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1876
Ordinal1876	proc near		; CODE XREF: Ordinal705+93p
					; Ordinal706+94p ...
		push	esi
		mov	esi, ecx
		call	Ordinal1873
		test	eax, eax
		jnz	short loc_6B1A79DF
		push	offset aCvariantbuff_5 ; "CVariantBuffer::ReleaseBuffer() : IsBuf"...
		call	sub_6B18102E
		jmp	short loc_6B1A79FF
; ---------------------------------------------------------------------------

loc_6B1A79DF:				; CODE XREF: Ordinal1876+Aj
		push	dword ptr [esi+18h]
		call	Ordinal1840
		pop	ecx
		push	eax		; psa
		call	ds:SafeArrayUnaccessData
		test	eax, eax
		jge	short loc_6B1A7A04
		push	eax		; Args
		push	offset aCvariantbuff_6 ; "CVariantBuffer::ReleaseBuffer() : SafeA"...
		call	sub_6B18102E
		pop	ecx

loc_6B1A79FF:				; CODE XREF: Ordinal1876+16j
		pop	ecx
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6B1A7A04:				; CODE XREF: Ordinal1876+2Aj
		xor	eax, eax
		inc	eax
		pop	esi
		retn
Ordinal1876	endp

; Exported entry 1850.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1850
Ordinal1850	proc near		; CODE XREF: Ordinal705+A8p
					; Ordinal706+BDp ...
		lea	eax, [ecx+8]
		mov	dword ptr [ecx], offset	off_6B1B9CA4
		mov	[ecx+18h], eax
		jmp	Ordinal1857
Ordinal1850	endp

; Exported entry 1856.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1856(ULONG cElements)
		public Ordinal1856
Ordinal1856	proc near		; CODE XREF: Ordinal706+45p
					; Ordinal1804+4Ap ...

cElements	= dword	ptr  4

		cmp	[esp+cElements], 0
		push	esi
		mov	esi, ecx
		jnz	short loc_6B1A7A2B
		push	offset aCvariantbuff_7 ; "CVariantBuffer::Create() : dwSize == 0\n"...
		jmp	short loc_6B1A7A49
; ---------------------------------------------------------------------------

loc_6B1A7A2B:				; CODE XREF: Ordinal1856+8j
		mov	ecx, esi
		call	Ordinal1857
		push	[esp+4+cElements] ; cElements
		push	0		; lLbound
		push	11h		; vt
		call	ds:SafeArrayCreateVector
		test	eax, eax
		jnz	short loc_6B1A7A53
		push	offset aCvariantbuff_8 ; "CVariantBuffer::Create() : SafeArrayCre"...

loc_6B1A7A49:				; CODE XREF: Ordinal1856+Fj
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6B1A7A64
; ---------------------------------------------------------------------------

loc_6B1A7A53:				; CODE XREF: Ordinal1856+28j
		mov	ecx, [esi+18h]
		mov	word ptr [ecx],	2011h
		mov	ecx, [esi+18h]
		mov	[ecx+8], eax
		xor	eax, eax
		inc	eax

loc_6B1A7A64:				; CODE XREF: Ordinal1856+37j
		pop	esi
		retn	4
Ordinal1856	endp

; Exported entry 1860.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1860(VARIANTARG *pvargSrc)
		public Ordinal1860
Ordinal1860	proc near		; CODE XREF: Ordinal1853+Dp
					; Ordinal1858+7p ...

pvargSrc	= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+pvargSrc]
		test	edi, edi
		mov	esi, ecx
		jz	short loc_6B1A7AA7
		push	edi
		call	Ordinal1872
		test	eax, eax
		pop	ecx
		jz	short loc_6B1A7AA7
		mov	ecx, esi
		call	Ordinal1857
		push	edi		; pvargSrc
		push	dword ptr [esi+18h] ; pvarDest
		call	ds:VariantCopyInd
		test	eax, eax
		jge	short loc_6B1A7AA2
		push	eax		; Args
		push	offset aCvariantbuff_9 ; "CVariantBuffer::Copy() : VariantCopyInd"...
		call	sub_6B18102E
		pop	ecx
		jmp	short loc_6B1A7AB1
; ---------------------------------------------------------------------------

loc_6B1A7AA2:				; CODE XREF: Ordinal1860+2Aj
		xor	eax, eax
		inc	eax
		jmp	short loc_6B1A7AB4
; ---------------------------------------------------------------------------

loc_6B1A7AA7:				; CODE XREF: Ordinal1860+Aj
					; Ordinal1860+15j
		push	offset aCvariantbuf_10 ; "CVariantBuffer::Copy() : pVariant == NU"...
		call	sub_6B18102E

loc_6B1A7AB1:				; CODE XREF: Ordinal1860+38j
		pop	ecx
		xor	eax, eax

loc_6B1A7AB4:				; CODE XREF: Ordinal1860+3Dj
		pop	edi
		pop	esi
		retn	4
Ordinal1860	endp

; Exported entry 1863.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1863(VARIANTARG *pvarg)
		public Ordinal1863
Ordinal1863	proc near		; CODE XREF: Ordinal1861+7p
					; Ordinal1862j
					; DATA XREF: ...

pvarg		= dword	ptr  4

		push	ebx
		mov	ebx, [esp+4+pvarg]
		test	ebx, ebx
		push	edi
		mov	edi, ecx
		jz	short loc_6B1A7AEE
		push	ebx
		call	Ordinal1872
		test	eax, eax
		pop	ecx
		jz	short loc_6B1A7AEE
		push	esi
		mov	ecx, edi
		call	Ordinal1857
		mov	edi, [edi+18h]
		mov	esi, ebx
		movsd
		movsd
		movsd
		push	ebx		; pvarg
		movsd
		call	ds:VariantInit
		xor	eax, eax
		inc	eax
		pop	esi
		jmp	short loc_6B1A7AFB
; ---------------------------------------------------------------------------

loc_6B1A7AEE:				; CODE XREF: Ordinal1863+Aj
					; Ordinal1863+15j
		push	offset aCvariantbuf_11 ; "CVariantBuffer::Attach() : pVariant == "...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax

loc_6B1A7AFB:				; CODE XREF: Ordinal1863+33j
		pop	edi
		pop	ebx
		retn	4
Ordinal1863	endp

; Exported entry 1864.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1864
Ordinal1864	proc near		; DATA XREF: .rdata:off_6B1BF428o
		jmp	Ordinal1865
Ordinal1864	endp

; Exported entry 1866.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1866
Ordinal1866	proc near		; DATA XREF: .rdata:off_6B1BF428o
		jmp	Ordinal1867
Ordinal1866	endp

; Exported entry 1869.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1869(void *Dst, int)
		public Ordinal1869
Ordinal1869	proc near		; DATA XREF: .rdata:off_6B1BF428o

Dst		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		mov	esi, ecx
		call	Ordinal1873
		test	eax, eax
		jz	short loc_6B1A7B67
		cmp	[esp+8+arg_4], 0
		jz	short loc_6B1A7B67
		cmp	[esp+8+Dst], 0
		jz	short loc_6B1A7B67
		mov	ecx, esi
		call	Ordinal1874
		mov	edi, eax
		cmp	edi, [esp+8+arg_4]
		jbe	short loc_6B1A7B3B
		push	offset aCvariantbuf_12 ; "CVariantBuffer::Read() : dwBufferSize	>"...
		jmp	short loc_6B1A7B6C
; ---------------------------------------------------------------------------

loc_6B1A7B3B:				; CODE XREF: Ordinal1869+28j
		mov	ecx, esi
		call	Ordinal1875
		test	eax, eax
		jnz	short loc_6B1A7B4D
		push	offset aCvariantbuf_13 ; "CVariantBuffer::Read() : GetBuffer() =="...
		jmp	short loc_6B1A7B6C
; ---------------------------------------------------------------------------

loc_6B1A7B4D:				; CODE XREF: Ordinal1869+3Aj
		push	edi		; Size
		push	eax		; Src
		push	[esp+10h+Dst]	; Dst
		call	memcpy
		add	esp, 0Ch
		mov	ecx, esi
		call	Ordinal1876
		xor	eax, eax
		inc	eax
		jmp	short loc_6B1A7B74
; ---------------------------------------------------------------------------

loc_6B1A7B67:				; CODE XREF: Ordinal1869+Bj
					; Ordinal1869+12j ...
		push	offset aCvariantbuf_14 ; "CVariantBuffer::Read() : IsBuffer() == "...

loc_6B1A7B6C:				; CODE XREF: Ordinal1869+2Fj
					; Ordinal1869+41j
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax

loc_6B1A7B74:				; CODE XREF: Ordinal1869+5Bj
		pop	edi
		pop	esi
		retn	8
Ordinal1869	endp

; Exported entry 1870.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1870(void *Src, size_t cElements)
		public Ordinal1870
Ordinal1870	proc near		; DATA XREF: .rdata:off_6B1BF428o

Src		= dword	ptr  8
cElements	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		cmp	[ebp+cElements], 0
		push	esi
		mov	esi, ecx
		jz	short loc_6B1A7BD2
		cmp	[ebp+Src], 0
		jz	short loc_6B1A7BD2
		call	Ordinal1857
		push	[ebp+cElements]	; cElements
		mov	ecx, esi
		call	Ordinal1856
		test	eax, eax
		jnz	short loc_6B1A7BA5
		push	offset aCvariantbuf_15 ; "CVariantBuffer::Write() : Create() ==	F"...
		jmp	short loc_6B1A7BD7
; ---------------------------------------------------------------------------

loc_6B1A7BA5:				; CODE XREF: Ordinal1870+23j
		mov	ecx, esi
		call	Ordinal1875
		test	eax, eax
		jnz	short loc_6B1A7BB7
		push	offset aCvariantbuf_16 ; "CVariantBuffer::Write() : GetBuffer()	="...
		jmp	short loc_6B1A7BD7
; ---------------------------------------------------------------------------

loc_6B1A7BB7:				; CODE XREF: Ordinal1870+35j
		push	[ebp+cElements]	; Size
		push	[ebp+Src]	; Src
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch
		mov	ecx, esi
		call	Ordinal1876
		xor	eax, eax
		inc	eax
		jmp	short loc_6B1A7BDF
; ---------------------------------------------------------------------------

loc_6B1A7BD2:				; CODE XREF: Ordinal1870+Aj
					; Ordinal1870+10j
		push	offset aCvariantbuf_17 ; "CVariantBuffer::Write() : IsBuffer() =="...

loc_6B1A7BD7:				; CODE XREF: Ordinal1870+2Aj
					; Ordinal1870+3Cj
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax

loc_6B1A7BDF:				; CODE XREF: Ordinal1870+57j
		pop	esi
		pop	ebp
		retn	8
Ordinal1870	endp

; Exported entry 1871.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1871
Ordinal1871	proc near		; DATA XREF: .rdata:off_6B1BF428o
		jmp	Ordinal1872
Ordinal1871	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A7BE9(void *, char)
sub_6B1A7BE9	proc near		; DATA XREF: .rdata:off_6B1B9CA4o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1850
		test	[esp+4+arg_0], 1
		jz	short loc_6B1A7BFF
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A7BFF:				; CODE XREF: sub_6B1A7BE9+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A7BE9	endp

; Exported entry 1852.
; Exported entry 1853.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1853(VARIANTARG *pvargSrc)
		public Ordinal1853
Ordinal1853	proc near		; CODE XREF: Ordinal1848+1Cp
					; DATA XREF: .rdata:off_6B1BF428o

pvargSrc	= dword	ptr  4

		mov	eax, [esp+pvargSrc] ; ccL35_1852
		push	esi
		mov	esi, ecx
		cmp	eax, [esi+18h]
		jz	short loc_6B1A7C26
		push	eax		; pvargSrc
		call	Ordinal1860
		test	eax, eax
		jnz	short loc_6B1A7C26
		push	offset aCvariantbuf_18 ; "CVariantBuffer::operator =() : Copy()	="...
		call	sub_6B18102E
		pop	ecx

loc_6B1A7C26:				; CODE XREF: Ordinal1853+Aj
					; Ordinal1853+14j
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1853	endp

; Exported entry 1858.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1858
Ordinal1858	proc near		; CODE XREF: Ordinal1851+Dp
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+18h] ; pvargSrc
		call	Ordinal1860
		retn	4
Ordinal1858	endp

; Exported entry 1859.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1859
Ordinal1859	proc near		; DATA XREF: .rdata:off_6B1BF428o
		jmp	Ordinal1860
Ordinal1859	endp

; Exported entry 1861.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1861
Ordinal1861	proc near		; CODE XREF: Ordinal1804+91p
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+18h] ; pvarg
		call	Ordinal1863
		retn	4
Ordinal1861	endp

; Exported entry 1862.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1862
Ordinal1862	proc near		; DATA XREF: .rdata:off_6B1BF428o
		jmp	Ordinal1863
Ordinal1862	endp

; Exported entry 1851.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1851
Ordinal1851	proc near		; CODE XREF: Ordinal1847+1Cp
					; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		cmp	[esp+4+arg_0], esi
		jz	short loc_6B1A7C75
		push	[esp+4+arg_0]
		call	Ordinal1858
		test	eax, eax
		jnz	short loc_6B1A7C75
		push	offset aCvariantbuf_18 ; "CVariantBuffer::operator =() : Copy()	="...
		call	sub_6B18102E
		pop	ecx

loc_6B1A7C75:				; CODE XREF: Ordinal1851+7j
					; Ordinal1851+14j
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1851	endp

; Exported entry 1847.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1847
Ordinal1847	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		lea	eax, [esi+8]
		push	eax		; pvarg
		mov	dword ptr [esi], offset	off_6B1B9CA4
		mov	[esi+18h], eax
		call	ds:VariantInit
		push	[esp+4+arg_0]
		mov	ecx, esi
		call	Ordinal1851
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1847	endp

; Exported entry 1848.
; Exported entry 1849.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1848(VARIANTARG *pvargSrc)
		public Ordinal1848
Ordinal1848	proc near		; DATA XREF: .rdata:off_6B1BF428o

pvargSrc	= dword	ptr  4

		push	esi		; ccL35_1848
		mov	esi, ecx
		lea	eax, [esi+8]
		push	eax		; pvarg
		mov	dword ptr [esi], offset	off_6B1B9CA4
		mov	[esi+18h], eax
		call	ds:VariantInit
		push	[esp+4+pvargSrc] ; pvargSrc
		mov	ecx, esi
		call	Ordinal1853
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1848	endp

; Exported entry 1895.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1895
Ordinal1895	proc near		; DATA XREF: .rdata:off_6B1BF428o
		push	0Ch
		pop	eax
		retn
Ordinal1895	endp

; Exported entry 1896.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1896
Ordinal1896	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 0Ch
		jnb	short loc_6B1A7CE9
		test	eax, eax
		jl	short loc_6B1A7CE9
		push	offset aCversioninfoGe ; "CVersionInfo::GetFieldName() : nIndex	<"...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short locret_6B1A7CF0
; ---------------------------------------------------------------------------

loc_6B1A7CE9:				; CODE XREF: Ordinal1896+7j
					; Ordinal1896+Bj
		lea	eax, [eax+eax*2+0Fh]
		mov	eax, [ecx+eax*4]

locret_6B1A7CF0:			; CODE XREF: Ordinal1896+1Aj
		retn	4
Ordinal1896	endp

; Exported entry 1884.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1884
Ordinal1884	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+4Ch]
		retn
Ordinal1884	endp

; Exported entry 1886.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1886
Ordinal1886	proc near		; CODE XREF: Ordinal905+F7p
					; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+64h]
		retn
Ordinal1886	endp

; Exported entry 1887.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1887
Ordinal1887	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+70h]
		retn
Ordinal1887	endp

; Exported entry 1888.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1888
Ordinal1888	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+7Ch]
		retn
Ordinal1888	endp

; Exported entry 1890.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1890
Ordinal1890	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+94h]
		retn
Ordinal1890	endp

; Exported entry 1891.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1891
Ordinal1891	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+0A0h]
		retn
Ordinal1891	endp

; Exported entry 1892.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1892
Ordinal1892	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+0ACh]
		retn
Ordinal1892	endp

; Exported entry 1692.
; Exported entry 1893.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1893
Ordinal1893	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+0B8h]	; ccL35_1692
		retn
Ordinal1893	endp

; Exported entry 1894.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1894
Ordinal1894	proc near		; DATA XREF: .rdata:off_6B1BF428o
		mov	eax, [ecx+0C4h]
		retn
Ordinal1894	endp

; Exported entry 1897.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1897
Ordinal1897	proc near		; DATA XREF: .rdata:off_6B1BF428o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 0Ch
		jnb	short loc_6B1A7D42
		test	eax, eax
		jl	short loc_6B1A7D42
		push	offset aCversioninfo_0 ; "CVersionInfo::GetFieldValue()	: nIndex "...
		call	sub_6B18102E
		pop	ecx
		xor	eax, eax
		jmp	short locret_6B1A7D49
; ---------------------------------------------------------------------------

loc_6B1A7D42:				; CODE XREF: Ordinal1897+7j
					; Ordinal1897+Bj
		lea	eax, [eax+eax*2]
		mov	eax, [ecx+eax*4+40h]

locret_6B1A7D49:			; CODE XREF: Ordinal1897+1Aj
		retn	4
Ordinal1897	endp

; Exported entry 1878.

; =============== S U B	R O U T	I N E =======================================


; void __thiscall Ordinal1878(void *)
		public Ordinal1878
Ordinal1878	proc near		; CODE XREF: sub_6B1A7D8C+3p
					; DATA XREF: Ordinal1880o ...
		mov	dword ptr [ecx], offset	off_6B1BA248
		add	ecx, 8
		jmp	sub_6B1899B5
Ordinal1878	endp

; Exported entry 1880.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1880
Ordinal1880	proc near		; CODE XREF: Ordinal905+15Bp
					; sub_6B1A7DDC+3p
					; DATA XREF: ...
		push	offset Ordinal1878 ; void (__thiscall *)(void *)
		push	0Ch		; int
		mov	dword ptr [ecx], offset	off_6B1BA24C
		push	0Ch		; unsigned int
		add	ecx, 38h
		push	ecx		; void *
		call	unknown_libname_16 ; Microsoft VisualC 2-10/net	runtime
		retn
Ordinal1880	endp

; Exported entry 1877.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1877
Ordinal1877	proc near		; DATA XREF: Ordinal1879+6o
					; .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+4], 0
		lea	ecx, [esi+8]
		mov	dword ptr [esi], offset	off_6B1BA248
		call	sub_6B181879
		mov	eax, esi
		pop	esi
		retn
Ordinal1877	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A7D8C(void *, char)
sub_6B1A7D8C	proc near		; DATA XREF: .rdata:off_6B1BA248o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1878
		test	[esp+4+arg_0], 1
		jz	short loc_6B1A7DA2
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A7DA2:				; CODE XREF: sub_6B1A7D8C+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A7D8C	endp

; Exported entry 1879.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1879
Ordinal1879	proc near		; CODE XREF: Ordinal905+AFp
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		push	offset Ordinal1878 ; void (__thiscall *)(void *)
		push	offset Ordinal1877 ; int
		mov	esi, ecx
		push	0Ch		; int
		push	0Ch		; unsigned int
		lea	eax, [esi+38h]
		push	eax		; void *
		mov	dword ptr [esi], offset	off_6B1BA24C
		call	unknown_libname_17 ; Microsoft VisualC 2-10/net	runtime
		push	34h		; Size
		lea	eax, [esi+4]
		push	0		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		retn
Ordinal1879	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A7DDC(void *, char)
sub_6B1A7DDC	proc near		; DATA XREF: .rdata:off_6B1BA24Co

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1880
		test	[esp+4+arg_0], 1
		jz	short loc_6B1A7DF2
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A7DF2:				; CODE XREF: sub_6B1A7DDC+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A7DDC	endp

; Exported entry 1898.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1898(__int16, __int16, int, LPCVOID pBlock, int)
		public Ordinal1898
Ordinal1898	proc near		; CODE XREF: Ordinal1881+15Cp
					; DATA XREF: .rdata:off_6B1BF428o

var_50		= byte ptr -50h
puLen		= dword	ptr -30h
lpSubBlock	= dword	ptr -2Ch
Src		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= word ptr  8
arg_4		= word ptr  0Ch
arg_8		= dword	ptr  10h
pBlock		= dword	ptr  14h
arg_10		= dword	ptr  18h

		mov	eax, offset unknown_libname_145	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 4Ch
		mov	eax, ___security_cookie
		mov	ecx, [ebp+arg_10]
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		call	sub_6B18175E
		push	offset aCversioninfoLo ; "CVersionInfo::LoadBlock()"
		lea	ecx, [ebp+var_50]
		call	Ordinal1089
		xor	esi, esi
		lea	ecx, [ebp+lpSubBlock]
		mov	[ebp+var_4], esi
		call	sub_6B181879
		push	[ebp+arg_8]
		movzx	eax, [ebp+arg_4]
		push	eax
		movzx	eax, [ebp+arg_0]
		push	eax		; Args
		lea	eax, [ebp+lpSubBlock]
		push	offset aStringfileinfo ; "\\StringFileInfo\\%04x%04x\\%s"
		push	eax		; int
		mov	byte ptr [ebp+var_4], 2
		mov	[ebp+Src], esi
		mov	[ebp+puLen], esi
		call	sub_6B18F0EE
		mov	edi, [ebp+lpSubBlock]
		add	esp, 14h
		lea	eax, [ebp+puLen]
		push	eax		; puLen
		lea	eax, [ebp+Src]
		push	eax		; lplpBuffer
		push	edi		; lpSubBlock
		push	[ebp+pBlock]	; pBlock
		call	VerQueryValueA
		test	eax, eax
		jz	short loc_6B1A7EBF
		cmp	[ebp+puLen], esi
		jz	short loc_6B1A7EBF
		push	[ebp+Src]	; Src
		mov	ecx, [ebp+arg_10]
		call	sub_6B181EA9
		lea	ecx, [edi-10h]
		call	sub_6B18163D

loc_6B1A7E8D:				; DATA XREF: sub_6B1A7ED4+3Do
					; sub_6B1A7F17+4Fo
		lea	ecx, [ebp+var_50]
		call	Ordinal1635
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		inc	esi

loc_6B1A7E9C:				; CODE XREF: Ordinal1898+DAj
		lea	ecx, [ebp+var_50]
		call	Ordinal1090
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	14h
; ---------------------------------------------------------------------------

loc_6B1A7EBF:				; CODE XREF: Ordinal1898+7Bj
					; Ordinal1898+80j
		push	offset aCversioninfo_1 ; "CVersionInfo::LoadBlock() : VerQueryVal"...
		call	sub_6B181006
		pop	ecx
		lea	ecx, [edi-10h]
		call	sub_6B18163D
		jmp	short loc_6B1A7E9C
Ordinal1898	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A7ED4	proc near		; DATA XREF: .rdata:6B1BD878o
		push	13h
		lea	ecx, [ebp-50h]
		call	Ordinal1095
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-50h]
		call	Ordinal1101
		mov	ecx, [ebp-54h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-50h]
		call	Ordinal1103
		lea	ecx, [ebp-50h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A7E8D
		retn
sub_6B1A7ED4	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A7F17	proc near		; DATA XREF: .rdata:6B1BD888o
		push	15h
		lea	ecx, [ebp-50h]
		call	Ordinal1095
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-50h]
		call	Ordinal1101
		mov	eax, [ebp-58h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-50h]
		call	Ordinal1103
		lea	ecx, [ebp-50h]
		call	Ordinal1106
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6B18102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6B1A7E8D
		retn
sub_6B1A7F17	endp

; Exported entry 1881.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1881(unsigned int Filename)
		public Ordinal1881
Ordinal1881	proc near		; CODE XREF: Ordinal905+C3p
					; DATA XREF: .rdata:off_6B1BF428o

var_68		= byte ptr -68h
var_24		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
pBlock		= dword	ptr -0Ch
lpBuffer	= dword	ptr -8
dwHandle	= dword	ptr -4
Filename	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 68h
		push	ebx
		push	esi
		push	edi
		mov	ebx, ecx
		push	34h		; Size
		xor	edi, edi
		lea	eax, [ebx+4]
		push	edi		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		lea	esi, [ebx+40h]

loc_6B1A7F8B:				; CODE XREF: Ordinal1881+38j
		mov	eax, ds:off_6B1BA0C0[edi]
		mov	ecx, esi
		mov	[esi-4], eax
		call	sub_6B18175E
		add	edi, 4
		add	esi, 0Ch
		cmp	edi, 30h
		jb	short loc_6B1A7F8B
		lea	ecx, [ebp+var_68]
		call	Ordinal1487
		push	[ebp+Filename]	; Filename
		lea	ecx, [ebp+var_68]
		call	Ordinal1489
		test	al, al
		jnz	short loc_6B1A7FCF
		push	offset aCversioninfo_2 ; "CVersionInfo::Load() : path.SplitPath()"...
		call	sub_6B18102E
		pop	ecx
		xor	esi, esi
		jmp	loc_6B1A8111
; ---------------------------------------------------------------------------

loc_6B1A7FCF:				; CODE XREF: Ordinal1881+4Fj
		lea	eax, [ebp+dwHandle]
		xor	esi, esi
		push	eax		; lpdwHandle
		lea	ecx, [ebp+var_68]
		mov	[ebp+dwHandle],	esi
		call	Ordinal1649
		push	eax		; lptstrFilename
		call	GetFileVersionInfoSizeA
		mov	edi, eax
		cmp	edi, esi
		jnz	short loc_6B1A7FFC
		push	offset aCversioninfo_3 ; "CVersionInfo::Load() : GetFileVersionIn"...
		call	sub_6B18102E
		pop	ecx
		jmp	loc_6B1A8111
; ---------------------------------------------------------------------------

loc_6B1A7FFC:				; CODE XREF: Ordinal1881+7Ej
		lea	ecx, [ebp+var_24]
		call	Ordinal1187
		push	edi		; Args
		lea	ecx, [ebp+var_24]
		call	Ordinal1196
		mov	esi, eax
		test	esi, esi
		mov	[ebp+pBlock], esi
		jnz	short loc_6B1A8026
		push	offset aCversioninfo_4 ; "CVersionInfo::Load() : mem.NewAlloc()	="...
		call	sub_6B18102E
		pop	ecx
		jmp	loc_6B1A8109
; ---------------------------------------------------------------------------

loc_6B1A8026:				; CODE XREF: Ordinal1881+A8j
		and	[ebp+var_10], 0
		push	esi		; lpData
		push	edi		; dwLen
		push	[ebp+dwHandle]	; dwHandle
		lea	ecx, [ebp+var_68]
		call	Ordinal1649
		push	eax		; lptstrFilename
		call	GetFileVersionInfoA
		test	eax, eax
		jnz	short loc_6B1A804B
		push	offset aCversioninfo_5 ; "CVersionInfo::Load() : GetFileVersionIn"...
		jmp	loc_6B1A8100
; ---------------------------------------------------------------------------

loc_6B1A804B:				; CODE XREF: Ordinal1881+D3j
		and	[ebp+Filename],	0
		and	[ebp+lpBuffer],	0
		lea	eax, [ebp+Filename]
		push	eax		; puLen
		lea	eax, [ebp+lpBuffer]
		push	eax		; lplpBuffer
		push	offset SubBlock	; "\\"
		push	esi		; pBlock
		call	VerQueryValueA
		test	eax, eax
		jz	loc_6B1A80FB
		cmp	[ebp+Filename],	34h
		jnz	loc_6B1A80FB
		mov	esi, [ebp+lpBuffer]
		push	0Dh
		pop	ecx
		lea	eax, [ebp+Filename]
		push	eax		; puLen
		lea	eax, [ebp+var_14]
		push	eax		; lplpBuffer
		push	offset aVarfileinfoTra ; "\\VarFileInfo\\Translation"
		push	[ebp+pBlock]	; pBlock
		lea	edi, [ebx+4]
		rep movsd
		and	[ebp+Filename],	0
		call	VerQueryValueA
		test	eax, eax
		jz	short loc_6B1A80FB
		test	[ebp+Filename],	0FFFFFFFCh
		jbe	short loc_6B1A80E7
		push	0Ch
		lea	esi, [ebx+3Ch]
		pop	edi

loc_6B1A80AF:				; CODE XREF: Ordinal1881+177j
		lea	eax, [esi+4]
		push	eax		; int
		mov	eax, [ebp+var_14]
		push	[ebp+pBlock]	; pBlock
		xor	ecx, ecx
		mov	cx, [eax+2]
		push	dword ptr [esi]	; int
		movzx	eax, word ptr [eax]
		push	ecx		; __int16
		push	eax		; __int16
		mov	ecx, ebx
		call	Ordinal1898
		test	eax, eax
		jnz	short loc_6B1A80DF
		push	dword ptr [esi]	; Args
		push	offset aCversioninfo_6 ; "CVersionInfo::Load() : LoadBlock(%s) =="...
		call	sub_6B181006
		pop	ecx
		pop	ecx

loc_6B1A80DF:				; CODE XREF: Ordinal1881+163j
		add	esi, 0Ch
		dec	edi
		jnz	short loc_6B1A80AF
		jmp	short loc_6B1A80F2
; ---------------------------------------------------------------------------

loc_6B1A80E7:				; CODE XREF: Ordinal1881+13Bj
		push	offset aCversioninfo_7 ; "CVersionInfo::Load() : (nSize	/ sizeof("...
		call	sub_6B181006
		pop	ecx

loc_6B1A80F2:				; CODE XREF: Ordinal1881+179j
		mov	[ebp+var_10], 1
		jmp	short loc_6B1A8106
; ---------------------------------------------------------------------------

loc_6B1A80FB:				; CODE XREF: Ordinal1881+FCj
					; Ordinal1881+106j ...
		push	offset aCversioninfo_8 ; "CVersionInfo::Load() : VerQueryValue() "...

loc_6B1A8100:				; CODE XREF: Ordinal1881+DAj
		call	sub_6B18102E
		pop	ecx

loc_6B1A8106:				; CODE XREF: Ordinal1881+18Dj
		mov	esi, [ebp+var_10]

loc_6B1A8109:				; CODE XREF: Ordinal1881+B5j
		lea	ecx, [ebp+var_24]
		call	Ordinal1189

loc_6B1A8111:				; CODE XREF: Ordinal1881+5Ej
					; Ordinal1881+8Bj
		lea	ecx, [ebp+var_68]
		call	Ordinal1488
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal1881	endp ; sp-analysis failed

; Exported entry 1900.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1900
Ordinal1900	proc near		; CODE XREF: Ordinal1260+9j
					; sub_6B1A81B8+3p
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6B1BA450
		jmp	Ordinal1221
Ordinal1900	endp

; Exported entry 1904.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1904
Ordinal1904	proc near		; CODE XREF: Ordinal1899+12p
					; Ordinal1903+5p
					; DATA XREF: ...

arg_0		= byte ptr  4

		cmp	[esp+arg_0], 0
		push	esi
		mov	esi, ecx
		jz	short loc_6B1A8140
		call	Ordinal1230
		test	al, al
		jz	short loc_6B1A8199

loc_6B1A8140:				; CODE XREF: Ordinal1904+8j
		cmp	[esp+4+arg_0], 0
		push	ebx
		mov	bl, 1
		jnz	short loc_6B1A8157
		xor	eax, eax
		mov	[esi+8], eax
		mov	[esi+0Ch], eax
		mov	[esi+10h], eax
		jmp	short loc_6B1A8196
; ---------------------------------------------------------------------------

loc_6B1A8157:				; CODE XREF: Ordinal1904+1Bj
		push	offset aWtsquerysessio ; "WTSQuerySessionInformationA"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6B1A816C
		xor	bl, bl

loc_6B1A816C:				; CODE XREF: Ordinal1904+3Bj
		push	offset aWtsquerysess_0 ; "WTSQuerySessionInformationW"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+0Ch], eax
		jnz	short loc_6B1A8181
		xor	bl, bl

loc_6B1A8181:				; CODE XREF: Ordinal1904+50j
		push	offset aWtsfreememory ;	"WTSFreeMemory"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+10h], eax
		jnz	short loc_6B1A8196
		xor	bl, bl

loc_6B1A8196:				; CODE XREF: Ordinal1904+28j
					; Ordinal1904+65j
		mov	al, bl
		pop	ebx

loc_6B1A8199:				; CODE XREF: Ordinal1904+11j
		pop	esi
		retn	4
Ordinal1904	endp

; Exported entry 1899.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1899
Ordinal1899	proc near		; CODE XREF: Ordinal1259+10p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	Ordinal1219
		push	0
		mov	ecx, esi
		mov	dword ptr [esi], offset	off_6B1BA450
		call	Ordinal1904
		mov	eax, esi
		pop	esi
		retn
Ordinal1899	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A81B8(void *, char)
sub_6B1A81B8	proc near		; DATA XREF: .rdata:off_6B1BA450o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1900
		test	[esp+4+arg_0], 1
		jz	short loc_6B1A81CE
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A81CE:				; CODE XREF: sub_6B1A81B8+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A81B8	endp

; Exported entry 1901.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1901(LPCSTR Args)
		public Ordinal1901
Ordinal1901	proc near		; CODE XREF: Ordinal1905+Fp
					; DATA XREF: .rdata:off_6B1BF428o

Args		= dword	ptr  4

		push	esi
		push	[esp+4+Args]	; Args
		mov	esi, ecx
		call	Ordinal1226
		test	al, al
		jz	short loc_6B1A81EF
		mov	ecx, esi
		call	Ordinal1230
		test	al, al
		jnz	short loc_6B1A81F3

loc_6B1A81EF:				; CODE XREF: Ordinal1901+Ej
		xor	al, al
		jmp	short loc_6B1A8238
; ---------------------------------------------------------------------------

loc_6B1A81F3:				; CODE XREF: Ordinal1901+19j
		push	ebx
		push	offset aWtsquerysessio ; "WTSQuerySessionInformationA"
		mov	ecx, esi
		mov	bl, 1
		call	Ordinal1229
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6B1A820B
		xor	bl, bl

loc_6B1A820B:				; CODE XREF: Ordinal1901+33j
		push	offset aWtsquerysess_0 ; "WTSQuerySessionInformationW"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+0Ch], eax
		jnz	short loc_6B1A8220
		xor	bl, bl

loc_6B1A8220:				; CODE XREF: Ordinal1901+48j
		push	offset aWtsfreememory ;	"WTSFreeMemory"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+10h], eax
		jnz	short loc_6B1A8235
		xor	bl, bl

loc_6B1A8235:				; CODE XREF: Ordinal1901+5Dj
		mov	al, bl
		pop	ebx

loc_6B1A8238:				; CODE XREF: Ordinal1901+1Dj
		pop	esi
		retn	4
Ordinal1901	endp

; Exported entry 1902.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1902(LPCSTR Args, DWORD dwFlags)
		public Ordinal1902
Ordinal1902	proc near		; DATA XREF: .rdata:off_6B1BF428o

Args		= dword	ptr  4
dwFlags		= dword	ptr  8

		push	esi
		push	[esp+4+dwFlags]	; dwFlags
		mov	esi, ecx
		push	[esp+8+Args]	; Args
		call	Ordinal1227
		test	al, al
		jz	short loc_6B1A825B
		mov	ecx, esi
		call	Ordinal1230
		test	al, al
		jnz	short loc_6B1A825F

loc_6B1A825B:				; CODE XREF: Ordinal1902+12j
		xor	al, al
		jmp	short loc_6B1A82A4
; ---------------------------------------------------------------------------

loc_6B1A825F:				; CODE XREF: Ordinal1902+1Dj
		push	ebx
		push	offset aWtsquerysessio ; "WTSQuerySessionInformationA"
		mov	ecx, esi
		mov	bl, 1
		call	Ordinal1229
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6B1A8277
		xor	bl, bl

loc_6B1A8277:				; CODE XREF: Ordinal1902+37j
		push	offset aWtsquerysess_0 ; "WTSQuerySessionInformationW"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+0Ch], eax
		jnz	short loc_6B1A828C
		xor	bl, bl

loc_6B1A828C:				; CODE XREF: Ordinal1902+4Cj
		push	offset aWtsfreememory ;	"WTSFreeMemory"
		mov	ecx, esi
		call	Ordinal1229
		test	eax, eax
		mov	[esi+10h], eax
		jnz	short loc_6B1A82A1
		xor	bl, bl

loc_6B1A82A1:				; CODE XREF: Ordinal1902+61j
		mov	al, bl
		pop	ebx

loc_6B1A82A4:				; CODE XREF: Ordinal1902+21j
		pop	esi
		retn	8
Ordinal1902	endp

; Exported entry 1903.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1903
Ordinal1903	proc near		; CODE XREF: Ordinal1906j
					; Ordinal1905+3p
					; DATA XREF: ...
		push	esi
		push	0
		mov	esi, ecx
		call	Ordinal1904
		mov	ecx, esi
		pop	esi
		jmp	Ordinal1228
Ordinal1903	endp

; Exported entry 1906.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1906
Ordinal1906	proc near		; DATA XREF: .rdata:off_6B1BF428o
		jmp	Ordinal1903
Ordinal1906	endp

; Exported entry 1905.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1905
Ordinal1905	proc near		; CODE XREF: Ordinal1277+33p
					; DATA XREF: .rdata:off_6B1BF428o
		push	esi
		mov	esi, ecx
		call	Ordinal1903
		push	offset aWtsapi32_dll ; "WTSAPI32.DLL"
		mov	ecx, esi
		call	Ordinal1901
		pop	esi
		retn
Ordinal1905	endp

; ---------------------------------------------------------------------------
		mov	eax, offset FreeSid
		jmp	$+5

loc_6B1A82DF:				; CODE XREF: .text:6B1A82F5j
					; .text:6B1A82FFj ...
		push	ecx
		push	edx
		push	eax
		push	offset ADVAPI32_dll_import_table
		call	sub_6B1A844A
		pop	edx
		pop	ecx
		jmp	eax
; ---------------------------------------------------------------------------
		mov	eax, offset SetSecurityDescriptorDacl
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset AddAccessAllowedAce
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset InitializeAcl
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset InitializeSecurityDescriptor
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset GetLengthSid
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset AllocateAndInitializeSid
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset DeregisterEventSource
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset ReportEventA
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset LookupAccountNameA
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset GetUserNameA
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset RegisterEventSourceA
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset EqualSid
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset GetTokenInformation
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset OpenProcessToken
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset OpenThreadToken
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset __imp_CheckTokenMembership
		jmp	loc_6B1A82DF
; [00000006 BYTES: COLLAPSED FUNCTION CheckTokenMembership. PRESS KEYPAD "+" TO	EXPAND]
; ---------------------------------------------------------------------------
		mov	eax, offset RegCloseKey
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset RegDeleteValueA
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset RegQueryValueExA
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset RegSetValueExA
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset RegEnumValueA
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset RegEnumKeyExA
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset RegCreateKeyExA
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset RegOpenKeyExA
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset CloseServiceHandle
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset ChangeServiceConfig2A
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset CreateServiceA
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset OpenSCManagerA
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset DeleteService
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset OpenServiceA
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset SetServiceStatus
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset RegisterServiceCtrlHandlerA
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset RegisterServiceCtrlHandlerExA
		jmp	loc_6B1A82DF
; ---------------------------------------------------------------------------
		mov	eax, offset StartServiceCtrlDispatcherA
		jmp	loc_6B1A82DF

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6B1A844A(int, ULONG_PTR Arguments)
sub_6B1A844A	proc near		; CODE XREF: .text:6B1A82E7p

var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
lpLibFileName	= dword	ptr -38h
var_34		= dword	ptr -34h
lpProcName	= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
Target		= dword	ptr -18h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Arguments	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 44h
		push	ebx
		mov	eax, offset __ImageBase
		push	esi
		mov	esi, [ebp+arg_0]
		mov	edx, [esi+8]
		mov	ecx, [esi+4]
		mov	ebx, [esi+0Ch]
		add	edx, eax
		push	edi
		mov	edi, [esi+14h]
		add	edi, eax
		add	ecx, eax
		mov	[ebp+Target], edx
		mov	edx, [esi+10h]
		add	ebx, eax
		add	edx, eax
		mov	eax, [esi+1Ch]
		mov	[ebp+var_4], eax
		mov	eax, [ebp+Arguments]
		mov	[ebp+lpLibFileName], ecx
		xor	ecx, ecx
		mov	[ebp+var_C], edi
		mov	[ebp+var_3C], eax
		xor	eax, eax
		test	dword ptr [esi], 1
		lea	edi, [ebp+lpProcName]
		mov	[ebp+var_44], 24h
		mov	[ebp+var_40], esi
		mov	[ebp+var_34], ecx
		stosd
		mov	[ebp+var_2C], ecx
		mov	[ebp+var_28], ecx
		mov	[ebp+var_24], ecx
		jnz	short loc_6B1A84CE
		lea	eax, [ebp+var_44]
		mov	[ebp+Arguments], eax
		lea	eax, [ebp+Arguments]
		push	eax		; lpArguments
		push	1		; nNumberOfArguments
		push	ecx		; dwExceptionFlags
		push	0C06D0057h	; dwExceptionCode
		call	ds:RaiseException
		xor	eax, eax
		jmp	loc_6B1A8686
; ---------------------------------------------------------------------------

loc_6B1A84CE:				; CODE XREF: sub_6B1A844A+63j
		mov	eax, [ebp+Target]
		mov	edi, [eax]
		mov	eax, [ebp+Arguments]
		sub	eax, ebx
		sar	eax, 2
		shl	eax, 2
		add	edx, eax
		mov	edx, [edx]
		mov	[ebp+arg_0], eax
		mov	eax, edx
		shr	eax, 1Fh
		not	eax
		and	eax, 1
		mov	[ebp+var_34], eax
		jz	short loc_6B1A84FF
		lea	eax, word_6B180002[edx]
		mov	[ebp+lpProcName], eax
		jmp	short loc_6B1A8508
; ---------------------------------------------------------------------------

loc_6B1A84FF:				; CODE XREF: sub_6B1A844A+A8j
		and	edx, 0FFFFh
		mov	[ebp+lpProcName], edx

loc_6B1A8508:				; CODE XREF: sub_6B1A844A+B3j
		mov	eax, dword_6B1C1344
		xor	ebx, ebx
		cmp	eax, ecx
		jz	short loc_6B1A8524
		lea	edx, [ebp+var_44]
		push	edx
		push	ecx
		call	eax ; dword_6B1C1344
		mov	ebx, eax
		test	ebx, ebx
		jnz	loc_6B1A8669

loc_6B1A8524:				; CODE XREF: sub_6B1A844A+C7j
		test	edi, edi
		jnz	loc_6B1A85CE
		mov	eax, dword_6B1C1344
		test	eax, eax
		jz	short loc_6B1A8543
		lea	ecx, [ebp+var_44]
		push	ecx
		push	1
		call	eax ; dword_6B1C1344
		mov	edi, eax
		test	edi, edi
		jnz	short loc_6B1A8593

loc_6B1A8543:				; CODE XREF: sub_6B1A844A+E9j
		push	[ebp+lpLibFileName] ; lpLibFileName
		call	ds:LoadLibraryA
		mov	edi, eax
		test	edi, edi
		jnz	short loc_6B1A8593
		call	ds:GetLastError
		mov	[ebp+var_24], eax
		mov	eax, dword_6B1C1340
		test	eax, eax
		jz	short loc_6B1A8572
		lea	ecx, [ebp+var_44]
		push	ecx
		push	3
		call	eax ; dword_6B1C1340
		mov	edi, eax
		test	edi, edi
		jnz	short loc_6B1A8593

loc_6B1A8572:				; CODE XREF: sub_6B1A844A+118j
		lea	eax, [ebp+var_44]
		mov	[ebp+Arguments], eax
		lea	eax, [ebp+Arguments]
		push	eax		; lpArguments
		push	1		; nNumberOfArguments
		push	0		; dwExceptionFlags
		push	0C06D007Eh	; dwExceptionCode
		call	ds:RaiseException
		mov	eax, [ebp+var_28]
		jmp	loc_6B1A8686
; ---------------------------------------------------------------------------

loc_6B1A8593:				; CODE XREF: sub_6B1A844A+F7j
					; sub_6B1A844A+106j ...
		push	edi		; Value
		push	[ebp+Target]	; Target
		call	ds:InterlockedExchange
		cmp	eax, edi
		jz	short loc_6B1A85C7
		cmp	dword ptr [esi+18h], 0
		jz	short loc_6B1A85CE
		push	8		; uBytes
		push	40h		; uFlags
		call	ds:LocalAlloc
		test	eax, eax
		jz	short loc_6B1A85CE
		mov	[eax+4], esi
		mov	ecx, dword_6B1C133C
		mov	[eax], ecx
		mov	dword_6B1C133C,	eax
		jmp	short loc_6B1A85CE
; ---------------------------------------------------------------------------

loc_6B1A85C7:				; CODE XREF: sub_6B1A844A+155j
		push	edi		; hLibModule
		call	ds:FreeLibrary

loc_6B1A85CE:				; CODE XREF: sub_6B1A844A+DCj
					; sub_6B1A844A+15Bj ...
		mov	eax, dword_6B1C1344
		test	eax, eax
		mov	[ebp+var_2C], edi
		jz	short loc_6B1A85E4
		lea	ecx, [ebp+var_44]
		push	ecx
		push	2
		call	eax ; dword_6B1C1344
		mov	ebx, eax

loc_6B1A85E4:				; CODE XREF: sub_6B1A844A+18Ej
		test	ebx, ebx
		jnz	short loc_6B1A8664
		cmp	[esi+14h], ebx
		jz	short loc_6B1A8619
		cmp	[esi+1Ch], ebx
		jz	short loc_6B1A8619
		mov	eax, [edi+3Ch]
		add	eax, edi
		cmp	dword ptr [eax], 4550h
		jnz	short loc_6B1A8619
		mov	ecx, [ebp+var_4]
		cmp	[eax+8], ecx
		jnz	short loc_6B1A8619
		cmp	edi, [eax+34h]
		jnz	short loc_6B1A8619
		mov	eax, [ebp+var_C]
		mov	ecx, [ebp+arg_0]
		mov	ebx, [ecx+eax]
		test	ebx, ebx
		jnz	short loc_6B1A8664

loc_6B1A8619:				; CODE XREF: sub_6B1A844A+1A1j
					; sub_6B1A844A+1A6j ...
		push	[ebp+lpProcName] ; lpProcName
		push	edi		; hModule
		call	ds:GetProcAddress
		mov	ebx, eax
		test	ebx, ebx
		jnz	short loc_6B1A8664
		call	ds:GetLastError
		mov	[ebp+var_24], eax
		mov	eax, dword_6B1C1340
		test	eax, eax
		jz	short loc_6B1A8645
		lea	ecx, [ebp+var_44]
		push	ecx
		push	4
		call	eax ; dword_6B1C1340
		mov	ebx, eax

loc_6B1A8645:				; CODE XREF: sub_6B1A844A+1EFj
		test	ebx, ebx
		jnz	short loc_6B1A8664
		lea	eax, [ebp+var_44]
		mov	[ebp+arg_0], eax
		lea	eax, [ebp+arg_0]
		push	eax		; lpArguments
		push	1		; nNumberOfArguments
		push	ebx		; dwExceptionFlags
		push	0C06D007Fh	; dwExceptionCode
		call	ds:RaiseException
		mov	ebx, [ebp+var_28]

loc_6B1A8664:				; CODE XREF: sub_6B1A844A+19Cj
					; sub_6B1A844A+1CDj ...
		mov	eax, [ebp+Arguments]
		mov	[eax], ebx

loc_6B1A8669:				; CODE XREF: sub_6B1A844A+D4j
		mov	eax, dword_6B1C1344
		test	eax, eax
		jz	short loc_6B1A8684
		and	[ebp+var_24], 0
		lea	ecx, [ebp+var_44]
		push	ecx
		push	5
		mov	[ebp+var_2C], edi
		mov	[ebp+var_28], ebx
		call	eax ; dword_6B1C1344

loc_6B1A8684:				; CODE XREF: sub_6B1A844A+226j
		mov	eax, ebx

loc_6B1A8686:				; CODE XREF: sub_6B1A844A+7Fj
					; sub_6B1A844A+144j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
sub_6B1A844A	endp

; [00000025 BYTES: COLLAPSED FUNCTION operator new(uint). PRESS	KEYPAD "+" TO EXPAND]
; [00000005 BYTES: COLLAPSED FUNCTION operator new(uint). PRESS	KEYPAD "+" TO EXPAND]
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_6B1A9BFC

loc_6B1A86B7:				; CODE XREF: sub_6B1A9BFC-14BFj
		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_6B1A86CA
		push	eax		; Memory
		call	free
		and	dword ptr [esi], 0
		pop	ecx

loc_6B1A86CA:				; CODE XREF: sub_6B1A9BFC-153Ej
		and	dword ptr [esi+4], 0
		and	dword ptr [esi+8], 0
		pop	esi
		retn
; END OF FUNCTION CHUNK	FOR sub_6B1A9BFC

; =============== S U B	R O U T	I N E =======================================


sub_6B1A86D4	proc near		; CODE XREF: sub_6B1A8742+34p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jl	short loc_6B1A86E9
		cmp	eax, [ecx+4]
		jge	short loc_6B1A86E9
		mov	ecx, [ecx]
		lea	eax, [ecx+eax*4]
		retn	4
; ---------------------------------------------------------------------------

loc_6B1A86E9:				; CODE XREF: sub_6B1A86D4+6j
					; sub_6B1A86D4+Bj
		push	0		; lpArguments
		push	0		; nNumberOfArguments
		push	1		; dwExceptionFlags
		push	0C000008Ch	; dwExceptionCode
		call	ds:RaiseException
		int	3		; Trap to Debugger
sub_6B1A86D4	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


sub_6B1A86FB	proc near		; CODE XREF: sub_6B1A8742+42p
		push	esi
		mov	esi, ecx
		cmp	byte ptr [esi+4], 0
		jz	short loc_6B1A8710
		push	dword ptr [esi]	; lpCriticalSection
		call	ds:LeaveCriticalSection
		mov	byte ptr [esi+4], 0

loc_6B1A8710:				; CODE XREF: sub_6B1A86FB+7j
		pop	esi
		retn
sub_6B1A86FB	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A8712	proc near		; CODE XREF: sub_6B1A8790+16p
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+18h]	; Dst
		call	sub_6B181146
		xor	eax, eax
		mov	[esi+30h], eax
		mov	[esi+34h], eax
		mov	[esi+38h], eax
		mov	eax, esi
		pop	esi
		retn
sub_6B1A8712	endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_6B1A9BFC

loc_6B1A872C:				; CODE XREF: sub_6B1A9BFC+5j
		push	esi
		mov	esi, ecx
		lea	eax, [esi+18h]
		push	eax		; lpCriticalSection
		call	ds:DeleteCriticalSection
		lea	ecx, [esi+30h]
		pop	esi
		jmp	loc_6B1A86B7
; END OF FUNCTION CHUNK	FOR sub_6B1A9BFC

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1A8742	proc near		; CODE XREF: sub_6B181508+Cp
					; sub_6B181508+2Ep

var_8		= dword	ptr -8
var_4		= byte ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	esi
		mov	esi, ecx
		lea	eax, [esi+18h]
		push	eax		; lpCriticalSection
		mov	[ebp+var_8], eax
		call	ds:EnterCriticalSection
		mov	eax, [esi+34h]
		mov	ecx, [ebp+arg_0]
		cmp	ecx, eax
		mov	[ebp+var_4], 1
		jg	short loc_6B1A877F
		test	ecx, ecx
		jl	short loc_6B1A877F
		cmp	ecx, eax
		jnz	short loc_6B1A8772
		mov	esi, [esi+8]
		jmp	short loc_6B1A8781
; ---------------------------------------------------------------------------

loc_6B1A8772:				; CODE XREF: sub_6B1A8742+29j
		push	ecx
		lea	ecx, [esi+30h]
		call	sub_6B1A86D4
		mov	esi, [eax]
		jmp	short loc_6B1A8781
; ---------------------------------------------------------------------------

loc_6B1A877F:				; CODE XREF: sub_6B1A8742+21j
					; sub_6B1A8742+25j
		xor	esi, esi

loc_6B1A8781:				; CODE XREF: sub_6B1A8742+2Ej
					; sub_6B1A8742+3Bj
		lea	ecx, [ebp+var_8]
		call	sub_6B1A86FB
		mov	eax, esi
		pop	esi
		leave
		retn	4
sub_6B1A8742	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame fpd=78h

sub_6B1A8790	proc near		; CODE XREF: sub_6B1A9B99+5p

Dst		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_88		= dword	ptr -88h
var_4		= dword	ptr -4

		push	ebp
		lea	ebp, [esp-78h]
		sub	esp, 98h
		mov	eax, ___security_cookie
		push	esi
		mov	[ebp+78h+var_4], eax
		mov	esi, ecx
		call	sub_6B1A8712
		mov	eax, offset __ImageBase
		push	94h		; Size
		mov	[esi+8], eax
		mov	[esi+4], eax
		lea	eax, [ebp+78h+Dst]
		push	0		; Val
		push	eax		; Dst
		mov	dword ptr [esi], 3Ch
		mov	byte ptr [esi+0Ch], 0
		call	memset
		add	esp, 0Ch
		lea	eax, [ebp+78h+Dst]
		push	eax		; lpVersionInformation
		mov	[ebp+78h+Dst], 94h
		call	ds:GetVersionExA
		cmp	[ebp+78h+var_88], 2
		jnz	short loc_6B1A87F2
		cmp	[ebp+78h+var_94], 5
		jb	short loc_6B1A880A
		jmp	short loc_6B1A8806
; ---------------------------------------------------------------------------

loc_6B1A87F2:				; CODE XREF: sub_6B1A8790+58j
		cmp	[ebp+78h+var_88], 1
		jnz	short loc_6B1A880A
		cmp	[ebp+78h+var_94], 4
		ja	short loc_6B1A8806
		jnz	short loc_6B1A880A
		cmp	[ebp+78h+var_90], 0
		jbe	short loc_6B1A880A

loc_6B1A8806:				; CODE XREF: sub_6B1A8790+60j
					; sub_6B1A8790+6Cj
		mov	byte ptr [esi+0Ch], 1

loc_6B1A880A:				; CODE XREF: sub_6B1A8790+5Ej
					; sub_6B1A8790+66j ...
		lea	ecx, [esi+18h]
		mov	dword ptr [esi+10h], 710h
		mov	dword ptr [esi+14h], offset dword_6B1BA4F0
		call	sub_6B18115A
		test	eax, eax
		jge	short loc_6B1A882B
		mov	byte_6B1C125C, 1

loc_6B1A882B:				; CODE XREF: sub_6B1A8790+92j
		mov	ecx, [ebp+78h+var_4]
		mov	eax, esi
		pop	esi
		call	unknown_libname_14 ; Microsoft VisualC 2-10/net	runtime
		add	ebp, 78h
		leave
		retn
sub_6B1A8790	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A883B	proc near		; CODE XREF: sub_6B1A88B6+3p
					; sub_6B1A9C06+5j
		cmp	byte ptr [ecx+8], 0
		mov	dword ptr [ecx], offset	off_6B1BA500
		jz	short locret_6B1A8855
		mov	ecx, [ecx+4]
		test	ecx, ecx
		jz	short locret_6B1A8855
		push	ecx		; hHeap
		call	ds:HeapDestroy

locret_6B1A8855:			; CODE XREF: sub_6B1A883B+Aj
					; sub_6B1A883B+11j
		retn
sub_6B1A883B	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6B1A8856(SIZE_T dwBytes)
sub_6B1A8856	proc near		; DATA XREF: .rdata:off_6B1BA500o

dwBytes		= dword	ptr  4

		push	[esp+dwBytes]	; dwBytes
		push	0		; dwFlags
		push	dword ptr [ecx+4] ; hHeap
		call	ds:HeapAlloc
		retn	4
sub_6B1A8856	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6B1A8868(LPVOID lpMem)
sub_6B1A8868	proc near		; DATA XREF: .rdata:6B1BA504o

lpMem		= dword	ptr  4

		cmp	[esp+lpMem], 0
		jz	short locret_6B1A887E
		push	[esp+lpMem]	; lpMem
		push	0		; dwFlags
		push	dword ptr [ecx+4] ; hHeap
		call	ds:HeapFree

locret_6B1A887E:			; CODE XREF: sub_6B1A8868+5j
		retn	4
sub_6B1A8868	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6B1A8881(LPVOID lpMem, int)
sub_6B1A8881	proc near		; DATA XREF: .rdata:6B1BA508o

lpMem		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+lpMem], 0
		push	[esp+arg_4]
		jnz	short loc_6B1A8892
		mov	eax, [ecx]
		call	dword ptr [eax]
		jmp	short locret_6B1A88A1
; ---------------------------------------------------------------------------

loc_6B1A8892:				; CODE XREF: sub_6B1A8881+9j
		push	[esp+4+lpMem]	; lpMem
		push	0		; dwFlags
		push	dword ptr [ecx+4] ; hHeap
		call	ds:HeapReAlloc

locret_6B1A88A1:			; CODE XREF: sub_6B1A8881+Fj
		retn	8
sub_6B1A8881	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6B1A88A4(LPCVOID lpMem)
sub_6B1A88A4	proc near		; DATA XREF: .rdata:6B1BA50Co

lpMem		= dword	ptr  4

		push	[esp+lpMem]	; lpMem
		push	0		; dwFlags
		push	dword ptr [ecx+4] ; hHeap
		call	ds:HeapSize
		retn	4
sub_6B1A88A4	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A88B6(void *, char)
sub_6B1A88B6	proc near		; DATA XREF: .rdata:6B1BA510o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	sub_6B1A883B
		test	[esp+4+arg_0], 1
		jz	short loc_6B1A88CC
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A88CC:				; CODE XREF: sub_6B1A88B6+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A88B6	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A88D2	proc near		; CODE XREF: sub_6B1A9BD7+Ap

arg_0		= dword	ptr  4

		mov	eax, ecx
		mov	ecx, [esp+arg_0]
		mov	[eax+4], ecx
		mov	dword ptr [eax], offset	off_6B1BA514
		xor	ecx, ecx
		mov	[eax+8], ecx
		mov	dword ptr [eax+14h], 2
		mov	[eax+0Ch], ecx
		mov	[eax+10h], ecx
		mov	[eax+18h], cx
		mov	[eax+1Ah], cx
		mov	[eax+8], eax
		retn	4
sub_6B1A88D2	endp

; [00000008 BYTES: COLLAPSED FUNCTION Concurrency::details::EventWaitNode::Reset(void).	PRESS KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A8909	proc near		; DATA XREF: .rdata:6B1BA520o
		xor	edx, edx
		lea	eax, [ecx+14h]
		inc	edx
		lock xadd [eax], edx
		lea	eax, [ecx+8]
		retn
sub_6B1A8909	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A8917	proc near		; DATA XREF: .rdata:6B1BA524o
		mov	eax, ecx
		retn
sub_6B1A8917	endp

; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_13. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A8937	proc near		; DATA XREF: .rdata:off_6B1BA514o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		add	esi, 8
		and	esi, 0FFFFFFF8h
		mov	edx, esi
		imul	edx, [esp+4+arg_4]
		push	edi
		mov	edi, ecx
		mov	ecx, [edi+4]
		mov	eax, [ecx]
		add	edx, 10h
		push	edx
		call	dword ptr [eax]
		test	eax, eax
		jz	short loc_6B1A896C
		dec	esi
		and	dword ptr [eax+4], 0
		mov	[eax], edi
		mov	dword ptr [eax+0Ch], 1
		mov	[eax+8], esi

loc_6B1A896C:				; CODE XREF: sub_6B1A8937+22j
		pop	edi
		pop	esi
		retn	8
sub_6B1A8937	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A8971	proc near		; DATA XREF: .rdata:6B1BA51Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [ecx+4]
		mov	eax, [ecx]
		push	esi
		mov	esi, [esp+4+arg_4]
		add	esi, 8
		and	esi, 0FFFFFFF8h
		mov	edx, esi
		imul	edx, [esp+4+arg_8]
		add	edx, 10h
		push	edx
		push	[esp+8+arg_0]
		call	dword ptr [eax+8]
		test	eax, eax
		jz	short loc_6B1A899B
		dec	esi
		mov	[eax+8], esi

loc_6B1A899B:				; CODE XREF: sub_6B1A8971+24j
		pop	esi
		retn	0Ch
sub_6B1A8971	endp

; [00000026 BYTES: COLLAPSED FUNCTION __onexit.	PRESS KEYPAD "+" TO EXPAND]
; [00000012 BYTES: COLLAPSED FUNCTION _atexit. PRESS KEYPAD "+"	TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION malloc. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION free. PRESS KEYPAD "+" TO	EXPAND]
; [0000003B BYTES: COLLAPSED FUNCTION __SEH_prolog. PRESS KEYPAD "+" TO	EXPAND]
; [00000011 BYTES: COLLAPSED FUNCTION __SEH_epilog. PRESS KEYPAD "+" TO	EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _except_handler3.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [0000003D BYTES: COLLAPSED FUNCTION __alloca_probe. PRESS KEYPAD "+" TO EXPAND]
; [00000030 BYTES: COLLAPSED FUNCTION _report_failure. PRESS KEYPAD "+"	TO EXPAND]
		align 2
; [0000000E BYTES: COLLAPSED FUNCTION unknown_libname_14. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A8ABC(void *, char)
sub_6B1A8ABC	proc near		; DATA XREF: .rdata:off_6B1BA540o

arg_0		= byte ptr  4

		push	ebx
		mov	bl, [esp+4+arg_0]
		test	bl, 2
		push	esi
		mov	esi, ecx
		jz	short loc_6B1A8AED
		push	edi
		push	offset ??1type_info@@UAE@XZ ; void (__thiscall *)(void *)
		lea	edi, [esi-4]
		push	dword ptr [edi]	; int
		push	0Ch		; unsigned int
		push	esi		; void *
		call	unknown_libname_16 ; Microsoft VisualC 2-10/net	runtime
		test	bl, 1
		jz	short loc_6B1A8AE8
		push	edi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A8AE8:				; CODE XREF: sub_6B1A8ABC+23j
		mov	eax, edi
		pop	edi
		jmp	short loc_6B1A8B02
; ---------------------------------------------------------------------------

loc_6B1A8AED:				; CODE XREF: sub_6B1A8ABC+Bj
		mov	ecx, esi	; void *
		call	??1type_info@@UAE@XZ ; type_info::~type_info(void)
		test	bl, 1
		jz	short loc_6B1A8B00
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6B1A8B00:				; CODE XREF: sub_6B1A8ABC+3Bj
		mov	eax, esi

loc_6B1A8B02:				; CODE XREF: sub_6B1A8ABC+2Fj
		pop	esi
		pop	ebx
		retn	4
sub_6B1A8ABC	endp

; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CxxThrowException. PRESS	KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION memset. PRESS KEYPAD "+" TO EXPAND]
; ---------------------------------------------------------------------------
; [00000006 BYTES: COLLAPSED CHUNK OF FUNCTION unknown_libname_18. PRESS KEYPAD	"+" TO EXPAND]
		align 10h
; [0000001F BYTES: COLLAPSED FUNCTION __EH_prolog. PRESS KEYPAD	"+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION operator delete(void *). PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION memcpy. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION strlen. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION exception::exception(exception const &). PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _purecall. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION exception::what(void). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION memcmp. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION operator delete[](void *). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION __security_error_handler.	PRESS KEYPAD "+" TO EXPAND]
; [00000058 BYTES: COLLAPSED FUNCTION __ArrayUnwind(void *,uint,int,void (*)(void *)). PRESS KEYPAD "+"	TO EXPAND]
; ---------------------------------------------------------------------------
; [00000006 BYTES: COLLAPSED CHUNK OF FUNCTION __ArrayUnwind(void *,uint,int,void (*)(void *)).	PRESS KEYPAD "+" TO EXPAND]
; [00000060 BYTES: COLLAPSED FUNCTION unknown_libname_16. PRESS	KEYPAD "+" TO EXPAND]
; [00000062 BYTES: COLLAPSED FUNCTION unknown_libname_17. PRESS	KEYPAD "+" TO EXPAND]
; [000000BE BYTES: COLLAPSED FUNCTION _CRT_INIT(x,x,x).	PRESS KEYPAD "+" TO EXPAND]
; [000000E4 BYTES: COLLAPSED FUNCTION DllEntryPoint. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _callnewh. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit. PRESS KEYPAD	"+" TO EXPAND]
; [00000066 BYTES: COLLAPSED FUNCTION ___security_init_cookie. PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION type_info::~type_info(void). PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION terminate(void). PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _initterm. PRESS KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6B1A8EBC	proc near		; CODE XREF: _CRT_INIT(x,x,x)+4Fp

var_1C		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h

		push	0Ch
		push	offset stru_6B1BA588
		call	__SEH_prolog
		mov	[ebp+var_1C], offset dword_6B1BA8EC

loc_6B1A8ECF:				; CODE XREF: sub_6B1A8EBC+3Cj
		cmp	[ebp+var_1C], offset dword_6B1BA8EC
		jnb	short loc_6B1A8EFA
		and	[ebp+ms_exc.disabled], 0
		mov	eax, [ebp+var_1C]
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_6B1A8EF0
		call	eax
		jmp	short loc_6B1A8EF0
; ---------------------------------------------------------------------------

loc_6B1A8EE9:				; DATA XREF: .rdata:stru_6B1BA588o
		xor	eax, eax	; Exception filter 0 for function 6B1A8EBC
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_6B1A8EED:				; DATA XREF: .rdata:stru_6B1BA588o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 6B1A8EBC

loc_6B1A8EF0:				; CODE XREF: sub_6B1A8EBC+27j
					; sub_6B1A8EBC+2Bj
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		add	[ebp+var_1C], 4
		jmp	short loc_6B1A8ECF
; ---------------------------------------------------------------------------

loc_6B1A8EFA:				; CODE XREF: sub_6B1A8EBC+1Aj
		call	__SEH_epilog
		retn
sub_6B1A8EBC	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl sub_6B1A8F00()
sub_6B1A8F00	proc near		; DATA XREF: _CRT_INIT(x,x,x)+54o

var_1C		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h

		push	0Ch
		push	offset stru_6B1BA598
		call	__SEH_prolog
		mov	[ebp+var_1C], offset dword_6B1BA8F4

loc_6B1A8F13:				; CODE XREF: sub_6B1A8F00+3Cj
		cmp	[ebp+var_1C], offset dword_6B1BA8F4
		jnb	short loc_6B1A8F3E
		and	[ebp+ms_exc.disabled], 0
		mov	eax, [ebp+var_1C]
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_6B1A8F34
		call	eax
		jmp	short loc_6B1A8F34
; ---------------------------------------------------------------------------

loc_6B1A8F2D:				; DATA XREF: .rdata:stru_6B1BA598o
		xor	eax, eax	; Exception filter 0 for function 6B1A8F00
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_6B1A8F31:				; DATA XREF: .rdata:stru_6B1BA598o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 6B1A8F00

loc_6B1A8F34:				; CODE XREF: sub_6B1A8F00+27j
					; sub_6B1A8F00+2Bj
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		add	[ebp+var_1C], 4
		jmp	short loc_6B1A8F13
; ---------------------------------------------------------------------------

loc_6B1A8F3E:				; CODE XREF: sub_6B1A8F00+1Aj
		call	__SEH_epilog
		retn
sub_6B1A8F00	endp

; [00000006 BYTES: COLLAPSED FUNCTION __CppXcptFilter. PRESS KEYPAD "+"	TO EXPAND]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B1A8F50	proc near		; CODE XREF: sub_6B18E06F+18p
					; Ordinal774+2Fp ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	0
		push	eax
		call	off_6B1C1160
sub_6B1A8F50	endp

; ---------------------------------------------------------------------------
		retn	4

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6B1A8F60	proc near		; CODE XREF: sub_6B1A8F50+7p
					; DATA XREF: .data:off_6B1C1160o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 10h
		mov	eax, [esp+10h+arg_0]
		mov	ecx, [esp+10h+arg_4]
		push	offset dword_6B1BD8E0
		lea	edx, [esp+14h+var_10]
		push	edx
		mov	[esp+18h+var_10], offset off_6B1BA5A8
		mov	[esp+18h+var_C], eax
		mov	[esp+18h+var_8], ecx
		mov	[esp+18h+var_4], 0
		call	_CxxThrowException
sub_6B1A8F60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B1A8FA0	proc near		; DATA XREF: .rdata:6B1BD8D4o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6B1BA5A8
		mov	ecx, [eax+4]
		mov	[esi+4], ecx
		mov	edx, [eax+8]
		mov	eax, edx
		test	eax, eax
		mov	[esi+8], edx
		mov	dword ptr [esi+0Ch], 0
		jz	short loc_6B1A8FCC
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+4]

loc_6B1A8FCC:				; CODE XREF: sub_6B1A8FA0+24j
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A8FA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6B1A8FE0	proc near		; DATA XREF: .rdata:6B1BD8E4o
		push	esi
		mov	esi, ecx
		mov	eax, [esi+8]
		test	eax, eax
		mov	dword ptr [esi], offset	off_6B1BA5A8
		jz	short loc_6B1A8FF6
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+8]

loc_6B1A8FF6:				; CODE XREF: sub_6B1A8FE0+Ej
		mov	esi, [esi+0Ch]
		test	esi, esi
		jz	short loc_6B1A9004
		push	esi		; hMem
		call	ds:LocalFree

loc_6B1A9004:				; CODE XREF: sub_6B1A8FE0+1Bj
		pop	esi
		retn
sub_6B1A8FE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6B1A9010(void *, char)
sub_6B1A9010	proc near		; DATA XREF: .rdata:off_6B1BA5A8o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		mov	eax, [esi+8]
		test	eax, eax
		mov	dword ptr [esi], offset	off_6B1BA5A8
		jz	short loc_6B1A9026
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+8]

loc_6B1A9026:				; CODE XREF: sub_6B1A9010+Ej
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_6B1A9034
		push	eax		; hMem
		call	ds:LocalFree

loc_6B1A9034:				; CODE XREF: sub_6B1A9010+1Bj
		test	[esp+4+arg_0], 1
		jz	short loc_6B1A9044
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4

loc_6B1A9044:				; CODE XREF: sub_6B1A9010+29j
		mov	eax, esi
		pop	esi
		retn	4
sub_6B1A9010	endp

; [00000006 BYTES: COLLAPSED FUNCTION VerQueryValueA. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION GetFileVersionInfoA. PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION GetFileVersionInfoSizeA. PRESS KEYPAD "+"	TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A905C	proc near		; DATA XREF: .rdata:6B1BA938o
		push	dword ptr [ebp-14h]
		push	dword ptr [ebp-18h]
		call	Ordinal1430
		pop	ecx
		pop	ecx
		retn
sub_6B1A905C	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_18. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9074	proc near		; DATA XREF: .rdata:stru_6B1BA9F8o
		lea	ecx, [ebp-28h]
		jmp	ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
sub_6B1A9074	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_19. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9087	proc near		; DATA XREF: .rdata:stru_6B1BAA1Co
		mov	ecx, [ebp-10h]
		jmp	ds:??1exception@@UAE@XZ	; exception::~exception(void)
sub_6B1A9087	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_20. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A909A	proc near		; DATA XREF: .rdata:stru_6B1BAA7Co
		lea	ecx, [ebp-2Ch]
		jmp	ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
sub_6B1A909A	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_21. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A90AD	proc near		; DATA XREF: .rdata:6B1BAAA4o
		lea	ecx, [ebp-28h]
		jmp	sub_6B1899B5
sub_6B1A90AD	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A90B5	proc near		; DATA XREF: .rdata:6B1BAAACo
		lea	ecx, [ebp-94h]
		jmp	Ordinal1488
sub_6B1A90B5	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A90C0	proc near		; DATA XREF: .rdata:6B1BAAB4o
		lea	ecx, [ebp-48h]
		jmp	Ordinal1090
sub_6B1A90C0	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_22. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A90D2	proc near		; DATA XREF: .rdata:stru_6B1BAB18o
		mov	ecx, [ebp-10h]
		jmp	sub_6B1899B5
sub_6B1A90D2	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_23. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A90E4	proc near		; DATA XREF: .rdata:stru_6B1BAB3Co
		lea	ecx, [ebp-14h]
		jmp	sub_6B1817A1
sub_6B1A90E4	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_24. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A90F6	proc near		; DATA XREF: .rdata:6B1BAB64o
		lea	ecx, [ebp-138h]
		jmp	sub_6B1899B5
sub_6B1A90F6	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9101	proc near		; DATA XREF: .rdata:6B1BAB6Co
		lea	ecx, [ebp-13Ch]
		jmp	sub_6B1899B5
sub_6B1A9101	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A910C	proc near		; DATA XREF: .rdata:6B1BAB74o
		lea	ecx, [ebp-134h]
		jmp	Ordinal1318
sub_6B1A910C	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9117	proc near		; DATA XREF: .rdata:6B1BAB7Co
		lea	ecx, [ebp-150h]
		jmp	Ordinal1318
sub_6B1A9117	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9122	proc near		; DATA XREF: .rdata:6B1BAB84o
		lea	ecx, [ebp-178h]
		jmp	Ordinal1090
sub_6B1A9122	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A912D	proc near		; DATA XREF: .rdata:6B1BAB94o
		lea	ecx, [ebp-140h]
		jmp	sub_6B1899B5
sub_6B1A912D	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_25. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9142	proc near		; DATA XREF: .rdata:stru_6B1BABF0o
		mov	ecx, [ebp-10h]
		add	ecx, 4
		jmp	sub_6B1899B5
sub_6B1A9142	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_26. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9157	proc near		; DATA XREF: .rdata:6B1BAC50o
		lea	ecx, [ebp-4Ch]
		jmp	Ordinal1090
sub_6B1A9157	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_27. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9169	proc near		; DATA XREF: .rdata:stru_6B1BACB4o
		lea	ecx, [ebp-28h]
		jmp	ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
sub_6B1A9169	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_28. PRESS	KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_29. PRESS	KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_30. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9190	proc near		; DATA XREF: .rdata:6B1BADE4o
		lea	ecx, [ebp-88h]
		jmp	Ordinal1090
sub_6B1A9190	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A919B	proc near		; DATA XREF: .rdata:6B1BADF4o
		lea	ecx, [ebp-64h]
		jmp	Ordinal521
sub_6B1A919B	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_31. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A91AD	proc near		; DATA XREF: .rdata:stru_6B1BAE50o
		lea	ecx, [ebp+0Ch]
		jmp	Ordinal521
sub_6B1A91AD	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_32. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A91BF	proc near		; DATA XREF: .rdata:6B1BAE78o
		lea	ecx, [ebp-5Ch]
		jmp	Ordinal1573
sub_6B1A91BF	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A91C7	proc near		; DATA XREF: .rdata:6B1BAE80o
		lea	ecx, [ebp-48h]
		jmp	Ordinal1090
sub_6B1A91C7	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_33. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A91D9	proc near		; DATA XREF: .rdata:6B1BAEE8o
		lea	ecx, [ebp-70h]
		jmp	Ordinal1573
sub_6B1A91D9	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A91E1	proc near		; DATA XREF: .rdata:6B1BAEF0o
		lea	ecx, [ebp-5Ch]
		jmp	Ordinal1090
sub_6B1A91E1	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_34. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A91F3	proc near		; DATA XREF: .rdata:6B1BAF58o
		lea	ecx, [ebp-68h]
		jmp	Ordinal1573
sub_6B1A91F3	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A91FB	proc near		; DATA XREF: .rdata:6B1BAF60o
		lea	ecx, [ebp-48h]
		jmp	Ordinal1090
sub_6B1A91FB	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_35. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A920D	proc near		; DATA XREF: .rdata:6B1BAFC8o
		lea	ecx, [ebp-4Ch]
		jmp	Ordinal1090
sub_6B1A920D	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_36. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A921F	proc near		; DATA XREF: .rdata:6B1BB030o
		lea	ecx, [ebp-64h]
		jmp	Ordinal1573
sub_6B1A921F	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9227	proc near		; DATA XREF: .rdata:6B1BB038o
		lea	ecx, [ebp-28h]
		jmp	sub_6B189962
sub_6B1A9227	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A922F	proc near		; DATA XREF: .rdata:6B1BB040o
		lea	ecx, [ebp-54h]
		jmp	Ordinal1090
sub_6B1A922F	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_37. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9241	proc near		; DATA XREF: .rdata:6B1BB0A8o
		lea	ecx, [ebp-48h]
		jmp	Ordinal1090
sub_6B1A9241	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_38. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9253	proc near		; DATA XREF: .rdata:6B1BB110o
		lea	ecx, [ebp-48h]
		jmp	Ordinal1090
sub_6B1A9253	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_39. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9265	proc near		; DATA XREF: .rdata:6B1BB178o
		lea	ecx, [ebp-48h]
		jmp	Ordinal1090
sub_6B1A9265	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_40. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9277	proc near		; DATA XREF: .rdata:stru_6B1BB1DCo
		lea	ecx, [ebp-28h]
		jmp	ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
sub_6B1A9277	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_41. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A928A	proc near		; DATA XREF: .rdata:stru_6B1BB200o
		lea	ecx, [ebp-2Ch]
		jmp	ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
sub_6B1A928A	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_42. PRESS	KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_43. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A92A7	proc near		; DATA XREF: .rdata:stru_6B1BB274o
		lea	ecx, [ebp-4Ch]
		jmp	Ordinal521
sub_6B1A92A7	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A92AF	proc near		; DATA XREF: .rdata:stru_6B1BB274o
		lea	ecx, [ebp-94h]
		jmp	loc_6B186188
sub_6B1A92AF	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_44. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A92C4	proc near		; DATA XREF: .rdata:6B1BB2A4o
		lea	ecx, [ebp-48h]
		jmp	Ordinal1090
sub_6B1A92C4	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_45. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A92D6	proc near		; DATA XREF: .rdata:6B1BB30Co
		lea	ecx, [ebp-5Ch]
		jmp	Ordinal1573
sub_6B1A92D6	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A92DE	proc near		; DATA XREF: .rdata:6B1BB314o
		lea	ecx, [ebp-48h]
		jmp	Ordinal1090
sub_6B1A92DE	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_46. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A92F0	proc near		; DATA XREF: .rdata:6B1BB37Co
		lea	ecx, [ebp-68h]
		jmp	Ordinal1573
sub_6B1A92F0	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A92F8	proc near		; DATA XREF: .rdata:6B1BB384o
		lea	ecx, [ebp-48h]
		jmp	Ordinal1090
sub_6B1A92F8	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_47. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A930A	proc near		; DATA XREF: .rdata:6B1BB3ECo
		lea	ecx, [ebp-4Ch]
		jmp	Ordinal1090
sub_6B1A930A	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_48. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A931C	proc near		; DATA XREF: .rdata:6B1BB454o
		lea	ecx, [ebp-68h]
		jmp	Ordinal1573
sub_6B1A931C	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9324	proc near		; DATA XREF: .rdata:6B1BB45Co
		lea	ecx, [ebp-48h]
		jmp	Ordinal1090
sub_6B1A9324	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_49. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9336	proc near		; DATA XREF: .rdata:6B1BB4C4o
		lea	ecx, [ebp-4Ch]
		jmp	Ordinal1090
sub_6B1A9336	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_50. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9348	proc near		; DATA XREF: .rdata:6B1BB52Co
		lea	ecx, [ebp-4Ch]
		jmp	Ordinal1090
sub_6B1A9348	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_51. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A935A	proc near		; DATA XREF: .rdata:6B1BB594o
		lea	ecx, [ebp-68h]
		jmp	Ordinal1573
sub_6B1A935A	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9362	proc near		; DATA XREF: .rdata:6B1BB59Co
		lea	ecx, [ebp-48h]
		jmp	Ordinal1090
sub_6B1A9362	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_52. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9374	proc near		; DATA XREF: .rdata:6B1BB604o
		lea	ecx, [ebp-4Ch]
		jmp	Ordinal1090
sub_6B1A9374	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_53. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9386	proc near		; DATA XREF: .rdata:6B1BB66Co
		lea	ecx, [ebp-4Ch]
		jmp	Ordinal1090
sub_6B1A9386	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_54. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9398	proc near		; DATA XREF: .rdata:6B1BB6D4o
		lea	ecx, [ebp-4Ch]
		jmp	Ordinal1090
sub_6B1A9398	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_55. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A93AA	proc near		; DATA XREF: .rdata:6B1BB73Co
		lea	ecx, [ebp-44h]
		jmp	Ordinal1090
sub_6B1A93AA	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_56. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A93BC	proc near		; DATA XREF: .rdata:6B1BB7A4o
		lea	ecx, [ebp-44h]
		jmp	Ordinal1090
sub_6B1A93BC	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_57. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A93CE	proc near		; DATA XREF: .rdata:6B1BB840o
		lea	ecx, [ebp-4Ch]
		jmp	Ordinal1090
sub_6B1A93CE	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_58. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A93E0	proc near		; DATA XREF: .rdata:6B1BB8A8o
		lea	ecx, [ebp-4Ch]
		jmp	Ordinal1090
sub_6B1A93E0	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_59. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A93F2	proc near		; DATA XREF: .rdata:6B1BB910o
		lea	ecx, [ebp-60h]
		jmp	Ordinal1090
sub_6B1A93F2	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A93FA	proc near		; DATA XREF: .rdata:6B1BB920o
		lea	ecx, [ebp-28h]
		jmp	sub_6B1899B5
sub_6B1A93FA	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9402	proc near		; DATA XREF: .rdata:6B1BB928o
		lea	ecx, [ebp-2Ch]
		jmp	sub_6B1899B5
sub_6B1A9402	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A940A	proc near		; DATA XREF: .rdata:6B1BB930o
		lea	ecx, [ebp-30h]
		jmp	sub_6B1899B5
sub_6B1A940A	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_60. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A941C	proc near		; DATA XREF: .rdata:6B1BB990o
		lea	ecx, [ebp-5Ch]
		jmp	Ordinal1573
sub_6B1A941C	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9424	proc near		; DATA XREF: .rdata:6B1BB998o
		lea	ecx, [ebp-48h]
		jmp	Ordinal1090
sub_6B1A9424	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_61. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9436	proc near		; DATA XREF: .rdata:6B1BBA00o
		lea	ecx, [ebp-28h]
		jmp	sub_6B1899B5
sub_6B1A9436	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A943E	proc near		; DATA XREF: .rdata:6B1BBA08o
		lea	ecx, [ebp-4Ch]
		jmp	Ordinal1090
sub_6B1A943E	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_62. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9450	proc near		; DATA XREF: .rdata:stru_6B1BBA6Co
		lea	ecx, [ebp-28h]
		jmp	ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
sub_6B1A9450	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_63. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9463	proc near		; DATA XREF: .rdata:stru_6B1BBA90o
		mov	ecx, [ebp-10h]
		add	ecx, 4
		jmp	sub_6B1899B5
sub_6B1A9463	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_64. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9478	proc near		; DATA XREF: .rdata:stru_6B1BBAB4o
		push	dword ptr [ebp+8]
		push	dword ptr [ebp-10h]
		call	Ordinal1430
		pop	ecx
		pop	ecx
		retn
sub_6B1A9478	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_65. PRESS	KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_66. PRESS	KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_67. PRESS	KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_68. PRESS	KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_69. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A94B8	proc near		; DATA XREF: .rdata:6B1BBC1Co
		lea	ecx, [ebp-20h]
		jmp	Ordinal793
sub_6B1A94B8	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_70. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A94CA	proc near		; DATA XREF: .rdata:6B1BBCA8o
		lea	ecx, [ebp+10h]
		jmp	sub_6B1899B5
sub_6B1A94CA	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_71. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A94DC	proc near		; DATA XREF: .rdata:6B1BBD34o
		lea	ecx, [ebp-44h]
		jmp	Ordinal1090
sub_6B1A94DC	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A94E4	proc near		; DATA XREF: .rdata:6B1BBD44o
		lea	ecx, [ebp-20h]
		jmp	Ordinal793
sub_6B1A94E4	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A94EC	proc near		; DATA XREF: .rdata:6B1BBD4Co
		lea	ecx, [ebp+0Ch]
		jmp	sub_6B1899B5
sub_6B1A94EC	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_72. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A94FE	proc near		; DATA XREF: .rdata:6B1BBDACo
		lea	ecx, [ebp-54h]
		jmp	Ordinal1090
sub_6B1A94FE	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9506	proc near		; DATA XREF: .rdata:6B1BBDBCo
		lea	ecx, [ebp+8]
		jmp	sub_6B1899B5
sub_6B1A9506	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A950E	proc near		; DATA XREF: .rdata:6B1BBDC4o
		lea	ecx, [ebp-28h]
		jmp	sub_6B1899B5
sub_6B1A950E	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9516	proc near		; DATA XREF: .rdata:6B1BBDCCo
		lea	ecx, [ebp-34h]
		jmp	sub_6B1899B5
sub_6B1A9516	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A951E	proc near		; DATA XREF: .rdata:6B1BBDD4o
		lea	ecx, [ebp-30h]
		jmp	sub_6B1899B5
sub_6B1A951E	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_73. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9530	proc near		; DATA XREF: .rdata:6B1BBE34o
		lea	ecx, [ebp-48h]
		jmp	Ordinal1090
sub_6B1A9530	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_74. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9542	proc near		; DATA XREF: .rdata:6B1BBE9Co
		lea	ecx, [ebp-48h]
		jmp	Ordinal1090
sub_6B1A9542	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_75. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9554	proc near		; DATA XREF: .rdata:6B1BBF04o
		lea	ecx, [ebp-24h]
		jmp	Ordinal1573
sub_6B1A9554	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A955C	proc near		; DATA XREF: .rdata:6B1BBF0Co
		lea	ecx, [ebp-14h]
		jmp	sub_6B1899B5
sub_6B1A955C	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_76. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A956E	proc near		; DATA XREF: .rdata:6B1BBF64o
		lea	ecx, [ebp-44h]
		jmp	Ordinal1090
sub_6B1A956E	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_77. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9580	proc near		; DATA XREF: .rdata:6B1BBFCCo
		lea	ecx, [ebp-60h]
		jmp	Ordinal1573
sub_6B1A9580	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9588	proc near		; DATA XREF: .rdata:6B1BBFD4o
		lea	ecx, [ebp-28h]
		jmp	sub_6B1899B5
sub_6B1A9588	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9590	proc near		; DATA XREF: .rdata:6B1BBFDCo
		lea	ecx, [ebp-50h]
		jmp	Ordinal1090
sub_6B1A9590	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9598	proc near		; DATA XREF: .rdata:6B1BBFECo
		lea	ecx, [ebp-0A8h]
		jmp	Ordinal1488
sub_6B1A9598	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_78. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A95AD	proc near		; DATA XREF: .rdata:6B1BC04Co
		lea	ecx, [ebp-58h]
		jmp	Ordinal1573
sub_6B1A95AD	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A95B5	proc near		; DATA XREF: .rdata:6B1BC054o
		lea	ecx, [ebp-44h]
		jmp	Ordinal1090
sub_6B1A95B5	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_79. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A95C7	proc near		; DATA XREF: .rdata:6B1BC0BCo
		lea	ecx, [ebp-14h]
		jmp	sub_6B1899B5
sub_6B1A95C7	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_80. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A95D9	proc near		; DATA XREF: .rdata:6B1BC114o
		lea	ecx, [ebp-14h]
		jmp	sub_6B1899B5
sub_6B1A95D9	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_81. PRESS	KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_82. PRESS	KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_83. PRESS	KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_84. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9609	proc near		; DATA XREF: .rdata:6B1BC25Co
		lea	ecx, [ebp-5Ch]
		jmp	Ordinal1573
sub_6B1A9609	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9611	proc near		; DATA XREF: .rdata:6B1BC264o
		lea	ecx, [ebp-48h]
		jmp	Ordinal1090
sub_6B1A9611	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_85. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9623	proc near		; DATA XREF: .rdata:6B1BC2CCo
		lea	ecx, [ebp-6Ch]
		jmp	Ordinal1573
sub_6B1A9623	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A962B	proc near		; DATA XREF: .rdata:6B1BC2D4o
		lea	ecx, [ebp-0B0h]
		jmp	Ordinal1488
sub_6B1A962B	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9636	proc near		; DATA XREF: .rdata:6B1BC2DCo
		lea	ecx, [ebp-28h]
		jmp	sub_6B1899B5
sub_6B1A9636	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A963E	proc near		; DATA XREF: .rdata:6B1BC2E4o
		lea	ecx, [ebp-58h]
		jmp	Ordinal1090
sub_6B1A963E	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_86. PRESS	KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_87. PRESS	KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_88. PRESS	KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_89. PRESS	KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_90. PRESS	KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_91. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9682	proc near		; DATA XREF: .rdata:stru_6B1BC4D8o
		lea	ecx, [ebp-28h]
		jmp	ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
sub_6B1A9682	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_92. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9695	proc near		; DATA XREF: .rdata:6B1BC500o
		lea	ecx, [ebp-44h]
		jmp	Ordinal1090
sub_6B1A9695	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_93. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A96A7	proc near		; DATA XREF: .rdata:6B1BC568o
		lea	ecx, [ebp-4Ch]
		jmp	Ordinal1090
sub_6B1A96A7	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_94. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A96B9	proc near		; DATA XREF: .rdata:stru_6B1BC5CCo
		lea	ecx, [ebp-2Ch]
		jmp	ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
sub_6B1A96B9	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_95. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A96CC	proc near		; DATA XREF: .rdata:stru_6B1BC5F0o
		lea	ecx, [ebp-28h]
		jmp	ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
sub_6B1A96CC	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_96. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A96DF	proc near		; DATA XREF: .rdata:6B1BC618o
		lea	ecx, [ebp-58h]
		jmp	Ordinal1573
sub_6B1A96DF	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A96E7	proc near		; DATA XREF: .rdata:6B1BC620o
		lea	ecx, [ebp-48h]
		jmp	Ordinal1090
sub_6B1A96E7	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_97. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A96F9	proc near		; DATA XREF: .rdata:6B1BC688o
		lea	ecx, [ebp-30h]
		jmp	Ordinal1090
sub_6B1A96F9	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_98. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A970B	proc near		; DATA XREF: .rdata:6B1BC6E0o
		lea	ecx, [ebp-30h]
		jmp	Ordinal1090
sub_6B1A970B	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_99. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A971D	proc near		; DATA XREF: .rdata:6B1BC738o
		lea	ecx, [ebp-34h]
		jmp	Ordinal1090
sub_6B1A971D	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_100. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A972F	proc near		; DATA XREF: .rdata:stru_6B1BC78Co
		push	dword ptr [ebp-10h] ; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx
		retn
sub_6B1A972F	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_101. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9743	proc near		; DATA XREF: .rdata:6B1BC7B4o
		lea	ecx, [ebp-34h]
		jmp	Ordinal1090
sub_6B1A9743	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_102. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9755	proc near		; DATA XREF: .rdata:6B1BC80Co
		lea	ecx, [ebp-50h]
		jmp	Ordinal1090
sub_6B1A9755	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_103. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9767	proc near		; DATA XREF: .rdata:6B1BC874o
		lea	ecx, [ebp+8]
		jmp	sub_6B1899B5
sub_6B1A9767	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A976F	proc near		; DATA XREF: .rdata:6B1BC87Co
		lea	ecx, [ebp-48h]
		jmp	Ordinal1090
sub_6B1A976F	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_104. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9781	proc near		; DATA XREF: .rdata:6B1BC8E4o
		lea	ecx, [ebp-90h]
		jmp	Ordinal1246
sub_6B1A9781	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A978C	proc near		; DATA XREF: .rdata:6B1BC8ECo
		lea	ecx, [ebp-0D4h]
		jmp	Ordinal602
sub_6B1A978C	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9797	proc near		; DATA XREF: .rdata:6B1BC8F4o
		lea	ecx, [ebp+8]
		jmp	sub_6B1899B5
sub_6B1A9797	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A979F	proc near		; DATA XREF: .rdata:6B1BC8FCo
		lea	ecx, [ebp-5Ch]
		jmp	Ordinal1090
sub_6B1A979F	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A97A7	proc near		; DATA XREF: .rdata:6B1BC914o
		lea	ecx, [ebp-3Ch]
		jmp	Ordinal781
sub_6B1A97A7	endp

; [0000000A BYTES: COLLAPSED FUNCTION __ehhandler$?_Getifld@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAHPADAAV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@1HABVlocale@2@@Z. PRESS KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A97B9	proc near		; DATA XREF: .rdata:6B1BC9B0o
		lea	ecx, [ebp-48h]
		jmp	Ordinal1090
sub_6B1A97B9	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_105. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A97CB	proc near		; DATA XREF: .rdata:6B1BCA18o
		lea	ecx, [ebp-48h]
		jmp	Ordinal1090
sub_6B1A97CB	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_106. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A97DD	proc near		; DATA XREF: .rdata:6B1BCA80o
		lea	ecx, [ebp-88h]
		jmp	Ordinal1090
sub_6B1A97DD	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A97E8	proc near		; DATA XREF: .rdata:6B1BCA90o
		lea	ecx, [ebp+8]
		jmp	sub_6B1899B5
sub_6B1A97E8	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A97F0	proc near		; DATA XREF: .rdata:6B1BCA98o
		lea	ecx, [ebp+8]
		jmp	sub_6B1899B5
sub_6B1A97F0	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_107. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9802	proc near		; DATA XREF: .rdata:6B1BCAF8o
		lea	ecx, [ebp-2Ch]
		jmp	sub_6B1899B5
sub_6B1A9802	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A980A	proc near		; DATA XREF: .rdata:6B1BCB00o
		lea	ecx, [ebp-50h]
		jmp	Ordinal1090
sub_6B1A980A	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_108. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A981C	proc near		; DATA XREF: .rdata:6B1BCB68o
		lea	ecx, [ebp-44h]
		jmp	Ordinal1090
sub_6B1A981C	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_109. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A982E	proc near		; DATA XREF: .rdata:6B1BCBD0o
		lea	ecx, [ebp-44h]
		jmp	Ordinal1090
sub_6B1A982E	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_110. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9840	proc near		; DATA XREF: .rdata:6B1BCC38o
		lea	ecx, [ebp-44h]
		jmp	Ordinal1090
sub_6B1A9840	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_111. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9852	proc near		; DATA XREF: .rdata:6B1BCCA0o
		lea	ecx, [ebp-44h]
		jmp	Ordinal1090
sub_6B1A9852	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_112. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9864	proc near		; DATA XREF: .rdata:6B1BCD08o
		lea	ecx, [ebp-44h]
		jmp	Ordinal1090
sub_6B1A9864	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_113. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9876	proc near		; DATA XREF: .rdata:6B1BCD70o
		lea	ecx, [ebp-148h]
		jmp	Ordinal1090
sub_6B1A9876	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9881	proc near		; DATA XREF: .rdata:6B1BCD80o

; FUNCTION CHUNK AT 6B19FAB6 SIZE 00000012 BYTES

		lea	ecx, [ebp-128h]
		jmp	loc_6B19FAB6
sub_6B1A9881	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_114. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9896	proc near		; DATA XREF: .rdata:6B1BCDE0o
		lea	ecx, [ebp-44h]
		jmp	Ordinal1090
sub_6B1A9896	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_115. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A98A8	proc near		; DATA XREF: .rdata:6B1BCE48o
		lea	ecx, [ebp-0C8h]
		jmp	Ordinal1090
sub_6B1A98A8	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A98B3	proc near		; DATA XREF: .rdata:6B1BCE58o
		lea	ecx, [ebp-0A8h]
		jmp	loc_6B19FAB6
sub_6B1A98B3	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_116. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A98C8	proc near		; DATA XREF: .rdata:6B1BCEB8o
		lea	ecx, [ebp-44h]
		jmp	Ordinal1090
sub_6B1A98C8	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_117. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A98DA	proc near		; DATA XREF: .rdata:6B1BCF20o
		lea	ecx, [ebp-44h]
		jmp	Ordinal1090
sub_6B1A98DA	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_118. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A98EC	proc near		; DATA XREF: .rdata:6B1BCF88o
		lea	ecx, [ebp-48h]
		jmp	Ordinal1090
sub_6B1A98EC	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A98F4	proc near		; DATA XREF: .rdata:6B1BCF98o
		lea	ecx, [ebp-28h]
		jmp	sub_6B1899B5
sub_6B1A98F4	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_119. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9906	proc near		; DATA XREF: .rdata:6B1BCFF8o
		lea	ecx, [ebp-48h]
		jmp	Ordinal1090
sub_6B1A9906	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A990E	proc near		; DATA XREF: .rdata:6B1BD008o
		lea	ecx, [ebp-28h]
		jmp	sub_6B1899B5
sub_6B1A990E	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_120. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9920	proc near		; DATA XREF: .rdata:stru_6B1BD064o
		mov	ecx, [ebp-10h]
		jmp	sub_6B1899B5
sub_6B1A9920	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_121. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9932	proc near		; DATA XREF: .rdata:6B1BD08Co
		lea	ecx, [ebp-48h]
		jmp	Ordinal1090
sub_6B1A9932	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A993A	proc near		; DATA XREF: .rdata:6B1BD09Co
		lea	ecx, [ebp-28h]
		jmp	sub_6B1899B5
sub_6B1A993A	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_122. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A994C	proc near		; DATA XREF: .rdata:6B1BD0FCo
		lea	ecx, [ebp-48h]
		jmp	Ordinal1090
sub_6B1A994C	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9954	proc near		; DATA XREF: .rdata:6B1BD10Co
		lea	ecx, [ebp-28h]
		jmp	sub_6B1899B5
sub_6B1A9954	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_123. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9966	proc near		; DATA XREF: .rdata:6B1BD16Co
		lea	ecx, [ebp-30h]
		jmp	sub_6B1899B5
sub_6B1A9966	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A996E	proc near		; DATA XREF: .rdata:6B1BD174o
		lea	ecx, [ebp-64h]
		jmp	Ordinal1090
sub_6B1A996E	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9976	proc near		; DATA XREF: .rdata:6B1BD184o
		lea	ecx, [ebp-2Ch]
		jmp	sub_6B1899B5
sub_6B1A9976	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A997E	proc near		; DATA XREF: .rdata:6B1BD18Co
		lea	ecx, [ebp+14h]
		jmp	sub_6B1899B5
sub_6B1A997E	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9986	proc near		; DATA XREF: .rdata:6B1BD194o
		lea	ecx, [ebp+18h]
		jmp	sub_6B1899B5
sub_6B1A9986	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_124. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9998	proc near		; DATA XREF: .rdata:stru_6B1BD1F0o
		lea	ecx, [ebp-28h]
		jmp	ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
sub_6B1A9998	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_125. PRESS KEYPAD	"+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_126. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A99B5	proc near		; DATA XREF: .rdata:6B1BD268o
		lea	ecx, [ebp-50h]
		jmp	sub_6B1A1B35
sub_6B1A99B5	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A99BD	proc near		; DATA XREF: .rdata:6B1BD270o
		lea	ecx, [ebp-78h]
		jmp	Ordinal1090
sub_6B1A99BD	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_127. PRESS KEYPAD	"+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_128. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A99D9	proc near		; DATA XREF: .rdata:6B1BD328o
		lea	ecx, [ebp-48h]
		jmp	Ordinal1090
sub_6B1A99D9	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_129. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A99EB	proc near		; DATA XREF: .rdata:stru_6B1BD3DCo
		lea	ecx, [ebp-2Ch]
		jmp	ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
sub_6B1A99EB	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_130. PRESS KEYPAD	"+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_131. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9A08	proc near		; DATA XREF: .rdata:stru_6B1BD584o
		lea	ecx, [ebp-28h]
		jmp	ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
sub_6B1A9A08	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_132. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9A1B	proc near		; DATA XREF: .rdata:stru_6B1BD400o
		lea	ecx, [ebp-18h]
		jmp	Ordinal1667
sub_6B1A9A1B	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9A23	proc near		; DATA XREF: .rdata:stru_6B1BD400o
		lea	ecx, [ebp-28h]
		jmp	loc_6B1A3229
sub_6B1A9A23	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_133. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9A35	proc near		; DATA XREF: .rdata:6B1BD430o
		lea	ecx, [ebp-48h]
		jmp	Ordinal1090
sub_6B1A9A35	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_134. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9A47	proc near		; DATA XREF: .rdata:6B1BD498o
		lea	ecx, [ebp-60h]
		jmp	Ordinal1090
sub_6B1A9A47	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9A4F	proc near		; DATA XREF: .rdata:6B1BD4A8o

; FUNCTION CHUNK AT 6B1A2F38 SIZE 00000010 BYTES

		lea	ecx, [ebp-28h]
		jmp	loc_6B1A2F38
sub_6B1A9A4F	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9A57	proc near		; DATA XREF: .rdata:6B1BD4B0o
		lea	ecx, [ebp-20h]
		jmp	Ordinal1667
sub_6B1A9A57	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_135. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9A69	proc near		; DATA XREF: .rdata:6B1BD510o
		lea	ecx, [ebp-258h]
		jmp	Ordinal1152
sub_6B1A9A69	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9A74	proc near		; DATA XREF: .rdata:6B1BD518o
		lea	ecx, [ebp-278h]
		jmp	Ordinal1090
sub_6B1A9A74	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9A7F	proc near		; DATA XREF: .rdata:6B1BD528o
		lea	ecx, [ebp-20h]
		jmp	Ordinal1667
sub_6B1A9A7F	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_136. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9A91	proc near		; DATA XREF: .rdata:stru_6B1BD5A8o
		lea	ecx, [ebp-2Ch]
		jmp	Ordinal1672
sub_6B1A9A91	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9A99	proc near		; DATA XREF: .rdata:stru_6B1BD5A8o
		lea	ecx, [ebp-50h]
		jmp	loc_6B1A384D
sub_6B1A9A99	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_137. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9AAB	proc near		; DATA XREF: .rdata:6B1BD5D8o
		lea	ecx, [ebp-58h]
		jmp	Ordinal1090
sub_6B1A9AAB	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9AB3	proc near		; DATA XREF: .rdata:6B1BD5E8o
		lea	ecx, [ebp-2Ch]
		jmp	loc_6B1A2F38
sub_6B1A9AB3	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9ABB	proc near		; DATA XREF: .rdata:6B1BD5F0o
		lea	ecx, [ebp-80h]
		jmp	Ordinal1672
sub_6B1A9ABB	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_138. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9ACD	proc near		; DATA XREF: .rdata:6B1BD650o
		lea	ecx, [ebp-16Ch]
		jmp	Ordinal1152
sub_6B1A9ACD	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9AD8	proc near		; DATA XREF: .rdata:6B1BD658o
		lea	ecx, [ebp-18Ch]
		jmp	Ordinal1090
sub_6B1A9AD8	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9AE3	proc near		; DATA XREF: .rdata:6B1BD668o
		lea	ecx, [ebp-34h]
		jmp	Ordinal1672
sub_6B1A9AE3	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_139. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9AF5	proc near		; DATA XREF: .rdata:stru_6B1BD6C4o
		lea	ecx, [ebp-28h]
		jmp	ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
sub_6B1A9AF5	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_140. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9B08	proc near		; DATA XREF: .rdata:6B1BD6ECo
		lea	ecx, [ebp-60h]
		jmp	Ordinal1573
sub_6B1A9B08	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9B10	proc near		; DATA XREF: .rdata:6B1BD6F4o
		lea	ecx, [ebp-54h]
		jmp	Ordinal1090
sub_6B1A9B10	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_141. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9B22	proc near		; DATA XREF: .rdata:6B1BD75Co
		lea	ecx, [ebp-50h]
		jmp	Ordinal1090
sub_6B1A9B22	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_142. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9B34	proc near		; DATA XREF: .rdata:stru_6B1BD7C0o
		lea	ecx, [ebp-28h]
		jmp	ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
sub_6B1A9B34	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_143. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9B47	proc near		; DATA XREF: .rdata:6B1BD7E8o
		lea	ecx, [ebp-50h]
		jmp	Ordinal1090
sub_6B1A9B47	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_144. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9B59	proc near		; DATA XREF: .rdata:6B1BD850o
		lea	ecx, [ebp-50h]
		jmp	Ordinal1090
sub_6B1A9B59	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9B61	proc near		; DATA XREF: .rdata:6B1BD860o
		lea	ecx, [ebp-2Ch]
		jmp	sub_6B1899B5
sub_6B1A9B61	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_145. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6B1A9B73	proc near		; DATA XREF: .data:6B1C1014o
		push	offset aCcl35	; "ccL35"
		mov	ecx, offset dword_6B1C1200
		call	Ordinal149
		push	offset sub_6B1A9BF2 ; void (__cdecl *)()
		call	_atexit
		pop	ecx
		retn
sub_6B1A9B73	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9B8E	proc near		; DATA XREF: .data:6B1C1018o
		call	Ordinal1282
		mov	byte_6B1C132A, al
		retn
sub_6B1A9B8E	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9B99	proc near		; DATA XREF: .data:6B1C1008o
		mov	ecx, offset dword_6B1C1348
		call	sub_6B1A8790
		push	offset sub_6B1A9BFC ; void (__cdecl *)()
		call	_atexit
		pop	ecx
		retn
sub_6B1A9B99	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9BAF	proc near		; DATA XREF: .data:6B1C100Co
		call	ds:GetProcessHeap
		push	offset sub_6B1A9C06 ; void (__cdecl *)()
		mov	dword_6B1C1384,	offset off_6B1BA500
		mov	dword_6B1C1388,	eax
		mov	byte_6B1C138C, 0
		call	_atexit
		pop	ecx
		retn
sub_6B1A9BAF	endp


; =============== S U B	R O U T	I N E =======================================


sub_6B1A9BD7	proc near		; DATA XREF: .data:6B1C1010o
		push	offset dword_6B1C1384
		mov	ecx, offset dword_6B1C1390
		call	sub_6B1A88D2
		push	offset sub_6B1A9C10 ; void (__cdecl *)()
		call	_atexit
		pop	ecx
		retn
sub_6B1A9BD7	endp


; =============== S U B	R O U T	I N E =======================================


; void __cdecl sub_6B1A9BF2()
sub_6B1A9BF2	proc near		; DATA XREF: sub_6B1A9B73+Fo
		mov	ecx, offset dword_6B1C1200
		jmp	Ordinal150
sub_6B1A9BF2	endp


; =============== S U B	R O U T	I N E =======================================


; void __cdecl sub_6B1A9BFC()
sub_6B1A9BFC	proc near		; DATA XREF: sub_6B1A9B99+Ao

; FUNCTION CHUNK AT 6B1A86B7 SIZE 0000001D BYTES
; FUNCTION CHUNK AT 6B1A872C SIZE 00000016 BYTES

		mov	ecx, offset dword_6B1C1348
		jmp	loc_6B1A872C
sub_6B1A9BFC	endp


; =============== S U B	R O U T	I N E =======================================


; void __cdecl sub_6B1A9C06()
sub_6B1A9C06	proc near		; DATA XREF: sub_6B1A9BAF+6o
		mov	ecx, offset dword_6B1C1384
		jmp	sub_6B1A883B
sub_6B1A9C06	endp


; =============== S U B	R O U T	I N E =======================================


; void __cdecl sub_6B1A9C10()
sub_6B1A9C10	proc near		; DATA XREF: sub_6B1A9BD7+Fo
		mov	dword_6B1C1390,	offset off_6B1BA514
		retn
sub_6B1A9C10	endp

; ---------------------------------------------------------------------------
		align 4
		dd 79h dup(0)
		dd 80h dup(?)
_text		ends

; Section 2. (virtual address 0002A000)
; Virtual size			: 00016FFE (  94206.)
; Section size in file		: 00017000 (  94208.)
; Offset to raw	data for section: 00029200
; Flags	40000040: Data Readable
; Alignment	: default
;
; Imports from KERNEL32.dll
;
; ===========================================================================

; Segment type:	Externs
; _idata
; LONG __stdcall InterlockedExchange(volatile LONG *Target, LONG Value)
		extrn InterlockedExchange:dword	; CODE XREF: sub_6B1810B3+4Ap
					; Ordinal1764+1Ap ...
; UINT __stdcall GetACP()
		extrn GetACP:dword	; CODE XREF: sub_6B18104E:loc_6B18109Ap
					; DATA XREF: sub_6B18104E:loc_6B18109Ar
; int __stdcall	GetLocaleInfoA(LCID Locale, LCTYPE LCType, LPSTR lpLCData, int cchData)
		extrn GetLocaleInfoA:dword ; CODE XREF:	sub_6B18104E+23p
					; DATA XREF: sub_6B18104E+23r
; LCID __stdcall GetThreadLocale()
		extrn GetThreadLocale:dword ; CODE XREF: sub_6B18104E+11p
					; DATA XREF: sub_6B18104E+11r
; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA	lpVersionInformation)
		extrn GetVersionExA:dword ; CODE XREF: sub_6B1810B3+22p
					; Ordinal1282+2Ap ...
; int __stdcall	MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCSTR lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr,	int cchWideChar)
		extrn MultiByteToWideChar:dword	; CODE XREF: sub_6B19FAC8+4Ep
					; DATA XREF: sub_6B19FAC8+4Er
; int __stdcall	WideCharToMultiByte(UINT CodePage, DWORD dwFlags, LPCWSTR lpWideCharStr, int cchWideChar, LPSTR	lpMultiByteStr,	int cbMultiByte, LPCSTR	lpDefaultChar, LPBOOL lpUsedDefaultChar)
		extrn WideCharToMultiByte:dword	; CODE XREF: sub_6B1811AA+52p
					; sub_6B1815BE+16p ...
; void __stdcall RaiseException(DWORD dwExceptionCode, DWORD dwExceptionFlags, DWORD nNumberOfArguments, const ULONG_PTR *lpArguments)
		extrn RaiseException:dword ; CODE XREF:	sub_6B1A844A+77p
					; sub_6B1A844A+13Bp ...
; DWORD	__stdcall GetLastError()
		extrn GetLastError:dword ; CODE	XREF: sub_6B18112Bp
					; Ordinal605:loc_6B18CB52p ...
; void __stdcall InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn InitializeCriticalSection:dword ;	CODE XREF: sub_6B18115A+12p
					; Ordinal1022+24p ...
; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn DeleteCriticalSection:dword ; CODE XREF: Ordinal984+13p
					; Ordinal1620+Dp ...
; int __stdcall	lstrlenW(LPCWSTR lpString)
		extrn lstrlenW:dword	; CODE XREF: sub_6B1811AA+15p
					; Ordinal648+7p
					; DATA XREF: ...
; int __stdcall	lstrlenA(LPCSTR	lpString)
		extrn lstrlenA:dword	; CODE XREF: Ordinal450+11p
					; Ordinal643+7p ...
; DWORD	__stdcall SizeofResource(HMODULE hModule, HRSRC	hResInfo)
		extrn SizeofResource:dword ; CODE XREF:	sub_6B18144A+2Dp
					; DATA XREF: sub_6B18144A+2Dr
; LPVOID __stdcall LockResource(HGLOBAL	hResData)
		extrn LockResource:dword ; CODE	XREF: sub_6B18144A+17p
					; DATA XREF: sub_6B18144A+17r
; HGLOBAL __stdcall LoadResource(HMODULE hModule, HRSRC	hResInfo)
		extrn LoadResource:dword ; CODE	XREF: sub_6B18144A+9p
					; DATA XREF: sub_6B18144A+9r
; HRSRC	__stdcall FindResourceA(HMODULE	hModule, LPCSTR	lpName,	LPCSTR lpType)
		extrn FindResourceA:dword ; CODE XREF: sub_6B1814A6+12p
					; DATA XREF: sub_6B1814A6+12r
; HRSRC	__stdcall FindResourceExA(HMODULE hModule, LPCSTR lpType, LPCSTR lpName, WORD wLanguage)
		extrn FindResourceExA:dword ; CODE XREF: sub_6B1814D5+16p
					; DATA XREF: sub_6B1814D5+16r
; LONG __stdcall InterlockedIncrement(volatile LONG *lpAddend)
		extrn InterlockedIncrement:dword ; CODE	XREF: sub_6B1833E7+12p
					; Ordinal394+4p ...
; LONG __stdcall InterlockedDecrement(volatile LONG *lpAddend)
		extrn InterlockedDecrement:dword ; CODE	XREF: sub_6B183404+Ep
					; Ordinal158+2Bp ...
; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
		extrn FreeLibrary:dword	; CODE XREF: Ordinal456+130p
					; Ordinal442+16p ...
; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
		extrn GetProcAddress:dword ; CODE XREF:	Ordinal456+81p
					; Ordinal456+8Bp ...
; HMODULE __stdcall LoadLibraryA(LPCSTR	lpLibFileName)
		extrn LoadLibraryA:dword ; CODE	XREF: Ordinal456+61p
					; Ordinal1226+Cp ...
; LPSTR	__stdcall lstrcatA(LPSTR lpString1, LPCSTR lpString2)
		extrn lstrcatA:dword	; CODE XREF: Ordinal456+54p
					; Ordinal1614+40p
					; DATA XREF: ...
; UINT __stdcall GetSystemDirectoryA(LPSTR lpBuffer, UINT uSize)
		extrn GetSystemDirectoryA:dword	; CODE XREF: Ordinal456+32p
					; Ordinal1508+44p
					; DATA XREF: ...
; HGLOBAL __stdcall GlobalFree(HGLOBAL hMem)
		extrn GlobalFree:dword	; CODE XREF: Ordinal710+A3p
					; Ordinal710+D2p
					; DATA XREF: ...
; BOOL __stdcall GlobalUnlock(HGLOBAL hMem)
		extrn GlobalUnlock:dword ; CODE	XREF: Ordinal710+92p
					; Ordinal709+11Cp
					; DATA XREF: ...
; LPVOID __stdcall GlobalLock(HGLOBAL hMem)
		extrn GlobalLock:dword	; CODE XREF: Ordinal710+53p
					; Ordinal709+B6p
					; DATA XREF: ...
; HGLOBAL __stdcall GlobalAlloc(UINT uFlags, SIZE_T dwBytes)
		extrn GlobalAlloc:dword	; CODE XREF: Ordinal710+3Fp
					; DATA XREF: Ordinal710+3Fr
; SIZE_T __stdcall GlobalSize(HGLOBAL hMem)
		extrn GlobalSize:dword	; CODE XREF: Ordinal709+D1p
					; DATA XREF: Ordinal709+D1r
; void __stdcall GetLocalTime(LPSYSTEMTIME lpSystemTime)
		extrn GetLocalTime:dword ; CODE	XREF: Ordinal711+54p
					; Ordinal737+21p ...
; BOOL __stdcall WriteFile(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite,	LPDWORD	lpNumberOfBytesWritten,	LPOVERLAPPED lpOverlapped)
		extrn WriteFile:dword	; CODE XREF: Ordinal752+71p
					; Ordinal752+D9p ...
; BOOL __stdcall ReadFile(HANDLE hFile,	LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped)
		extrn ReadFile:dword	; CODE XREF: Ordinal753+7Bp
					; Ordinal753+C0p ...
; DWORD	__stdcall GetCurrentThreadId()
		extrn GetCurrentThreadId:dword ; CODE XREF: Ordinal776+19p
					; Ordinal777+9p ...
; LPSTR	__stdcall GetCommandLineA()
		extrn GetCommandLineA:dword ; CODE XREF: Ordinal783+8p
					; DATA XREF: Ordinal783+8r
; DWORD	__stdcall GetConsoleTitleA(LPSTR lpConsoleTitle, DWORD nSize)
		extrn GetConsoleTitleA:dword ; CODE XREF: Ordinal818+13p
					; Ordinal820+51p
					; DATA XREF: ...
; BOOL __stdcall GetNumberOfConsoleInputEvents(HANDLE hConsoleInput, LPDWORD lpNumberOfEvents)
		extrn GetNumberOfConsoleInputEvents:dword ; CODE XREF: Ordinal838+ADp
					; DATA XREF: Ordinal838+ADr
; BOOL __stdcall ReadConsoleInputA(HANDLE hConsoleInput, PINPUT_RECORD lpBuffer, DWORD nLength,	LPDWORD	lpNumberOfEventsRead)
		extrn ReadConsoleInputA:dword ;	CODE XREF: Ordinal838+3Ap
					; DATA XREF: Ordinal838+3Ar
; BOOL __stdcall SetConsoleTitleA(LPCSTR lpConsoleTitle)
		extrn SetConsoleTitleA:dword ; CODE XREF: Ordinal819+25p
					; DATA XREF: Ordinal819+25r
; BOOL __stdcall FreeConsole()
		extrn FreeConsole:dword	; CODE XREF: Ordinal817+F0p
					; Ordinal815+11p
					; DATA XREF: ...
; BOOL __stdcall SetConsoleMode(HANDLE hConsoleHandle, DWORD dwMode)
		extrn SetConsoleMode:dword ; CODE XREF:	Ordinal817+70p
					; Ordinal837+80p ...
; BOOL __stdcall SetConsoleCtrlHandler(PHANDLER_ROUTINE	HandlerRoutine,	BOOL Add)
		extrn SetConsoleCtrlHandler:dword ; CODE XREF: Ordinal817+3Bp
					; Ordinal837+13Dp
					; DATA XREF: ...
; BOOL __stdcall GetConsoleMode(HANDLE hConsoleHandle, LPDWORD lpMode)
		extrn GetConsoleMode:dword ; CODE XREF:	Ordinal837+5Bp
					; Ordinal849+8Bp
					; DATA XREF: ...
; BOOL __stdcall GetConsoleScreenBufferInfo(HANDLE hConsoleOutput, PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo)
		extrn GetConsoleScreenBufferInfo:dword ; CODE XREF: Ordinal837+33p
					; Ordinal856+16p ...
; HANDLE __stdcall GetStdHandle(DWORD nStdHandle)
		extrn GetStdHandle:dword ; CODE	XREF: Ordinal837+Fp
					; Ordinal837+2Cp ...
; BOOL __stdcall AllocConsole()
		extrn AllocConsole:dword ; CODE	XREF: Ordinal815:loc_6B19252Cp
					; DATA XREF: Ordinal815:loc_6B19252Cr
; BOOL __stdcall SetStdHandle(DWORD nStdHandle,	HANDLE hHandle)
		extrn SetStdHandle:dword ; CODE	XREF: Ordinal855+DAp
					; Ordinal855+101p ...
; BOOL __stdcall SetConsoleCursorPosition(HANDLE hConsoleOutput, COORD dwCursorPosition)
		extrn SetConsoleCursorPosition:dword ; CODE XREF: Ordinal856+85p
					; Ordinal863+21p
					; DATA XREF: ...
; BOOL __stdcall FillConsoleOutputAttribute(HANDLE hConsoleOutput, WORD	wAttribute, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfAttrsWritten)
		extrn FillConsoleOutputAttribute:dword ; CODE XREF: Ordinal856+70p
					; Ordinal857+84p ...
; BOOL __stdcall FillConsoleOutputCharacterA(HANDLE hConsoleOutput, CHAR cCharacter, DWORD nLength, COORD dwWriteCoord,	LPDWORD	lpNumberOfCharsWritten)
		extrn FillConsoleOutputCharacterA:dword	; CODE XREF: Ordinal856+51p
					; DATA XREF: Ordinal856+51r
; BOOL __stdcall WriteConsoleOutputCharacterA(HANDLE hConsoleOutput, LPCSTR lpCharacter, DWORD nLength,	COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten)
		extrn WriteConsoleOutputCharacterA:dword ; CODE	XREF: Ordinal857+65p
					; DATA XREF: Ordinal857+65r
; BOOL __stdcall SetConsoleScreenBufferSize(HANDLE hConsoleOutput, COORD dwSize)
		extrn SetConsoleScreenBufferSize:dword ; CODE XREF: Ordinal865+54p
					; Ordinal849+E2p
					; DATA XREF: ...
; BOOL __stdcall SetConsoleTextAttribute(HANDLE	hConsoleOutput,	WORD wAttributes)
		extrn SetConsoleTextAttribute:dword ; CODE XREF: Ordinal866+15p
					; Ordinal849+109p
					; DATA XREF: ...
; BOOL __stdcall SetConsoleCursorInfo(HANDLE hConsoleOutput, const CONSOLE_CURSOR_INFO *lpConsoleCursorInfo)
		extrn SetConsoleCursorInfo:dword ; CODE	XREF: Ordinal867+48p
					; DATA XREF: Ordinal867+48r
; BOOL __stdcall GetConsoleCursorInfo(HANDLE hConsoleOutput, PCONSOLE_CURSOR_INFO lpConsoleCursorInfo)
		extrn GetConsoleCursorInfo:dword ; CODE	XREF: Ordinal867+15p
					; Ordinal868+12p
					; DATA XREF: ...
; BOOL __stdcall SetConsoleActiveScreenBuffer(HANDLE hConsoleOutput)
		extrn SetConsoleActiveScreenBuffer:dword ; CODE	XREF: Ordinal854+Cp
					; DATA XREF: Ordinal854+Cr
; BOOL __stdcall WriteConsoleA(HANDLE hConsoleOutput, const void *lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, LPVOID	lpReserved)
		extrn WriteConsoleA:dword ; CODE XREF: Ordinal859+77p
					; Ordinal861+6Ep
					; DATA XREF: ...
; BOOL __stdcall SetConsoleWindowInfo(HANDLE hConsoleOutput, BOOL bAbsolute, const SMALL_RECT *lpConsoleWindow)
		extrn SetConsoleWindowInfo:dword ; CODE	XREF: Ordinal849+12Fp
					; DATA XREF: Ordinal849+12Fr
; HANDLE __stdcall CreateConsoleScreenBuffer(DWORD dwDesiredAccess, DWORD dwShareMode, const SECURITY_ATTRIBUTES *lpSecurityAttributes,	DWORD dwFlags, LPVOID lpScreenBufferData)
		extrn CreateConsoleScreenBuffer:dword ;	CODE XREF: Ordinal849+21p
					; DATA XREF: Ordinal849+21r
; LPSTR	__stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
		extrn lstrcpyA:dword	; CODE XREF: Ordinal890+29p
					; Ordinal1136+4Dp ...
; BOOL __stdcall TerminateProcess(HANDLE hProcess, UINT	uExitCode)
		extrn TerminateProcess:dword ; CODE XREF: Ordinal907+27Bp
					; DATA XREF: Ordinal907+27Br
; HANDLE __stdcall GetCurrentProcess()
		extrn GetCurrentProcess:dword ;	CODE XREF: Ordinal907+274p
					; Ordinal980+94p ...
; DWORD	__stdcall GetCurrentProcessId()
		extrn GetCurrentProcessId:dword	; CODE XREF: Ordinal980+8Dp
					; Ordinal986+BEp ...
; BOOL __stdcall GetThreadContext(HANDLE hThread, LPCONTEXT lpContext)
		extrn GetThreadContext:dword ; CODE XREF: sub_6B19641A+ADp
					; DATA XREF: sub_6B19641A+ADr
; HANDLE __stdcall GetCurrentThread()
		extrn GetCurrentThread:dword ; CODE XREF: sub_6B19641A+A6p
					; Ordinal1280+81p ...
; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn EnterCriticalSection:dword ; CODE	XREF: Ordinal1023+1Ap
					; Ordinal1621+27p ...
; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn LeaveCriticalSection:dword ; CODE	XREF: Ordinal1024+Ap
					; Ordinal1625+18p ...
; BOOL __stdcall CloseHandle(HANDLE hObject)
		extrn CloseHandle:dword	; CODE XREF: Ordinal984+26p
					; Ordinal1025+1Fp ...
; DWORD	__stdcall SetFilePointer(HANDLE	hFile, LONG lDistanceToMove, PLONG lpDistanceToMoveHigh, DWORD dwMoveMethod)
		extrn SetFilePointer:dword ; CODE XREF:	Ordinal1025+B2p
					; Ordinal1114+1Fp ...
; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD	dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes,	DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE	hTemplateFile)
		extrn CreateFileA:dword	; CODE XREF: Ordinal1025+A0p
					; Ordinal1112+33p
					; DATA XREF: ...
; DWORD	__stdcall GetModuleFileNameA(HMODULE hModule, LPCH lpFilename, DWORD nSize)
		extrn GetModuleFileNameA:dword ; CODE XREF: Ordinal1027+52p
					; Ordinal1490+52p
					; DATA XREF: ...
; void __stdcall OutputDebugStringA(LPCSTR lpOutputString)
		extrn OutputDebugStringA:dword ; CODE XREF: Ordinal993+10p
					; DATA XREF: Ordinal993+10r
; HLOCAL __stdcall LocalFree(HLOCAL hMem)
		extrn LocalFree:dword	; CODE XREF: Ordinal1047+11p
					; Ordinal1053+Ep ...
; DWORD	__stdcall FormatMessageA(DWORD dwFlags,	LPCVOID	lpSource, DWORD	dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list *Arguments)
		extrn FormatMessageA:dword ; CODE XREF:	Ordinal1053+2Bp
					; sub_6B19B5B3+23p
					; DATA XREF: ...
; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
		extrn SetUnhandledExceptionFilter:dword	; CODE XREF: Ordinal1086+Cp
					; Ordinal1085+Dp
					; DATA XREF: ...
; BOOL __stdcall FlushFileBuffers(HANDLE hFile)
		extrn FlushFileBuffers:dword ; CODE XREF: Ordinal1124+3p
					; DATA XREF: Ordinal1124+3r
; DWORD	__stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
		extrn GetFileSize:dword	; CODE XREF: Ordinal1128+1Ap
					; DATA XREF: Ordinal1128+1Ar
; BOOL __stdcall SetEndOfFile(HANDLE hFile)
		extrn SetEndOfFile:dword ; CODE	XREF: Ordinal1130+17p
					; DATA XREF: Ordinal1130+17r
; BOOL __stdcall DeleteFileA(LPCSTR lpFileName)
		extrn DeleteFileA:dword	; CODE XREF: Ordinal1135+96p
					; DATA XREF: Ordinal1135+96r
; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
		extrn CreateDirectoryA:dword ; CODE XREF: Ordinal1136+B0p
					; DATA XREF: Ordinal1136+B0r
; DWORD	__stdcall GetFileAttributesA(LPCSTR lpFileName)
		extrn GetFileAttributesA:dword ; CODE XREF: Ordinal1136+97p
					; Ordinal1489+198p
					; DATA XREF: ...
; BOOL __stdcall DuplicateHandle(HANDLE	hSourceProcessHandle, HANDLE hSourceHandle, HANDLE hTargetProcessHandle, LPHANDLE lpTargetHandle, DWORD	dwDesiredAccess, BOOL bInheritHandle, DWORD dwOptions)
		extrn DuplicateHandle:dword ; CODE XREF: Ordinal1158+22p
					; DATA XREF: Ordinal1158+22r
; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
		extrn GetModuleHandleA:dword ; CODE XREF: Ordinal1167+29p
					; Ordinal1166+81p ...
; void __stdcall SetLastError(DWORD dwErrCode)
		extrn SetLastError:dword ; CODE	XREF: Ordinal1166+11Ep
					; DATA XREF: Ordinal1166+11Er
; BOOL __stdcall HeapFree(HANDLE hHeap,	DWORD dwFlags, LPVOID lpMem)
		extrn HeapFree:dword	; CODE XREF: Ordinal1200+32p
					; sub_6B1A8868+10p
					; DATA XREF: ...
; HANDLE __stdcall GetProcessHeap()
		extrn GetProcessHeap:dword ; CODE XREF:	Ordinal1200+2Bp
					; Ordinal1197+20p ...
; BOOL __stdcall VirtualFree(LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType)
		extrn VirtualFree:dword	; CODE XREF: Ordinal1200+21p
					; DATA XREF: Ordinal1200+21r
; SIZE_T __stdcall HeapSize(HANDLE hHeap, DWORD	dwFlags, LPCVOID lpMem)
		extrn HeapSize:dword	; CODE XREF: Ordinal1197+4Bp
					; Ordinal1199+AFp ...
; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
		extrn HeapAlloc:dword	; CODE XREF: Ordinal1197+23p
					; sub_6B1A8856+9p
					; DATA XREF: ...
; LPVOID __stdcall VirtualAlloc(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect)
		extrn VirtualAlloc:dword ; CODE	XREF: Ordinal1198+51p
					; DATA XREF: Ordinal1198+51r
; void __stdcall GetSystemInfo(LPSYSTEM_INFO lpSystemInfo)
		extrn GetSystemInfo:dword ; CODE XREF: Ordinal1198+22p
					; Ordinal1282+5Ap
					; DATA XREF: ...
; LPVOID __stdcall HeapReAlloc(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem, SIZE_T dwBytes)
		extrn HeapReAlloc:dword	; CODE XREF: Ordinal1199+8Dp
					; sub_6B1A8881+1Ap
					; DATA XREF: ...
; HMODULE __stdcall LoadLibraryExA(LPCSTR lpLibFileName, HANDLE	hFile, DWORD dwFlags)
		extrn LoadLibraryExA:dword ; CODE XREF:	Ordinal1227+12p
					; DATA XREF: Ordinal1227+12r
; HLOCAL __stdcall LocalAlloc(UINT uFlags, SIZE_T uBytes)
		extrn LocalAlloc:dword	; CODE XREF: sub_6B19B5B3+5Bp
					; sub_6B1A844A+161p
					; DATA XREF: ...
; DWORD	__stdcall WaitForSingleObject(HANDLE hHandle, DWORD dwMilliseconds)
		extrn WaitForSingleObject:dword	; CODE XREF: Ordinal1361+A5p
					; Ordinal1607+17p ...
; UINT __stdcall SetErrorMode(UINT uMode)
		extrn SetErrorMode:dword ; CODE	XREF: Ordinal1419+8p
					; DATA XREF: Ordinal1419+8r
; BOOL __stdcall CancelIo(HANDLE hFile)
		extrn CancelIo:dword	; CODE XREF: Ordinal1459+15p
					; DATA XREF: Ordinal1459+15r
; UINT __stdcall GetWindowsDirectoryA(LPSTR lpBuffer, UINT uSize)
		extrn GetWindowsDirectoryA:dword ; CODE	XREF: Ordinal1507+44p
					; DATA XREF: Ordinal1507+44r
; DWORD	__stdcall GetLongPathNameA(LPCSTR lpszShortPath, LPSTR lpszLongPath, DWORD cchBuffer)
		extrn GetLongPathNameA:dword ; CODE XREF: Ordinal1489+2A9p
					; Ordinal1489+2FCp
					; DATA XREF: ...
; DWORD	__stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
		extrn GetShortPathNameA:dword ;	CODE XREF: Ordinal1489+1B4p
					; Ordinal1489+1ECp
					; DATA XREF: ...
; DWORD	__stdcall WaitForMultipleObjects(DWORD nCount, const HANDLE *lpHandles,	BOOL bWaitAll, DWORD dwMilliseconds)
		extrn WaitForMultipleObjects:dword ; CODE XREF:	Ordinal1609+29Fp
					; DATA XREF: Ordinal1609+29Fr
; DWORD	__stdcall GetTickCount()
		extrn GetTickCount:dword ; CODE	XREF: Ordinal1609+1Ep
					; Ordinal1609+159p ...
; DWORD	__stdcall WaitForMultipleObjectsEx(DWORD nCount, const HANDLE *lpHandles, BOOL bWaitAll, DWORD dwMilliseconds, BOOL bAlertable)
		extrn WaitForMultipleObjectsEx:dword ; CODE XREF: Ordinal1607+30p
					; Ordinal1581+30p
					; DATA XREF: ...
; BOOL __stdcall TryEnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn TryEnterCriticalSection:dword ; CODE XREF: Ordinal1622+18p
					; DATA XREF: Ordinal1622+18r
; BOOL __stdcall ReleaseSemaphore(HANDLE hSemaphore, LONG lReleaseCount, LPLONG	lpPreviousCount)
		extrn ReleaseSemaphore:dword ; CODE XREF: Ordinal1634+1Fp
					; DATA XREF: Ordinal1634+1Fr
; BOOL __stdcall ReleaseMutex(HANDLE hMutex)
		extrn ReleaseMutex:dword ; CODE	XREF: Ordinal1648+16p
					; DATA XREF: Ordinal1648+16r
; BOOL __stdcall SetEvent(HANDLE hEvent)
		extrn SetEvent:dword	; CODE XREF: Ordinal1659+16p
					; Ordinal1720+18p
					; DATA XREF: ...
; BOOL __stdcall PulseEvent(HANDLE hEvent)
		extrn PulseEvent:dword	; CODE XREF: Ordinal1660+16p
					; DATA XREF: Ordinal1660+16r
; BOOL __stdcall ResetEvent(HANDLE hEvent)
		extrn ResetEvent:dword	; CODE XREF: Ordinal1661+16p
					; DATA XREF: Ordinal1661+16r
; HANDLE __stdcall CreateSemaphoreA(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCSTR	lpName)
		extrn CreateSemaphoreA:dword ; CODE XREF: Ordinal1631+57p
					; DATA XREF: Ordinal1631+57r
; HANDLE __stdcall OpenSemaphoreA(DWORD	dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName)
		extrn OpenSemaphoreA:dword ; CODE XREF:	Ordinal1632+5Cp
					; DATA XREF: Ordinal1632+5Cr
; HANDLE __stdcall CreateMutexA(LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCSTR lpName)
		extrn CreateMutexA:dword ; CODE	XREF: Ordinal1643+54p
					; DATA XREF: Ordinal1643+54r
; HANDLE __stdcall OpenMutexA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName)
		extrn OpenMutexA:dword	; CODE XREF: Ordinal1644+5Cp
					; DATA XREF: Ordinal1644+5Cr
; HANDLE __stdcall CreateEventA(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState,	LPCSTR lpName)
		extrn CreateEventA:dword ; CODE	XREF: Ordinal1654+57p
					; DATA XREF: Ordinal1654+57r
; HANDLE __stdcall OpenEventA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName)
		extrn OpenEventA:dword	; CODE XREF: Ordinal1655+5Cp
					; DATA XREF: Ordinal1655+5Cr
; HANDLE __stdcall OpenProcess(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId)
		extrn OpenProcess:dword	; CODE XREF: Ordinal1680+19p
					; Ordinal1694+22p
					; DATA XREF: ...
; void __stdcall GetSystemTime(LPSYSTEMTIME lpSystemTime)
		extrn GetSystemTime:dword ; CODE XREF: Ordinal1704+21p
					; Ordinal1705+21p
					; DATA XREF: ...
; DWORD	__stdcall SuspendThread(HANDLE hThread)
		extrn SuspendThread:dword ; CODE XREF: Ordinal1737+3p
					; DATA XREF: Ordinal1737+3r
; DWORD	__stdcall ResumeThread(HANDLE hThread)
		extrn ResumeThread:dword ; CODE	XREF: Ordinal1738+3p
					; Ordinal1742+18p ...
; BOOL __stdcall SetThreadPriority(HANDLE hThread, int nPriority)
		extrn SetThreadPriority:dword ;	CODE XREF: Ordinal1745+7p
					; DATA XREF: Ordinal1745+7r
; int __stdcall	GetThreadPriority(HANDLE hThread)
		extrn GetThreadPriority:dword ;	CODE XREF: Ordinal1746+3p
					; DATA XREF: Ordinal1746+3r
; void __stdcall ExitThread(DWORD dwExitCode)
		extrn ExitThread:dword	; CODE XREF: StartAddress+Bp
					; DATA XREF: StartAddress+Br
; HANDLE __stdcall CreateThread(LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags,	LPDWORD	lpThreadId)
		extrn CreateThread:dword ; CODE	XREF: Ordinal1736+9Cp
					; DATA XREF: Ordinal1736+9Cr
; BOOL __stdcall TerminateThread(HANDLE	hThread, DWORD dwExitCode)
		extrn TerminateThread:dword ; CODE XREF: Ordinal1741+56p
					; DATA XREF: Ordinal1741+56r
; LONG __stdcall InterlockedExchangeAdd(volatile LONG *Addend, LONG Value)
		extrn InterlockedExchangeAdd:dword ; CODE XREF:	Ordinal1756+6p
					; Ordinal1766+6p ...
; BOOL __stdcall HeapDestroy(HANDLE hHeap)
		extrn HeapDestroy:dword	; CODE XREF: sub_6B1A883B+14p
					; DATA XREF: sub_6B1A883B+14r
; void __stdcall ExitProcess(UINT uExitCode)
		extrn ExitProcess:dword	; CODE XREF: _report_failure+2Ap
					; DATA XREF: _report_failure+2Ar
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn QueryPerformanceCounter:dword ; CODE XREF: ___security_init_cookie+43p
					; DATA XREF: ___security_init_cookie+43r
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn GetSystemTimeAsFileTime:dword ; CODE XREF: ___security_init_cookie+1Bp
					; DATA XREF: ___security_init_cookie+1Br

;
; Imports from MSVCP71.dll
;
; public: static bool __cdecl std::ios_base::sync_with_stdio(bool)
		extrn ?sync_with_stdio@ios_base@std@@SA_N_N@Z:dword
					; CODE XREF: Ordinal817+B8p
					; Ordinal837+102p ...
; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(char const *)
		extrn ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:dword
					; CODE XREF: sub_6B182017+23p
					; sub_6B1821DC+24p ...
; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::~basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(void)
		extrn ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:dword
					; CODE XREF: sub_6B181395+1Ep
					; DATA XREF: sub_6B181395+1Er ...
; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(class basic_string<char,	struct std::char_traits<char>, class std::allocator<char>>::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const	&)
		extrn ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:dword
					; CODE XREF: sub_6B181357+27p
					; sub_6B18217F+2Dp
					; DATA XREF: ...
; void __cdecl std::_Nomemory(void)
		extrn ?_Nomemory@std@@YAXXZ:dword ; CODE XREF: operator	new(uint)+12p
					; DATA XREF: operator new(uint)+12r

;
; Imports from MSVCR71.dll
;
		extrn __imp__initterm:dword ; DATA XREF: _inittermr
					; .rdata:6B1BDDB4o
; __declspec(dllimport)	void __cdecl terminate(void)
		extrn __imp_?terminate@@YAXXZ:dword ; DATA XREF: terminate(void)r
; __declspec(dllimport)	public:	virtual	__thiscall type_info::~type_info(void)
		extrn __imp_??1type_info@@UAE@XZ:dword
					; DATA XREF: type_info::~type_info(void)r
; _onexit_t __cdecl onexit(_onexit_t Func)
		extrn _onexit:dword	; DATA XREF: __onexit+9r
; int __cdecl vsprintf(char *Dest, const char *Format, va_list Args)
		extrn vsprintf:dword	; CODE XREF: sub_6B181F44+30p
					; sub_6B18F02F+36p
					; DATA XREF: ...
		extrn __imp___dllonexit:dword ;	DATA XREF: __dllonexitr
		extrn __imp__callnewh:dword ; DATA XREF: _callnewhr
		extrn _beginthreadex:dword ; CODE XREF:	Ordinal1736+D1p
					; DATA XREF: Ordinal1736+D1r
; int __cdecl mbsnbicmp(const unsigned __int8 *, const unsigned	__int8 *, size_t)
		extrn _mbsnbicmp:dword	; CODE XREF: Ordinal1698+129p
					; Ordinal1698+13Fp
					; DATA XREF: ...
; int __cdecl vswprintf(wchar_t	*String, size_t	Count, const wchar_t *Format, va_list Ap)
		extrn vswprintf:dword	; CODE XREF: sub_6B19FD7E+31p
					; sub_6B19FDC6+36p
					; DATA XREF: ...
; int __cdecl vscwprintf(const wchar_t *Format,	va_list	ArgList)
		extrn _vscwprintf:dword	; CODE XREF: sub_6B19FD7E+12p
					; sub_6B19FDC6+1Dp
					; DATA XREF: ...
; wchar_t *__cdecl wcschr(const	wchar_t	*Str, wchar_t Ch)
		extrn wcschr:dword	; CODE XREF: sub_6B19FCB2+24p
					; sub_6B19FD0F+1Bp
					; DATA XREF: ...
		extrn _endthreadex:dword ; CODE	XREF: Ordinal1390+56p
					; .text:6B1A5D01p
					; DATA XREF: ...
		extrn __imp___security_error_handler:dword
					; DATA XREF: __security_error_handlerr
		extrn _set_security_error_handler:dword	; CODE XREF: Ordinal1356+Cp
					; Ordinal1355+Dp ...
; _purecall_handler __cdecl set_purecall_handler(_purecall_handler Handler)
		extrn _set_purecall_handler:dword ; CODE XREF: Ordinal1313+Cp
					; Ordinal1312+Dp ...
; int (__cdecl *__cdecl	_set_new_handler(int (__cdecl *)(unsigned int)))(unsigned int)
		extrn ?_set_new_handler@@YAP6AHI@ZP6AHI@Z@Z:dword
					; CODE XREF: Ordinal1240+Cp
					; Ordinal1239+Dp
					; DATA XREF: ...
; int __cdecl _set_new_mode(int)
		extrn ?_set_new_mode@@YAHH@Z:dword ; CODE XREF:	Ordinal1240+19p
					; Ordinal1239+18p
					; DATA XREF: ...
; __declspec(dllimport)	void __cdecl operator delete[](void *)
		extrn __imp_??_V@YAXPAX@Z:dword	; DATA XREF: operator delete[](void *)r
; void __cdecl splitpath(const char *FullPath, char *Drive, char *Dir, char *Filename, char *Ext)
		extrn _splitpath:dword	; CODE XREF: Ordinal1027+83p
					; Ordinal1489+14Ep ...
; int sscanf(const char	*Src, const char *Format, ...)
		extrn sscanf:dword	; CODE XREF: Ordinal969+D1p
					; DATA XREF: Ordinal969+D1r
		extrn _adjust_fdiv:dword ; DATA	XREF: _CRT_INIT(x,x,x)+19r
; FILE *__cdecl	fdopen(int FileHandle, const char *Format)
		extrn _fdopen:dword	; CODE XREF: Ordinal837+CAp
					; Ordinal855+1A6p
					; DATA XREF: ...
; FILE iob[]
		extrn _iob:dword	; DATA XREF: Ordinal817+A6r
					; Ordinal837:loc_6B1923B1r ...
; size_t __cdecl mbscspn(const unsigned	__int8 *, const	unsigned __int8	*)
		extrn _mbscspn:dword	; CODE XREF: sub_6B190B6B+5Ap
					; DATA XREF: sub_6B190B6B+5Ar
; size_t __cdecl mbsspn(const unsigned __int8 *, const unsigned	__int8 *)
		extrn _mbsspn:dword	; CODE XREF: sub_6B190B6B+45p
					; DATA XREF: sub_6B190B6B+45r
; unsigned __int8 *__cdecl mbschr(const	unsigned __int8	*, unsigned int)
		extrn _mbschr:dword	; CODE XREF: sub_6B18EFCF+23p
					; sub_6B18F07C+1Bp ...
; int __cdecl vscprintf(const char *Format, va_list ArgList)
		extrn _vscprintf:dword	; CODE XREF: sub_6B181F44+12p
					; sub_6B18F02F+1Dp
					; DATA XREF: ...
; int __cdecl mbsicmp(const unsigned __int8 *, const unsigned __int8 *)
		extrn _mbsicmp:dword	; CODE XREF: Ordinal147+C5p
					; Ordinal789+14p ...
; unsigned __int8 *__cdecl mbsinc(const	unsigned __int8	*)
		extrn _mbsinc:dword	; CODE XREF: sub_6B182485+1Fp
					; sub_6B18EDED+51p ...
; public: __thiscall exception::exception(void)
		extrn ??0exception@@QAE@XZ:dword ; CODE	XREF: sub_6B181357+11p
					; DATA XREF: sub_6B181357+11r
; public: virtual __thiscall exception::~exception(void)
		extrn ??1exception@@UAE@XZ:dword ; CODE	XREF: sub_6B181395+2Ap
					; DATA XREF: sub_6B181395+2Ar ...
; __declspec(dllimport)	void __cdecl operator delete(void *)
		extrn __imp_??3@YAXPAX@Z:dword ; DATA XREF: operator delete(void *)r
		extrn __CxxFrameHandler:dword
					; DATA XREF: unknown_libname_18:___CxxFrameHandlerr
; size_t __cdecl strlen(const char *Str)
		extrn __imp_strlen:dword ; DATA	XREF: strlenr
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn __imp_memset:dword ; DATA	XREF: memsetr
		extrn __imp__CxxThrowException:dword ; DATA XREF: _CxxThrowExceptionr
		extrn __imp__except_handler3:dword ; DATA XREF:	_except_handler3r
; void __cdecl free(void *Memory)
		extrn __imp_free:dword	; CODE XREF: sub_6B1A9881-9DC1p
					; Ordinal1520+78p ...
; void *__cdecl	malloc(size_t Size)
		extrn __imp_malloc:dword ; CODE	XREF: sub_6B1811AA+2Ap
					; sub_6B19FAC8+29p ...
; __declspec(dllimport)	public:	__thiscall exception::exception(class exception	const &)
		extrn __imp_??0exception@@QAE@ABV0@@Z:dword ; CODE XREF: sub_6B18217F+16p
					; sub_6B18364A+7p
					; DATA XREF: ...
		extrn __imp__purecall:dword ; DATA XREF: _purecallr
; __declspec(dllimport)	public:	virtual	char const * __thiscall	exception::what(void)const
		extrn __imp_?what@exception@@UBEPBDXZ:dword
					; DATA XREF: exception::what(void)r
		extrn __imp___CppXcptFilter:dword ; DATA XREF: __CppXcptFilterr
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
; void *__cdecl	memmove(void *Dst, const void *Src, size_t Size)
		extrn memmove:dword	; CODE XREF: sub_6B181DE8+44p
					; sub_6B18371F+1Ap ...
; int __cdecl open_osfhandle(__int32, int)
		extrn _open_osfhandle:dword ; CODE XREF: Ordinal837+A6p
					; Ordinal855+182p
					; DATA XREF: ...
; int __cdecl mbscmp(const unsigned __int8 *, const unsigned __int8 *)
		extrn _mbscmp:dword	; CODE XREF: sub_6B1817BD+Ep
					; sub_6B196846+Bp
					; DATA XREF: ...
; unsigned __int8 *__cdecl mbsstr(const	unsigned __int8	*, const unsigned __int8 *)
		extrn _mbsstr:dword	; CODE XREF: sub_6B18EE66+6Fp
					; sub_6B18EE66+D6p ...
; size_t __cdecl wcslen(const wchar_t *Str)
		extrn wcslen:dword	; CODE XREF: sub_6B18C6AF+13p
					; sub_6B19FE85+11p ...
; int __cdecl memcmp(const void	*Buf1, const void *Buf2, size_t	Size)
		extrn __imp_memcmp:dword ; DATA	XREF: memcmpr
; public: __thiscall exception::exception(char const * const &)
		extrn ??0exception@@QAE@ABQBD@Z:dword ;	CODE XREF: sub_6B183341+8p
					; Ordinal166+62p ...

;
; Imports from OLEAUT32.dll
;
; SAFEARRAY *__stdcall SafeArrayCreateVector(VARTYPE vt, LONG lLbound, ULONG cElements)
		extrn SafeArrayCreateVector:dword ; CODE XREF: Ordinal1856+20p
					; DATA XREF: Ordinal1856+20r ...
; HRESULT __stdcall SafeArrayAccessData(SAFEARRAY *psa,	void **ppvData)
		extrn SafeArrayAccessData:dword	; CODE XREF: Ordinal1875+2Ep
					; DATA XREF: Ordinal1875+2Er
; HRESULT __stdcall SafeArrayUnaccessData(SAFEARRAY *psa)
		extrn SafeArrayUnaccessData:dword ; CODE XREF: Ordinal1857+1Bp
					; Ordinal1876+22p
					; DATA XREF: ...
; SAFEARRAY *__stdcall SafeArrayCreate(VARTYPE vt, UINT	cDims, SAFEARRAYBOUND *rgsabound)
		extrn SafeArrayCreate:dword ; CODE XREF: Ordinal1815+2Dp
					; DATA XREF: Ordinal1815+2Dr
; HRESULT __stdcall SafeArrayLock(SAFEARRAY *psa)
		extrn SafeArrayLock:dword ; CODE XREF: Ordinal1835+Ap
					; DATA XREF: Ordinal1835+Ar
; HRESULT __stdcall SafeArrayPtrOfIndex(SAFEARRAY *psa,	LONG *rgIndices, void **ppvData)
		extrn SafeArrayPtrOfIndex:dword	; CODE XREF: Ordinal1834+38p
					; DATA XREF: Ordinal1834+38r
; HRESULT __stdcall SafeArrayPutElement(SAFEARRAY *psa,	LONG *rgIndices, void *pv)
		extrn SafeArrayPutElement:dword	; CODE XREF: Ordinal1833+4Ep
					; DATA XREF: Ordinal1833+4Er
; HRESULT __stdcall SafeArrayGetElement(SAFEARRAY *psa,	LONG *rgIndices, void *pv)
		extrn SafeArrayGetElement:dword	; CODE XREF: Ordinal1831+41p
					; DATA XREF: Ordinal1831+41r
; HRESULT __stdcall SafeArrayUnlock(SAFEARRAY *psa)
		extrn SafeArrayUnlock:dword ; CODE XREF: Ordinal1816+1Bp
					; Ordinal1836+Ap
					; DATA XREF: ...
; void __stdcall VariantInit(VARIANTARG	*pvarg)
		extrn VariantInit:dword	; CODE XREF: Ordinal1805+10p
					; Ordinal1822+29p ...
; void __stdcall SysFreeString(BSTR bstrString)
		extrn SysFreeString:dword ; CODE XREF: sub_6B19B45A+Ap
					; DATA XREF: sub_6B19B45A+Ar
; BSTR __stdcall SysAllocString(const OLECHAR *psz)
		extrn SysAllocString:dword ; CODE XREF:	sub_6B19B3F5+12p
					; DATA XREF: sub_6B19B3F5+12r
; BSTR __stdcall SysAllocStringByteLen(LPCSTR psz, UINT	len)
		extrn SysAllocStringByteLen:dword ; CODE XREF: Ordinal708+36p
					; sub_6B19B429+13p
					; DATA XREF: ...
; UINT __stdcall SysStringByteLen(BSTR bstr)
		extrn SysStringByteLen:dword ; CODE XREF: Ordinal707+12p
					; sub_6B19B429+Ap
					; DATA XREF: ...
; HRESULT __stdcall VariantClear(VARIANTARG *pvarg)
		extrn VariantClear:dword ; CODE	XREF: Ordinal525+Dp
					; Ordinal580+42p ...
; HRESULT __stdcall VariantCopyInd(VARIANT *pvarDest, const VARIANTARG *pvargSrc)
		extrn VariantCopyInd:dword ; CODE XREF:	Ordinal189+44p
					; Ordinal581+47p ...
; HRESULT __stdcall SafeArrayRedim(SAFEARRAY *psa, SAFEARRAYBOUND *psaboundNew)
		extrn SafeArrayRedim:dword ; CODE XREF:	Ordinal1845+3Fp
					; DATA XREF: Ordinal1845+3Fr

;
; Imports from SHELL32.dll
;
; BOOL __stdcall SHGetSpecialFolderPathA(HWND hwnd, LPSTR pszPath, int csidl, BOOL fCreate)
		extrn SHGetSpecialFolderPathA:dword ; CODE XREF: Ordinal286+6Dp
					; Ordinal295+49p
					; DATA XREF: ...

;
; Imports from SHLWAPI.dll
;
; LPSTR	__stdcall PathAddBackslashA(LPSTR pszPath)
		extrn PathAddBackslashA:dword ;	CODE XREF: Ordinal1136+54p
					; DATA XREF: Ordinal1136+54r ...
; BOOL __stdcall PathIsUNCA(LPCSTR pszPath)
		extrn PathIsUNCA:dword	; CODE XREF: Ordinal1136+5Bp
					; DATA XREF: Ordinal1136+5Br
; LPSTR	__stdcall PathSkipRootA(LPCSTR pszPath)
		extrn PathSkipRootA:dword ; CODE XREF: Ordinal1136+66p
					; DATA XREF: Ordinal1136+66r
; BOOL __stdcall StrTrimA(LPSTR	psz, LPCSTR pszTrimChars)
		extrn StrTrimA:dword	; CODE XREF: Ordinal1053+53p
					; DATA XREF: Ordinal1053+53r
; LSTATUS __stdcall SHDeleteKeyA(HKEY hkey, LPCSTR pszSubKey)
		extrn SHDeleteKeyA:dword ; CODE	XREF: Ordinal1323+14p
					; DATA XREF: Ordinal1323+14r
; LSTATUS __stdcall SHDeleteEmptyKeyA(HKEY hkey, LPCSTR	pszSubKey)
		extrn SHDeleteEmptyKeyA:dword ;	CODE XREF: Ordinal1324+14p
					; DATA XREF: Ordinal1324+14r

;
; Imports from USER32.dll
;
; BOOL __stdcall UnregisterClassA(LPCSTR lpClassName, HINSTANCE	hInstance)
		extrn UnregisterClassA:dword ; CODE XREF: Ordinal1167+35p
					; DATA XREF: Ordinal1167+35r ...
; int wsprintfA(LPSTR, LPCSTR, ...)
		extrn wsprintfA:dword	; CODE XREF: Ordinal146+1BBp
					; Ordinal142+458p ...
; LPSTR	__stdcall CharNextA(LPCSTR lpsz)
		extrn CharNextA:dword	; CODE XREF: Ordinal1136+D6p
					; DATA XREF: Ordinal1136+D6r
; LONG __stdcall SetWindowLongA(HWND hWnd, int nIndex, LONG dwNewLong)
		extrn SetWindowLongA:dword ; CODE XREF:	Ordinal1169+7Cp
					; Ordinal1166+12Ap
					; DATA XREF: ...
; LPSTR	__stdcall CharPrevA(LPCSTR lpszStart, LPCSTR lpszCurrent)
		extrn CharPrevA:dword	; CODE XREF: Ordinal1136+6Ep
					; DATA XREF: Ordinal1136+6Er
; DWORD	__stdcall MsgWaitForMultipleObjectsEx(DWORD nCount, const HANDLE *pHandles, DWORD dwMilliseconds, DWORD	dwWakeMask, DWORD dwFlags)
		extrn MsgWaitForMultipleObjectsEx:dword	; CODE XREF: Ordinal1609+194p
					; DATA XREF: Ordinal1609+194r
; BOOL __stdcall PeekMessageA(LPMSG lpMsg, HWND	hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg)
		extrn PeekMessageA:dword ; CODE	XREF: Ordinal1609+1E6p
					; Ordinal1609+2D7p
					; DATA XREF: ...
; BOOL __stdcall IsWindowUnicode(HWND hWnd)
		extrn IsWindowUnicode:dword ; CODE XREF: Ordinal1609+21Cp
					; DATA XREF: Ordinal1609+21Cr
; BOOL __stdcall GetMessageW(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax)
		extrn GetMessageW:dword	; CODE XREF: Ordinal1609+254p
					; DATA XREF: Ordinal1609+254r
; LRESULT __stdcall DispatchMessageW(const MSG *lpMsg)
		extrn DispatchMessageW:dword ; CODE XREF: Ordinal1609:loc_6B1A20A5p
					; DATA XREF: Ordinal1609:loc_6B1A20A5r
; int __stdcall	GetSystemMetrics(int nIndex)
		extrn GetSystemMetrics:dword ; CODE XREF: Ordinal1278+5p
					; DATA XREF: Ordinal1278+5r
; BOOL __stdcall GetClassInfoExA(HINSTANCE hInstance, LPCSTR lpszClass,	LPWNDCLASSEXA lpwcx)
		extrn GetClassInfoExA:dword ; CODE XREF: Ordinal1166+84p
					; Ordinal1166+DFp
					; DATA XREF: ...
; ATOM __stdcall RegisterClassExA(const	WNDCLASSEXA *)
		extrn RegisterClassExA:dword ; CODE XREF: Ordinal1166+C4p
					; DATA XREF: Ordinal1166+C4r
; HWND __stdcall CreateWindowExA(DWORD dwExStyle, LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y,	int nWidth, int	nHeight, HWND hWndParent, HMENU	hMenu, HINSTANCE hInstance, LPVOID lpParam)
		extrn CreateWindowExA:dword ; CODE XREF: Ordinal1166+109p
					; DATA XREF: Ordinal1166+109r
; LONG __stdcall GetWindowLongA(HWND hWnd, int nIndex)
		extrn GetWindowLongA:dword ; CODE XREF:	sub_6B198B3B+8p
					; DATA XREF: sub_6B198B3B+8r
; LRESULT __stdcall DefWindowProcA(HWND	hWnd, UINT Msg,	WPARAM wParam, LPARAM lParam)
		extrn DefWindowProcA:dword ; DATA XREF:	Ordinal1169+19r
					; sub_6B198B3B+13r
; BOOL __stdcall GetMessageA(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax)
		extrn GetMessageA:dword	; CODE XREF: Ordinal1168+38p
					; Ordinal1609+22Fp
					; DATA XREF: ...
; BOOL __stdcall TranslateMessage(const	MSG *lpMsg)
		extrn TranslateMessage:dword ; CODE XREF: Ordinal1168+21p
					; Ordinal1609+27Bp
					; DATA XREF: ...
; LRESULT __stdcall DispatchMessageA(const MSG *lpMsg)
		extrn DispatchMessageA:dword ; CODE XREF: Ordinal1168+2Bp
					; Ordinal1609+289p
					; DATA XREF: ...
; BOOL __stdcall DestroyWindow(HWND hWnd)
		extrn DestroyWindow:dword ; CODE XREF: Ordinal1167+16p
					; DATA XREF: Ordinal1167+16r
; BOOL __stdcall PostMessageA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
		extrn PostMessageA:dword ; CODE	XREF: Ordinal1165+11p
					; DATA XREF: Ordinal1165+11r
; BOOL __stdcall PostThreadMessageA(DWORD idThread, UINT Msg, WPARAM wParam, LPARAM lParam)
		extrn PostThreadMessageA:dword ; CODE XREF: Ordinal1165+25p
					; DATA XREF: Ordinal1165+25r

;
; Imports from VERSION.dll
;
; DWORD	__stdcall GetFileVersionInfoSizeA(LPCSTR lptstrFilename, LPDWORD lpdwHandle)
		extrn __imp_GetFileVersionInfoSizeA:dword
					; DATA XREF: GetFileVersionInfoSizeAr
					; .rdata:6B1BDDDCo
; BOOL __stdcall VerQueryValueA(LPCVOID	pBlock,	LPCSTR lpSubBlock, LPVOID *lplpBuffer, PUINT puLen)
		extrn __imp_VerQueryValueA:dword ; DATA	XREF: VerQueryValueAr
; BOOL __stdcall GetFileVersionInfoA(LPCSTR lptstrFilename, DWORD dwHandle, DWORD dwLen, LPVOID	lpData)
		extrn __imp_GetFileVersionInfoA:dword ;	DATA XREF: GetFileVersionInfoAr

;
; Imports from WS2_32.dll
;
; u_short __stdcall ntohs(u_short netshort)
		extrn ntohs:dword	; CODE XREF: Ordinal1435+7p
					; DATA XREF: Ordinal1435+7r ...
; u_short __stdcall htons(u_short hostshort)
		extrn htons:dword	; CODE XREF: Ordinal1436+7p
					; DATA XREF: Ordinal1436+7r
; int __stdcall	WSAStartup(WORD	wVersionRequested, LPWSADATA lpWSAData)
		extrn WSAStartup:dword	; CODE XREF: Ordinal1443+1Dp
					; DATA XREF: Ordinal1443+1Dr
; int __stdcall	WSAGetLastError()
		extrn WSAGetLastError:dword ; CODE XREF: Ordinal1444+Ap
					; Ordinal1449+17p ...
; int __stdcall	WSACleanup()
		extrn WSACleanup:dword	; CODE XREF: Ordinal1444p
					; DATA XREF: Ordinal1444r
; int __stdcall	bind(SOCKET s, const struct sockaddr *name, int	namelen)
		extrn bind:dword	; CODE XREF: Ordinal1449+Cp
					; DATA XREF: Ordinal1449+Cr
; int __stdcall	WSAConnect(SOCKET s, const struct sockaddr *name, int namelen, LPWSABUF	lpCallerData, LPWSABUF lpCalleeData, LPQOS lpSQOS, LPQOS lpGQOS)
		extrn WSAConnect:dword	; CODE XREF: Ordinal1451+17p
					; DATA XREF: Ordinal1451+17r
; int __stdcall	listen(SOCKET s, int backlog)
		extrn listen:dword	; CODE XREF: Ordinal1453+2Bp
					; DATA XREF: Ordinal1453+2Br
; SOCKET __stdcall WSAAccept(SOCKET s, struct sockaddr *addr, LPINT addrlen, LPCONDITIONPROC lpfnCondition, DWORD_PTR dwCallbackData)
		extrn WSAAccept:dword	; CODE XREF: Ordinal1455+36p
					; DATA XREF: Ordinal1455+36r
; int __stdcall	WSARecv(SOCKET s, LPWSABUF lpBuffers, DWORD dwBufferCount, LPDWORD lpNumberOfBytesRecvd, LPDWORD lpFlags, LPWSAOVERLAPPED lpOverlapped,	LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine)
		extrn WSARecv:dword	; CODE XREF: Ordinal1456+37p
					; DATA XREF: Ordinal1456+37r
; BOOL __stdcall WSAGetOverlappedResult(SOCKET s, LPWSAOVERLAPPED lpOverlapped,	LPDWORD	lpcbTransfer, BOOL fWait, LPDWORD lpdwFlags)
		extrn WSAGetOverlappedResult:dword ; CODE XREF:	Ordinal1457+BFp
					; DATA XREF: Ordinal1457+BFr
; struct hostent *__stdcall gethostbyaddr(const	char *addr, int	len, int type)
		extrn gethostbyaddr:dword ; CODE XREF: Ordinal1433+9p
					; DATA XREF: Ordinal1433+9r
; int __stdcall	shutdown(SOCKET	s, int how)
		extrn shutdown:dword	; CODE XREF: Ordinal1458+25p
					; DATA XREF: Ordinal1458+25r
; int __stdcall	closesocket(SOCKET s)
		extrn closesocket:dword	; CODE XREF: Ordinal1459+67p
					; DATA XREF: Ordinal1459+67r
; int __stdcall	setsockopt(SOCKET s, int level,	int optname, const char	*optval, int optlen)
		extrn setsockopt:dword	; CODE XREF: Ordinal1459+3Fp
					; Ordinal1466+17p ...
; int __stdcall	getsockopt(SOCKET s, int level,	int optname, char *optval, int *optlen)
		extrn getsockopt:dword	; CODE XREF: Ordinal1462+25p
					; Ordinal1469+25p ...
; char *__stdcall inet_ntoa(struct in_addr in)
		extrn inet_ntoa:dword	; CODE XREF: Ordinal1433+15p
					; DATA XREF: Ordinal1433+15r
; int __stdcall	getsockname(SOCKET s, struct sockaddr *name, int *namelen)
		extrn getsockname:dword	; CODE XREF: Ordinal1478+18p
					; DATA XREF: Ordinal1478+18r
; int __stdcall	getpeername(SOCKET s, struct sockaddr *name, int *namelen)
		extrn getpeername:dword	; CODE XREF: Ordinal1479+18p
					; DATA XREF: Ordinal1479+18r
; int __stdcall	select(int nfds, fd_set	*readfds, fd_set *writefds, fd_set *exceptfds, const struct timeval *timeout)
		extrn select:dword	; CODE XREF: Ordinal1482+44p
					; Ordinal1483+44p
					; DATA XREF: ...
; SOCKET __stdcall WSASocketA(int af, int type,	int protocol, LPWSAPROTOCOL_INFOA lpProtocolInfo, GROUP	g, DWORD dwFlags)
		extrn WSASocketA:dword	; CODE XREF: Ordinal1445+1Fp
					; DATA XREF: Ordinal1445+1Fr
; struct hostent *__stdcall gethostbyname(const	char *name)
		extrn gethostbyname:dword ; CODE XREF: Ordinal1434+46p
					; DATA XREF: Ordinal1434+46r
; unsigned __int32 __stdcall inet_addr(const char *cp)
		extrn inet_addr:dword	; CODE XREF: Ordinal1434+33p
					; DATA XREF: Ordinal1434+33r
; u_long __stdcall htonl(u_long	hostlong)
		extrn htonl:dword	; CODE XREF: Ordinal1427+Fp
					; DATA XREF: Ordinal1427+Fr
; int __stdcall	WSASend(SOCKET s, LPWSABUF lpBuffers, DWORD dwBufferCount, LPDWORD lpNumberOfBytesSent,	DWORD dwFlags, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE	lpCompletionRoutine)
		extrn WSASend:dword	; CODE XREF: Ordinal1457+87p
					; Ordinal1457+FFp
					; DATA XREF: ...
; int __stdcall	ioctlsocket(SOCKET s, __int32 cmd, u_long *argp)
		extrn ioctlsocket:dword	; CODE XREF: Ordinal1463+1Dp
					; Ordinal1464+1Dp
					; DATA XREF: ...

;
; Imports from ole32.dll
;
; HRESULT __stdcall CreateStreamOnHGlobal(HGLOBAL hGlobal, BOOL	fDeleteOnRelease, LPSTREAM *ppstm)
		extrn CreateStreamOnHGlobal:dword ; CODE XREF: Ordinal710+BAp
					; Ordinal709+60p
					; DATA XREF: ...
; HRESULT __stdcall GetHGlobalFromStream(LPSTREAM pstm,	HGLOBAL	*phglobal)
		extrn GetHGlobalFromStream:dword ; CODE	XREF: Ordinal709+9Cp
					; DATA XREF: Ordinal709+9Cr
; HRESULT __stdcall OleSaveToStream(LPPERSISTSTREAM pPStm, LPSTREAM pStm)
		extrn OleSaveToStream:dword ; CODE XREF: Ordinal709+7Dp
					; DATA XREF: Ordinal709+7Dr
; HRESULT __stdcall CoInitializeEx(LPVOID pvReserved, DWORD dwCoInit)
		extrn CoInitializeEx:dword ; CODE XREF:	Ordinal778+56p
					; DATA XREF: Ordinal778+56r
; void __stdcall CoUninitialize()
		extrn CoUninitialize:dword ; CODE XREF:	Ordinal779+10p
					; DATA XREF: Ordinal779+10r
; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN	pUnkOuter, DWORD dwClsContext, const IID *const	riid, LPVOID *ppv)
		extrn CoCreateInstance:dword ; CODE XREF: Ordinal1146+1Ap
					; DATA XREF: Ordinal1146+1Ar
; void __stdcall CoFreeUnusedLibraries()
		extrn CoFreeUnusedLibraries:dword ; CODE XREF: Ordinal1401:loc_6B19D18Ap
					; DATA XREF: Ordinal1401:loc_6B19D18Ar
; HRESULT __stdcall OleLoadFromStream(LPSTREAM pStm, const IID *const iidInterface, LPVOID *ppvObj)
		extrn OleLoadFromStream:dword ;	CODE XREF: Ordinal710+10Cp
					; DATA XREF: Ordinal710+10Cr


; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 6B1AA45Ch
		dd 2 dup(0)
		dd 4228F01Fh, 0
		dd 2, 5Ah, 3A5F8h, 397F8h
dword_6B1AA47C	dd 4 dup(0)		; DATA XREF: Ordinal155+9o
					; Ordinal200+Co ...
		dd 1, 3	dup(0)
dword_6B1AA49C	dd 0D952F923h, 48DB847Fh, 0ABDD2AB3h, 2E13920Ch	; DATA XREF: Ordinal200+27o
					; Ordinal310+27o
dword_6B1AA4AC	dd 9958D891h, 4C6CC319h, 0BFF9B9BEh, 93A47EB3h ; DATA XREF: Ordinal371+1Bo
					; Ordinal310+53o ...
dword_6B1AA4BC	dd 740AB61Dh, 46CC8B4Ah, 0F786829Dh, 7754052Eh ; DATA XREF: Ordinal277+1Bo
					; Ordinal200+53o ...
dword_6B1AA4CC	dd 5ADE9677h, 482753A9h, 955559A6h, 0E3EF23C9h ; DATA XREF: Ordinal155+20o
dword_6B1AA4DC	dd 0E53AF6AFh, 4FB5D199h, 74D18BDh, 9456D32Ch ;	DATA XREF: Ordinal200+77o
					; Ordinal310+77o ...
dword_6B1AA4EC	dd 3F05A321h, 457843B7h, 0C5CDC893h, 9A144AF6h ; DATA XREF: Ordinal505+1Bo
					; sub_6B189942+13o ...
dword_6B1AA4FC	dd 31324564h, 45333B13h, 99339989h, 0A9F58806h ; DATA XREF: Ordinal389+1Bo
					; Ordinal393+23o ...
dword_6B1AA50C	dd 0BA592838h, 47FDA334h, 0F4B094A8h, 8CB31B69h	; DATA XREF: Ordinal200+9Bo
					; Ordinal310+9Bo ...
; char aCcl35[]
aCcl35		db 'ccL35',0            ; DATA XREF: sub_6B1A9B73o
		align 4
		dd offset dword_6B1AA574
		dd offset dword_6B1AA570
		dd offset dword_6B1AA56C
		dd offset byte_6B1AA568
		dd offset aVal		; "Val"
		dd offset aForceremove	; "ForceRemove"
		dd offset aNoremove	; "NoRemove"
		dd offset aDelete	; "Delete"
aDelete		db 'Delete',0           ; DATA XREF: .rdata:6B1AA540o
		align 4
aNoremove	db 'NoRemove',0         ; DATA XREF: .rdata:6B1AA53Co
		align 4
aForceremove	db 'ForceRemove',0      ; DATA XREF: .rdata:6B1AA538o
aVal		db 'Val',0              ; DATA XREF: .rdata:6B1AA534o
; unsigned __int8 byte_6B1AA568
byte_6B1AA568	db 42h			; DATA XREF: Ordinal1264+34o
					; .rdata:6B1AA530o
		align 4
dword_6B1AA56C	dd 44h			; DATA XREF: .rdata:6B1AA52Co
					; .rdata:6B1B5F74o
dword_6B1AA570	dd 4Dh			; DATA XREF: .rdata:6B1AA528o
dword_6B1AA574	dd 53h			; DATA XREF: .rdata:6B1AA524o
; IID rclsid
rclsid		dd 323h			; Data1	; DATA XREF: Ordinal1146+15o
		dw 0			; Data2
		dw 0			; Data3
		db 0C0h, 6 dup(0), 46h	; Data4
stru_6B1AA588	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6B181174, \
					; DATA XREF: sub_6B18115A+2o
				   offset loc_6B181182>	; SEH scope table for function 6B18115A
		dd offset aSoftwareSymant ; "Software\\Symantec\\Common	Client"
		dd offset aVersion	; "Version"
; char aVersion[]
aVersion	db 'Version',0          ; DATA XREF: Ordinal130+33o
					; .rdata:6B1AA598o ...
; char aSoftwareSymant[]
aSoftwareSymant	db 'Software\Symantec\Common Client',0 ; DATA XREF: Ordinal130+17o
					; .rdata:6B1AA594o
; char aCcommonclienti[]
aCcommonclienti	db 'CCommonClientInfo::GetVersion() : reg.Open() == FALSE',0Ah,0
					; DATA XREF: Ordinal130:loc_6B181256o
		align 4
off_6B1AA5FC	dd offset sub_6B1812BD	; DATA XREF: Ordinal131+8o Ordinal132o
		dd offset Ordinal907
aCcrashhandle_1	db 'CCrashHandler::LoadOptions() : Enable() == FALSE',0Ah,0
					; DATA XREF: Ordinal133+5Fo
		align 4
aCcrashhandle_0	db 'CCrashHandler::LoadOptions() : SetOptions() == FALSE',0Ah,0
					; DATA XREF: Ordinal133+4Do
		align 10h
; char aCcrashhandlerL[]
aCcrashhandlerL	db 'CCrashHandler::LoadOptions() : debugOptions.Load() == FALSE',0Ah,0
					; DATA XREF: Ordinal133+2Fo
		align 10h
		dd offset aSoftwareSyma_0 ; "Software\\Symantec\\Common	Client\\Debug"
		dd offset aCrashhandler	; "CrashHandler"
		dd offset aDebugoutput	; "DebugOutput"
		dd offset aDumponnew	; "DumpOnNew"
		dd offset aTerminateonnew ; "TerminateOnNew"
		dd offset aThrowonnew	; "ThrowOnNew"
		dd offset aDumponexceptio ; "DumpOnException"
		dd offset aTerminateonexc ; "TerminateOnException"
		dd offset aDumponpurecall ; "DumpOnPurecall"
		dd offset aTerminateonpur ; "TerminateOnPurecall"
		dd offset aDumponsecurity ; "DumpOnSecurity"
		dd offset aTerminateonsec ; "TerminateOnSecurity"
		dd offset aDirectory	; "Directory"
		dd offset aDumptype	; "DumpType"
		dd offset aAppenddatetime ; "AppendDateTimeToFile"
		dd offset aAppendversiont ; "AppendVersionToFile"
		dd offset aDebugtype	; "DebugType"
		dd offset aDirectory	; "Directory"
		dd offset aOutputtodebugg ; "OutputToDebugger"
		dd offset aOutputtofile	; "OutputToFile"
		dd offset aAppendprocessi ; "AppendProcessIdToFile"
		dd offset aPrependthreadi ; "PrependThreadId"
		dd offset aPrependprocess ; "PrependProcessId"
		dd offset aPrependdatetim ; "PrependDateTime"
		dd offset aPrependmodulen ; "PrependModuleName"
		dd offset aPrependtype	; "PrependType"
		dd offset aAppendnewline ; "AppendNewLine"
		dd offset pszSubKey	; "Modules"
		dd offset aExclusivemodul ; "ExclusiveModules"
; char aExclusivemodul[]
aExclusivemodul	db 'ExclusiveModules',0 ; DATA XREF: Ordinal145+2CFo
					; Ordinal142+2AFo ...
		align 4
; char pszSubKey[]
pszSubKey	db 'Modules',0          ; DATA XREF: Ordinal145+2F9o
					; Ordinal142+2CEo ...
; char aAppendnewline[]
aAppendnewline	db 'AppendNewLine',0    ; DATA XREF: Ordinal145+2E7o
					; Ordinal142+287o ...
		align 10h
; char aPrependtype[]
aPrependtype	db 'PrependType',0      ; DATA XREF: Ordinal145+2B7o
					; Ordinal142+29Bo ...
; char aPrependmodulen[]
aPrependmodulen	db 'PrependModuleName',0 ; DATA XREF: Ordinal145+29Fo
					; Ordinal142+273o ...
		align 10h
; char aPrependdatetim[]
aPrependdatetim	db 'PrependDateTime',0  ; DATA XREF: Ordinal145+287o
					; Ordinal142+25Fo ...
; char aPrependprocess[]
aPrependprocess	db 'PrependProcessId',0 ; DATA XREF: Ordinal145+26Fo
					; Ordinal142+24Bo ...
		align 4
; char aPrependthreadi[]
aPrependthreadi	db 'PrependThreadId',0  ; DATA XREF: Ordinal145+257o
					; Ordinal142+237o ...
; char aAppendprocessi[]
aAppendprocessi	db 'AppendProcessIdToFile',0 ; DATA XREF: Ordinal145+23Fo
					; Ordinal142+223o ...
		align 4
; char aOutputtofile[]
aOutputtofile	db 'OutputToFile',0     ; DATA XREF: Ordinal145+227o
					; Ordinal142+20Fo ...
		align 4
; char aOutputtodebugg[]
aOutputtodebugg	db 'OutputToDebugger',0 ; DATA XREF: Ordinal145+20Fo
					; Ordinal142+1FBo ...
		align 10h
; char aDebugtype[]
aDebugtype	db 'DebugType',0        ; DATA XREF: Ordinal145+1E2o
					; Ordinal142+1D3o ...
		align 4
; char aAppendversiont[]
aAppendversiont	db 'AppendVersionToFile',0 ; DATA XREF: Ordinal145+1A2o
					; Ordinal142+1A2o ...
; char aAppenddatetime[]
aAppenddatetime	db 'AppendDateTimeToFile',0 ; DATA XREF: Ordinal145+18Ao
					; Ordinal142+18Eo ...
		align 4
; char aDumptype[]
aDumptype	db 'DumpType',0         ; DATA XREF: Ordinal145+172o
					; Ordinal142+17Ao ...
		align 4
; char aDirectory[]
aDirectory	db 'Directory',0        ; DATA XREF: Ordinal145+156o
					; Ordinal142+166o ...
		align 10h
; char aTerminateonsec[]
aTerminateonsec	db 'TerminateOnSecurity',0 ; DATA XREF: Ordinal145+140o
					; Ordinal142+152o ...
; char aDumponsecurity[]
aDumponsecurity	db 'DumpOnSecurity',0   ; DATA XREF: Ordinal145+128o
					; Ordinal142+13Eo ...
		align 4
; char aTerminateonpur[]
aTerminateonpur	db 'TerminateOnPurecall',0 ; DATA XREF: Ordinal145+110o
					; Ordinal142+12Ao ...
; char aDumponpurecall[]
aDumponpurecall	db 'DumpOnPurecall',0   ; DATA XREF: Ordinal145+F8o
					; Ordinal142+116o ...
		align 4
; char aTerminateonexc[]
aTerminateonexc	db 'TerminateOnException',0 ; DATA XREF: Ordinal145+E0o
					; Ordinal142+102o ...
		align 10h
; char aDumponexceptio[]
aDumponexceptio	db 'DumpOnException',0  ; DATA XREF: Ordinal145+C8o
					; Ordinal142+EEo ...
; char aThrowonnew[]
aThrowonnew	db 'ThrowOnNew',0       ; DATA XREF: Ordinal145+B0o
					; Ordinal142+DAo ...
		align 4
; char aTerminateonnew[]
aTerminateonnew	db 'TerminateOnNew',0   ; DATA XREF: Ordinal145+98o
					; Ordinal142+C6o ...
		align 4
; char aDumponnew[]
aDumponnew	db 'DumpOnNew',0        ; DATA XREF: Ordinal145+80o
					; Ordinal142+B2o ...
		align 4
aDebugoutput	db 'DebugOutput',0      ; DATA XREF: Ordinal148+20o
					; .rdata:6B1AA6B8o
aCrashhandler	db 'CrashHandler',0     ; DATA XREF: Ordinal148+1o
					; .rdata:6B1AA6B4o
		align 4
aSoftwareSyma_0	db 'Software\Symantec\Common Client\Debug',0 ; DATA XREF: Ordinal144o
					; Ordinal141o ...
		align 4
off_6B1AA90C	dd offset sub_6B1813E0	; DATA XREF: sub_6B181357+21o
					; sub_6B181395+11o ...
		dd offset unknown_libname_1 ; Microsoft	VisualC	2-10/net runtime
off_6B1AA914	dd offset sub_6B1813FC	; DATA XREF: sub_6B181418o
					; sub_6B182017+42o ...
		dd offset unknown_libname_1 ; Microsoft	VisualC	2-10/net runtime
off_6B1AA91C	dd offset sub_6B181423	; DATA XREF: sub_6B18143Fo
					; sub_6B1821DC+43o ...
		dd offset unknown_libname_1 ; Microsoft	VisualC	2-10/net runtime
		align 8
; char aCdebugoptionsB[]
aCdebugoptionsB	db 'CDebugOptions::BuildRegPath() : CStringConvert::Format() == false'
					; DATA XREF: Ordinal148:loc_6B181589o
		db 0Ah,0
		align 4
; char aSS[]
aSS		db '%s\%s',0            ; DATA XREF: Ordinal148+Ao
		align 4
; char aCdebugoption_2[]
aCdebugoption_2	db 'CDebugOptions::Save() : reg.SetNumber() == FALSE',0Ah,0
					; DATA XREF: Ordinal145:loc_6B181CB2o
					; Ordinal145:loc_6B181CB9o
		align 4
; char aCdebugoption_1[]
aCdebugoption_1	db 'CDebugOptions::Save() : mapReg.Open() == FALSE',0Ah,0
					; DATA XREF: Ordinal145+32Co
; char aCdebugoption_0[]
aCdebugoption_0	db 'CDebugOptions::Save() : reg.Open() == FALSE',0Ah,0
					; DATA XREF: Ordinal145+67o
					; Ordinal145+1CBo
		align 4
; char aCdebugoptionsS[]
aCdebugoptionsS	db 'CDebugOptions::Save() : BuildRegPath() == FALSE',0Ah,0
					; DATA XREF: Ordinal145+30o
		align 4
aMapSetTTooLong	db 'map/set<T> too long',0 ; DATA XREF: sub_6B182017+1Bo
					; sub_6B18653A+1Bo ...
aInvalidMapSetT	db 'invalid map/set<T> iterator',0 ; DATA XREF: sub_6B1821DC+1Co
					; sub_6B1866E9+1Co ...
; char a0x08x[]
a0x08x		db '0x%08X',0           ; DATA XREF: Ordinal146+1B5o
					; Ordinal142+452o ...
		align 4
; char aCatlexception[]
aCatlexception	db 'CAtlException',0    ; DATA XREF: Ordinal146+1A0o
					; Ordinal142+437o ...
		align 4
; char aCccatchS[]
aCccatchS	db 'CCCATCH : %s',0Ah,0 ; DATA XREF: Ordinal146+184o
					; Ordinal146+1D9o ...
		align 4
; char aStdBad_alloc[]
aStdBad_alloc	db 'std::bad_alloc',0   ; DATA XREF: Ordinal146+15Do
					; Ordinal142+3E5o ...
		align 4
; char aS_dmp[]
aS_dmp		db '\%s.dmp',0          ; DATA XREF: Ordinal146+140o
aCdebugoption_3	db 'CDebugOptions::Apply()',0 ; DATA XREF: Ordinal146:loc_6B1826E0o
		align 4
; char aCdebugoptionsA[]
aCdebugoptionsA	db 'CDebugOptions::Apply() : path.SplitPath() == false',0Ah,0
					; DATA XREF: Ordinal146+F0o
aCdebugoption_6	db 'CDebugOptions::Load()',0 ; DATA XREF: Ordinal142:loc_6B182EA8o
		align 10h
aCdebugoption_5	db 'CDebugOptions::Load() : mapReg.GetNumber() == FALSE',0Ah,0
					; DATA XREF: Ordinal142+37Do
		align 4
; char aCdebugoption_4[]
aCdebugoption_4	db 'CDebugOptions::Load() : mapReg.EnumValue() != ERROR_SUCCESS',0Ah,0
					; DATA XREF: Ordinal142+340o
		align 4
; char aCdebugoptionsL[]
aCdebugoptionsL	db 'CDebugOptions::Load() : BuildRegPath() == FALSE',0Ah,0
					; DATA XREF: Ordinal142+66o
		align 4
off_6B1AABBC	dd offset sub_6B1830F0	; DATA XREF: Ordinal138+6o
					; Ordinal135+6o
off_6B1AABC0	dd offset sub_6B1831FA	; DATA XREF: Ordinal149+Co Ordinal150o
		dd offset Ordinal993
		dd offset Ordinal153
off_6B1AABCC	dd offset sub_6B183398	; DATA XREF: sub_6B183341+Eo
					; sub_6B1833B4o ...
		dd offset ?what@exception@@UBEPBDXZ ; exception::what(void)
off_6B1AABD4	dd offset sub_6B183404	; DATA XREF: sub_6B1833E7+Co
					; sub_6B183404+8o ...
		dd offset Ordinal1430
off_6B1AABDC	dd offset Ordinal155	; DATA XREF: Ordinal158+Co
					; Ordinal154+18o
		dd offset Ordinal394
		dd offset Ordinal157
		dd offset Ordinal159
		dd offset Ordinal160
		dd offset Ordinal161
		dd offset Ordinal162
		dd offset Ordinal163
		dd offset Ordinal164
off_6B1AAC00	dd offset sub_6B1834EF	; DATA XREF: Ordinal158+6o
					; Ordinal154+12o
		dd offset Ordinal1430
aBadAllocation	db 'bad allocation',0   ; DATA XREF: Ordinal166+5Bo
					; Ordinal276+84o ...
		align 4
aCfilestreamimp	db 'CFileStreamImpl::CreateFileStreamImpl()',0 ; DATA XREF: Ordinal166+1Co
aInvalidDequeTS	db 'invalid deque<T> subscript',0 ; DATA XREF: sub_6B183681+Do
		align 4
aDequeTTooLong	db 'deque<T> too long',0 ; DATA XREF: sub_6B1836DE+Do
		align 10h
; char aCindexvaluec_2[]
aCindexvaluec_2	db 'CIndexValueCollection::Save() : (*pos).Save() == false',0Ah,0
					; DATA XREF: Ordinal192:loc_6B183937o
aCindexvaluec_1	db 'CIndexValueCollection::SAveArchive() : Archive.Write() == FALSE',0Ah
					; DATA XREF: Ordinal192:loc_6B183930o
		db 0
		align 4
aCindexvaluec_0	db 'CIndexValueCollection::Save() : Archive.Write() == FALSE',0Ah,0
					; DATA XREF: Ordinal192:loc_6B1838D6o
		align 4
aCindexvaluecol	db 'CIndexValueCollection::Save() : CValueCollection::Save() == false'
					; DATA XREF: Ordinal192+2Ao
		db 0Ah,0
		align 10h
; char aCindexvaluec_3[]
aCindexvaluec_3	db 'CIndexValueCollection::GetReadValue() : dwIndex >= m_ValueDeque.s'
					; DATA XREF: Ordinal193+1Bo
		db 'ize()',0Ah,0
; char aCindexvaluec_4[]
aCindexvaluec_4	db 'CIndexValueCollection::GetWriteValue() : dwIndex >= m_ValueDeque.'
					; DATA XREF: Ordinal194+17o
		db 'size()',0Ah,0
		align 4
off_6B1AAE04	dd offset sub_6B184D5D	; DATA XREF: Ordinal167+Ao
					; Ordinal168+3o ...
		dd offset Ordinal192
		dd offset Ordinal191
		dd offset Ordinal592
		dd offset Ordinal193
		dd offset Ordinal194
		align 10h
; char aCindexvaluec_5[]
aCindexvaluec_5	db 'CIndexValueCollection::Remove() : nKeyIndex >= m_ValueDeque.size('
					; DATA XREF: Ordinal172+26o
		db ')',0Ah,0
aCindexvaluec_6	db 'CIndexValueCollection::Load()',0 ; DATA XREF: Ordinal198+1Do
					; Ordinal191:loc_6B184F54o
		align 4
; char aCindexvaluec_7[]
aCindexvaluec_7	db 'CIndexValueCollection::AddValue(bool) : AddValue() == false',0Ah,0
					; DATA XREF: Ordinal174+2Do
		align 4
; char aCindexvaluec_8[]
aCindexvaluec_8	db 'CIndexValueCollection::AddValue(CHAR) : AddValue() == false',0Ah,0
					; DATA XREF: Ordinal175+2Do
		align 4
; char aCindexvaluec_9[]
aCindexvaluec_9	db 'CIndexValueCollection::AddValue(BYTE) : AddValue() == false',0Ah,0
					; DATA XREF: Ordinal176+2Do
		align 4
; char aCindexvalue_10[]
aCindexvalue_10	db 'CIndexValueCollection::AddValue(SHORT) : AddValue() == false',0Ah,0
					; DATA XREF: Ordinal177+2Do
		align 4
; char aCindexvalue_11[]
aCindexvalue_11	db 'CIndexValueCollection::AddValue(WORD) : AddValue() == false',0Ah,0
					; DATA XREF: Ordinal178+2Do
		align 4
; char aCindexvalue_12[]
aCindexvalue_12	db 'CIndexValueCollection::AddValue(LONG) : AddValue() == false',0Ah,0
					; DATA XREF: Ordinal179+2Do
		align 4
; char aCindexvalue_13[]
aCindexvalue_13	db 'CIndexValueCollection::AddValue(DWORD) : AddValue() == false',0Ah,0
					; DATA XREF: Ordinal180+2Do
		align 8
; char aCindexvalue_14[]
aCindexvalue_14	db 'CIndexValueCollection::AddValue(LONGLONG) : AddValue() == false',0Ah
					; DATA XREF: Ordinal181+2Do
		db 0
		align 10h
; char aCindexvalue_15[]
aCindexvalue_15	db 'CIndexValueCollection::AddValue(ULONGLONG) : AddValue() == false',0Ah
					; DATA XREF: Ordinal182+2Do
		db 0
		align 4
; char aCindexvalue_16[]
aCindexvalue_16	db 'CIndexValueCollection::AddValue(double) : AddValue() == false',0Ah,0
					; DATA XREF: Ordinal183+2Do
		align 4
; char aCindexvalue_17[]
aCindexvalue_17	db 'CIndexValueCollection::AddValue(GUID) : AddValue() == false',0Ah,0
					; DATA XREF: Ordinal184+2Do
		align 8
; char aCindexvalue_18[]
aCindexvalue_18	db 'CIndexValueCollection::AddValue(SYSTEMTIME) : AddValue() == false'
					; DATA XREF: Ordinal185+2Do
		db 0Ah,0
		align 10h
aCindexvalue_20	db 'CIndexValueCollection::AddValue(LPCSTR) : CStringConvert::Copy() '
					; DATA XREF: Ordinal186+4Fo
		db '== false',0Ah,0
		align 4
; char aCindexvalue_19[]
aCindexvalue_19	db 'CIndexValueCollection::AddValue(LPCSTR) : AddValue() == false',0Ah,0
					; DATA XREF: Ordinal186+2Do
		align 10h
aCindexvalue_22	db 'CIndexValueCollection::AddValue(LPCWSTR) : CStringConvert::Copy()'
					; DATA XREF: Ordinal187+4Fo
		db ' == false',0Ah,0
		align 10h
; char aCindexvalue_21[]
aCindexvalue_21	db 'CIndexValueCollection::AddValue(LPCWSTR) : AddValue() == false',0Ah,0
					; DATA XREF: Ordinal187+2Do
aCindexvalue_25	db 'CIndexValueCollection::AddValue(LPCVOID) : pValue->m_Static.m_Mem'
					; DATA XREF: Ordinal188+74o
		db 'ory.Copy() == FALSE',0Ah,0
		align 4
; char aCindexvalue_24[]
aCindexvalue_24	db 'CIndexValueCollection::AddValue(LPCVOID) : pMemory == NULL && nSi'
					; DATA XREF: Ordinal188:loc_6B184AE2o
		db 'ze > 0',0Ah,0
		align 8
; char aCindexvalue_23[]
aCindexvalue_23	db 'CIndexValueCollection::AddValue(LPCVOID) : AddValue() == false',0Ah,0
					; DATA XREF: Ordinal188+37o
; char aCindexvalue_27[]
aCindexvalue_27	db 'CIndexValueCollection::AddValue(VARIANT) : VariantCopyInd() != S_'
					; DATA XREF: Ordinal189+4Fo
		db 'OK, 0x%08X',0Ah,0
		align 4
; char aCindexvalue_26[]
aCindexvalue_26	db 'CIndexValueCollection::AddValue(VARIANT) : AddValue() == false',0Ah,0
					; DATA XREF: Ordinal189+2Do
aCindexvalue_29	db 'CIndexValueCollection::AddValue(ISymBase) : pValue->Copy() == fal'
					; DATA XREF: Ordinal190+51o
		db 'se',0Ah,0
		align 10h
; char aCindexvalue_28[]
aCindexvalue_28	db 'CIndexValueCollection::AddValue(ISymBase) : AddValue() == false',0Ah
					; DATA XREF: Ordinal190+2Do
		db 0
		align 8
aCindexvalue_31	db 'CIndexValueCollection::AddValue(CMemory) : pValue->m_Static.m_Mem'
					; DATA XREF: Ordinal197+4Co
		db 'ory.Copy() == FALSE',0Ah,0
		align 10h
; char aCindexvalue_30[]
aCindexvalue_30	db 'CIndexValueCollection::AddValue(CMemory) : AddValue() == false',0Ah,0
					; DATA XREF: Ordinal197+2Do
aCindexvalue_32	db 'CIndexValueCollection::operator =()',0 ; DATA XREF: Ordinal170+47o
; char aCindexvalue_37[]
aCindexvalue_37	db 'CIndexValueCollection::Load() : pValue->Load() == false',0Ah,0
					; DATA XREF: Ordinal191:loc_6B185087o
		align 10h
aCindexvalue_36	db 'CIndexValueCollection::Load() : GetWriteValue() == false',0Ah,0
					; DATA XREF: Ordinal191:loc_6B185080o
		align 4
aCindexvalue_35	db 'CIndexValueCollection::Load() : switch(default)',0Ah,0
					; DATA XREF: Ordinal191+80o
		align 10h
; char aCindexvalue_34[]
aCindexvalue_34	db 'CIndexValueCollection::Load() : Archive.Read() == FALSE',0Ah,0
					; DATA XREF: Ordinal191+6Eo
					; Ordinal191+9Ao ...
		align 10h
; char aCindexvalue_33[]
aCindexvalue_33	db 'CIndexValueCollection::Load() : CValueCollection::Load() == false'
					; DATA XREF: Ordinal191+49o
		db 0Ah,0
		align 4
off_6B1AB6B4	dd offset _purecall	; DATA XREF: Ordinal154+8o
					; Ordinal273+13o ...
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
off_6B1AB6D8	dd offset _purecall	; DATA XREF: Ordinal273+1Co
					; Ordinal199+1Co ...
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
off_6B1AB6EC	dd offset sub_6B18543C	; DATA XREF: Ordinal272+24o
					; Ordinal273+49o ...
		dd offset Ordinal192
		dd offset Ordinal191
		dd offset Ordinal592
		dd offset Ordinal193
		dd offset Ordinal194
off_6B1AB704	dd offset Ordinal282	; DATA XREF: Ordinal272+1Do
					; Ordinal273+42o ...
		dd offset Ordinal377
		dd offset Ordinal284
		dd offset Ordinal275
		dd offset Ordinal276
off_6B1AB718	dd offset Ordinal279	; DATA XREF: Ordinal272+16o
					; Ordinal273+3Bo ...
		dd offset Ordinal515
		dd offset Ordinal375
		dd offset Ordinal361
		dd offset Ordinal268
		dd offset Ordinal269
		dd offset Ordinal364
		dd offset Ordinal365
		dd offset Ordinal277
		align 10h
off_6B1AB740	dd offset Ordinal200	; DATA XREF: Ordinal272+Fo
					; Ordinal273+34o ...
		dd offset Ordinal394
		dd offset Ordinal157
		dd offset Ordinal247
		dd offset Ordinal203
		dd offset Ordinal204
		dd offset Ordinal315
		dd offset Ordinal248
		dd offset Ordinal249
		dd offset Ordinal316
		dd offset Ordinal317
		dd offset Ordinal318
		dd offset Ordinal209
		dd offset Ordinal355
		dd offset Ordinal353
		dd offset Ordinal241
		dd offset Ordinal240
		dd offset Ordinal238
		dd offset Ordinal237
		dd offset Ordinal345
		dd offset Ordinal344
		dd offset Ordinal232
		dd offset Ordinal230
		dd offset Ordinal228
		dd offset Ordinal336
		dd offset Ordinal224
		dd offset Ordinal222
		dd offset Ordinal220
		dd offset Ordinal218
		dd offset Ordinal326
		dd offset Ordinal214
		dd offset Ordinal322
		dd offset Ordinal320
		dd offset Ordinal356
		dd offset Ordinal354
		dd offset Ordinal352
		dd offset Ordinal349
		dd offset Ordinal236
		dd offset Ordinal343
		dd offset Ordinal341
		dd offset Ordinal229
		dd offset Ordinal227
		dd offset Ordinal225
		dd offset Ordinal333
		dd offset Ordinal221
		dd offset Ordinal219
		dd offset Ordinal327
		dd offset Ordinal215
		dd offset Ordinal213
		dd offset Ordinal321
		dd offset Ordinal266
		dd offset Ordinal265
		dd offset Ordinal264
		dd offset Ordinal263
		dd offset Ordinal262
		dd offset Ordinal261
		dd offset Ordinal260
		dd offset Ordinal259
		dd offset Ordinal258
		dd offset Ordinal257
		dd offset Ordinal256
		dd offset Ordinal255
		dd offset Ordinal254
		dd offset Ordinal253
		dd offset Ordinal252
		dd offset Ordinal251
		dd offset Ordinal250
off_6B1AB84C	dd offset sub_6B185464	; DATA XREF: Ordinal272+9o
					; Ordinal273+2Eo ...
		dd offset Ordinal1430
		align 8
off_6B1AB858	dd offset _purecall	; DATA XREF: Ordinal273+9o
					; Ordinal199+9o
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
aCindexvalue_38	db 'CIndexValueCollectionImpl::Clone()',0
					; DATA XREF: Ordinal276:loc_6B185520o
		align 4
aCindexvalue_39	db 'CIndexValueCollectionImpl::CreateIndexValueCollectionImpl()',0
					; DATA XREF: Ordinal278+1Co
		align 8
; char aCindexvalue_44[]
aCindexvalue_44	db 'CIndexValueCollectionImpl::Copy() : eValueType == cc::IValueColle'
					; DATA XREF: Ordinal275:loc_6B1859FBo
		db 'ction::eUnknownValue',0Ah,0
		align 10h
aCindexvalue_43	db 'CIndexValueCollectionImpl::Copy() : CopyValue() == false',0Ah,0
					; DATA XREF: Ordinal275:loc_6B1859F4o
		align 4
aCindexvalue_42	db 'CIndexValueCollectionImpl::Copy() : GetWriteValue() == false',0Ah,0
					; DATA XREF: Ordinal275:loc_6B1859EDo
		align 4
aCindexvalue_41	db 'CIndexValueCollectionImpl::Copy()',0 ; DATA XREF: Ordinal275+80o
		align 10h
; char aCindexvalue_40[]
aCindexvalue_40	db 'CIndexValueCollectionImpl::Copy() : pIndexValueCollection == NULL'
					; DATA XREF: Ordinal275+4Bo
		db 0Ah,0
		align 4
		dd offset aSoftwareSyma_1 ; "Software\\Symantec\\InstalledApps"
		dd offset aCommonClient	; "Common Client"
		dd offset aCommonClientDa ; "Common Client Data"
		dd offset aCommonClientDe ; "Common Client Decomposers"
		dd offset aNav		; "NAV"
		dd offset aNortonInternet ; "Norton Internet Security"
		dd offset aInternetSecuri ; "Internet Security"
		dd offset aNortonIntern_0 ; "Norton Internet Security Data"
		dd offset aInternetSecu_0 ; "Internet Security Data"
		dd offset aAntispam	; "AntiSpam"
		dd offset aAntispamEngine ; "AntiSpam Engine"
		dd offset aAdblocking	; "AdBlocking"
		dd offset aSpbbc	; "SPBBC"
		dd offset aSoftwareMicr_0 ; "Software\\Microsoft\\Windows\\CurrentVersi"...
		dd offset aCommonfilesdir ; "CommonFilesDir"
		dd offset aSoftwareMicros ; "Software\\Microsoft\\Windows\\CurrentVersi"...
		dd offset aCommonAppdata ; "Common AppData"
		dd offset aSymantecCommon ; "\\Symantec\\Common	Client"
		dd offset aDecomposers	; "\\Decomposers"
		dd offset aSymantecShared ; "\\Symantec	Shared"
; char aSymantecShared[]
aSymantecShared	db '\Symantec Shared',0 ; DATA XREF: Ordinal295+DCo
					; .rdata:6B1ABB50o
		align 4
; char aDecomposers[]
aDecomposers	db '\Decomposers',0     ; DATA XREF: Ordinal287+81o
					; .rdata:6B1ABB4Co
		align 4
; char aSymantecCommon[]
aSymantecCommon	db '\Symantec\Common Client',0 ; DATA XREF: Ordinal286+100o
					; .rdata:6B1ABB48o
; char aCommonAppdata[]
aCommonAppdata	db 'Common AppData',0   ; DATA XREF: Ordinal286+B7o
					; .rdata:6B1ABB44o
		align 10h
; char aSoftwareMicros[]
aSoftwareMicros	db 'Software\Microsoft\Windows\CurrentVersion\explorer\Shell Folders',0
					; DATA XREF: Ordinal286+A0o
					; .rdata:6B1ABB40o
		align 4
; char aCommonfilesdir[]
aCommonfilesdir	db 'CommonFilesDir',0   ; DATA XREF: Ordinal295+93o
					; .rdata:6B1ABB3Co
		align 4
; char aSoftwareMicr_0[]
aSoftwareMicr_0	db 'Software\Microsoft\Windows\CurrentVersion',0 ; DATA XREF: Ordinal295+7Co
					; .rdata:6B1ABB38o
		align 10h
aSpbbc		db 'SPBBC',0            ; DATA XREF: Ordinal294+4o
					; .rdata:6B1ABB34o
		align 4
aAdblocking	db 'AdBlocking',0       ; DATA XREF: Ordinal293+4o
					; .rdata:6B1ABB30o
		align 4
aAntispamEngine	db 'AntiSpam Engine',0  ; DATA XREF: Ordinal292+4o
					; .rdata:6B1ABB2Co
aAntispam	db 'AntiSpam',0         ; DATA XREF: Ordinal291+4o
					; .rdata:6B1ABB28o
		align 10h
aInternetSecu_0	db 'Internet Security Data',0 ; DATA XREF: Ordinal290+18o
					; .rdata:6B1ABB24o
		align 4
aNortonIntern_0	db 'Norton Internet Security Data',0 ; DATA XREF: Ordinal290+4o
					; .rdata:6B1ABB20o
		align 4
aInternetSecuri	db 'Internet Security',0 ; DATA XREF: Ordinal289+18o
					; .rdata:6B1ABB1Co
		align 4
aNortonInternet	db 'Norton Internet Security',0 ; DATA XREF: Ordinal289+4o
					; .rdata:6B1ABB18o
		align 4
aNav		db 'NAV',0              ; DATA XREF: Ordinal288+4o
					; .rdata:6B1ABB14o
aCommonClientDe	db 'Common Client Decomposers',0 ; DATA XREF: Ordinal287+1Co
					; .rdata:6B1ABB10o
		align 4
aCommonClientDa	db 'Common Client Data',0 ; DATA XREF: Ordinal286+1Co
					; .rdata:6B1ABB0Co
		align 4
aCommonClient	db 'Common Client',0    ; DATA XREF: Ordinal285+7o
					; .rdata:6B1ABB08o
		align 4
; char aSoftwareSyma_1[]
aSoftwareSyma_1	db 'Software\Symantec\InstalledApps',0 ; DATA XREF: Ordinal296+17o
					; .rdata:6B1ABB04o
		align 10h
; char aCinstalledap_1[]
aCinstalledap_1	db 'CInstalledApps::GetInstAppsDirectory() : reg.GetString() == FALSE'
					; DATA XREF: Ordinal296:loc_6B185B3Do
		db 0Ah,0
		align 4
; char aCinstalledap_0[]
aCinstalledap_0	db 'CInstalledApps::GetInstAppsDirectory() : "%s", "%s"',0Ah,0
					; DATA XREF: Ordinal296+63o
		align 4
; char aCinstalledapps[]
aCinstalledapps	db 'CInstalledApps::GetInstAppsDirectory() : reg.Open() == FALSE',0Ah,0
					; DATA XREF: Ordinal296+2Do
		align 4
; char aCinstalledap_6[]
aCinstalledap_6	db 'CInstalledApps::GetCCDataDirectory() : "%s"',0Ah,0
					; DATA XREF: Ordinal286+1CCo
		align 4
; char aCinstalledap_5[]
aCinstalledap_5	db 'CInstalledApps::GetCCDataDirectory() : reg.Open() == FALSE',0Ah,0
					; DATA XREF: Ordinal286:loc_6B185CD1o
; char aCinstalledap_4[]
aCinstalledap_4	db 'CInstalledApps::GetCCDataDirectory() : SHGetSpecialFolderPath() ='
					; DATA XREF: Ordinal286+87o
		db '= FALSE',0Ah,0
		align 4
aCinstalledap_3	db 'CInstalledApps::GetCCDataDirectory()',0 ; DATA XREF: Ordinal286+49o
		align 10h
; char aCinstalledap_2[]
aCinstalledap_2	db 'CInstalledApps::GetCCDataDirectory() : GetInstAppsDirectory() == '
					; DATA XREF: Ordinal286+37o
		db 'false',0Ah,0
; char aCinstalleda_10[]
aCinstalleda_10	db 'CInstalledApps::GetSymSharedDirectory() : "%s"',0Ah,0
					; DATA XREF: Ordinal295+1A0o
; char aCinstalledap_9[]
aCinstalledap_9	db 'CInstalledApps::GetSymSharedDirectory() : reg.Open() == FALSE',0Ah,0
					; DATA XREF: Ordinal295:loc_6B185E9Fo
		align 4
; char aCinstalledap_8[]
aCinstalledap_8	db 'CInstalledApps::GetSymSharedDirectory() : SHGetSpecialFolderPath('
					; DATA XREF: Ordinal295+63o
		db ') == FALSE',0Ah,0
		align 4
aCinstalledap_7	db 'CInstalledApps::GetSymSharedDirectory()',0 ; DATA XREF: Ordinal295+18o
; char aCinstalleda_13[]
aCinstalleda_13	db 'CInstalledApps::GetCCDirectory() : "%s"',0Ah,0
					; DATA XREF: Ordinal285+41o
		align 10h
; char aCinstalleda_12[]
aCinstalleda_12	db 'CInstalledApps::GetCCDirectory() : GetSymSharedDirectory() == fal'
					; DATA XREF: Ordinal285+2Fo
		db 'se',0Ah,0
		align 4
; char aCinstalleda_11[]
aCinstalleda_11	db 'CInstalledApps::GetCCDirectory() : GetInstAppsDirectory() == fals'
					; DATA XREF: Ordinal285+19o
		db 'e',0Ah,0
; char aCinstalleda_17[]
aCinstalleda_17	db 'CInstalledApps::GetCCDecDirectory() : "%s"',0Ah,0
					; DATA XREF: Ordinal287+14Eo
; char aCinstalleda_16[]
aCinstalleda_16	db 'CInstalledApps::GetCCDecDirectory() : GetSymSharedDirectory() == '
					; DATA XREF: Ordinal287+60o
		db 'false',0Ah,0
aCinstalleda_15	db 'CInstalledApps::GetCCDecDirectory()',0 ; DATA XREF: Ordinal287+42o
		align 8
; char aCinstalleda_14[]
aCinstalleda_14	db 'CInstalledApps::GetCCDecDirectory() : GetInstAppsDirectory() == f'
					; DATA XREF: Ordinal287+35o
		db 'alse',0Ah,0
		align 10h
; char aCkeyvaluecolle[]
aCkeyvaluecolle	db 'CKeyValueCollection::GetKeyAtIndex() : nIndex >= m_ValueMap.size('
					; DATA XREF: Ordinal304+29o
		db ')',0Ah,0
; char aCkeyvaluecol_2[]
aCkeyvaluecol_2	db 'CKeyValueCollection::Save() : pos->second.Save() == false',0Ah,0
					; DATA XREF: Ordinal306:loc_6B1864BDo
		align 10h
aCkeyvaluecol_1	db 'CKeyValueCollection::Save() : Archive.Write() == FALSE',0Ah,0
					; DATA XREF: Ordinal306:loc_6B186472o
					; Ordinal306:loc_6B1864B6o
; char aCkeyvaluecol_0[]
aCkeyvaluecol_0	db 'CKeyValueCollection::Save() : CValueCollection::Save() == false',0Ah
					; DATA XREF: Ordinal306+28o
		db 0
		align 4
; char aCkeyvaluecol_3[]
aCkeyvaluecol_3	db 'CKeyValueCollection::GetReadValue() : pos == m_ValueMap.end()',0Ah,0
					; DATA XREF: Ordinal307+2Bo
		align 4
; char aCkeyvaluecol_4[]
aCkeyvaluecol_4	db 'CKeyValueCollection::Remove() : pos == m_ValueMap.end()',0Ah,0
					; DATA XREF: Ordinal302+36o
		align 4
; char aCkeyvaluecol_9[]
aCkeyvaluecol_9	db 'CKeyValueCollection::Load() : pValue->Load() == false',0Ah,0
					; DATA XREF: Ordinal305:loc_6B186E1Eo
		align 10h
aCkeyvaluecol_8	db 'CKeyValueCollection::Load() : GetWriteValue() == false',0Ah,0
					; DATA XREF: Ordinal305:loc_6B186E17o
aCkeyvaluecol_7	db 'CKeyValueCollection::Load() : switch(default)',0Ah,0
					; DATA XREF: Ordinal305+65o
		align 4
aCkeyvaluecol_6	db 'CKeyValueCollection::Load() : Archive.Read() == FALSE',0Ah,0
					; DATA XREF: Ordinal305+54o
					; Ordinal305:loc_6B186E10o
		align 10h
; char aCkeyvaluecol_5[]
aCkeyvaluecol_5	db 'CKeyValueCollection::Load() : CValueCollection::Load() == false',0Ah
					; DATA XREF: Ordinal305+32o
		db 0
		align 4
off_6B1AC424	dd offset sub_6B187074	; DATA XREF: Ordinal298+3o
					; Ordinal297+Bo ...
		dd offset Ordinal306
		dd offset Ordinal305
		dd offset Ordinal592
		dd offset Ordinal307
		dd offset Ordinal308
aCkeyvalueco_10	db 'CKeyValueCollection::GetWriteValue()',0 ; DATA XREF: Ordinal308+20o
		align 4
aCkeyvalueco_11	db 'CKeyValueCollection::operator =()',0 ; DATA XREF: Ordinal300+47o
		align 4
off_6B1AC488	dd offset sub_6B1874FC	; DATA XREF: Ordinal366+24o
					; Ordinal367+49o ...
		dd offset Ordinal306
		dd offset Ordinal305
		dd offset Ordinal592
		dd offset Ordinal307
		dd offset Ordinal308
off_6B1AC4A0	dd offset Ordinal376	; DATA XREF: Ordinal366+1Do
					; Ordinal367+42o ...
		dd offset Ordinal377
		dd offset Ordinal284
		dd offset Ordinal369
		dd offset Ordinal370
off_6B1AC4B4	dd offset Ordinal373	; DATA XREF: Ordinal366+16o
					; Ordinal367+3Bo ...
		dd offset Ordinal515
		dd offset Ordinal375
		dd offset Ordinal361
		dd offset Ordinal268
		dd offset Ordinal269
		dd offset Ordinal364
		dd offset Ordinal365
		dd offset Ordinal371
off_6B1AC4D8	dd offset Ordinal310	; DATA XREF: Ordinal366+Fo
					; Ordinal367+34o ...
		dd offset Ordinal394
		dd offset Ordinal157
		dd offset Ordinal357
		dd offset Ordinal203
		dd offset Ordinal204
		dd offset Ordinal315
		dd offset Ordinal358
		dd offset Ordinal359
		dd offset Ordinal316
		dd offset Ordinal317
		dd offset Ordinal318
		dd offset Ordinal209
		dd offset Ordinal355
		dd offset Ordinal353
		dd offset Ordinal241
		dd offset Ordinal240
		dd offset Ordinal238
		dd offset Ordinal237
		dd offset Ordinal345
		dd offset Ordinal344
		dd offset Ordinal232
		dd offset Ordinal230
		dd offset Ordinal228
		dd offset Ordinal336
		dd offset Ordinal224
		dd offset Ordinal222
		dd offset Ordinal220
		dd offset Ordinal218
		dd offset Ordinal326
		dd offset Ordinal214
		dd offset Ordinal322
		dd offset Ordinal320
		dd offset Ordinal356
		dd offset Ordinal354
		dd offset Ordinal352
		dd offset Ordinal349
		dd offset Ordinal236
		dd offset Ordinal343
		dd offset Ordinal341
		dd offset Ordinal229
		dd offset Ordinal227
		dd offset Ordinal225
		dd offset Ordinal333
		dd offset Ordinal221
		dd offset Ordinal219
		dd offset Ordinal327
		dd offset Ordinal215
		dd offset Ordinal213
		dd offset Ordinal321
		dd offset Ordinal360
off_6B1AC5A4	dd offset sub_6B187524	; DATA XREF: Ordinal366+9o
					; Ordinal367+2Eo ...
		dd offset Ordinal1430
		align 10h
off_6B1AC5B0	dd offset _purecall	; DATA XREF: Ordinal367+9o
					; Ordinal309+9o
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
aCkeyvalueco_12	db 'CKeyValueCollectionImpl::Clone()',0
					; DATA XREF: Ordinal370:loc_6B1875E0o
		align 10h
; char aCkeyvalueco_17[]
aCkeyvalueco_17	db 'CKeyValueCollectionImpl::Copy() : eValueType == cc::IValueCollect'
					; DATA XREF: Ordinal369:loc_6B18788Do
		db 'ion::eUnknownValue',0Ah,0
		align 4
aCkeyvalueco_16	db 'CKeyValueCollectionImpl::Copy() : CopyValue() == false',0Ah,0
					; DATA XREF: Ordinal369:loc_6B187886o
aCkeyvalueco_15	db 'CKeyValueCollectionImpl::Copy() : GetWriteValue() == false',0Ah,0
					; DATA XREF: Ordinal369:loc_6B18787Fo
		align 10h
aCkeyvalueco_14	db 'CKeyValueCollectionImpl::Copy() : pKeyValueCollection->GetKeyAtIn'
					; DATA XREF: Ordinal369:loc_6B187878o
		db 'dex() == false',0Ah,0
		align 4
; char aCkeyvalueco_13[]
aCkeyvalueco_13	db 'CKeyValueCollectionImpl::Copy() : pKeyValueCollection == NULL',0Ah,0
					; DATA XREF: Ordinal369+2Bo
		align 4
aCkeyvalueco_18	db 'CKeyValueCollectionImpl::CreateKeyValueCollectionImpl()',0
					; DATA XREF: Ordinal372+1Co
off_6B1AC83C	dd offset sub_6B187D5A	; DATA XREF: Ordinal388+9o
					; Ordinal379+18o
		dd offset Ordinal391
		dd offset Ordinal390
off_6B1AC848	dd offset Ordinal380	; DATA XREF: Ordinal388o
					; Ordinal379+22o
		dd offset Ordinal381
		dd offset Ordinal382
		dd offset Ordinal383
		dd offset Ordinal384
		dd offset Ordinal385
		dd offset Ordinal386
		dd offset Ordinal387
		dd offset Ordinal389
; char aCserializeim_0[]
aCserializeim_0	db 'CSerializeImpl::Load() : Archive.Read() == FALSE',0Ah,0
					; DATA XREF: Ordinal390:loc_6B187AC8o
		align 10h
aCserializeimpl	db 'CSerializeImpl::Load() : switch(default)',0Ah,0
					; DATA XREF: Ordinal390+36o
		align 4
; char aCserializeim_1[]
aCserializeim_1	db 'CSerializeImpl::Save() : Archive.Write() == FALSE',0Ah,0
					; DATA XREF: Ordinal391:loc_6B187B22o
		align 10h
; char aCmemoryimplOpe[]
aCmemoryimplOpe	db 'CMemoryImpl::operator =(CMemory) : m_Memory.Copy() == FALSE',0Ah,0
					; DATA XREF: Ordinal400+3Fo
		align 10h
; char aCmemoryimplSet[]
aCmemoryimplSet	db 'CMemoryImpl::SetMemory() : m_Memory.Copy() == FALSE',0Ah,0
					; DATA XREF: Ordinal408+45o
		align 4
off_6B1AC978	dd offset Ordinal411	; DATA XREF: Ordinal396+13o
					; Ordinal392+26o ...
		dd offset Ordinal515
		dd offset Ordinal375
		dd offset Ordinal401
		dd offset Ordinal402
off_6B1AC98C	dd offset Ordinal393	; DATA XREF: Ordinal396+Co
					; Ordinal392+1Fo ...
		dd offset Ordinal394
		dd offset Ordinal157
		dd offset Ordinal403
		dd offset Ordinal404
		dd offset Ordinal405
		dd offset Ordinal406
		dd offset Ordinal407
		dd offset Ordinal408
off_6B1AC9B0	dd offset sub_6B187F21	; DATA XREF: Ordinal396+6o
					; Ordinal392+19o ...
		dd offset Ordinal1430
aCmemoryimplClo	db 'CMemoryImpl::Clone()',0 ; DATA XREF: Ordinal402+43o
		align 10h
aCmemoryimplCre	db 'CMemoryImpl::CreateMemoryImpl()',0 ; DATA XREF: Ordinal410+1Co
; char aCmemoryimplC_0[]
aCmemoryimplC_0	db 'CMemoryImpl::Copy() : m_Memory.Copy() == FALSE',0Ah,0
					; DATA XREF: Ordinal401+76o
; char aCmemoryimplCop[]
aCmemoryimplCop	db 'CMemoryImpl::Copy() : pMemory == NULL',0Ah,0 ; DATA XREF: Ordinal401+1Bo
		align 4
; char aCmemorystreami[]
aCmemorystreami	db 'CMemoryStreamImpl::operator =(CMemory) : m_Memory.Copy() == FALSE'
					; DATA XREF: Ordinal422+36o
		db 0Ah,0
		align 4
aCmemorystrea_1	db 'CMemoryStreamImpl::SetSize() : m_Memory.ReAlloc() == NULL',0Ah,0
					; DATA XREF: Ordinal424+51o
		align 4
; char aCmemorystrea_0[]
aCmemorystrea_0	db 'CMemoryStreamImpl::SetSize() : m_Memory.Alloc() == NULL',0Ah,0
					; DATA XREF: Ordinal424+39o
		align 8
; char aCmemorystrea_2[]
aCmemorystrea_2	db 'CMemoryStreamImpl::SetPosition() : nPosition >= m_Memory.GetSize('
					; DATA XREF: Ordinal426:loc_6B1884CBo
		db ')',0Ah,0
aCmemorystrea_4	db 'CMemoryStreamImpl::Write() : m_Memory.ReAlloc() == NULL',0Ah,0
					; DATA XREF: Ordinal427+60o
		align 4
; char aCmemorystrea_3[]
aCmemorystrea_3	db 'CMemoryStreamImpl::Write() : m_Memory.NewAlloc() == NULL',0Ah,0
					; DATA XREF: Ordinal427+41o
		align 8
; char aCmemorystrea_5[]
aCmemorystrea_5	db 'CMemoryStreamImpl::Read() : m_Memory.GetSize() - m_nPosition < nS'
					; DATA XREF: Ordinal428+2Fo
		db 'ize',0Ah,0
		align 10h
off_6B1ACC10	dd offset Ordinal155	; DATA XREF: Ordinal418+Co
					; Ordinal420+1Co ...
		dd offset Ordinal394
		dd offset Ordinal157
		dd offset Ordinal423
		dd offset Ordinal424
		dd offset Ordinal425
		dd offset Ordinal426
		dd offset Ordinal427
		dd offset Ordinal428
off_6B1ACC34	dd offset sub_6B188700	; DATA XREF: Ordinal418+6o
					; Ordinal420+16o ...
		dd offset Ordinal1430
aCmemorystrea_6	db 'CMemoryStreamImpl::CreateMemoryStreamImpl()',0
					; DATA XREF: Ordinal430+1Co
off_6B1ACC68	dd offset sub_6B188F07	; DATA XREF: Ordinal441+4o
					; Ordinal442+3o
; char aCregistryIni_1[]
aCregistryIni_1	db 'CRegistry::Initialize() : GetSystemDirectory() == 0',0Ah,0
					; DATA XREF: Ordinal456:loc_6B188E4Do
		align 4
; char aCregistryIni_0[]
aCregistryIni_0	db 'CRegistry::Initialize() : GetProcAddress() == NULL',0Ah,0
					; DATA XREF: Ordinal456:loc_6B188E19o
aCregistryIniti	db 'CRegistry::Initialize() : LoadLibrary() == NULL',0Ah,0
					; DATA XREF: Ordinal456+6Eo
		align 4
; char String2[]
String2		db '\SymStore.dll',0    ; DATA XREF: Ordinal456+48o
		align 10h
; char aCregistryOpe_0[]
aCregistryOpe_0	db 'CRegistry::Open() : m_pfnSymRegCreateKeyExA() != ERROR_SUCCESS',0Ah,0
					; DATA XREF: Ordinal444+61o
aCregistryOpenM	db 'CRegistry::Open() : m_pfnSymRegOpenKeyExA() != ERROR_SUCCESS',0Ah,0
					; DATA XREF: Ordinal444+41o
		align 10h
off_6B1ACDA0	dd offset sub_6B1890FA	; DATA XREF: Ordinal457+6o Ordinal458o
		dd offset _purecall
		dd offset _purecall
; char aCserializeGets[]
aCserializeGets	db 'CSerialize::GetSize() : Save() == FALSE',0Ah,0
					; DATA XREF: Ordinal459+3Do
		align 4
aCserializeSa_0	db 'CSerialize::Save() : Save() == FALSE',0Ah,0 ; DATA XREF: Ordinal460+50o
		align 10h
; char aCserializeSave[]
aCserializeSave	db 'CSerialize::Save() : archive.Reference() == FALSE',0Ah,0
					; DATA XREF: Ordinal460+34o
		align 4
; char aCserializeLo_0[]
aCserializeLo_0	db 'CSerialize::Load() : Load() == FALSE',0Ah,0 ; DATA XREF: Ordinal461+4Bo
		align 4
aCserializeLoad	db 'CSerialize::Load() : archive.Reference() == FALSE',0Ah,0
					; DATA XREF: Ordinal461+35o
		align 10h
; char aCstreamarchi_0[]
aCstreamarchi_0	db 'CStreamArchive::ReadEx() : m_pStream->Read() == false',0Ah,0
					; DATA XREF: Ordinal469+1Fo
		align 4
; char aCstreamarchive[]
aCstreamarchive	db 'CStreamArchive::ReadEx() : m_pStream == NULL',0Ah,0
					; DATA XREF: Ordinal469+7o
					; Ordinal1515+Bo
		align 4
; char aCstreamarchi_2[]
aCstreamarchi_2	db 'CStreamArchive::WriteEx() : m_pStream->Write() == false',0Ah,0
					; DATA XREF: Ordinal470+1Fo
		align 4
; char aCstreamarchi_1[]
aCstreamarchi_1	db 'CStreamArchive::WriteEx() : m_pStream == NULL',0Ah,0
					; DATA XREF: Ordinal470+7o
					; Ordinal1516+Bo
		align 8
; char aCstreamarchi_4[]
aCstreamarchi_4	db 'CStreamArchive::GetPosEx() : m_pStream->GetPosition() == false',0Ah,0
					; DATA XREF: Ordinal471+1Bo
; char aCstreamarchi_3[]
aCstreamarchi_3	db 'CStreamArchive::GetPosEx() : m_pStream == NULL',0Ah,0
					; DATA XREF: Ordinal471+7o
					; Ordinal1517+Co
; char aCstreamarchi_6[]
aCstreamarchi_6	db 'CStreamArchive::SetPosEx() : m_pStream->SetPosition() == false',0Ah,0
					; DATA XREF: Ordinal472+1Fo
; char aCstreamarchi_5[]
aCstreamarchi_5	db 'CStreamArchive::SetPosEx() : m_pStream == NULL',0Ah,0
					; DATA XREF: Ordinal472+7o
					; Ordinal1518+Co
off_6B1AD048	dd offset sub_6B189279	; DATA XREF: Ordinal465+Co
					; Ordinal466+9o
		dd offset Ordinal469
		dd offset Ordinal470
		dd offset Ordinal471
		dd offset Ordinal472
; char aCstreamarchi_7[]
aCstreamarchi_7	db 'CStreamArchive::Reference() : pStream == NULL',0Ah,0
					; DATA XREF: Ordinal467+7o
					; Ordinal1513+7o
		align 4
; char aCstringconvert[]
aCstringconvert	db 'CStringConvert::Copy(LPCSTR, IString) : pString == NULL',0Ah,0
					; DATA XREF: Ordinal475+8o
		align 4
; char aCstringconve_0[]
aCstringconve_0	db 'CStringConvert::Copy(LPCWSTR, IString) : pString == NULL',0Ah,0
					; DATA XREF: Ordinal476+8o
		align 4
; char aCstringconve_1[]
aCstringconve_1	db 'CStringConvert::GetStringT() : pString == NULL',0Ah,0
					; DATA XREF: Ordinal477+8o
; char aCstringconve_2[]
aCstringconve_2	db 'CStringConvert::Copy(IString, CStringA) : pString == NULL',0Ah,0
					; DATA XREF: Ordinal473+9o
		align 10h
; char aCstringconve_3[]
aCstringconve_3	db 'CStringConvert::Copy(IString, CStringW) : pString == NULL',0Ah,0
					; DATA XREF: Ordinal474+9o
		align 10h
; char aCstringimplOpe[]
aCstringimplOpe	db 'CStringImpl::operator =(LPCSTR) : CStringConvert::Copy() == false'
					; DATA XREF: Ordinal492+37o
		db 0Ah,0
		align 8
; char aCstringimplO_0[]
aCstringimplO_0	db 'CStringImpl::operator =(LPCWSTR) : CStringConvert::Copy() == fals'
					; DATA XREF: Ordinal493+37o
		db 'e',0Ah,0
; char aCstringimplSet[]
aCstringimplSet	db 'CStringImpl::SetStringA() : CStringConvert::Copy() == false',0Ah,0
					; DATA XREF: Ordinal500+34o
		align 4
; char aCstringimplS_0[]
aCstringimplS_0	db 'CStringImpl::SetStringW() : CStringConvert::Copy() == false',0Ah,0
					; DATA XREF: Ordinal503+34o
		align 4
; char aCstringimplL_0[]
aCstringimplL_0	db 'CStringImpl::Load() : switch(default)',0Ah,0 ; DATA XREF: Ordinal506+47o
					; Ordinal506+86o
		align 4
; char aCstringimplLoa[]
aCstringimplLoa	db 'CStringImpl::Load() : Archive.Read() == FALSE',0Ah,0
					; DATA XREF: Ordinal506+2Eo
					; Ordinal506+67o
		align 4
; char aCstringimplS_1[]
aCstringimplS_1	db 'CStringImpl::Save() : Archive.Write() == FALSE',0Ah,0
					; DATA XREF: Ordinal507:loc_6B189778o
aCstringimplSav	db 'CStringImpl::Save() : switch(default)',0Ah,0 ; DATA XREF: Ordinal507+49o
		align 4
off_6B1AD36C	dd offset _purecall	; DATA XREF: Ordinal478+9o
					; Ordinal488+9o ...
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		align 10h
; char aCstringimplO_2[]
aCstringimplO_2	db 'CStringImpl::operator =(CStringImpl) : CStringConvert::Copy() == '
					; DATA XREF: Ordinal491:loc_6B18985Fo
		db 'false',0Ah,0
; char aCstringimplO_1[]
aCstringimplO_1	db 'CStringImpl::operator =(CStringImpl) : switch(default)',0Ah,0
					; DATA XREF: Ordinal491+3Eo
; char aCstringimplG_0[]
aCstringimplG_0	db 'CStringImpl::GetStringA() : CStringConvert::Copy() == false',0Ah,0
					; DATA XREF: Ordinal499+41o
		align 10h
aCstringimplGet	db 'CStringImpl::GetStringA() : switch(default)',0Ah,0
					; DATA XREF: Ordinal499+27o
		align 10h
; char aCstringimplG_2[]
aCstringimplG_2	db 'CStringImpl::GetStringW() : CStringConvert::Copy() == false',0Ah,0
					; DATA XREF: Ordinal502+41o
		align 10h
aCstringimplG_1	db 'CStringImpl::GetStringW() : switch(default)',0Ah,0
					; DATA XREF: Ordinal502+27o
		align 10h
; char aCstringimplG_3[]
aCstringimplG_3	db 'CStringImpl::GetLength() : switch(default)',0Ah,0
					; DATA XREF: Ordinal498+28o
off_6B1AD52C	dd offset sub_6B189B44	; DATA XREF: Ordinal487+25o
					; Ordinal478+46o ...
		dd offset Ordinal507
		dd offset Ordinal506
off_6B1AD538	dd offset Ordinal517	; DATA XREF: Ordinal487+1Eo
					; Ordinal478+3Fo ...
		dd offset Ordinal377
		dd offset Ordinal284
		dd offset Ordinal494
		dd offset Ordinal495
off_6B1AD54C	dd offset Ordinal514	; DATA XREF: Ordinal487+17o
					; Ordinal478+38o ...
		dd offset Ordinal515
		dd offset Ordinal375
		dd offset Ordinal482
		dd offset Ordinal483
		dd offset Ordinal484
		dd offset Ordinal485
		dd offset Ordinal486
		dd offset Ordinal505
off_6B1AD570	dd offset Ordinal479	; DATA XREF: Ordinal487+10o
					; Ordinal478+31o ...
		dd offset Ordinal394
		dd offset Ordinal157
		dd offset Ordinal496
		dd offset Ordinal497
		dd offset Ordinal498
		dd offset Ordinal499
		dd offset Ordinal500
		dd offset Ordinal504
		dd offset Ordinal501
		dd offset Ordinal502
		dd offset Ordinal503
off_6B1AD5A0	dd offset sub_6B189CB5	; DATA XREF: Ordinal487+Ao
					; Ordinal478+2Bo ...
		dd offset Ordinal1430
; char aCstringimplC_1[]
aCstringimplC_1	db 'CStringImpl::Copy() : CStringConvert::Copy() == false',0Ah,0
					; DATA XREF: Ordinal494:loc_6B189BE7o
		align 10h
; char aCstringimplC_0[]
aCstringimplC_0	db 'CStringImpl::Copy() : switch(default)',0Ah,0 ; DATA XREF: Ordinal494+5Eo
		align 4
; char aCstringimplCop[]
aCstringimplCop	db 'CStringImpl::Copy() : pString == NULL',0Ah,0 ; DATA XREF: Ordinal494+1Bo
		align 10h
aCstringimplClo	db 'CStringImpl::Clone()',0 ; DATA XREF: Ordinal495+3Eo
		align 4
aCstringimplCre	db 'CStringImpl::CreateStringImpl()',0 ; DATA XREF: Ordinal511+1Co
aCstringimplC_2	db 'CStringImpl::CreateStringImpl(LPCSTR)',0 ; DATA XREF: Ordinal512+1Co
		align 10h
aCstringimplC_3	db 'CStringImpl::CreateStringImpl(LPCWSTR)',0 ; DATA XREF: Ordinal513+1Co
		align 4
off_6B1AD6B8	dd offset Ordinal155	; DATA XREF: sub_6B18A371+Eo
		dd offset sub_6B18AE00
		dd offset sub_6B18AE00
		dd offset Ordinal423
		dd offset Ordinal424
		dd offset Ordinal425
		dd offset Ordinal426
		dd offset Ordinal427
		dd offset Ordinal428
off_6B1AD6DC	dd offset sub_6B18A38F	; DATA XREF: sub_6B18A371+8o
		dd offset Ordinal1430
; char aCvalueGetstati[]
aCvalueGetstati	db 'CValue::GetStaticSize() : switch(default)',0Ah,0
					; DATA XREF: Ordinal534:loc_6B18A3D5o
		align 10h
; char aCvaluecollecti[]
aCvaluecollecti	db 'CValueCollection::GetType() : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal542+31o
		align 4
; char aCvaluecollec_0[]
aCvaluecollec_0	db 'CValueCollection::SetValue(bool) : GetWriteValue() == false',0Ah,0
					; DATA XREF: Ordinal548+30o
		align 4
; char aCvaluecollec_1[]
aCvaluecollec_1	db 'CValueCollection::SetValue(CHAR) : GetWriteValue() == false',0Ah,0
					; DATA XREF: Ordinal550+30o
		align 4
; char aCvaluecollec_2[]
aCvaluecollec_2	db 'CValueCollection::SetValue(BYTE) : GetWriteValue() == false',0Ah,0
					; DATA XREF: Ordinal552+30o
		align 4
; char aCvaluecollec_3[]
aCvaluecollec_3	db 'CValueCollection::SetValue(SHORT) : GetWriteValue() == false',0Ah,0
					; DATA XREF: Ordinal554+30o
		align 4
; char aCvaluecollec_4[]
aCvaluecollec_4	db 'CValueCollection::SetValue(WORD) : GetWriteValue() == false',0Ah,0
					; DATA XREF: Ordinal556+30o
		align 4
; char aCvaluecollec_5[]
aCvaluecollec_5	db 'CValueCollection::SetValue(LONG) : GetWriteValue() == false',0Ah,0
					; DATA XREF: Ordinal558+30o
		align 4
; char aCvaluecollec_6[]
aCvaluecollec_6	db 'CValueCollection::SetValue(DWORD) : GetWriteValue() == false',0Ah,0
					; DATA XREF: Ordinal560+30o
		align 4
; char aCvaluecollec_7[]
aCvaluecollec_7	db 'CValueCollection::SetValue(LONGLONG) : GetWriteValue() == false',0Ah
					; DATA XREF: Ordinal562+30o
		db 0
		align 10h
; char aCvaluecollec_8[]
aCvaluecollec_8	db 'CValueCollection::SetValue(ULONGLONG) : GetWriteValue() == false',0Ah
					; DATA XREF: Ordinal564+30o
		db 0
		align 4
; char aCvaluecollec_9[]
aCvaluecollec_9	db 'CValueCollection::SetValue(double) : GetWriteValue() == false',0Ah,0
					; DATA XREF: Ordinal566+30o
		align 4
; char aCvaluecolle_10[]
aCvaluecolle_10	db 'CValueCollection::SetValue(GUID) : GetWriteValue() == false',0Ah,0
					; DATA XREF: Ordinal568+30o
		align 8
; char aCvaluecolle_11[]
aCvaluecolle_11	db 'CValueCollection::SetValue(SYSTEMTIME) : GetWriteValue() == false'
					; DATA XREF: Ordinal570+30o
		db 0Ah,0
		align 10h
aCvaluecolle_13	db 'CValueCollection::SetValue(LPCSTR) : CStringConvert::Copy() == fa'
					; DATA XREF: Ordinal573+52o
		db 'lse',0Ah,0
		align 4
; char aCvaluecolle_12[]
aCvaluecolle_12	db 'CValueCollection::SetValue(LPCSTR) : GetWriteValue() == false',0Ah,0
					; DATA XREF: Ordinal573+30o
		align 4
aCvaluecolle_15	db 'CValueCollection::SetValue(LPCWSTR) : CStringConvert::Copy() == f'
					; DATA XREF: Ordinal576+52o
		db 'alse',0Ah,0
		align 10h
; char aCvaluecolle_14[]
aCvaluecolle_14	db 'CValueCollection::SetValue(LPCWSTR) : GetWriteValue() == false',0Ah,0
					; DATA XREF: Ordinal576+30o
aCvaluecolle_18	db 'CValueCollection::SetValue(LPCVOID) : pValue->m_Memory.Copy() == '
					; DATA XREF: Ordinal579+77o
		db 'FALSE',0Ah,0
; char aCvaluecolle_17[]
aCvaluecolle_17	db 'CValueCollection::SetValue(LPCVOID) : pMemory == NULL && nSize > '
					; DATA XREF: Ordinal579:loc_6B18AB8Do
		db '0',0Ah,0
		align 10h
; char aCvaluecolle_16[]
aCvaluecolle_16	db 'CValueCollection::SetValue(LPCVOID) : GetWriteValue() == false',0Ah,0
					; DATA XREF: Ordinal579+3Ao
; char aCvaluecolle_20[]
aCvaluecolle_20	db 'CValueCollection::SetValue(VARIANT) : VariantCopyInd() != S_OK, 0'
					; DATA XREF: Ordinal581+52o
		db 'x%08X',0Ah,0
; char aCvaluecolle_19[]
aCvaluecolle_19	db 'CValueCollection::SetValue(VARIANT) : GetWriteValue() == false',0Ah,0
					; DATA XREF: Ordinal581+30o
; char aCvaluecolle_22[]
aCvaluecolle_22	db 'CValueCollection::Load() : Archive.Read() == FALSE',0Ah,0
					; DATA XREF: Ordinal590:loc_6B18ACD9o
aCvaluecolle_21	db 'CValueCollection::Load() : switch(default)',0Ah,0
					; DATA XREF: Ordinal590+36o
; char aCvaluecolle_23[]
aCvaluecolle_23	db 'CValueCollection::Save() : Archive.Write() == FALSE',0Ah,0
					; DATA XREF: Ordinal591:loc_6B18AD44o
					; Ordinal533:loc_6B18B778o
		align 10h
; char aCvaluecolle_25[]
aCvaluecolle_25	db 'CValueCollection::CreateObject() : pObject == NULL',0Ah,0
					; DATA XREF: Ordinal592+8Bo
; char aCvaluecolle_24[]
aCvaluecolle_24	db 'CValueCollection::CreateObject() : SymIsEqualIID() == false',0Ah,0
					; DATA XREF: Ordinal592:loc_6B18ADDBo
		align 4
; char aCvalueConvertC[]
aCvalueConvertC	db 'CValue::Convert() : ccLib::CStringConvert::Copy() == false',0Ah,0
					; DATA XREF: Ordinal535+85o
; char aCvalueGetsizeP[]
aCvalueGetsizeP	db 'CValue::GetSize() : pSerialize->GetSize() == false',0Ah,0
					; DATA XREF: Ordinal524+96o
					; Ordinal524+CAo
; char aCvalueGetsizeS[]
aCvalueGetsizeS	db 'CValue::GetSize() : switch(default)',0Ah,0
					; DATA XREF: Ordinal524:loc_6B18B034o
		align 4
; char aCvalueCopyPc_0[]
aCvalueCopyPc_0	db 'CValue::Copy() : pClone->Clone() == FALSE',0Ah,0
					; DATA XREF: Ordinal529+56o
		align 4
aCvalueCopyPclo	db 'CValue::Copy() : pClone == NULL',0Ah,0 ; DATA XREF: Ordinal529+45o
		align 4
; char aCvalueCopyPsou[]
aCvalueCopyPsou	db 'CValue::Copy() : pSource == NULL',0Ah,0 ; DATA XREF: Ordinal529+Bo
		align 10h
; char aCvalueCopyM_me[]
aCvalueCopyM_me	db 'CValue::Copy() : m_Memory.Copy() == FALSE',0Ah,0
					; DATA XREF: Ordinal531+CEo
		align 4
; char aCvalueCopyVari[]
aCvalueCopyVari	db 'CValue::Copy() : VariantCopyInd() != S_OK, 0x%08X',0Ah,0
					; DATA XREF: Ordinal531+AEo
		align 10h
aCvalueCopySwit	db 'CValue::Copy() : switch(default)',0Ah,0
					; DATA XREF: Ordinal531:loc_6B18B23Ao
		align 4
; char aCvalueCopyCstr[]
aCvalueCopyCstr	db 'CValue::Copy() : CStringConvert::Copy() == false',0Ah,0
					; DATA XREF: Ordinal531+4Eo
		align 4
; char aCvalueLoadBarc[]
aCvalueLoadBarc	db 'CValue::Load() : bArchive == FALSE',0Ah,0
					; DATA XREF: Ordinal532:loc_6B18B4F0o
; char aCvalueLoadSwit[]
aCvalueLoadSwit	db 'CValue::Load() : switch(default)',0Ah,0
					; DATA XREF: Ordinal532:loc_6B18B4E1o
		align 10h
; char aCvalueLoadCrea[]
aCvalueLoadCrea	db 'CValue::Load() : CreateInterface() == false',0Ah,0
					; DATA XREF: Ordinal532:loc_6B18B4D4o
		align 10h
; char aCvalueLoadPs_0[]
aCvalueLoadPs_0	db 'CValue::Load() : pSerialize->Load() == false',0Ah,0
					; DATA XREF: Ordinal532+1ECo
		align 10h
aCvalueLoadPmem	db 'CValue::Load() : pMemoryStream == NULL',0Ah,0
					; DATA XREF: Ordinal532+1BBo
; char aCvalueLoadPser[]
aCvalueLoadPser	db 'CValue::Load() : pSerialize == NULL',0Ah,0 ; DATA XREF: Ordinal532+194o
		align 10h
; char aCvalueLoadArch[]
aCvalueLoadArch	db 'CValue::Load() : Archive.Read() == FALSE',0Ah,0
					; DATA XREF: Ordinal532+2Co
					; Ordinal532+159o ...
		align 4
; char aCvaluecolle_31[]
aCvaluecolle_31	db 'CValueCollection::Save() : bArchive == FALSE',0Ah,0
					; DATA XREF: Ordinal533:loc_6B18B7A4o
		align 4
; char aCvaluecolle_30[]
aCvaluecolle_30	db 'CValueCollection::Save() : switch(default)',0Ah,0
					; DATA XREF: Ordinal533:loc_6B18B795o
aCvaluecolle_29	db 'CValueCollection::Save() : pSerialize->GetObjectId() == false',0Ah,0
					; DATA XREF: Ordinal533+1E1o
		align 4
aCvaluecolle_28	db 'CValueCollection::Save() : pSerialize->Save() == false',0Ah,0
					; DATA XREF: Ordinal533+1BFo
aCvaluecolle_27	db 'CValueCollection::Save() : mem.NewAlloc() == NULL',0Ah,0
					; DATA XREF: Ordinal533+1A5o
		align 4
aCvaluecolle_26	db 'CValueCollection::Save() : pSerialize->GetSize() == false',0Ah,0
					; DATA XREF: Ordinal533+180o
		align 10h
; char aCvalueSavePser[]
aCvalueSavePser	db 'CValue::Save() : pSerialize == NULL',0Ah,0 ; DATA XREF: Ordinal533+15Do
		align 4
; char aCvalueSaveArch[]
aCvalueSaveArch	db 'CValue::Save() : Archive.Write() == FALSE',0Ah,0
					; DATA XREF: Ordinal533+2Ao
		align 4
; char aCvaluecolle_32[]
aCvaluecolle_32	db 'CValueCollection::GetSize() : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal541+31o
		align 10h
aCvaluecolle_34	db 'CValueCollection::SetValue(ISymBase) : pValue->Copy() == false',0Ah,0
					; DATA XREF: Ordinal583+52o
; char aCvaluecolle_33[]
aCvaluecolle_33	db 'CValueCollection::SetValue(ISymBase) : GetWriteValue() == false',0Ah
					; DATA XREF: Ordinal583+30o
		db 0
		align 8
; char aCvaluecolle_39[]
aCvaluecolle_39	db 'CValueCollection::GetReadValue() : m_AutoConvertValue.Convert() ='
					; DATA XREF: Ordinal593+77o
		db '= false',0Ah,0
		align 8
aCvaluecolle_38	db 'CValueCollection::GetReadValue() : m_AutoConvertValue.Copy() == f'
					; DATA XREF: Ordinal593+61o
		db 'alse',0Ah,0
		align 10h
aCvaluecolle_37	db 'CValueCollection::GetReadValue() : pValue->CanConvert() == false',0Ah
					; DATA XREF: Ordinal593+49o
		db 0
		align 4
aCvaluecolle_36	db 'CValueCollection::GetReadValue() : m_bAutoConvert == false',0Ah,0
					; DATA XREF: Ordinal593+38o
; char aCvaluecolle_35[]
aCvaluecolle_35	db 'CValueCollection::GetReadValue() : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal593+1Co
; char aCvaluecolle_41[]
aCvaluecolle_41	db 'CValueCollection::CopyValue() : bRet == false',0Ah,0
					; DATA XREF: Ordinal594+1ABo
		align 4
; char aCvaluecolle_40[]
aCvaluecolle_40	db 'CValueCollection::CopyValue() : switch(default)',0Ah,0
					; DATA XREF: Ordinal594:loc_6B18BAF8o
		align 10h
off_6B1AE4D0	dd offset sub_6B18C4CD	; DATA XREF: Ordinal520+6o
					; Ordinal521+3o ...
; char aCvalueOperator[]
aCvalueOperator	db 'CValue::operator =() : Copy() == false',0Ah,0
					; DATA XREF: Ordinal523+18o
off_6B1AE4FC	dd offset sub_6B18C52B	; DATA XREF: Ordinal536+Bo
					; Ordinal537+6o ...
		dd offset Ordinal591
		dd offset Ordinal590
		dd offset Ordinal592
		dd offset _purecall
		dd offset _purecall
; char aCvaluecolle_42[]
aCvaluecolle_42	db 'CValueCollection::GetValue(bool) : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal547+34o
; char aCvaluecolle_43[]
aCvaluecolle_43	db 'CValueCollection::GetValue(CHAR) : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal549+32o
; char aCvaluecolle_44[]
aCvaluecolle_44	db 'CValueCollection::GetValue(BYTE) : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal551+32o
; char aCvaluecolle_45[]
aCvaluecolle_45	db 'CValueCollection::GetValue(SHORT) : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal553+32o
		align 4
; char aCvaluecolle_46[]
aCvaluecolle_46	db 'CValueCollection::GetValue(WORD) : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal555+32o
; char aCvaluecolle_47[]
aCvaluecolle_47	db 'CValueCollection::GetValue(LONG) : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal557+32o
; char aCvaluecolle_48[]
aCvaluecolle_48	db 'CValueCollection::GetValue(DWORD) : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal559+32o
		align 10h
; char aCvaluecolle_49[]
aCvaluecolle_49	db 'CValueCollection::GetValue(LONGLONG) : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal561+32o
; char aCvaluecolle_50[]
aCvaluecolle_50	db 'CValueCollection::GetValue(ULONGLONG) : GetReadValue() == false',0Ah
					; DATA XREF: Ordinal563+32o
		db 0
		align 4
; char aCvaluecolle_51[]
aCvaluecolle_51	db 'CValueCollection::GetValue(double) : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal565+32o
		align 4
; char aCvaluecolle_52[]
aCvaluecolle_52	db 'CValueCollection::GetValue(GUID) : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal567+32o
; char aCvaluecolle_53[]
aCvaluecolle_53	db 'CValueCollection::GetValue(SYSTEMTIME) : GetReadValue() == false',0Ah
					; DATA XREF: Ordinal569+32o
		db 0
		align 4
; char aCvaluecolle_56[]
aCvaluecolle_56	db 'CValueCollection::GetValue(LPSTR) : pMemory == NULL',0Ah,0
					; DATA XREF: Ordinal572:loc_6B18C14Co
		align 10h
aCvaluecolle_55	db 'CValueCollection::GetValue(LPSTR) : CStringConvert::Copy() == fal'
					; DATA XREF: Ordinal572+6Do
		db 'se',0Ah,0
		align 4
; char aCvaluecolle_54[]
aCvaluecolle_54	db 'CValueCollection::GetValue(LPSTR) : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal572+45o
		align 4
; char aCvaluecolle_59[]
aCvaluecolle_59	db 'CValueCollection::GetValue(LPWSTR) : pMemory == NULL',0Ah,0
					; DATA XREF: Ordinal575:loc_6B18C1E2o
		align 10h
aCvaluecolle_58	db 'CValueCollection::GetValue(LPWSTR) : CStringConvert::Copy() == fa'
					; DATA XREF: Ordinal575+6Do
		db 'lse',0Ah,0
		align 4
; char aCvaluecolle_57[]
aCvaluecolle_57	db 'CValueCollection::GetValue(LPWSTR) : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal575+45o
		align 4
; char aCvaluecolle_62[]
aCvaluecolle_62	db 'CValueCollection::GetValue(LPVOID) : pMemory == NULL',0Ah,0
					; DATA XREF: Ordinal578:loc_6B18C284o
		align 10h
aCvaluecolle_61	db 'CValueCollection::GetValue(LPVOID) : nSize < nUsed',0Ah,0
					; DATA XREF: Ordinal578+61o
; char aCvaluecolle_60[]
aCvaluecolle_60	db 'CValueCollection::GetValue(LPVOID) : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal578+42o
		align 8
; char aCvaluecolle_64[]
aCvaluecolle_64	db 'CValueCollection::GetValue(VARIANT) : VariantCopyInd() != S_OK, 0'
					; DATA XREF: Ordinal580+5Do
		db 'x%08X',0Ah,0
; char aCvaluecolle_63[]
aCvaluecolle_63	db 'CValueCollection::GetValue(VARIANT) : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal580+32o
		align 10h
aCvaluecolle_66	db 'CValueCollection::GetValue(ISymBase) : CValue::Copy() == false',0Ah,0
					; DATA XREF: Ordinal582+5Bo
; char aCvaluecolle_65[]
aCvaluecolle_65	db 'CValueCollection::GetValue(ISymBase) : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal582+32o
aCvaluecolle_68	db 'CValueCollection::GetValue(CStringA) : CStringConvert::Copy() == '
					; DATA XREF: Ordinal585+54o
		db 'false',0Ah,0
; char aCvaluecolle_67[]
aCvaluecolle_67	db 'CValueCollection::GetValue(CStringA) : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal585+32o
aCvaluecolle_70	db 'CValueCollection::GetValue(CStringW) : CStringConvert::Copy() == '
					; DATA XREF: Ordinal587+54o
		db 'false',0Ah,0
; char aCvaluecolle_69[]
aCvaluecolle_69	db 'CValueCollection::GetValue(CStringW) : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal587+32o
aCvaluecolle_72	db 'CValueCollection::GetValue(CMemory) : Memory.Copy() == FALSE',0Ah,0
					; DATA XREF: Ordinal589+52o
		align 10h
; char aCvaluecolle_71[]
aCvaluecolle_71	db 'CValueCollection::GetValue(CMemory) : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal589+32o
		align 10h
; char aCvaluecolle_74[]
aCvaluecolle_74	db 'CValueCollectionConvert::GetValue(CMemory) : Memory.NewAlloc() =='
					; DATA XREF: Ordinal599+29o
		db ' NULL',0Ah,0
aCvaluecolle_73	db 'CValueCollectionConvert::GetValue(CMemory) : pValueCollection == '
					; DATA XREF: Ordinal599+Bo
		db 'NULL',0Ah,0
		align 10h
; char aCvaluecolle_75[]
aCvaluecolle_75	db 'CValueCollectionConvert::SetValue(CMemory) : pValueCollection == '
					; DATA XREF: Ordinal600+9o
		db 'NULL',0Ah,0
		align 4
; char aCvaluecolle_76[]
aCvaluecolle_76	db 'CValueCollectionConvert::SetValue(CStringA) : pValueCollection =='
					; DATA XREF: Ordinal596+8o
		db ' NULL',0Ah,0
; char aCvaluecolle_77[]
aCvaluecolle_77	db 'CValueCollectionConvert::SetValue(CStringW) : pValueCollection =='
					; DATA XREF: Ordinal598+8o
		db ' NULL',0Ah,0
aCvaluecolle_79	db 'CValueCollectionConvert::GetValue(CStringA)',0
					; DATA XREF: Ordinal595:loc_6B18C823o
		align 8
; char aCvaluecolle_78[]
aCvaluecolle_78	db 'CValueCollectionConvert::GetValue(CStringA) : pValueCollection =='
					; DATA XREF: Ordinal595+22o
		db ' NULL',0Ah,0
aCvaluecolle_81	db 'CValueCollectionConvert::GetValue(CStringW)',0
					; DATA XREF: Ordinal597:loc_6B18C976o
		align 10h
; char aCvaluecolle_80[]
aCvaluecolle_80	db 'CValueCollectionConvert::GetValue(CStringW) : pValueCollection =='
					; DATA XREF: Ordinal597+22o
		db ' NULL',0Ah,0
off_6B1AEF28	dd offset sub_6B18CCBF	; DATA XREF: Ordinal601+Fo
					; Ordinal602+3o
; char aCadmindaclCr_4[]
aCadmindaclCr_4	db 'CAdminDacl::Create() : AddAccessAllowedAce() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal605+170o
		align 10h
aCadmindaclCr_3	db 'CAdminDacl::Create() : SetSecurityDescriptorDacl() == FALSE, 0x%0'
					; DATA XREF: Ordinal605+157o
		db '8X',0Ah,0
		align 4
; char aCadmindaclCr_2[]
aCadmindaclCr_2	db 'CAdminDacl::Create() : InitializeAcl() == FALSE',0Ah,0
					; DATA XREF: Ordinal605+F5o
		align 4
aCadmindaclCr_1	db 'CAdminDacl::Create() : m_AclMem.NewAlloc() == NULL',0Ah,0
					; DATA XREF: Ordinal605+E0o
aCadmindaclCr_0	db 'CAdminDacl::Create() : InitializeSecurityDescriptor() == FALSE, 0'
					; DATA XREF: Ordinal605+C6o
		db 'x%08X',0Ah,0
aCadmindaclCrea	db 'CAdminDacl::Create() : AllocateAndInitializeSid() == FALSE, 0x%08'
					; DATA XREF: Ordinal605+98o
		db 'X',0Ah,0
off_6B1AF0AC	dd offset unknown_libname_2 ; DATA XREF: Ordinal607+2o
					; Ordinal608+2o ...
					; Microsoft VisualC 2-10/net runtime
off_6B1AF0B0	dd offset unknown_libname_3 ; DATA XREF: Ordinal610+17o
					; Ordinal611o ...
					; Microsoft VisualC 2-10/net runtime
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
; char aCarchiveResetS[]
aCarchiveResetS	db 'CArchive::Reset() : SetPosEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal615+28o
		align 10h
; char aCarchiveWrit_1[]
aCarchiveWrit_1	db 'CArchive::WriteVariantBuffer() : varBuffer.Reference() == FALSE',0Ah
					; DATA XREF: Ordinal705:loc_6B18CEB1o
		db 0
		align 8
aCarchiveWrit_0	db 'CArchive::WriteVariantBuffer() : varBuffer.GetBuffer() == NULL',0Ah,0
					; DATA XREF: Ordinal705+65o
; char aCarchiveWritev[]
aCarchiveWritev	db 'CArchive::WriteVariantBuffer() : WriteEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal705+4Co
					; Ordinal705+7Bo
		align 10h
; char aCarchiveRead_2[]
aCarchiveRead_2	db 'CArchive::ReadVariantBuffer() : varBuffer.Detach() == FALSE',0Ah,0
					; DATA XREF: Ordinal706+ACo
		align 10h
; char aCarchiveRead_1[]
aCarchiveRead_1	db 'CArchive::ReadVariantBuffer() : varBuffer.GetBuffer() == NULL',0Ah,0
					; DATA XREF: Ordinal706+61o
		align 10h
aCarchiveRead_0	db 'CArchive::ReadVariantBuffer() : varBuffer.Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal706+4Eo
		align 10h
; char aCarchiveReadva[]
aCarchiveReadva	db 'CArchive::ReadVariantBuffer() : ReadEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal706+28o
					; Ordinal706+7Co
		align 4
; char aCarchiveWrit_2[]
aCarchiveWrit_2	db 'CArchive::WriteVariantString() : WriteEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal707+2Co
					; Ordinal707+51o
		align 10h
; char aCarchiveRead_4[]
aCarchiveRead_4	db 'CArchive::ReadVariantString() : SysAllocStringByteLen() == NULL',0Ah
					; DATA XREF: Ordinal708+46o
		db 0
		align 4
; char aCarchiveRead_3[]
aCarchiveRead_3	db 'CArchive::ReadVariantString() : ReadEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal708+1Eo
					; Ordinal708+62o
		align 4
dword_6B1AF358	dd 109h, 0		; DATA XREF: sub_6B18DAA0+14o
		dd 0C0h, 46000000h
; char aCarchivePeekSe[]
aCarchivePeekSe	db 'CArchive::Peek() : SetPosEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal612+D0o
					; Ordinal612:loc_6B18D1F4o
; char aCarchivePeakRe[]
aCarchivePeakRe	db 'CArchive::Peak() : ReadEx() == FALSE',0Ah,0 ; DATA XREF: Ordinal612+B4o
		align 4
aCarchivePeekRe	db 'CArchive::Peek() : ReadEx() == FALSE',0Ah,0 ; DATA XREF: Ordinal612+80o
		align 10h
; char aCarchivePeekGe[]
aCarchivePeekGe	db 'CArchive::Peek() : GetPosEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal612+40o
aCarchivePeekM_	db 'CArchive::Peek() : m_eArchiveType != eReadArchive',0Ah,0
					; DATA XREF: Ordinal612+24o
		align 4
; char aCarchiveReadSe[]
aCarchiveReadSe	db 'CArchive::Read() : SetPosEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal696+E6o
; char aCarchiveReadRe[]
aCarchiveReadRe	db 'CArchive::Read() : ReadEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal696:loc_6B18D318o
		align 4
aCarchiveReadDw	db 'CArchive::Read() : dwSize < dwRead',0Ah,0 ; DATA XREF: Ordinal696+B4o
aCarchiveReadEr	db 'CArchive::Read() : eReadType != eDataType',0Ah,0
					; DATA XREF: Ordinal696+7Fo
		align 4
; char aCarchiveWriteG[]
aCarchiveWriteG	db 'CArchive::Write() : GetPosEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal696+36o
					; Ordinal697+39o
		align 4
aCarchiveReadM_	db 'CArchive::Read() : m_eArchiveType != eReadArchive',0Ah,0
					; DATA XREF: Ordinal696+1Ao
		align 4
; char aCarchiveWriteS[]
aCarchiveWriteS	db 'CArchive::Write() : SetPosEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal697+CBo
		align 4
; char aCarchiveWriteW[]
aCarchiveWriteW	db 'CArchive::Write() : WriteEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal697:loc_6B18D40Ao
; char aCarchiveWriteM[]
aCarchiveWriteM	db 'CArchive::Write() : m_eArchiveType != eWriteArchive',0Ah,0
					; DATA XREF: Ordinal697+Fo
		align 4
; char aCarchiveRead_9[]
aCarchiveRead_9	db 'CArchive::ReadVariantObject() : OleLoadFromStream() != S_OK, 0x%0'
					; DATA XREF: Ordinal710+117o
		db '8X',0Ah,0
		align 10h
; char aCarchiveRead_8[]
aCarchiveRead_8	db 'CArchive::ReadVariantObject() : CreateStreamOnHGlobal() != S_OK, '
					; DATA XREF: Ordinal710+C5o
		db '0x%08X',0Ah,0
		align 4
; char aCarchiveRead_7[]
aCarchiveRead_7	db 'CArchive::ReadVariantObject() : GlobalLock() == NULL',0Ah,0
					; DATA XREF: Ordinal710+5Do
		align 4
aCarchiveRead_6	db 'CArchive::ReadVariantObject() : GlobalAlloc() == NULL',0Ah,0
					; DATA XREF: Ordinal710+4Bo
		align 4
; char aCarchiveRead_5[]
aCarchiveRead_5	db 'CArchive::ReadVariantObject() : ReadEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal710+24o
					; Ordinal710+7Co
		align 10h
; char aCarchiveRea_10[]
aCarchiveRea_10	db 'CArchive::Read(CMemory&) : Memory.NewAlloc() == NULL',0Ah,0
					; DATA XREF: Ordinal652+39o
		align 4
aCarchiveReadCm	db 'CArchive::Read(CMemory&) : Peek() == FALSE',0Ah,0
					; DATA XREF: Ordinal652+24o
aCarchiveRea_15	db 'CArchive::ReadVariant() : ReadVariantObject() == FALSE',0Ah,0
					; DATA XREF: Ordinal702+DEo
aCarchiveRea_14	db 'CArchive::ReadVariant() : ReadVariantString() == FALSE',0Ah,0
					; DATA XREF: Ordinal702+A3o
aCarchiveRea_13	db 'CArchive::ReadVariant() : ReadVariantArray() == FALSE',0Ah,0
					; DATA XREF: Ordinal702+79o
		align 4
; char aCarchiveRea_12[]
aCarchiveRea_12	db 'CArchive::ReadVariant() : ReadVariantBuffer() == FALSE',0Ah,0
					; DATA XREF: Ordinal702+59o
; char aCarchiveRea_11[]
aCarchiveRea_11	db 'CArchive::ReadVariant() : ReadEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal702+23o
					; Ordinal702+B6o
		align 4
; char aCarchiveRea_20[]
aCarchiveRea_20	db 'CArchive::ReadVariantArray() : varArray.Detach() == FALSE',0Ah,0
					; DATA XREF: Ordinal704+C7o
		align 10h
; char aCarchiveRea_19[]
aCarchiveRea_19	db 'CArchive::ReadVariantArray() : ReadVariant() == FALSE',0Ah,0
					; DATA XREF: Ordinal704:loc_6B18E022o
		align 4
; char aCarchiveRea_18[]
aCarchiveRea_18	db 'CArchive::ReadVariantArray() : varArray.Lock() == FALSE',0Ah,0
					; DATA XREF: Ordinal704+64o
		align 4
aCarchiveRea_17	db 'CArchive::ReadVariantArray() : varArray.Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal704+51o
		align 10h
; char aCarchiveRea_16[]
aCarchiveRea_16	db 'CArchive::ReadVariantArray() : ReadEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal704+2Bo
		align 4
; char aCarchiveRea_25[]
aCarchiveRea_25	db 'CArchive::Read(VARIANT) : SetPosEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal655+D0o
		align 4
; char aCarchiveRea_24[]
aCarchiveRea_24	db 'CArchive::Read(VARIANT) : ReadVariant() == FALSE',0Ah,0
					; DATA XREF: Ordinal655+B4o
		align 4
aCarchiveRea_23	db 'CArchive::Read(VARIANT) : eReadType != eVariantData',0Ah,0
					; DATA XREF: Ordinal655+84o
		align 10h
aCarchiveRea_22	db 'CArchive::Read(VARIANT) : ReadEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal655:loc_6B18E109o
		align 10h
; char aCarchiveRea_21[]
aCarchiveRea_21	db 'CArchive::Read(VARIANT) : GetPosEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal655+39o
		align 10h
; char aCarchiveReadVa[]
aCarchiveReadVa	db 'CArchive::Read(VARIANT) : m_eArchiveType != eReadArchive',0Ah,0
					; DATA XREF: Ordinal655+Fo
		align 10h
; char aCarchiveWrit_8[]
aCarchiveWrit_8	db 'CArchive::WriteVariantObject() : CreateStreamOnHGlobal() != S_OK,'
					; DATA XREF: Ordinal709+145o
		db ' 0x%08X',0Ah,0
		align 10h
; char aCarchiveWrit_7[]
aCarchiveWrit_7	db 'CArchive::WriteVariantObject() : GetHGlobalFromStream() != S_OK',0Ah
					; DATA XREF: Ordinal709:loc_6B18E409o
		db 0
		align 4
; char aCarchiveWrit_6[]
aCarchiveWrit_6	db 'CArchive::WriteVariantObject() : WriteEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal709:loc_6B18E3D1o
		align 4
aCarchiveWrit_5	db 'CArchive::WriteVariantObject() : GlobalLock() == NULL',0Ah,0
					; DATA XREF: Ordinal709+C4o
		align 8
aCarchiveWrit_4	db 'CArchive::WriteVariantObject() : OleSaveToStream() != S_OK, 0x%08'
					; DATA XREF: Ordinal709+88o
		db 'X',0Ah,0
; char aCarchiveWrit_3[]
aCarchiveWrit_3	db 'CArchive::WriteVariantObject() : pPersistStream == NULL',0Ah,0
					; DATA XREF: Ordinal709:loc_6B18E30Fo
		align 4
; char aCarchiveRea_27[]
aCarchiveRea_27	db 'CArchive::Read(CStringA&) : Read() == FALSE',0Ah,0
					; DATA XREF: Ordinal642+8Bo
		align 4
aCarchiveRea_26	db 'CArchive::Read(CStringA&)',0 ; DATA XREF: Ordinal642:loc_6B18E489o
		align 4
; char aCarchiveReadCs[]
aCarchiveReadCs	db 'CArchive::Read(CStringA&) : PeekSize() == FALSE',0Ah,0
					; DATA XREF: Ordinal642+39o
		align 4
; char aCarchiveRea_30[]
aCarchiveRea_30	db 'CArchive::Read(CStringW&) : Read() == FALSE',0Ah,0
					; DATA XREF: Ordinal647+8Eo
		align 4
aCarchiveRea_29	db 'CArchive::Read(CStringW&)',0 ; DATA XREF: Ordinal647:loc_6B18E5EBo
		align 4
; char aCarchiveRea_28[]
aCarchiveRea_28	db 'CArchive::Read(CStringW&) : Peek() == FALSE',0Ah,0
					; DATA XREF: Ordinal647+39o
		align 4
aCarchiveWri_14	db 'CArchive::WriteVariant() : WriteVariantObject() == FALSE',0Ah,0
					; DATA XREF: Ordinal701+F3o
		align 10h
aCarchiveWri_13	db 'CArchive::WriteVariant() : WriteVariantString() == FALSE',0Ah,0
					; DATA XREF: Ordinal701+B8o
		align 4
aCarchiveWri_12	db 'CArchive::WriteVariant() : WriteVariantArray() == FALSE',0Ah,0
					; DATA XREF: Ordinal701+8Eo
		align 4
; char aCarchiveWri_11[]
aCarchiveWri_11	db 'CArchive::WriteVariant() : WriteVariantBuffer() == FALSE',0Ah,0
					; DATA XREF: Ordinal701+6Eo
		align 4
; char aCarchiveWri_10[]
aCarchiveWri_10	db 'CArchive::WriteVariant() : WriteEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal701+38o
					; Ordinal701+CBo
		align 4
; char aCarchiveWrit_9[]
aCarchiveWrit_9	db 'CArchive::WriteVariant() : IsVariantSupported() == FALSE',0Ah,0
					; DATA XREF: Ordinal701+14o
		align 10h
; char aCarchiveWri_18[]
aCarchiveWri_18	db 'CArchive::WriteVariantArray() : varArray.Reference() == FALSE',0Ah,0
					; DATA XREF: Ordinal703:loc_6B18E91Co
		align 10h
; char aCarchiveWri_17[]
aCarchiveWri_17	db 'CArchive::WriteVariantArray() : WriteVariant() == FALSE',0Ah,0
					; DATA XREF: Ordinal703:loc_6B18E903o
		align 4
aCarchiveWri_16	db 'CArchive::WriteVariantArray() : varArray.Lock() == FALSE',0Ah,0
					; DATA XREF: Ordinal703+70o
		align 4
aCarchiveWri_15	db 'CArchive::WriteVariantArray() : WriteEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal703+57o
; char aCarchiveWri_23[]
aCarchiveWri_23	db 'CArchive::Write(VARIANT) : WriteVariant() == FALSE',0Ah,0
					; DATA XREF: Ordinal656+FCo
aCarchiveWri_22	db 'CArchive::Write(VARIANT) : dummyArchive.WriteVariant() == FALSE',0Ah
					; DATA XREF: Ordinal656+C8o
		db 0
		align 4
; char aCarchiveWri_21[]
aCarchiveWri_21	db 'CArchive::Write(VARIANT) : SetPosEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal656+98o
; char aCarchiveWri_20[]
aCarchiveWri_20	db 'CArchive::Write(VARIANT) : WriteEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal656+78o
					; Ordinal656+E0o
		align 4
; char aCarchiveWri_19[]
aCarchiveWri_19	db 'CArchive::Write(VARIANT) : GetPosEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal656+39o
; char aCarchiveWriteV[]
aCarchiveWriteV	db 'CArchive::Write(VARIANT) : m_eArchiveType != eWriteArchive',0Ah,0
					; DATA XREF: Ordinal656+Fo
off_6B1B00E0	dd offset aSunday	; DATA XREF: Ordinal737+6Er
					; "Sunday"
		dd offset aMonday	; "Monday"
		dd offset aTuesday	; "Tuesday"
		dd offset aWednesday	; "Wednesday"
		dd offset aThursday	; "Thursday"
		dd offset aFriday	; "Friday"
		dd offset aSaturday	; "Saturday"
aSaturday	db 'Saturday',0         ; DATA XREF: .rdata:6B1B00F8o
		align 4
aFriday		db 'Friday',0           ; DATA XREF: .rdata:6B1B00F4o
		align 10h
aThursday	db 'Thursday',0         ; DATA XREF: .rdata:6B1B00F0o
		align 4
aWednesday	db 'Wednesday',0        ; DATA XREF: .rdata:6B1B00ECo
		align 4
aTuesday	db 'Tuesday',0          ; DATA XREF: .rdata:6B1B00E8o
aMonday		db 'Monday',0           ; DATA XREF: .rdata:6B1B00E4o
		align 4
aSunday		db 'Sunday',0           ; DATA XREF: .rdata:off_6B1B00E0o
		align 10h
; char aCautocyclelogf[]
aCautocyclelogf	db 'CAutoCycleLogFile::Clear() : m_File.SetLength() == FALSE',0Ah,0
					; DATA XREF: Ordinal720+29o
		align 4
off_6B1B017C	dd offset sub_6B18EDD1	; DATA XREF: Ordinal712+3o
					; Ordinal711+6o
		dd offset Ordinal735
; char pszTrimChars[3]
pszTrimChars	db 0Dh,0Ah,0		; DATA XREF: Ordinal735+55o
					; Ordinal722:loc_6B18F770o ...
		align 4
; unsigned __int8 asc_6B1B0188
asc_6B1B0188	db ' ',0                ; DATA XREF: Ordinal735+50o
					; Ordinal794+4Fo
		align 4
; unsigned __int8 dword_6B1B018C
dword_6B1B018C	dd 8070920h, 0A0D0B0Ch,	0 ; DATA XREF: Ordinal735+6o
; char dword_6B1B0198[]
dword_6B1B0198	dd 2Eh			; DATA XREF: Ordinal737+147o
; char SubBlock[2]
SubBlock	db '\',0                ; DATA XREF: Ordinal737+11Ao
					; Ordinal1539+46o ...
		align 10h
; char a_0Dlu[]
a_0Dlu		db '_%%0%dlu',0         ; DATA XREF: Ordinal737+D2o
		align 4
; char a_04d02d02d[]
a_04d02d02d	db '_%04d%02d%02d',0    ; DATA XREF: Ordinal737+8Eo
		align 4
a_S		db '_%s',0              ; DATA XREF: Ordinal737+75o
; char a_02d[]
a_02d		db '_%02d',0            ; DATA XREF: Ordinal737+57o
		align 4
aCautocyclelo_0	db 'CAutoCycleLogFile::BuildFileName()',0 ; DATA XREF: Ordinal737+27o
		align 4
; char aCautocyclelo_3[]
aCautocyclelo_3	db 'CAutoCycleLogFile::Open() : m_File.SeekToEnd() == FALSE',0Ah,0
					; DATA XREF: Ordinal738+65o
		align 4
aCautocyclelo_2	db 'CAutoCycleLogFile::Open() : m_File.Open() == FALSE',0Ah,0
					; DATA XREF: Ordinal738+53o
; char aCautocyclelo_1[]
aCautocyclelo_1	db 'CAutoCycleLogFile::Open() : BuildFileName() == FALSE',0Ah,0
					; DATA XREF: Ordinal738+19o
		align 4
; char aCautocyclelo_5[]
aCautocyclelo_5	db 'CAutoCycleLogFile::Open() : szDirectory == NULL',0Ah,0
					; DATA XREF: Ordinal718:loc_6B18F658o
		align 4
aCautocyclelo_4	db 'CAutoCycleLogFile::Open()',0 ; DATA XREF: Ordinal718+76o
		align 4
; char aCautocyclelo_7[]
aCautocyclelo_7	db 'CAutoCycleLogFile::LogEx() : m_File.Write() == FALSE',0Ah,0
					; DATA XREF: Ordinal736+4Co
		align 4
; char aCautocyclelo_6[]
aCautocyclelo_6	db 'CAutoCycleLogFile::LogEx() : CycleLogFile() == FALSE',0Ah,0
					; DATA XREF: Ordinal736+24o
		align 4
; char aCautocyclelo_9[]
aCautocyclelo_9	db 'CAutoCycleLogFile::LogV() : Filter() == FALSE',0Ah,0
					; DATA XREF: Ordinal722+5Ao
		align 4
aCautocyclelo_8	db 'CAutoCycleLogFile::LogV()',0 ; DATA XREF: Ordinal722+2Co
		align 10h
; char aLd[]
aLd		db '%ld',0              ; DATA XREF: Ordinal713+7o
					; Ordinal844+7o
; char asc_6B1B03A4[]
asc_6B1B03A4	db '%f',0               ; DATA XREF: Ordinal714+Co
					; Ordinal845+Co
		align 4
; char aLu[]
aLu		db '%lu',0              ; DATA XREF: Ordinal715+7o
					; Ordinal846+7o
; char aC[]
aC		db '%c',0               ; DATA XREF: Ordinal716+9o
					; Ordinal847+9o
		align 10h
; char aS[]
aS		db '%s',0               ; DATA XREF: Ordinal717+7o
					; Ordinal848+7o
		align 4
off_6B1B03B4	dd offset sub_6B18FE28	; DATA XREF: Ordinal740+6o
					; Ordinal741+3o
; char aCcircularbuffe[]
aCcircularbuffe	db 'CCircularBuffer::Create() : m_Buffer.Alloc() == NULL',0Ah,0
					; DATA XREF: Ordinal742+31o
		align 10h
; char aCcircularbuf_2[]
aCcircularbuf_2	db 'CCircularBuffer::ReadEx() : WriteFile() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal752+87o
		align 4
; char aCcircularbuf_1[]
aCcircularbuf_1	db 'CCircularBuffer::ReadEx() : m_nDataSize < nSize',0Ah,0
					; DATA XREF: Ordinal752+29o
		align 10h
; char aCcircularbuf_0[]
aCcircularbuf_0	db 'CCircularBuffer::ReadEx() : m_pBufferBegin == NULL',0Ah,0
					; DATA XREF: Ordinal752+Eo
; char aCcircularbuf_5[]
aCcircularbuf_5	db 'CCircularBuffer::WriteEx() : ReadFile() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal753+110o
		align 10h
; char aCcircularbuf_4[]
aCcircularbuf_4	db 'CCircularBuffer::WriteEx() : m_nDataSize + nSize > m_Buffer.GetSi'
					; DATA XREF: Ordinal753+36o
		db 'ze()',0Ah,0
		align 4
; char aCcircularbuf_3[]
aCcircularbuf_3	db 'CCircularBuffer::WriteEx() : m_pBufferBegin == NULL',0Ah,0
					; DATA XREF: Ordinal753+Fo
		align 10h
off_6B1B0550	dd offset sub_6B1905A4	; DATA XREF: Ordinal754+30o
					; Ordinal755+3o
		dd offset Ordinal770
		dd offset Ordinal956
; char aCcircularstore[]
aCcircularstore	db 'CCircularStore::WriteOffset() : WriteHeader() == FALSE',0Ah,0
					; DATA XREF: Ordinal771+11o
; char aCcircularsto_0[]
aCcircularsto_0	db 'CCircularStore::ReadOffset() : ReadHeader() == FALSE',0Ah,0
					; DATA XREF: Ordinal772+27o
		align 4
; char aCcircularsto_1[]
aCcircularsto_1	db 'CCircularStore::Close() : WriteOffset() == FALSE',0Ah,0
					; DATA XREF: Ordinal760+39o
		align 10h
; char aCcircularsto_2[]
aCcircularsto_2	db 'CCircularStore::Clear() : WriteOffset() == FALSE',0Ah,0
					; DATA XREF: Ordinal761+49o
		align 4
; char aCcircularsto_9[]
aCcircularsto_9	db 'CCircularStore::Add() : dwSize == 0',0Ah,0
					; DATA XREF: Ordinal762:loc_6B19038Eo
		align 4
aCcircularsto_8	db 'CCircularStore::Add() : WriteIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal762:loc_6B190387o
		align 4
aCcircularsto_7	db 'CCircularStore::Add() : WriteOffset() == FALSE',0Ah,0
					; DATA XREF: Ordinal762+335o
aCcircularsto_6	db 'CCircularStore::Add() : ReadIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal762:loc_6B1902C5o
		align 4
aCcircularsto_5	db 'CCircularStore::Add() : m_File.SetLength() == FALSE',0Ah,0
					; DATA XREF: Ordinal762:loc_6B1902BBo
		align 4
; char aCdatastoreAddU[]
aCdatastoreAddU	db 'CDataStore::Add() : uBlockSize > DWORD(-1)',0Ah,0
					; DATA XREF: Ordinal762+197o
					; Ordinal762:loc_6B1902CFo
aCcircularsto_4	db 'CCircularStore::Add() : m_File.GetLength() == FALSE',0Ah,0
					; DATA XREF: Ordinal762+8Fo
		align 4
aCcircularsto_3	db 'CCircularStore::Add() : dwSize + sizeof(HeaderInfo) + m_dwHeaderS'
					; DATA XREF: Ordinal762:loc_6B190096o
		db 'ize > m_uMaxSize',0Ah,0
		align 4
aCcircularst_14	db 'CCircularStore::ValidateFile() : offset.m_uOffset > uFileSize',0Ah,0
					; DATA XREF: Ordinal770:loc_6B1904BBo
		align 4
aCcircularst_13	db 'CCircularStore::ValidateFile() : ReadIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal770:loc_6B1904B1o
		align 4
; char aCcircularst_12[]
aCcircularst_12	db 'CCircularStore::ValidateFile() : m_File.GetLength() == FALSE',0Ah,0
					; DATA XREF: Ordinal770+5Fo
		align 4
; char aCcircularst_11[]
aCcircularst_11	db 'CCircularStore::ValidateFile() : ReadOffset() == FALSE',0Ah,0
					; DATA XREF: Ordinal770+28o
		align 10h
aCcircularst_10	db 'CCircularStore::ValidateFile() : CDataStore::ValidateFile() == FA'
					; DATA XREF: Ordinal770+12o
		db 'LSE',0Ah,0
		align 4
aCcircularst_17	db 'CCircularStore::SetMaxSize() : Clear() == FALSE',0Ah,0
					; DATA XREF: Ordinal759+98o
		align 4
aCcircularst_16	db 'CCircularStore::SetMaxSize() : m_File.GetLength() == FALSE',0Ah,0
					; DATA XREF: Ordinal759+75o
; char aCcircularst_15[]
aCcircularst_15	db 'CCircularStore::SetMaxSize() : uMaxSize < sizeof(HeaderInfo) m_dw'
					; DATA XREF: Ordinal759:loc_6B19052Co
		db 'HeaderSize + sizeof(IndexInfo)',0Ah,0
		align 4
aCcircularst_20	db 'CCircularStore::Open() : SetMaxSize() == FALSE',0Ah,0
					; DATA XREF: Ordinal756+A8o
; char aCcircularst_19[]
aCcircularst_19	db 'CCircularStore::Open() : ReadOffset() == FALSE',0Ah,0
					; DATA XREF: Ordinal756+4Do
; char aCcircularst_18[]
aCcircularst_18	db 'CCircularStore::Open() : CDataStore::Open() == FALSE',0Ah,0
					; DATA XREF: Ordinal756+2Bo
		align 4
off_6B1B0A84	dd offset sub_6B190819	; DATA XREF: Ordinal773+6o
					; Ordinal774+Do ...
aCoinit_multith	db 'COINIT_MULTITHREADED',0 ; DATA XREF: Ordinal778+61o
		align 10h
; char aCcoinitializeC[]
aCcoinitializeC	db 'CCoInitialize::CoInitialize() : %s',0Ah,0 ; DATA XREF: Ordinal778+47o
aCoinit_apartme	db 'COINIT_APARTMENTTHREADED',0 ; DATA XREF: Ordinal778+41o
		align 10h
; char aCcoinitializ_1[]
aCcoinitializ_1	db 'CCoInitialize::CoUninitialize() : GetExceptionCode() == EXCEPTION'
					; DATA XREF: Ordinal779+2Fo
		db '_ACCESS_VIOLATION',0Ah,0
		align 8
stru_6B1B0B38	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6B19073F, \
					; DATA XREF: Ordinal779+2o
				   offset loc_6B190753>	; SEH scope table for function 6B190727
; char aCcoinitializeI[]
aCcoinitializeI	db 'CCoInitialize::Initialize() : CoInitialize() != S_OK, 0x%08X',0Ah,0
					; DATA XREF: Ordinal776+25o
		align 8
; char aCcoinitializeU[]
aCcoinitializeU	db 'CCoInitialize::Uninitialize() : m_dwThreadId != GetCurrentThreadI'
					; DATA XREF: Ordinal777:loc_6B1907C6o
		db 'd()',0Ah,0
		align 10h
; char aCcoinitializ_0[]
aCcoinitializ_0	db 'CCoInitialize::CCoInitialize() : Initialize() != S_OK, 0x%08X',0Ah,0
					; DATA XREF: Ordinal774+22o
		align 10h
aVectorTTooLong	db 'vector<T> too long',0 ; DATA XREF: sub_6B19086B+Do
					; sub_6B1981AE+Do ...
		align 4
off_6B1B0C24	dd offset sub_6B191AE8	; DATA XREF: Ordinal780+4o Ordinal781o
; char aCcommandline_0[]
aCcommandline_0	db 'CCommandLine::ProcessCommand() : sToken.GetLength() <= 1',0Ah,0
					; DATA XREF: Ordinal791+A6o
		align 4
aCcommandlinePr	db 'CCommandLine::ProcessCommand()',0 ; DATA XREF: Ordinal791+1Ao
		align 4
; char aCcommandline_1[]
aCcommandline_1	db 'CCommandLine::Tokenize() : sString.Find() == -1',0Ah,0
					; DATA XREF: Ordinal794+111o
		align 4
aCcommandlineTo	db 'CCommandLine::Tokenize()',0 ; DATA XREF: Ordinal794+18o
		align 8
; char aCcommandline_2[]
aCcommandline_2	db 'CCommandLine::GetSwitchValuesEx() : pos == m_CommandInfoVector.en'
					; DATA XREF: Ordinal795:loc_6B191AA3o
		db 'd()',0Ah,0
		align 10h
aCcommandlineGe	db 'CCommandLine::GetSwitchValuesEx()',0 ; DATA XREF: Ordinal795+1Ao
		align 4
; char aCcommandline_5[]
aCcommandline_5	db 'CCommandLine::Parse() : szCommandLine == NULL',0Ah,0
					; DATA XREF: Ordinal782:loc_6B191BD8o
		align 4
; char aCcommandline_4[]
aCcommandline_4	db 'CCommandLine::Parse() : ProcessCommand() == false',0Ah,0
					; DATA XREF: Ordinal782:loc_6B191BB7o
		align 4
aCcommandline_3	db 'CCommandLine::Parse() : CStringConvert::Copy() == false',0Ah,0
					; DATA XREF: Ordinal782+8Bo
		align 4
; char aCcommandlinePa[]
aCcommandlinePa	db 'CCommandLine::Parse() : Tokenize() == false',0Ah,0
					; DATA XREF: Ordinal782+62o
		align 4
; char asc_6B1B0E14[]
asc_6B1B0E14	db '/-',0               ; DATA XREF: Ordinal783+1o
		align 4
; char aCcommandline_6[]
aCcommandline_6	db 'CCommandLine::GetSwitchValues() : GetSwitchValuesEx() == false',0Ah,0
					; DATA XREF: Ordinal788:loc_6B191C58o
; char aCcommandline_7[]
aCcommandline_7	db 'CCommandLine::GetSwitchValue() : GetSwitchValues() == false',0Ah,0
					; DATA XREF: Ordinal785+22o
					; Ordinal787+25o
		align 4
off_6B1B0E98	dd offset sub_6B191D7A	; DATA XREF: Ordinal798+Fo Ordinal799o
		dd offset _purecall
		dd offset Ordinal1424
		dd offset Ordinal1366
		dd offset Ordinal1367
		dd offset Ordinal1368
		dd offset Ordinal1369
		dd offset Ordinal1370
		dd offset Ordinal1374
		dd offset Ordinal1374
		dd offset Ordinal1374
		dd offset Ordinal1374
		dd offset Ordinal1374
		dd offset Ordinal1376
		dd offset Ordinal1376
		dd offset Ordinal1376
		dd offset Ordinal1376
		dd offset Ordinal1402
		dd offset Ordinal1403
		dd offset Ordinal1404
		dd offset Ordinal1416
		dd offset Ordinal1414
		dd offset Ordinal829
		dd offset Ordinal829
		dd offset Ordinal802
		dd offset Ordinal803
		dd offset Ordinal804
		dd offset Ordinal805
		dd offset Ordinal806
		dd offset Ordinal808
		dd offset Ordinal807
		align 8
; char aCcomserviceUnr[]
aCcomserviceUnr	db 'CComService::Unregister() : m_pComModule->Unregister() != S_OK, 0'
					; DATA XREF: Ordinal811+10o
		db 'x%08X',0Ah,0
; char aCcomserviceOnu[]
aCcomserviceOnu	db 'CComService::OnUnRegServer() : Unregister() == FALSE',0Ah,0
					; DATA XREF: Ordinal804+9o
		align 4
; char aCcomserviceOnr[]
aCcomserviceOnr	db 'CComService::OnRemoveService() : Unregister() == FALSE',0Ah,0
					; DATA XREF: Ordinal806+Co
; char aCcomserviceReg[]
aCcomserviceReg	db 'CComService::RegisterStandalone() : m_pComModule->Register() != S'
					; DATA XREF: Ordinal809+19o
		db '_OK, 0x%08X',0Ah,0
		align 10h
; char aCcomserviceR_0[]
aCcomserviceR_0	db 'CComService::RegisterService() : m_pComModule->Register() != S_OK'
					; DATA XREF: Ordinal810+19o
		db ', 0x%08X',0Ah,0
		align 4
; char aCcomserviceO_0[]
aCcomserviceO_0	db 'CComService::OnRunEmbedded() : RegisterStandalone() == FALSE',0Ah,0
					; DATA XREF: Ordinal802+Co
		align 4
; char aCcomserviceO_1[]
aCcomserviceO_1	db 'CComService::OnRegServer() : RegisterStandalone() == FALSE',0Ah,0
					; DATA XREF: Ordinal803+9o
; char aCcomserviceO_2[]
aCcomserviceO_2	db 'CComService::OnInstallService() : RegisterStandalone() == FALSE',0Ah
					; DATA XREF: Ordinal805+27o
		db 0
		align 4
aCcomserviceOni	db 'CComService::OnInstallService() : RegisterService() == FALSE',0Ah,0
					; DATA XREF: Ordinal805+17o
		align 4
; char aCcomserviceO_4[]
aCcomserviceO_4	db 'CComService::OnRunService() : RegisterStandalone() == FALSE',0Ah,0
					; DATA XREF: Ordinal807+27o
		align 4
aCcomserviceO_3	db 'CComService::OnRunService() : RegisterService() == FALSE',0Ah,0
					; DATA XREF: Ordinal807+17o
		align 4
; char aCcomserviceO_5[]
aCcomserviceO_5	db 'CComService::OnRunDebug() : RegisterStandalone() == FALSE',0Ah,0
					; DATA XREF: Ordinal808+Co
		align 4
		dd 2710h
; char aCconsoleInitin[]
aCconsoleInitin	db 'CConsole::InitInstance()',0Ah,0 ; DATA XREF: Ordinal834o
		align 4
; char aCconsoleExitin[]
aCconsoleExitin	db 'CConsole::ExitInstance()',0Ah,0 ; DATA XREF: Ordinal835o
		align 10h
; char aCconsoleProc_0[]
aCconsoleProc_0	db 'CConsole::ProcessEvents() : ReadConsoleInput() == FALSE, 0x%08X',0Ah
					; DATA XREF: Ordinal838+D0o
		db 0
		align 8
aCconsoleProces	db 'CConsole::ProcessEvents() : GetNumberOfConsoleInputEvents() == FA'
					; DATA XREF: Ordinal838+C2o
		db 'LSE, 0x%08X',0Ah,0
		align 4
; char aCconsoleSett_0[]
aCconsoleSett_0	db 'CConsole::SetTitle() : SetConsoleTitle() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal819+36o
		align 4
; char aCconsoleSettit[]
aCconsoleSettit	db 'CConsole::SetTitle() : CStringConvert::Copy() == false',0Ah,0
					; DATA XREF: Ordinal819+17o
; char aCconsoleRun[]
aCconsoleRun	db 'CConsole::Run()',0Ah,0 ; DATA XREF: Ordinal836+7o
		align 10h
; char aCconsoleDest_2[]
aCconsoleDest_2	db 'CConsole::Destroy() : ::std::cin.sync_with_stdio(true)() == false'
					; DATA XREF: Ordinal817+CBo
		db ', 0x%08X',0Ah,0
		align 4
; char aCconsoleDest_1[]
aCconsoleDest_1	db 'CConsole::Destroy() : FreeConsole() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal817+81o
					; Ordinal817+101o
		align 8
; char aCconsoleDest_0[]
aCconsoleDest_0	db 'CConsole::Destroy() : SetConsoleCtrlHandler() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal817+4Co
; char aCconsoleDestro[]
aCconsoleDestro	db 'CConsole::Destroy() : Terminate() == FALSE',0Ah,0
					; DATA XREF: Ordinal817+1Bo
		align 8
; char aCconsoleCrea_7[]
aCconsoleCrea_7	db 'CConsole::CreateEx() : SetConsoleCtrlHandler() == FALSE, 0x%08X',0Ah
					; DATA XREF: Ordinal837+151o
		db 0
		align 4
; char aCconsoleCrea_6[]
aCconsoleCrea_6	db 'CConsole::CreateEx() : CThread::Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal837+12Ao
		align 10h
aCconsoleCrea_5	db 'CConsole::CreateEx() : ::std::cin.sync_with_stdio() == false, 0x%'
					; DATA XREF: Ordinal837+115o
		db '08X',0Ah,0
		align 4
aCconsoleCrea_4	db 'CConsole::CreateEx() : _tfdopen() == NULL, 0x%08X',0Ah,0
					; DATA XREF: Ordinal837+DDo
		align 4
; char Format[]
Format		db 'r',0                ; DATA XREF: Ordinal837:loc_6B192391o
		align 10h
aCconsoleCrea_3	db 'CConsole::CreateEx() : _open_osfhandle() == -1, 0x%08X',0Ah,0
					; DATA XREF: Ordinal837+BAo
aCconsoleCrea_2	db 'CConsole::CreateEx() : SetConsoleMode() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal837+94o
		align 4
aCconsoleCrea_1	db 'CConsole::CreateEx() : GetConsoleMode() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal837+6Co
		align 10h
aCconsoleCrea_0	db 'CConsole::CreateEx() : GetConsoleScreenBufferInfo() == FALSE, 0x%'
					; DATA XREF: Ordinal837+44o
		db '08X',0Ah,0
		align 4
aCconsoleCreate	db 'CConsole::CreateEx() : GetStdHandle() == NULL, 0x%08X',0Ah,0
					; DATA XREF: Ordinal837+20o
		align 10h
off_6B1B16A0	dd offset sub_6B1925CA	; DATA XREF: Ordinal812+15o
					; Ordinal813+3o
		dd offset Ordinal1741
		dd offset Ordinal1742
		dd offset Ordinal836
		dd offset Ordinal834
		dd offset Ordinal835
		dd offset Ordinal824
		dd offset Ordinal827
		dd offset Ordinal827
		dd offset Ordinal827
		dd offset Ordinal827
		dd offset Ordinal829
		dd offset Ordinal830
		dd offset Ordinal830
		dd offset Ordinal830
		dd offset Ordinal830
; char aCconsoleCre_10[]
aCconsoleCre_10	db 'CConsole::Create() : AllocConsole() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal815+72o
		align 4
; char aCconsoleCrea_9[]
aCconsoleCrea_9	db 'CConsole::Create() : m_Kernel.Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal815+4Fo
		align 4
; char aCconsoleCrea_8[]
aCconsoleCrea_8	db 'CConsole::Create() : FreeConsole() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal815+22o
		align 4
; char aCconsoleAtta_1[]
aCconsoleAtta_1	db 'CConsole::Attach() : AttachConsole() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal816+4Eo
		align 4
aCconsoleAtta_0	db 'CConsole::Attach() : m_Kernel.AttachConsole == NULL',0Ah,0
					; DATA XREF: Ordinal816+33o
		align 4
; char aCconsoleAttach[]
aCconsoleAttach	db 'CConsole::Attach() : COSInfo::IsWinXP() == false',0Ah,0
					; DATA XREF: Ordinal816+1Do
		align 4
; char aCconsoleSett_1[]
aCconsoleSett_1	db 'CConsole::SetTitle() : GetConsoleTitle() == 0, 0x%08X',0Ah,0
					; DATA XREF: Ordinal820+6Co
		align 10h
aCconsoleGettit	db 'CConsole::GetTitle()',0 ; DATA XREF: Ordinal820+1Ao
		align 4
aCconsolewind_4	db 'CConsoleWindow::RedirectIO() : _tfdopen() == NULL, 0x%08X',0Ah,0
					; DATA XREF: Ordinal855+1B9o
		align 4
; char aW[]
aW		db 'w',0                ; DATA XREF: Ordinal855:loc_6B1928DAo
		align 4
aCconsolewind_3	db 'CConsoleWindow::RedirectIO() : _open_osfhandle() == -1, 0x%08X',0Ah,0
					; DATA XREF: Ordinal855+196o
aCconsolewind_2	db 'CConsoleWindow::RedirectIO() : SetStdHandle() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal855+16Bo
; char aCconsolewind_1[]
aCconsolewind_1	db 'CConsoleWindow::Destroy() : SetStdHandle() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal855+D0o
		align 4
; char aCconsolewind_0[]
aCconsolewind_0	db 'CConsoleWindow::RedirectIO() : ::std::cerr.sync_with_stdio() == f'
					; DATA XREF: Ordinal855+A4o
		db 'alse, 0x%08X',0Ah,0
		align 4
; char aCconsolewindow[]
aCconsolewindow	db 'CConsoleWindow::RedirectIO() : ::std::cout.sync_with_stdio() == f'
					; DATA XREF: Ordinal855+50o
					; Ordinal855+222o
		db 'alse, 0x%08X',0Ah,0
		align 4
; char aCconsolewind_6[]
aCconsolewind_6	db 'CConsoleWindow::Clear() : FillConsoleOutputCharacter() == FALSE',0Ah
					; DATA XREF: Ordinal856:loc_6B192A00o
		db 0
		align 10h
aCconsolewind_5	db 'CConsoleWindow::Clear() : GetConsoleScreenBufferInfo() == FALSE',0Ah
					; DATA XREF: Ordinal856+20o
		db 0
		align 4
; char aCconsolewind_9[]
aCconsolewind_9	db 'CConsoleWindow::PrintLine() : szText == NULL',0Ah,0
					; DATA XREF: Ordinal857:loc_6B192AB7o
		align 8
; char aCconsolewind_8[]
aCconsolewind_8	db 'CConsoleWindow::PrintLine() : WriteConsoleOutputCharacter() == FA'
					; DATA XREF: Ordinal857+9Ao
		db 'LSE, 0x%08X',0
		align 4
aCconsolewind_7	db 'CConsoleWindow::PrintLine() : GetConsoleScreenBufferInfo() == FAL'
					; DATA XREF: Ordinal857+47o
		db 'SE, 0x%08X',0
		align 8
; char aCconsolewin_10[]
aCconsolewin_10	db 'CConsoleWindow::GetPosition() : GetConsoleScreenBufferInfo() == F'
					; DATA XREF: Ordinal862+2Fo
		db 'ALSE, 0x%08X',0
		align 4
; char aCconsolewin_11[]
aCconsolewin_11	db 'CConsoleWindow::GetSize() : GetConsoleScreenBufferInfo() == FALSE'
					; DATA XREF: Ordinal864+2Fo
		db ', 0x%08X',0Ah,0
		align 8
; char aCconsolewin_12[]
aCconsolewin_12	db 'CConsoleWindow::SetSize() : GetConsoleScreenBufferInfo() == FALSE'
					; DATA XREF: Ordinal865+27o
		db ', 0x%08X',0Ah,0
		align 8
; char aCconsolewin_14[]
aCconsolewin_14	db 'CConsoleWindow::SetDefaultColors() : GetConsoleScreenBufferInfo()'
					; DATA XREF: Ordinal866+50o
		db ' == FALSE, 0x%08X',0Ah,0
		align 10h
aCconsolewin_13	db 'CConsoleWindow::SetDefaultColors() : SetConsoleTextAttribute() =='
					; DATA XREF: Ordinal866+26o
		db ' FALSE, 0x%08X',0Ah,0
		align 8
; char aCconsolewin_15[]
aCconsolewin_15	db 'CConsoleWindow::SetCursorVisible() : GetConsoleCursorInfo() == FA'
					; DATA XREF: Ordinal867+26o
		db 'LSE, 0x%08X',0Ah,0
		align 4
; char aCconsolewin_16[]
aCconsolewin_16	db 'CConsoleWindow::GetCursorVisible() : GetConsoleCursorInfo() == FA'
					; DATA XREF: Ordinal868+23o
		db 'LSE, 0x%08X',0Ah,0
		align 4
; char aCconsolewin_17[]
aCconsolewin_17	db 'CConsoleWindow::operator =() : Attach() == FALSE',0Ah,0
					; DATA XREF: Ordinal843+20o
		align 10h
; char aCconsolewin_18[]
aCconsolewin_18	db 'CConsoleWindow::Activate() : SetConsoleActiveScreenBuffer() == FA'
					; DATA XREF: Ordinal854+1Do
		db 'LSE, 0x%08X',0Ah,0
		align 10h
off_6B1B1E40	dd offset sub_6B192FBF	; DATA XREF: Ordinal839+6o
					; Ordinal840+6o ...
; char aCconsolewin_20[]
aCconsolewin_20	db 'CConsoleWindow::PrintV() : WriteConsole() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal859+88o
; char aCconsolewin_19[]
aCconsolewin_19	db 'CConsoleWindow::PrintV() : CStringConvert::FormatV() == FALSE',0Ah,0
					; DATA XREF: Ordinal859+4Eo
		align 10h
aCconsolewin_21	db 'CConsoleWindow::SetTitle',0 ; DATA XREF: Ordinal869+1Ao
		align 10h
; char aCconsolewin_28[]
aCconsolewin_28	db 'CConsoleWindow::Create() : SetConsoleWindowInfo() == FALSE, 0x%08'
					; DATA XREF: Ordinal849+140o
		db 'X',0Ah,0
		align 8
aCconsolewin_27	db 'CConsoleWindow::Create() : SetConsoleTextAttribute() == FALSE, 0x'
					; DATA XREF: Ordinal849+11Ao
		db '%08X',0Ah,0
		align 10h
aCconsolewin_26	db 'CConsoleWindow::Create() : SetConsoleScreenBufferSize() == FALSE,'
					; DATA XREF: Ordinal849+F3o
		db ' 0x%08X',0Ah,0
		align 4
aCconsolewin_25	db 'CConsoleWindow::Create() : SetConsoleMode() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal849+C6o
		align 4
aCconsolewin_24	db 'CConsoleWindow::Create() : GetConsoleMode() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal849+9Co
		align 4
; char aCconsolewin_23[]
aCconsolewin_23	db 'CConsoleWindow::Create() : SetTitle() == FALSE',0Ah,0
					; DATA XREF: Ordinal849+68o
		align 10h
; char aCconsolewin_22[]
aCconsolewin_22	db 'CConsoleWindow::Create() : CreateConsoleScreenBuffer() == INVALID'
					; DATA XREF: Ordinal849+42o
		db '_HANDLE_VALUE, 0x%08X',0Ah,0
off_6B1B20C8	dd offset unknown_libname_4 ; DATA XREF: Ordinal875o
					; unknown_libname_4+8o	...
					; Microsoft VisualC 2-10/net runtime
		align 10h
; char aCcpuinfoLoadsi[]
aCcpuinfoLoadsi	db 'CCPUInfo::LoadSignature() : __except (EXCEPTION_EXECUTE_HANDLER)',0Ah
					; DATA XREF: Ordinal887+3Co
		db 0
		align 8
stru_6B1B2118	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6B193452, \
					; DATA XREF: Ordinal887+2o
				   offset loc_6B193456>	; SEH scope table for function 6B19341D
		align 8
; char aCcpuinfoLoadfe[]
aCcpuinfoLoadfe	db 'CCPUInfo::LoadFeatures() : __except (EXCEPTION_EXECUTE_HANDLER)',0Ah
					; DATA XREF: Ordinal888+3Co
		db 0
		align 10h
stru_6B1B2170	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6B1934AB, \
					; DATA XREF: Ordinal888+2o
				   offset loc_6B1934AF>	; SEH scope table for function 6B193476
; char a04x04x04x04x04[]
a04x04x04x04x04	db '%04X-%04X-%04X-%04X-%04X-%04X',0 ; DATA XREF: Ordinal889+B9o
		align 4
; char aCcpuinfoLoadse[]
aCcpuinfoLoadse	db 'CCPUInfo::LoadSerial() : __except (EXCEPTION_EXECUTE_HANDLER)',0Ah,0
					; DATA XREF: Ordinal889+7Fo
		align 10h
stru_6B1B21E0	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6B193547, \
					; DATA XREF: Ordinal889+2o
				   offset loc_6B19354B>	; SEH scope table for function 6B1934CF
; char aCcpuinfoLoadve[]
aCcpuinfoLoadve	db 'CCPUInfo::LoadVendor() : __except (EXCEPTION_EXECUTE_HANDLER)',0Ah,0
					; DATA XREF: Ordinal886+66o
		align 10h
stru_6B1B2230	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6B193661, \
					; DATA XREF: Ordinal886+2o
				   offset loc_6B193665>	; SEH scope table for function 6B193602
; char aCcpuinfoCcpuin[]
aCcpuinfoCcpuin	db 'CCPUInfo::CCPUInfo() : __except (EXCEPTION_EXECUTE_HANDLER)',0Ah,0
					; DATA XREF: Ordinal874+7Bo
		align 10h
stru_6B1B2280	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6B19371C, \
					; DATA XREF: Ordinal874+2o
				   offset loc_6B193720>	; SEH scope table for function 6B1936A8
off_6B1B228C	dd offset sub_6B193BE5	; DATA XREF: Ordinal891+Fo Ordinal892o
		dd offset Ordinal893
; char aCnewcrashhandl[]
aCnewcrashhandl	db 'CNewCrashHandler::NewHandler() : nSize = %lu',0Ah,0
					; DATA XREF: Ordinal893+7o
		align 4
off_6B1B22C4	dd offset sub_6B193C01	; DATA XREF: Ordinal894+Fo Ordinal895o
		dd offset Ordinal896
		align 10h
; char aCexceptioncras[]
aCexceptioncras	db 'CExceptionCrashHandler::ExceptionHandler() : ExceptionCode = %lu',0Ah
					; DATA XREF: Ordinal896+Co
		db 0
		align 4
off_6B1B2314	dd offset sub_6B193C1D	; DATA XREF: Ordinal897+Fo Ordinal898o
		dd offset Ordinal899
; char aCpurecallcrash[]
aCpurecallcrash	db 'CPurecallCrashHandler::PurecallHandler()',0Ah,0
					; DATA XREF: Ordinal899+1o
		align 4
off_6B1B2348	dd offset sub_6B193C39	; DATA XREF: Ordinal900+Fo Ordinal901o
		dd offset Ordinal902
; char aCsecuritycrash[]
aCsecuritycrash	db 'CSecurityCrashHandler::SecurityHandler() : nCode = %d',0Ah,0
					; DATA XREF: Ordinal902+7o
		align 4
off_6B1B2388	dd offset sub_6B193EEA	; DATA XREF: Ordinal904+3o
					; Ordinal903+8o
		dd offset Ordinal907
; char aCcrashhandle_9[]
aCcrashhandle_9	db 'CCrashHandler::Enable() : m_SecurityHandler.Enable() == FALSE',0Ah,0
					; DATA XREF: Ordinal905+141o
		align 10h
aCcrashhandle_8	db 'CCrashHandler::Enable() : m_ExceptionHandler.Enable() == FALSE',0Ah,0
					; DATA XREF: Ordinal905+12Eo
aCcrashhandle_7	db 'CCrashHandler::Enable() : m_PurecallHandler.Enable() == FALSE',0Ah,0
					; DATA XREF: Ordinal905+11Bo
		align 10h
aCcrashhandle_6	db 'CCrashHandler::Enable() : CStringConvert::Copy() == false',0Ah,0
					; DATA XREF: Ordinal905+108o
		align 4
aCcrashhandle_5	db 'CCrashHandler::Enable() : m_NewHandler.Enable() == FALSE',0Ah,0
					; DATA XREF: Ordinal905+E3o
		align 4
; char aCcrashhandle_4[]
aCcrashhandle_4	db 'CCrashHandler::Enable() : versionInfo.Load() == FALSE',0Ah,0
					; DATA XREF: Ordinal905+CCo
		align 10h
; char aCcrashhandle_3[]
aCcrashhandle_3	db 'CCrashHandler::Enable() : CStringConvert::Format() == false',0Ah,0
					; DATA XREF: Ordinal905+99o
		align 10h
; char aSS_dmp[]
aSS_dmp		db '%s%s.dmp',0         ; DATA XREF: Ordinal905+87o
		align 4
; char aCcrashhandle_2[]
aCcrashhandle_2	db 'CCrashHandler::Enable() : path.SplitPath() == false',0Ah,0
					; DATA XREF: Ordinal905+51o
		align 4
; char aCcrashhandlerE[]
aCcrashhandlerE	db 'CCrashHandler::Enable() : m_DebugHelp.Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal905+30o
		align 10h
; char aCcrashhandl_13[]
aCcrashhandl_13	db 'CCrashHandler::Dump() : m_DebugHelp.Dump() == FALSE',0Ah,0
					; DATA XREF: Ordinal907+259o
		align 4
aCcrashhandl_12	db 'CCrashHandler::Dump() : m_DebugHelp.Snap() == FALSE',0Ah,0
					; DATA XREF: Ordinal907+23Do
		align 10h
; char a04d02d02d02d02[]
a04d02d02d02d02	db '-%04d-%02d-%02d-%02d-%02d-%02d-%03d',0 ; DATA XREF: Ordinal907+146o
; char aS_1[]
aS_1		db '-%s',0              ; DATA XREF: Ordinal907+100o
; char aSS_0[]
aSS_0		db '%s%s',0             ; DATA XREF: Ordinal907+DBo
					; Ordinal1027+BEo ...
		align 10h
; char aCcrashhandl_11[]
aCcrashhandl_11	db 'CCrashHandler::Dump() : path.SplitPath() == false',0Ah,0
					; DATA XREF: Ordinal907+B0o
		align 4
aCcrashhandl_10	db 'CCrashHandler::Dump()',0 ; DATA XREF: Ordinal907:loc_6B193F88o
		align 4
; char aCcrashhandlerD[]
aCcrashhandlerD	db 'CCrashHandler::Dump() : eCrashType = %ld, pExceptionInfo = %p',0Ah,0
					; DATA XREF: Ordinal907+4Fo
		align 4
aCcrashhandlerS	db 'CCrashHandler::SetDumpFileName()',0 ; DATA XREF: Ordinal915+30o
		align 10h
dword_6B1B2710	dd 0			; DATA XREF: Ordinal923+19r
		dd 77073096h, 0EE0E612Ch, 990951BAh, 76DC419h, 706AF48Fh
		dd 0E963A535h, 9E6495A3h, 0EDB8832h, 79DCB8A4h,	0E0D5E91Eh
		dd 97D2D988h, 9B64C2Bh,	7EB17CBDh, 0E7B82D07h, 90BF1D91h
		dd 1DB71064h, 6AB020F2h, 0F3B97148h, 84BE41DEh,	1ADAD47Dh
		dd 6DDDE4EBh, 0F4D4B551h, 83D385C7h, 136C9856h,	646BA8C0h
		dd 0FD62F97Ah, 8A65C9ECh, 14015C4Fh, 63066CD9h,	0FA0F3D63h
		dd 8D080DF5h, 3B6E20C8h, 4C69105Eh, 0D56041E4h,	0A2677172h
		dd 3C03E4D1h, 4B04D447h, 0D20D85FDh, 0A50AB56Bh, 35B5A8FAh
		dd 42B2986Ch, 0DBBBC9D6h, 0ACBCF940h, 32D86CE3h, 45DF5C75h
		dd 0DCD60DCFh, 0ABD13D59h, 26D930ACh, 51DE003Ah, 0C8D75180h
		dd 0BFD06116h, 21B4F4B5h, 56B3C423h, 0CFBA9599h, 0B8BDA50Fh
		dd 2802B89Eh, 5F058808h, 0C60CD9B2h, 0B10BE924h, 2F6F7C87h
		dd 58684C11h, 0C1611DABh, 0B6662D3Dh, 76DC4190h, 1DB7106h
		dd 98D220BCh, 0EFD5102Ah, 71B18589h, 6B6B51Fh, 9FBFE4A5h
		dd 0E8B8D433h, 7807C9A2h, 0F00F934h, 9609A88Eh,	0E10E9818h
		dd 7F6A0DBBh, 86D3D2Dh,	91646C97h, 0E6635C01h, 6B6B51F4h
		dd 1C6C6162h, 856530D8h, 0F262004Eh, 6C0695EDh,	1B01A57Bh
		dd 8208F4C1h, 0F50FC457h, 65B0D9C6h, 12B7E950h,	8BBEB8EAh
		dd 0FCB9887Ch, 62DD1DDFh, 15DA2D49h, 8CD37CF3h,	0FBD44C65h
		dd 4DB26158h, 3AB551CEh, 0A3BC0074h, 0D4BB30E2h, 4ADFA541h
		dd 3DD895D7h, 0A4D1C46Dh, 0D3D6F4FBh, 4369E96Ah, 346ED9FCh
		dd 0AD678846h, 0DA60B8D0h, 44042D73h, 33031DE5h, 0AA0A4C5Fh
		dd 0DD0D7CC9h, 5005713Ch, 270241AAh, 0BE0B1010h, 0C90C2086h
		dd 5768B525h, 206F85B3h, 0B966D409h, 0CE61E49Fh, 5EDEF90Eh
		dd 29D9C998h, 0B0D09822h, 0C7D7A8B4h, 59B33D17h, 2EB40D81h
		dd 0B7BD5C3Bh, 0C0BA6CADh, 0EDB88320h, 9ABFB3B6h, 3B6E20Ch
		dd 74B1D29Ah, 0EAD54739h, 9DD277AFh, 4DB2615h, 73DC1683h
		dd 0E3630B12h, 94643B84h, 0D6D6A3Eh, 7A6A5AA8h,	0E40ECF0Bh
		dd 9309FF9Dh, 0A00AE27h, 7D079EB1h, 0F00F9344h,	8708A3D2h
		dd 1E01F268h, 6906C2FEh, 0F762575Dh, 806567CBh,	196C3671h
		dd 6E6B06E7h, 0FED41B76h, 89D32BE0h, 10DA7A5Ah,	67DD4ACCh
		dd 0F9B9DF6Fh, 8EBEEFF9h, 17B7BE43h, 60B08ED5h,	0D6D6A3E8h
		dd 0A1D1937Eh, 38D8C2C4h, 4FDFF252h, 0D1BB67F1h, 0A6BC5767h
		dd 3FB506DDh, 48B2364Bh, 0D80D2BDAh, 0AF0A1B4Ch, 36034AF6h
		dd 41047A60h, 0DF60EFC3h, 0A867DF55h, 316E8EEFh, 4669BE79h
		dd 0CB61B38Ch, 0BC66831Ah, 256FD2A0h, 5268E236h, 0CC0C7795h
		dd 0BB0B4703h, 220216B9h, 5505262Fh, 0C5BA3BBEh, 0B2BD0B28h
		dd 2BB45A92h, 5CB36A04h, 0C2D7FFA7h, 0B5D0CF31h, 2CD99E8Bh
		dd 5BDEAE1Dh, 9B64C2B0h, 0EC63F226h, 756AA39Ch,	26D930Ah
		dd 9C0906A9h, 0EB0E363Fh, 72076785h, 5005713h, 95BF4A82h
		dd 0E2B87A14h, 7BB12BAEh, 0CB61B38h, 92D28E9Bh,	0E5D5BE0Dh
		dd 7CDCEFB7h, 0BDBDF21h, 86D3D2D4h, 0F1D4E242h,	68DDB3F8h
		dd 1FDA836Eh, 81BE16CDh, 0F6B9265Bh, 6FB077E1h,	18B74777h
		dd 88085AE6h, 0FF0F6A70h, 66063BCAh, 11010B5Ch,	8F659EFFh
		dd 0F862AE69h, 616BFFD3h, 166CCF45h, 0A00AE278h, 0D70DD2EEh
		dd 4E048354h, 3903B3C2h, 0A7672661h, 0D06016F7h, 4969474Dh
		dd 3E6E77DBh, 0AED16A4Ah, 0D9D65ADCh, 40DF0B66h, 37D83BF0h
		dd 0A9BCAE53h, 0DEBB9EC5h, 47B2CF7Fh, 30B5FFE9h, 0BDBDF21Ch
		dd 0CABAC28Ah, 53B39330h, 24B4A3A6h, 0BAD03605h, 0CDD70693h
		dd 54DE5729h, 23D967BFh, 0B3667A2Eh, 0C4614AB8h, 5D681B02h
		dd 2A6F2B94h, 0B40BBE37h, 0C30C8EA1h, 5A05DF1Bh, 2D02EF8Dh
; char aCcrc32FileFile[]
aCcrc32FileFile	db 'CCRC32::File() : FileObject.Read() == FALSE',0Ah,0
					; DATA XREF: Ordinal925:loc_6B1943A8o
		align 10h
; char aCcrc32FileFi_0[]
aCcrc32FileFi_0	db 'CCRC32::File() : file.Open() == FALSE',0Ah,0 ; DATA XREF: Ordinal926+30o
		align 4
off_6B1B2B68	dd offset sub_6B195EE9	; DATA XREF: Ordinal927+7o
					; Ordinal928+3o
		dd offset Ordinal955
		dd offset Ordinal956
		align 8
; char aCdatastoreWr_1[]
aCdatastoreWr_1	db 'CDataStore::WriteHeader() : dwOffset + dwSize > m_dwHeaderSize',0Ah,0
					; DATA XREF: Ordinal939:loc_6B194526o
; char aCdatastoreWr_0[]
aCdatastoreWr_0	db 'CDataStore::WriteHeader() : m_File.Flush() == FALSE',0Ah,0
					; DATA XREF: Ordinal939+6Bo
		align 10h
; char aCdatastoreWrit[]
aCdatastoreWrit	db 'CDataStore::WriteHeader() : m_File.Write() == FALSE',0Ah,0
					; DATA XREF: Ordinal939+4Do
					; Ordinal959+5Ao
		align 4
; char aCdatastoreRe_0[]
aCdatastoreRe_0	db 'CDataStore::ReadHeader() : dwOffset + dwSize > m_dwHeaderSize',0Ah,0
					; DATA XREF: Ordinal940:loc_6B194598o
					; Ordinal941:loc_6B194615o
		align 4
aCdatastoreRead	db 'CDataStore::ReadHeader() : m_File.Read() == FALSE',0Ah,0
					; DATA XREF: Ordinal940+4Ao
					; Ordinal960+7Fo
		align 4
aCdatastoreRe_1	db 'CDataStore::ReadHeader() : Memory.NewAlloc() == NULL',0Ah,0
					; DATA XREF: Ordinal941+3Co
		align 4
; char aCdatastoreAp_0[]
aCdatastoreAp_0	db 'CDataStore::AppendDataStore() : m_File.Flush() == FALSE',0Ah,0
					; DATA XREF: Ordinal943+A5o
		align 10h
; char aCappendstoreAp[]
aCappendstoreAp	db 'CAppendStore::AppendDataStore() : pDataStore->ValidateFile() == F'
					; DATA XREF: Ordinal943+75o
		db 'ALSE',0Ah,0
		align 4
; char aCdatastoreAppe[]
aCdatastoreAppe	db 'CDataStore::AppendDataStore() : pDataStore == NULL',0Ah,0
					; DATA XREF: Ordinal943+24o
; char aCdatastoreRe_7[]
aCdatastoreRe_7	db 'CDataStore::ReadIndex() : uFileSize < sizeof(HeaderInfo)',0Ah,0
					; DATA XREF: Ordinal957:loc_6B194A3Ao
		align 4
aCdatastoreRe_6	db 'CDataStore::ReadIndex() : Index.m_dwSignature != m_dwIndexSignatu'
					; DATA XREF: Ordinal957:loc_6B194A33o
		db 're',0Ah,0
		align 10h
aCdatastoreRe_5	db 'CDataStore::ReadIndex() : Index.m_uIndex != uIndex',0Ah,0
					; DATA XREF: Ordinal957:loc_6B194A2Co
		align 8
aCdatastoreRe_4	db 'CDataStore::ReadIndex() : Index.m_dwHeaderCheck != dwHeaderCheck',0Ah
					; DATA XREF: Ordinal957+E3o
		db 0
		align 4
aCdatastoreRe_3	db 'CDataStore::ReadIndex() : m_File.Read() == FALSE',0Ah,0
					; DATA XREF: Ordinal957+B8o
		align 10h
aCdatastoreRe_2	db 'CDataStore::ReadIndex() : m_File.GetLength() == FALSE',0Ah,0
					; DATA XREF: Ordinal957+40o
		align 4
; char aCdatastoreWr_2[]
aCdatastoreWr_2	db 'CDataStore::WriteIndex() : m_File.Write() == FALSE',0Ah,0
					; DATA XREF: Ordinal958+5Do
		align 10h
; char aCdatastoreR_12[]
aCdatastoreR_12	db 'CDataStore::ReadHeader() : Header.m_dwSignature != m_dwHeaderSign'
					; DATA XREF: Ordinal960:loc_6B194C26o
		db 'ature',0Ah,0
aCdatastoreR_11	db 'CDataStore::ReadHeader() : Header.m_uFileSize != uFileSize',0Ah,0
					; DATA XREF: Ordinal960:loc_6B194C1Ao
		align 8
aCdatastoreR_10	db 'CDataStore::ReadHeader() : Header.m_dwHeaderCheck != dwHeaderChec'
					; DATA XREF: Ordinal960+A6o
		db 'k',0Ah,0
aCdatastoreRe_9	db 'CDataStore::ReadHeader() : uFileSize < sizeof(HeaderInfo)',0Ah,0
					; DATA XREF: Ordinal960:loc_6B194B95o
		align 4
aCdatastoreRe_8	db 'CDataStore::ReadHeader() : m_File.GetLength() == FALSE',0Ah,0
					; DATA XREF: Ordinal960+40o
; char aCdatastoreR_14[]
aCdatastoreR_14	db 'CDataStore::ReadFirstIndex() : ReadIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal963+63o
		align 4
aCdatastoreR_13	db 'CDataStore::ReadFirstIndex() : m_File.GetLength() == FALSE',0Ah,0
					; DATA XREF: Ordinal963+39o
; char aCdatastoreR_16[]
aCdatastoreR_16	db 'CDataStore::ReadNextIndex() : ReadIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal964+86o
aCdatastoreR_15	db 'CDataStore::ReadNextIndex() : m_File.GetLength() == FALSE',0Ah,0
					; DATA XREF: Ordinal964+48o
		align 4
; char aCdatastoreR_17[]
aCdatastoreR_17	db 'CDataStore::ReadPreviousIndex() : ReadIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal965+44o
; char aCdatastoreFi_0[]
aCdatastoreFi_0	db 'CDataStore::FindAddIndex() : ReadNextIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal968:loc_6B194ECAo
		align 4
; char aCdatastoreFind[]
aCdatastoreFind	db 'CDataStore::FindAddIndex() : ReadFirstIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal968+88o
aCdatastoreOp_5	db 'CDataStore::Open() : ValidateFile() == FALSE',0Ah,0
					; DATA XREF: Ordinal930+23Co
		align 4
aCdatastoreOp_4	db 'CDataStore::Open() : ReadHeader() == FALSE',0Ah,0
					; DATA XREF: Ordinal930:loc_6B1950EDo
; char aCdatastoreOp_3[]
aCdatastoreOp_3	db 'CDataStore::Open() : m_File.Write() == FALSE',0Ah,0
					; DATA XREF: Ordinal930:loc_6B1950D0o
		align 4
; char aCdatastoreOp_2[]
aCdatastoreOp_2	db 'CDataStore::Open() : WriteHeader() == FALSE',0Ah,0
					; DATA XREF: Ordinal930:loc_6B1950B9o
		align 4
aCdatastoreOp_1	db 'CDataStore::Open() : m_File.GetLength() == FALSE',0Ah,0
					; DATA XREF: Ordinal930+F7o
		align 4
aCdatastoreOp_0	db 'CDataStore::Open() : switch(Default)',0Ah,0 ; DATA XREF: Ordinal930+9Eo
		align 4
; char aCdatastoreOpen[]
aCdatastoreOpen	db 'CDataStore::Open() : m_File.Open() == FALSE',0Ah,0
					; DATA XREF: Ordinal930+74o
		align 4
; char aCdatastoreCl_2[]
aCdatastoreCl_2	db 'CDataStore::Close() : m_File.Close() == FALSE',0Ah,0
					; DATA XREF: Ordinal931+B6o
		align 4
; char aCdatastoreCl_1[]
aCdatastoreCl_1	db 'CDataStore::Close() : WriteHeader() == FALSE',0Ah,0
					; DATA XREF: Ordinal931+97o
		align 4
aCdatastoreCl_0	db 'CDataStore::Close() : CCRC32::File() == FALSE',0Ah,0
					; DATA XREF: Ordinal931+7Eo
		align 4
aCdatastoreClos	db 'CDataStore::Close() : ReadHeader() == FALSE',0Ah,0
					; DATA XREF: Ordinal931+46o
		align 4
; char aCdatastoreClea[]
aCdatastoreClea	db 'CDataStore::Clear() : m_File.SetLength() == FALSE',0Ah,0
					; DATA XREF: Ordinal932+38o
		align 4
; char aCdatastoreR_23[]
aCdatastoreR_23	db 'CDataStore::Read() : uIndex = 0',0Ah,0
					; DATA XREF: Ordinal935:loc_6B195345o
					; Ordinal936+24o
		align 4
aCdatastoreR_22	db 'CDataStore::Read() : dwCRC32 != index.m_dwDataCheck',0Ah,0
					; DATA XREF: Ordinal935+C8o
		align 4
aCdatastoreR_21	db 'CDataStore::Read() : m_File.Read() == FALSE',0Ah,0
					; DATA XREF: Ordinal935+A3o
		align 4
aCdatastoreR_20	db 'CDataStore::Read() : dwSize > index.m_dwDataSize',0Ah,0
					; DATA XREF: Ordinal935+79o
		align 4
aCdatastoreR_19	db 'CDataStore::Read() : index.m_dwDataSize == 0',0Ah,0
					; DATA XREF: Ordinal935+6Ao
					; Ordinal936+61o
		align 4
aCdatastoreR_18	db 'CDataStore::Read() : ReadIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal935+5Do
					; Ordinal936+54o
		align 4
aCdatastoreR_24	db 'CDataStore::Read() : Memory.NewAlloc() == NULL',0Ah,0
					; DATA XREF: Ordinal936+77o
aCdatastoreGe_0	db 'CDataStore::GetIndexSize() : ReadIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal937+58o
		align 4
; char aCdatastoreGeti[]
aCdatastoreGeti	db 'CDataStore::GetIndexSize() : uIndex = 0',0Ah,0
					; DATA XREF: Ordinal937+2Co
		align 4
; char aCdatastoreGe_1[]
aCdatastoreGe_1	db 'CDataStore::GetStatistics() : ReadNextIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal953:loc_6B195546o
aCdatastoreGets	db 'CDataStore::GetStatistics() : ReadFirstIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal953+4Ao
		align 4
; char aCdatastoreVa_6[]
aCdatastoreVa_6	db 'CDataStore::ValidateFile() : ValidateData() == FALSE',0Ah,0
					; DATA XREF: Ordinal955:loc_6B195707o
					; Ordinal955:loc_6B195716o
		align 10h
aCdatastoreVa_5	db 'CDataStore::ValidateFile() : Read() == FALSE',0Ah,0
					; DATA XREF: Ordinal955:loc_6B195700o
		align 10h
; char aCdatastoreVa_4[]
aCdatastoreVa_4	db 'CDataStore::ValidateFile() : data.NewAlloc() == FALSE',0Ah,0
					; DATA XREF: Ordinal955:loc_6B1956EDo
		align 4
; char aCdatastoreVa_3[]
aCdatastoreVa_3	db 'CDataStore::ValidateFile() : ReadFirstIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal955+C2o
; char aCdatastoreVa_2[]
aCdatastoreVa_2	db 'CDataStore::ValidateFile() : header.m_dwDataCheck == 0',0Ah,0
					; DATA XREF: Ordinal955:loc_6B1955F7o
aCdatastoreVa_1	db 'CDataStore::ValidateFile() : dwCRC32 != header.m_dwDataCheck',0Ah,0
					; DATA XREF: Ordinal955+8Eo
		align 4
; char aCdatastoreVa_0[]
aCdatastoreVa_0	db 'CDataStore::ValidateFile() : CCRC32::File() == FALSE',0Ah,0
					; DATA XREF: Ordinal955+74o
		align 10h
; char aCdatastoreVali[]
aCdatastoreVali	db 'CDataStore::ValidateFile() : ReadHeader() == FALSE',0Ah,0
					; DATA XREF: Ordinal955+2Ao
; char aCdatastoreMe_3[]
aCdatastoreMe_3	db 'CDataStore::MergeEx() : ReadNextIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal962:loc_6B195A48o
		align 4
aCdatastoreMe_2	db 'CDataStore::MergeEx() : m_File.SetLength() == FALSE',0Ah,0
					; DATA XREF: Ordinal962+2F2o
		align 10h
aCdatastoreMe_1	db 'CDataStore::MergeEx() : WriteIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal962:loc_6B195A01o
		align 10h
aCdatastoreMe_0	db 'CDataStore::MergeEx() : ReadPreviousIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal962:loc_6B1959EBo
		align 4
; char aCdatastoreMerg[]
aCdatastoreMerg	db 'CDataStore::MergeEx() : uBlockSize > DWORD(-1)',0Ah,0
					; DATA XREF: Ordinal962:loc_6B1957D9o
					; Ordinal962:loc_6B195874o ...
; char aCdatastoreAp_4[]
aCdatastoreAp_4	db 'CDataStore::AppendData() : WriteIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal966+12Co
		align 4
; char aCdatastoreAp_3[]
aCdatastoreAp_3	db 'CDataStore::AppendData() : m_File.Flush() == FALSE',0Ah,0
					; DATA XREF: Ordinal966+103o
aCdatastoreAp_2	db 'CDataStore::AppendData() : m_File.GetLength() == FALSE',0Ah,0
					; DATA XREF: Ordinal966+59o
; char aCdatastoreAp_1[]
aCdatastoreAp_1	db 'CDataStore::AppendData() : FindAddIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal966+27o
; char aCdatastoreAddD[]
aCdatastoreAddD	db 'CDataStore::Add() : dwSize == 0',0Ah,0
					; DATA XREF: Ordinal933:loc_6B195DB5o
		align 10h
aCdatastoreAddW	db 'CDataStore::Add() : WriteIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal933:loc_6B195DAEo
		align 4
; char aCdatastoreAddM[]
aCdatastoreAddM	db 'CDataStore::Add() : m_File.Flush() == FALSE',0Ah,0
					; DATA XREF: Ordinal933+195o
		align 4
; char aCdatastoreAddR[]
aCdatastoreAddR	db 'CDataStore::Add() : ReadNextIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal933+ADo
		align 4
aCdatastoreAddA	db 'CDataStore::Add() : AppendData() == FALSE',0Ah,0
					; DATA XREF: Ordinal933+7Bo
		align 4
aCdatastoreAddF	db 'CDataStore::Add() : FindAddIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal933+51o
		align 4
; char aCdatastoreAp_5[]
aCdatastoreAp_5	db 'CDataStore::AppendDataStore() : appendStore.Open() == FALSE',0Ah,0
					; DATA XREF: Ordinal942+54o
		align 4
; char aCdatastoreVa_7[]
aCdatastoreVa_7	db 'CDataStore::ValidateData() : m_AppendInfo.m_pDataStore->AppendDat'
					; DATA XREF: Ordinal956+32o
		db 'a() == FALSE',0Ah,0
		align 4
; char aCdatastoreMe_4[]
aCdatastoreMe_4	db 'CDataStore::Merge() : MergeEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal961+29o
		align 4
; char aCdatastoreDe_4[]
aCdatastoreDe_4	db 'CDataStore::Delete() : m_File.Flush() == FALSE',0Ah,0
					; DATA XREF: Ordinal938+B8o
aCdatastoreDe_3	db 'CDataStore::Delete() : Merge() == FALSE',0Ah,0
					; DATA XREF: Ordinal938+97o
		align 10h
aCdatastoreDe_2	db 'CDataStore::Delete() : WriteIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal938+81o
		align 10h
aCdatastoreDe_1	db 'CDataStore::Delete() : Info.m_dwDataSize == 0',0Ah,0
					; DATA XREF: Ordinal938+61o
		align 10h
aCdatastoreDe_0	db 'CDataStore::Delete() : ReadIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal938+55o
		align 10h
; char aCdatastoreDele[]
aCdatastoreDele	db 'CDataStore::Delete() : uIndex = 0',0Ah,0 ; DATA XREF: Ordinal938+26o
		align 4
; char aCdatastoreUp_5[]
aCdatastoreUp_5	db 'CDataStore::Update() : dwSize = 0',0Ah,0
					; DATA XREF: Ordinal934:loc_6B196147o
		align 4
aCdatastoreUp_4	db 'CDataStore::Update() : WriteIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal934+162o
		align 4
; char aCdatastoreUp_3[]
aCdatastoreUp_3	db 'CDataStore::Update() : m_File.Flush() == FALSE',0Ah,0
					; DATA XREF: Ordinal934+144o
aCdatastoreUp_2	db 'CDataStore::Update() : Merge() == FALSE',0Ah,0
					; DATA XREF: Ordinal934+11Eo
		align 4
aCdatastoreUp_1	db 'CDataStore::Update() : Add() == FALSE',0Ah,0
					; DATA XREF: Ordinal934:loc_6B19608Eo
		align 4
aCdatastoreUp_0	db 'CDataStore::Update() : Info.m_dwDataSize == 0',0Ah,0
					; DATA XREF: Ordinal934+6Do
		align 4
aCdatastoreUpda	db 'CDataStore::Update() : ReadIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal934+5Eo
		align 4
; char aDDDD[]
aDDDD		db '%d,%d,%d,%d',0      ; DATA XREF: Ordinal969+BFo
; char ValueName[]
ValueName	dd 0			; DATA XREF: Ordinal969+98o
					; Ordinal1036+12o ...
; char aClsidBdc678904[]
aClsidBdc678904	db 'CLSID\{bdc67890-4fc0-11d0-a805-00aa006d2ea4}\InstalledVersion',0
					; DATA XREF: Ordinal969+63o
		align 4
off_6B1B3E4C	dd offset unknown_libname_5 ; DATA XREF: Ordinal969+21o
					; Ordinal970o ...
					; Microsoft VisualC 2-10/net runtime
stru_6B1B3E50	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6B1962ED, \
					; DATA XREF: sub_6B1962B3+2o
				   offset loc_6B1962F1>	; SEH scope table for function 6B1962B3
off_6B1B3E5C	dd offset sub_6B1966F3	; DATA XREF: Ordinal972+8o
					; Ordinal973+7o
; char Args[]
Args		db 'MiniDumpWriteDump',0 ; DATA XREF: Ordinal977:loc_6B196335o
					; Ordinal974+20o ...
		align 4
; char aCdebughelpDu_1[]
aCdebughelpDu_1	db 'CDebugHelp::Dump() : MiniDumpWriteDump() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal980+A9o
		align 10h
; char aCdebughelpDu_0[]
aCdebughelpDu_0	db 'CDebugHelp::Dump() : dumpFile.Open() == FALSE',0Ah,0
					; DATA XREF: Ordinal980+49o
		align 10h
; char aCdebughelpDump[]
aCdebughelpDump	db 'CDebugHelp::Dump() : MiniDumpWriteDump == NULL',0Ah,0
					; DATA XREF: Ordinal980+11o
; char aCdebughelpSnap[]
aCdebughelpSnap	db 'CDebugHelp::Snap() : DumpWithContext() == FALSE',0Ah,0
					; DATA XREF: Ordinal981+15o
		align 4
; char aDbghelp_dll[]
aDbghelp_dll	db 'DBGHELP.DLL',0      ; DATA XREF: Ordinal978+Co
		dd offset aInformation	; "Information"
		dd offset aWarning	; "Warning"
		dd offset aError	; "Error"
aError		db 'Error',0            ; DATA XREF: Ordinal986+104o
					; Ordinal1545:loc_6B1A10EAo ...
		align 4
aWarning	db 'Warning',0          ; DATA XREF: Ordinal986:loc_6B196A1Bo
					; Ordinal1545:loc_6B1A10F3o ...
aInformation	db 'Information',0      ; DATA XREF: Ordinal986:loc_6B196A22o
					; Ordinal1545:loc_6B1A10FCo ...
stru_6B1B3F78	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6B1967DA, \
					; DATA XREF: Ordinal1022+2o
				   offset loc_6B1967DE>	; SEH scope table for function 6B1967A3
		align 8
stru_6B1B3F88	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6B19681A, \
					; DATA XREF: Ordinal1023+2o
				   offset loc_6B19681E>	; SEH scope table for function 6B1967F1
off_6B1B3F94	dd offset sub_6B1968F4	; DATA XREF: Ordinal984+7o
					; Ordinal982+9o ...
		dd offset Ordinal993
		dd offset Ordinal994
; char a0x04x[]
a0x04x		db '0x%04X : ',0        ; DATA XREF: Ordinal986+C8o
					; Ordinal986+E5o
		align 4
; char aS_0[]
aS_0		db '%s : ',0            ; DATA XREF: Ordinal986+A0o
					; Ordinal986:loc_6B1969C4o
		align 4
; char a04d02d02d02d_0[]
a04d02d02d02d_0	db '%04d-%02d-%02d-%02d-%02d-%02d-%03d : ',0 ; DATA XREF: Ordinal986+84o
		align 4
; char a_log[]
a_log		db '.log',0             ; DATA XREF: Ordinal1025:loc_6B196C18o
		align 4
; char a0x04x_0[]
a0x04x_0	db '-%0x%04X',0         ; DATA XREF: Ordinal1025+72o
		align 10h
; char aS_2[]
aS_2		db '\%s',0              ; DATA XREF: Ordinal1025+55o
off_6B1B3FF4	dd offset sub_6B196FDA	; DATA XREF: Ordinal1028+Co
					; Ordinal1029o
		dd offset Ordinal1033
		dd offset Ordinal1033
		dd offset Ordinal1032
		dd offset Ordinal1033
off_6B1B4008	dd offset sub_6B197087	; DATA XREF: Ordinal1035+6o
					; Ordinal1034+6o
		dd offset Ordinal1042
		dd offset Ordinal1042
aCencryptedst_1	db 'CEncryptedString::Decrypt()',0 ; DATA XREF: Ordinal1037:loc_6B197139o
; char aCencryptedst_0[]
aCencryptedst_0	db 'CEncryptedString::Decrypt() : Decrypt() == FALSE',0Ah,0
					; DATA XREF: Ordinal1037+86o
		align 4
aCencryptedstri	db 'CEncryptedString::Decrypt() : m_DecData.NewAlloc() == NULL',0Ah,0
					; DATA XREF: Ordinal1037+61o
off_6B1B40A0	dd offset sub_6B1972E5	; DATA XREF: Ordinal1047+8o
					; Ordinal1044+Ao ...
; char aCerrorinfoBuil[]
aCerrorinfoBuil	db 'CErrorInfo::BuildDescription() : FormatMessage() == 0, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1053+3Co
		align 4
		dd offset Src		; "SYSTEM\\CurrentControlSet\\Services\\Event"...
		dd offset aEventmessagefi ; "EventMessageFile"
		dd offset aTypessupported ; "TypesSupported"
; char aTypessupported[]
aTypessupported	db 'TypesSupported',0   ; DATA XREF: Ordinal1056+1A5o
					; .rdata:6B1B40ECo
		align 10h
; char aEventmessagefi[]
aEventmessagefi	db 'EventMessageFile',0 ; DATA XREF: Ordinal1056+191o
					; .rdata:6B1B40E8o
		align 4
; char Src[]
Src		db 'SYSTEM\CurrentControlSet\Services\EventLog\Application\',0
					; DATA XREF: Ordinal1057+28o
					; Ordinal1056+9Ao ...
off_6B1B414C	dd offset sub_6B19779D	; DATA XREF: Ordinal1054+Eo
					; Ordinal1055+3o
; char aCeventlogUnreg[]
aCeventlogUnreg	db 'CEventLog::Unregister() : reg.DeleteKey() == FALSE',0Ah,0
					; DATA XREF: Ordinal1057:loc_6B1973ECo
; char aCeventlogLogRe[]
aCeventlogLogRe	db 'CEventLog::Log() : ReportEvent() == 0, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1082+155o
		align 4
; char aCeventlogLogGe[]
aCeventlogLogGe	db 'CEventLog::Log() : GetUserName() == FALSE',0Ah,0
					; DATA XREF: Ordinal1082:loc_6B1975E1o
		align 10h
aCeventlogLogLo	db 'CEventLog::Log() : LookupAccountName() == FALSE',0Ah,0
					; DATA XREF: Ordinal1082+10Eo
		align 4
; char aCeventlogLogM_[]
aCeventlogLogM_	db 'CEventLog::Log() : m_hSource == NULL',0Ah,0 ; DATA XREF: Ordinal1082+2Eo
		align 4
; char aCeventlogOpenS[]
aCeventlogOpenS	db 'CEventLog::Open() : szName == NULL',0Ah,0
					; DATA XREF: Ordinal1058:loc_6B1976D2o
; char aCeventlogOpenR[]
aCeventlogOpenR	db 'CEventLog::Open() : RegisterEventSource() == NULL, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1058+4Co
		align 4
; char aCeventlogTrace[]
aCeventlogTrace	db 'CEventLog::TraceV() : CStringConvert::FormatV() == false',0Ah,0
					; DATA XREF: Ordinal1063+26o
		align 4
; char aCeventlogReg_1[]
aCeventlogReg_1	db 'CEventLog::Register() : reg.Open() == FALSE',0Ah,0
					; DATA XREF: Ordinal1056:loc_6B197B76o
		align 4
aCeventlogReg_0	db 'CEventLog::Register()',0 ; DATA XREF: Ordinal1056+8Do
		align 10h
; char aCeventlogRegis[]
aCeventlogRegis	db 'CEventLog::Register() : path.SplitPath() == false',0Ah,0
					; DATA XREF: Ordinal1056+65o
		align 4
off_6B1B4354	dd offset sub_6B197C73	; DATA XREF: Ordinal1083+Ao
					; Ordinal1084o
		dd offset Ordinal1087
off_6B1B435C	dd offset sub_6B197D52	; DATA XREF: Ordinal1090+6o
					; Ordinal1089+Eo
; char aSSSSLd[]
aSSSSLd		db '%s, %s, %s, %s (%ld)',0 ; DATA XREF: Ordinal1106+30o
		align 4
off_6B1B4378	dd offset sub_6B198448	; DATA XREF: Ordinal1107+Ao
					; Ordinal1109o	...
		align 10h
; char aCfileSeekSetfi[]
aCfileSeekSetfi	db 'CFile::Seek() : SetFilePointer() == INVALID_SET_FILE_POINTER, 0x%'
					; DATA XREF: Ordinal1114+38o
		db '08X',0Ah,0
		align 4
; char aCfileReadReadf[]
aCfileReadReadf	db 'CFile::Read() : ReadFile() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1117+37o
		align 4
; char aCfileWriteWrit[]
aCfileWriteWrit	db 'CFile::Write() : WriteFile() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1119+37o
		align 4
; char aCfileAttachHfi[]
aCfileAttachHfi	db 'CFile::Attach() : hFile == INVALID_HANDLE_VALUE',0Ah,0
					; DATA XREF: Ordinal1121+Do
		align 10h
; char aCfileGetlength[]
aCfileGetlength	db 'CFile::GetLength() : GetFileSize() == INVALID_FILE_SIZE, 0x%08X',0Ah
					; DATA XREF: Ordinal1128+36o
		db 0
		align 8
; char aCfileGetpositi[]
aCfileGetpositi	db 'CFile::GetPosition() : SetFilePointer() == INVALID_SET_FILE_POINT'
					; DATA XREF: Ordinal1132+40o
		db 'ER, 0x%08X',0Ah,0
		align 4
; char aCfileOperatorA[]
aCfileOperatorA	db 'CFile::operator =() : Attach() == FALSE',0Ah,0
					; DATA XREF: Ordinal1110+16o
		align 4
; char aCfileOpenSzfil[]
aCfileOpenSzfil	db 'CFile::Open() : szFileName == NULL',0Ah,0
					; DATA XREF: Ordinal1112:loc_6B19829Ao
; char aCfileOpenCreat[]
aCfileOpenCreat	db 'CFile::Open() : CreateFile() == INVALID_HANDLE_VALUE, %s, 0x%08X',0Ah
					; DATA XREF: Ordinal1112+49o
		db 0
		align 4
; char aCfileSetlength[]
aCfileSetlength	db 'CFile::SetLength() : SetEndOfFile() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1130+2Do
		align 4
; char aCfileDeleteD_1[]
aCfileDeleteD_1	db 'CFile::Delete() : ::DeleteFile() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1135+A7o
		align 4
; char aCfileDeleteD_0[]
aCfileDeleteD_0	db 'CFile::Delete() : deleteFile.SetLength(0) == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1135+6Do
; char aCfileDeleteDel[]
aCfileDeleteDel	db 'CFile::Delete() : deleteFile.Open() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1135+43o
		align 10h
; char aCfileMakesur_1[]
aCfileMakesur_1	db 'CFile::MakeSureDirectoryExists() : (dwAttributes & FILE_ATTRIBUTE'
					; DATA XREF: Ordinal1136+E5o
		db '_DIRECTORY) == 0',0Ah,0
		align 8
; char aCfileMakesur_0[]
aCfileMakesur_0	db 'CFile::MakeSureDirectoryExists() : CreateDirectory() == FALSE, 0x'
					; DATA XREF: Ordinal1136+C3o
		db '%08X',0Ah,0
		align 10h
aCfileMakesured	db 'CFile::MakeSureDirectoryExists()',0 ; DATA XREF: Ordinal1136+18o
		align 4
off_6B1B4734	dd offset sub_6B19879B	; DATA XREF: Ordinal1137+Fo
					; Ordinal1138+6o
		dd offset Ordinal1140
		dd offset Ordinal1141
		dd offset Ordinal1142
		dd offset Ordinal1143
; char aCfilearchive_0[]
aCfilearchive_0	db 'CFileArchive::SetPosEx() : uPos >= uFileLength',0Ah,0
					; DATA XREF: Ordinal1143:loc_6B19877Eo
aCfilearchiveSe	db 'CFileArchive::SetPosEx() : m_File.GetLength() == FALSE',0Ah,0
					; DATA XREF: Ordinal1143+20o
off_6B1B47B0	dd offset sub_6B19885B	; DATA XREF: Ordinal1144+6o
					; Ordinal1145o	...
		align 8
; char aCgitRevokeM__0[]
aCgitRevokeM__0	db 'CGIT::Revoke() : m_pGIT->RevokeInterfaceFromGlobal() != S_OK, 0x%'
					; DATA XREF: Ordinal1148+2Do
		db '08X',0Ah,0
		align 10h
; char aCgitRevokeM_pg[]
aCgitRevokeM_pg	db 'CGIT::Revoke() : m_pGIT == NULL',0Ah,0 ; DATA XREF: Ordinal1148+6o
		align 8
; char aCgitCreateCocr[]
aCgitCreateCocr	db 'CGIT::Create() : CoCreateInstance(IID_IGlobalInterfaceTable) != S'
					; DATA XREF: Ordinal1146+27o
		db '_OK, 0x%08X',0Ah,0
		align 4
off_6B1B4878	dd offset sub_6B198943	; DATA XREF: Ordinal1149+6o
					; Ordinal1152o	...
; char aChandleCopyDup[]
aChandleCopyDup	db 'CHandle::Copy() : DuplicateHandle() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1158+34o
		align 4
; char aChandleOperato[]
aChandleOperato	db 'CHandle::operator =() : Copy() == FALSE',0Ah,0
					; DATA XREF: Ordinal1153+16o
		align 10h
; char aChandleOpera_0[]
aChandleOpera_0	db 'CHandle::operator =() : Attach() == FALSE',0Ah,0
					; DATA XREF: Ordinal1154+10o
		align 4
; char aChiddenwindowE[]
aChiddenwindowE	db 'CHiddenWindow::ExitInstance()',0Ah,0 ; DATA XREF: Ordinal1167+1o
		align 4
; char aChiddenwindowR[]
aChiddenwindowR	db 'CHiddenWindow::Run()',0Ah,0 ; DATA XREF: Ordinal1168+8o
		align 4
; char aChiddenwindo_1[]
aChiddenwindo_1	db 'CHiddenWindow::WindowProc() : WM_DESTROY',0Ah,0
					; DATA XREF: Ordinal1169:loc_6B198B0Ao
		align 10h
; char aChiddenwindo_0[]
aChiddenwindo_0	db 'CHiddenWindow::WindowProc() : WM_QUERYENDSESSION',0Ah,0
					; DATA XREF: Ordinal1169:loc_6B198AF6o
		align 8
; char aChiddenwindowW[]
aChiddenwindowW	db 'CHiddenWindow::WindowProc() : WM_ENDSESSION, wParam = %ld, lParam'
					; DATA XREF: Ordinal1169+27o
		db ' = %ld',0Ah,0
		align 4
; char aChiddenwindo_4[]
aChiddenwindo_4	db 'CHiddenWindow::InitInstance() : SetWindowLongPtr() == 0',0Ah,0
					; DATA XREF: Ordinal1166+13Eo
		align 10h
aChiddenwindo_3	db 'CHiddenWindow::InitInstance() : CreateWindowEx() == NULL',0Ah,0
					; DATA XREF: Ordinal1166+116o
		align 4
aChiddenwindo_2	db 'CHiddenWindow::InitInstance() : RegisterClassEx() == 0',0Ah,0
					; DATA XREF: Ordinal1166+E9o
; char aCserviceappR_0[]
aCserviceappR_0	db 'CServiceApp::Run() : imm.Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal1166:loc_6B198BA9o
; char aCserviceappRun[]
aCserviceappRun	db 'CServiceApp::Run() : ImmDisableIME() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1166+40o
					; Ordinal1393+92o
		align 4
; char aChiddenwindowI[]
aChiddenwindowI	db 'CHiddenWindow::InitInstance()',0Ah,0 ; DATA XREF: Ordinal1166+9o
		align 4
off_6B1B4B28	dd offset sub_6B198DB1	; DATA XREF: Ordinal1162+14o
					; Ordinal1163+3o
		dd offset Ordinal1741
		dd offset Ordinal1165
		dd offset Ordinal1168
		dd offset Ordinal1166
		dd offset Ordinal1167
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset Ordinal1169
; char aChiddenwindo_6[]
aChiddenwindo_6	db 'CHiddenWindow::Create() : szClassName == NULL',0Ah,0
					; DATA XREF: Ordinal1164:loc_6B198D9Do
		align 10h
aChiddenwindo_5	db 'CHiddenWindow::Create() : CStringConvert::Copy() == false',0Ah,0
					; DATA XREF: Ordinal1164:loc_6B198D96o
		align 4
aChiddenwindowC	db 'CHiddenWindow::Create() : CThread::Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal1164+61o
		align 4
off_6B1B4BF4	dd offset sub_6B198E2D	; DATA XREF: Ordinal1172o
					; Ordinal1171+Co
; char aImmdisableime[]
aImmdisableime	db 'ImmDisableIME',0    ; DATA XREF: Ordinal1176:loc_6B198DFBo
					; Ordinal1173+20o ...
		align 4
; char aImm32_dll[]
aImm32_dll	db 'IMM32.DLL',0        ; DATA XREF: Ordinal1177+Co
		align 4
off_6B1B4C14	dd offset sub_6B19900D	; DATA XREF: Ordinal1180o
					; Ordinal1179+Co
; char aWow64enablewow[]
aWow64enablewow	db 'Wow64EnableWow64FsRedirection',0 ; DATA XREF: Ordinal1184:loc_6B198FD3o
					; Ordinal1181:loc_6B1990E1o ...
		align 4
; char aIswow64process[]
aIswow64process	db 'IsWow64Process',0   ; DATA XREF: Ordinal1184:loc_6B198FBDo
					; Ordinal1181:loc_6B1990CCo ...
		align 4
; char aVerifyversio_0[]
aVerifyversio_0	db 'VerifyVersionInfoW',0 ; DATA XREF: Ordinal1184:loc_6B198FA7o
					; Ordinal1181:loc_6B1990B7o ...
		align 4
; char aVerifyversioni[]
aVerifyversioni	db 'VerifyVersionInfoA',0 ; DATA XREF: Ordinal1184:loc_6B198F91o
					; Ordinal1181:loc_6B1990A2o ...
		align 10h
; char aVersetconditio[]
aVersetconditio	db 'VerSetConditionMask',0 ; DATA XREF: Ordinal1184:loc_6B198F7Bo
					; Ordinal1181:loc_6B19908Do ...
; char aAttachconsole[]
aAttachconsole	db 'AttachConsole',0    ; DATA XREF: Ordinal1184:loc_6B198F65o
					; Ordinal1181:loc_6B199078o ...
		align 4
; char aRegisterserv_1[]
aRegisterserv_1	db 'RegisterServiceProcess',0 ; DATA XREF: Ordinal1184:loc_6B198F4Fo
					; Ordinal1181:loc_6B199063o ...
		align 4
; char aSetprocesswork[]
aSetprocesswork	db 'SetProcessWorkingSetSize',0 ; DATA XREF: Ordinal1184:loc_6B198F39o
					; Ordinal1181+23o ...
		align 4
; char aCkernelCreateL[]
aCkernelCreateL	db 'CKernel::Create() : Load() == FALSE',0Ah,0
					; DATA XREF: Ordinal1185:loc_6B199254o
		align 10h
; char aKernel32_dll_0[]
aKernel32_dll_0	db 'KERNEL32.DLL',0     ; DATA XREF: Ordinal1185+9o
					; Ordinal1793+8o
		align 10h
off_6B1B4D00	dd offset sub_6B1995CB	; DATA XREF: Ordinal1187+4o
					; Ordinal1189o	...
; char aCmemoryNewal_0[]
aCmemoryNewal_0	db 'CMemory::NewAlloc() : new() == NULL',0Ah,0 ; DATA XREF: Ordinal1196+129o
		align 4
aCmemoryNewallo	db 'CMemory::NewAlloc()',0 ; DATA XREF: Ordinal1196+25o
; char aCmemoryHeapall[]
aCmemoryHeapall	db 'CMemory::HeapAlloc() : HeapAlloc() == NULL',0Ah,0
					; DATA XREF: Ordinal1197+30o
; char aCmemoryVirtual[]
aCmemoryVirtual	db 'CMemory::VirtualAlloc() : VirtualAlloc() == NULL',0Ah,0
					; DATA XREF: Ordinal1198+5Eo
		align 10h
; char aCmemoryReall_2[]
aCmemoryReall_2	db 'CMemory::ReAlloc() : mem.NewAlloc() == NULL',0Ah,0
					; DATA XREF: Ordinal1199+99o
		align 10h
; char aCmemoryReall_1[]
aCmemoryReall_1	db 'CMemory::ReAlloc() : mem.Alloc() == NULL',0Ah,0
					; DATA XREF: Ordinal1199+71o
		align 4
; char aCmemoryReall_0[]
aCmemoryReall_0	db 'CMemory::ReAlloc() : m_nSize == nSize',0Ah,0
					; DATA XREF: Ordinal1199+2Bo
		align 4
; char aCmemoryRealloc[]
aCmemoryRealloc	db 'CMemory::ReAlloc() : m_pData == NULL',0Ah,0 ; DATA XREF: Ordinal1199+11o
		align 4
; char aCmemoryCopyAll[]
aCmemoryCopyAll	db 'CMemory::Copy() : Alloc() == NULL',0Ah,0 ; DATA XREF: Ordinal1201+23o
					; Ordinal1202+28o
		align 10h
; char aCmemoryCopyPda[]
aCmemoryCopyPda	db 'CMemory::Copy() : pData == NULL',0Ah,0
					; DATA XREF: Ordinal1202:loc_6B1997A5o
		align 4
; char aCmemoryOperato[]
aCmemoryOperato	db 'CMemory::operator =() : Copy() == FALSE',0Ah,0
					; DATA XREF: Ordinal1190+1Do
		align 10h
off_6B1B4EC0	dd offset sub_6B199981	; DATA XREF: Ordinal1210+13o
					; Ordinal1211+6o
		dd offset Ordinal1215
		dd offset Ordinal1216
		dd offset Ordinal1802
		dd offset Ordinal1218
		align 8
; char aCmemoryarchive[]
aCmemoryarchive	db 'CMemoryArchive::ReadEx() : m_Memory.GetSize() - m_nPosition < dwS'
					; DATA XREF: Ordinal1215+1Ao
		db 'ize',0Ah,0
		align 10h
; char aCmemoryarchi_1[]
aCmemoryarchi_1	db 'CMemoryArchive::WriteEx() : m_Memory.ReAlloc() == NULL',0Ah,0
					; DATA XREF: Ordinal1216+43o
aCmemoryarchi_0	db 'CMemoryArchive::WriteEx() : m_Memory.NewAlloc() == NULL',0Ah,0
					; DATA XREF: Ordinal1216+2Co
		align 4
; char aCmemoryarchi_2[]
aCmemoryarchi_2	db 'CMemoryArchive::SetPosEx() : uPos >= m_Memory.GetSize()',0Ah,0
					; DATA XREF: Ordinal1218:loc_6B199967o
		align 10h
off_6B1B4FD0	dd offset sub_6B199A8D	; DATA XREF: Ordinal1219+6o
					; Ordinal1221o	...
; char aCmoduleAttachH[]
aCmoduleAttachH	db 'CModule::Attach() : hModule == NULL',0Ah,0 ; DATA XREF: Ordinal1224+Co
		align 4
; char aCmoduleLoadLoa[]
aCmoduleLoadLoa	db 'CModule::Load() : LoadLibrary() == NULL, %s, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1226+25o
		align 4
; char aCmoduleLoadL_0[]
aCmoduleLoadL_0	db 'CModule::Load() : LoadLibraryEx() == NULL, %s, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1227+2Bo
		align 4
; char aCmoduleCmodule[]
aCmoduleCmodule	db 'CModule::CModule() : Attach() == false',0Ah,0
					; DATA XREF: Ordinal1220+1Ao
; char aCmoduleOperato[]
aCmoduleOperato	db 'CModule::operator =() : Attach() == false',0Ah,0
					; DATA XREF: Ordinal1222+10o
		align 10h
; char aCmoduleGetpr_0[]
aCmoduleGetpr_0	db 'CModule::GetProc() : GetProcAddress() == NULL, %s, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1229+4Co
		align 4
; char aCmoduleGetproc[]
aCmoduleGetproc	db 'CModule::GetProc() : CStringConvert::Copy() == false',0Ah,0
					; DATA XREF: Ordinal1229+21o
		align 4
; char aCmulticonsoleA[]
aCmulticonsoleA	db 'CMultiConsole::Add() : pos == m_ConsoleWindowMap.end()',0Ah,0
					; DATA XREF: Ordinal1234+3Do
		align 10h
off_6B1B5170	dd offset sub_6B19A4E7	; DATA XREF: Ordinal1232+3o
					; Ordinal1231+Eo
		dd offset Ordinal1741
		dd offset Ordinal1742
		dd offset Ordinal836
		dd offset Ordinal834
		dd offset Ordinal835
		dd offset Ordinal1236
		dd offset Ordinal827
		dd offset Ordinal827
		dd offset Ordinal827
		dd offset Ordinal827
		dd offset Ordinal829
		dd offset Ordinal830
		dd offset Ordinal830
		dd offset Ordinal830
		dd offset Ordinal830
aCmulticonsol_1	db 'CMultiConsole::Add()',0 ; DATA XREF: Ordinal1233:loc_6B19A566o
		align 4
; char aCmulticonsol_0[]
aCmulticonsol_0	db 'CMultiConsole::Add() : pos != m_ConsoleWindowMap.end()',0Ah,0
					; DATA XREF: Ordinal1233+54o
off_6B1B5200	dd offset sub_6B19A730	; DATA XREF: Ordinal1237+4o
					; Ordinal1238o
		dd offset Ordinal1241
off_6B1B5208	dd offset sub_6B19A834	; DATA XREF: Ordinal1245+14o
					; Ordinal1246o	...
		align 10h
; char aCnulldaclCreat[]
aCnulldaclCreat	db 'CNullDacl::Create() : InitializeSecurityDescriptor() == FALSE, 0x'
					; DATA XREF: Ordinal1249+5Eo
		db '%08X',0Ah,0
		align 4
off_6B1B5258	dd offset sub_6B19A8B6	; DATA XREF: Ordinal1252o
					; Ordinal1251+Co
; char aCofreeunusedli[]
aCofreeunusedli	db 'CoFreeUnusedLibrariesEx',0 ; DATA XREF: Ordinal1256:loc_6B19A884o
					; Ordinal1253+20o ...
; char aColeCreateLoad[]
aColeCreateLoad	db 'COLE::Create() : Load() == FALSE',0Ah,0 ; DATA XREF: Ordinal1257+2Eo
		align 4
; char aOle32_dll_0[]
aOle32_dll_0	db 'OLE32.DLL',0        ; DATA XREF: Ordinal1257+Co
		align 4
off_6B1B52A4	dd offset sub_6B19AA42	; DATA XREF: Ordinal1259+Ao
					; Ordinal1260o
; char aCosinfoInitial[]
aCosinfoInitial	db 'COSInfo::InitializeOSInfo() : GetVersionEx() == FALSE, 0x%08X',0
					; DATA XREF: Ordinal1282+3Bo
		align 4
; char aCosinfoIssys_2[]
aCosinfoIssys_2	db 'COSInfo::IsSystem() : GlobalAlloc() == NULL',0Ah,0
					; DATA XREF: Ordinal1280+11Do
		align 4
; char aCosinfoIssys_1[]
aCosinfoIssys_1	db 'COSInfo::IsSystem() : GetTokenInformation() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1280+F9o
					; Ordinal1280+149o
		align 4
; char aCosinfoIssys_0[]
aCosinfoIssys_0	db 'COSInfo::IsSystem() : OpenProcessToken() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1280+BEo
		align 8
; char aCosinfoIssyste[]
aCosinfoIssyste	db 'COSInfo::IsSystem() : AllocateAndInitializeSid() == FALSE, 0x%08X'
					; DATA XREF: Ordinal1280+65o
		db 0Ah,0
		align 4
; char aCosinfoIsadm_2[]
aCosinfoIsadm_2	db 'COSInfo::IsAdministrator() : mem.NewAlloc() == NULL',0Ah,0
					; DATA XREF: Ordinal1279+14Fo
		align 8
; char aCosinfoIsadm_1[]
aCosinfoIsadm_1	db 'COSInfo::IsAdministrator() : GetTokenInformation() == FALSE, 0x%0'
					; DATA XREF: Ordinal1279+12Co
					; Ordinal1279+17Fo
		db '8X',0Ah,0
		align 10h
; char aCosinfoIsadm_0[]
aCosinfoIsadm_0	db 'COSInfo::IsAdministrator() : OpenProcessToken() == FALSE, 0x%08X',0Ah
					; DATA XREF: Ordinal1279+F6o
		db 0
		align 8
; char aCosinfoIsadmin[]
aCosinfoIsadmin	db 'COSInfo::IsAdministrator() : AllocateAndInitializeSid() == FALSE,'
					; DATA XREF: Ordinal1279+6Co
		db ' 0x%08X',0Ah,0
		align 4
; unsigned __int8 aTerminalServer
aTerminalServer	db 'Terminal Server',0  ; DATA XREF: Ordinal1283:loc_6B19B116o
		align 8
; char aCosinfoIniti_3[]
aCosinfoIniti_3	db 'COSInfo::InitializeTerminalServerInfo() : reg.QueryValue() == FAL'
					; DATA XREF: Ordinal1283:loc_6B19B101o
					; Ordinal1283:loc_6B19B13Do
		db 'SE',0Ah,0
		align 10h
aCosinfoIniti_2	db 'COSInfo::InitializeTerminalServerInfo() : mem.NewAlloc() == NULL',0Ah
					; DATA XREF: Ordinal1283+147o
		db 0
		align 4
; char aProductsuite[]
aProductsuite	db 'ProductSuite',0     ; DATA XREF: Ordinal1283+111o
		align 4
aCosinfoIniti_1	db 'COSInfo::InitializeTerminalServerInfo() : reg.Open() == FALSE',0Ah,0
					; DATA XREF: Ordinal1283+FDo
		align 4
; char aSystemCurren_0[]
aSystemCurren_0	db 'System\CurrentControlSet\Control\ProductOptions',0
					; DATA XREF: Ordinal1283+E7o
		align 8
; char aCosinfoIniti_0[]
aCosinfoIniti_0	db 'COSInfo::InitializeTerminalServerInfo() : kernel.Create() == FALS'
					; DATA XREF: Ordinal1283:loc_6B19B047o
		db 'E',0Ah,0
; unsigned __int8 aB
aB		db 'b',0                ; DATA XREF: Ordinal1264+47o
		align 10h
; unsigned __int8 aC_0
aC_0		db 'c',0                ; DATA XREF: Ordinal1265+47o
		align 4
; unsigned __int8 aC_1
aC_1		db 'C',0                ; DATA XREF: Ordinal1265+34o
		align 4
; char aCosinfoIsact_0[]
aCosinfoIsact_0	db 'COSInfo::IsActiveSession() : m_WTSAPI.WTSQuerySessionInformation('
					; DATA XREF: Ordinal1277+ABo
		db ') == FALSE, 0x%08X',0
; char aCosinfoIsactiv[]
aCosinfoIsactiv	db 'COSInfo::IsActiveSession() : m_WTSAPI.Load() == FALSE',0Ah,0
					; DATA XREF: Ordinal1277+3Co
		align 4
off_6B1B56F4	dd offset unknown_libname_6 ; DATA XREF: Ordinal1284+2o
					; Ordinal1285o	...
					; Microsoft VisualC 2-10/net runtime
; char aUnknownError0x[]
aUnknownError0x	db 'Unknown error 0x%0lX',0 ; DATA XREF: sub_6B19B5B3+84o
		align 10h
aIdispatchError	db 'IDispatch error #%d',0 ; DATA XREF: sub_6B19B5B3+7Co
; char a_com_error[]
a_com_error	db '_com_error',0       ; DATA XREF: Ordinal1286+58o
					; sub_6B19B7B4+Ao ...
		align 10h
aCpropertyhelpe	db 'CPropertyHelper::GetString()',0 ; DATA XREF: Ordinal1286+29o
		align 10h
; char aCpropertyhel_1[]
aCpropertyhel_1	db 'CPropertyHelper::GetVariant() : VariantCopyInd() != S_OK',0Ah,0
					; DATA XREF: Ordinal1300+50o
		align 4
aCpropertyhel_0	db 'CPropertyHelper::GetVariant()',0 ; DATA XREF: Ordinal1300+2Ao
		align 4
; char aCpropertyhel_3[]
aCpropertyhel_3	db 'CPropertyHelper::PutVariant() : VariantCopyInd() != S_OK',0Ah,0
					; DATA XREF: Ordinal1301+4Eo
		align 4
aCpropertyhel_2	db 'CPropertyHelper::PutVariant()',0 ; DATA XREF: Ordinal1301+13o
		align 4
aCpropertyhel_4	db 'CPropertyHelper::PutString()',0 ; DATA XREF: Ordinal1287+13o
		align 4
; char aQueryworkingse[]
aQueryworkingse	db 'QueryWorkingSet',0  ; DATA XREF: Ordinal1307:loc_6B19BC68o
					; Ordinal1304:loc_6B19BEAAo ...
; char aInitializeproc[]
aInitializeproc	db 'InitializeProcessForWsWatch',0 ; DATA XREF: Ordinal1307:loc_6B19BC52o
					; Ordinal1304:loc_6B19BE95o ...
; char aGetwschanges[]
aGetwschanges	db 'GetWsChanges',0     ; DATA XREF: Ordinal1307:loc_6B19BC3Co
					; Ordinal1304:loc_6B19BE80o ...
		align 4
; char aGetprocessmemo[]
aGetprocessmemo	db 'GetProcessMemoryInfo',0 ; DATA XREF: Ordinal1307:loc_6B19BC26o
					; Ordinal1304:loc_6B19BE6Bo ...
		align 4
; char aGetprocessim_0[]
aGetprocessim_0	db 'GetProcessImageFileNameW',0 ; DATA XREF: Ordinal1307:loc_6B19BC10o
					; Ordinal1304:loc_6B19BE56o ...
		align 4
; char aGetprocessimag[]
aGetprocessimag	db 'GetProcessImageFileNameA',0 ; DATA XREF: Ordinal1307:loc_6B19BBFAo
					; Ordinal1304:loc_6B19BE41o ...
		align 4
; char aGetperformance[]
aGetperformance	db 'GetPerformanceInfo',0 ; DATA XREF: Ordinal1307:loc_6B19BBE4o
					; Ordinal1304:loc_6B19BE2Co ...
		align 4
; char aGetmoduleinfor[]
aGetmoduleinfor	db 'GetModuleInformation',0 ; DATA XREF: Ordinal1307:loc_6B19BBCEo
					; Ordinal1304:loc_6B19BE17o ...
		align 10h
; char aGetmodulefil_0[]
aGetmodulefil_0	db 'GetModuleFileNameExW',0 ; DATA XREF: Ordinal1307:loc_6B19BBB8o
					; Ordinal1304:loc_6B19BE02o ...
		align 4
; char aGetmodulefilen[]
aGetmodulefilen	db 'GetModuleFileNameExA',0 ; DATA XREF: Ordinal1307:loc_6B19BBA2o
					; Ordinal1304:loc_6B19BDEDo ...
		align 10h
; char aGetmodulebas_0[]
aGetmodulebas_0	db 'GetModuleBaseNameW',0 ; DATA XREF: Ordinal1307:loc_6B19BB8Co
					; Ordinal1304:loc_6B19BDD8o ...
		align 4
; char aGetmodulebasen[]
aGetmodulebasen	db 'GetModuleBaseNameA',0 ; DATA XREF: Ordinal1307:loc_6B19BB76o
					; Ordinal1304:loc_6B19BDC3o ...
		align 4
; char aGetmappedfil_0[]
aGetmappedfil_0	db 'GetMappedFileNameW',0 ; DATA XREF: Ordinal1307:loc_6B19BB60o
					; Ordinal1304:loc_6B19BDAEo ...
		align 4
; char aGetmappedfilen[]
aGetmappedfilen	db 'GetMappedFileNameA',0 ; DATA XREF: Ordinal1307:loc_6B19BB4Ao
					; Ordinal1304:loc_6B19BD99o ...
		align 10h
; char aGetdevicedri_2[]
aGetdevicedri_2	db 'GetDeviceDriverFileNameW',0 ; DATA XREF: Ordinal1307:loc_6B19BB34o
					; Ordinal1304:loc_6B19BD84o ...
		align 4
; char aGetdevicedri_1[]
aGetdevicedri_1	db 'GetDeviceDriverFileNameA',0 ; DATA XREF: Ordinal1307:loc_6B19BB1Eo
					; Ordinal1304:loc_6B19BD6Fo ...
		align 4
; char aGetdevicedri_0[]
aGetdevicedri_0	db 'GetDeviceDriverBaseNameW',0 ; DATA XREF: Ordinal1307:loc_6B19BB08o
					; Ordinal1304:loc_6B19BD5Ao ...
		align 4
; char aGetdevicedrive[]
aGetdevicedrive	db 'GetDeviceDriverBaseNameA',0 ; DATA XREF: Ordinal1307:loc_6B19BAF2o
					; Ordinal1304:loc_6B19BD45o ...
		align 10h
; char aEnumprocessmod[]
aEnumprocessmod	db 'EnumProcessModules',0 ; DATA XREF: Ordinal1307:loc_6B19BADCo
					; Ordinal1304:loc_6B19BD30o ...
		align 4
; char aEnumprocesses[]
aEnumprocesses	db 'EnumProcesses',0    ; DATA XREF: Ordinal1307:loc_6B19BAC6o
					; Ordinal1304:loc_6B19BD1Bo ...
		align 4
; char aEnumpagefilesw[]
aEnumpagefilesw	db 'EnumPageFilesW',0   ; DATA XREF: Ordinal1307:loc_6B19BAB0o
					; Ordinal1304:loc_6B19BD06o ...
		align 4
; char aEnumpagefilesa[]
aEnumpagefilesa	db 'EnumPageFilesA',0   ; DATA XREF: Ordinal1307:loc_6B19BA9Ao
					; Ordinal1304:loc_6B19BCF1o ...
		align 4
; char aEnumdevicedriv[]
aEnumdevicedriv	db 'EnumDeviceDrivers',0 ; DATA XREF: Ordinal1307:loc_6B19BA84o
					; Ordinal1304:loc_6B19BCDCo ...
		align 4
; char aEmptyworkingse[]
aEmptyworkingse	db 'EmptyWorkingSet',0  ; DATA XREF: Ordinal1307:loc_6B19BA6Eo
					; Ordinal1304+23o ...
off_6B1B5A38	dd offset sub_6B19C1D7	; DATA XREF: Ordinal1302+Co
					; Ordinal1303+3o
; char aCpsapiCreateLo[]
aCpsapiCreateLo	db 'CPSAPI::Create() : Load() == FALSE',0Ah,0
					; DATA XREF: Ordinal1308:loc_6B19C1BDo
; char aPsapi_dll[]
aPsapi_dll	db 'PSAPI.DLL',0        ; DATA XREF: Ordinal1308+8o
		align 4
off_6B1B5A6C	dd offset sub_6B19C289	; DATA XREF: Ordinal1310+Ao
					; Ordinal1311o
		dd offset Ordinal1314
off_6B1B5A74	dd offset sub_6B19C74A	; DATA XREF: Ordinal1316+Ao
					; Ordinal1318o	...
; char aCregistryGetbi[]
aCregistryGetbi	db 'CRegistry::GetBinary() : Memory.NewAlloc() == FALSE',0Ah,0
					; DATA XREF: Ordinal1351+46o
		align 10h
; char aCregistryOpe_1[]
aCregistryOpe_1	db 'CRegistry::Open() : RegCreateKeyEx() != ERROR_SUCCESS, %s, 0x%08X'
					; DATA XREF: Ordinal1321+6Fo
		db 0Ah,0
		align 8
; char aCregistryOpenR[]
aCregistryOpenR	db 'CRegistry::Open() : RegOpenKeyEx() != ERROR_SUCCESS, %s, 0x%08X',0Ah
					; DATA XREF: Ordinal1321+38o
					; Ordinal1321+48o
		db 0
		align 4
; char aCregistryOpera[]
aCregistryOpera	db 'CRegistry::operator =() : Attach() == FALSE',0Ah,0
					; DATA XREF: Ordinal1319+16o
		align 4
aCregistryGetst	db 'CRegistry::GetString()',0 ; DATA XREF: Ordinal1332:loc_6B19C82Bo
		align 4
off_6B1B5B84	dd offset sub_6B19CA03	; DATA XREF: Ordinal1353+Ao
					; Ordinal1354o
		dd offset Ordinal1357
		dd 7530h, 1
; char aCserviceInst_3[]
aCserviceInst_3	db 'CService::Install() : ChangeServiceConfig2() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1362+FCo
		align 4
aCserviceInst_2	db 'CService::Install() : CreateService() == NULL, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1362+CDo
		align 4
; char aCserviceInst_1[]
aCserviceInst_1	db 'CService::Install() : path.SplitPath() == false',0Ah,0
					; DATA XREF: Ordinal1362+77o
		align 10h
; char aCserviceInst_0[]
aCserviceInst_0	db 'CService::Install() : OpenSCManager() == NULL, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1362+43o
		align 4
; char DatabaseName[]
DatabaseName	db 'ServicesActive',0   ; DATA XREF: Ordinal1362+26o
					; Ordinal1363+22o
		align 4
; char aCserviceInstal[]
aCserviceInstal	db 'CService::Install() : COSInfo::IsWinNT() == false',0Ah,0
					; DATA XREF: Ordinal1362+Fo
		align 4
; char aCserviceRemo_2[]
aCserviceRemo_2	db 'CService::Remove() : DeleteService() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1363+99o
		align 4
; char aCserviceRemo_1[]
aCserviceRemo_1	db 'CService::Remove() : OpenService() == NULL, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1363+6Co
; char aCserviceRemo_0[]
aCserviceRemo_0	db 'CService::Remove() : OpenSCManager() == NULL, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1363+3Do
		align 10h
; char aCserviceRemove[]
aCserviceRemove	db 'CService::Remove() : COSInfo::IsWinNT() == false',0Ah,0
					; DATA XREF: Ordinal1363+9o
		align 8
aCserviceServ_0	db 'CService::ServiceMain() : m_pService->m_hStatus == NULL, 0x%08X',0Ah
					; DATA XREF: .text:6B19CEC2o
		db 0
		align 10h
aCserviceServic	db 'CService::ServiceMain() : m_pService->m_hServiceMainThread.Copy()'
					; DATA XREF: .text:6B19CE65o
		db ' == FALSE',0Ah,0
		align 10h
off_6B1B5E30	dd offset sub_6B19D070	; DATA XREF: Ordinal1360+3o
					; Ordinal1359+9o
		dd offset _purecall
		dd offset Ordinal1365
		dd offset Ordinal1366
		dd offset Ordinal1367
		dd offset Ordinal1368
		dd offset Ordinal1369
		dd offset Ordinal1370
		dd offset Ordinal1374
		dd offset Ordinal1374
		dd offset Ordinal1374
		dd offset Ordinal1374
		dd offset Ordinal1374
		dd offset Ordinal1376
		dd offset Ordinal1376
		dd offset Ordinal1376
		dd offset Ordinal1376
; char aCserviceRegi_2[]
aCserviceRegi_2	db 'CService::Register() : WaitForSingleObject() != WAIT_OBJECT_0',0Ah,0
					; DATA XREF: Ordinal1361+AFo
		align 8
; char aCserviceRegi_1[]
aCserviceRegi_1	db 'CService::Register() : StartServiceCtrlDispatcher() == FALSE, 0x%'
					; DATA XREF: Ordinal1361+82o
		db '08X',0Ah,0
		align 10h
; char aCserviceRegi_0[]
aCserviceRegi_0	db 'CService::Register() : CStringConvert::Copy() == false',0Ah,0
					; DATA XREF: Ordinal1361+32o
; char aCserviceRegist[]
aCserviceRegist	db 'CService::Register() : COSInfo::IsWinNT() == false',0Ah,0
					; DATA XREF: Ordinal1361+Co
		dd offset aSoftwareMicr_1 ; "SOFTWARE\\Microsoft\\Windows\\CurrentVersi"...
off_6B1B5F70	dd offset aDebug	; DATA XREF: Ordinal1393+591o
					; "Debug"
		dd offset dword_6B1AA56C
off_6B1B5F78	dd offset aInstall	; DATA XREF: Ordinal1393+4ECo
					; "Install"
		dd offset aI		; "I"
off_6B1B5F80	dd offset aRemove	; DATA XREF: Ordinal1393+516o
					; "Remove"
		dd offset aR		; "R"
off_6B1B5F88	dd offset aVersion	; DATA XREF: Ordinal1393+2DEo
					; "Version"
		dd offset aV		; "V"
off_6B1B5F90	dd offset aHelp		; DATA XREF: Ordinal1393+307o
					; "Help"
		dd offset asc_6B1B602C	; "H"
		dd offset a?		; "?"
off_6B1B5F9C	dd offset aTerminate	; DATA XREF: Ordinal1393+331o
					; "Terminate"
		dd offset aT		; "T"
off_6B1B5FA4	dd offset aEmbedding	; DATA XREF: Ordinal1393+5B8o
					; "Embedding"
off_6B1B5FA8	dd offset aRegserver	; DATA XREF: Ordinal1393+540o
					; "RegServer"
off_6B1B5FAC	dd offset aUnregserver	; DATA XREF: Ordinal1393+56Ao
					; "UnregServer"
		dd offset a_terminate_loc ; "_Terminate_Lock"
		dd offset a_single_instan ; "_Single_Instance_Lock"
		dd offset a_window_class ; "_Window_Class"
; char a_window_class[]
a_window_class	db '_Window_Class',0    ; DATA XREF: Ordinal1387+6Ao
					; .rdata:6B1B5FB8o
		align 4
; char a_single_instan[]
a_single_instan	db '_Single_Instance_Lock',0 ; DATA XREF: Ordinal1393+374o
					; .rdata:6B1B5FB4o
		align 4
; char a_terminate_loc[]
a_terminate_loc	db '_Terminate_Lock',0  ; DATA XREF: Ordinal1393+195o
					; .rdata:6B1B5FB0o
aUnregserver	db 'UnregServer',0      ; DATA XREF: .rdata:off_6B1B5FACo
aRegserver	db 'RegServer',0        ; DATA XREF: .rdata:off_6B1B5FA8o
		align 4
aEmbedding	db 'Embedding',0        ; DATA XREF: .rdata:off_6B1B5FA4o
		align 4
aT		db 'T',0                ; DATA XREF: .rdata:6B1B5FA0o
		align 4
aTerminate	db 'Terminate',0        ; DATA XREF: .rdata:off_6B1B5F9Co
		align 4
a?		db '?',0                ; DATA XREF: .rdata:6B1B5F98o
		align 4
asc_6B1B602C	db 'H',0                ; DATA XREF: .rdata:6B1B5F94o
		align 10h
aHelp		db 'Help',0             ; DATA XREF: .rdata:off_6B1B5F90o
		align 4
aV		db 'V',0                ; DATA XREF: .rdata:6B1B5F8Co
		align 4
aR		db 'R',0                ; DATA XREF: .rdata:6B1B5F84o
		align 10h
aRemove		db 'Remove',0           ; DATA XREF: .rdata:off_6B1B5F80o
		align 4
aI		db 'I',0                ; DATA XREF: .rdata:6B1B5F7Co
		align 4
aInstall	db 'Install',0          ; DATA XREF: .rdata:off_6B1B5F78o
aDebug		db 'Debug',0            ; DATA XREF: Ordinal1545:loc_6B1A10CFo
					; .rdata:off_6B1B5F70o
		align 4
; char aSoftwareMicr_1[]
aSoftwareMicr_1	db 'SOFTWARE\Microsoft\Windows\CurrentVersion\RunServices\',0
					; DATA XREF: Ordinal1422+A0o
					; Ordinal1423+71o ...
		align 8
off_6B1B6098	dd offset sub_6B19D23E	; DATA XREF: Ordinal1381+Fo
					; Ordinal1382o
		dd offset Ordinal1741
		dd offset Ordinal1742
		dd offset Ordinal836
		dd offset Ordinal834
		dd offset Ordinal835
		dd offset Ordinal1236
		dd offset Ordinal827
		dd offset Ordinal827
		dd offset Ordinal827
		dd offset Ordinal827
		dd offset Ordinal1384
		dd offset Ordinal830
		dd offset Ordinal830
		dd offset Ordinal830
		dd offset Ordinal830
; char aCserviceconsol[]
aCserviceconsol	db 'CServiceConsole::Create() : pServiceApp == NULL',0Ah,0
					; DATA XREF: Ordinal1383+8o
		align 4
off_6B1B610C	dd offset sub_6B19D25A	; DATA XREF: Ordinal1385+Co
					; Ordinal1386o
		dd offset Ordinal1741
		dd offset Ordinal1165
		dd offset Ordinal1168
		dd offset Ordinal1166
		dd offset Ordinal1167
		dd offset Ordinal1388
		dd offset Ordinal1664
		dd offset Ordinal1390
		dd offset Ordinal1169
; char aCservicewind_2[]
aCservicewind_2	db 'CServiceWindow::OnEndSession() : _endthreadex()',0Ah,0
					; DATA XREF: Ordinal1390+4Ao
		align 4
; char aCservicewind_1[]
aCservicewind_1	db 'CServiceWindow::OnEndSession() : ExitInstance()',0Ah,0
					; DATA XREF: Ordinal1390+38o
		align 4
; char aCservicewind_0[]
aCservicewind_0	db 'CServiceWindow::OnEndSession() : WaitForTerminate()',0Ah,0
					; DATA XREF: Ordinal1390+24o
		align 8
; char aCservicewindow[]
aCservicewindow	db 'CServiceWindow::OnEndSession() : m_pServiceApp->PostTerminate()',0Ah
					; DATA XREF: Ordinal1390+11o
		db 0
		align 4
; char aCserviceappO_1[]
aCserviceappO_1	db 'CServiceApp::OnRunDebug() : m_DefaultWindow.Attach() == FALSE',0Ah,0
					; DATA XREF: Ordinal1420:loc_6B19D3AEo
		align 4
; char aCserviceappO_0[]
aCserviceappO_0	db 'CServiceApp::OnRunDebug() : Start()',0Ah,0 ; DATA XREF: Ordinal1420+6Eo
		align 4
; char aCserviceappOnr[]
aCserviceappOnr	db 'CServiceApp::OnRunDebug() : m_Console.Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal1420+16o
		align 10h
; char aCserviceappO_3[]
aCserviceappO_3	db 'CServiceApp::OnInstallService() : reg.SetString() == FALSE',0Ah,0
					; DATA XREF: Ordinal1422:loc_6B19D4A6o
; char aCserviceappO_2[]
aCserviceappO_2	db 'CServiceApp::OnInstallService() : path.SplitPath() == false',0Ah,0
					; DATA XREF: Ordinal1422+84o
		align 4
; char aCserviceappOni[]
aCserviceappOni	db 'CServiceApp::OnInstallService() : Install() == FALSE',0Ah,0
					; DATA XREF: Ordinal1422+4Bo
		align 4
aRpcss		db 'RPCSS',0            ; DATA XREF: Ordinal1422+35o
		align 10h
; char aCserviceappR_1[]
aCserviceappR_1	db 'CServiceApp::RegisterEventLog() : m_EventLog.Unregister() == FALS'
					; DATA XREF: Ordinal1426+4Co
		db 'E',0Ah,0
		align 8
aCserviceappReg	db 'CServiceApp::RegisterEventLog() : m_EventLog.Register() == FALSE',0Ah
					; DATA XREF: Ordinal1426+36o
		db 0
		align 4
; char aCserviceappO_6[]
aCserviceappO_6	db 'CServiceApp::OnRemoveService() : reg.DeleteValue() == FALSE',0Ah,0
					; DATA XREF: Ordinal1423:loc_6B19D5C0o
		align 4
; char aCserviceappO_5[]
aCserviceappO_5	db 'CServiceApp::OnRemoveService() : RegisterEventLog() == FALSE',0Ah,0
					; DATA XREF: Ordinal1423+52o
		align 4
; char aCserviceappO_4[]
aCserviceappO_4	db 'CServiceApp::OnRemoveService() : Remove() == FALSE',0Ah,0
					; DATA XREF: Ordinal1423+26o
off_6B1B64C0	dd offset sub_6B19D717	; DATA XREF: Ordinal1392+9o
					; Ordinal1391+23o
		dd offset _purecall
		dd offset Ordinal1424
		dd offset Ordinal1366
		dd offset Ordinal1367
		dd offset Ordinal1368
		dd offset Ordinal1369
		dd offset Ordinal1370
		dd offset Ordinal1374
		dd offset Ordinal1374
		dd offset Ordinal1374
		dd offset Ordinal1374
		dd offset Ordinal1374
		dd offset Ordinal1376
		dd offset Ordinal1376
		dd offset Ordinal1376
		dd offset Ordinal1376
		dd offset Ordinal1402
		dd offset Ordinal1403
		dd offset Ordinal1404
		dd offset Ordinal1416
		dd offset Ordinal1414
		dd offset Ordinal829
		dd offset Ordinal829
		dd offset Ordinal1416
		dd offset Ordinal1416
		dd offset Ordinal1416
		dd offset Ordinal1422
		dd offset Ordinal1423
		dd offset Ordinal1420
		dd offset Ordinal1419
aCservicewind_4	db 'CServiceWindow::Create()',0 ; DATA XREF: Ordinal1387+48o
		align 4
; char aCservicewind_3[]
aCservicewind_3	db 'CServiceWindow::Create() : pServiceApp == NULL',0Ah,0
					; DATA XREF: Ordinal1387+27o
; char aCserviceapp_26[]
aCserviceapp_26	db 'CServiceApp::Run() : CStringConvert::Copy() == false',0Ah,0
					; DATA XREF: Ordinal1393:loc_6B19DEC2o
		align 10h
; char aCserviceapp_25[]
aCserviceapp_25	db 'CServiceApp::Run() : OnRunService()',0Ah,0
					; DATA XREF: Ordinal1393:loc_6B19DE7Ao
		align 4
; char aCserviceapp_24[]
aCserviceapp_24	db 'CServiceApp::Run() : OnRunEmbedded()',0Ah,0
					; DATA XREF: Ordinal1393+5C9o
		align 10h
; char aCserviceapp_23[]
aCserviceapp_23	db 'CServiceApp::Run() : OnRunDebug()',0Ah,0 ; DATA XREF: Ordinal1393+5A2o
		align 4
; char aCserviceapp_22[]
aCserviceapp_22	db 'CServiceApp::Run() : OnUnregServer()',0Ah,0
					; DATA XREF: Ordinal1393+57Bo
		align 4
; char aCserviceapp_21[]
aCserviceapp_21	db 'CServiceApp::Run() : OnRegServer()',0Ah,0 ; DATA XREF: Ordinal1393+551o
; char aCserviceapp_20[]
aCserviceapp_20	db 'CServiceApp::Run() : OnRemoveService()',0Ah,0
					; DATA XREF: Ordinal1393+527o
; char aCserviceapp_19[]
aCserviceapp_19	db 'CServiceApp::Run() : OnInstallService()',0Ah,0
					; DATA XREF: Ordinal1393+4FDo
		align 4
aCserviceapp_18	db 'CServiceApp::Run() : ProcessCommandLine() == FALSE',0Ah,0
					; DATA XREF: Ordinal1393+4E0o
aCserviceapp_17	db 'CServiceApp::Run() : RegisterEventLog() == FALSE',0Ah,0
					; DATA XREF: Ordinal1393:loc_6B19DD64o
		align 4
; char aCserviceapp_16[]
aCserviceapp_16	db 'CServiceApp::Run() : OnSingleInstance()',0Ah,0
					; DATA XREF: Ordinal1393+485o
		align 4
aCserviceapp_15	db 'CServiceApp::Run() : m_InstanceMutex.Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal1393+46Co
; char aCserviceapp_14[]
aCserviceapp_14	db 'CServiceApp::Run() : OnTerminate()',0Ah,0 ; DATA XREF: Ordinal1393+342o
; char aCserviceapp_13[]
aCserviceapp_13	db 'CServiceApp::Run() : OnShowHelp()',0Ah,0 ; DATA XREF: Ordinal1393+318o
		align 4
; char aCserviceapp_12[]
aCserviceapp_12	db 'CServiceApp::Run() : OnShowVersion()',0Ah,0
					; DATA XREF: Ordinal1393+2EFo
		align 10h
; char aCserviceapp_11[]
aCserviceapp_11	db 'CServiceApp::Run() : commandLine.Parse() == FALSE',0Ah,0
					; DATA XREF: Ordinal1393+2CCo
		align 4
aCserviceapp_10	db 'CServiceApp::Run() : IsTerminating() != FALSE',0Ah,0
					; DATA XREF: Ordinal1393+2ADo
		align 4
; char aCserviceappR_9[]
aCserviceappR_9	db 'CServiceApp::Run() : m_TerminateEvent.Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal1393+292o
		align 10h
aCserviceappR_8	db 'CServiceApp::Run()',0 ; DATA XREF: Ordinal1393+17Bo
		align 4
; char aCserviceappR_7[]
aCserviceappR_7	db 'CServiceApp::Run() : adminDacl.Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal1393+163o
		align 4
; char aCserviceappR_6[]
aCserviceappR_6	db 'CServiceApp::Run() : nullDacl.Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal1393+135o
		align 10h
; char aCserviceappR_5[]
aCserviceappR_5	db 'CServiceApp::Run() : CCoInitialize::CoInitialize() != S_OK, 0x%08'
					; DATA XREF: Ordinal1393+100o
		db 'X',0Ah,0
; char aCserviceappR_4[]
aCserviceappR_4	db 'CServiceApp::Run() : m_OLE.Create() == false',0Ah,0
					; DATA XREF: Ordinal1393+6Eo
		align 4
; char aCserviceappR_3[]
aCserviceappR_3	db 'CServiceApp::Run() : m_Kernel.Create() == false',0Ah,0
					; DATA XREF: Ordinal1393+54o
		align 4
; char aCserviceappR_2[]
aCserviceappR_2	db 'CServiceApp::Run() : m_IMM.Create() == false',0Ah,0
					; DATA XREF: Ordinal1393+3Ao
		align 4
; char aCserviceapp_31[]
aCserviceapp_31	db 'CServiceApp::RunHiddenWindow() : serviceWindow.Terminate()',0Ah,0
					; DATA XREF: Ordinal1425+8Co
		align 8
; char aCserviceapp_30[]
aCserviceapp_30	db 'CServiceApp::RunHiddenWindow() : serviceWindow.Create() == FALSE',0Ah
					; DATA XREF: Ordinal1425+78o
		db 0
		align 4
; char aCserviceapp_29[]
aCserviceapp_29	db 'CServiceApp::RunHiddenWindow() : serviceWindow.Create()',0Ah,0
					; DATA XREF: Ordinal1425:loc_6B19DF68o
		align 4
aCserviceapp_28	db 'CServiceApp::RunHiddenWindow() : m_Kernel.Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal1425:loc_6B19DF61o
		align 4
aCserviceapp_27	db 'CServiceApp::RunHiddenWindow() : m_Kernel.RegisterServiceProcess('
					; DATA XREF: Ordinal1425+52o
		db ') == 0',0Ah,0
		align 4
; char aCserviceappO_9[]
aCserviceappO_9	db 'CServiceApp::OnRunService() : RunHiddenWindow()',0Ah,0
					; DATA XREF: Ordinal1419:loc_6B19E027o
		align 4
; char aCserviceappO_8[]
aCserviceappO_8	db 'CServiceApp::OnRunService() : Register() == FALSE',0Ah,0
					; DATA XREF: Ordinal1419+42o
		align 4
; char aCserviceappO_7[]
aCserviceappO_7	db 'CServiceApp::OnRunService() : Register()',0Ah,0
					; DATA XREF: Ordinal1419+21o
		align 4
; char aCaddressGetadd[]
aCaddressGetadd	db 'CAddress::GetAddress() : CStringConvert::Copy() == false',0Ah,0
					; DATA XREF: Ordinal1433+30o
		align 4
off_6B1B6C24	dd offset sub_6B19EBC8	; DATA XREF: Ordinal1437+Eo
					; Ordinal1439+2o ...
		dd offset Ordinal1484
		dd offset Ordinal1430
		dd offset Ordinal1430
; char aCsocketStartup[]
aCsocketStartup	db 'CSocket::Startup() : WSAStartup() != 0, %d',0Ah,0
					; DATA XREF: Ordinal1443+28o
; char aCsocketStart_0[]
aCsocketStart_0	db 'CSocket::Startup() : WSACleanup() != 0, %d',0Ah,0
					; DATA XREF: Ordinal1444+11o
; char aCsocketBindBin[]
aCsocketBindBin	db 'CSocket::Bind() : bind() == SOCKET_ERROR, %d',0Ah,0
					; DATA XREF: Ordinal1449+1Eo
		align 4
; char aCsocketConnect[]
aCsocketConnect	db 'CSocket::Connect() : WSAConnect() == SOCKET_ERROR, %d',0Ah,0
					; DATA XREF: Ordinal1451+29o
		align 4
; char aCsocketListenL[]
aCsocketListenL	db 'CSocket::Listen() : listen() == SOCKET_ERROR, %d',0Ah,0
					; DATA XREF: Ordinal1453+3Do
		align 4
; char aCsocketListenB[]
aCsocketListenB	db 'CSocket::Listen() : Bind() == FALSE',0Ah,0 ; DATA XREF: Ordinal1453+10o
		align 10h
; char aCsocketAcceptW[]
aCsocketAcceptW	db 'CSocket::Accept() : WSAAccept() == INVALID_SOCKET, %d',0Ah,0
					; DATA XREF: Ordinal1455+54o
		align 4
; char aCsocketReadPda[]
aCsocketReadPda	db 'CSocket::Read() : pData == NULL',0Ah,0
					; DATA XREF: Ordinal1456:loc_6B19E31Fo
		align 4
; char aCsocketReadWsa[]
aCsocketReadWsa	db 'CSocket::Read() : WSARecv() == SOCKET_ERROR, %d',0Ah,0
					; DATA XREF: Ordinal1456+53o
		align 10h
; char aCsocketWritePd[]
aCsocketWritePd	db 'CSocket::Write() : pData == NULL',0Ah,0
					; DATA XREF: Ordinal1457:loc_6B19E453o
		align 4
; char aCsocketWrite_0[]
aCsocketWrite_0	db 'CSocket::Write() : WSAGetOverlappedResult() == FALSE, %d',0Ah,0
					; DATA XREF: Ordinal1457+CFo
		align 10h
; char aCsocketWriteWs[]
aCsocketWriteWs	db 'CSocket::Write() : WSASend() == SOCKET_ERROR, %d',0Ah,0
					; DATA XREF: Ordinal1457+A5o
					; Ordinal1457+111o
		align 4
; char aCsocketWriteHe[]
aCsocketWriteHe	db 'CSocket::Write() : hEvent.Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal1457+60o
		align 4
; char aCsocketShutdow[]
aCsocketShutdow	db 'CSocket::Shutdown() : shutdown() == SOCKET_ERROR, %d',0Ah,0
					; DATA XREF: Ordinal1458+37o
		align 4
; char aCsocketCloseCl[]
aCsocketCloseCl	db 'CSocket::Close() : closesocket() == SOCKET_ERROR, %d',0Ah,0
					; DATA XREF: Ordinal1459+75o
		align 4
; char aCsocketCloseSe[]
aCsocketCloseSe	db 'CSocket::Close() : setsockopt() == SOCKET_ERROR, %d',0Ah,0
					; DATA XREF: Ordinal1459+53o
		align 4
; char aCsocketIsliste[]
aCsocketIsliste	db 'CSocket::IsListening() : getsockopt() == SOCKET_ERROR, %d',0Ah,0
					; DATA XREF: Ordinal1462+37o
		align 4
; char aCeventsocketGe[]
aCeventsocketGe	db 'CEventSocket::GetReadPending() : ioctlsocket() == SOCKET_ERROR, %'
					; DATA XREF: Ordinal1463+2Fo
		db 'd',0Ah,0
		align 10h
; char aCeventsocketSe[]
aCeventsocketSe	db 'CEventSocket::SetBlocking() : ioctlsocket() == SOCKET_ERROR, %d',0Ah
					; DATA XREF: Ordinal1464+2Fo
		db 0
		align 8
; char aCsocketSetwrit[]
aCsocketSetwrit	db 'CSocket::SetWriteBufferSize() : setsockopt() == SOCKET_ERROR, %d',0Ah
					; DATA XREF: Ordinal1466+29o
		db 0
		align 10h
; char aCsocketSetread[]
aCsocketSetread	db 'CSocket::SetReadBufferSize() : setsockopt() == SOCKET_ERROR, %d',0Ah
					; DATA XREF: Ordinal1467+29o
		db 0
		align 8
; char aCsocketGetwrit[]
aCsocketGetwrit	db 'CSocket::GetWriteBufferSize() : getsockopt() == SOCKET_ERROR, %d',0Ah
					; DATA XREF: Ordinal1469+37o
		db 0
		align 10h
; char aCsocketGetread[]
aCsocketGetread	db 'CSocket::GetReadBufferSize() : getsockopt() == SOCKET_ERROR, %d',0Ah
					; DATA XREF: Ordinal1470+37o
		db 0
		align 4
; char aCsocketSetre_0[]
aCsocketSetre_0	db 'CSocket::SetReadTimeout() : setsockopt() == SOCKET_ERROR, %d',0Ah,0
					; DATA XREF: Ordinal1472+29o
		align 4
; char aCsocketSetwr_0[]
aCsocketSetwr_0	db 'CSocket::SetWriteTimeout() : setsockopt() == SOCKET_ERROR, %d',0Ah,0
					; DATA XREF: Ordinal1473+29o
		align 4
; char aCsocketGetre_0[]
aCsocketGetre_0	db 'CSocket::GetReadTimeout() : getsockopt() == SOCKET_ERROR, %d',0Ah,0
					; DATA XREF: Ordinal1475+37o
		align 4
; char aCsocketGetwr_0[]
aCsocketGetwr_0	db 'CSocket::GetWriteTimeout() : getsockopt() == SOCKET_ERROR, %d',0Ah,0
					; DATA XREF: Ordinal1476+37o
		align 8
; char aCsocketGetconn[]
aCsocketGetconn	db 'CSocket::GetConnectedTime() : getsockopt() == SOCKET_ERROR, %d',0Ah,0
					; DATA XREF: Ordinal1477+39o
; char aCsocketGetloca[]
aCsocketGetloca	db 'CSocket::GetLocalAddress() : getsockname() != 0, %d',0Ah,0
					; DATA XREF: Ordinal1478+29o
		align 10h
; char aCsocketGetremo[]
aCsocketGetremo	db 'CSocket::GetRemoteAddress() : getpeername() != 0, %d',0Ah,0
					; DATA XREF: Ordinal1479+29o
		align 4
; char aCsocketSetdefa[]
aCsocketSetdefa	db 'CSocket::SetDefaultOptions() : setsockopt() != 0, %d',0Ah,0
					; DATA XREF: Ordinal1484+30o
		align 10h
; char aCsocketCreateW[]
aCsocketCreateW	db 'CSocket::Create() : WSASocket() == INVALID_SOCKET, %d',0Ah,0
					; DATA XREF: Ordinal1445+34o
		align 4
; char aCsocketAttachH[]
aCsocketAttachH	db 'CSocket::Attach() : hSocket == INVALID_SOCKET',0Ah,0
					; DATA XREF: Ordinal1446+Do
		align 4
; char aCsocketCsocket[]
aCsocketCsocket	db 'CSocket::CSocket() : Attach() == FALSE',0Ah,0
					; DATA XREF: Ordinal1438+22o
; char aCsocketOperato[]
aCsocketOperato	db 'CSocket::operator =() : Attach() == FALSE',0Ah,0
					; DATA XREF: Ordinal1440+10o
		align 4
; char aCaddressSeta_0[]
aCaddressSeta_0	db 'CAddress::SetAddress() : gethostbyname() == NULL, %d',0Ah,0
					; DATA XREF: Ordinal1434+89o
		align 4
; char aCaddressSetadd[]
aCaddressSetadd	db 'CAddress::SetAddress() : CStringConvert::Copy() == false',0Ah,0
					; DATA XREF: Ordinal1434+21o
		align 10h
; char aCsocketBindSoc[]
aCsocketBindSoc	db 'CSocket::Bind() : sockAddr.SetAddress() == FALSE',0Ah,0
					; DATA XREF: Ordinal1450+3Bo
		align 4
; char aCsocketConne_1[]
aCsocketConne_1	db 'CSocket::Connect() : szHost == NULL',0Ah,0
					; DATA XREF: Ordinal1452:loc_6B19EDB1o
		align 4
aCsocketConne_0	db 'CSocket::Connect() : sockAddr.SetAddress() == FALSE',0Ah,0
					; DATA XREF: Ordinal1452:loc_6B19EDAAo
		align 4
; char aCsocketListenS[]
aCsocketListenS	db 'CSocket::Listen() : sockAddr.SetAddress() == FALSE',0Ah,0
					; DATA XREF: Ordinal1454+3Bo
off_6B1B7518	dd offset sub_6B19EF77	; DATA XREF: Ordinal1488+6o
					; Ordinal1487+6o
; char aCsplitpathGe_0[]
aCsplitpathGe_0	db 'CSplitPath::GetWindowsDirectory() : nRet == 0, 0x%08X',0
					; DATA XREF: Ordinal1507+65o
		align 4
aCsplitpathGetw	db 'CSplitPath::GetWindowsDirectory()',0 ; DATA XREF: Ordinal1507+18o
		align 4
; char aCsplitpathGe_1[]
aCsplitpathGe_1	db 'CSplitPath::GetSystemDirectory() : nRet == 0, 0x%08X',0
					; DATA XREF: Ordinal1508+65o
		align 10h
aCsplitpathGets	db 'CSplitPath::GetSystemDirectory()',0 ; DATA XREF: Ordinal1508+18o
		align 4
; char aCsplitpathSp_1[]
aCsplitpathSp_1	db 'CSplitPath::SplitPath() : GetLongPathName() == 0, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1489+2B9o
		align 10h
; char aCsplitpathSp_0[]
aCsplitpathSp_0	db 'CSplitPath::SplitPath() : GetShortPathName() == 0, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1489+1C4o
		align 4
aCsplitpathSpli	db 'CSplitPath::SplitPath()',0 ; DATA XREF: Ordinal1489+3Co
; char aCsplitpathSp_3[]
aCsplitpathSp_3	db 'CSplitPath::SplitModule() : GetModuleFileName() == 0, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1490+6Fo
		align 4
aCsplitpathSp_2	db 'CSplitPath::SplitModule()',0 ; DATA XREF: Ordinal1490+2Eo
		align 10h
; char aCsplitpathGetm[]
aCsplitpathGetm	db 'CSplitPath::GetModuleDirectory() : path.SplitModule() == false',0Ah,0
					; DATA XREF: Ordinal1510+1Eo
; char aCstreamarchi_8[]
aCstreamarchi_8	db 'CStreamArchive::ReadEx() : m_pStream->Read() != S_OK, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1515+3Fo
		align 10h
; char aCstreamarchi_9[]
aCstreamarchi_9	db 'CStreamArchive::WriteEx() : m_pStream->Write() != S_OK, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1516+3Fo
; char aCstreamarch_10[]
aCstreamarch_10	db 'CStreamArchive::GetPosEx() : m_pStream->Seek() != S_OK, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1517+39o
; char aCstreamarch_11[]
aCstreamarch_11	db 'CStreamArchive::SetPosEx() : m_pStream->Seek() != S_OK, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1518+4Co
off_6B1B7800	dd offset sub_6B19FA9A	; DATA XREF: Ordinal1511+Fo
					; Ordinal1512+3o
		dd offset Ordinal1515
		dd offset Ordinal1516
		dd offset Ordinal1517
		dd offset Ordinal1518
; char aCstringconve_4[]
aCstringconve_4	db 'CStringConvert::Copy(CStringA, LPSTR) : szString == NULL',0Ah,0
					; DATA XREF: Ordinal1523+9o
		align 10h
; char aCstringconve_5[]
aCstringconve_5	db 'CStringConvert::Copy(CStringW, LPWSTR) : szString == NULL',0Ah,0
					; DATA XREF: Ordinal1524+9o
		align 4
aCstringconve_6	db 'CStringConvert::FormatV(CStringA, LPCSTR, va_list)',0
					; DATA XREF: Ordinal1529+18o
		align 10h
aCstringconve_7	db 'CStringConvert::FormatV(CStringW, LPCWSTR, va_list)',0
					; DATA XREF: Ordinal1530+18o
aCstringconve_8	db 'CStringConvert::AppendFormatV(CStringA, LPCSTR, va_list)',0
					; DATA XREF: Ordinal1531+18o
		align 10h
aCstringconve_9	db 'CStringConvert::AppendFormatV(CStringW, LPCWSTR, va_list)',0
					; DATA XREF: Ordinal1532+18o
		align 4
aCstringconv_10	db 'CStringConvert::Copy(LPCSTR, CStringA)',0 ; DATA XREF: Ordinal1519+18o
		align 4
aCstringconv_11	db 'CStringConvert::Copy(LPCSTR, CStringW)',0 ; DATA XREF: Ordinal1520+1Bo
		align 4
aCstringconv_12	db 'CStringConvert::Copy(LPCWSTR, CStringW)',0 ; DATA XREF: Ordinal1521+18o
aCstringconv_13	db 'CStringConvert::Copy(LPCWSTR, CStringA)',0 ; DATA XREF: Ordinal1522+1Bo
aCstringconv_14	db 'CStringConvert::Append(CStringA, LPCASTR)',0
					; DATA XREF: Ordinal1533+18o
		align 4
aCstringconv_15	db 'CStringConvert::Append(CStringW, LPCWSTR)',0
					; DATA XREF: Ordinal1534+18o
		align 4
aCstringconv_16	db 'CStringConvert::FormatPathV(CStringA, LPCSTR, LPCSTR, va_list)',0
					; DATA XREF: Ordinal1539+18o
		align 4
; wchar_t Str
Str		db '\',0                ; DATA XREF: Ordinal1540+46o
					; Ordinal1536+3Bo
		align 4
aCstringconv_17	db 'CStringConvert::FormatPathV(CStringW, LPCWSTR, LPCWSTR, va_list)',0
					; DATA XREF: Ordinal1540+18o
		align 4
aCstringconv_18	db 'CStringConvert::AppendPath(CStringA, LPCSTR)',0
					; DATA XREF: Ordinal1535+18o
		align 4
aCstringconv_19	db 'CStringConvert::AppendPath(CStringW, LPCWSTR)',0
					; DATA XREF: Ordinal1536+18o
		align 4
off_6B1B7B4C	dd offset sub_6B1A1016	; DATA XREF: Ordinal1542+6o
					; Ordinal1541+10o
		dd offset Ordinal735
; char aSSSSSSSSSSSSS[]
aSSSSSSSSSSSSS	db '%s%s%s%s%s%s%s%s%s%s%s%s%s',0Dh,0Ah,0 ; DATA XREF: Ordinal1545+158o
		align 4
; char a02d02d02d03d[]
a02d02d02d03d	db '%02d:%02d:%02d:%03d',0 ; DATA XREF: Ordinal1545+126o
; char a04d02d02d[]
a04d02d02d	db '%04d-%02d-%02d',0   ; DATA XREF: Ordinal1545+101o
		align 4
aAuditsuccess	db 'AuditSuccess',0     ; DATA XREF: Ordinal1545:loc_6B1A10E1o
		align 4
aAuditfailure	db 'AuditFailure',0     ; DATA XREF: Ordinal1545:loc_6B1A10D8o
		align 4
aUnknown	db 'Unknown',0          ; DATA XREF: Ordinal1545+94o
; char aCstructuredl_0[]
aCstructuredl_0	db 'CStructuredLogFile::LogV() : Filter() == FALSE',0Ah,0
					; DATA XREF: Ordinal1545+62o
aCstructuredlog	db 'CStructuredLogFile::LogV',0 ; DATA XREF: Ordinal1545+2Co
		align 4
; char asc_6B1B7C0C[]
asc_6B1B7C0C	db '"',0                ; DATA XREF: Ordinal1541+1Bo
		align 10h
; char asc_6B1B7C10[]
asc_6B1B7C10	db ', ',0               ; DATA XREF: Ordinal1541+8o
		align 4
off_6B1B7C14	dd offset sub_6B1A14CD	; DATA XREF: Ordinal1561+10o
					; Ordinal1564o	...
		dd offset Ordinal1663
		dd offset Ordinal1664
		dd offset Ordinal1649
off_6B1B7C24	dd offset sub_6B1A1573	; DATA XREF: Ordinal1559+9o
					; Ordinal1560o
		dd 20h
off_6B1B7C2C	dd offset sub_6B1A1A47	; DATA XREF: Ordinal1572+Ao
					; Ordinal1571+13o ...
off_6B1B7C30	dd offset unknown_libname_7 ; DATA XREF: Ordinal1584+2o
					; Ordinal1585o	...
					; Microsoft VisualC 2-10/net runtime
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
off_6B1B7C44	dd offset sub_6B1A18D7	; DATA XREF: Ordinal1586+10o
					; Ordinal1587+6o
		dd offset Ordinal1588
		dd offset Ordinal1589
		dd offset Ordinal1590
		dd offset Ordinal1591
off_6B1B7C58	dd offset sub_6B1A1A8B	; DATA XREF: Ordinal1593+Ao
					; Ordinal1592+13o ...
off_6B1B7C5C	dd offset sub_6B1A1AAD	; DATA XREF: Ordinal1599+Ao
					; Ordinal1598+13o ...
off_6B1B7C60	dd offset unknown_libname_8 ; DATA XREF: Ordinal1604+Do
					; Ordinal1605o	...
					; Microsoft VisualC 2-10/net runtime
aInvalidVectorT	db 'invalid vector<T> subscript',0 ; DATA XREF: sub_6B1A17FC+Do
off_6B1B7C80	dd offset sub_6B1A1A69	; DATA XREF: Ordinal1578+Bo
					; Ordinal1579o	...
		align 8
; char aCmessagelock_5[]
aCmessagelock_5	db 'CMessageLock::LockWithMessagePump() : MsgWaitForMultipleObjectsEx'
					; DATA XREF: Ordinal1609+3AAo
		db '() == WAIT_FAILED, 0x%08X',0Ah,0
; char aCmessagelock_4[]
aCmessagelock_4	db 'CMessageLock::LockWithMessagePump() : nCount == 0, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1609+30Fo
		align 10h
; char aCmessagelock_3[]
aCmessagelock_3	db 'CMessageLock::LockWithMessagePump() : m_bExitOnQuit != FALSE',0Ah,0
					; DATA XREF: Ordinal1609:loc_6B1A20F7o
		align 10h
; char aCmessagelock_2[]
aCmessagelock_2	db 'CMessageLock::LockWithMessagePump() : GetMessageW() == FALSE, 0x%'
					; DATA XREF: Ordinal1609+26Bo
		db '08X',0Ah,0
		align 4
aCmessagelock_1	db 'CMessageLock::LockWithMessagePump() : GetMessageA() == FALSE, 0x%'
					; DATA XREF: Ordinal1609+246o
		db '08X',0Ah,0
		align 10h
; char aCmessagelock_0[]
aCmessagelock_0	db 'CMessageLock::LockWithMessagePump() : msg.message == WM_QUIT',0Ah,0
					; DATA XREF: Ordinal1609+1F9o
		align 10h
aCmessagelockLo	db 'CMessageLock::LockWithMessagePump()',0 ; DATA XREF: Ordinal1609+44o
		dd offset aGlobal	; "Global\\"
; char aGlobal[]
aGlobal		db 'Global\',0          ; DATA XREF: Ordinal1614+2Co
					; .rdata:6B1B7E54o
off_6B1B7E60	dd offset unknown_libname_9 ; DATA XREF: Ordinal1610+2o
					; Ordinal1611o	...
					; Microsoft VisualC 2-10/net runtime
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
; char aCsyncobjectCre[]
aCsyncobjectCre	db 'CSyncObject::CreateGlobalName() : lstrlen(szName) + 7 + 1 > dwCha'
					; DATA XREF: Ordinal1614+14o
		db 'rCount',0Ah,0
		align 4
; char aCcriticalsec_3[]
aCcriticalsec_3	db 'CCriticalSection::Lock() : __except(), 0x%08X',0Ah,0
					; DATA XREF: Ordinal1621+4Ao
		align 4
; char aCcriticalsecti[]
aCcriticalsecti	db 'CCriticalSection::Lock() : m_bCreated == FALSE',0Ah,0
					; DATA XREF: Ordinal1621+12o
		align 10h
stru_6B1B7F20	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6B1A2446, \
					; DATA XREF: Ordinal1621+2o
				   offset loc_6B1A2454>	; SEH scope table for function 6B1A2410
; char aCcriticalsec_0[]
aCcriticalsec_0	db 'CCriticalSection::TryLock() : m_bCreated == FALSE',0Ah,0
					; DATA XREF: Ordinal1622+6o
		align 10h
; char aCcriticalsec_1[]
aCcriticalsec_1	db 'CCriticalSection::UnLock() : m_bCreated == FALSE',0Ah,0
					; DATA XREF: Ordinal1625+6o
		align 4
off_6B1B7F94	dd offset sub_6B1A2B3D	; DATA XREF: Ordinal1627+6o
					; Ordinal1629+3o ...
		dd offset Ordinal1636
		dd offset Ordinal1637
		dd offset Ordinal1649
; char aCsemaphoreUnlo[]
aCsemaphoreUnlo	db 'CSemaphore::Unlock() : m_hSemaphore == NULL',0Ah,0
					; DATA XREF: Ordinal1634+7o
		align 4
; char aCsemaphoreLock[]
aCsemaphoreLock	db 'CSemaphore::Lock() : m_hSemaphore == NULL',0Ah,0
					; DATA XREF: Ordinal1636+Fo
		align 10h
off_6B1B8000	dd offset sub_6B1A2B93	; DATA XREF: Ordinal1639+6o
					; Ordinal1641+3o ...
		dd offset Ordinal1647
		dd offset Ordinal1648
		dd offset Ordinal1649
; char aCmutexLockM_hm[]
aCmutexLockM_hm	db 'CMutex::Lock() : m_hMutex == NULL',0Ah,0 ; DATA XREF: Ordinal1647+Fo
					; Ordinal1648+7o
		align 4
off_6B1B8034	dd offset sub_6B1A2BE6	; DATA XREF: Ordinal1650+6o
					; Ordinal1652+3o ...
		dd offset Ordinal1663
		dd offset Ordinal1664
		dd offset Ordinal1649
; char aCeventSetevent[]
aCeventSetevent	db 'CEvent::SetEvent() : m_hEvent == NULL',0Ah,0 ; DATA XREF: Ordinal1659+7o
		align 4
; char aCeventPulseeve[]
aCeventPulseeve	db 'CEvent::PulseEvent() : m_hEvent == NULL',0Ah,0
					; DATA XREF: Ordinal1660+7o
		align 4
; char aCeventReseteve[]
aCeventReseteve	db 'CEvent::ResetEvent() : m_hEvent == NULL',0Ah,0
					; DATA XREF: Ordinal1661+7o
		align 4
; char aCeventLockM_he[]
aCeventLockM_he	db 'CEvent::Lock() : m_hEvent == NULL',0Ah,0 ; DATA XREF: Ordinal1663+Fo
		align 4
off_6B1B80E8	dd offset sub_6B1A2B21	; DATA XREF: Ordinal1616+3o
					; Ordinal1615+Fo
		dd offset Ordinal1624
		dd offset Ordinal1625
		dd offset Ordinal829
; char aCcriticalsec_4[]
aCcriticalsec_4	db 'CCriticalSection::Create() : __except(), 0x%08X',0Ah,0
					; DATA XREF: Ordinal1619+45o
		align 10h
stru_6B1B8130	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6B1A270B, \
					; DATA XREF: Ordinal1619+2o
				   offset loc_6B1A2719>	; SEH scope table for function 6B1A26DA
; char aCsemaphoreCrea[]
aCsemaphoreCrea	db 'CSemaphore::Create() : CreateSemaphore() == NULL, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1631+6Bo
		align 4
; char aSCreateCreateg[]
aSCreateCreateg	db '%s::Create() : CreateGlobalName() == FALSE',0Ah,0
					; DATA XREF: Ordinal1631+40o
					; Ordinal1632+41o ...
aCsemaphore	db 'CSemaphore',0       ; DATA XREF: Ordinal1631+3Bo
					; Ordinal1632+3Co
		align 10h
; char aCsemaphoreOpen[]
aCsemaphoreOpen	db 'CSemaphore::Open() : OpenSemaphore() == NULL, %s, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1632+71o
		align 4
; char aCmutexCreateCr[]
aCmutexCreateCr	db 'CMutex::Create() : CreateMutex() == NULL, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1643+68o
		align 10h
aCmutex		db 'CMutex',0           ; DATA XREF: Ordinal1643+3Bo
					; Ordinal1644+3Co
		align 4
; char aCmutexOpenOpen[]
aCmutexOpenOpen	db 'CMutex::Open() : OpenMutex() == NULL, %s, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1644+71o
		align 4
; char aCeventCreateCr[]
aCeventCreateCr	db 'CEvent::Create() : CreateEvent() == NULL, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1654+6Bo
		align 10h
aCevent		db 'CEvent',0           ; DATA XREF: Ordinal1654+3Bo
					; Ordinal1655+3Co
		align 4
; char aCeventOpenOpen[]
aCeventOpenOpen	db 'CEvent::Open() : OpenEvent() == NULL, %s, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1655+71o
		align 4
; char aCcriticalsec_2[]
aCcriticalsec_2	db 'CCriticalSection::CCriticalSection() : Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal1615+28o
		align 4
; char aCsemaphoreCsem[]
aCsemaphoreCsem	db 'CSemaphore::CSemaphore() : Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal1628+28o
		align 4
; char aCmutexCmutexCr[]
aCmutexCmutexCr	db 'CMutex::CMutex() : Create() == FALSE',0Ah,0 ; DATA XREF: Ordinal1640+26o
		align 10h
; char aCeventCeventCr[]
aCeventCeventCr	db 'CEvent::CEvent() : Create() == FALSE',0Ah,0 ; DATA XREF: Ordinal1651+28o
		align 4
; char aCntqueryinfo_0[]
aCntqueryinfo_0	db 'CNtQueryInformationProcess::GetParentProcessId() : IsModule() == '
					; DATA XREF: Ordinal1681:loc_6B1A2C9Ao
		db 'FALSE',0Ah,0
; char aCntqueryinform[]
aCntqueryinform	db 'CNtQueryInformationProcess::GetParentProcessId() : NtQueryInforma'
					; DATA XREF: Ordinal1681+45o
		db 'tionProcess() != STATUS_SUCCESS, %p, 0x%08X',0Ah,0
		align 10h
; char aNtqueryinforma[]
aNtqueryinforma	db 'NtQueryInformationProcess',0 ; DATA XREF: Ordinal1685:loc_6B1A2CD1o
					; Ordinal1682+20o ...
		align 4
off_6B1B845C	dd offset sub_6B1A32B8	; DATA XREF: Ordinal1676+Co
					; Ordinal1677+7o
; char aCntqueryinfo_1[]
aCntqueryinfo_1	db 'CNtQueryInformationProcess::GetParentProcessId() : OpenProcess() '
					; DATA XREF: Ordinal1680+3Eo
		db '== NULL, %lu, 0x%08X',0Ah,0
		align 4
off_6B1B84B8	dd offset sub_6B1A329C	; DATA XREF: Ordinal1667o
					; Ordinal1666+Ao ...
; char aNtdll_dll[]
aNtdll_dll	db 'NTDLL.DLL',0        ; DATA XREF: Ordinal1678+Co
		align 4
off_6B1B84C8	dd offset sub_6B1A32D4	; DATA XREF: Ordinal1686+6o
					; Ordinal1687+3o
		align 10h
; char aCsysteminfoCre[]
aCsysteminfoCre	db 'CSystemInfo::Create() : m_bToolHelpOk == FALSE && m_bPSAPIOk == F'
					; DATA XREF: Ordinal1688+45o
		db 'ALSE',0Ah,0
		align 4
aCmoduleinfoOpe	db 'CModuleInfo::operator =()',0 ; DATA XREF: Ordinal1669+2Eo
		align 4
off_6B1B8534	dd offset sub_6B1A38B4	; DATA XREF: Ordinal1672+6o
					; Ordinal1671+8o ...
aCprocessinfoOp	db 'CProcessInfo::operator =()',0 ; DATA XREF: Ordinal1674+3Ao
		align 8
; char aCsysteminfoG_2[]
aCsysteminfoG_2	db 'CSystemInfo::GetModuleListPSAPI() : m_PSAPI.EnumProcessModules =='
					; DATA XREF: Ordinal1695:loc_6B1A43B5o
		db ' NULL',0Ah,0
; char aCsysteminfoG_1[]
aCsysteminfoG_1	db 'CSystemInfo::GetModuleListPSAPI() : m_PSAPI.GetModuleFileNameEx()'
					; DATA XREF: Ordinal1695+161o
		db ' == 0, 0x%08X',0Ah,0
; char aCsysteminfoG_0[]
aCsysteminfoG_0	db 'CSystemInfo::GetModuleListPSAPI() : EnumProcessModules() == FALSE'
					; DATA XREF: Ordinal1695+C8o
		db ', %lu, 0x%08X',0Ah,0
aCsysteminfoGet	db 'CSystemInfo::GetProcessInfoPSAPI()',0 ; DATA XREF: Ordinal1695+32o
		align 8
; char aCsysteminfoG_7[]
aCsysteminfoG_7	db 'CSystemInfo::GetModuleListToolHelp() : m_ToolHelp.CreateToolhelp3'
					; DATA XREF: Ordinal1698:loc_6B1A46C2o
		db '2Snapshot == NULL',0Ah,0
		align 10h
; char aCsysteminfoG_6[]
aCsysteminfoG_6	db 'CSystemInfo::GetModuleListToolHelp() : m_ToolHelp.Module32Next() '
					; DATA XREF: Ordinal1698+1E2o
		db '== FALSE, %lu, 0x%08X',0Ah,0
aCsysteminfoG_5	db 'CSystemInfo::GetModuleListToolHelp()',0
					; DATA XREF: Ordinal1698:loc_6B1A44BBo
		align 10h
aCsysteminfoG_4	db 'CSystemInfo::GetModuleListToolHelp() : m_ToolHelp.Module32First()'
					; DATA XREF: Ordinal1698+D9o
		db ' == FALSE, %lu, 0x%08X',0Ah,0
		align 10h
; char aCsysteminfoG_3[]
aCsysteminfoG_3	db 'CSystemInfo::GetModuleListToolHelp() : m_ToolHelp.CreateToolhelp3'
					; DATA XREF: Ordinal1698+81o
		db '2Snapshot() == INVALID_HANDLE_VALUE, %lu, 0x%08X',0Ah,0
		align 8
; char aCsysteminfo_10[]
aCsysteminfo_10	db 'CSystemInfo::GetProcessInfoPSAPI() : GetModuleListPSAPI() == FALS'
					; DATA XREF: Ordinal1694+8Do
		db 'E, %lu',0Ah,0
		align 8
aCsysteminfoG_9	db 'CSystemInfo::GetProcessInfoPSAPI() : m_NtQueryInformationProcess.'
					; DATA XREF: Ordinal1694+70o
		db 'GetParentProcessId() == FALSE, %lu',0Ah,0
		align 10h
; char aCsysteminfoG_8[]
aCsysteminfoG_8	db 'CSystemInfo::GetProcessInfoPSAPI() : OpenProcess() == NULL, %lu, '
					; DATA XREF: Ordinal1694+45o
		db '0x%08X',0Ah,0
		align 10h
; char aCsysteminfo_14[]
aCsysteminfo_14	db 'CSystemInfo::GetProcessListPSAPI() : GetProcessInfoPSAPI() == FAL'
					; DATA XREF: Ordinal1696+123o
		db 'SE',0Ah,0
		align 4
; char aCsysteminfo_13[]
aCsysteminfo_13	db 'CSystemInfo::GetProcessListPSAPI() : m_PSAPI.EnumProcesses() == F'
					; DATA XREF: Ordinal1696+C4o
		db 'ALSE, 0x%08X',0Ah,0
		align 4
aCsysteminfo_12	db 'CSystemInfo::GetProcessListPSAPI()',0
					; DATA XREF: Ordinal1696:loc_6B1A4CA8o
		align 10h
; char aCsysteminfo_11[]
aCsysteminfo_11	db 'CSystemInfo::GetProcessListPSAPI() : m_PSAPI.EnumProcessModules ='
					; DATA XREF: Ordinal1696+2Fo
		db '= NULL',0Ah,0
		align 10h
; char aCsysteminfo_21[]
aCsysteminfo_21	db 'CSystemInfo::GetProcessListToolHelp() : m_ToolHelp.CreateToolhelp'
					; DATA XREF: Ordinal1699:loc_6B1A517Co
		db '32Snapshot == NULL',0Ah,0
		align 4
; char aCsysteminfo_20[]
aCsysteminfo_20	db 'CSystemInfo::GetProcessListToolHelp() : bFound == FALSE, %lu',0Ah,0
					; DATA XREF: Ordinal1699+2B4o
		align 4
; char aCsysteminfo_19[]
aCsysteminfo_19	db 'CSystemInfo::GetProcessListToolHelp() : m_ToolHelp.Process32Next('
					; DATA XREF: Ordinal1699+1BCo
		db ') == FALSE, %lu, 0x%08X',0Ah,0
		align 8
; char aCsysteminfo_18[]
aCsysteminfo_18	db 'CSystemInfo::GetProcessListToolHelp() : GetModuleListToolHelp() ='
					; DATA XREF: Ordinal1699+161o
		db '= FALSE, %lu',0Ah,0
		align 4
aCsysteminfo_17	db 'CSystemInfo::GetProcessListToolHelp()',0 ; DATA XREF: Ordinal1699+DFo
		align 10h
aCsysteminfo_16	db 'CSystemInfo::GetProcessListToolHelp() : m_ToolHelp.Process32First'
					; DATA XREF: Ordinal1699+D5o
		db '() == FALSE, %lu, 0x%08X',0Ah,0
		align 10h
; char aCsysteminfo_15[]
aCsysteminfo_15	db 'CSystemInfo::GetProcessListToolHelp() : m_ToolHelp.CreateToolhelp'
					; DATA XREF: Ordinal1699+7Eo
		db '32Snapshot() == INVALID_HANDLE_VALUE, %lu, 0x%08X',0Ah,0
		align 8
; char aCsysteminfo_25[]
aCsysteminfo_25	db 'CSystemInfo::GetProcessList() : m_bToolHelpOk == FALSE && m_bPSAP'
					; DATA XREF: Ordinal1691:loc_6B1A523Bo
		db 'IOk = FALSE',0Ah,0
		align 4
aCsysteminfo_24	db 'CSystemInfo::GetProcessList() : GetProcessListToolHelp() == FALSE'
					; DATA XREF: Ordinal1691+92o
		db 0Ah,0
		align 10h
; char aCsysteminfo_23[]
aCsysteminfo_23	db 'CSystemInfo::GetProcessList() : GetProcessListPSAPI() == FALSE',0Ah,0
					; DATA XREF: Ordinal1691+40o
					; Ordinal1691+64o
; char aCsysteminfo_22[]
aCsysteminfo_22	db 'CSystemInfo::GetProcessList() : switch(default)',0Ah,0
					; DATA XREF: Ordinal1691+1Co
		align 8
; char aCsysteminfo_26[]
aCsysteminfo_26	db 'CSystemInfo::GetProcessInfoToolHelp() : GetProcessListToolHelp() '
					; DATA XREF: Ordinal1697+2Eo
		db '== FALSE, %lu',0Ah,0
; char aCsysteminfo_30[]
aCsysteminfo_30	db 'CSystemInfo::GetProcessInfo() : m_bToolHelpOk == FALSE && m_bPSAP'
					; DATA XREF: Ordinal1690:loc_6B1A533Co
		db 'IOk = FALSE',0Ah,0
		align 4
aCsysteminfo_29	db 'CSystemInfo::GetProcessInfo() : GetProcessInfoToolHelp() == FALSE'
					; DATA XREF: Ordinal1690+81o
		db 0Ah,0
		align 10h
; char aCsysteminfo_28[]
aCsysteminfo_28	db 'CSystemInfo::GetProcessInfo() : GetProcessInfoPSAPI() == FALSE',0Ah,0
					; DATA XREF: Ordinal1690+38o
					; Ordinal1690+58o
; char aCsysteminfo_27[]
aCsysteminfo_27	db 'CSystemInfo::GetProcessInfo() : switch(default)',0Ah,0
					; DATA XREF: Ordinal1690+19o
		align 4
off_6B1B8EE4	dd offset sub_6B1A543A	; DATA XREF: Ordinal1700+6o
					; Ordinal1702o	...
off_6B1B8EE8	dd offset unknown_libname_10 ; DATA XREF: Ordinal1711+2o
					; Ordinal1712o	...
					; Microsoft VisualC 2-10/net runtime
		dd offset _purecall
aListTTooLong	db 'list<T> too long',0 ; DATA XREF: sub_6B1A55EA+20o
		align 4
off_6B1B8F04	dd offset sub_6B1A58F6	; DATA XREF: Ordinal1713+6o
					; Ordinal1714+6o
		dd offset Ordinal1715
		dd offset _purecall
		dd offset Ordinal1719
		dd offset Ordinal1720
aCtaskschedul_0	db 'CTaskScheduler::Add()',0 ; DATA XREF: Ordinal1715:loc_6B1A5788o
		align 10h
; char aCtaskscheduler[]
aCtaskscheduler	db 'CTaskScheduler::Add() : m_TaskInfoList.size() >= m_nMaxQueueLengt'
					; DATA XREF: Ordinal1715+61o
		db 'h',0Ah,0
off_6B1B8F74	dd offset sub_6B1A5A4D	; DATA XREF: Ordinal1721+1Co
					; Ordinal1722+10o
		dd offset Ordinal1724
		dd offset Ordinal1725
		dd offset Ordinal1719
		dd offset Ordinal1720
off_6B1B8F88	dd offset loc_6B1A5A55	; DATA XREF: Ordinal1721+16o
					; Ordinal1722+Ao
		dd offset Ordinal1741
		dd offset Ordinal1742
		dd offset Ordinal1726
		dd offset Ordinal1758
		dd offset Ordinal1759
; char aCtaskthreadCre[]
aCtaskthreadCre	db 'CTaskThread::Create() : m_AddEvent.Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal1723+22o
		align 4
; char aCworkerthreadI[]
aCworkerthreadI	db 'CWorkerThread::InitInstance()',0Ah,0 ; DATA XREF: Ordinal1758o
		align 4
; char aCworkerthreadE[]
aCworkerthreadE	db 'CWorkerThread::ExitInstance()',0Ah,0 ; DATA XREF: Ordinal1759o
		align 4
; char aCtaskthreadRun[]
aCtaskthreadRun	db 'CTaskThread::Run()',0Ah,0 ; DATA XREF: Ordinal1726+7o
off_6B1B902C	dd offset unknown_libname_11 ; DATA XREF: Ordinal1730+4o
					; Ordinal1732o	...
					; Microsoft VisualC 2-10/net runtime
off_6B1B9030	dd offset sub_6B1A5FB7	; DATA XREF: Ordinal1734+8o
					; Ordinal1735+7o
		dd offset Ordinal1741
		dd offset Ordinal1742
		dd offset _purecall
		dd offset Ordinal1750
		dd offset Ordinal1751
; char aCthreadInitins[]
aCthreadInitins	db 'CThread::InitInstance()',0Ah,0 ; DATA XREF: Ordinal1750o
		align 4
; char aCthreadExitins[]
aCthreadExitins	db 'CThread::ExitInstance()',0Ah,0 ; DATA XREF: Ordinal1751o
		align 10h
; char aCthreadStartIn[]
aCthreadStartIn	db 'CThread::Start() : InitInstance() == FALSE',0Ah,0
					; DATA XREF: Ordinal1752+6Co
; char aCthreadStartCo[]
aCthreadStartCo	db 'CThread::Start() : coInit.Initialize() != S_OK, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1752+28o
; char aCthreadThreadp[]
aCthreadThreadp	db 'CThread::ThreadProc() : delete pThread, 0x%04X',0Ah,0
					; DATA XREF: sub_6B1A5CC3+18o
; char aCthreadCreat_0[]
aCthreadCreat_0	db 'CThread::Create() : m_bInitInstanceResult == FALSE',0Ah,0
					; DATA XREF: Ordinal1736+12Eo
; char aCthreadCreate_[]
aCthreadCreate_	db 'CThread::Create() : _beginthreadex() == NULL, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1736+EEo
		align 10h
aCthreadCreateC	db 'CThread::Create() : CreateThread() == NULL, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1736+B0o
; char aCthreadCreateM[]
aCthreadCreateM	db 'CThread::Create() : m_InitInstanceEvent.Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal1736+67o
		align 10h
; char aCthreadCreateI[]
aCthreadCreateI	db 'CThread::Create() : IsThread() != FALSE',0Ah,0
					; DATA XREF: Ordinal1736+10o
		align 4
; char aCthreadTermi_0[]
aCthreadTermi_0	db 'CThread::Terminate() : WaitForExit(%lu) == FALSE, 0x%04X',0Ah,0
					; DATA XREF: Ordinal1741+44o
		align 4
; char aCthreadTermina[]
aCthreadTermina	db 'CThread::Terminate() : m_Options.m_bAutoDelete != FALSE',0Ah,0
					; DATA XREF: Ordinal1741+9o
		align 4
off_6B1B9294	dd offset sub_6B1A6360	; DATA XREF: Ordinal1753+13o
					; Ordinal1754o
		dd offset Ordinal1741
		dd offset Ordinal1742
		dd offset Ordinal1757
		dd offset Ordinal1758
		dd offset Ordinal1759
		dd offset Ordinal1755
aCthreadpoolAll	db 'CThreadPool::AllocateThread()',0 ; DATA XREF: Ordinal1771+1Do
		align 10h
; char aCthreadpoolAdd[]
aCthreadpoolAdd	db 'CThreadPool::Add() : IsThreadPool() == FALSE',0Ah,0
					; DATA XREF: Ordinal1772+Co
		align 10h
; char aCworkerthreadR[]
aCworkerthreadR	db 'CWorkerThread::Run()',0Ah,0 ; DATA XREF: Ordinal1757+7o
		align 4
off_6B1B9318	dd offset sub_6B1A68FD	; DATA XREF: Ordinal1761+9o
					; Ordinal1762+5o
		dd offset Ordinal1772
		dd offset Ordinal1773
		dd offset Ordinal1719
		dd offset Ordinal1720
		dd offset Ordinal1771
		dd offset Ordinal1774
; char aCthreadpoolDes[]
aCthreadpoolDes	db 'CThreadPool::Destroy() : (*pos)->Terminate() == FALSE',0Ah,0
					; DATA XREF: Ordinal1765+36o
		align 4
aCthreadpoolC_2	db 'CThreadPool::CreateThread()',0 ; DATA XREF: Ordinal1775+A7o
; char aCthreadpoolC_1[]
aCthreadpoolC_1	db 'CThreadPool::CreateThread() : pThread->Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal1775+89o
		align 4
aCthreadpoolC_0	db 'CThreadPool::CreateThread() : AllocateThread() == NULL',0Ah,0
					; DATA XREF: Ordinal1775+65o
; char aCthreadpoolCre[]
aCthreadpoolCre	db 'CThreadPool::CreateThread() : (*pos)->IsThread() == FALSE',0Ah,0
					; DATA XREF: Ordinal1775:loc_6B1A6794o
		align 4
; char aCthreadpoolC_6[]
aCthreadpoolC_6	db 'CThreadPool::Create() : CreateThread() == FALSE',0Ah,0
					; DATA XREF: Ordinal1763:loc_6B1A69E0o
		align 4
; char aCthreadpoolC_5[]
aCthreadpoolC_5	db 'CThreadPool::Create() : m_AddEvent.Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal1763+6Ao
		align 4
; char aCthreadpoolC_4[]
aCthreadpoolC_4	db 'CThreadPool::Create() : IsThreadPool() != FALSE',0Ah,0
					; DATA XREF: Ordinal1763+3Do
		align 4
; char aCthreadpoolC_3[]
aCthreadpoolC_3	db 'CThreadPool::Create() : dwThreadCount == 0',0Ah,0
					; DATA XREF: Ordinal1763+11o
; char aCthreadpoolS_0[]
aCthreadpoolS_0	db 'CThreadPool::SetThreadCount() : CreateThread() == FALSE',0Ah,0
					; DATA XREF: Ordinal1769:loc_6B1A6A73o
		align 10h
; char aCthreadpoolSet[]
aCthreadpoolSet	db 'CThreadPool::SetThreadCount() : dwThreadCount == 0',0Ah,0
					; DATA XREF: Ordinal1769+11o
off_6B1B9574	dd offset unknown_libname_12 ; DATA XREF: Ordinal1776+Ao
					; Ordinal1778o	...
					; Microsoft VisualC 2-10/net runtime
; char aProcess32next[]
aProcess32next	db 'Process32Next',0    ; DATA XREF: Ordinal1792:loc_6B1A6D45o
					; Ordinal1789:loc_6B1A6E8Bo ...
		align 4
; char aProcess32first[]
aProcess32first	db 'Process32First',0   ; DATA XREF: Ordinal1792:loc_6B1A6D2Fo
					; Ordinal1789:loc_6B1A6E76o ...
		align 4
; char aModule32next[]
aModule32next	db 'Module32Next',0     ; DATA XREF: Ordinal1792:loc_6B1A6D19o
					; Ordinal1789:loc_6B1A6E61o ...
		align 4
; char aModule32first[]
aModule32first	db 'Module32First',0    ; DATA XREF: Ordinal1792:loc_6B1A6D03o
					; Ordinal1789:loc_6B1A6E4Co ...
		align 4
; char aToolhelp32read[]
aToolhelp32read	db 'Toolhelp32ReadProcessMemory',0 ; DATA XREF: Ordinal1792:loc_6B1A6CEDo
					; Ordinal1789:loc_6B1A6E37o ...
; char aThread32next[]
aThread32next	db 'Thread32Next',0     ; DATA XREF: Ordinal1792:loc_6B1A6CD7o
					; Ordinal1789:loc_6B1A6E22o ...
		align 4
; char aThread32first[]
aThread32first	db 'Thread32First',0    ; DATA XREF: Ordinal1792:loc_6B1A6CC1o
					; Ordinal1789:loc_6B1A6E0Do ...
		align 4
; char aHeap32next[]
aHeap32next	db 'Heap32Next',0       ; DATA XREF: Ordinal1792:loc_6B1A6CABo
					; Ordinal1789:loc_6B1A6DF8o ...
		align 10h
; char aHeap32listnext[]
aHeap32listnext	db 'Heap32ListNext',0   ; DATA XREF: Ordinal1792:loc_6B1A6C95o
					; Ordinal1789:loc_6B1A6DE3o ...
		align 10h
; char aHeap32listfirs[]
aHeap32listfirs	db 'Heap32ListFirst',0  ; DATA XREF: Ordinal1792:loc_6B1A6C7Fo
					; Ordinal1789:loc_6B1A6DCEo ...
; char aHeap32first[]
aHeap32first	db 'Heap32First',0      ; DATA XREF: Ordinal1792:loc_6B1A6C69o
					; Ordinal1789:loc_6B1A6DB9o ...
; char aCreatetoolhelp[]
aCreatetoolhelp	db 'CreateToolhelp32Snapshot',0 ; DATA XREF: Ordinal1792:loc_6B1A6C53o
					; Ordinal1789+23o ...
		align 4
off_6B1B9648	dd offset sub_6B1A7016	; DATA XREF: Ordinal1787+Co
					; Ordinal1788+3o
off_6B1B964C	dd offset sub_6B1A71C9	; DATA XREF: Ordinal1795+13o
					; Ordinal1796+6o
		dd offset Ordinal1800
		dd offset Ordinal1801
		dd offset Ordinal1802
		dd offset Ordinal1803
; char aCvariantarchiv[]
aCvariantarchiv	db 'CVariantArchive::ReadEx() : m_Variant.GetSize() - m_nPosition < d'
					; DATA XREF: Ordinal1800+1Ao
		db 'wSize',0Ah,0
; char aCvariantarch_0[]
aCvariantarch_0	db 'CVariantArchive::SetPosEx() : uPos >= m_Variant.GetSize()',0Ah,0
					; DATA XREF: Ordinal1803:loc_6B1A7107o
		align 4
; char aCvariantarch_3[]
aCvariantarch_3	db 'CVariantArchive::ReAlloc() : nCurrentSize == nSize',0Ah,0
					; DATA XREF: Ordinal1804+53o
; char aCvariantarch_2[]
aCvariantarch_2	db 'CVariantArchive::ReAlloc() : dwCurrentSize == dwSize',0Ah,0
					; DATA XREF: Ordinal1804+2Co
		align 10h
; char aCvariantarch_1[]
aCvariantarch_1	db 'CVariantArchive::ReAlloc() : dwCurrentSize == 0',0Ah,0
					; DATA XREF: Ordinal1804+18o
		align 4
; char aCvariantarch_5[]
aCvariantarch_5	db 'CVariantArchive::WriteEx() : ReAlloc() == FALSE',0Ah,0
					; DATA XREF: Ordinal1801+43o
		align 4
aCvariantarch_4	db 'CVariantArchive::WriteEx() : m_Variant.Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal1801+2Co
		align 4
off_6B1B97F4	dd offset sub_6B1A7791	; DATA XREF: Ordinal1805+7o
					; Ordinal1809+3o ...
; char aCvariantarrayG[]
aCvariantarrayG	db 'CVariantArray::GetVariant() : pVariant == NULL',0Ah,0
					; DATA XREF: Ordinal1838+14o
; char aCvariantarra_0[]
aCvariantarra_0	db 'CVariantArray::GetSafeArray() : pVariant == NULL',0Ah,0
					; DATA XREF: Ordinal1840+7o
		align 4
; char aCvariantarrayI[]
aCvariantarrayI	db 'CVariantArray::IsVariantArray() : pVariant == NULL',0Ah,0
					; DATA XREF: Ordinal1842+7o
; char aCvariantarra_1[]
aCvariantarra_1	db 'CVariantArray::GetSize() : pSa == NULL',0Ah,0
					; DATA XREF: Ordinal1844+Do
; char aCvariantarra_2[]
aCvariantarra_2	db 'CVariantArray::SetSize() : IsArray() == FALSE',0Ah,0
					; DATA XREF: Ordinal1845:loc_6B1A73A9o
		align 4
; char aCvariantarrayS[]
aCvariantarrayS	db 'CVariantArray::SetSize() : SafeArrayRedim() != S_OK, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1845+4Ao
		align 4
; char aCvariantarra_3[]
aCvariantarra_3	db 'CVariantArray::Copy() : pVariant == NULL',0Ah,0
					; DATA XREF: Ordinal1819:loc_6B1A742Co
		align 4
; char aCvariantarrayC[]
aCvariantarrayC	db 'CVariantArray::Copy() : VariantCopyInd() != S_OK, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1819+2Do
		align 10h
; char aCvariantarrayA[]
aCvariantarrayA	db 'CVariantArray::Attach() : pVariant == NULL',0Ah,0
					; DATA XREF: Ordinal1822:loc_6B1A7473o
; char aCvariantarrayD[]
aCvariantarrayD	db 'CVariantArray::Detach() : pVariant == NULL',0Ah,0
					; DATA XREF: Ordinal1824+Co
; char aCvariantarrayR[]
aCvariantarrayR	db 'CVariantArray::Reference() : pVariant == NULL',0Ah,0
					; DATA XREF: Ordinal1826+Co
		align 4
; char aCvariantarra_5[]
aCvariantarra_5	db 'CVariantArray::GetAt() : pValue == NULL',0Ah,0
					; DATA XREF: Ordinal1831:loc_6B1A7553o
		align 8
; char aCvariantarra_4[]
aCvariantarra_4	db 'CVariantArray::GetAt() : SafeArrayGetElement() != S_OK, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1831+4Co
; char aCvariantarra_8[]
aCvariantarra_8	db 'CVariantArray::SetAt() : pVariant == NULL',0Ah,0
					; DATA XREF: Ordinal1833:loc_6B1A75D0o
		align 8
; char aCvariantarra_7[]
aCvariantarra_7	db 'CVariantArray::SetAt() : SafeArrayPutElement() != S_OK, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1833+59o
aCvariantarra_6	db 'CVariantArray::SetAt() : SetSize() == FALSE',0Ah,0
					; DATA XREF: Ordinal1833+36o
		align 4
; char aCvariantarr_10[]
aCvariantarr_10	db 'CVariantArray::GetAt() : IsArray() == FALSE',0Ah,0
					; DATA XREF: Ordinal1834:loc_6B1A7637o
		align 4
; char aCvariantarra_9[]
aCvariantarra_9	db 'CVariantArray::GetAt() : SafeArrayPtrOfIndex() != S_OK, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1834+43o
; char aCvariantarrayL[]
aCvariantarrayL	db 'CVariantArray::Lock() : SafeArrayLock() != S_OK, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1835+15o
		align 4
; char aCvariantarrayU[]
aCvariantarrayU	db 'CVariantArray::Unlock() : SafeArrayUnlock() != S_OK, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1836+15o
		align 4
; char aCvariantarrayO[]
aCvariantarrayO	db 'CVariantArray::operator =() : Copy() == FALSE',0Ah,0
					; DATA XREF: Ordinal1812+16o
					; Ordinal1810+16o
		align 4
; char aCvariantarr_12[]
aCvariantarr_12	db 'CVariantArray::Create() : SafeArrayCreate() == NULL',0Ah,0
					; DATA XREF: Ordinal1815+37o
		align 4
aCvariantarr_11	db 'CVariantArray::Create() : nSize < 0',0Ah,0 ; DATA XREF: Ordinal1815+10o
		align 4
off_6B1B9CA4	dd offset sub_6B1A7BE9	; DATA XREF: Ordinal1846+7o
					; Ordinal1850+3o ...
; char aCvariantbuffer[]
aCvariantbuffer	db 'CVariantBuffer::Detach() : pVariant == NULL',0Ah,0
					; DATA XREF: Ordinal1865+Co
		align 4
; char aCvariantbuff_0[]
aCvariantbuff_0	db 'CVariantBuffer::Reference() : pVariant == NULL',0Ah,0
					; DATA XREF: Ordinal1867+Co
; char aCvariantbuff_1[]
aCvariantbuff_1	db 'CVariantBuffer::IsVariantBuffer() : pVariant == NULL',0Ah,0
					; DATA XREF: Ordinal1872+7o
		align 10h
; char aCvariantbuff_2[]
aCvariantbuff_2	db 'CVariantBuffer::GetSize() : pSa == NULL',0Ah,0
					; DATA XREF: Ordinal1874+Do
		align 10h
; char aCvariantbuff_4[]
aCvariantbuff_4	db 'CVariantBuffer::GetBuffer() : SafeArrayAccessData() != S_OK, 0x%0'
					; DATA XREF: Ordinal1875+39o
		db '8X',0Ah,0
		align 4
; char aCvariantbuff_3[]
aCvariantbuff_3	db 'CVariantBuffer::GetBuffer() : IsBuffer() == FALSE',0Ah,0
					; DATA XREF: Ordinal1875+10o
		align 10h
; char aCvariantbuff_6[]
aCvariantbuff_6	db 'CVariantBuffer::ReleaseBuffer() : SafeArrayUnaccessData() != S_OK'
					; DATA XREF: Ordinal1876+2Do
		db ', 0x%08X',0Ah,0
		align 4
; char aCvariantbuff_5[]
aCvariantbuff_5	db 'CVariantBuffer::ReleaseBuffer() : IsBuffer() == FALSE',0Ah,0
					; DATA XREF: Ordinal1876+Co
		align 4
; char aCvariantbuff_8[]
aCvariantbuff_8	db 'CVariantBuffer::Create() : SafeArrayCreateVector() == NULL',0Ah,0
					; DATA XREF: Ordinal1856+2Ao
aCvariantbuff_7	db 'CVariantBuffer::Create() : dwSize == 0',0Ah,0
					; DATA XREF: Ordinal1856+Ao
; char aCvariantbuf_10[]
aCvariantbuf_10	db 'CVariantBuffer::Copy() : pVariant == NULL',0Ah,0
					; DATA XREF: Ordinal1860:loc_6B1A7AA7o
		align 4
; char aCvariantbuff_9[]
aCvariantbuff_9	db 'CVariantBuffer::Copy() : VariantCopyInd() != S_OK, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1860+2Do
		align 10h
; char aCvariantbuf_11[]
aCvariantbuf_11	db 'CVariantBuffer::Attach() : pVariant == NULL',0Ah,0
					; DATA XREF: Ordinal1863:loc_6B1A7AEEo
		align 10h
; char aCvariantbuf_14[]
aCvariantbuf_14	db 'CVariantBuffer::Read() : IsBuffer() == FALSE',0Ah,0
					; DATA XREF: Ordinal1869:loc_6B1A7B67o
		align 10h
aCvariantbuf_13	db 'CVariantBuffer::Read() : GetBuffer() == NULL',0Ah,0
					; DATA XREF: Ordinal1869+3Co
		align 10h
aCvariantbuf_12	db 'CVariantBuffer::Read() : dwBufferSize > dwSize',0Ah,0
					; DATA XREF: Ordinal1869+2Ao
; char aCvariantbuf_17[]
aCvariantbuf_17	db 'CVariantBuffer::Write() : IsBuffer() == FALSE',0Ah,0
					; DATA XREF: Ordinal1870:loc_6B1A7BD2o
		align 10h
aCvariantbuf_16	db 'CVariantBuffer::Write() : GetBuffer() == NULL',0Ah,0
					; DATA XREF: Ordinal1870+37o
		align 10h
aCvariantbuf_15	db 'CVariantBuffer::Write() : Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal1870+25o
		align 10h
; char aCvariantbuf_18[]
aCvariantbuf_18	db 'CVariantBuffer::operator =() : Copy() == FALSE',0Ah,0
					; DATA XREF: Ordinal1853+16o
					; Ordinal1851+16o
off_6B1BA0C0	dd offset aComments	; DATA XREF: Ordinal1881:loc_6B1A7F8Br
					; "Comments"
		dd offset aCompanyname	; "CompanyName"
		dd offset aFiledescriptio ; "FileDescription"
		dd offset aFileversion	; "FileVersion"
		dd offset aInternalname	; "InternalName"
		dd offset aLegalcopyright ; "LegalCopyright"
		dd offset aLegaltrademark ; "LegalTrademarks"
		dd offset aOriginalfilena ; "OriginalFilename"
		dd offset aProductname	; "ProductName"
		dd offset aProductversion ; "ProductVersion"
		dd offset aPrivatebuild	; "PrivateBuild"
		dd offset aSpecialbuild	; "SpecialBuild"
aSpecialbuild	db 'SpecialBuild',0     ; DATA XREF: .rdata:6B1BA0ECo
		align 10h
aPrivatebuild	db 'PrivateBuild',0     ; DATA XREF: .rdata:6B1BA0E8o
		align 10h
aProductversion	db 'ProductVersion',0   ; DATA XREF: .rdata:6B1BA0E4o
		align 10h
aProductname	db 'ProductName',0      ; DATA XREF: .rdata:6B1BA0E0o
aOriginalfilena	db 'OriginalFilename',0 ; DATA XREF: .rdata:6B1BA0DCo
		align 10h
aLegaltrademark	db 'LegalTrademarks',0  ; DATA XREF: .rdata:6B1BA0D8o
aLegalcopyright	db 'LegalCopyright',0   ; DATA XREF: .rdata:6B1BA0D4o
		align 10h
aInternalname	db 'InternalName',0     ; DATA XREF: .rdata:6B1BA0D0o
		align 10h
aFileversion	db 'FileVersion',0      ; DATA XREF: .rdata:6B1BA0CCo
aFiledescriptio	db 'FileDescription',0  ; DATA XREF: .rdata:6B1BA0C8o
aCompanyname	db 'CompanyName',0      ; DATA XREF: .rdata:6B1BA0C4o
aComments	db 'Comments',0         ; DATA XREF: .rdata:off_6B1BA0C0o
		align 8
; char aCversioninfoGe[]
aCversioninfoGe	db 'CVersionInfo::GetFieldName() : nIndex < CCDIMOF(m_FieldInfo) && n'
					; DATA XREF: Ordinal1896+Do
		db 'Index >= 0',0Ah,0
		align 4
; char aCversioninfo_0[]
aCversioninfo_0	db 'CVersionInfo::GetFieldValue() : nIndex < CCDIMOF(m_FieldInfo) && '
					; DATA XREF: Ordinal1897+Do
		db 'nIndex >= 0',0Ah,0
		align 4
off_6B1BA248	dd offset sub_6B1A7D8C	; DATA XREF: Ordinal1878o
					; Ordinal1877+Ao
off_6B1BA24C	dd offset sub_6B1A7DDC	; DATA XREF: Ordinal1880+7o
					; Ordinal1879+15o
; char aCversioninfo_1[]
aCversioninfo_1	db 'CVersionInfo::LoadBlock() : VerQueryValue() == 0',0Ah,0
					; DATA XREF: Ordinal1898:loc_6B1A7EBFo
		align 4
; char aStringfileinfo[]
aStringfileinfo	db '\StringFileInfo\%04x%04x\%s',0 ; DATA XREF: Ordinal1898+4Do
aCversioninfoLo	db 'CVersionInfo::LoadBlock()',0 ; DATA XREF: Ordinal1898+23o
		align 4
; char aCversioninfo_8[]
aCversioninfo_8	db 'CVersionInfo::Load() : VerQueryValue() == FALSE',0Ah,0
					; DATA XREF: Ordinal1881:loc_6B1A80FBo
		align 10h
; char aCversioninfo_7[]
aCversioninfo_7	db 'CVersionInfo::Load() : (nSize / sizeof(LANGANDCODEPAGE)) <= 0',0Ah,0
					; DATA XREF: Ordinal1881:loc_6B1A80E7o
		align 10h
; char aCversioninfo_6[]
aCversioninfo_6	db 'CVersionInfo::Load() : LoadBlock(%s) == FALSE',0Ah,0
					; DATA XREF: Ordinal1881+167o
		align 10h
; char aVarfileinfoTra[]
aVarfileinfoTra	db '\VarFileInfo\Translation',0 ; DATA XREF: Ordinal1881+11Ao
		align 4
aCversioninfo_5	db 'CVersionInfo::Load() : GetFileVersionInfo() == FALSE',0Ah,0
					; DATA XREF: Ordinal1881+D5o
		align 4
; char aCversioninfo_4[]
aCversioninfo_4	db 'CVersionInfo::Load() : mem.NewAlloc() == NULL',0Ah,0
					; DATA XREF: Ordinal1881+AAo
		align 4
; char aCversioninfo_3[]
aCversioninfo_3	db 'CVersionInfo::Load() : GetFileVersionInfoSize() == 0',0Ah,0
					; DATA XREF: Ordinal1881+80o
		align 4
; char aCversioninfo_2[]
aCversioninfo_2	db 'CVersionInfo::Load() : path.SplitPath() == false',0Ah,0
					; DATA XREF: Ordinal1881+51o
		align 10h
off_6B1BA450	dd offset sub_6B1A81B8	; DATA XREF: Ordinal1900o
					; Ordinal1899+Co
; char aWtsfreememory[]
aWtsfreememory	db 'WTSFreeMemory',0    ; DATA XREF: Ordinal1904:loc_6B1A8181o
					; Ordinal1901:loc_6B1A8220o ...
		align 4
; char aWtsquerysess_0[]
aWtsquerysess_0	db 'WTSQuerySessionInformationW',0 ; DATA XREF: Ordinal1904:loc_6B1A816Co
					; Ordinal1901:loc_6B1A820Bo ...
; char aWtsquerysessio[]
aWtsquerysessio	db 'WTSQuerySessionInformationA',0 ; DATA XREF: Ordinal1904:loc_6B1A8157o
					; Ordinal1901+20o ...
; char aWtsapi32_dll[]
aWtsapi32_dll	db 'WTSAPI32.DLL',0     ; DATA XREF: Ordinal1905+8o
		align 10h
aAdvapi32_dll	db 'ADVAPI32.dll',0     ; DATA XREF: .rdata:6B1BD8F4o
aZ		db 'Z',0
		align 10h
; IID iidInterface
iidInterface	dd 20400h		; Data1	; DATA XREF: Ordinal710+104o
		dw 0			; Data2
		dw 0			; Data3
		db 0C0h, 6 dup(0), 46h	; Data4
; IID riid
riid		dd 146h			; Data1	; DATA XREF: Ordinal1146+Co
		dw 0			; Data2
		dw 0			; Data3
		db 0C0h, 6 dup(0), 46h	; Data4
		dd 0B62F5910h, 11D16528h, 1196h, 0D0D1EF8h
dword_6B1BA4F0	dd 394C3DE0h, 11D23C6Fh, 0C0007B81h, 0B77A794Fh
					; DATA XREF: sub_6B1A8790+84o
off_6B1BA500	dd offset sub_6B1A8856	; DATA XREF: sub_6B1A883B+4o
					; sub_6B1A9BAF+Bo
		dd offset sub_6B1A8868
		dd offset sub_6B1A8881
		dd offset sub_6B1A88A4
		dd offset sub_6B1A88B6
off_6B1BA514	dd offset sub_6B1A8937	; DATA XREF: sub_6B1A88D2+9o
					; unknown_libname_13+8o ...
		dd offset ?Reset@EventWaitNode@details@Concurrency@@QAE_NXZ ; Concurrency::details::EventWaitNode::Reset(void)
		dd offset sub_6B1A8971
		dd offset sub_6B1A8909
		dd offset sub_6B1A8917
		dd offset unknown_libname_13 ; Microsoft VisualC 2-10/net runtime
		align 10h
stru_6B1BA530	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6B1A8A9A, \
					; DATA XREF: _report_failure+2o
				   offset loc_6B1A8A9E>	; SEH scope table for function 6B1A8A7D
		dd offset dword_6B1BA684
off_6B1BA540	dd offset sub_6B1A8ABC	; DATA XREF: .data:stru_6B1C1034o
					; .data:off_6B1C1054o ...
		align 8
stru_6B1BA548	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6B1A8BA5, \
					; DATA XREF: __ArrayUnwind(void	*,uint,int,void	(*)(void *))+2o
				   offset loc_6B1A8BC9>	; SEH scope table for function 6B1A8B76
		align 8
stru_6B1BA558	_SCOPETABLE_ENTRY <0FFFFFFFFh, 0, offset loc_6B1A8C1C>
					; DATA XREF: unknown_libname_16+2o
					; SEH scope table for function 6B1A8BD4
		align 8
stru_6B1BA568	_SCOPETABLE_ENTRY <0FFFFFFFFh, 0, offset loc_6B1A8C7E>
					; DATA XREF: unknown_libname_17+2o
					; SEH scope table for function 6B1A8C34
		align 8
stru_6B1BA578	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6B1A8E16, \
					; DATA XREF: DllEntryPoint+2o
				   offset loc_6B1A8E27>	; SEH scope table for function 6B1A8D54
		align 8
stru_6B1BA588	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6B1A8EE9, \
					; DATA XREF: sub_6B1A8EBC+2o
				   offset loc_6B1A8EED>	; SEH scope table for function 6B1A8EBC
		align 8
stru_6B1BA598	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6B1A8F2D, \
					; DATA XREF: sub_6B1A8F00+2o
				   offset loc_6B1A8F31>	; SEH scope table for function 6B1A8F00
		dd offset dword_6B1BA6C8
off_6B1BA5A8	dd offset sub_6B1A9010	; DATA XREF: sub_6B1A8F60+15o
					; sub_6B1A8FA0+7o ...
		align 10h
__load_config_used dd 48h		; Size
		dd 0			; Time stamp
		dw 2 dup(0)		; Version: 0.0
		dd 0			; GlobalFlagsClear
		dd 0			; GlobalFlagsSet
		dd 0			; CriticalSectionDefaultTimeout
		dd 0			; DeCommitFreeBlockThreshold
		dd 0			; DeCommitTotalFreeThreshold
		dd 0			; LockPrefixTable
		dd 0			; MaximumAllocationSize
		dd 0			; VirtualMemoryThreshold
		dd 0			; ProcessAffinityMask
		dd 0			; ProcessHeapFlags
		dw 0			; CSDVersion
		dw 0			; Reserved1
		dd 0			; EditList
		dd offset ___security_cookie ; SecurityCookie
		dd offset ___safe_se_handler_table ; SEHandlerTable
		dd 82h			; SEHandlerCount
		dd 53445352h, 0E3E85FBAh, 437CC995h, 2CD6BA0h, 1EDE52BEh
		dd 1
aCBld_areaCcCom	db 'c:\bld_area\cc\Common_Client_350\src\r3.5.0\bin\bin.ira\ccL35.pdb'
		db 0
		align 4
off_6B1BA654	dd offset off_6B1C1144	; DATA XREF: .rdata:off_6B1BA66Co
		align 10h
		dd 0FFFFFFFFh, 2 dup(0)
off_6B1BA66C	dd offset off_6B1BA654	; DATA XREF: .rdata:6B1BA680o
dword_6B1BA670	dd 3 dup(0)		; DATA XREF: .rdata:6B1BA694o
		dd 1
		dd offset off_6B1BA66C
dword_6B1BA684	dd 3 dup(0)		; DATA XREF: .rdata:6B1BA53Co
		dd offset off_6B1C1144
		dd offset dword_6B1BA670+4
off_6B1BA698	dd offset off_6B1C1118	; DATA XREF: .rdata:off_6B1BA6B0o
		dd 2 dup(0)
		dd 0FFFFFFFFh, 2 dup(0)
off_6B1BA6B0	dd offset off_6B1BA698	; DATA XREF: .rdata:6B1BA6C4o
		dd 0
		db    0			; DATA XREF: .rdata:6B1BA6D8o
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		dd 1
		dd offset off_6B1BA6B0
dword_6B1BA6C8	dd 3 dup(0)		; DATA XREF: .rdata:6B1BA5A4o
		dd offset off_6B1C1118
		dd offset unk_6B1BA6B8
		align 10h
___safe_se_handler_table dd rva	_except_handler3 ; DATA	XREF: .rdata:6B1BA5F0o
		dd rva unknown_libname_18 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_19 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_20 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_21 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_22 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_23 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_24 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_25 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_26 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_27 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_28 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_29 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_30 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_31 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_32 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_33 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_34 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_35 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_36 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_37 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_38 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_39 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_40 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_41 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_42 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_43 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_44 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_45 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_46 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_47 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_48 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_49 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_50 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_51 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_52 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_53 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_54 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_55 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_56 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_57 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_58 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_59 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_60 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_61 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_62 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_63 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_64 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_65 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_66 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_67 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_68 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_69 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_70 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_71 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_72 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_73 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_74 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_75 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_76 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_77 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_78 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_79 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_80 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_81 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_82 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_83 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_84 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_85 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_86 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_87 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_88 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_89 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_90 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_91 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_92 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_93 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_94 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_95 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_96 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_97 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_98 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_99 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_100 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_101 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_102 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_103 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_104 ; Microsoft VisualC 2-10/net	runtime
		dd rva __ehhandler$?_Getifld@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAHPADAAV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@1HABVlocale@2@@Z
		dd rva unknown_libname_105 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_106 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_107 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_108 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_109 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_110 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_111 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_112 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_113 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_114 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_115 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_116 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_117 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_118 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_119 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_120 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_121 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_122 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_123 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_124 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_125 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_126 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_127 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_128 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_129 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_130 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_131 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_132 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_133 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_134 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_135 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_136 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_137 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_138 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_139 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_140 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_141 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_142 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_143 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_144 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_145 ; Microsoft VisualC 2-10/net	runtime
		dd 0
dword_6B1BA8EC	dd 2 dup(0)		; DATA XREF: sub_6B1A8EBC+Co
					; sub_6B1A8EBC:loc_6B1A8ECFo
dword_6B1BA8F4	dd 2 dup(0)		; DATA XREF: sub_6B1A8F00+Co
					; sub_6B1A8F00:loc_6B1A8F13o ...
		dd offset stru_6B1C1034
		dd 0
		dd 0FFFFFFFFh, 0
		dd 4, 0
dword_6B1BA914	dd 1			; DATA XREF: .rdata:6B1BA928o
		dd offset dword_6B1BA8F4+4
dword_6B1BA91C	dd 3 dup(0)		; DATA XREF: sub_6B181113+9o
		dd offset dword_6B1BA914
dword_6B1BA92C	dd 0FFFFFFFFh, 2 dup(0)	; DATA XREF: .rdata:6B1BA970o
		dd offset sub_6B1A905C
dword_6B1BA93C	dd 0FFFFFFFFh, 4 dup(0)	; DATA XREF: .rdata:6B1BA964o
		dd offset sub_6B181F26
unk_6B1BA954	db    0			; DATA XREF: .rdata:6B1BA978o
		db    0
		db    0
		db    0
		dd 1, 2, 1
		dd offset dword_6B1BA93C+8
dword_6B1BA968	dd 19930520h, 3		; DATA XREF: unknown_libname_18o
		dd offset dword_6B1BA92C
		dd 1
		dd offset unk_6B1BA954
dword_6B1BA97C	dd 3 dup(0)		; DATA XREF: .rdata:6B1BA9E4o
					; .rdata:6B1BAA68o ...
		dd offset off_6B1C1054
		align 10h
		dd 0FFFFFFFFh, 0
		dd 0Ch
		dd offset ??0exception@@QAE@ABV0@@Z ; exception::exception(exception const &)
dword_6B1BA9A0	dd 0			; DATA XREF: .rdata:6B1BA9E0o
					; .rdata:6B1BAA64o
		dd offset off_6B1C106C
		dd 0
		dd 0FFFFFFFFh, 0
		dd 28h
		dd offset sub_6B18217F
unk_6B1BA9BC	db    0			; DATA XREF: .rdata:6B1BA9DCo
		db    0
		db    0
		db    0
		dd offset off_6B1C108C
		align 8
		dd 0FFFFFFFFh, 0
		dd 28h
		dd offset sub_6B1821C4
dword_6B1BA9D8	dd 3			; DATA XREF: .rdata:6B1BA9F4o
		dd offset unk_6B1BA9BC
		dd offset dword_6B1BA9A0
		dd offset dword_6B1BA97C+8
dword_6B1BA9E8	dd 0			; DATA XREF: sub_6B182017+39o
					; sub_6B1836DE+2Bo ...
		dd offset sub_6B181418
		dd 0
		dd offset dword_6B1BA9D8
stru_6B1BA9F8	_msExcInfo <-1,	offset sub_6B1A9074> ; DATA XREF: .rdata:stru_6B1BAA00o
stru_6B1BAA00	_msExcept7 <19930520h, 1, offset stru_6B1BA9F8,	0, 0, 0>
					; DATA XREF: unknown_libname_19o
stru_6B1BAA1C	_msExcInfo <-1,	offset sub_6B1A9087> ; DATA XREF: .rdata:stru_6B1BAA24o
stru_6B1BAA24	_msExcept7 <19930520h, 1, offset stru_6B1BAA1C,	0, 0, 0>
					; DATA XREF: unknown_libname_20o
		dd 0			; DATA XREF: .rdata:6B1BAA60o
		dd offset off_6B1C10AC
		dd 0
		dd 0FFFFFFFFh, 0
		dd 28h
		dd offset sub_6B18246D
dword_6B1BAA5C	dd 3			; DATA XREF: .rdata:6B1BAA78o
		dd offset dword_6B1BAA40
		dd offset dword_6B1BA9A0
		dd offset dword_6B1BA97C+8
dword_6B1BAA6C	dd 0			; DATA XREF: sub_6B1821DC+3Ao
					; sub_6B183681+2Bo ...
		dd offset sub_6B18143F
		align 8
		dd offset dword_6B1BAA5C
stru_6B1BAA7C	_msExcInfo <-1,	offset sub_6B1A909A> ; DATA XREF: .rdata:stru_6B1BAA84o
stru_6B1BAA84	_msExcept7 <19930520h, 1, offset stru_6B1BAA7C,	0, 0, 0>
					; DATA XREF: unknown_libname_21o
dword_6B1BAAA0	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BAB04o
		dd offset sub_6B1A90AD
		dd 0
		dd offset sub_6B1A90B5
		dd 1
		dd offset sub_6B1A90C0
		dd 2, 0
		dd 2, 0
dword_6B1BAAC8	dd 8			; DATA XREF: .rdata:6B1BAAF8o
		dd offset off_6B1C10CC
		dd 0FFFFFFB0h
		dd offset loc_6B182726
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB4h
		dd offset loc_6B182769
dword_6B1BAAE8	dd 2 dup(3), 4,	2	; DATA XREF: .rdata:6B1BAB0Co
		dd offset dword_6B1BAAC8
dword_6B1BAAFC	dd 19930520h, 5		; DATA XREF: unknown_libname_22o
		dd offset dword_6B1BAAA0
		dd 1
		dd offset dword_6B1BAAE8
		dd 2 dup(0)
stru_6B1BAB18	_msExcInfo <-1,	offset sub_6B1A90D2> ; DATA XREF: .rdata:stru_6B1BAB20o
stru_6B1BAB20	_msExcept7 <19930520h, 1, offset stru_6B1BAB18,	0, 0, 0>
					; DATA XREF: unknown_libname_23o
stru_6B1BAB3C	_msExcInfo <-1,	offset sub_6B1A90E4> ; DATA XREF: .rdata:stru_6B1BAB44o
stru_6B1BAB44	_msExcept7 <19930520h, 1, offset stru_6B1BAB3C,	0, 0, 0>
					; DATA XREF: unknown_libname_24o
dword_6B1BAB60	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BABDCo
		dd offset sub_6B1A90F6
		dd 0
		dd offset sub_6B1A9101
		dd 1
		dd offset sub_6B1A910C
		dd 2
		dd offset sub_6B1A9117
		dd 3
		dd offset sub_6B1A9122
		dd 4, 0
		dd 5
		dd offset sub_6B1A912D
		dd 4, 0
dword_6B1BABA0	dd 8			; DATA XREF: .rdata:6B1BABD0o
		dd offset off_6B1C10CC
		dd 0FFFFFE84h
		dd offset loc_6B182EFC
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFE80h
		dd offset loc_6B182F4E
dword_6B1BABC0	dd 5, 6, 7, 2		; DATA XREF: .rdata:6B1BABE4o
		dd offset dword_6B1BABA0
dword_6B1BABD4	dd 19930520h, 8		; DATA XREF: unknown_libname_25o
		dd offset dword_6B1BAB60
		dd 1
		dd offset dword_6B1BABC0
		align 10h
stru_6B1BABF0	_msExcInfo <-1,	offset sub_6B1A9142> ; DATA XREF: .rdata:stru_6B1BABF8o
stru_6B1BABF8	_msExcept7 <19930520h, 1, offset stru_6B1BABF0,	0, 0, 0>
					; DATA XREF: unknown_libname_26o
		dd 0			; DATA XREF: .rdata:6B1BAC34o
		dd offset off_6B1C10CC
		align 10h
		dd 0FFFFFFFFh, 0
		dd 0Ch
		dd offset sub_6B18364A
dword_6B1BAC30	dd 2			; DATA XREF: .rdata:6B1BAC48o
		dd offset dword_6B1BAC14
		dd offset dword_6B1BA97C+8
dword_6B1BAC3C	dd 0			; DATA XREF: Ordinal166+68o
					; Ordinal276+91o ...
		dd offset sub_6B1833B4
		align 8
		dd offset dword_6B1BAC30
dword_6B1BAC4C	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BACA0o
		dd offset sub_6B1A9157
		dd 4 dup(0)
dword_6B1BAC64	dd 8			; DATA XREF: .rdata:6B1BAC94o
		dd offset off_6B1C10CC
		dd 0FFFFFFACh
		dd offset sub_6B1835B2
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB0h
		dd offset sub_6B1835F5
dword_6B1BAC84	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BACA8o
		dd offset dword_6B1BAC64
dword_6B1BAC98	dd 19930520h, 3		; DATA XREF: unknown_libname_27o
		dd offset dword_6B1BAC4C
		dd 1
		dd offset dword_6B1BAC84
		dd 2 dup(0)
stru_6B1BACB4	_msExcInfo <-1,	offset sub_6B1A9169> ; DATA XREF: .rdata:stru_6B1BACBCo
stru_6B1BACBC	_msExcept7 <19930520h, 1, offset stru_6B1BACB4,	0, 0, 0>
					; DATA XREF: unknown_libname_28o
stru_6B1BACD8	_msExcInfo 4 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6B1BAD40o
stru_6B1BACF8	_msRttiDscr <0,	0, 0, offset loc_6B183E54>
					; DATA XREF: .rdata:stru_6B1BAD18o
stru_6B1BAD08	_msRttiDscr <0,	0, 0, offset loc_6B183F7D>
					; DATA XREF: .rdata:stru_6B1BAD18o
stru_6B1BAD18	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6B1BAD40o
		dd 1			; Count
		dd offset stru_6B1BACF8	; RttiBlkPtr
		dd 2, 2, 3		; _unk
		dd 1			; Count
		dd offset stru_6B1BAD08	; RttiBlkPtr
stru_6B1BAD40	_msExcept7 <19930520h, 4, offset stru_6B1BACD8,	2, \
					; DATA XREF: unknown_libname_29o
			    offset stru_6B1BAD18, 0>
stru_6B1BAD5C	_msExcInfo 4 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6B1BADC4o
stru_6B1BAD7C	_msRttiDscr <0,	0, 0, offset loc_6B184129>
					; DATA XREF: .rdata:stru_6B1BAD9Co
stru_6B1BAD8C	_msRttiDscr <0,	0, 0, offset loc_6B18421F>
					; DATA XREF: .rdata:stru_6B1BAD9Co
stru_6B1BAD9C	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6B1BADC4o
		dd 1			; Count
		dd offset stru_6B1BAD7C	; RttiBlkPtr
		dd 2, 2, 3		; _unk
		dd 1			; Count
		dd offset stru_6B1BAD8C	; RttiBlkPtr
stru_6B1BADC4	_msExcept7 <19930520h, 4, offset stru_6B1BAD5C,	2, \
					; DATA XREF: unknown_libname_30o
			    offset stru_6B1BAD9C, 0>
dword_6B1BADE0	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BAE3Co
		dd offset sub_6B1A9190
		align 10h
		dd 1
		dd offset sub_6B1A919B
		align 10h
dword_6B1BAE00	dd 8			; DATA XREF: .rdata:6B1BAE30o
		dd offset off_6B1C10CC
		dd 0FFFFFF70h
		dd offset loc_6B184399
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFF74h
		dd offset loc_6B1843EB
dword_6B1BAE20	dd 1, 2, 3, 2		; DATA XREF: .rdata:6B1BAE44o
		dd offset dword_6B1BAE00
dword_6B1BAE34	dd 19930520h, 4		; DATA XREF: unknown_libname_31o
		dd offset dword_6B1BADE0
		dd 1
		dd offset dword_6B1BAE20
		align 10h
stru_6B1BAE50	_msExcInfo <-1,	offset sub_6B1A91AD> ; DATA XREF: .rdata:stru_6B1BAE58o
stru_6B1BAE58	_msExcept7 <19930520h, 1, offset stru_6B1BAE50,	0, 0, 0>
					; DATA XREF: unknown_libname_32o
dword_6B1BAE74	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BAED0o
		dd offset sub_6B1A91BF
		align 10h
		dd offset sub_6B1A91C7
		dd 1, 0
		dd 1, 0
dword_6B1BAE94	dd 8			; DATA XREF: .rdata:6B1BAEC4o
		dd offset off_6B1C10CC
		dd 0FFFFFFB0h
		dd offset loc_6B184DE2
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB4h
		dd offset loc_6B184E25
dword_6B1BAEB4	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6B1BAED8o
		dd offset dword_6B1BAE94
dword_6B1BAEC8	dd 19930520h, 4		; DATA XREF: unknown_libname_33o
		dd offset dword_6B1BAE74
		dd 1
		dd offset dword_6B1BAEB4
		dd 2 dup(0)
dword_6B1BAEE4	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BAF40o
		dd offset sub_6B1A91D9
		align 10h
		dd offset sub_6B1A91E1
		dd 1, 0
		dd 1, 0
dword_6B1BAF04	dd 8			; DATA XREF: .rdata:6B1BAF34o
		dd offset off_6B1C10CC
		dd 0FFFFFF9Ch
		dd offset loc_6B184F75
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFA0h
		dd offset loc_6B184FB8
dword_6B1BAF24	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6B1BAF48o
		dd offset dword_6B1BAF04
dword_6B1BAF38	dd 19930520h, 4		; DATA XREF: unknown_libname_34o
		dd offset dword_6B1BAEE4
		dd 1
		dd offset dword_6B1BAF24
		dd 2 dup(0)
dword_6B1BAF54	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BAFB0o
		dd offset sub_6B1A91F3
		align 10h
		dd offset sub_6B1A91FB
		dd 1, 0
		dd 1, 0
dword_6B1BAF74	dd 8			; DATA XREF: .rdata:6B1BAFA4o
		dd offset off_6B1C10CC
		dd 0FFFFFFA4h
		dd offset loc_6B185591
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFA8h
		dd offset loc_6B1855D4
dword_6B1BAF94	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6B1BAFB8o
		dd offset dword_6B1BAF74
dword_6B1BAFA8	dd 19930520h, 4		; DATA XREF: unknown_libname_35o
		dd offset dword_6B1BAF54
		dd 1
		dd offset dword_6B1BAF94
		dd 2 dup(0)
dword_6B1BAFC4	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BB018o
		dd offset sub_6B1A920D
		dd 4 dup(0)
dword_6B1BAFDC	dd 8			; DATA XREF: .rdata:6B1BB00Co
		dd offset off_6B1C10CC
		dd 0FFFFFFACh
		dd offset sub_6B185755
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB0h
		dd offset sub_6B185798
dword_6B1BAFFC	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BB020o
		dd offset dword_6B1BAFDC
dword_6B1BB010	dd 19930520h, 3		; DATA XREF: unknown_libname_36o
		dd offset dword_6B1BAFC4
		dd 1
		dd offset dword_6B1BAFFC
		dd 2 dup(0)
dword_6B1BB02C	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BB090o
		dd offset sub_6B1A921F
		align 8
		dd offset sub_6B1A9227
		dd 1
		dd offset sub_6B1A922F
		dd 2, 0
		dd 2, 0
dword_6B1BB054	dd 8			; DATA XREF: .rdata:6B1BB084o
		dd offset off_6B1C10CC
		dd 0FFFFFFD0h
		dd offset loc_6B185891
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFA8h
		dd offset loc_6B1858D4
dword_6B1BB074	dd 2 dup(3), 4,	2	; DATA XREF: .rdata:6B1BB098o
		dd offset dword_6B1BB054
dword_6B1BB088	dd 19930520h, 5		; DATA XREF: unknown_libname_37o
		dd offset dword_6B1BB02C
		dd 1
		dd offset dword_6B1BB074
		dd 2 dup(0)
dword_6B1BB0A4	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BB0F8o
		dd offset sub_6B1A9241
		dd 4 dup(0)
dword_6B1BB0BC	dd 8			; DATA XREF: .rdata:6B1BB0ECo
		dd offset off_6B1C10CC
		dd 0FFFFFFB0h
		dd offset loc_6B185D14
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB4h
		dd offset loc_6B185D57
dword_6B1BB0DC	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BB100o
		dd offset dword_6B1BB0BC
dword_6B1BB0F0	dd 19930520h, 3		; DATA XREF: unknown_libname_38o
		dd offset dword_6B1BB0A4
		dd 1
		dd offset dword_6B1BB0DC
		dd 2 dup(0)
dword_6B1BB10C	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BB160o
		dd offset sub_6B1A9253
		dd 4 dup(0)
dword_6B1BB124	dd 8			; DATA XREF: .rdata:6B1BB154o
		dd offset off_6B1C10CC
		dd 0FFFFFFB0h
		dd offset loc_6B185EE2
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB4h
		dd offset loc_6B185F25
dword_6B1BB144	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BB168o
		dd offset dword_6B1BB124
dword_6B1BB158	dd 19930520h, 3		; DATA XREF: unknown_libname_39o
		dd offset dword_6B1BB10C
		dd 1
		dd offset dword_6B1BB144
		dd 2 dup(0)
dword_6B1BB174	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BB1C8o
		dd offset sub_6B1A9265
		dd 4 dup(0)
dword_6B1BB18C	dd 8			; DATA XREF: .rdata:6B1BB1BCo
		dd offset off_6B1C10CC
		dd 0FFFFFFB0h
		dd offset loc_6B1860A7
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB4h
		dd offset loc_6B1860EA
dword_6B1BB1AC	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BB1D0o
		dd offset dword_6B1BB18C
dword_6B1BB1C0	dd 19930520h, 3		; DATA XREF: unknown_libname_40o
		dd offset dword_6B1BB174
		dd 1
		dd offset dword_6B1BB1AC
		dd 2 dup(0)
stru_6B1BB1DC	_msExcInfo <-1,	offset sub_6B1A9277> ; DATA XREF: .rdata:stru_6B1BB1E4o
stru_6B1BB1E4	_msExcept7 <19930520h, 1, offset stru_6B1BB1DC,	0, 0, 0>
					; DATA XREF: unknown_libname_41o
stru_6B1BB200	_msExcInfo <-1,	offset sub_6B1A928A> ; DATA XREF: .rdata:stru_6B1BB208o
stru_6B1BB208	_msExcept7 <19930520h, 1, offset stru_6B1BB200,	0, 0, 0>
					; DATA XREF: unknown_libname_42o
stru_6B1BB224	_msExcInfo 2 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6B1BB258o
stru_6B1BB234	_msRttiDscr <0,	0, 0, offset sub_6B186ABE>
					; DATA XREF: .rdata:stru_6B1BB244o
stru_6B1BB244	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6B1BB258o
		dd 1			; Count
		dd offset stru_6B1BB234	; RttiBlkPtr
stru_6B1BB258	_msExcept7 <19930520h, 2, offset stru_6B1BB224,	1, \
					; DATA XREF: unknown_libname_43o
			    offset stru_6B1BB244, 0>
stru_6B1BB274	_msExcInfo <-1,	offset sub_6B1A92A7> ; DATA XREF: .rdata:stru_6B1BB284o
		_msExcInfo <0, offset sub_6B1A92AF>
stru_6B1BB284	_msExcept7 <19930520h, 2, offset stru_6B1BB274,	0, 0, 0>
					; DATA XREF: unknown_libname_44o
dword_6B1BB2A0	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BB2F4o
		dd offset sub_6B1A92C4
		dd 4 dup(0)
dword_6B1BB2B8	dd 8			; DATA XREF: .rdata:6B1BB2E8o
		dd offset off_6B1C10CC
		dd 0FFFFFFB0h
		dd offset loc_6B186F66
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB4h
		dd offset loc_6B186FA9
dword_6B1BB2D8	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BB2FCo
		dd offset dword_6B1BB2B8
dword_6B1BB2EC	dd 19930520h, 3		; DATA XREF: unknown_libname_45o
		dd offset dword_6B1BB2A0
		dd 1
		dd offset dword_6B1BB2D8
		dd 2 dup(0)
dword_6B1BB308	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BB364o
		dd offset sub_6B1A92D6
		dd 0
		dd offset sub_6B1A92DE
		dd 1, 0
		dd 1, 0
dword_6B1BB328	dd 8			; DATA XREF: .rdata:6B1BB358o
		dd offset off_6B1C10CC
		dd 0FFFFFFB0h
		dd offset loc_6B1870F9
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB4h
		dd offset loc_6B18713C
dword_6B1BB348	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6B1BB36Co
		dd offset dword_6B1BB328
dword_6B1BB35C	dd 19930520h, 4		; DATA XREF: unknown_libname_46o
		dd offset dword_6B1BB308
		dd 1
		dd offset dword_6B1BB348
		dd 2 dup(0)
dword_6B1BB378	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BB3D4o
		dd offset sub_6B1A92F0
		dd 0
		dd offset sub_6B1A92F8
		dd 1, 0
		dd 1, 0
dword_6B1BB398	dd 8			; DATA XREF: .rdata:6B1BB3C8o
		dd offset off_6B1C10CC
		dd 0FFFFFFA4h
		dd offset loc_6B187651
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFA8h
		dd offset loc_6B187694
dword_6B1BB3B8	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6B1BB3DCo
		dd offset dword_6B1BB398
dword_6B1BB3CC	dd 19930520h, 4		; DATA XREF: unknown_libname_47o
		dd offset dword_6B1BB378
		dd 1
		dd offset dword_6B1BB3B8
		dd 2 dup(0)
dword_6B1BB3E8	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BB43Co
		dd offset sub_6B1A930A
		dd 4 dup(0)
dword_6B1BB400	dd 8			; DATA XREF: .rdata:6B1BB430o
		dd offset off_6B1C10CC
		dd 0FFFFFFACh
		dd offset sub_6B187950
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB0h
		dd offset sub_6B187993
dword_6B1BB420	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BB444o
		dd offset dword_6B1BB400
dword_6B1BB434	dd 19930520h, 3		; DATA XREF: unknown_libname_48o
		dd offset dword_6B1BB3E8
		dd 1
		dd offset dword_6B1BB420
		align 10h
dword_6B1BB450	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BB4ACo
		dd offset sub_6B1A931C
		dd 0
		dd offset sub_6B1A9324
		dd 1, 0
		dd 1, 0
dword_6B1BB470	dd 8			; DATA XREF: .rdata:6B1BB4A0o
		dd offset off_6B1C10CC
		dd 0FFFFFFA4h
		dd offset loc_6B1880A3
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFA8h
		dd offset loc_6B1880E6
dword_6B1BB490	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6B1BB4B4o
		dd offset dword_6B1BB470
dword_6B1BB4A4	dd 19930520h, 4		; DATA XREF: unknown_libname_49o
		dd offset dword_6B1BB450
		dd 1
		dd offset dword_6B1BB490
		align 10h
dword_6B1BB4C0	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BB514o
		dd offset sub_6B1A9336
		dd 4 dup(0)
dword_6B1BB4D8	dd 8			; DATA XREF: .rdata:6B1BB508o
		dd offset off_6B1C10CC
		dd 0FFFFFFACh
		dd offset sub_6B188216
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB0h
		dd offset sub_6B188259
dword_6B1BB4F8	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BB51Co
		dd offset dword_6B1BB4D8
dword_6B1BB50C	dd 19930520h, 3		; DATA XREF: unknown_libname_50o
		dd offset dword_6B1BB4C0
		dd 1
		dd offset dword_6B1BB4F8
		dd 2 dup(0)
dword_6B1BB528	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BB57Co
		dd offset sub_6B1A9348
		dd 4 dup(0)
dword_6B1BB540	dd 8			; DATA XREF: .rdata:6B1BB570o
		dd offset off_6B1C10CC
		dd 0FFFFFFACh
		dd offset sub_6B188804
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB0h
		dd offset sub_6B188847
dword_6B1BB560	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BB584o
		dd offset dword_6B1BB540
dword_6B1BB574	dd 19930520h, 3		; DATA XREF: unknown_libname_51o
		dd offset dword_6B1BB528
		dd 1
		dd offset dword_6B1BB560
		align 10h
dword_6B1BB590	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BB5ECo
		dd offset sub_6B1A935A
		dd 0
		dd offset sub_6B1A9362
		dd 1, 0
		dd 1, 0
dword_6B1BB5B0	dd 8			; DATA XREF: .rdata:6B1BB5E0o
		dd offset off_6B1C10CC
		dd 0FFFFFFA4h
		dd offset loc_6B189ED9
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFA8h
		dd offset loc_6B189F1C
dword_6B1BB5D0	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6B1BB5F4o
		dd offset dword_6B1BB5B0
dword_6B1BB5E4	dd 19930520h, 4		; DATA XREF: unknown_libname_52o
		dd offset dword_6B1BB590
		dd 1
		dd offset dword_6B1BB5D0
		align 10h
dword_6B1BB600	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BB654o
		dd offset sub_6B1A9374
		dd 4 dup(0)
dword_6B1BB618	dd 8			; DATA XREF: .rdata:6B1BB648o
		dd offset off_6B1C10CC
		dd 0FFFFFFACh
		dd offset sub_6B18A04C
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB0h
		dd offset sub_6B18A08F
dword_6B1BB638	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BB65Co
		dd offset dword_6B1BB618
dword_6B1BB64C	dd 19930520h, 3		; DATA XREF: unknown_libname_53o
		dd offset dword_6B1BB600
		dd 1
		dd offset dword_6B1BB638
		dd 2 dup(0)
dword_6B1BB668	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BB6BCo
		dd offset sub_6B1A9386
		dd 4 dup(0)
dword_6B1BB680	dd 8			; DATA XREF: .rdata:6B1BB6B0o
		dd offset off_6B1C10CC
		dd 0FFFFFFACh
		dd offset sub_6B18A18E
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB0h
		dd offset sub_6B18A1D1
dword_6B1BB6A0	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BB6C4o
		dd offset dword_6B1BB680
dword_6B1BB6B4	dd 19930520h, 3		; DATA XREF: unknown_libname_54o
		dd offset dword_6B1BB668
		dd 1
		dd offset dword_6B1BB6A0
		align 10h
dword_6B1BB6D0	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BB724o
		dd offset sub_6B1A9398
		dd 4 dup(0)
dword_6B1BB6E8	dd 8			; DATA XREF: .rdata:6B1BB718o
		dd offset off_6B1C10CC
		dd 0FFFFFFACh
		dd offset sub_6B18A2D0
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB0h
		dd offset sub_6B18A313
dword_6B1BB708	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BB72Co
		dd offset dword_6B1BB6E8
dword_6B1BB71C	dd 19930520h, 3		; DATA XREF: unknown_libname_55o
		dd offset dword_6B1BB6D0
		dd 1
		dd offset dword_6B1BB708
		dd 2 dup(0)
dword_6B1BB738	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BB78Co
		dd offset sub_6B1A93AA
		dd 4 dup(0)
dword_6B1BB750	dd 8			; DATA XREF: .rdata:6B1BB780o
		dd offset off_6B1C10CC
		dd 0FFFFFFB4h
		dd offset sub_6B18C890
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB8h
		dd offset sub_6B18C8D3
dword_6B1BB770	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BB794o
		dd offset dword_6B1BB750
dword_6B1BB784	dd 19930520h, 3		; DATA XREF: unknown_libname_56o
		dd offset dword_6B1BB738
		dd 1
		dd offset dword_6B1BB770
		align 10h
dword_6B1BB7A0	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BB7F4o
		dd offset sub_6B1A93BC
		dd 4 dup(0)
dword_6B1BB7B8	dd 8			; DATA XREF: .rdata:6B1BB7E8o
		dd offset off_6B1C10CC
		dd 0FFFFFFB4h
		dd offset sub_6B18C9E7
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB8h
		dd offset sub_6B18CA2A
dword_6B1BB7D8	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BB7FCo
		dd offset dword_6B1BB7B8
dword_6B1BB7EC	dd 19930520h, 3		; DATA XREF: unknown_libname_57o
		dd offset dword_6B1BB7A0
		dd 1
		dd offset dword_6B1BB7D8
dword_6B1BB800	dd 3 dup(0)		; DATA XREF: .rdata:6B1BB828o
		dd offset off_6B1C10E8
		dd 0
		dd 0FFFFFFFFh, 0
		dd 4
		dd offset Ordinal608
dword_6B1BB824	dd 1			; DATA XREF: .rdata:6B1BB838o
		dd offset dword_6B1BB800+8
dword_6B1BB82C	dd 0			; DATA XREF: Ordinal660+12o
					; Ordinal662+12o ...
		dd offset Ordinal609
		align 8
		dd offset dword_6B1BB824
dword_6B1BB83C	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BB890o
		dd offset sub_6B1A93CE
		dd 4 dup(0)
dword_6B1BB854	dd 8			; DATA XREF: .rdata:6B1BB884o
		dd offset off_6B1C10CC
		dd 0FFFFFFB0h
		dd offset sub_6B18E50B
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFACh
		dd offset sub_6B18E54E
dword_6B1BB874	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BB898o
		dd offset dword_6B1BB854
dword_6B1BB888	dd 19930520h, 3		; DATA XREF: unknown_libname_58o
		dd offset dword_6B1BB83C
		dd 1
		dd offset dword_6B1BB874
		dd 2 dup(0)
dword_6B1BB8A4	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BB8F8o
		dd offset sub_6B1A93E0
		dd 4 dup(0)
dword_6B1BB8BC	dd 8			; DATA XREF: .rdata:6B1BB8ECo
		dd offset off_6B1C10CC
		dd 0FFFFFFB0h
		dd offset sub_6B18E670
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFACh
		dd offset sub_6B18E6B3
dword_6B1BB8DC	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BB900o
		dd offset dword_6B1BB8BC
dword_6B1BB8F0	dd 19930520h, 3		; DATA XREF: unknown_libname_59o
		dd offset dword_6B1BB8A4
		dd 1
		dd offset dword_6B1BB8DC
		dd 2 dup(0)
dword_6B1BB90C	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BB978o
		dd offset sub_6B1A93F2
		dd 2 dup(0)
		dd 1
		dd offset sub_6B1A93FA
		dd 2
		dd offset sub_6B1A9402
		dd 3
		dd offset sub_6B1A940A
		dd 2 dup(0)
dword_6B1BB93C	dd 8			; DATA XREF: .rdata:6B1BB96Co
		dd offset off_6B1C10CC
		dd 0FFFFFF9Ch
		dd offset sub_6B18F33A
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFF98h
		dd offset sub_6B18F37D
dword_6B1BB95C	dd 1, 4, 5, 2		; DATA XREF: .rdata:6B1BB980o
		dd offset dword_6B1BB93C
dword_6B1BB970	dd 19930520h, 6		; DATA XREF: unknown_libname_60o
		dd offset dword_6B1BB90C
		dd 1
		dd offset dword_6B1BB95C
		dd 2 dup(0)
dword_6B1BB98C	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BB9E8o
		dd offset sub_6B1A941C
		align 8
		dd offset sub_6B1A9424
		dd 1, 0
		dd 1, 0
dword_6B1BB9AC	dd 8			; DATA XREF: .rdata:6B1BB9DCo
		dd offset off_6B1C10CC
		dd 0FFFFFFB0h
		dd offset loc_6B18F589
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB4h
		dd offset loc_6B18F5CC
dword_6B1BB9CC	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6B1BB9F0o
		dd offset dword_6B1BB9AC
dword_6B1BB9E0	dd 19930520h, 4		; DATA XREF: unknown_libname_61o
		dd offset dword_6B1BB98C
		dd 1
		dd offset dword_6B1BB9CC
		dd 2 dup(0)
dword_6B1BB9FC	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BBA58o
		dd offset sub_6B1A9436
		align 8
		dd offset sub_6B1A943E
		dd 1, 0
		dd 1, 0
dword_6B1BBA1C	dd 8			; DATA XREF: .rdata:6B1BBA4Co
		dd offset off_6B1C10CC
		dd 0FFFFFFB0h
		dd offset sub_6B18F7CF
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFACh
		dd offset sub_6B18F812
dword_6B1BBA3C	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6B1BBA60o
		dd offset dword_6B1BBA1C
dword_6B1BBA50	dd 19930520h, 4		; DATA XREF: unknown_libname_62o
		dd offset dword_6B1BB9FC
		dd 1
		dd offset dword_6B1BBA3C
		dd 2 dup(0)
stru_6B1BBA6C	_msExcInfo <-1,	offset sub_6B1A9450> ; DATA XREF: .rdata:stru_6B1BBA74o
stru_6B1BBA74	_msExcept7 <19930520h, 1, offset stru_6B1BBA6C,	0, 0, 0>
					; DATA XREF: unknown_libname_63o
stru_6B1BBA90	_msExcInfo <-1,	offset sub_6B1A9463> ; DATA XREF: .rdata:stru_6B1BBA98o
stru_6B1BBA98	_msExcept7 <19930520h, 1, offset stru_6B1BBA90,	0, 0, 0>
					; DATA XREF: unknown_libname_64o
stru_6B1BBAB4	_msExcInfo <-1,	offset sub_6B1A9478> ; DATA XREF: .rdata:stru_6B1BBABCo
stru_6B1BBABC	_msExcept7 <19930520h, 1, offset stru_6B1BBAB4,	0, 0, 0>
					; DATA XREF: unknown_libname_65o
stru_6B1BBAD8	_msExcInfo 2 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6B1BBB0Co
stru_6B1BBAE8	_msRttiDscr <0,	0, 0, offset loc_6B190B39>
					; DATA XREF: .rdata:stru_6B1BBAF8o
stru_6B1BBAF8	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6B1BBB0Co
		dd 1			; Count
		dd offset stru_6B1BBAE8	; RttiBlkPtr
stru_6B1BBB0C	_msExcept7 <19930520h, 2, offset stru_6B1BBAD8,	1, \
					; DATA XREF: unknown_libname_66o
			    offset stru_6B1BBAF8, 0>
stru_6B1BBB28	_msExcInfo 2 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6B1BBB5Co
stru_6B1BBB38	_msRttiDscr <0,	0, 0, offset loc_6B190CBB>
					; DATA XREF: .rdata:stru_6B1BBB48o
stru_6B1BBB48	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6B1BBB5Co
		dd 1			; Count
		dd offset stru_6B1BBB38	; RttiBlkPtr
stru_6B1BBB5C	_msExcept7 <19930520h, 2, offset stru_6B1BBB28,	1, \
					; DATA XREF: unknown_libname_67o
			    offset stru_6B1BBB48, 0>
stru_6B1BBB78	_msExcInfo 2 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6B1BBBACo
stru_6B1BBB88	_msRttiDscr <0,	0, 0, offset loc_6B190D58>
					; DATA XREF: .rdata:stru_6B1BBB98o
stru_6B1BBB98	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6B1BBBACo
		dd 1			; Count
		dd offset stru_6B1BBB88	; RttiBlkPtr
stru_6B1BBBAC	_msExcept7 <19930520h, 2, offset stru_6B1BBB78,	1, \
					; DATA XREF: unknown_libname_68o
			    offset stru_6B1BBB98, 0>
stru_6B1BBBC8	_msExcInfo 2 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6B1BBBFCo
stru_6B1BBBD8	_msRttiDscr <0,	0, 0, offset loc_6B190E3E>
					; DATA XREF: .rdata:stru_6B1BBBE8o
stru_6B1BBBE8	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6B1BBBFCo
		dd 1			; Count
		dd offset stru_6B1BBBD8	; RttiBlkPtr
stru_6B1BBBFC	_msExcept7 <19930520h, 2, offset stru_6B1BBBC8,	1, \
					; DATA XREF: unknown_libname_69o
			    offset stru_6B1BBBE8, 0>
dword_6B1BBC18	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BBC90o
		dd offset sub_6B1A94B8
dword_6B1BBC20	dd 0Bh dup(0)
		dd offset loc_6B191103
dword_6B1BBC50	dd 3 dup(0)		; DATA XREF: .rdata:6B1BBC84o
		dd offset loc_6B191191
dword_6B1BBC60	dd 2 dup(1), 2,	1	; DATA XREF: .rdata:6B1BBC98o
		dd offset dword_6B1BBC20+20h
		dd 2 dup(3), 4,	1
		dd offset dword_6B1BBC50
dword_6B1BBC88	dd 19930520h, 5		; DATA XREF: unknown_libname_70o
		dd offset dword_6B1BBC18
		dd 2
		dd offset dword_6B1BBC60
		dd 2 dup(0)
dword_6B1BBCA4	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BBD1Co
		dd offset sub_6B1A94CA
dword_6B1BBCAC	dd 0Bh dup(0)
		dd offset loc_6B19132E
dword_6B1BBCDC	dd 3 dup(0)		; DATA XREF: .rdata:6B1BBD10o
		dd offset loc_6B1913B2
dword_6B1BBCEC	dd 2 dup(1), 2,	1	; DATA XREF: .rdata:6B1BBD24o
		dd offset dword_6B1BBCAC+20h
		dd 2 dup(3), 4,	1
		dd offset dword_6B1BBCDC
dword_6B1BBD14	dd 19930520h, 5		; DATA XREF: unknown_libname_71o
		dd offset dword_6B1BBCA4
		dd 2
		dd offset dword_6B1BBCEC
		align 10h
dword_6B1BBD30	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BBD94o
		dd offset sub_6B1A94DC
		align 10h
		dd 1
		dd offset sub_6B1A94E4
		dd 2
		dd offset sub_6B1A94EC
		dd 2 dup(0)
dword_6B1BBD58	dd 8			; DATA XREF: .rdata:6B1BBD88o
		dd offset off_6B1C10CC
		dd 0FFFFFFB4h
		dd offset sub_6B1916D8
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB8h
		dd offset sub_6B19171B
dword_6B1BBD78	dd 1, 3, 4, 2		; DATA XREF: .rdata:6B1BBD9Co
		dd offset dword_6B1BBD58
dword_6B1BBD8C	dd 19930520h, 5		; DATA XREF: unknown_libname_72o
		dd offset dword_6B1BBD30
		dd 1
		dd offset dword_6B1BBD78
		dd 2 dup(0)
dword_6B1BBDA8	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BBE1Co
		dd offset sub_6B1A94FE
		dd 2 dup(0)
		dd 1
		dd offset sub_6B1A9506
		dd 2
		dd offset sub_6B1A950E
		dd 3
		dd offset sub_6B1A9516
		dd 3
		dd offset sub_6B1A951E
		align 10h
dword_6B1BBDE0	dd 8			; DATA XREF: .rdata:6B1BBE10o
		dd offset off_6B1C10CC
		dd 0FFFFFFA4h
		dd offset sub_6B1918F4
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFA8h
		dd offset sub_6B191937
dword_6B1BBE00	dd 1, 5, 6, 2		; DATA XREF: .rdata:6B1BBE24o
		dd offset dword_6B1BBDE0
dword_6B1BBE14	dd 19930520h, 7		; DATA XREF: unknown_libname_73o
		dd offset dword_6B1BBDA8
		dd 1
		dd offset dword_6B1BBE00
		align 10h
dword_6B1BBE30	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BBE84o
		dd offset sub_6B1A9530
		dd 4 dup(0)
dword_6B1BBE48	dd 8			; DATA XREF: .rdata:6B1BBE78o
		dd offset off_6B1C10CC
		dd 0FFFFFFB0h
		dd offset loc_6B191A0B
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB4h
		dd offset loc_6B191A4E
dword_6B1BBE68	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BBE8Co
		dd offset dword_6B1BBE48
dword_6B1BBE7C	dd 19930520h, 3		; DATA XREF: unknown_libname_74o
		dd offset dword_6B1BBE30
		dd 1
		dd offset dword_6B1BBE68
		dd 2 dup(0)
dword_6B1BBE98	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BBEECo
		dd offset sub_6B1A9542
		dd 4 dup(0)
dword_6B1BBEB0	dd 8			; DATA XREF: .rdata:6B1BBEE0o
		dd offset off_6B1C10CC
		dd 0FFFFFFB0h
		dd offset loc_6B192670
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB4h
		dd offset loc_6B1926B3
dword_6B1BBED0	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BBEF4o
		dd offset dword_6B1BBEB0
dword_6B1BBEE4	dd 19930520h, 3		; DATA XREF: unknown_libname_75o
		dd offset dword_6B1BBE98
		dd 1
		dd offset dword_6B1BBED0
		align 10h
dword_6B1BBF00	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BBF4Co
		dd offset sub_6B1A9554
		dd 0
		dd offset sub_6B1A955C
		dd 1, 0
		dd 1, 0
dword_6B1BBF20	dd 8			; DATA XREF: .rdata:6B1BBF40o
		dd offset stru_6B1C1034
		dd 0
		dd offset loc_6B193114
dword_6B1BBF30	dd 2 dup(2), 3,	1	; DATA XREF: .rdata:6B1BBF54o
		dd offset dword_6B1BBF20
dword_6B1BBF44	dd 19930520h, 4		; DATA XREF: unknown_libname_76o
		dd offset dword_6B1BBF00
		dd 1
		dd offset dword_6B1BBF30
		align 10h
dword_6B1BBF60	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BBFB4o
		dd offset sub_6B1A956E
		dd 4 dup(0)
dword_6B1BBF78	dd 8			; DATA XREF: .rdata:6B1BBFA8o
		dd offset off_6B1C10CC
		dd 0FFFFFFB4h
		dd offset sub_6B1931D9
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB8h
		dd offset sub_6B19321C
dword_6B1BBF98	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BBFBCo
		dd offset dword_6B1BBF78
dword_6B1BBFAC	dd 19930520h, 3		; DATA XREF: unknown_libname_77o
		dd offset dword_6B1BBF60
		dd 1
		dd offset dword_6B1BBF98
		dd 2 dup(0)
dword_6B1BBFC8	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BC034o
		dd offset sub_6B1A9580
		dd 0
		dd offset sub_6B1A9588
		dd 1
		dd offset sub_6B1A9590
		dd 2, 0
		dd 3
		dd offset sub_6B1A9598
		dd 2, 0
dword_6B1BBFF8	dd 8			; DATA XREF: .rdata:6B1BC028o
		dd offset off_6B1C10CC
		dd 0FFFFFF9Ch
		dd offset loc_6B194084
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFACh
		dd offset loc_6B1940C7
dword_6B1BC018	dd 3, 4, 5, 2		; DATA XREF: .rdata:6B1BC03Co
		dd offset dword_6B1BBFF8
dword_6B1BC02C	dd 19930520h, 6		; DATA XREF: unknown_libname_78o
		dd offset dword_6B1BBFC8
		dd 1
		dd offset dword_6B1BC018
		dd 2 dup(0)
dword_6B1BC048	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BC0A4o
		dd offset sub_6B1A95AD
		dd 0
		dd offset sub_6B1A95B5
		dd 1, 0
		dd 1, 0
dword_6B1BC068	dd 8			; DATA XREF: .rdata:6B1BC098o
		dd offset off_6B1C10CC
		dd 0FFFFFFB4h
		dd offset sub_6B194239
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB8h
		dd offset sub_6B19427C
dword_6B1BC088	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6B1BC0ACo
		dd offset dword_6B1BC068
dword_6B1BC09C	dd 19930520h, 4		; DATA XREF: unknown_libname_79o
		dd offset dword_6B1BC048
		dd 1
		dd offset dword_6B1BC088
		dd 2 dup(0)
dword_6B1BC0B8	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BC0FCo
		dd offset sub_6B1A95C7
		dd 4 dup(0)
dword_6B1BC0D0	dd 8			; DATA XREF: .rdata:6B1BC0F0o
		dd offset stru_6B1C1034
		dd 0
		dd offset loc_6B196A71
dword_6B1BC0E0	dd 2 dup(1), 2,	1	; DATA XREF: .rdata:6B1BC104o
		dd offset dword_6B1BC0D0
dword_6B1BC0F4	dd 19930520h, 3		; DATA XREF: unknown_libname_80o
		dd offset dword_6B1BC0B8
		dd 1
		dd offset dword_6B1BC0E0
		align 10h
dword_6B1BC110	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BC154o
		dd offset sub_6B1A95D9
		dd 4 dup(0)
dword_6B1BC128	dd 8			; DATA XREF: .rdata:6B1BC148o
		dd offset stru_6B1C1034
		dd 0
		dd offset loc_6B196C5C
dword_6B1BC138	dd 2 dup(1), 2,	1	; DATA XREF: .rdata:6B1BC15Co
		dd offset dword_6B1BC128
dword_6B1BC14C	dd 19930520h, 3		; DATA XREF: unknown_libname_81o
		dd offset dword_6B1BC110
		dd 1
		dd offset dword_6B1BC138
		dd 2 dup(0)
stru_6B1BC168	_msExcInfo 2 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6B1BC19Co
stru_6B1BC178	_msRttiDscr <8,	offset stru_6B1C1034, 0, offset	loc_6B196D7A>
					; DATA XREF: .rdata:stru_6B1BC188o
stru_6B1BC188	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6B1BC19Co
		dd 1			; Count
		dd offset stru_6B1BC178	; RttiBlkPtr
stru_6B1BC19C	_msExcept7 <19930520h, 2, offset stru_6B1BC168,	1, \
					; DATA XREF: unknown_libname_82o
			    offset stru_6B1BC188, 0>
stru_6B1BC1B8	_msExcInfo 2 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6B1BC1ECo
stru_6B1BC1C8	_msRttiDscr <8,	offset stru_6B1C1034, 0, offset	loc_6B196F2A>
					; DATA XREF: .rdata:stru_6B1BC1D8o
stru_6B1BC1D8	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6B1BC1ECo
		dd 1			; Count
		dd offset stru_6B1BC1C8	; RttiBlkPtr
stru_6B1BC1EC	_msExcept7 <19930520h, 2, offset stru_6B1BC1B8,	1, \
					; DATA XREF: unknown_libname_83o
			    offset stru_6B1BC1D8, 0>
stru_6B1BC208	_msExcInfo 2 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6B1BC23Co
stru_6B1BC218	_msRttiDscr <8,	offset stru_6B1C1034, 0, offset	loc_6B196F87>
					; DATA XREF: .rdata:stru_6B1BC228o
stru_6B1BC228	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6B1BC23Co
		dd 1			; Count
		dd offset stru_6B1BC218	; RttiBlkPtr
stru_6B1BC23C	_msExcept7 <19930520h, 2, offset stru_6B1BC208,	1, \
					; DATA XREF: unknown_libname_84o
			    offset stru_6B1BC228, 0>
dword_6B1BC258	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BC2B4o
		dd offset sub_6B1A9609
		dd 0
		dd offset sub_6B1A9611
		dd 1, 0
		dd 1, 0
dword_6B1BC278	dd 8			; DATA XREF: .rdata:6B1BC2A8o
		dd offset off_6B1C10CC
		dd 0FFFFFFB0h
		dd offset loc_6B197157
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB4h
		dd offset loc_6B19719A
dword_6B1BC298	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6B1BC2BCo
		dd offset dword_6B1BC278
dword_6B1BC2AC	dd 19930520h, 4		; DATA XREF: unknown_libname_85o
		dd offset dword_6B1BC258
		dd 1
		dd offset dword_6B1BC298
		dd 2 dup(0)
dword_6B1BC2C8	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BC334o
		dd offset sub_6B1A9623
		dd 0
		dd offset sub_6B1A962B
		dd 1
		dd offset sub_6B1A9636
		dd 2
		dd offset sub_6B1A963E
		dd 3, 0
		dd 3, 0
dword_6B1BC2F8	dd 8			; DATA XREF: .rdata:6B1BC328o
		dd offset off_6B1C10CC
		dd 0FFFFFFA0h
		dd offset loc_6B197A79
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFA4h
		dd offset loc_6B197ABC
dword_6B1BC318	dd 2 dup(4), 5,	2	; DATA XREF: .rdata:6B1BC33Co
		dd offset dword_6B1BC2F8
dword_6B1BC32C	dd 19930520h, 6		; DATA XREF: unknown_libname_86o
		dd offset dword_6B1BC2C8
		dd 1
		dd offset dword_6B1BC318
		dd 2 dup(0)
stru_6B1BC348	_msExcInfo 2 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6B1BC37Co
stru_6B1BC358	_msRttiDscr <8,	offset stru_6B1C1034, 0, offset	sub_6B197DE9>
					; DATA XREF: .rdata:stru_6B1BC368o
stru_6B1BC368	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6B1BC37Co
		dd 1			; Count
		dd offset stru_6B1BC358	; RttiBlkPtr
stru_6B1BC37C	_msExcept7 <19930520h, 2, offset stru_6B1BC348,	1, \
					; DATA XREF: unknown_libname_87o
			    offset stru_6B1BC368, 0>
stru_6B1BC398	_msExcInfo 2 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6B1BC3CCo
stru_6B1BC3A8	_msRttiDscr <8,	offset stru_6B1C1034, 0, offset	loc_6B197E2F>
					; DATA XREF: .rdata:stru_6B1BC3B8o
stru_6B1BC3B8	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6B1BC3CCo
		dd 1			; Count
		dd offset stru_6B1BC3A8	; RttiBlkPtr
stru_6B1BC3CC	_msExcept7 <19930520h, 2, offset stru_6B1BC398,	1, \
					; DATA XREF: unknown_libname_88o
			    offset stru_6B1BC3B8, 0>
stru_6B1BC3E8	_msExcInfo 2 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6B1BC41Co
stru_6B1BC3F8	_msRttiDscr <8,	offset stru_6B1C1034, 0, offset	sub_6B197E7B>
					; DATA XREF: .rdata:stru_6B1BC408o
stru_6B1BC408	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6B1BC41Co
		dd 1			; Count
		dd offset stru_6B1BC3F8	; RttiBlkPtr
stru_6B1BC41C	_msExcept7 <19930520h, 2, offset stru_6B1BC3E8,	1, \
					; DATA XREF: unknown_libname_89o
			    offset stru_6B1BC408, 0>
stru_6B1BC438	_msExcInfo 2 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6B1BC46Co
stru_6B1BC448	_msRttiDscr <8,	offset stru_6B1C1034, 0, offset	sub_6B197EB2>
					; DATA XREF: .rdata:stru_6B1BC458o
stru_6B1BC458	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6B1BC46Co
		dd 1			; Count
		dd offset stru_6B1BC448	; RttiBlkPtr
stru_6B1BC46C	_msExcept7 <19930520h, 2, offset stru_6B1BC438,	1, \
					; DATA XREF: unknown_libname_90o
			    offset stru_6B1BC458, 0>
stru_6B1BC488	_msExcInfo 2 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6B1BC4BCo
stru_6B1BC498	_msRttiDscr <8,	offset stru_6B1C1034, 0, offset	sub_6B197EE9>
					; DATA XREF: .rdata:stru_6B1BC4A8o
stru_6B1BC4A8	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6B1BC4BCo
		dd 1			; Count
		dd offset stru_6B1BC498	; RttiBlkPtr
stru_6B1BC4BC	_msExcept7 <19930520h, 2, offset stru_6B1BC488,	1, \
					; DATA XREF: unknown_libname_91o
			    offset stru_6B1BC4A8, 0>
stru_6B1BC4D8	_msExcInfo <-1,	offset sub_6B1A9682> ; DATA XREF: .rdata:stru_6B1BC4E0o
stru_6B1BC4E0	_msExcept7 <19930520h, 1, offset stru_6B1BC4D8,	0, 0, 0>
					; DATA XREF: unknown_libname_92o
dword_6B1BC4FC	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BC550o
		dd offset sub_6B1A9695
		dd 4 dup(0)
dword_6B1BC514	dd 8			; DATA XREF: .rdata:6B1BC544o
		dd offset off_6B1C10CC
		dd 0FFFFFFB4h
		dd offset sub_6B198658
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB8h
		dd offset sub_6B19869B
dword_6B1BC534	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BC558o
		dd offset dword_6B1BC514
dword_6B1BC548	dd 19930520h, 3		; DATA XREF: unknown_libname_93o
		dd offset dword_6B1BC4FC
		dd 1
		dd offset dword_6B1BC534
		dd 2 dup(0)
dword_6B1BC564	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BC5B8o
		dd offset sub_6B1A96A7
		dd 4 dup(0)
dword_6B1BC57C	dd 8			; DATA XREF: .rdata:6B1BC5ACo
		dd offset off_6B1C10CC
		dd 0FFFFFFACh
		dd offset loc_6B1993D4
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB0h
		dd offset loc_6B199417
dword_6B1BC59C	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BC5C0o
		dd offset dword_6B1BC57C
dword_6B1BC5B0	dd 19930520h, 3		; DATA XREF: unknown_libname_94o
		dd offset dword_6B1BC564
		dd 1
		dd offset dword_6B1BC59C
		dd 2 dup(0)
stru_6B1BC5CC	_msExcInfo <-1,	offset sub_6B1A96B9> ; DATA XREF: .rdata:stru_6B1BC5D4o
stru_6B1BC5D4	_msExcept7 <19930520h, 1, offset stru_6B1BC5CC,	0, 0, 0>
					; DATA XREF: unknown_libname_95o
stru_6B1BC5F0	_msExcInfo <-1,	offset sub_6B1A96CC> ; DATA XREF: .rdata:stru_6B1BC5F8o
stru_6B1BC5F8	_msExcept7 <19930520h, 1, offset stru_6B1BC5F0,	0, 0, 0>
					; DATA XREF: unknown_libname_96o
dword_6B1BC614	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BC670o
		dd offset sub_6B1A96DF
		align 10h
		dd offset sub_6B1A96E7
		dd 1, 0
		dd 1, 0
dword_6B1BC634	dd 8			; DATA XREF: .rdata:6B1BC664o
		dd offset off_6B1C10CC
		dd 0FFFFFFD8h
		dd offset sub_6B19A5C1
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB4h
		dd offset sub_6B19A604
dword_6B1BC654	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6B1BC678o
		dd offset dword_6B1BC634
dword_6B1BC668	dd 19930520h, 4		; DATA XREF: unknown_libname_97o
		dd offset dword_6B1BC614
		dd 1
		dd offset dword_6B1BC654
		dd 2 dup(0)
dword_6B1BC684	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BC6C8o
		dd offset sub_6B1A96F9
		dd 4 dup(0)
dword_6B1BC69C	dd 8			; DATA XREF: .rdata:6B1BC6BCo
		dd offset off_6B1C1118
		dd 0Ch
		dd offset loc_6B19B6B8
dword_6B1BC6AC	dd 2 dup(1), 2,	1	; DATA XREF: .rdata:6B1BC6D0o
		dd offset dword_6B1BC69C
dword_6B1BC6C0	dd 19930520h, 3		; DATA XREF: unknown_libname_98o
		dd offset dword_6B1BC684
		dd 1
		dd offset dword_6B1BC6AC
		dd 2 dup(0)
dword_6B1BC6DC	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BC720o
		dd offset sub_6B1A970B
		dd 4 dup(0)
dword_6B1BC6F4	dd 8			; DATA XREF: .rdata:6B1BC714o
		dd offset off_6B1C1118
		dd 0Ch
		dd offset sub_6B19B7B4
dword_6B1BC704	dd 2 dup(1), 2,	1	; DATA XREF: .rdata:6B1BC728o
		dd offset dword_6B1BC6F4
dword_6B1BC718	dd 19930520h, 3		; DATA XREF: unknown_libname_99o
		dd offset dword_6B1BC6DC
		dd 1
		dd offset dword_6B1BC704
		dd 2 dup(0)
dword_6B1BC734	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BC778o
		dd offset sub_6B1A971D
		dd 4 dup(0)
dword_6B1BC74C	dd 8			; DATA XREF: .rdata:6B1BC76Co
		dd offset off_6B1C1118
		dd 0FFFFFFECh
		dd offset sub_6B19B87F
dword_6B1BC75C	dd 2 dup(1), 2,	1	; DATA XREF: .rdata:6B1BC780o
		dd offset dword_6B1BC74C
dword_6B1BC770	dd 19930520h, 3		; DATA XREF: unknown_libname_100o
		dd offset dword_6B1BC734
		dd 1
		dd offset dword_6B1BC75C
		dd 2 dup(0)
stru_6B1BC78C	_msExcInfo <-1,	offset sub_6B1A972F> ; DATA XREF: .rdata:stru_6B1BC794o
stru_6B1BC794	_msExcept7 <19930520h, 1, offset stru_6B1BC78C,	0, 0, 0>
					; DATA XREF: unknown_libname_101o
dword_6B1BC7B0	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BC7F4o
		dd offset sub_6B1A9743
		dd 4 dup(0)
dword_6B1BC7C8	dd 8			; DATA XREF: .rdata:6B1BC7E8o
		dd offset off_6B1C1118
		dd 0FFFFFFECh
		dd offset sub_6B19B9B9
dword_6B1BC7D8	dd 2 dup(1), 2,	1	; DATA XREF: .rdata:6B1BC7FCo
		dd offset dword_6B1BC7C8
dword_6B1BC7EC	dd 19930520h, 3		; DATA XREF: unknown_libname_102o
		dd offset dword_6B1BC7B0
		dd 1
		dd offset dword_6B1BC7D8
		dd 2 dup(0)
dword_6B1BC808	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BC85Co
		dd offset sub_6B1A9755
		dd 4 dup(0)
dword_6B1BC820	dd 8			; DATA XREF: .rdata:6B1BC850o
		dd offset off_6B1C10CC
		dd 0FFFFFFACh
		dd offset loc_6B19C86E
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFA8h
		dd offset loc_6B19C8B1
dword_6B1BC840	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BC864o
		dd offset dword_6B1BC820
dword_6B1BC854	dd 19930520h, 3		; DATA XREF: unknown_libname_103o
		dd offset dword_6B1BC808
		dd 1
		dd offset dword_6B1BC840
		align 10h
dword_6B1BC870	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BC8CCo
		dd offset sub_6B1A9767
		dd 0
		dd offset sub_6B1A976F
		dd 1, 0
		dd 1, 0
dword_6B1BC890	dd 8			; DATA XREF: .rdata:6B1BC8C0o
		dd offset off_6B1C10CC
		dd 0FFFFFFB0h
		dd offset loc_6B19D7AF
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB4h
		dd offset loc_6B19D7F2
dword_6B1BC8B0	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6B1BC8D4o
		dd offset dword_6B1BC890
dword_6B1BC8C4	dd 19930520h, 4		; DATA XREF: unknown_libname_104o
		dd offset dword_6B1BC870
		dd 1
		dd offset dword_6B1BC8B0
		align 10h
dword_6B1BC8E0	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BC998o
		dd offset sub_6B1A9781
		dd 0
		dd offset sub_6B1A978C
		dd 1
		dd offset sub_6B1A9797
		dd 2
		dd offset sub_6B1A979F
		dd 3, 0
		dd 3, 0
		dd 3
		dd offset sub_6B1A97A7
		dd 6, 0
		dd 6, 0
dword_6B1BC928	dd 8			; DATA XREF: .rdata:6B1BC978o
		dd offset off_6B1C10CC
		dd 0FFFFFF68h
		dd offset loc_6B19DA44
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFF6Ch
		dd offset loc_6B19DA8A
dword_6B1BC948	dd 8			; DATA XREF: .rdata:6B1BC98Co
		dd offset off_6B1C10CC
		dd 0FFFFFF6Ch
		dd offset loc_6B19DC23
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFF68h
		dd offset loc_6B19DC69
dword_6B1BC968	dd 2 dup(4), 5,	2	; DATA XREF: .rdata:6B1BC9A0o
		dd offset dword_6B1BC928
		dd 2 dup(7), 8,	2
		dd offset dword_6B1BC948
dword_6B1BC990	dd 19930520h, 9		; DATA XREF: __ehhandler$?_Getifld@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAHPADAAV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@1HABVlocale@2@@Zo
		dd offset dword_6B1BC8E0
		dd 2
		dd offset dword_6B1BC968
		dd 2 dup(0)
dword_6B1BC9AC	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BCA00o
		dd offset sub_6B1A97B9
		dd 4 dup(0)
dword_6B1BC9C4	dd 8			; DATA XREF: .rdata:6B1BC9F4o
		dd offset off_6B1C10CC
		dd 0FFFFFFB0h
		dd offset sub_6B19F05B
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB4h
		dd offset sub_6B19F09E
dword_6B1BC9E4	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BCA08o
		dd offset dword_6B1BC9C4
dword_6B1BC9F8	dd 19930520h, 3		; DATA XREF: unknown_libname_105o
		dd offset dword_6B1BC9AC
		dd 1
		dd offset dword_6B1BC9E4
		dd 2 dup(0)
dword_6B1BCA14	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BCA68o
		dd offset sub_6B1A97CB
		dd 4 dup(0)
dword_6B1BCA2C	dd 8			; DATA XREF: .rdata:6B1BCA5Co
		dd offset off_6B1C10CC
		dd 0FFFFFFB0h
		dd offset sub_6B19F19A
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB4h
		dd offset sub_6B19F1DD
dword_6B1BCA4C	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BCA70o
		dd offset dword_6B1BCA2C
dword_6B1BCA60	dd 19930520h, 3		; DATA XREF: unknown_libname_106o
		dd offset dword_6B1BCA14
		dd 1
		dd offset dword_6B1BCA4C
		dd 2 dup(0)
dword_6B1BCA7C	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BCAE0o
		dd offset sub_6B1A97DD
		dd 2 dup(0)
		dd 1
		dd offset sub_6B1A97E8
		dd 1
		dd offset sub_6B1A97F0
		dd 2 dup(0)
dword_6B1BCAA4	dd 8			; DATA XREF: .rdata:6B1BCAD4o
		dd offset off_6B1C10CC
		dd 0FFFFFF70h
		dd offset loc_6B19F5DC
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFF74h
		dd offset loc_6B19F62E
dword_6B1BCAC4	dd 1, 3, 4, 2		; DATA XREF: .rdata:6B1BCAE8o
		dd offset dword_6B1BCAA4
dword_6B1BCAD8	dd 19930520h, 5		; DATA XREF: unknown_libname_107o
		dd offset dword_6B1BCA7C
		dd 1
		dd offset dword_6B1BCAC4
		dd 2 dup(0)
dword_6B1BCAF4	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BCB50o
		dd offset sub_6B1A9802
		align 10h
		dd offset sub_6B1A980A
		dd 1, 0
		dd 1, 0
dword_6B1BCB14	dd 8			; DATA XREF: .rdata:6B1BCB44o
		dd offset off_6B1C10CC
		dd 0FFFFFFACh
		dd offset sub_6B19F78F
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFA8h
		dd offset sub_6B19F7D2
dword_6B1BCB34	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6B1BCB58o
		dd offset dword_6B1BCB14
dword_6B1BCB48	dd 19930520h, 4		; DATA XREF: unknown_libname_108o
		dd offset dword_6B1BCAF4
		dd 1
		dd offset dword_6B1BCB34
		dd 2 dup(0)
dword_6B1BCB64	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BCBB8o
		dd offset sub_6B1A981C
		dd 4 dup(0)
dword_6B1BCB7C	dd 8			; DATA XREF: .rdata:6B1BCBACo
		dd offset off_6B1C10CC
		dd 0FFFFFFB4h
		dd offset sub_6B19FF1A
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB8h
		dd offset sub_6B19FF5D
dword_6B1BCB9C	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BCBC0o
		dd offset dword_6B1BCB7C
dword_6B1BCBB0	dd 19930520h, 3		; DATA XREF: unknown_libname_109o
		dd offset dword_6B1BCB64
		dd 1
		dd offset dword_6B1BCB9C
		dd 2 dup(0)
dword_6B1BCBCC	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BCC20o
		dd offset sub_6B1A982E
		dd 4 dup(0)
dword_6B1BCBE4	dd 8			; DATA XREF: .rdata:6B1BCC14o
		dd offset off_6B1C10CC
		dd 0FFFFFFB4h
		dd offset sub_6B1A0021
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB8h
		dd offset sub_6B1A0064
dword_6B1BCC04	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BCC28o
		dd offset dword_6B1BCBE4
dword_6B1BCC18	dd 19930520h, 3		; DATA XREF: unknown_libname_110o
		dd offset dword_6B1BCBCC
		dd 1
		dd offset dword_6B1BCC04
		dd 2 dup(0)
dword_6B1BCC34	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BCC88o
		dd offset sub_6B1A9840
		dd 4 dup(0)
dword_6B1BCC4C	dd 8			; DATA XREF: .rdata:6B1BCC7Co
		dd offset off_6B1C10CC
		dd 0FFFFFFB4h
		dd offset sub_6B1A0128
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB8h
		dd offset sub_6B1A016B
dword_6B1BCC6C	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BCC90o
		dd offset dword_6B1BCC4C
dword_6B1BCC80	dd 19930520h, 3		; DATA XREF: unknown_libname_111o
		dd offset dword_6B1BCC34
		dd 1
		dd offset dword_6B1BCC6C
		dd 2 dup(0)
dword_6B1BCC9C	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BCCF0o
		dd offset sub_6B1A9852
		dd 4 dup(0)
dword_6B1BCCB4	dd 8			; DATA XREF: .rdata:6B1BCCE4o
		dd offset off_6B1C10CC
		dd 0FFFFFFB4h
		dd offset sub_6B1A022F
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB8h
		dd offset sub_6B1A0272
dword_6B1BCCD4	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BCCF8o
		dd offset dword_6B1BCCB4
dword_6B1BCCE8	dd 19930520h, 3		; DATA XREF: unknown_libname_112o
		dd offset dword_6B1BCC9C
		dd 1
		dd offset dword_6B1BCCD4
		dd 2 dup(0)
dword_6B1BCD04	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BCD58o
		dd offset sub_6B1A9864
		dd 4 dup(0)
dword_6B1BCD1C	dd 8			; DATA XREF: .rdata:6B1BCD4Co
		dd offset off_6B1C10CC
		dd 0FFFFFFB4h
		dd offset sub_6B1A03D1
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB8h
		dd offset sub_6B1A0414
dword_6B1BCD3C	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BCD60o
		dd offset dword_6B1BCD1C
dword_6B1BCD50	dd 19930520h, 3		; DATA XREF: unknown_libname_113o
		dd offset dword_6B1BCD04
		dd 1
		dd offset dword_6B1BCD3C
		dd 2 dup(0)
dword_6B1BCD6C	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BCDC8o
		dd offset sub_6B1A9876
		dd 2 dup(0)
		dd 1
		dd offset sub_6B1A9881
		dd 2 dup(0)
dword_6B1BCD8C	dd 8			; DATA XREF: .rdata:6B1BCDBCo
		dd offset off_6B1C10CC
		dd 0FFFFFEB4h
		dd offset sub_6B1A051F
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFEB0h
		dd offset sub_6B1A0571
dword_6B1BCDAC	dd 1, 2, 3, 2		; DATA XREF: .rdata:6B1BCDD0o
		dd offset dword_6B1BCD8C
dword_6B1BCDC0	dd 19930520h, 4		; DATA XREF: unknown_libname_114o
		dd offset dword_6B1BCD6C
		dd 1
		dd offset dword_6B1BCDAC
		dd 2 dup(0)
dword_6B1BCDDC	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BCE30o
		dd offset sub_6B1A9896
		dd 4 dup(0)
dword_6B1BCDF4	dd 8			; DATA XREF: .rdata:6B1BCE24o
		dd offset off_6B1C10CC
		dd 0FFFFFFB4h
		dd offset sub_6B1A0641
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB8h
		dd offset sub_6B1A0684
dword_6B1BCE14	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BCE38o
		dd offset dword_6B1BCDF4
dword_6B1BCE28	dd 19930520h, 3		; DATA XREF: unknown_libname_115o
		dd offset dword_6B1BCDDC
		dd 1
		dd offset dword_6B1BCE14
		dd 2 dup(0)
dword_6B1BCE44	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BCEA0o
		dd offset sub_6B1A98A8
		dd 2 dup(0)
		dd 1
		dd offset sub_6B1A98B3
		dd 2 dup(0)
dword_6B1BCE64	dd 8			; DATA XREF: .rdata:6B1BCE94o
		dd offset off_6B1C10CC
		dd 0FFFFFF34h
		dd offset sub_6B1A078F
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFF30h
		dd offset sub_6B1A07E1
dword_6B1BCE84	dd 1, 2, 3, 2		; DATA XREF: .rdata:6B1BCEA8o
		dd offset dword_6B1BCE64
dword_6B1BCE98	dd 19930520h, 4		; DATA XREF: unknown_libname_116o
		dd offset dword_6B1BCE44
		dd 1
		dd offset dword_6B1BCE84
		dd 2 dup(0)
dword_6B1BCEB4	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BCF08o
		dd offset sub_6B1A98C8
		dd 4 dup(0)
dword_6B1BCECC	dd 8			; DATA XREF: .rdata:6B1BCEFCo
		dd offset off_6B1C10CC
		dd 0FFFFFFB4h
		dd offset sub_6B1A08B1
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB8h
		dd offset sub_6B1A08F4
dword_6B1BCEEC	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BCF10o
		dd offset dword_6B1BCECC
dword_6B1BCF00	dd 19930520h, 3		; DATA XREF: unknown_libname_117o
		dd offset dword_6B1BCEB4
		dd 1
		dd offset dword_6B1BCEEC
		dd 2 dup(0)
dword_6B1BCF1C	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BCF70o
		dd offset sub_6B1A98DA
		dd 4 dup(0)
dword_6B1BCF34	dd 8			; DATA XREF: .rdata:6B1BCF64o
		dd offset off_6B1C10CC
		dd 0FFFFFFB4h
		dd offset sub_6B1A09B5
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB8h
		dd offset sub_6B1A09F8
dword_6B1BCF54	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BCF78o
		dd offset dword_6B1BCF34
dword_6B1BCF68	dd 19930520h, 3		; DATA XREF: unknown_libname_118o
		dd offset dword_6B1BCF1C
		dd 1
		dd offset dword_6B1BCF54
		dd 2 dup(0)
dword_6B1BCF84	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BCFE0o
		dd offset sub_6B1A98EC
		dd 2 dup(0)
		dd 1
		dd offset sub_6B1A98F4
		dd 2 dup(0)
dword_6B1BCFA4	dd 8			; DATA XREF: .rdata:6B1BCFD4o
		dd offset off_6B1C10CC
		dd 0FFFFFFB0h
		dd offset sub_6B1A0B05
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB4h
		dd offset sub_6B1A0B48
dword_6B1BCFC4	dd 1, 2, 3, 2		; DATA XREF: .rdata:6B1BCFE8o
		dd offset dword_6B1BCFA4
dword_6B1BCFD8	dd 19930520h, 4		; DATA XREF: unknown_libname_119o
		dd offset dword_6B1BCF84
		dd 1
		dd offset dword_6B1BCFC4
		dd 2 dup(0)
dword_6B1BCFF4	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BD050o
		dd offset sub_6B1A9906
		dd 2 dup(0)
		dd 1
		dd offset sub_6B1A990E
		dd 2 dup(0)
dword_6B1BD014	dd 8			; DATA XREF: .rdata:6B1BD044o
		dd offset off_6B1C10CC
		dd 0FFFFFFB0h
		dd offset sub_6B1A0C55
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB4h
		dd offset sub_6B1A0C98
dword_6B1BD034	dd 1, 2, 3, 2		; DATA XREF: .rdata:6B1BD058o
		dd offset dword_6B1BD014
dword_6B1BD048	dd 19930520h, 4		; DATA XREF: unknown_libname_120o
		dd offset dword_6B1BCFF4
		dd 1
		dd offset dword_6B1BD034
		dd 2 dup(0)
stru_6B1BD064	_msExcInfo <-1,	offset sub_6B1A9920> ; DATA XREF: .rdata:stru_6B1BD06Co
stru_6B1BD06C	_msExcept7 <19930520h, 1, offset stru_6B1BD064,	0, 0, 0>
					; DATA XREF: unknown_libname_121o
dword_6B1BD088	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BD0E4o
		dd offset sub_6B1A9932
		dd 2 dup(0)
		dd 1
		dd offset sub_6B1A993A
		dd 2 dup(0)
dword_6B1BD0A8	dd 8			; DATA XREF: .rdata:6B1BD0D8o
		dd offset off_6B1C10CC
		dd 0FFFFFFB0h
		dd offset sub_6B1A0DE7
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB4h
		dd offset sub_6B1A0E2A
dword_6B1BD0C8	dd 1, 2, 3, 2		; DATA XREF: .rdata:6B1BD0ECo
		dd offset dword_6B1BD0A8
dword_6B1BD0DC	dd 19930520h, 4		; DATA XREF: unknown_libname_122o
		dd offset dword_6B1BD088
		dd 1
		dd offset dword_6B1BD0C8
		dd 2 dup(0)
dword_6B1BD0F8	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BD154o
		dd offset sub_6B1A994C
		dd 2 dup(0)
		dd 1
		dd offset sub_6B1A9954
		dd 2 dup(0)
dword_6B1BD118	dd 8			; DATA XREF: .rdata:6B1BD148o
		dd offset off_6B1C10CC
		dd 0FFFFFFB0h
		dd offset sub_6B1A0F29
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB4h
		dd offset sub_6B1A0F6C
dword_6B1BD138	dd 1, 2, 3, 2		; DATA XREF: .rdata:6B1BD15Co
		dd offset dword_6B1BD118
dword_6B1BD14C	dd 19930520h, 4		; DATA XREF: unknown_libname_123o
		dd offset dword_6B1BD0F8
		dd 1
		dd offset dword_6B1BD138
		dd 2 dup(0)
dword_6B1BD168	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BD1DCo
		dd offset sub_6B1A9966
		dd 0
		dd offset sub_6B1A996E
		dd 1, 0
		dd 2
		dd offset sub_6B1A9976
		dd 3
		dd offset sub_6B1A997E
		dd 4
		dd offset sub_6B1A9986
		dd 1, 0
dword_6B1BD1A0	dd 8			; DATA XREF: .rdata:6B1BD1D0o
		dd offset off_6B1C10CC
		dd 0FFFFFF98h
		dd offset loc_6B1A11B8
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFF94h
		dd offset loc_6B1A11FB
dword_6B1BD1C0	dd 2, 5, 6, 2		; DATA XREF: .rdata:6B1BD1E4o
		dd offset dword_6B1BD1A0
dword_6B1BD1D4	dd 19930520h, 7		; DATA XREF: unknown_libname_124o
		dd offset dword_6B1BD168
		dd 1
		dd offset dword_6B1BD1C0
		align 10h
stru_6B1BD1F0	_msExcInfo <-1,	offset sub_6B1A9998> ; DATA XREF: .rdata:stru_6B1BD1F8o
stru_6B1BD1F8	_msExcept7 <19930520h, 1, offset stru_6B1BD1F0,	0, 0, 0>
					; DATA XREF: unknown_libname_125o
stru_6B1BD214	_msExcInfo 2 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6B1BD248o
stru_6B1BD224	_msRttiDscr <0,	0, 0, offset sub_6B1A1DC1>
					; DATA XREF: .rdata:stru_6B1BD234o
stru_6B1BD234	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6B1BD248o
		dd 1			; Count
		dd offset stru_6B1BD224	; RttiBlkPtr
stru_6B1BD248	_msExcept7 <19930520h, 2, offset stru_6B1BD214,	1, \
					; DATA XREF: unknown_libname_126o
			    offset stru_6B1BD234, 0>
dword_6B1BD264	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BD2C0o
		dd offset sub_6B1A99B5
		align 10h
		dd offset sub_6B1A99BD
		dd 1, 0
		dd 1, 0
dword_6B1BD284	dd 8			; DATA XREF: .rdata:6B1BD2B4o
		dd offset off_6B1C10CC
		dd 0FFFFFFACh
		dd offset loc_6B1A1E8E
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFCCh
		dd offset loc_6B1A1ED1
dword_6B1BD2A4	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6B1BD2C8o
		dd offset dword_6B1BD284
dword_6B1BD2B8	dd 19930520h, 4		; DATA XREF: unknown_libname_127o
		dd offset dword_6B1BD264
		dd 1
		dd offset dword_6B1BD2A4
		dd 2 dup(0)
stru_6B1BD2D4	_msExcInfo 2 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6B1BD308o
stru_6B1BD2E4	_msRttiDscr <0,	0, 0, offset loc_6B1A2D26>
					; DATA XREF: .rdata:stru_6B1BD2F4o
stru_6B1BD2F4	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6B1BD308o
		dd 1			; Count
		dd offset stru_6B1BD2E4	; RttiBlkPtr
stru_6B1BD308	_msExcept7 <19930520h, 2, offset stru_6B1BD2D4,	1, \
					; DATA XREF: unknown_libname_128o
			    offset stru_6B1BD2F4, 0>
dword_6B1BD324	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BD378o
		dd offset sub_6B1A99D9
		dd 4 dup(0)
dword_6B1BD33C	dd 8			; DATA XREF: .rdata:6B1BD36Co
		dd offset off_6B1C10CC
		dd 0FFFFFFB0h
		dd offset loc_6B1A3347
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB4h
		dd offset loc_6B1A338A
dword_6B1BD35C	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BD380o
		dd offset dword_6B1BD33C
dword_6B1BD370	dd 19930520h, 3		; DATA XREF: unknown_libname_129o
		dd offset dword_6B1BD324
		dd 1
		dd offset dword_6B1BD35C
		dd 2 dup(0)
stru_6B1BD38C	_msExcInfo 2 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6B1BD3C0o
stru_6B1BD39C	_msRttiDscr <0,	0, 0, offset sub_6B1A394D>
					; DATA XREF: .rdata:stru_6B1BD3ACo
stru_6B1BD3AC	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6B1BD3C0o
		dd 1			; Count
		dd offset stru_6B1BD39C	; RttiBlkPtr
stru_6B1BD3C0	_msExcept7 <19930520h, 2, offset stru_6B1BD38C,	1, \
					; DATA XREF: unknown_libname_131o
			    offset stru_6B1BD3AC, 0>
stru_6B1BD3DC	_msExcInfo <-1,	offset sub_6B1A99EB> ; DATA XREF: .rdata:stru_6B1BD3E4o
stru_6B1BD3E4	_msExcept7 <19930520h, 1, offset stru_6B1BD3DC,	0, 0, 0>
					; DATA XREF: unknown_libname_130o
stru_6B1BD400	_msExcInfo <-1,	offset sub_6B1A9A1B> ; DATA XREF: .rdata:stru_6B1BD410o
		_msExcInfo <0, offset sub_6B1A9A23>
stru_6B1BD410	_msExcept7 <19930520h, 2, offset stru_6B1BD400,	0, 0, 0>
					; DATA XREF: unknown_libname_133o
dword_6B1BD42C	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BD480o
		dd offset sub_6B1A9A35
		dd 4 dup(0)
dword_6B1BD444	dd 8			; DATA XREF: .rdata:6B1BD474o
		dd offset off_6B1C10CC
		dd 0FFFFFFB0h
		dd offset loc_6B1A4079
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFB4h
		dd offset loc_6B1A40BC
dword_6B1BD464	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BD488o
		dd offset dword_6B1BD444
dword_6B1BD478	dd 19930520h, 3		; DATA XREF: unknown_libname_134o
		dd offset dword_6B1BD42C
		dd 1
		dd offset dword_6B1BD464
		dd 2 dup(0)
dword_6B1BD494	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BD4F8o
		dd offset sub_6B1A9A47
		dd 2 dup(0)
		dd 1
		dd offset sub_6B1A9A4F
		dd 2
		dd offset sub_6B1A9A57
		dd 2 dup(0)
dword_6B1BD4BC	dd 8			; DATA XREF: .rdata:6B1BD4ECo
		dd offset off_6B1C10CC
		dd 0FFFFFF98h
		dd offset loc_6B1A42E7
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFF9Ch
		dd offset loc_6B1A432A
dword_6B1BD4DC	dd 1, 3, 4, 2		; DATA XREF: .rdata:6B1BD500o
		dd offset dword_6B1BD4BC
dword_6B1BD4F0	dd 19930520h, 5		; DATA XREF: unknown_libname_135o
		dd offset dword_6B1BD494
		dd 1
		dd offset dword_6B1BD4DC
		dd 2 dup(0)
dword_6B1BD50C	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BD570o
		dd offset sub_6B1A9A69
		align 8
		dd offset sub_6B1A9A74
		dd 1, 0
		dd 2
		dd offset sub_6B1A9A7F
		dd 1, 0
dword_6B1BD534	dd 8			; DATA XREF: .rdata:6B1BD564o
		dd offset off_6B1C10CC
		dd 0FFFFFD80h
		dd offset loc_6B1A460C
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFD84h
		dd offset loc_6B1A465E
dword_6B1BD554	dd 2, 3, 4, 2		; DATA XREF: .rdata:6B1BD578o
		dd offset dword_6B1BD534
dword_6B1BD568	dd 19930520h, 5		; DATA XREF: unknown_libname_136o
		dd offset dword_6B1BD50C
		dd 1
		dd offset dword_6B1BD554
		dd 2 dup(0)
stru_6B1BD584	_msExcInfo <-1,	offset sub_6B1A9A08> ; DATA XREF: .rdata:stru_6B1BD58Co
stru_6B1BD58C	_msExcept7 <19930520h, 1, offset stru_6B1BD584,	0, 0, 0>
					; DATA XREF: unknown_libname_132o
stru_6B1BD5A8	_msExcInfo <-1,	offset sub_6B1A9A91> ; DATA XREF: .rdata:stru_6B1BD5B8o
		_msExcInfo <0, offset sub_6B1A9A99>
stru_6B1BD5B8	_msExcept7 <19930520h, 2, offset stru_6B1BD5A8,	0, 0, 0>
					; DATA XREF: unknown_libname_137o
dword_6B1BD5D4	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BD638o
		dd offset sub_6B1A9AAB
		dd 2 dup(0)
		dd 1
		dd offset sub_6B1A9AB3
		dd 2
		dd offset sub_6B1A9ABB
		dd 2 dup(0)
dword_6B1BD5FC	dd 8			; DATA XREF: .rdata:6B1BD62Co
		dd offset off_6B1C10CC
		dd 0FFFFFFA4h
		dd offset loc_6B1A4DB6
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFA0h
		dd offset loc_6B1A4DF9
dword_6B1BD61C	dd 1, 3, 4, 2		; DATA XREF: .rdata:6B1BD640o
		dd offset dword_6B1BD5FC
dword_6B1BD630	dd 19930520h, 5		; DATA XREF: unknown_libname_138o
		dd offset dword_6B1BD5D4
		dd 1
		dd offset dword_6B1BD61C
		dd 2 dup(0)
dword_6B1BD64C	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BD6B0o
		dd offset sub_6B1A9ACD
		align 8
		dd offset sub_6B1A9AD8
		dd 1, 0
		dd 2
		dd offset sub_6B1A9AE3
		dd 1, 0
dword_6B1BD674	dd 8			; DATA XREF: .rdata:6B1BD6A4o
		dd offset off_6B1C10CC
		dd 0FFFFFE6Ch
		dd offset loc_6B1A5072
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFE70h
		dd offset loc_6B1A50C4
dword_6B1BD694	dd 2, 3, 4, 2		; DATA XREF: .rdata:6B1BD6B8o
		dd offset dword_6B1BD674
dword_6B1BD6A8	dd 19930520h, 5		; DATA XREF: unknown_libname_139o
		dd offset dword_6B1BD64C
		dd 1
		dd offset dword_6B1BD694
		dd 2 dup(0)
stru_6B1BD6C4	_msExcInfo <-1,	offset sub_6B1A9AF5> ; DATA XREF: .rdata:stru_6B1BD6CCo
stru_6B1BD6CC	_msExcept7 <19930520h, 1, offset stru_6B1BD6C4,	0, 0, 0>
					; DATA XREF: unknown_libname_140o
dword_6B1BD6E8	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BD744o
		dd offset sub_6B1A9B08
		dd 0
		dd offset sub_6B1A9B10
		dd 1, 0
		dd 1, 0
dword_6B1BD708	dd 8			; DATA XREF: .rdata:6B1BD738o
		dd offset off_6B1C10CC
		dd 0FFFFFF98h
		dd offset loc_6B1A57AE
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFF9Ch
		dd offset loc_6B1A57F1
dword_6B1BD728	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6B1BD74Co
		dd offset dword_6B1BD708
dword_6B1BD73C	dd 19930520h, 4		; DATA XREF: unknown_libname_141o
		dd offset dword_6B1BD6E8
		dd 1
		dd offset dword_6B1BD728
		dd 2 dup(0)
dword_6B1BD758	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BD7ACo
		dd offset sub_6B1A9B22
		dd 4 dup(0)
dword_6B1BD770	dd 8			; DATA XREF: .rdata:6B1BD7A0o
		dd offset off_6B1C10CC
		dd 0FFFFFFACh
		dd offset loc_6B1A6119
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFA8h
		dd offset loc_6B1A615C
dword_6B1BD790	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BD7B4o
		dd offset dword_6B1BD770
dword_6B1BD7A4	dd 19930520h, 3		; DATA XREF: unknown_libname_142o
		dd offset dword_6B1BD758
		dd 1
		dd offset dword_6B1BD790
		align 10h
stru_6B1BD7C0	_msExcInfo <-1,	offset sub_6B1A9B34> ; DATA XREF: .rdata:stru_6B1BD7C8o
stru_6B1BD7C8	_msExcept7 <19930520h, 1, offset stru_6B1BD7C0,	0, 0, 0>
					; DATA XREF: unknown_libname_143o
dword_6B1BD7E4	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BD838o
		dd offset sub_6B1A9B47
		dd 4 dup(0)
dword_6B1BD7FC	dd 8			; DATA XREF: .rdata:6B1BD82Co
		dd offset off_6B1C10CC
		dd 0FFFFFFD4h
		dd offset loc_6B1A6824
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFACh
		dd offset loc_6B1A6867
dword_6B1BD81C	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6B1BD840o
		dd offset dword_6B1BD7FC
dword_6B1BD830	dd 19930520h, 3		; DATA XREF: unknown_libname_144o
		dd offset dword_6B1BD7E4
		dd 1
		dd offset dword_6B1BD81C
		dd 2 dup(0)
dword_6B1BD84C	dd 0FFFFFFFFh		; DATA XREF: .rdata:6B1BD8A8o
		dd offset sub_6B1A9B59
		dd 2 dup(0)
		dd 1
		dd offset sub_6B1A9B61
		dd 2 dup(0)
dword_6B1BD86C	dd 8			; DATA XREF: .rdata:6B1BD89Co
		dd offset off_6B1C10CC
		dd 0FFFFFFACh
		dd offset sub_6B1A7ED4
		dd 8
		dd offset stru_6B1C1034
		dd 0FFFFFFA8h
		dd offset sub_6B1A7F17
dword_6B1BD88C	dd 1, 2, 3, 2		; DATA XREF: .rdata:6B1BD8B0o
		dd offset dword_6B1BD86C
dword_6B1BD8A0	dd 19930520h, 4		; DATA XREF: unknown_libname_145o
		dd offset dword_6B1BD84C
		dd 1
		dd offset dword_6B1BD88C
		dd 2 dup(0)
		db    0			; DATA XREF: .rdata:6B1BD8DCo
		db    0
		db    0
		db    0
		dd offset off_6B1C1118
		align 8
		dd 0FFFFFFFFh, 0
		dd 10h
		dd offset sub_6B1A8FA0
dword_6B1BD8D8	dd 1			; DATA XREF: .rdata:6B1BD8ECo
		dd offset unk_6B1BD8BC
dword_6B1BD8E0	dd 0			; DATA XREF: sub_6B1A8F60+Bo
		dd offset sub_6B1A8FE0
		dd 0
		dd offset dword_6B1BD8D8
ADVAPI32_dll_import_table dd 1		; DATA XREF: .text:6B1A82E2o
					; Attributes
		dd rva aAdvapi32_dll	; "ADVAPI32.dll"
		dd rva ADVAPI32_dll_handle ; Module handle
		dd rva FreeSid		; Delayed Import Address Table
		dd rva ADVAPI32_dll_dint ; Delayed Import Name Table
		dd rva ADVAPI32_dll_dbiat ; Bound Delayed Import Address Table
		dd 0			; Unload Delayed Import	Table
		dd 0			; Time stamp
		dd 8 dup(0)
ADVAPI32_dll_dint dd rva word_6B1BD9C0	; DATA XREF: .rdata:6B1BD900o
					; ADVAPI32.dll delayed import name table
		dd rva word_6B1BD9CA
		dd rva word_6B1BD9E6
		dd rva word_6B1BD9FC
		dd rva word_6B1BDA0C
		dd rva word_6B1BDA2C
		dd rva word_6B1BDA3C
		dd rva word_6B1BDA58
		dd rva word_6B1BDA70
		dd rva word_6B1BDA80
		dd rva word_6B1BDA96
		dd rva word_6B1BDAA6
		dd rva word_6B1BDABE
		dd rva word_6B1BDACA
		dd rva word_6B1BDAE0
		dd rva word_6B1BDAF4
		dd rva word_6B1BDB06
		dd rva word_6B1BDB1E
		dd rva word_6B1BDB2C
		dd rva word_6B1BDB3E
		dd rva word_6B1BDB52
		dd rva word_6B1BDB64
		dd rva word_6B1BDB74
		dd rva word_6B1BDB84
		dd rva word_6B1BDB96
		dd rva word_6B1BDBA6
		dd rva word_6B1BDBBC
		dd rva word_6B1BDBD4
		dd rva word_6B1BDBE6
		dd rva word_6B1BDBF8
		dd rva word_6B1BDC08
		dd rva word_6B1BDC18
		dd rva word_6B1BDC2C
		dd rva word_6B1BDC4A
		dd rva word_6B1BDC6A
		dd 0
word_6B1BD9C0	dw 0			; DATA XREF: .rdata:ADVAPI32_dll_dinto
aFreesid	db 'FreeSid',0
word_6B1BD9CA	dw 0			; DATA XREF: .rdata:6B1BD934o
aSetsecuritydes	db 'SetSecurityDescriptorDacl',0
word_6B1BD9E6	dw 0			; DATA XREF: .rdata:6B1BD938o
aAddaccessallow	db 'AddAccessAllowedAce',0
word_6B1BD9FC	dw 0			; DATA XREF: .rdata:6B1BD93Co
aInitializeacl	db 'InitializeAcl',0
word_6B1BDA0C	dw 0			; DATA XREF: .rdata:6B1BD940o
aInitializesecu	db 'InitializeSecurityDescriptor',0
		align 4
word_6B1BDA2C	dw 0			; DATA XREF: .rdata:6B1BD944o
aGetlengthsid	db 'GetLengthSid',0
		db 56h
word_6B1BDA3C	dw 0			; DATA XREF: .rdata:6B1BD948o
aAllocateandini	db 'AllocateAndInitializeSid',0
		db 13h
word_6B1BDA58	dw 0			; DATA XREF: .rdata:6B1BD94Co
aDeregistereven	db 'DeregisterEventSource',0
word_6B1BDA70	dw 0			; DATA XREF: .rdata:6B1BD950o
aReporteventa	db 'ReportEventA',0
		db 56h
word_6B1BDA80	dw 0			; DATA XREF: .rdata:6B1BD954o
aLookupaccountn	db 'LookupAccountNameA',0
		db 2Eh
word_6B1BDA96	dw 0			; DATA XREF: .rdata:6B1BD958o
aGetusernamea	db 'GetUserNameA',0
		db 56h
word_6B1BDAA6	dw 0			; DATA XREF: .rdata:6B1BD95Co
aRegisterevents	db 'RegisterEventSourceA',0
		db 6Ch
word_6B1BDABE	dw 0			; DATA XREF: .rdata:6B1BD960o
aEqualsid	db 'EqualSid',0
		align 2
word_6B1BDACA	dw 0			; DATA XREF: .rdata:6B1BD964o
aGettokeninform	db 'GetTokenInformation',0
word_6B1BDAE0	dw 0			; DATA XREF: .rdata:6B1BD968o
aOpenprocesstok	db 'OpenProcessToken',0
		db 33h
word_6B1BDAF4	dw 0			; DATA XREF: .rdata:6B1BD96Co
aOpenthreadtoke	db 'OpenThreadToken',0
word_6B1BDB06	dw 0			; DATA XREF: .rdata:6B1BD970o
aChecktokenmemb	db 'CheckTokenMembership',0
		db 6Ch
word_6B1BDB1E	dw 0			; DATA XREF: .rdata:6B1BD974o
aRegclosekey	db 'RegCloseKey',0
word_6B1BDB2C	dw 0			; DATA XREF: .rdata:6B1BD978o
aRegdeletevalue	db 'RegDeleteValueA',0
word_6B1BDB3E	dw 0			; DATA XREF: .rdata:6B1BD97Co
aRegqueryvaluee	db 'RegQueryValueExA',0
		db 33h
word_6B1BDB52	dw 0			; DATA XREF: .rdata:6B1BD980o
aRegsetvalueexa	db 'RegSetValueExA',0
		db 50h
word_6B1BDB64	dw 0			; DATA XREF: .rdata:6B1BD984o
aRegenumvaluea	db 'RegEnumValueA',0
word_6B1BDB74	dw 0			; DATA XREF: .rdata:6B1BD988o
aRegenumkeyexa	db 'RegEnumKeyExA',0
word_6B1BDB84	dw 0			; DATA XREF: .rdata:6B1BD98Co
aRegcreatekeyex	db 'RegCreateKeyExA',0
word_6B1BDB96	dw 0			; DATA XREF: .rdata:6B1BD990o
aRegopenkeyexa	db 'RegOpenKeyExA',0
word_6B1BDBA6	dw 0			; DATA XREF: .rdata:6B1BD994o
aCloseserviceha	db 'CloseServiceHandle',0
		db 2Eh
word_6B1BDBBC	dw 0			; DATA XREF: .rdata:6B1BD998o
aChangeservicec	db 'ChangeServiceConfig2A',0
word_6B1BDBD4	dw 0			; DATA XREF: .rdata:6B1BD99Co
aCreateservicea	db 'CreateServiceA',0
		db 50h
word_6B1BDBE6	dw 0			; DATA XREF: .rdata:6B1BD9A0o
aOpenscmanagera	db 'OpenSCManagerA',0
		db 50h
word_6B1BDBF8	dw 0			; DATA XREF: .rdata:6B1BD9A4o
aDeleteservice	db 'DeleteService',0
word_6B1BDC08	dw 0			; DATA XREF: .rdata:6B1BD9A8o
aOpenservicea	db 'OpenServiceA',0
		db 56h
word_6B1BDC18	dw 0			; DATA XREF: .rdata:6B1BD9ACo
aSetservicestat	db 'SetServiceStatus',0
		db 33h
word_6B1BDC2C	dw 0			; DATA XREF: .rdata:6B1BD9B0o
aRegisterservic	db 'RegisterServiceCtrlHandlerA',0
word_6B1BDC4A	dw 0			; DATA XREF: .rdata:6B1BD9B4o
aRegisterserv_0	db 'RegisterServiceCtrlHandlerExA',0
word_6B1BDC6A	dw 0			; DATA XREF: .rdata:6B1BD9B8o
aStartservicect	db 'StartServiceCtrlDispatcherA',0
ADVAPI32_dll_dbiat dd 0			; DATA XREF: .rdata:6B1BD904o
					; ADVAPI32.dll bound delayed import address table
		dd 23h dup(0)
__IMPORT_DESCRIPTOR_KERNEL32 dd	rva off_6B1BDDF4 ; Import Name Table
		dd 0FFFFFFFFh		; Time stamp
		dd 0FFFFFFFFh		; Forwarder Chain
		dd rva aKernel32_dll	; DLL Name
		dd rva InterlockedExchange ; Import Address Table
__IMPORT_DESCRIPTOR_USER32 dd rva off_6B1BE154 ; Import	Name Table
		dd 0FFFFFFFFh		; Time stamp
		dd 0FFFFFFFFh		; Forwarder Chain
		dd rva aUser32_dll	; DLL Name
		dd rva UnregisterClassA	; Import Address Table
__IMPORT_DESCRIPTOR_SHELL32 dd rva off_6B1BE130	; Import Name Table
		dd 0FFFFFFFFh		; Time stamp
		dd 0FFFFFFFFh		; Forwarder Chain
		dd rva aShell32_dll	; DLL Name
		dd rva SHGetSpecialFolderPathA ; Import	Address	Table
__IMPORT_DESCRIPTOR_ole32 dd rva off_6B1BE22C ;	Import Name Table
		dd 0FFFFFFFFh		; Time stamp
		dd 0FFFFFFFFh		; Forwarder Chain
		dd rva aOle32_dll	; DLL Name
		dd rva CreateStreamOnHGlobal ; Import Address Table
__IMPORT_DESCRIPTOR_OLEAUT32 dd	rva dword_6B1BE0E8 ; Import Name Table
		dd 0FFFFFFFFh		; Time stamp
		dd 0FFFFFFFFh		; Forwarder Chain
		dd rva aOleaut32_dll	; DLL Name
		dd rva SafeArrayCreateVector ; Import Address Table
__IMPORT_DESCRIPTOR_MSVCP71 dd rva off_6B1BDFFC	; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aMsvcp71_dll	; DLL Name
		dd rva ?sync_with_stdio@ios_base@std@@SA_N_N@Z ; Import	Address	Table
__IMPORT_DESCRIPTOR_SHLWAPI dd rva off_6B1BE138	; Import Name Table
		dd 0FFFFFFFFh		; Time stamp
		dd 0FFFFFFFFh		; Forwarder Chain
		dd rva aShlwapi_dll	; DLL Name
		dd rva PathAddBackslashA ; Import Address Table
__IMPORT_DESCRIPTOR_MSVCR71 dd rva off_6B1BE014	; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aMsvcr71_dll	; DLL Name
		dd rva __imp__initterm	; Import Address Table
__IMPORT_DESCRIPTOR_WS2_32 dd rva dword_6B1BE1C0 ; Import Name Table
		dd 0FFFFFFFFh		; Time stamp
		dd 0FFFFFFFFh		; Forwarder Chain
		dd rva aWs2_32_dll	; DLL Name
		dd rva ntohs		; Import Address Table
__IMPORT_DESCRIPTOR_VERSION dd rva off_6B1BE1B0	; Import Name Table
		dd 0FFFFFFFFh		; Time stamp
		dd 0FFFFFFFFh		; Forwarder Chain
		dd rva aVersion_dll	; DLL Name
		dd rva __imp_GetFileVersionInfoSizeA ; Import Address Table
		dd 5 dup(0)
;
; Import names for KERNEL32.dll
;
off_6B1BDDF4	dd rva word_6B1BE250	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_KERNEL32o
		dd rva word_6B1BE266
		dd rva word_6B1BE270
		dd rva word_6B1BE282
		dd rva word_6B1BE294
		dd rva word_6B1BE2A4
		dd rva word_6B1BE2BA
		dd rva word_6B1BE2D0
		dd rva word_6B1BE2E2
		dd rva word_6B1BE2F2
		dd rva word_6B1BE30E
		dd rva word_6B1BE326
		dd rva word_6B1BE332
		dd rva word_6B1BE33E
		dd rva word_6B1BE350
		dd rva word_6B1BE360
		dd rva word_6B1BE370
		dd rva word_6B1BE380
		dd rva word_6B1BE392
		dd rva word_6B1BE3AA
		dd rva word_6B1BE3C2
		dd rva word_6B1BE3D0
		dd rva word_6B1BE3E2
		dd rva word_6B1BE3F2
		dd rva word_6B1BE3FE
		dd rva word_6B1BE414
		dd rva word_6B1BE422
		dd rva word_6B1BE432
		dd rva word_6B1BE440
		dd rva word_6B1BE44E
		dd rva word_6B1BE45C
		dd rva word_6B1BE46C
		dd rva word_6B1BE478
		dd rva word_6B1BE484
		dd rva word_6B1BE49A
		dd rva word_6B1BE4AC
		dd rva word_6B1BE4C0
		dd rva word_6B1BE4E0
		dd rva word_6B1BE4F4
		dd rva word_6B1BE508
		dd rva word_6B1BE516
		dd rva word_6B1BE528
		dd rva word_6B1BE540
		dd rva word_6B1BE552
		dd rva word_6B1BE570
		dd rva word_6B1BE580
		dd rva word_6B1BE590
		dd rva word_6B1BE5A0
		dd rva word_6B1BE5BC
		dd rva word_6B1BE5DA
		dd rva word_6B1BE5F8
		dd rva word_6B1BE618
		dd rva word_6B1BE636
		dd rva word_6B1BE650
		dd rva word_6B1BE668
		dd rva word_6B1BE680
		dd rva word_6B1BE6A0
		dd rva word_6B1BE6B0
		dd rva word_6B1BE6C8
		dd rva word_6B1BE6E4
		dd rva word_6B1BE6F0
		dd rva word_6B1BE704
		dd rva word_6B1BE718
		dd rva word_6B1BE72E
		dd rva word_6B1BE742
		dd rva word_6B1BE756
		dd rva word_6B1BE76E
		dd rva word_6B1BE786
		dd rva word_6B1BE794
		dd rva word_6B1BE7A6
		dd rva word_6B1BE7B4
		dd rva word_6B1BE7CA
		dd rva word_6B1BE7E0
		dd rva word_6B1BE7EC
		dd rva word_6B1BE7FE
		dd rva word_6B1BE81C
		dd rva word_6B1BE830
		dd rva word_6B1BE83E
		dd rva word_6B1BE84E
		dd rva word_6B1BE85C
		dd rva word_6B1BE870
		dd rva word_6B1BE886
		dd rva word_6B1BE898
		dd rva word_6B1BE8AC
		dd rva word_6B1BE8BC
		dd rva word_6B1BE8C8
		dd rva word_6B1BE8DA
		dd rva word_6B1BE8E8
		dd rva word_6B1BE8F4
		dd rva word_6B1BE900
		dd rva word_6B1BE910
		dd rva word_6B1BE920
		dd rva word_6B1BE92E
		dd rva word_6B1BE940
		dd rva word_6B1BE94E
		dd rva word_6B1BE964
		dd rva word_6B1BE974
		dd rva word_6B1BE980
		dd rva word_6B1BE998
		dd rva word_6B1BE9AC
		dd rva word_6B1BE9C0
		dd rva word_6B1BE9DA
		dd rva word_6B1BE9EA
		dd rva word_6B1BEA06
		dd rva word_6B1BEA20
		dd rva word_6B1BEA34
		dd rva word_6B1BEA44
		dd rva word_6B1BEA50
		dd rva word_6B1BEA5E
		dd rva word_6B1BEA6C
		dd rva word_6B1BEA80
		dd rva word_6B1BEA92
		dd rva word_6B1BEAA2
		dd rva word_6B1BEAB0
		dd rva word_6B1BEAC0
		dd rva word_6B1BEACE
		dd rva word_6B1BEADC
		dd rva word_6B1BEAEC
		dd rva word_6B1BEAFC
		dd rva word_6B1BEB0C
		dd rva word_6B1BEB20
		dd rva word_6B1BEB34
		dd rva word_6B1BEB42
		dd rva word_6B1BEB52
		dd rva word_6B1BEB64
		dd rva word_6B1BF3A4
		dd rva word_6B1BF3B2
		dd rva word_6B1BF3C0
		dd rva word_6B1BF3DA
		dd 0
;
; Import names for MSVCP71.dll
;
off_6B1BDFFC	dd rva word_6B1BEEEA	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_MSVCP71o
		dd rva word_6B1BEE9E
		dd rva word_6B1BEE54
		dd rva word_6B1BEE04
		dd rva word_6B1BEF20
		dd 0
;
; Import names for MSVCR71.dll
;
off_6B1BE014	dd rva word_6B1BF2C6	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_MSVCR71o
		dd rva word_6B1BF2B2
		dd rva word_6B1BF29A
		dd rva word_6B1BF284
		dd rva word_6B1BF064
		dd rva word_6B1BF276
		dd rva word_6B1BF26A
		dd rva word_6B1BF258
		dd rva word_6B1BF24A
		dd rva word_6B1BF23E
		dd rva word_6B1BF230
		dd rva word_6B1BF226
		dd rva word_6B1BF216
		dd rva word_6B1BF1FA
		dd rva word_6B1BF1DC
		dd rva word_6B1BF1C4
		dd rva word_6B1BF19C
		dd rva word_6B1BF182
		dd rva word_6B1BF172
		dd rva word_6B1BF164
		dd rva word_6B1BF15A
		dd rva word_6B1BF2D2
		dd rva word_6B1BF13E
		dd rva word_6B1BF136
		dd rva word_6B1BF12A
		dd rva word_6B1BF120
		dd rva word_6B1BF116
		dd rva word_6B1BF056
		dd rva word_6B1BF04A
		dd rva word_6B1BF040
		dd rva word_6B1BF028
		dd rva word_6B1BF010
		dd rva word_6B1BF000
		dd rva word_6B1BEFEC
		dd rva word_6B1BF084
		dd rva word_6B1BEFE2
		dd rva word_6B1BEFCC
		dd rva word_6B1BEFB8
		dd rva word_6B1BEFB0
		dd rva word_6B1BEFA6
		dd rva word_6B1BF098
		dd rva word_6B1BF0B4
		dd rva word_6B1BF0C0
		dd rva word_6B1BF2E2
		dd rva word_6B1BF070
		dd rva word_6B1BF07A
		dd rva word_6B1BF148
		dd rva word_6B1BF08E
		dd rva word_6B1BF10C
		dd rva word_6B1BF102
		dd rva word_6B1BF0F8
		dd rva word_6B1BF0DC
		dd 0
;
; Import names for OLEAUT32.dll
;
dword_6B1BE0E8	dd 8000019Bh		; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_OLEAUT32o
		dd 80000017h
		dd 80000018h
		dd 8000000Fh
		dd 80000015h
		dd 80000094h
		dd 8000001Ah
		dd 80000019h
		dd 80000016h
		dd 80000008h
		dd 80000006h
		dd 80000002h
		dd 80000096h
		dd 80000095h
		dd 80000009h
		dd 8000000Bh
		dd 80000028h
		dd 0
;
; Import names for SHELL32.dll
;
off_6B1BE130	dd rva word_6B1BED20	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_SHELL32o
		dd 0
;
; Import names for SHLWAPI.dll
;
off_6B1BE138	dd rva word_6B1BEF62	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_SHLWAPIo
		dd rva word_6B1BEF54
		dd rva word_6B1BEF44
		dd rva word_6B1BEF38
		dd rva word_6B1BEF76
		dd rva word_6B1BEF86
		dd 0
;
; Import names for USER32.dll
;
off_6B1BE154	dd rva word_6B1BEB8C	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_USER32o
		dd rva word_6B1BEBA0
		dd rva word_6B1BEBAC
		dd rva word_6B1BEC30
		dd rva word_6B1BEBB8
		dd rva word_6B1BECF6
		dd rva word_6B1BECE6
		dd rva word_6B1BECD4
		dd rva word_6B1BECC6
		dd rva word_6B1BECB2
		dd rva word_6B1BEC9E
		dd rva word_6B1BEC8C
		dd rva word_6B1BEC78
		dd rva word_6B1BEC66
		dd rva word_6B1BEC54
		dd rva word_6B1BEC42
		dd rva word_6B1BEC22
		dd rva word_6B1BEC0E
		dd rva word_6B1BEBFA
		dd rva word_6B1BEBEA
		dd rva word_6B1BEBDA
		dd rva word_6B1BEBC4
		dd 0
;
; Import names for VERSION.dll
;
off_6B1BE1B0	dd rva word_6B1BF37E	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_VERSIONo
		dd rva word_6B1BF356
		dd rva word_6B1BF368
		dd 0
;
; Import names for WS2_32.dll
;
dword_6B1BE1C0	dd 8000000Fh		; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_WS2_32o
		dd 80000009h
		dd 80000073h
		dd 8000006Fh
		dd 80000074h
		dd 80000002h
		dd rva word_6B1BF2F4
		dd 8000000Dh
		dd rva word_6B1BF302
		dd rva word_6B1BF30E
		dd rva word_6B1BF318
		dd 80000033h
		dd 80000016h
		dd 80000003h
		dd 80000015h
		dd 80000007h
		dd 8000000Ch
		dd 80000006h
		dd 80000005h
		dd 80000012h
		dd rva word_6B1BF33C
		dd 80000034h
		dd 8000000Bh
		dd 80000008h
		dd rva word_6B1BF332
		dd 8000000Ah
		dd 0
;
; Import names for ole32.dll
;
off_6B1BE22C	dd rva word_6B1BED5A	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_ole32o
		dd rva word_6B1BED72
		dd rva word_6B1BED8A
		dd rva word_6B1BED9C
		dd rva word_6B1BEDAE
		dd rva word_6B1BEDC0
		dd rva word_6B1BEDD4
		dd rva word_6B1BED46
		dd 0
word_6B1BE250	dw 21Fh			; DATA XREF: .rdata:off_6B1BDDF4o
		db 'InterlockedExchange',0
word_6B1BE266	dw 0F5h			; DATA XREF: .rdata:6B1BDDF8o
		db 'GetACP',0
		align 10h
word_6B1BE270	dw 16Ch			; DATA XREF: .rdata:6B1BDDFCo
		db 'GetLocaleInfoA',0
		align 2
word_6B1BE282	dw 1D0h			; DATA XREF: .rdata:6B1BDE00o
		db 'GetThreadLocale',0
word_6B1BE294	dw 1DFh			; DATA XREF: .rdata:6B1BDE04o
		db 'GetVersionExA',0
word_6B1BE2A4	dw 26Bh			; DATA XREF: .rdata:6B1BDE08o
		db 'MultiByteToWideChar',0
word_6B1BE2BA	dw 389h			; DATA XREF: .rdata:6B1BDE0Co
		db 'WideCharToMultiByte',0
word_6B1BE2D0	dw 29Dh			; DATA XREF: .rdata:6B1BDE10o
		db 'RaiseException',0
		align 2
word_6B1BE2E2	dw 169h			; DATA XREF: .rdata:6B1BDE14o
		db 'GetLastError',0
		align 2
word_6B1BE2F2	dw 219h			; DATA XREF: .rdata:6B1BDE18o
		db 'InitializeCriticalSection',0
word_6B1BE30E	dw 7Ah			; DATA XREF: .rdata:6B1BDE1Co
		db 'DeleteCriticalSection',0
word_6B1BE326	dw 3C0h			; DATA XREF: .rdata:6B1BDE20o
		db 'lstrlenW',0
		align 2
word_6B1BE332	dw 3BFh			; DATA XREF: .rdata:6B1BDE24o
		db 'lstrlenA',0
		align 2
word_6B1BE33E	dw 348h			; DATA XREF: .rdata:6B1BDE28o
		db 'SizeofResource',0
		align 10h
word_6B1BE350	dw 25Bh			; DATA XREF: .rdata:6B1BDE2Co
		db 'LockResource',0
		align 10h
word_6B1BE360	dw 24Dh			; DATA XREF: .rdata:6B1BDE30o
		db 'LoadResource',0
		align 10h
word_6B1BE370	dw 0DAh			; DATA XREF: .rdata:6B1BDE34o
		db 'FindResourceA',0
word_6B1BE380	dw 0DBh			; DATA XREF: .rdata:6B1BDE38o
		db 'FindResourceExA',0
word_6B1BE392	dw 222h			; DATA XREF: .rdata:6B1BDE3Co
		db 'InterlockedIncrement',0
		align 2
word_6B1BE3AA	dw 21Eh			; DATA XREF: .rdata:6B1BDE40o
		db 'InterlockedDecrement',0
		align 2
word_6B1BE3C2	dw 0EFh			; DATA XREF: .rdata:6B1BDE44o
		db 'FreeLibrary',0
word_6B1BE3D0	dw 198h			; DATA XREF: .rdata:6B1BDE48o
		db 'GetProcAddress',0
		align 2
word_6B1BE3E2	dw 248h			; DATA XREF: .rdata:6B1BDE4Co
		db 'LoadLibraryA',0
		align 2
word_6B1BE3F2	dw 3B0h			; DATA XREF: .rdata:6B1BDE50o
		db 'lstrcatA',0
		align 2
word_6B1BE3FE	dw 1B9h			; DATA XREF: .rdata:6B1BDE54o
		db 'GetSystemDirectoryA',0
word_6B1BE414	dw 1F5h			; DATA XREF: .rdata:6B1BDE58o
		db 'GlobalFree',0
		align 2
word_6B1BE422	dw 200h			; DATA XREF: .rdata:6B1BDE5Co
		db 'GlobalUnlock',0
		align 2
word_6B1BE432	dw 1F9h			; DATA XREF: .rdata:6B1BDE60o
		db 'GlobalLock',0
		align 10h
word_6B1BE440	dw 1EEh			; DATA XREF: .rdata:6B1BDE64o
		db 'GlobalAlloc',0
word_6B1BE44E	dw 1FDh			; DATA XREF: .rdata:6B1BDE68o
		db 'GlobalSize',0
		align 4
word_6B1BE45C	dw 16Bh			; DATA XREF: .rdata:6B1BDE6Co
		db 'GetLocalTime',0
		align 4
word_6B1BE46C	dw 397h			; DATA XREF: .rdata:6B1BDE70o
		db 'WriteFile',0
word_6B1BE478	dw 2ABh			; DATA XREF: .rdata:6B1BDE74o
		db 'ReadFile',0
		align 4
word_6B1BE484	dw 13Eh			; DATA XREF: .rdata:6B1BDE78o
		db 'GetCurrentThreadId',0
		align 2
word_6B1BE49A	dw 108h			; DATA XREF: .rdata:6B1BDE7Co
		db 'GetCommandLineA',0
word_6B1BE4AC	dw 131h			; DATA XREF: .rdata:6B1BDE80o
		db 'GetConsoleTitleA',0
		align 10h
word_6B1BE4C0	dw 189h			; DATA XREF: .rdata:6B1BDE84o
		db 'GetNumberOfConsoleInputEvents',0
word_6B1BE4E0	dw 2A0h			; DATA XREF: .rdata:6B1BDE88o
		db 'ReadConsoleInputA',0
word_6B1BE4F4	dw 2FBh			; DATA XREF: .rdata:6B1BDE8Co
		db 'SetConsoleTitleA',0
		align 4
word_6B1BE508	dw 0ECh			; DATA XREF: .rdata:6B1BDE90o
		db 'FreeConsole',0
word_6B1BE516	dw 2F2h			; DATA XREF: .rdata:6B1BDE94o
		db 'SetConsoleMode',0
		align 4
word_6B1BE528	dw 2E3h			; DATA XREF: .rdata:6B1BDE98o
		db 'SetConsoleCtrlHandler',0
word_6B1BE540	dw 12Bh			; DATA XREF: .rdata:6B1BDE9Co
		db 'GetConsoleMode',0
		align 2
word_6B1BE552	dw 12Fh			; DATA XREF: .rdata:6B1BDEA0o
		db 'GetConsoleScreenBufferInfo',0
		align 10h
word_6B1BE570	dw 1B1h			; DATA XREF: .rdata:6B1BDEA4o
		db 'GetStdHandle',0
		align 10h
word_6B1BE580	dw 9			; DATA XREF: .rdata:6B1BDEA8o
		db 'AllocConsole',0
		align 10h
word_6B1BE590	dw 32Ch			; DATA XREF: .rdata:6B1BDEACo
		db 'SetStdHandle',0
		align 10h
word_6B1BE5A0	dw 2E7h			; DATA XREF: .rdata:6B1BDEB0o
		db 'SetConsoleCursorPosition',0
		align 4
word_6B1BE5BC	dw 0BDh			; DATA XREF: .rdata:6B1BDEB4o
		db 'FillConsoleOutputAttribute',0
		align 2
word_6B1BE5DA	dw 0BEh			; DATA XREF: .rdata:6B1BDEB8o
		db 'FillConsoleOutputCharacterA',0
word_6B1BE5F8	dw 393h			; DATA XREF: .rdata:6B1BDEBCo
		db 'WriteConsoleOutputCharacterA',0
		align 4
word_6B1BE618	dw 2F9h			; DATA XREF: .rdata:6B1BDEC0o
		db 'SetConsoleScreenBufferSize',0
		align 2
word_6B1BE636	dw 2FAh			; DATA XREF: .rdata:6B1BDEC4o
		db 'SetConsoleTextAttribute',0
word_6B1BE650	dw 2E5h			; DATA XREF: .rdata:6B1BDEC8o
		db 'SetConsoleCursorInfo',0
		align 4
word_6B1BE668	dw 120h			; DATA XREF: .rdata:6B1BDECCo
		db 'GetConsoleCursorInfo',0
		align 10h
word_6B1BE680	dw 2E0h			; DATA XREF: .rdata:6B1BDED0o
		db 'SetConsoleActiveScreenBuffer',0
		align 10h
word_6B1BE6A0	dw 38Ch			; DATA XREF: .rdata:6B1BDED4o
		db 'WriteConsoleA',0
word_6B1BE6B0	dw 2FDh			; DATA XREF: .rdata:6B1BDED8o
		db 'SetConsoleWindowInfo',0
		align 4
word_6B1BE6C8	dw 44h			; DATA XREF: .rdata:6B1BDEDCo
		db 'CreateConsoleScreenBuffer',0
word_6B1BE6E4	dw 3B9h			; DATA XREF: .rdata:6B1BDEE0o
		db 'lstrcpyA',0
		align 10h
word_6B1BE6F0	dw 351h			; DATA XREF: .rdata:6B1BDEE4o
		db 'TerminateProcess',0
		align 4
word_6B1BE704	dw 13Ah			; DATA XREF: .rdata:6B1BDEE8o
		db 'GetCurrentProcess',0
word_6B1BE718	dw 13Bh			; DATA XREF: .rdata:6B1BDEECo
		db 'GetCurrentProcessId',0
word_6B1BE72E	dw 1CDh			; DATA XREF: .rdata:6B1BDEF0o
		db 'GetThreadContext',0
		align 2
word_6B1BE742	dw 13Dh			; DATA XREF: .rdata:6B1BDEF4o
		db 'GetCurrentThread',0
		align 2
word_6B1BE756	dw 8Fh			; DATA XREF: .rdata:6B1BDEF8o
		db 'EnterCriticalSection',0
		align 2
word_6B1BE76E	dw 247h			; DATA XREF: .rdata:6B1BDEFCo
		db 'LeaveCriticalSection',0
		align 2
word_6B1BE786	dw 2Eh			; DATA XREF: .rdata:6B1BDF00o
		db 'CloseHandle',0
word_6B1BE794	dw 310h			; DATA XREF: .rdata:6B1BDF04o
		db 'SetFilePointer',0
		align 2
word_6B1BE7A6	dw 4Dh			; DATA XREF: .rdata:6B1BDF08o
		db 'CreateFileA',0
word_6B1BE7B4	dw 175h			; DATA XREF: .rdata:6B1BDF0Co
		db 'GetModuleFileNameA',0
		align 2
word_6B1BE7CA	dw 283h			; DATA XREF: .rdata:6B1BDF10o
		db 'OutputDebugStringA',0
		align 10h
word_6B1BE7E0	dw 252h			; DATA XREF: .rdata:6B1BDF14o
		db 'LocalFree',0
word_6B1BE7EC	dw 0EAh			; DATA XREF: .rdata:6B1BDF18o
		db 'FormatMessageA',0
		align 2
word_6B1BE7FE	dw 33Dh			; DATA XREF: .rdata:6B1BDF1Co
		db 'SetUnhandledExceptionFilter',0
word_6B1BE81C	dw 0E5h			; DATA XREF: .rdata:6B1BDF20o
		db 'FlushFileBuffers',0
		align 10h
word_6B1BE830	dw 15Bh			; DATA XREF: .rdata:6B1BDF24o
		db 'GetFileSize',0
word_6B1BE83E	dw 305h			; DATA XREF: .rdata:6B1BDF28o
		db 'SetEndOfFile',0
		align 2
word_6B1BE84E	dw 7Ch			; DATA XREF: .rdata:6B1BDF2Co
		db 'DeleteFileA',0
word_6B1BE85C	dw 45h			; DATA XREF: .rdata:6B1BDF30o
		db 'CreateDirectoryA',0
		align 10h
word_6B1BE870	dw 156h			; DATA XREF: .rdata:6B1BDF34o
		db 'GetFileAttributesA',0
		align 2
word_6B1BE886	dw 8Ch			; DATA XREF: .rdata:6B1BDF38o
		db 'DuplicateHandle',0
word_6B1BE898	dw 177h			; DATA XREF: .rdata:6B1BDF3Co
		db 'GetModuleHandleA',0
		align 4
word_6B1BE8AC	dw 31Dh			; DATA XREF: .rdata:6B1BDF40o
		db 'SetLastError',0
		align 4
word_6B1BE8BC	dw 20Ch			; DATA XREF: .rdata:6B1BDF44o
		db 'HeapFree',0
		align 4
word_6B1BE8C8	dw 19Bh			; DATA XREF: .rdata:6B1BDF48o
		db 'GetProcessHeap',0
		align 2
word_6B1BE8DA	dw 378h			; DATA XREF: .rdata:6B1BDF4Co
		db 'VirtualFree',0
word_6B1BE8E8	dw 212h			; DATA XREF: .rdata:6B1BDF50o
		db 'HeapSize',0
		align 4
word_6B1BE8F4	dw 206h			; DATA XREF: .rdata:6B1BDF54o
		db 'HeapAlloc',0
word_6B1BE900	dw 375h			; DATA XREF: .rdata:6B1BDF58o
		db 'VirtualAlloc',0
		align 10h
word_6B1BE910	dw 1BBh			; DATA XREF: .rdata:6B1BDF5Co
		db 'GetSystemInfo',0
word_6B1BE920	dw 210h			; DATA XREF: .rdata:6B1BDF60o
		db 'HeapReAlloc',0
word_6B1BE92E	dw 249h			; DATA XREF: .rdata:6B1BDF64o
		db 'LoadLibraryExA',0
		align 10h
word_6B1BE940	dw 24Eh			; DATA XREF: .rdata:6B1BDF68o
		db 'LocalAlloc',0
		align 2
word_6B1BE94E	dw 385h			; DATA XREF: .rdata:6B1BDF6Co
		db 'WaitForSingleObject',0
word_6B1BE964	dw 30Ah			; DATA XREF: .rdata:6B1BDF70o
		db 'SetErrorMode',0
		align 4
word_6B1BE974	dw 24h			; DATA XREF: .rdata:6B1BDF74o
		db 'CancelIo',0
		align 10h
word_6B1BE980	dw 1E9h			; DATA XREF: .rdata:6B1BDF78o
		db 'GetWindowsDirectoryA',0
		align 4
word_6B1BE998	dw 172h			; DATA XREF: .rdata:6B1BDF7Co
		db 'GetLongPathNameA',0
		align 4
word_6B1BE9AC	dw 1ADh			; DATA XREF: .rdata:6B1BDF80o
		db 'GetShortPathNameA',0
word_6B1BE9C0	dw 383h			; DATA XREF: .rdata:6B1BDF84o
		db 'WaitForMultipleObjects',0
		align 2
word_6B1BE9DA	dw 1D5h			; DATA XREF: .rdata:6B1BDF88o
		db 'GetTickCount',0
		align 2
word_6B1BE9EA	dw 384h			; DATA XREF: .rdata:6B1BDF8Co
		db 'WaitForMultipleObjectsEx',0
		align 2
word_6B1BEA06	dw 35Eh			; DATA XREF: .rdata:6B1BDF90o
		db 'TryEnterCriticalSection',0
word_6B1BEA20	dw 2B9h			; DATA XREF: .rdata:6B1BDF94o
		db 'ReleaseSemaphore',0
		align 4
word_6B1BEA34	dw 2B8h			; DATA XREF: .rdata:6B1BDF98o
		db 'ReleaseMutex',0
		align 4
word_6B1BEA44	dw 30Bh			; DATA XREF: .rdata:6B1BDF9Co
		db 'SetEvent',0
		align 10h
word_6B1BEA50	dw 291h			; DATA XREF: .rdata:6B1BDFA0o
		db 'PulseEvent',0
		align 2
word_6B1BEA5E	dw 2C4h			; DATA XREF: .rdata:6B1BDFA4o
		db 'ResetEvent',0
		align 4
word_6B1BEA6C	dw 65h			; DATA XREF: .rdata:6B1BDFA8o
		db 'CreateSemaphoreA',0
		align 10h
word_6B1BEA80	dw 27Eh			; DATA XREF: .rdata:6B1BDFACo
		db 'OpenSemaphoreA',0
		align 2
word_6B1BEA92	dw 5Ah			; DATA XREF: .rdata:6B1BDFB0o
		db 'CreateMutexA',0
		align 2
word_6B1BEAA2	dw 27Ah			; DATA XREF: .rdata:6B1BDFB4o
		db 'OpenMutexA',0
		align 10h
word_6B1BEAB0	dw 49h			; DATA XREF: .rdata:6B1BDFB8o
		db 'CreateEventA',0
		align 10h
word_6B1BEAC0	dw 273h			; DATA XREF: .rdata:6B1BDFBCo
		db 'OpenEventA',0
		align 2
word_6B1BEACE	dw 27Ch			; DATA XREF: .rdata:6B1BDFC0o
		db 'OpenProcess',0
word_6B1BEADC	dw 1BEh			; DATA XREF: .rdata:6B1BDFC4o
		db 'GetSystemTime',0
word_6B1BEAEC	dw 34Bh			; DATA XREF: .rdata:6B1BDFC8o
		db 'SuspendThread',0
word_6B1BEAFC	dw 2C7h			; DATA XREF: .rdata:6B1BDFCCo
		db 'ResumeThread',0
		align 4
word_6B1BEB0C	dw 338h			; DATA XREF: .rdata:6B1BDFD0o
		db 'SetThreadPriority',0
word_6B1BEB20	dw 1D1h			; DATA XREF: .rdata:6B1BDFD4o
		db 'GetThreadPriority',0
word_6B1BEB34	dw 0B0h			; DATA XREF: .rdata:6B1BDFD8o
		db 'ExitThread',0
		align 2
word_6B1BEB42	dw 69h			; DATA XREF: .rdata:6B1BDFDCo
		db 'CreateThread',0
		align 2
word_6B1BEB52	dw 352h			; DATA XREF: .rdata:6B1BDFE0o
		db 'TerminateThread',0
word_6B1BEB64	dw 220h			; DATA XREF: .rdata:6B1BDFE4o
		db 'InterlockedExchangeAdd',0
		align 2
aKernel32_dll	db 'KERNEL32.dll',0     ; DATA XREF: .rdata:6B1BDD24o
		align 4
word_6B1BEB8C	dw 2B2h			; DATA XREF: .rdata:off_6B1BE154o
		db 'UnregisterClassA',0
		align 10h
word_6B1BEBA0	dw 2D5h			; DATA XREF: .rdata:6B1BE158o
		db 'wsprintfA',0
word_6B1BEBAC	dw 2Ah			; DATA XREF: .rdata:6B1BE15Co
		db 'CharNextA',0
word_6B1BEBB8	dw 2Dh			; DATA XREF: .rdata:6B1BE164o
		db 'CharPrevA',0
word_6B1BEBC4	dw 204h			; DATA XREF: .rdata:6B1BE1A8o
		db 'PostThreadMessageA',0
		align 2
word_6B1BEBDA	dw 201h			; DATA XREF: .rdata:6B1BE1A4o
		db 'PostMessageA',0
		align 2
word_6B1BEBEA	dw 99h			; DATA XREF: .rdata:6B1BE1A0o
		db 'DestroyWindow',0
word_6B1BEBFA	dw 0A1h			; DATA XREF: .rdata:6B1BE19Co
		db 'DispatchMessageA',0
		align 2
word_6B1BEC0E	dw 2A9h			; DATA XREF: .rdata:6B1BE198o
		db 'TranslateMessage',0
		align 2
word_6B1BEC22	dw 13Ah			; DATA XREF: .rdata:6B1BE194o
		db 'GetMessageA',0
word_6B1BEC30	dw 27Fh			; DATA XREF: .rdata:6B1BE160o
		db 'SetWindowLongA',0
		align 2
word_6B1BEC42	dw 8Eh			; DATA XREF: .rdata:6B1BE190o
		db 'DefWindowProcA',0
		align 4
word_6B1BEC54	dw 16Eh			; DATA XREF: .rdata:6B1BE18Co
		db 'GetWindowLongA',0
		align 2
word_6B1BEC66	dw 60h			; DATA XREF: .rdata:6B1BE188o
		db 'CreateWindowExA',0
word_6B1BEC78	dw 216h			; DATA XREF: .rdata:6B1BE184o
		db 'RegisterClassExA',0
		align 4
word_6B1BEC8C	dw 0F7h			; DATA XREF: .rdata:6B1BE180o
		db 'GetClassInfoExA',0
word_6B1BEC9E	dw 15Dh			; DATA XREF: .rdata:6B1BE17Co
		db 'GetSystemMetrics',0
		align 2
word_6B1BECB2	dw 0A2h			; DATA XREF: .rdata:6B1BE178o
		db 'DispatchMessageW',0
		align 2
word_6B1BECC6	dw 13Eh			; DATA XREF: .rdata:6B1BE174o
		db 'GetMessageW',0
word_6B1BECD4	dw 1B0h			; DATA XREF: .rdata:6B1BE170o
		db 'IsWindowUnicode',0
word_6B1BECE6	dw 1FFh			; DATA XREF: .rdata:6B1BE16Co
		db 'PeekMessageA',0
		align 2
word_6B1BECF6	dw 1EDh			; DATA XREF: .rdata:6B1BE168o
		db 'MsgWaitForMultipleObjectsEx',0
aUser32_dll	db 'USER32.dll',0       ; DATA XREF: .rdata:6B1BDD38o
		align 10h
word_6B1BED20	dw 0C4h			; DATA XREF: .rdata:off_6B1BE130o
		db 'SHGetSpecialFolderPathA',0
aShell32_dll	db 'SHELL32.dll',0      ; DATA XREF: .rdata:6B1BDD4Co
word_6B1BED46	dw 0F2h			; DATA XREF: .rdata:6B1BE248o
		db 'OleLoadFromStream',0
word_6B1BED5A	dw 82h			; DATA XREF: .rdata:off_6B1BE22Co
		db 'CreateStreamOnHGlobal',0
word_6B1BED72	dw 91h			; DATA XREF: .rdata:6B1BE230o
		db 'GetHGlobalFromStream',0
		align 2
word_6B1BED8A	dw 0FEh			; DATA XREF: .rdata:6B1BE234o
		db 'OleSaveToStream',0
word_6B1BED9C	dw 3Bh			; DATA XREF: .rdata:6B1BE238o
		db 'CoInitializeEx',0
		align 2
word_6B1BEDAE	dw 68h			; DATA XREF: .rdata:6B1BE23Co
		db 'CoUninitialize',0
		align 10h
word_6B1BEDC0	dw 10h			; DATA XREF: .rdata:6B1BE240o
		db 'CoCreateInstance',0
		align 4
word_6B1BEDD4	dw 1Ch			; DATA XREF: .rdata:6B1BE244o
		db 'CoFreeUnusedLibraries',0
aOle32_dll	db 'ole32.dll',0        ; DATA XREF: .rdata:6B1BDD60o
aOleaut32_dll	db 'OLEAUT32.dll',0     ; DATA XREF: .rdata:6B1BDD74o
		align 4
word_6B1BEE04	dw 151h			; DATA XREF: .rdata:6B1BE008o
		db '??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Q'
		db 'AE@ABV01@@Z',0
		align 4
word_6B1BEE54	dw 21Fh			; DATA XREF: .rdata:6B1BE004o
		db '??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Q'
		db 'AE@XZ',0
		align 2
word_6B1BEE9E	dw 158h			; DATA XREF: .rdata:6B1BE000o
		db '??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Q'
		db 'AE@PBD@Z',0
word_6B1BEEEA	dw 0AA1h		; DATA XREF: .rdata:off_6B1BDFFCo
		db '?sync_with_stdio@ios_base@std@@SA_N_N@Z',0
aMsvcp71_dll	db 'MSVCP71.dll',0      ; DATA XREF: .rdata:6B1BDD88o
word_6B1BEF20	dw 4DAh			; DATA XREF: .rdata:6B1BE00Co
		db '?_Nomemory@std@@YAXXZ',0
word_6B1BEF38	dw 10Dh			; DATA XREF: .rdata:6B1BE144o
		db 'StrTrimA',0
		align 4
word_6B1BEF44	dw 74h			; DATA XREF: .rdata:6B1BE140o
		db 'PathSkipRootA',0
word_6B1BEF54	dw 50h			; DATA XREF: .rdata:6B1BE13Co
		db 'PathIsUNCA',0
		align 2
word_6B1BEF62	dw 14h			; DATA XREF: .rdata:off_6B1BE138o
		db 'PathAddBackslashA',0
word_6B1BEF76	dw 8Dh			; DATA XREF: .rdata:6B1BE148o
		db 'SHDeleteKeyA',0
		align 2
word_6B1BEF86	dw 8Bh			; DATA XREF: .rdata:6B1BE14Co
		db 'SHDeleteEmptyKeyA',0
aShlwapi_dll	db 'SHLWAPI.dll',0      ; DATA XREF: .rdata:6B1BDD9Co
word_6B1BEFA6	dw 2DFh			; DATA XREF: .rdata:6B1BE0B0o
		db 'malloc',0
		align 10h
word_6B1BEFB0	dw 2ACh			; DATA XREF: .rdata:6B1BE0ACo
		db 'free',0
		align 4
word_6B1BEFB8	dw 0F1h			; DATA XREF: .rdata:6B1BE0A8o
		db '_except_handler3',0
		align 4
word_6B1BEFCC	dw 44h			; DATA XREF: .rdata:6B1BE0A4o
		db '_CxxThrowException',0
		align 2
word_6B1BEFE2	dw 2E7h			; DATA XREF: .rdata:6B1BE0A0o
		db 'memset',0
		align 4
word_6B1BEFEC	dw 51h			; DATA XREF: .rdata:6B1BE098o
		db '__CxxFrameHandler',0
word_6B1BF000	dw 12h			; DATA XREF: .rdata:6B1BE094o
		db '??3@YAXPAX@Z',0
		align 10h
word_6B1BF010	dw 0Fh			; DATA XREF: .rdata:6B1BE090o
		db '??1exception@@UAE@XZ',0
		align 4
word_6B1BF028	dw 0Bh			; DATA XREF: .rdata:6B1BE08Co
		db '??0exception@@QAE@XZ',0
		align 10h
word_6B1BF040	dw 192h			; DATA XREF: .rdata:6B1BE088o
		db '_mbsinc',0
word_6B1BF04A	dw 190h			; DATA XREF: .rdata:6B1BE084o
		db '_mbsicmp',0
		align 2
word_6B1BF056	dw 223h			; DATA XREF: .rdata:6B1BE080o
		db '_vscprintf',0
		align 4
word_6B1BF064	dw 32Ah			; DATA XREF: .rdata:6B1BE024o
		db 'vsprintf',0
		align 10h
word_6B1BF070	dw 2E5h			; DATA XREF: .rdata:6B1BE0C4o
		db 'memcpy',0
		align 2
word_6B1BF07A	dw 2E6h			; DATA XREF: .rdata:6B1BE0C8o
		db 'memmove',0
word_6B1BF084	dw 30Ch			; DATA XREF: .rdata:6B1BE09Co
		db 'strlen',0
		align 2
word_6B1BF08E	dw 18Ah			; DATA XREF: .rdata:6B1BE0D0o
		db '_mbscmp',0
word_6B1BF098	dw 0Ah			; DATA XREF: .rdata:6B1BE0B4o
		db '??0exception@@QAE@ABV0@@Z',0
word_6B1BF0B4	dw 1C5h			; DATA XREF: .rdata:6B1BE0B8o
		db '_purecall',0
word_6B1BF0C0	dw 32h			; DATA XREF: .rdata:6B1BE0BCo
		db '?what@exception@@UBEPBDXZ',0
word_6B1BF0DC	dw 9			; DATA XREF: .rdata:6B1BE0E0o
		db '??0exception@@QAE@ABQBD@Z',0
word_6B1BF0F8	dw 2E4h			; DATA XREF: .rdata:6B1BE0DCo
		db 'memcmp',0
		align 2
word_6B1BF102	dw 334h			; DATA XREF: .rdata:6B1BE0D8o
		db 'wcslen',0
		align 4
word_6B1BF10C	dw 1ADh			; DATA XREF: .rdata:6B1BE0D4o
		db '_mbsstr',0
word_6B1BF116	dw 189h			; DATA XREF: .rdata:6B1BE07Co
		db '_mbschr',0
word_6B1BF120	dw 1ABh			; DATA XREF: .rdata:6B1BE078o
		db '_mbsspn',0
word_6B1BF12A	dw 18Dh			; DATA XREF: .rdata:6B1BE074o
		db '_mbscspn',0
		align 2
word_6B1BF136	dw 143h			; DATA XREF: .rdata:6B1BE070o
		db '_iob',0
		align 2
word_6B1BF13E	dw 0FEh			; DATA XREF: .rdata:6B1BE06Co
		db '_fdopen',0
word_6B1BF148	dw 1BAh			; DATA XREF: .rdata:6B1BE0CCo
		db '_open_osfhandle',0
word_6B1BF15A	dw 303h			; DATA XREF: .rdata:6B1BE064o
		db 'sscanf',0
		align 4
word_6B1BF164	dw 1F5h			; DATA XREF: .rdata:6B1BE060o
		db '_splitpath',0
		align 2
word_6B1BF172	dw 20h			; DATA XREF: .rdata:6B1BE05Co
		db '??_V@YAXPAX@Z',0
word_6B1BF182	dw 24h			; DATA XREF: .rdata:6B1BE058o
		db '?_set_new_mode@@YAHH@Z',0
		align 4
word_6B1BF19C	dw 23h			; DATA XREF: .rdata:6B1BE054o
		db '?_set_new_handler@@YAP6AHI@ZP6AHI@Z@Z',0
word_6B1BF1C4	dw 1DDh			; DATA XREF: .rdata:6B1BE050o
		db '_set_purecall_handler',0
word_6B1BF1DC	dw 1DFh			; DATA XREF: .rdata:6B1BE04Co
		db '_set_security_error_handler',0
word_6B1BF1FA	dw 9Bh			; DATA XREF: .rdata:6B1BE048o
		db '__security_error_handler',0
		align 2
word_6B1BF216	dw 0ECh			; DATA XREF: .rdata:6B1BE044o
		db '_endthreadex',0
		align 2
word_6B1BF226	dw 32Eh			; DATA XREF: .rdata:6B1BE040o
		db 'wcschr',0
		align 10h
word_6B1BF230	dw 224h			; DATA XREF: .rdata:6B1BE03Co
		db '_vscwprintf',0
word_6B1BF23E	dw 32Bh			; DATA XREF: .rdata:6B1BE038o
		db 'vswprintf',0
word_6B1BF24A	dw 19Ah			; DATA XREF: .rdata:6B1BE034o
		db '_mbsnbicmp',0
		align 4
word_6B1BF258	dw 0C9h			; DATA XREF: .rdata:6B1BE030o
		db '_beginthreadex',0
		align 2
word_6B1BF26A	dw 0CCh			; DATA XREF: .rdata:6B1BE02Co
		db '_callnewh',0
word_6B1BF276	dw 6Bh			; DATA XREF: .rdata:6B1BE028o
		db '__dllonexit',0
word_6B1BF284	dw 1B8h			; DATA XREF: .rdata:6B1BE020o
		db '_onexit',0
aMsvcr71_dll	db 'MSVCR71.dll',0      ; DATA XREF: .rdata:6B1BDDB0o
word_6B1BF29A	dw 10h			; DATA XREF: .rdata:6B1BE01Co
		db '??1type_info@@UAE@XZ',0
		align 2
word_6B1BF2B2	dw 2Eh			; DATA XREF: .rdata:6B1BE018o
		db '?terminate@@YAXXZ',0
word_6B1BF2C6	dw 13Fh			; DATA XREF: .rdata:off_6B1BE014o
		db '_initterm',0
word_6B1BF2D2	dw 0BBh			; DATA XREF: .rdata:6B1BE068o
		db '_adjust_fdiv',0
		align 2
word_6B1BF2E2	dw 4Ch			; DATA XREF: .rdata:6B1BE0C0o
		db '__CppXcptFilter',0
word_6B1BF2F4	dw 13h			; DATA XREF: .rdata:6B1BE1D8o
		db 'WSAConnect',0
		align 2
word_6B1BF302	dw 5			; DATA XREF: .rdata:6B1BE1E0o
		db 'WSAAccept',0
word_6B1BF30E	dw 34h			; DATA XREF: .rdata:6B1BE1E4o
		db 'WSARecv',0
word_6B1BF318	dw 1Eh			; DATA XREF: .rdata:6B1BE1E8o
		db 'WSAGetOverlappedResult',0
		align 2
word_6B1BF332	dw 39h			; DATA XREF: .rdata:6B1BE220o
		db 'WSASend',0
word_6B1BF33C	dw 41h			; DATA XREF: .rdata:6B1BE210o
		db 'WSASocketA',0
		align 2
aWs2_32_dll	db 'WS2_32.dll',0       ; DATA XREF: .rdata:6B1BDDC4o
		align 2
word_6B1BF356	dw 0Ah			; DATA XREF: .rdata:6B1BE1B4o
		db 'VerQueryValueA',0
		align 4
word_6B1BF368	dw 0			; DATA XREF: .rdata:6B1BE1B8o
		db 'GetFileVersionInfoA',0
word_6B1BF37E	dw 1			; DATA XREF: .rdata:off_6B1BE1B0o
		db 'GetFileVersionInfoSizeA',0
aVersion_dll	db 'VERSION.dll',0      ; DATA XREF: .rdata:6B1BDDD8o
word_6B1BF3A4	dw 20Ah			; DATA XREF: .rdata:6B1BDFE8o
		db 'HeapDestroy',0
word_6B1BF3B2	dw 0AFh			; DATA XREF: .rdata:6B1BDFECo
		db 'ExitProcess',0
word_6B1BF3C0	dw 299h			; DATA XREF: .rdata:6B1BDFF0o
		db 'QueryPerformanceCounter',0
word_6B1BF3DA	dw 1C0h			; DATA XREF: .rdata:6B1BDFF4o
		db 'GetSystemTimeAsFileTime',0
		align 10h
;
; Export directory for ccL35.dll
;
		dd 0			; Characteristics
		dd 4228F01Eh		; TimeDateStamp: Fri Mar 04 18:32:46 2005
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd rva aCcl35_dll	; Name
		dd 80h			; Base
		dd 6F3h			; NumberOfFunctions
		dd 0			; NumberOfNames
		dd rva off_6B1BF428	; AddressOfFunctions
		dd rva aCcl35_dll	; AddressOfNames
		dd rva aCcl35_dll	; AddressOfNameOrdinals
;
; Export Address Table for ccL35.dll
;
off_6B1BF428	dd rva Ordinal128, rva Ordinal129, rva Ordinal130, rva Ordinal131
					; DATA XREF: .rdata:6B1BF41Co
		dd rva Ordinal132, rva Ordinal133, rva Ordinal134, rva Ordinal135
		dd rva Ordinal136, rva Ordinal137, rva Ordinal138, rva Ordinal139
		dd rva Ordinal140, rva Ordinal141, rva Ordinal142, rva Ordinal143
		dd rva Ordinal144, rva Ordinal145, rva Ordinal146, rva Ordinal147
		dd rva Ordinal148, rva Ordinal149, rva Ordinal150, rva Ordinal151
		dd rva Ordinal152, rva Ordinal153, rva Ordinal154, rva Ordinal155
		dd rva Ordinal394, rva Ordinal157, rva Ordinal158, rva Ordinal159
		dd rva Ordinal160, rva Ordinal161, rva Ordinal162, rva Ordinal163
		dd rva Ordinal164, rva Ordinal165, rva Ordinal166, rva Ordinal167
		dd rva Ordinal168, rva Ordinal169, rva Ordinal170, rva Ordinal171
		dd rva Ordinal172, rva Ordinal173, rva Ordinal174, rva Ordinal175
		dd rva Ordinal176, rva Ordinal177, rva Ordinal178, rva Ordinal179
		dd rva Ordinal180, rva Ordinal181, rva Ordinal182, rva Ordinal183
		dd rva Ordinal184, rva Ordinal185, rva Ordinal186, rva Ordinal187
		dd rva Ordinal188, rva Ordinal189, rva Ordinal190, rva Ordinal191
		dd rva Ordinal192, rva Ordinal193, rva Ordinal194, rva Ordinal195
		dd rva Ordinal196, rva Ordinal197, rva Ordinal198, rva Ordinal199
		dd rva Ordinal200, rva Ordinal394, rva Ordinal157, rva Ordinal203
		dd rva Ordinal204, rva Ordinal315, rva Ordinal316, rva Ordinal317
		dd rva Ordinal318, rva Ordinal209, rva Ordinal320, rva Ordinal321
		dd rva Ordinal322, rva Ordinal213, rva Ordinal214, rva Ordinal215
		dd rva Ordinal326, rva Ordinal327, rva Ordinal218, rva Ordinal219
		dd rva Ordinal220, rva Ordinal221, rva Ordinal222, rva Ordinal333
		dd rva Ordinal224, rva Ordinal225, rva Ordinal336, rva Ordinal227
		dd rva Ordinal228, rva Ordinal229, rva Ordinal230, rva Ordinal341
		dd rva Ordinal232, rva Ordinal343, rva Ordinal344, rva Ordinal345
		dd rva Ordinal236, rva Ordinal237, rva Ordinal238, rva Ordinal349
		dd rva Ordinal240, rva Ordinal241, rva Ordinal352, rva Ordinal353
		dd rva Ordinal354, rva Ordinal355, rva Ordinal356, rva Ordinal247
		dd rva Ordinal248, rva Ordinal249, rva Ordinal250, rva Ordinal251
		dd rva Ordinal252, rva Ordinal253, rva Ordinal254, rva Ordinal255
		dd rva Ordinal256, rva Ordinal257, rva Ordinal258, rva Ordinal259
		dd rva Ordinal260, rva Ordinal261, rva Ordinal262, rva Ordinal263
		dd rva Ordinal264, rva Ordinal265, rva Ordinal266, rva Ordinal361
		dd rva Ordinal268, rva Ordinal269, rva Ordinal364, rva Ordinal365
		dd rva Ordinal272, rva Ordinal273, rva Ordinal274, rva Ordinal275
		dd rva Ordinal276, rva Ordinal277, rva Ordinal278, rva Ordinal279
		dd rva Ordinal515, rva Ordinal375, rva Ordinal282, rva Ordinal377
		dd rva Ordinal284, rva Ordinal285, rva Ordinal286, rva Ordinal287
		dd rva Ordinal288, rva Ordinal289, rva Ordinal290, rva Ordinal291
		dd rva Ordinal292, rva Ordinal293, rva Ordinal294, rva Ordinal295
		dd rva Ordinal296, rva Ordinal297, rva Ordinal298, rva Ordinal299
		dd rva Ordinal300, rva Ordinal301, rva Ordinal302, rva Ordinal303
		dd rva Ordinal304, rva Ordinal305, rva Ordinal306, rva Ordinal307
		dd rva Ordinal308, rva Ordinal309, rva Ordinal310, rva Ordinal394
		dd rva Ordinal157, rva Ordinal203, rva Ordinal204, rva Ordinal315
		dd rva Ordinal316, rva Ordinal317, rva Ordinal318, rva Ordinal209
		dd rva Ordinal320, rva Ordinal321, rva Ordinal322, rva Ordinal213
		dd rva Ordinal214, rva Ordinal215, rva Ordinal326, rva Ordinal327
		dd rva Ordinal218, rva Ordinal219, rva Ordinal220, rva Ordinal221
		dd rva Ordinal222, rva Ordinal333, rva Ordinal224, rva Ordinal225
		dd rva Ordinal336, rva Ordinal227, rva Ordinal228, rva Ordinal229
		dd rva Ordinal230, rva Ordinal341, rva Ordinal232, rva Ordinal343
		dd rva Ordinal344, rva Ordinal345, rva Ordinal236, rva Ordinal237
		dd rva Ordinal238, rva Ordinal349, rva Ordinal240, rva Ordinal241
		dd rva Ordinal352, rva Ordinal353, rva Ordinal354, rva Ordinal355
		dd rva Ordinal356, rva Ordinal357, rva Ordinal358, rva Ordinal359
		dd rva Ordinal360, rva Ordinal361, rva Ordinal268, rva Ordinal269
		dd rva Ordinal364, rva Ordinal365, rva Ordinal366, rva Ordinal367
		dd rva Ordinal368, rva Ordinal369, rva Ordinal370, rva Ordinal371
		dd rva Ordinal372, rva Ordinal373, rva Ordinal515, rva Ordinal375
		dd rva Ordinal376, rva Ordinal377, rva Ordinal284, rva Ordinal379
		dd rva Ordinal380, rva Ordinal381, rva Ordinal382, rva Ordinal383
		dd rva Ordinal384, rva Ordinal385, rva Ordinal386, rva Ordinal387
		dd rva Ordinal388, rva Ordinal389, rva Ordinal390, rva Ordinal391
		dd rva Ordinal392, rva Ordinal393, rva Ordinal394, rva Ordinal157
		dd rva Ordinal396, rva Ordinal397, rva Ordinal398, rva Ordinal399
		dd rva Ordinal400, rva Ordinal401, rva Ordinal402, rva Ordinal403
		dd rva Ordinal404, rva Ordinal405, rva Ordinal406, rva Ordinal407
		dd rva Ordinal408, rva Ordinal409, rva Ordinal410, rva Ordinal411
		dd rva Ordinal515, rva Ordinal375, rva Ordinal414, rva Ordinal155
		dd rva Ordinal394, rva Ordinal157, rva Ordinal418, rva Ordinal419
		dd rva Ordinal420, rva Ordinal421, rva Ordinal422, rva Ordinal423
		dd rva Ordinal424, rva Ordinal425, rva Ordinal426, rva Ordinal427
		dd rva Ordinal428, rva Ordinal429, rva Ordinal430, rva Ordinal431
		dd rva Ordinal432, rva Ordinal433, rva Ordinal434, rva Ordinal435
		dd rva Ordinal436, rva Ordinal437, rva Ordinal438, rva Ordinal439
		dd rva Ordinal440, rva Ordinal441, rva Ordinal442, rva Ordinal1649
		dd rva Ordinal444, rva Ordinal445, rva Ordinal446, rva Ordinal447
		dd rva Ordinal1052, rva	Ordinal449, rva	Ordinal450, rva	Ordinal451
		dd rva Ordinal452, rva Ordinal453, rva Ordinal454, rva Ordinal455
		dd rva Ordinal456, rva Ordinal457, rva Ordinal458, rva Ordinal459
		dd rva Ordinal460, rva Ordinal461, rva Ordinal462, rva Ordinal463
		dd rva Ordinal464, rva Ordinal465, rva Ordinal466, rva Ordinal467
		dd rva Ordinal468, rva Ordinal469, rva Ordinal470, rva Ordinal471
		dd rva Ordinal472, rva Ordinal473, rva Ordinal474, rva Ordinal475
		dd rva Ordinal476, rva Ordinal477, rva Ordinal478, rva Ordinal479
		dd rva Ordinal394, rva Ordinal157, rva Ordinal482, rva Ordinal483
		dd rva Ordinal484, rva Ordinal485, rva Ordinal486, rva Ordinal487
		dd rva Ordinal488, rva Ordinal489, rva Ordinal490, rva Ordinal491
		dd rva Ordinal492, rva Ordinal493, rva Ordinal494, rva Ordinal495
		dd rva Ordinal496, rva Ordinal497, rva Ordinal498, rva Ordinal499
		dd rva Ordinal500, rva Ordinal501, rva Ordinal502, rva Ordinal503
		dd rva Ordinal504, rva Ordinal505, rva Ordinal506, rva Ordinal507
		dd rva Ordinal510, rva Ordinal509, rva Ordinal510, rva Ordinal511
		dd rva Ordinal512, rva Ordinal513, rva Ordinal514, rva Ordinal515
		dd rva Ordinal375, rva Ordinal517, rva Ordinal377, rva Ordinal284
		dd rva Ordinal520, rva Ordinal521, rva Ordinal522, rva Ordinal523
		dd rva Ordinal524, rva Ordinal525, rva Ordinal526, rva Ordinal527
		dd rva Ordinal528, rva Ordinal529, rva Ordinal530, rva Ordinal531
		dd rva Ordinal532, rva Ordinal533, rva Ordinal534, rva Ordinal535
		dd rva Ordinal536, rva Ordinal537, rva Ordinal538, rva Ordinal539
		dd rva Ordinal540, rva Ordinal541, rva Ordinal542, rva Ordinal543
		dd rva Ordinal544, rva Ordinal545, rva Ordinal546, rva Ordinal547
		dd rva Ordinal548, rva Ordinal549, rva Ordinal550, rva Ordinal551
		dd rva Ordinal552, rva Ordinal553, rva Ordinal554, rva Ordinal555
		dd rva Ordinal556, rva Ordinal557, rva Ordinal558, rva Ordinal559
		dd rva Ordinal560, rva Ordinal561, rva Ordinal562, rva Ordinal563
		dd rva Ordinal564, rva Ordinal565, rva Ordinal566, rva Ordinal567
		dd rva Ordinal568, rva Ordinal569, rva Ordinal570, rva Ordinal571
		dd rva Ordinal572, rva Ordinal573, rva Ordinal574, rva Ordinal575
		dd rva Ordinal576, rva Ordinal577, rva Ordinal578, rva Ordinal579
		dd rva Ordinal580, rva Ordinal581, rva Ordinal582, rva Ordinal583
		dd rva Ordinal584, rva Ordinal585, rva Ordinal586, rva Ordinal587
		dd rva Ordinal588, rva Ordinal589, rva Ordinal590, rva Ordinal591
		dd rva Ordinal592, rva Ordinal593, rva Ordinal594, rva Ordinal595
		dd rva Ordinal596, rva Ordinal597, rva Ordinal598, rva Ordinal599
		dd rva Ordinal600, rva Ordinal601, rva Ordinal602, rva Ordinal1105
		dd rva Ordinal1500, rva	Ordinal605, rva	Ordinal606, rva	Ordinal607
		dd rva Ordinal608, rva Ordinal609, rva Ordinal610, rva Ordinal611
		dd rva Ordinal612, rva Ordinal613, rva Ordinal614, rva Ordinal615
		dd rva Ordinal616, rva Ordinal617, rva Ordinal618, rva Ordinal619
		dd rva Ordinal620, rva Ordinal621, rva Ordinal622, rva Ordinal623
		dd rva Ordinal624, rva Ordinal625, rva Ordinal626, rva Ordinal627
		dd rva Ordinal628, rva Ordinal629, rva Ordinal630, rva Ordinal631
		dd rva Ordinal632, rva Ordinal633, rva Ordinal634, rva Ordinal635
		dd rva Ordinal636, rva Ordinal637, rva Ordinal638, rva Ordinal639
		dd rva Ordinal640, rva Ordinal641, rva Ordinal642, rva Ordinal643
		dd rva Ordinal644, rva Ordinal645, rva Ordinal646, rva Ordinal647
		dd rva Ordinal648, rva Ordinal649, rva Ordinal650, rva Ordinal651
		dd rva Ordinal652, rva Ordinal653, rva Ordinal654, rva Ordinal655
		dd rva Ordinal656, rva Ordinal657, rva Ordinal658, rva Ordinal659
		dd rva Ordinal660, rva Ordinal661, rva Ordinal662, rva Ordinal663
		dd rva Ordinal664, rva Ordinal665, rva Ordinal666, rva Ordinal667
		dd rva Ordinal668, rva Ordinal669, rva Ordinal670, rva Ordinal671
		dd rva Ordinal672, rva Ordinal673, rva Ordinal674, rva Ordinal675
		dd rva Ordinal676, rva Ordinal677, rva Ordinal678, rva Ordinal679
		dd rva Ordinal680, rva Ordinal681, rva Ordinal682, rva Ordinal683
		dd rva Ordinal684, rva Ordinal685, rva Ordinal686, rva Ordinal687
		dd rva Ordinal688, rva Ordinal689, rva Ordinal690, rva Ordinal691
		dd rva Ordinal692, rva Ordinal693, rva Ordinal1498, rva	Ordinal695
		dd rva Ordinal696, rva Ordinal697, rva Ordinal698, rva Ordinal699
		dd rva Ordinal700, rva Ordinal701, rva Ordinal702, rva Ordinal703
		dd rva Ordinal704, rva Ordinal705, rva Ordinal706, rva Ordinal707
		dd rva Ordinal708, rva Ordinal709, rva Ordinal710, rva Ordinal711
		dd rva Ordinal712, rva Ordinal713, rva Ordinal714, rva Ordinal715
		dd rva Ordinal716, rva Ordinal717, rva Ordinal718, rva Ordinal719
		dd rva Ordinal720, rva Ordinal721, rva Ordinal722, rva Ordinal723
		dd rva Ordinal724, rva Ordinal725, rva Ordinal726, rva Ordinal727
		dd rva Ordinal728, rva Ordinal729, rva Ordinal730, rva Ordinal731
		dd rva Ordinal732, rva Ordinal733, rva Ordinal734, rva Ordinal735
		dd rva Ordinal736, rva Ordinal737, rva Ordinal738, rva Ordinal739
		dd rva Ordinal740, rva Ordinal741, rva Ordinal742, rva Ordinal743
		dd rva Ordinal744, rva Ordinal745, rva Ordinal746, rva Ordinal747
		dd rva Ordinal748, rva Ordinal749, rva Ordinal750, rva Ordinal751
		dd rva Ordinal752, rva Ordinal753, rva Ordinal754, rva Ordinal755
		dd rva Ordinal756, rva Ordinal757, rva Ordinal758, rva Ordinal759
		dd rva Ordinal760, rva Ordinal761, rva Ordinal762, rva Ordinal763
		dd rva Ordinal764, 2 dup(rva Ordinal766), rva Ordinal767
		dd rva Ordinal768, rva Ordinal769, rva Ordinal770, rva Ordinal771
		dd rva Ordinal772, rva Ordinal773, rva Ordinal774, rva Ordinal775
		dd rva Ordinal776, rva Ordinal777, rva Ordinal778, rva Ordinal779
		dd rva Ordinal780, rva Ordinal781, rva Ordinal782, rva Ordinal783
		dd rva Ordinal1706, rva	Ordinal785, rva	Ordinal786, rva	Ordinal787
		dd rva Ordinal788, rva Ordinal789, rva Ordinal790, rva Ordinal791
		dd rva Ordinal792, rva Ordinal793, rva Ordinal794, rva Ordinal795
		dd rva Ordinal796, rva Ordinal797, rva Ordinal798, rva Ordinal799
		dd rva Ordinal800, rva Ordinal801, rva Ordinal802, rva Ordinal803
		dd rva Ordinal804, rva Ordinal805, rva Ordinal806, rva Ordinal807
		dd rva Ordinal808, rva Ordinal809, rva Ordinal810, rva Ordinal811
		dd rva Ordinal812, rva Ordinal813, rva Ordinal821, rva Ordinal815
		dd rva Ordinal816, rva Ordinal817, rva Ordinal818, rva Ordinal819
		dd rva Ordinal820, rva Ordinal821, rva Ordinal822, rva Ordinal823
		dd rva Ordinal824, 4 dup(rva Ordinal827), rva Ordinal829
		dd 4 dup(rva Ordinal830), rva Ordinal834, rva Ordinal835
		dd rva Ordinal836, rva Ordinal837, rva Ordinal838, rva Ordinal839
		dd rva Ordinal840, rva Ordinal841, rva Ordinal873, rva Ordinal843
		dd rva Ordinal844, rva Ordinal845, rva Ordinal846, rva Ordinal847
		dd rva Ordinal848, rva Ordinal849, rva Ordinal850, rva Ordinal851
		dd rva Ordinal852, rva Ordinal853, rva Ordinal854, rva Ordinal855
		dd rva Ordinal856, rva Ordinal857, rva Ordinal858, rva Ordinal859
		dd rva Ordinal860, rva Ordinal861, rva Ordinal862, rva Ordinal863
		dd rva Ordinal864, rva Ordinal865, rva Ordinal866, rva Ordinal867
		dd rva Ordinal868, rva Ordinal869, rva Ordinal1493, rva	Ordinal871
		dd rva Ordinal872, rva Ordinal873, rva Ordinal874, rva Ordinal875
		dd rva Ordinal998, rva Ordinal1799, rva	Ordinal878, rva	Ordinal879
		dd rva Ordinal880, rva Ordinal881, rva Ordinal882, rva Ordinal883
		dd rva Ordinal884, rva Ordinal885, rva Ordinal886, rva Ordinal887
		dd rva Ordinal888, rva Ordinal889, rva Ordinal890, rva Ordinal891
		dd rva Ordinal892, rva Ordinal893, rva Ordinal894, rva Ordinal895
		dd rva Ordinal896, rva Ordinal897, rva Ordinal898, rva Ordinal899
		dd rva Ordinal900, rva Ordinal901, rva Ordinal902, rva Ordinal903
		dd rva Ordinal904, rva Ordinal905, rva Ordinal906, rva Ordinal907
		dd rva Ordinal908, rva Ordinal909, rva Ordinal910, rva Ordinal911
		dd rva Ordinal912, rva Ordinal913, rva Ordinal914, rva Ordinal915
		dd rva Ordinal916, rva Ordinal917, rva Ordinal918, rva Ordinal919
		dd rva Ordinal920, rva Ordinal921, rva Ordinal922, rva Ordinal923
		dd rva Ordinal924, rva Ordinal925, rva Ordinal926, rva Ordinal927
		dd rva Ordinal928, rva Ordinal929, rva Ordinal930, rva Ordinal931
		dd rva Ordinal932, rva Ordinal933, rva Ordinal934, rva Ordinal935
		dd rva Ordinal936, rva Ordinal937, rva Ordinal938, rva Ordinal939
		dd rva Ordinal940, rva Ordinal941, rva Ordinal942, rva Ordinal943
		dd rva Ordinal944, rva Ordinal945, rva Ordinal946, rva Ordinal947
		dd rva Ordinal948, rva Ordinal949, rva Ordinal950, rva Ordinal951
		dd rva Ordinal952, rva Ordinal953, rva Ordinal954, rva Ordinal955
		dd rva Ordinal956, rva Ordinal957, rva Ordinal958, rva Ordinal959
		dd rva Ordinal960, rva Ordinal961, rva Ordinal962, rva Ordinal963
		dd rva Ordinal964, rva Ordinal965, rva Ordinal966, rva Ordinal967
		dd rva Ordinal968, rva Ordinal969, rva Ordinal970, rva Ordinal1649
		dd rva Ordinal972, rva Ordinal973, rva Ordinal974, rva Ordinal975
		dd rva Ordinal1679, rva	Ordinal977, rva	Ordinal978, rva	Ordinal1679
		dd rva Ordinal980, rva Ordinal981, rva Ordinal982, rva Ordinal983
		dd rva Ordinal984, rva Ordinal985, rva Ordinal986, rva Ordinal987
		dd rva Ordinal988, rva Ordinal989, rva Ordinal990, rva Ordinal991
		dd rva Ordinal992, rva Ordinal993, rva Ordinal994, rva Ordinal1095
		dd rva Ordinal1649, rva	Ordinal997, rva	Ordinal998, rva	Ordinal999
		dd rva Ordinal1623, rva	Ordinal1001, rva Ordinal1498, rva Ordinal1003
		dd rva Ordinal1499, rva	Ordinal1005, rva Ordinal1500, rva Ordinal1007
		dd rva Ordinal1105, rva	Ordinal1009, rva Ordinal1010, rva Ordinal1011
		dd rva Ordinal1854, rva	Ordinal1013, rva Ordinal1052, rva Ordinal1015
		dd rva Ordinal1493, rva	Ordinal1017, rva Ordinal1018, rva Ordinal1019
		dd rva Ordinal1020, rva	Ordinal1021, rva Ordinal1022, rva Ordinal1023
		dd rva Ordinal1024, rva	Ordinal1025, rva Ordinal1026, rva Ordinal1027
		dd rva Ordinal1028, rva	Ordinal1029, 2 dup(rva Ordinal1033)
		dd rva Ordinal1032, rva	Ordinal1033, rva Ordinal1034, rva Ordinal1035
		dd rva Ordinal1036, rva	Ordinal1037, rva Ordinal1052, rva Ordinal1039
		dd rva Ordinal1493, 2 dup(rva Ordinal1042), rva	Ordinal1043
		dd rva Ordinal1044, rva	Ordinal1045, rva Ordinal1046, rva Ordinal1047
		dd rva Ordinal1048, rva	Ordinal1049, rva Ordinal1050, rva Ordinal1649
		dd rva Ordinal1052, rva	Ordinal1053, rva Ordinal1054, rva Ordinal1055
		dd rva Ordinal1056, rva	Ordinal1057, rva Ordinal1058, rva Ordinal1059
		dd rva Ordinal1060, rva	Ordinal1061, rva Ordinal1062, rva Ordinal1063
		dd rva Ordinal1064, rva	Ordinal1065, rva Ordinal1066, rva Ordinal1067
		dd rva Ordinal1068, rva	Ordinal1069, rva Ordinal1070, rva Ordinal1071
		dd rva Ordinal1072, rva	Ordinal1073, rva Ordinal1074, rva Ordinal1075
		dd rva Ordinal1076, rva	Ordinal1077, rva Ordinal1078, rva Ordinal1079
		dd rva Ordinal1080, rva	Ordinal1081, rva Ordinal1082, rva Ordinal1083
		dd rva Ordinal1084, rva	Ordinal1085, rva Ordinal1086, rva Ordinal1087
		dd rva Ordinal1052, rva	Ordinal1089, rva Ordinal1090, rva Ordinal1635
		dd rva Ordinal1092, rva	Ordinal1635, rva Ordinal1052, rva Ordinal1095
		dd rva Ordinal1649, rva	Ordinal1097, rva Ordinal1010, rva Ordinal1099
		dd rva Ordinal1854, rva	Ordinal1101, rva Ordinal1493, rva Ordinal1103
		dd rva Ordinal1104, rva	Ordinal1105, rva Ordinal1106, rva Ordinal1107
		dd rva Ordinal1108, rva	Ordinal1109, rva Ordinal1110, rva Ordinal1649
		dd rva Ordinal1112, rva	Ordinal1113, rva Ordinal1114, rva Ordinal1115
		dd rva Ordinal1116, rva	Ordinal1117, rva Ordinal1118, rva Ordinal1119
		dd rva Ordinal1120, rva	Ordinal1121, rva Ordinal1122, rva Ordinal1123
		dd rva Ordinal1124, rva	Ordinal1125, rva Ordinal1126, rva Ordinal1127
		dd rva Ordinal1128, rva	Ordinal1129, rva Ordinal1130, rva Ordinal1131
		dd rva Ordinal1132, rva	Ordinal1133, rva Ordinal1052, rva Ordinal1135
		dd rva Ordinal1136, rva	Ordinal1137, rva Ordinal1138, rva Ordinal1139
		dd rva Ordinal1140, rva	Ordinal1141, rva Ordinal1142, rva Ordinal1143
		dd rva Ordinal1144, rva	Ordinal1145, rva Ordinal1146, rva Ordinal1147
		dd rva Ordinal1148, rva	Ordinal1149, rva Ordinal1150, rva Ordinal1151
		dd rva Ordinal1152, rva	Ordinal1153, rva Ordinal1154, rva Ordinal1649
		dd rva Ordinal1156, rva	Ordinal1157, rva Ordinal1158, rva Ordinal1159
		dd rva Ordinal1160, rva	Ordinal1161, rva Ordinal1162, rva Ordinal1163
		dd rva Ordinal1164, rva	Ordinal1165, rva Ordinal1166, rva Ordinal1167
		dd rva Ordinal1168, rva	Ordinal1169, rva Ordinal1170, rva Ordinal1171
		dd rva Ordinal1172, rva	Ordinal1173, rva Ordinal1174, rva Ordinal1679
		dd rva Ordinal1176, rva	Ordinal1177, rva Ordinal1679, rva Ordinal1179
		dd rva Ordinal1180, rva	Ordinal1181, rva Ordinal1182, rva Ordinal1183
		dd rva Ordinal1184, rva	Ordinal1185, rva Ordinal1186, rva Ordinal1187
		dd rva Ordinal1188, rva	Ordinal1189, rva Ordinal1190, 2	dup(rva	Ordinal1493)
		dd rva Ordinal1193, rva	Ordinal1194, rva Ordinal1195, rva Ordinal1196
		dd rva Ordinal1197, rva	Ordinal1198, rva Ordinal1199, rva Ordinal1200
		dd rva Ordinal1201, rva	Ordinal1202, rva Ordinal1203, rva Ordinal1204
		dd rva Ordinal1205, rva	Ordinal1206, rva Ordinal1052, rva Ordinal1493
		dd rva Ordinal1649, rva	Ordinal1210, rva Ordinal1211, rva Ordinal1212
		dd rva Ordinal1213, rva	Ordinal1214, rva Ordinal1215, rva Ordinal1216
		dd rva Ordinal1802, rva	Ordinal1218, rva Ordinal1219, rva Ordinal1220
		dd rva Ordinal1221, rva	Ordinal1222, rva Ordinal1649, rva Ordinal1224
		dd rva Ordinal1225, rva	Ordinal1226, rva Ordinal1227, rva Ordinal1228
		dd rva Ordinal1229, rva	Ordinal1230, rva Ordinal1231, rva Ordinal1232
		dd rva Ordinal1233, rva	Ordinal1234, rva Ordinal1235, rva Ordinal1236
		dd rva Ordinal1237, rva	Ordinal1238, rva Ordinal1239, rva Ordinal1240
		dd rva Ordinal1241, rva	Ordinal1105, rva Ordinal1243, rva Ordinal1493
		dd rva Ordinal1245, rva	Ordinal1246, rva Ordinal1105, rva Ordinal1500
		dd rva Ordinal1249, rva	Ordinal1250, rva Ordinal1251, rva Ordinal1252
		dd rva Ordinal1253, rva	Ordinal1254, rva Ordinal1679, rva Ordinal1256
		dd rva Ordinal1257, rva	Ordinal1679, rva Ordinal1259, rva Ordinal1260
		dd rva Ordinal1261, rva	Ordinal1262, rva Ordinal1263, rva Ordinal1264
		dd rva Ordinal1265, rva	Ordinal1266, rva Ordinal1267, rva Ordinal1268
		dd rva Ordinal1269, rva	Ordinal1270, rva Ordinal1271, rva Ordinal1272
		dd rva Ordinal1273, rva	Ordinal1274, rva Ordinal1275, rva Ordinal1276
		dd rva Ordinal1277, rva	Ordinal1278, rva Ordinal1279, rva Ordinal1280
		dd rva Ordinal1649, rva	Ordinal1282, rva Ordinal1283, rva Ordinal1284
		dd rva Ordinal1285, rva	Ordinal1286, rva Ordinal1287, rva Ordinal1288
		dd rva Ordinal1289, rva	Ordinal1290, rva Ordinal1291, rva Ordinal1292
		dd rva Ordinal1293, rva	Ordinal1294, rva Ordinal1295, rva Ordinal1296
		dd rva Ordinal1297, rva	Ordinal1298, rva Ordinal1299, rva Ordinal1300
		dd rva Ordinal1301, rva	Ordinal1302, rva Ordinal1303, rva Ordinal1304
		dd rva Ordinal1305, rva	Ordinal1306, rva Ordinal1307, rva Ordinal1308
		dd rva Ordinal1309, rva	Ordinal1310, rva Ordinal1311, rva Ordinal1312
		dd rva Ordinal1313, rva	Ordinal1314, rva Ordinal1052, rva Ordinal1316
		dd rva Ordinal1317, rva	Ordinal1318, rva Ordinal1319, rva Ordinal1649
		dd rva Ordinal1321, rva	Ordinal1322, rva Ordinal1323, rva Ordinal1324
		dd rva Ordinal1325, rva	Ordinal1326, rva Ordinal1327, rva Ordinal1328
		dd rva Ordinal1052, rva	Ordinal1635, rva Ordinal1331, rva Ordinal1332
		dd rva Ordinal1333, rva	Ordinal1334, rva Ordinal1335, rva Ordinal1336
		dd rva Ordinal1337, rva	Ordinal1338, rva Ordinal1339, rva Ordinal1342
		dd rva Ordinal1339, rva	Ordinal1342, rva Ordinal1343, rva Ordinal1344
		dd rva Ordinal1345, rva	Ordinal1346, rva Ordinal1347, rva Ordinal1348
		dd rva Ordinal1349, rva	Ordinal1350, rva Ordinal1351, rva Ordinal1352
		dd rva Ordinal1353, rva	Ordinal1354, rva Ordinal1355, rva Ordinal1356
		dd rva Ordinal1357, rva	Ordinal1052, rva Ordinal1359, rva Ordinal1360
		dd rva Ordinal1361, rva	Ordinal1362, rva Ordinal1363, rva Ordinal1364
		dd rva Ordinal1365, rva	Ordinal1366, rva Ordinal1367, rva Ordinal1368
		dd rva Ordinal1369, rva	Ordinal1370, 5 dup(rva Ordinal1374)
		dd 4 dup(rva Ordinal1376), rva Ordinal1380, rva	Ordinal1381
		dd rva Ordinal1382, rva	Ordinal1383, rva Ordinal1384, rva Ordinal1385
		dd rva Ordinal1386, rva	Ordinal1387, rva Ordinal1388, rva Ordinal1664
		dd rva Ordinal1390, rva	Ordinal1391, rva Ordinal1392, rva Ordinal1393
		dd rva Ordinal1394, rva	Ordinal1395, rva Ordinal1396, rva Ordinal1397
		dd rva Ordinal1398, rva	Ordinal1399, rva Ordinal1400, rva Ordinal1401
		dd rva Ordinal1402, rva	Ordinal1403, rva Ordinal1404, rva Ordinal1405
		dd rva Ordinal1406, rva	Ordinal1407, rva Ordinal1408, rva Ordinal1409
		dd rva Ordinal1410, rva	Ordinal1411, rva Ordinal1412, rva Ordinal1416
		dd rva Ordinal1414, rva	Ordinal829, 3 dup(rva Ordinal1416)
		dd rva Ordinal1419, rva	Ordinal1420, rva Ordinal829, rva Ordinal1422
		dd rva Ordinal1423, rva	Ordinal1424, rva Ordinal1425, rva Ordinal1426
		dd rva Ordinal1427, 2 dup(rva Ordinal1428), rva	Ordinal1430
		dd 2 dup(rva Ordinal1428), rva Ordinal1433, rva	Ordinal1434
		dd rva Ordinal1435, rva	Ordinal1436, rva Ordinal1437, rva Ordinal1438
		dd rva Ordinal1439, rva	Ordinal1440, 2 dup(rva Ordinal1649)
		dd rva Ordinal1443, rva	Ordinal1444, rva Ordinal1445, rva Ordinal1446
		dd rva Ordinal1447, rva	Ordinal1448, rva Ordinal1449, rva Ordinal1450
		dd rva Ordinal1451, rva	Ordinal1452, rva Ordinal1453, rva Ordinal1454
		dd rva Ordinal1455, rva	Ordinal1456, rva Ordinal1457, rva Ordinal1458
		dd rva Ordinal1459, rva	Ordinal1493, rva Ordinal1125, rva Ordinal1462
		dd rva Ordinal1463, rva	Ordinal1464, rva Ordinal1465, rva Ordinal1466
		dd rva Ordinal1467, rva	Ordinal1468, rva Ordinal1469, rva Ordinal1470
		dd rva Ordinal1471, rva	Ordinal1472, rva Ordinal1473, rva Ordinal1474
		dd rva Ordinal1475, rva	Ordinal1476, rva Ordinal1477, rva Ordinal1478
		dd rva Ordinal1479, rva	Ordinal1480, rva Ordinal1052, rva Ordinal1482
		dd rva Ordinal1483, rva	Ordinal1484, 2 dup(rva Ordinal1430)
		dd rva Ordinal1487, rva	Ordinal1488, rva Ordinal1489, rva Ordinal1490
		dd rva Ordinal1649, rva	Ordinal1052, rva Ordinal1493, rva Ordinal1105
		dd rva Ordinal1010, rva	Ordinal1854, rva Ordinal1623, rva Ordinal1498
		dd rva Ordinal1499, rva	Ordinal1500, rva Ordinal998, rva Ordinal1021
		dd rva Ordinal1503, rva	Ordinal821, rva	Ordinal1505, rva Ordinal1883
		dd rva Ordinal1507, rva	Ordinal1508, rva Ordinal1509, rva Ordinal1510
		dd rva Ordinal1511, rva	Ordinal1512, rva Ordinal1513, rva Ordinal1514
		dd rva Ordinal1515, rva	Ordinal1516, rva Ordinal1517, rva Ordinal1518
		dd rva Ordinal1519, rva	Ordinal1520, rva Ordinal1521, rva Ordinal1522
		dd rva Ordinal1523, rva	Ordinal1524, rva Ordinal1525, rva Ordinal1526
		dd rva Ordinal1527, rva	Ordinal1528, rva Ordinal1529, rva Ordinal1530
		dd rva Ordinal1531, rva	Ordinal1532, rva Ordinal1533, rva Ordinal1534
		dd rva Ordinal1535, rva	Ordinal1536, rva Ordinal1537, rva Ordinal1538
		dd rva Ordinal1539, rva	Ordinal1540, rva Ordinal1541, rva Ordinal1542
		dd rva Ordinal1543, rva	Ordinal1544, rva Ordinal1545, rva Ordinal1546
		dd rva Ordinal1547, rva	Ordinal1548, rva Ordinal1549, rva Ordinal1550
		dd rva Ordinal1551, rva	Ordinal1552, rva Ordinal1553, rva Ordinal1554
		dd rva Ordinal1555, rva	Ordinal1556, rva Ordinal1557, rva Ordinal1558
		dd rva Ordinal1559, rva	Ordinal1560, rva Ordinal1561, rva Ordinal1562
		dd rva Ordinal1563, rva	Ordinal1564, rva Ordinal1565, rva Ordinal1566
		dd rva Ordinal1567, rva	Ordinal1568, rva Ordinal1569, rva Ordinal1567
		dd rva Ordinal1571, rva	Ordinal1572, rva Ordinal1573, rva Ordinal1595
		dd rva Ordinal1596, rva	Ordinal1052, rva Ordinal1577, rva Ordinal1578
		dd rva Ordinal1579, rva	Ordinal1580, rva Ordinal1581, rva Ordinal1582
		dd rva Ordinal1583, rva	Ordinal1584, rva Ordinal1585, rva Ordinal1586
		dd rva Ordinal1587, rva	Ordinal1588, rva Ordinal1589, rva Ordinal1590
		dd rva Ordinal1591, rva	Ordinal1592, rva Ordinal1593, rva Ordinal1594
		dd rva Ordinal1595, rva	Ordinal1596, rva Ordinal1052, rva Ordinal1598
		dd rva Ordinal1599, rva	Ordinal1600, rva Ordinal1601, rva Ordinal1602
		dd rva Ordinal1052, rva	Ordinal1604, rva Ordinal1605, rva Ordinal1606
		dd rva Ordinal1607, rva	Ordinal1608, rva Ordinal1609, rva Ordinal1610
		dd rva Ordinal1611, rva	Ordinal1612, rva Ordinal1613, rva Ordinal1614
		dd rva Ordinal1615, rva	Ordinal1616, rva Ordinal1706, rva Ordinal1618
		dd rva Ordinal1619, rva	Ordinal1620, rva Ordinal1621, rva Ordinal1622
		dd rva Ordinal1623, rva	Ordinal1624, rva Ordinal1625, rva Ordinal829
		dd rva Ordinal1627, rva	Ordinal1628, rva Ordinal1629, rva Ordinal1649
		dd rva Ordinal1631, rva	Ordinal1632, rva Ordinal1633, rva Ordinal1634
		dd rva Ordinal1635, rva	Ordinal1636, rva Ordinal1637, rva Ordinal1649
		dd rva Ordinal1639, rva	Ordinal1640, rva Ordinal1641, rva Ordinal1649
		dd rva Ordinal1643, rva	Ordinal1644, rva Ordinal1633, rva Ordinal1635
		dd rva Ordinal1647, rva	Ordinal1648, rva Ordinal1649, rva Ordinal1650
		dd rva Ordinal1651, rva	Ordinal1652, rva Ordinal1649, rva Ordinal1654
		dd rva Ordinal1655, rva	Ordinal1633, rva Ordinal1657, rva Ordinal1658
		dd rva Ordinal1659, rva	Ordinal1660, rva Ordinal1661, rva Ordinal1635
		dd rva Ordinal1663, rva	Ordinal1664, rva Ordinal1649, rva Ordinal1666
		dd rva Ordinal1667, rva	Ordinal1668, rva Ordinal1669, rva Ordinal1670
		dd rva Ordinal1671, rva	Ordinal1672, rva Ordinal1673, rva Ordinal1674
		dd rva Ordinal1675, rva	Ordinal1676, rva Ordinal1677, rva Ordinal1678
		dd rva Ordinal1679, rva	Ordinal1680, rva Ordinal1681, rva Ordinal1682
		dd rva Ordinal1683, rva	Ordinal1679, rva Ordinal1685, rva Ordinal1686
		dd rva Ordinal1687, rva	Ordinal1688, rva Ordinal1689, rva Ordinal1690
		dd rva Ordinal1691, rva	Ordinal1893, rva Ordinal1693, rva Ordinal1694
		dd rva Ordinal1695, rva	Ordinal1696, rva Ordinal1697, rva Ordinal1698
		dd rva Ordinal1699, rva	Ordinal1700, rva Ordinal1701, rva Ordinal1702
		dd rva Ordinal1703, rva	Ordinal1704, rva Ordinal1705, rva Ordinal1706
		dd rva Ordinal1707, rva	Ordinal1708, rva Ordinal1709, rva Ordinal1710
		dd rva Ordinal1711, rva	Ordinal1712, rva Ordinal1713, rva Ordinal1714
		dd rva Ordinal1715, rva	Ordinal1716, rva Ordinal1717, rva Ordinal1718
		dd rva Ordinal1719, rva	Ordinal1720, rva Ordinal1721, rva Ordinal1722
		dd rva Ordinal1723, rva	Ordinal1724, rva Ordinal1725, rva Ordinal1726
		dd rva Ordinal1758, rva	Ordinal1759, rva Ordinal1729, rva Ordinal1730
		dd rva Ordinal1731, rva	Ordinal1732, rva Ordinal1733, rva Ordinal1734
		dd rva Ordinal1735, rva	Ordinal1736, rva Ordinal1737, rva Ordinal1738
		dd rva Ordinal1739, rva	Ordinal1740, rva Ordinal1741, rva Ordinal1742
		dd rva Ordinal1623, rva	Ordinal1854, rva Ordinal1745, rva Ordinal1746
		dd rva Ordinal1747, rva	Ordinal1748, rva Ordinal1749, rva Ordinal1750
		dd rva Ordinal1751, rva	Ordinal1752, rva Ordinal1753, rva Ordinal1754
		dd rva Ordinal1755, rva	Ordinal1756, rva Ordinal1757, rva Ordinal1758
		dd rva Ordinal1759, rva	Ordinal1760, rva Ordinal1761, rva Ordinal1762
		dd rva Ordinal1763, rva	Ordinal1764, rva Ordinal1765, rva Ordinal1766
		dd rva Ordinal1767, rva	Ordinal1768, rva Ordinal1769, rva Ordinal1770
		dd rva Ordinal1771, rva	Ordinal1772, rva Ordinal1773, rva Ordinal1774
		dd rva Ordinal1775, rva	Ordinal1776, rva Ordinal1777, rva Ordinal1778
		dd rva Ordinal1779, rva	Ordinal1780, rva Ordinal1781, rva Ordinal1649
		dd rva Ordinal1052, rva	Ordinal1784, rva Ordinal1785, rva Ordinal1786
		dd rva Ordinal1787, rva	Ordinal1788, rva Ordinal1789, rva Ordinal1790
		dd rva Ordinal1791, rva	Ordinal1792, rva Ordinal1793, rva Ordinal1794
		dd rva Ordinal1795, rva	Ordinal1796, rva Ordinal1212, rva Ordinal1798
		dd rva Ordinal1799, rva	Ordinal1800, rva Ordinal1801, rva Ordinal1802
		dd rva Ordinal1803, rva	Ordinal1804, rva Ordinal1805, rva Ordinal1806
		dd 2 dup(rva Ordinal1807), rva Ordinal1809, rva	Ordinal1810
		dd 2 dup(rva Ordinal1812), rva Ordinal1854, rva	Ordinal1814
		dd rva Ordinal1815, rva	Ordinal1816, rva Ordinal1817, rva Ordinal1818
		dd rva Ordinal1819, rva	Ordinal1820, rva Ordinal1821, rva Ordinal1822
		dd rva Ordinal1823, rva	Ordinal1824, rva Ordinal1825, rva Ordinal1826
		dd rva Ordinal1827, rva	Ordinal1828, rva Ordinal1829, rva Ordinal1830
		dd rva Ordinal1831, rva	Ordinal1832, rva Ordinal1833, rva Ordinal1834
		dd rva Ordinal1835, rva	Ordinal1836, rva Ordinal1837, rva Ordinal1838
		dd rva Ordinal1839, rva	Ordinal1840, rva Ordinal1841, rva Ordinal1842
		dd rva Ordinal1843, rva	Ordinal1844, rva Ordinal1845, rva Ordinal1846
		dd rva Ordinal1847, 2 dup(rva Ordinal1848), rva	Ordinal1850
		dd rva Ordinal1851, 2 dup(rva Ordinal1853), rva	Ordinal1854
		dd rva Ordinal1814, rva	Ordinal1856, rva Ordinal1857, rva Ordinal1858
		dd rva Ordinal1859, rva	Ordinal1860, rva Ordinal1861, rva Ordinal1862
		dd rva Ordinal1863, rva	Ordinal1864, rva Ordinal1865, rva Ordinal1866
		dd rva Ordinal1867, rva	Ordinal1827, rva Ordinal1869, rva Ordinal1870
		dd rva Ordinal1871, rva	Ordinal1872, rva Ordinal1873, rva Ordinal1874
		dd rva Ordinal1875, rva	Ordinal1876, rva Ordinal1877, rva Ordinal1878
		dd rva Ordinal1879, rva	Ordinal1880, rva Ordinal1881, rva Ordinal1706
		dd rva Ordinal1883, rva	Ordinal1884, rva Ordinal1018, rva Ordinal1886
		dd rva Ordinal1887, rva	Ordinal1888, rva Ordinal1408, rva Ordinal1890
		dd rva Ordinal1891, rva	Ordinal1892, rva Ordinal1893, rva Ordinal1894
		dd rva Ordinal1895, rva	Ordinal1896, rva Ordinal1897, rva Ordinal1898
		dd rva Ordinal1899, rva	Ordinal1900, rva Ordinal1901, rva Ordinal1902
		dd rva Ordinal1903, rva	Ordinal1904, rva Ordinal1905, rva Ordinal1906
aCcl35_dll	db 'ccL35.dll',0        ; DATA XREF: .rdata:6B1BF40Co
					; .rdata:6B1BF420o ...
		align 10h
_rdata		ends

; Section 3. (virtual address 00041000)
; Virtual size			: 000003C0 (	960.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00040200
; Flags	C0000040: Data Readable	Writable
; Alignment	: default
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 6B1C1000h
dword_6B1C1000	dd 0			; DATA XREF: _CRT_INIT(x,x,x)+65o
		dd offset ___security_init_cookie
		dd offset sub_6B1A9B99
		dd offset sub_6B1A9BAF
		dd offset sub_6B1A9BD7
		dd offset sub_6B1A9B73
		dd offset sub_6B1A9B8E
dword_6B1C101C	dd 5 dup(0)		; DATA XREF: _CRT_INIT(x,x,x)+5Eo
; volatile LONG	Target
Target		dd offset sub_6B1810B3	; DATA XREF: sub_6B1810B3+45o
					; sub_6B1810B3+50r ...
stru_6B1C1034	dq offset off_6B1BA540	; getInfoPtr ; DATA XREF: .rdata:6B1BA8FCo
					; .rdata:6B1BAADCo ...
		db '.?AVCAtlException@ATL@@',0; Name
off_6B1C1054	dd offset off_6B1BA540	; DATA XREF: .rdata:6B1BA988o
		dd 0
a_?avexception@	db '.?AVexception@@',0
off_6B1C106C	dd offset off_6B1BA540	; DATA XREF: .rdata:6B1BA9A4o
		dd 0
a_?avlogic_erro	db '.?AVlogic_error@std@@',0
		align 4
off_6B1C108C	dd offset off_6B1BA540	; DATA XREF: .rdata:6B1BA9C0o
		dd 0
a_?avlength_err	db '.?AVlength_error@std@@',0
		align 4
off_6B1C10AC	dd offset off_6B1BA540	; DATA XREF: .rdata:6B1BAA44o
		dd 0
a_?avout_of_ran	db '.?AVout_of_range@std@@',0
		align 4
off_6B1C10CC	dd offset off_6B1BA540	; DATA XREF: .rdata:6B1BAACCo
					; .rdata:6B1BABA4o ...
		dd 0
a_?avbad_alloc@	db '.?AVbad_alloc@std@@',0
off_6B1C10E8	dd offset off_6B1BA540	; DATA XREF: .rdata:6B1BB80Co
		align 10h
a_?avcarchiveex	db '.?AVCArchiveException@CArchive@ccLib@@',0
		align 4
off_6B1C1118	dd offset off_6B1BA540	; DATA XREF: .rdata:off_6B1BA698o
					; .rdata:6B1BA6D4o ...
		align 10h
a_?av_com_error	db '.?AV_com_error@@',0
		align 10h
___security_cookie dd 0BB40E64Eh	; DATA XREF: sub_6B18104E+6r
					; sub_6B1810B3+9r ...
off_6B1C1144	dd offset off_6B1BA540	; DATA XREF: .rdata:off_6B1BA654o
					; .rdata:6B1BA690o
		dd 0
a_?avtype_info@	db '.?AVtype_info@@',0
		align 10h
off_6B1C1160	dd offset sub_6B1A8F60	; DATA XREF: sub_6B1A8F50+7r
_data		ends

;
; Delayed imports from ADVAPI32.dll
;
; ===========================================================================

; Segment type:	Externs
; _idata
; PVOID	__stdcall FreeSid(PSID pSid)
		extrn FreeSid:dword	; CODE XREF: Ordinal605+18Ap
					; Ordinal605+197p ...
; BOOL __stdcall SetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR	pSecurityDescriptor, BOOL bDaclPresent,	PACL pDacl, BOOL bDaclDefaulted)
		extrn SetSecurityDescriptorDacl:dword ;	CODE XREF: Ordinal605+146p
					; Ordinal1249+43p
					; DATA XREF: ...
; BOOL __stdcall AddAccessAllowedAce(PACL pAcl,	DWORD dwAceRevision, DWORD AccessMask, PSID pSid)
		extrn AddAccessAllowedAce:dword	; CODE XREF: Ordinal605+114p
					; Ordinal605+127p
					; DATA XREF: ...
; BOOL __stdcall InitializeAcl(PACL pAcl, DWORD	nAclLength, DWORD dwAclRevision)
		extrn InitializeAcl:dword ; CODE XREF: Ordinal605+EBp
					; DATA XREF: Ordinal605+EBr ...
; BOOL __stdcall InitializeSecurityDescriptor(PSECURITY_DESCRIPTOR pSecurityDescriptor,	DWORD dwRevision)
		extrn InitializeSecurityDescriptor:dword ; CODE	XREF: Ordinal605+B5p
					; Ordinal1249+33p
					; DATA XREF: ...
; DWORD	__stdcall GetLengthSid(PSID pSid)
		extrn GetLengthSid:dword ; CODE	XREF: Ordinal605+69p
					; Ordinal605+A5p
					; DATA XREF: ...
; BOOL __stdcall AllocateAndInitializeSid(PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority, BYTE nSubAuthorityCount, DWORD nSubAuthority0, DWORD nSubAuthority1, DWORD nSubAuthority2, DWORD nSubAuthority3, DWORD nSubAuthority4, DWORD nSubAuthority5, DWORD nSubAuthority6, DWORD nSubAuthority7, PSID	*pSid)
		extrn AllocateAndInitializeSid:dword ; CODE XREF: Ordinal605+5Cp
					; Ordinal605+87p ...
; BOOL __stdcall DeregisterEventSource(HANDLE hEventLog)
		extrn DeregisterEventSource:dword ; CODE XREF: Ordinal1059+25p
					; DATA XREF: Ordinal1059+25r ...
; BOOL __stdcall ReportEventA(HANDLE hEventLog,	WORD wType, WORD wCategory, DWORD dwEventID, PSID lpUserSid, WORD wNumStrings, DWORD dwDataSize, LPCSTR	*lpStrings, LPVOID lpRawData)
		extrn ReportEventA:dword ; CODE	XREF: Ordinal1082+144p
					; DATA XREF: Ordinal1082+144r ...
; BOOL __stdcall LookupAccountNameA(LPCSTR lpSystemName, LPCSTR	lpAccountName, PSID Sid, LPDWORD cbSid,	LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse)
		extrn LookupAccountNameA:dword ; CODE XREF: Ordinal1082+D0p
					; Ordinal1082+108p
					; DATA XREF: ...
; BOOL __stdcall GetUserNameA(LPSTR lpBuffer, LPDWORD pcbBuffer)
		extrn GetUserNameA:dword ; CODE	XREF: Ordinal1082+86p
					; DATA XREF: Ordinal1082+86r ...
; HANDLE __stdcall RegisterEventSourceA(LPCSTR lpUNCServerName,	LPCSTR lpSourceName)
		extrn RegisterEventSourceA:dword ; CODE	XREF: Ordinal1058+38p
					; DATA XREF: Ordinal1058+38r ...
; BOOL __stdcall EqualSid(PSID pSid1, PSID pSid2)
		extrn EqualSid:dword	; CODE XREF: Ordinal1280+162p
					; Ordinal1279+19Fp
					; DATA XREF: ...
; BOOL __stdcall GetTokenInformation(HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass,	LPVOID TokenInformation, DWORD TokenInformationLength, PDWORD ReturnLength)
		extrn GetTokenInformation:dword	; CODE XREF: Ordinal1280+E3p
					; Ordinal1280+13Dp ...
; BOOL __stdcall OpenProcessToken(HANDLE ProcessHandle,	DWORD DesiredAccess, PHANDLE TokenHandle)
		extrn OpenProcessToken:dword ; CODE XREF: Ordinal1280+AEp
					; Ordinal1279+E9p
					; DATA XREF: ...
; BOOL __stdcall OpenThreadToken(HANDLE	ThreadHandle, DWORD DesiredAccess, BOOL	OpenAsSelf, PHANDLE TokenHandle)
		extrn OpenThreadToken:dword ; CODE XREF: Ordinal1280+88p
					; Ordinal1279+C3p
					; DATA XREF: ...
; BOOL __stdcall CheckTokenMembership(HANDLE TokenHandle, PSID SidToCheck, PBOOL IsMember)
		extrn __imp_CheckTokenMembership:dword ; DATA XREF: .text:6B1A8386o
					; CheckTokenMembershipr
; LSTATUS __stdcall RegCloseKey(HKEY hKey)
		extrn RegCloseKey:dword	; CODE XREF: Ordinal1322+Bp
					; DATA XREF: Ordinal1322+Br ...
; LSTATUS __stdcall RegDeleteValueA(HKEY hKey, LPCSTR lpValueName)
		extrn RegDeleteValueA:dword ; CODE XREF: Ordinal1328+Ap
					; DATA XREF: Ordinal1328+Ar ...
; LSTATUS __stdcall RegQueryValueExA(HKEY hKey,	LPCSTR lpValueName, LPDWORD lpReserved,	LPDWORD	lpType,	LPBYTE lpData, LPDWORD lpcbData)
		extrn RegQueryValueExA:dword ; CODE XREF: Ordinal1331+1Dp
					; Ordinal1337+26p ...
; LSTATUS __stdcall RegSetValueExA(HKEY	hKey, LPCSTR lpValueName, DWORD	Reserved, DWORD	dwType,	const BYTE *lpData, DWORD cbData)
		extrn RegSetValueExA:dword ; CODE XREF:	Ordinal1334+20p
					; Ordinal1338+15p ...
; LSTATUS __stdcall RegEnumValueA(HKEY hKey, DWORD dwIndex, LPSTR lpValueName, LPDWORD lpcchValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
		extrn RegEnumValueA:dword ; CODE XREF: Ordinal1345+1Ep
					; DATA XREF: Ordinal1345+1Er ...
; LSTATUS __stdcall RegEnumKeyExA(HKEY hKey, DWORD dwIndex, LPSTR lpName, LPDWORD lpcchName, LPDWORD lpReserved, LPSTR lpClass,	LPDWORD	lpcchClass, PFILETIME lpftLastWriteTime)
		extrn RegEnumKeyExA:dword ; CODE XREF: Ordinal1346+1Ep
					; DATA XREF: Ordinal1346+1Er ...
; LSTATUS __stdcall RegCreateKeyExA(HKEY hKey, LPCSTR lpSubKey,	DWORD Reserved,	LPSTR lpClass, DWORD dwOptions,	REGSAM samDesired, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition)
		extrn RegCreateKeyExA:dword ; CODE XREF: Ordinal1321+5Ep
					; DATA XREF: Ordinal1321+5Er ...
; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY	phkResult)
		extrn RegOpenKeyExA:dword ; CODE XREF: Ordinal1321+1Dp
					; DATA XREF: Ordinal1321+1Dr ...
; BOOL __stdcall CloseServiceHandle(SC_HANDLE hSCObject)
		extrn CloseServiceHandle:dword ; CODE XREF: Ordinal1362+11Bp
					; Ordinal1362+124p ...
; BOOL __stdcall ChangeServiceConfig2A(SC_HANDLE hService, DWORD dwInfoLevel, LPVOID lpInfo)
		extrn ChangeServiceConfig2A:dword ; CODE XREF: Ordinal1362+EBp
					; DATA XREF: Ordinal1362+EBr ...
; SC_HANDLE __stdcall CreateServiceA(SC_HANDLE hSCManager, LPCSTR lpServiceName, LPCSTR	lpDisplayName, DWORD dwDesiredAccess, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCSTR lpBinaryPathName, LPCSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCSTR	lpDependencies,	LPCSTR lpServiceStartName, LPCSTR lpPassword)
		extrn CreateServiceA:dword ; CODE XREF:	Ordinal1362+BAp
					; DATA XREF: Ordinal1362+BAr ...
; SC_HANDLE __stdcall OpenSCManagerA(LPCSTR lpMachineName, LPCSTR lpDatabaseName, DWORD	dwDesiredAccess)
		extrn OpenSCManagerA:dword ; CODE XREF:	Ordinal1362+2Fp
					; Ordinal1363+2Ap
					; DATA XREF: ...
; BOOL __stdcall DeleteService(SC_HANDLE hService)
		extrn DeleteService:dword ; CODE XREF: Ordinal1363+88p
					; DATA XREF: Ordinal1363+88r ...
; SC_HANDLE __stdcall OpenServiceA(SC_HANDLE hSCManager, LPCSTR	lpServiceName, DWORD dwDesiredAccess)
		extrn OpenServiceA:dword ; CODE	XREF: Ordinal1363+57p
					; DATA XREF: Ordinal1363+57r ...
; BOOL __stdcall SetServiceStatus(SERVICE_STATUS_HANDLE	hServiceStatus,	LPSERVICE_STATUS lpServiceStatus)
		extrn SetServiceStatus:dword ; CODE XREF: Ordinal1380+2Ep
					; DATA XREF: Ordinal1380+2Er ...
; SERVICE_STATUS_HANDLE	__stdcall RegisterServiceCtrlHandlerA(LPCSTR lpServiceName, LPHANDLER_FUNCTION lpHandlerProc)
		extrn RegisterServiceCtrlHandlerA:dword	; CODE XREF: .text:6B19CEA1p
					; DATA XREF: .text:6B19CEA1r ...
; SERVICE_STATUS_HANDLE	__stdcall RegisterServiceCtrlHandlerExA(LPCSTR lpServiceName, LPHANDLER_FUNCTION_EX lpHandlerProc, LPVOID lpContext)
		extrn RegisterServiceCtrlHandlerExA:dword ; CODE XREF: .text:6B19CE93p
					; DATA XREF: .text:6B19CE93r ...
; BOOL __stdcall StartServiceCtrlDispatcherA(const SERVICE_TABLE_ENTRYA	*lpServiceStartTable)
		extrn StartServiceCtrlDispatcherA:dword	; CODE XREF: Ordinal1361+70p
					; DATA XREF: Ordinal1361+70r ...

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 6B1C11F0h
		dd 2 dup(0)
; volatile LONG	Addend
Addend		dd 0			; DATA XREF: Ordinal129r
					; sub_6B1833E7+7o ...
		align 10h
dword_6B1C1200	dd 17h dup(?)		; DATA XREF: sub_6B181006+9o
					; sub_6B18101A+9o ...
byte_6B1C125C	db ?			; DATA XREF: sub_6B1A8790+94w
		align 10h
dword_6B1C1260	dd ?			; DATA XREF: HandlerRoutine:loc_6B192099r
					; HandlerRoutine:loc_6B1920A6r	...
dword_6B1C1264	dd ?			; DATA XREF: Ordinal1083+10w
					; TopLevelExceptionFilterr ...
dword_6B1C1268	dd ?			; DATA XREF: Ordinal1237+16w
					; sub_6B19A6AAr ...
		align 10h
; struct _OSVERSIONINFOA VersionInformation
VersionInformation _OSVERSIONINFOA <?>	; DATA XREF: Ordinal1282+11o
					; Ordinal1282+20w ...
; struct _SYSTEM_INFO SystemInfo
SystemInfo	_SYSTEM_INFO <?>	; DATA XREF: Ordinal1282+4Bo
					; Ordinal1276+5o
byte_6B1C1328	db ?			; DATA XREF: Ordinal1283:loc_6B19B152w
					; Ordinal1274+5r
byte_6B1C1329	db ?			; DATA XREF: Ordinal1283+13r
					; Ordinal1283+1C2w
byte_6B1C132A	db ?			; DATA XREF: Ordinal1282r
					; Ordinal1282+60w ...
		align 4
dword_6B1C132C	dd ?			; DATA XREF: Ordinal1310+10w Handlerr	...
dword_6B1C1330	dd ?			; DATA XREF: Ordinal1353+10w
					; sub_6B19C97Er ...
dword_6B1C1334	dd ?			; DATA XREF: sub_6B19CC72+5r
					; sub_6B19CD75:loc_6B19CD8Er ...
ADVAPI32_dll_handle dd ?		; DATA XREF: .rdata:6B1BD8F8o
dword_6B1C133C	dd ?			; DATA XREF: sub_6B1A844A+16Er
					; sub_6B1A844A+176w
dword_6B1C1340	dd ?			; DATA XREF: sub_6B1A844A+111r
					; sub_6B1A844A+1E8r
dword_6B1C1344	dd ?			; DATA XREF: sub_6B1A844A:loc_6B1A8508r
					; sub_6B1A844A+E2r ...
dword_6B1C1348	dd 0Fh dup(?)		; DATA XREF: sub_6B181508+3o
					; sub_6B1A9B99o ...
dword_6B1C1384	dd ?			; DATA XREF: sub_6B1A9BAF+Bw
					; sub_6B1A9BD7o ...
dword_6B1C1388	dd ?			; DATA XREF: sub_6B1A9BAF+15w
byte_6B1C138C	db ?			; DATA XREF: sub_6B1A9BAF+1Aw
		align 10h
dword_6B1C1390	dd ?			; DATA XREF: sub_6B181879r
					; sub_6B181879+8o ...
		dd 6 dup(?)
dword_6B1C13AC	dd ?			; DATA XREF: _CRT_INIT(x,x,x)+8r
					; _CRT_INIT(x,x,x)+10w	...
dword_6B1C13B0	dd ?			; DATA XREF: _CRT_INIT(x,x,x)+21w
dword_6B1C13B4	dd ?			; DATA XREF: DllEntryPoint:loc_6B1A8D87r
					; DllEntryPoint+A6r
dword_6B1C13B8	dd ?			; DATA XREF: __onexit:loc_6B1A89AEo
					; _CRT_INIT(x,x,x)+4Aw	...
; void *Memory
Memory		dd ?			; DATA XREF: __onexitr	__onexit+14o ...
		align 1000h
_data		ends


		end DllEntryPoint
